/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48466-0-0
Nro. O.S. : 1098369
Nome      : Cria - TGFICM PERCTRAVAMED
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: PERCTRAVAMED
TipoObjeto: COLUMN
NomeTabela: TGFICM
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFICM ADD PERCTRAVAMED FLOAT
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 28/02/2018 21:21:56
Num.Script: 48573-0-0
Nro. O.S. : 1130139
Nome      : Cria - TGFCCA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TGFCCA
NomeObjeto: TGFCCA
TipoObjeto: TABLE
NomeTabela: TGFCCA
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TGFCCA
(
  NUNOTA          NUMBER(10)        NOT NULL,
  UUID               VARCHAR2(50)    NOT NULL,
  PARAMS          VARCHAR2(4000),
  DHINCLUSAO  DATE,
  TIPO               CHAR(1),
  LOG                CLOB,
  PRIMARY KEY (NUNOTA, UUID)
)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48588-0-0
Nro. O.S. : 1104890
Nome      : Ajusta - TFPFOR CODFORM 238
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Ajusta - TFPFOR CODFORM 238
NomeObjeto: CODFORM
TipoObjeto: COLUMN
NomeTabela: TFPFOR
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
  P_CODFORMULA      TFPFOR.CODFORM%TYPE;
  P_DESCRFORMULA    TFPFOR.DESCRFORM%TYPE;
  P_DESCRFORMNOVO   TFPFOR.DESCRFORM%TYPE;
  P_FORMULA         VARCHAR2(4000);
  P_FORMULANOVO     VARCHAR2(4000);
  P_CODFORMIND      VARCHAR2(4000);
  P_CODFORMINDNOVO  VARCHAR2(4000);
  P_SANKHYA         TFPFOR.SANKHYA%TYPE;
BEGIN
  
  P_CODFORMULA := 238;
  
  BEGIN
    SELECT FORMULA, DESCRFORM, CODFORMIND, SANKHYA
    INTO P_FORMULA, P_DESCRFORMULA, P_CODFORMIND, P_SANKHYA
    FROM TFPFOR
    WHERE CODFORM = P_CODFORMULA;
  EXCEPTION WHEN NO_DATA_FOUND THEN
    P_FORMULA := 'A';
    P_CODFORMIND := NULL;
    P_DESCRFORMULA := NULL;
    P_SANKHYA := 'S'; 
  END;
  
  IF P_SANKHYA = 'N' THEN
    RETURN;
  END IF;
  
  P_DESCRFORMNOVO := 'MEDIAS ART 479 CONTRATO DETERM';
  P_FORMULANOVO := 'IF(QuelTFPafaC.CODAFAST = 63, IF(&DTDEMISSAO < IF(&DTDEMISSAO < (CTOD(QueFuncionario.DTFIMCONTRATO)), CTOD(QueFuncionario.DTFIMCONTRATO),''01/01/1900'') > 0, MemGetVar(''varDTCONTRATO''),CTOD(''01/01/1900''),(FMedEve(QueFuncionario.CODEMP, QueFuncionario.CODFUNC,&F1002, &Refere,''R'') / 30) * (MemGetVar(''varDTCONTRATO'') - &DTDEMISSAO),0),0)';
  P_CODFORMINDNOVO := '';
  
  IF P_FORMULA = 'A' THEN
    INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
      VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
             'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO);
    
    IF P_CODFORMINDNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO);
    END IF;
    
    IF P_DESCRFORMNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO);
    END IF;
    
    INSERT INTO TFPFOR (CODFORM, DESCRFORM, SANKHYA, FORMULA, CODFORMIND)
      VALUES(P_CODFORMULA, P_DESCRFORMNOVO, 'S', P_FORMULANOVO, P_CODFORMINDNOVO);
    
  ELSIF (P_FORMULANOVO <> P_FORMULA OR 
         NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') OR 
         NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z')) 
  THEN
    
    IF P_FORMULANOVO <> P_FORMULA THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO, P_FORMULA);
    END IF;
    
    IF NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO, P_CODFORMIND);
    END IF;
    
    IF NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO, P_DESCRFORMULA);
    END IF;
    
    UPDATE TFPFOR
    SET FORMULA = P_FORMULANOVO
    , DESCRFORM = P_DESCRFORMNOVO
    , CODFORMIND = P_CODFORMINDNOVO
    , FORMULANTERIOR = CASE WHEN FORMULA <> P_FORMULANOVO THEN P_FORMULA ELSE FORMULANTERIOR END
    , DTALTER = SYSDATE
    , CODUSU = 0
    WHERE CODFORM = P_CODFORMULA
    AND SANKHYA = 'S';
    
  END IF;
  
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48589-0-0
Nro. O.S. : 1104890
Nome      : Ajusta - TFPFOR CODFORM 239
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Ajusta - TFPFOR CODFORM 239
NomeObjeto: CODFORM
TipoObjeto: COLUMN
NomeTabela: TFPFOR
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
  P_CODFORMULA      TFPFOR.CODFORM%TYPE;
  P_DESCRFORMULA    TFPFOR.DESCRFORM%TYPE;
  P_DESCRFORMNOVO   TFPFOR.DESCRFORM%TYPE;
  P_FORMULA         VARCHAR2(4000);
  P_FORMULANOVO     VARCHAR2(4000);
  P_CODFORMIND      VARCHAR2(4000);
  P_CODFORMINDNOVO  VARCHAR2(4000);
  P_SANKHYA         TFPFOR.SANKHYA%TYPE;
BEGIN
  
  P_CODFORMULA := 239;
  
  BEGIN
    SELECT FORMULA, DESCRFORM, CODFORMIND, SANKHYA
    INTO P_FORMULA, P_DESCRFORMULA, P_CODFORMIND, P_SANKHYA
    FROM TFPFOR
    WHERE CODFORM = P_CODFORMULA;
  EXCEPTION WHEN NO_DATA_FOUND THEN
    P_FORMULA := 'A';
    P_CODFORMIND := NULL;
    P_DESCRFORMULA := NULL;
    P_SANKHYA := 'S'; 
  END;
  
  IF P_SANKHYA = 'N' THEN
    RETURN;
  END IF;
  
  P_DESCRFORMNOVO := 'MEDIAS ART 480 CONTRATO DETERM';
  P_FORMULANOVO := 'IF(QuelTFPafaC.CODAFAST = 78, IF(&DTDEMISSAO < IF(MemSetVar(''varDTCONTRATO'',CTOD(PDESPARAM(''DTTERMINO'',''TFPFUN'',''CODEMP =:INT_CODEMP AND CODFUNC = :INT_CODFUNC'',STR(queFuncionario.CODEMP),STR(queFuncionario.CODFUNC)))) > 0, MemGetVar(''varDTCONTRATO''), CTOD(''01/01/1900'')),(FMedEve(QueFuncionario.CODEMP, QueFuncionario.CODFUNC, &F1002, &Refere,''R'') / 30)* (MemGetVar(''varDTCONTRATO'') - &DTDEMISSAO),0),0)';
  P_CODFORMINDNOVO := '';
  
  IF P_FORMULA = 'A' THEN
    INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
      VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
             'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO);
    
    IF P_CODFORMINDNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO);
    END IF;
    
    IF P_DESCRFORMNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO);
    END IF;
    
    INSERT INTO TFPFOR (CODFORM, DESCRFORM, SANKHYA, FORMULA, CODFORMIND)
      VALUES(P_CODFORMULA, P_DESCRFORMNOVO, 'S', P_FORMULANOVO, P_CODFORMINDNOVO);
    
  ELSIF (P_FORMULANOVO <> P_FORMULA OR 
         NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') OR 
         NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z')) 
  THEN
    
    IF P_FORMULANOVO <> P_FORMULA THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO, P_FORMULA);
    END IF;
    
    IF NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO, P_CODFORMIND);
    END IF;
    
    IF NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO, P_DESCRFORMULA);
    END IF;
    
    UPDATE TFPFOR
    SET FORMULA = P_FORMULANOVO
    , DESCRFORM = P_DESCRFORMNOVO
    , CODFORMIND = P_CODFORMINDNOVO
    , FORMULANTERIOR = CASE WHEN FORMULA <> P_FORMULANOVO THEN P_FORMULA ELSE FORMULANTERIOR END
    , DTALTER = SYSDATE
    , CODUSU = 0
    WHERE CODFORM = P_CODFORMULA
    AND SANKHYA = 'S';
    
  END IF;
  
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48590-0-0
Nro. O.S. : 1111625
Nome      : Altera - Stp_Gerar_Livro_Fin
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - Stp_Gerar_Livro_Fin
NomeObjeto: Stp_Gerar_Livro_Fin
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE Stp_Gerar_Livro_Fin (
   P_DTINI        IN     DATE,
   P_DTFIM        IN     DATE,
   P_CODEMP       IN     SMALLINT,
   P_CODEMPDEST   IN     SMALLINT,
   P_CONT            OUT INT)
AS
   P_COUNT            INT;
   P_FRETERENEG       TSIPAR.LOGICO%TYPE;
   P_DIFICMS          TGFLIV.DIFICMS%TYPE;
   P_ALIQ             TGFICM.ALIQUOTA%TYPE;
   P_CODEMPORIG_ANT   TGFEMP.CODEMP%TYPE;
   P_CODPARC_ANT      TGFPAR.CODPARC%TYPE;
   P_UFORIGEM         TSIUFS.UF%TYPE;
   P_UFDESTINO        TSIUFS.UF%TYPE;
   P_CODCFO           TGFCFO.CODCFO%TYPE;
   P_CODCFO_ANT       TGFCFO.CODCFO%TYPE;
   P_CODUFEMP         TSIUFS.CODUF%TYPE;
   P_COMPENSAIPI      TGFEMP.COMPIPI%TYPE;
   P_QTDLIV           INT;
   P_CODCIDINICTE_ANT        TSICID.CODCID%TYPE;
   P_CODCIDFIMCTE_ANT        TSICID.CODCID%TYPE;

   CURSOR cLivro
   IS
        SELECT *
          FROM (  SELECT MIN (FIN.NUFIN) AS NUNOTA,
                         TRUNC (FIN.DTENTSAI) AS DTFILT,
                         FIN.DTNEG AS DTDOC,
                         TRUNC(CASE
                                  WHEN TPO.ATUALLIVFIS = 'E' THEN FIN.DTENTSAI
                                  ELSE FIN.DTNEG
                               END)
                            AS DHMOV,
                         TPO.ATUALLIVFIS,
                         UP.UF UFPARC,
                         CP.UF CODUFPARC,
                         FIN.NUMNOTA,
                         CASE
                            WHEN TRIM (FIN.SERIENOTA) IS NOT NULL
                            THEN
                               FIN.SERIENOTA
                            WHEN GE.GRAVARSERIENOTA = 'N'
                            THEN
                               'U'
                            ELSE
                               ' '
                         END
                            AS SERIENOTA,
                         FIN.CODEMP AS CODEMPORIG,
                         CASE
                            WHEN P_CODEMPDEST = 0 THEN FIN.CODEMP
                            ELSE P_CODEMPDEST
                         END
                            AS CODEMP,
                         PAR.CODPARC,
                         NVL(FIN.CODCFO, 0) AS CODCFO,
                         NVL(TPO.CODCFO_ENTRADA, 0) AS CODCFO_ENTRADA,
                         NVL(TPO.CODCFO_ENTRADA_FORA, 0) AS CODCFO_ENTRADA_FORA,
                         NVL(TPO.CODCFO_SAIDA, 0) AS CODCFO_SAIDA,
                         NVL(TPO.CODCFO_SAIDA_FORA, 0) AS CODCFO_SAIDA_FORA,
                         TIT.ESPDOC,
                         TPO.CODMODDOC,
                         SUM (FIN.VLRDESDOB) AS VLRCTB,
                         CASE
                            WHEN EMP.SIMPLES = 'S' AND EMP.CODREGTRIB = 1
                            THEN
                               CASE
                                  WHEN (TPO.ATUALLIVFIS = 'S'
                                        OR (TPO.ATUALLIVFIS = 'E'
                                            AND GE.TIPICMSTOPENTSIMNAC = 'N'))
                                  THEN
                                     '3'
                                  ELSE
                                     TPO.TIPICMS
                               END
                            ELSE
                               TPO.TIPICMS
                         END
                            AS TIPICMS,
                         ROUND (SUM (FIN.BASEICMS), 2) AS BASEICMS,
                         ROUND (
                            SUM (FIN.BASEICMS * FIN.ALIQICMS / 100) / SUM(CASE
                                     WHEN FIN.BASEICMS <> 0 THEN FIN.BASEICMS
                                     ELSE 1
                                  END)
                            * 100,
                            2)
                            AS ALIQICMS,
                         ROUND (SUM (FIN.BASEICMS * FIN.ALIQICMS / 100), 2)
                            AS VLRICMS,
                         0.00 AS ISENTASICMS,
                         0.00 AS OUTRASICMS,
                         TPO.TIPIPI,
                         CASE WHEN TPO.ATUALLIVFIS = 'E' THEN 'E' ELSE 'S' END
                            AS ENTSAI,
                         CASE
                            WHEN TPO.CODMODDOC  IN (57,67) THEN FIN.CHAVECTE
                            ELSE NULL
                         END
                            AS CHAVECTE,
                         CASE
                            WHEN TPO.CODMODDOC  IN (57,67) THEN FIN.CHAVECTEREF
                            ELSE NULL
                         END
                            AS CHAVECTEREF,
                         PAR.CLASSIFICMS,
                         TPO.CALCDIFICMS,
                         CASE WHEN TPO.CODMODDOC IN (8, 57, 67) THEN FIN.CODCIDINICTE ELSE NULL END CODCIDINICTE,
                         CASE WHEN TPO.CODMODDOC IN (8, 57, 67) THEN FIN.CODCIDFIMCTE ELSE NULL END CODCIDFIMCTE,
                         PAR.CODCID AS CODCIDPARC,
                         FIN.CODTRIB
                    FROM TGFFIN FIN,
                         TGFTOP TPO,
                         TGFPAR PAR,
                         TSICID CP,
                         TGFTIT TIT,
                         TSIUFS UP,
                         TGFEMP GE,
                         TSIEMP EMP
                   WHERE (    FIN.DTENTSAI IS NOT NULL
                          AND TRUNC (FIN.DTENTSAI) >= P_DTINI
                          AND TRUNC (FIN.DTENTSAI) < P_DTFIM)
                         AND FIN.CODEMP = GE.CODEMP
                         AND GE.CODEMP = EMP.CODEMP
                         AND GE.GERARLIVROS = 'S'
                         AND (P_CODEMP = 0 OR GE.CODEMP = P_CODEMP)
                         AND ( ( (FIN.ORIGEM = 'F')
                                AND (FIN.NURENEG IS NULL
                                     OR EXISTS
                                          (SELECT 1
                                             FROM TGFREN REN
                                            WHERE     REN.NUFIN = FIN.NUFIN
                                                  AND REN.NURENEGORIG = 0
                                                  AND FIN.RECDESP = 0)))
                              OR (    (P_FRETERENEG = 'S')
                                  AND (FIN.RECDESP <> 0)
                                  AND ( (FIN.DESDOBDUPL = 'F')
                                       OR EXISTS (SELECT 1
                                                    FROM TGFFNF
                                                   WHERE NUFIN = FIN.NUFIN)
                                       OR (TPO.CODMODDOC  IN (57,67) AND TPO.TIPMOV = 'I')))
                              OR ( (P_FRETERENEG = 'N')
                                  AND ( (FIN.DESDOBDUPL = 'F')
                                       OR EXISTS (SELECT 1
                                                    FROM TGFFNF
                                                   WHERE NUFIN = FIN.NUFIN))
                                  AND ( (FIN.RECDESP = 0
                                         AND FIN.NURENEG IS NOT NULL
                                         AND NOT EXISTS
                                               (SELECT 1
                                                  FROM TGFREN REN
                                                 WHERE REN.NUFIN = FIN.NUFIN
                                                       AND NURENEGORIG <> 0))
                                       OR (FIN.RECDESP <> 0
                                           AND FIN.NURENEG IS NULL))))
                         AND FIN.CODTIPOPER = TPO.CODTIPOPER
                         AND FIN.DHTIPOPER = TPO.DHALTER
                         AND TPO.ATUALLIVFIS <> 'N'
                         AND TPO.ATUALLIVFIS <> 'A'
                         AND FIN.CODPARC = PAR.CODPARC
                         AND CASE WHEN TPO.CODMODDOC IN (8, 57, 67) THEN NVL(FIN.CODCIDINICTE, PAR.CODCID) ELSE PAR.CODCID END = CP.CODCID
                         AND CP.UF = UP.CODUF
                         AND FIN.CODTIPTIT = TIT.CODTIPTIT
                         AND FIN.PROVISAO = 'N'
                GROUP BY FIN.DTENTSAI,
                         FIN.DTNEG,
                         TPO.ATUALLIVFIS,
                         UP.UF,
                         CP.UF,
                         FIN.NUMNOTA,
                         CASE
                            WHEN TRIM (FIN.SERIENOTA) IS NOT NULL
                            THEN
                               FIN.SERIENOTA
                            WHEN GE.GRAVARSERIENOTA = 'N'
                            THEN
                               'U'
                            ELSE
                               ' '
                         END,
                         FIN.CODEMP,
                         PAR.CODPARC,
                         NVL(FIN.CODCFO, 0),
                         NVL(TPO.CODCFO_ENTRADA, 0),
                         NVL(TPO.CODCFO_ENTRADA_FORA, 0),
                         NVL(TPO.CODCFO_SAIDA, 0),
                         NVL(TPO.CODCFO_SAIDA_FORA, 0),
                         TIT.ESPDOC,
                         TPO.CODMODDOC,
                         CASE
                            WHEN EMP.SIMPLES = 'S' AND EMP.CODREGTRIB = 1
                            THEN
                               CASE
                                  WHEN (TPO.ATUALLIVFIS = 'S'
                                        OR (TPO.ATUALLIVFIS = 'E'
                                            AND GE.TIPICMSTOPENTSIMNAC = 'N'))
                                  THEN
                                     '3'
                                  ELSE
                                     TPO.TIPICMS
                               END
                            ELSE
                               TPO.TIPICMS
                         END,
                         TPO.TIPIPI,
                         CASE
                            WHEN TPO.CODMODDOC  IN (57,67) THEN FIN.CHAVECTE
                            ELSE NULL
                         END,
                         CASE
                            WHEN TPO.CODMODDOC  IN (57,67) THEN FIN.CHAVECTEREF
                            ELSE NULL
                         END,
                         PAR.CLASSIFICMS,
                         TPO.CALCDIFICMS,
                         CASE WHEN TPO.CODMODDOC IN (8, 57, 67) THEN FIN.CODCIDINICTE ELSE NULL END,
                         CASE WHEN TPO.CODMODDOC IN (8, 57, 67) THEN FIN.CODCIDFIMCTE ELSE NULL END,
                         PAR.CODCID,
                         FIN.CODTRIB
                UNION ALL
                  SELECT MIN (FIN.NUFIN) AS NUNOTA,
                         TRUNC (FIN.DTNEG) AS DTFILT,
                         FIN.DTNEG AS DTDOC,
                         TRUNC (FIN.DTNEG) AS DHMOV,
                         TPO.ATUALLIVFIS,
                         UP.UF UFPARC,
                         CP.UF CODUFPARC,
                         FIN.NUMNOTA,
                         CASE
                            WHEN TRIM (FIN.SERIENOTA) IS NOT NULL
                            THEN
                               FIN.SERIENOTA
                            WHEN GE.GRAVARSERIENOTA = 'N'
                            THEN
                               'U'
                            ELSE
                               ' '
                         END
                            AS SERIENOTA,
                         FIN.CODEMP AS CODEMPORIG,
                         CASE
                            WHEN P_CODEMPDEST = 0 THEN FIN.CODEMP
                            ELSE P_CODEMPDEST
                         END
                            AS CODEMP,
                         PAR.CODPARC,
                         NVL(FIN.CODCFO, 0) AS CODCFO,
                         NVL(TPO.CODCFO_ENTRADA, 0) AS CODCFO_ENTRADA,
                         NVL(TPO.CODCFO_ENTRADA_FORA, 0) AS CODCFO_ENTRADA_FORA,
                         NVL(TPO.CODCFO_SAIDA, 0) AS CODCFO_SAIDA,
                         NVL(TPO.CODCFO_SAIDA_FORA, 0) AS CODCFO_SAIDA_FORA,
                         TIT.ESPDOC,
                         TPO.CODMODDOC,
                         SUM (FIN.VLRDESDOB) AS VLRCTB,
                         CASE
                            WHEN EMP.SIMPLES = 'S' AND EMP.CODREGTRIB = 1
                            THEN
                               CASE
                                  WHEN (TPO.ATUALLIVFIS = 'S'
                                        OR (TPO.ATUALLIVFIS = 'E'
                                            AND GE.TIPICMSTOPENTSIMNAC = 'N'))
                                  THEN
                                     '3'
                                  ELSE
                                     TPO.TIPICMS
                               END
                            ELSE
                               TPO.TIPICMS
                         END
                            AS TIPICMS,
                         ROUND (SUM (FIN.BASEICMS), 2) AS BASEICMS,
                         ROUND (
                            SUM (FIN.BASEICMS * FIN.ALIQICMS / 100) / SUM(CASE
                                     WHEN FIN.BASEICMS <> 0 THEN FIN.BASEICMS
                                     ELSE 1
                                  END)
                            * 100,
                            2)
                            AS ALIQICMS,
                         ROUND (SUM (FIN.BASEICMS * FIN.ALIQICMS / 100), 2)
                            AS VLRICMS,
                         0.00 AS ISENTASICMS,
                         0.00 AS OUTRASICMS,
                         TPO.TIPIPI,
                         CASE WHEN TPO.ATUALLIVFIS = 'E' THEN 'E' ELSE 'S' END
                            AS ENTSAI,
                         CASE
                            WHEN TPO.CODMODDOC  IN (57,67) THEN FIN.CHAVECTE
                            ELSE NULL
                         END
                            AS CHAVECTE,
                         CASE
                            WHEN TPO.CODMODDOC  IN (57,67) THEN FIN.CHAVECTEREF
                            ELSE NULL
                         END
                            AS CHAVECTEREF,
                         PAR.CLASSIFICMS,
                         TPO.CALCDIFICMS,
                         CASE WHEN TPO.CODMODDOC IN (8, 57, 67) THEN FIN.CODCIDINICTE ELSE NULL END CODCIDINICTE,
                         CASE WHEN TPO.CODMODDOC IN (8, 57, 67) THEN FIN.CODCIDFIMCTE ELSE NULL END CODCIDFIMCTE,
                         PAR.CODCID AS CODCIDPARC,
                         FIN.CODTRIB
                    FROM TGFFIN FIN,
                         TGFTOP TPO,
                         TGFPAR PAR,
                         TSICID CP,
                         TGFTIT TIT,
                         TSIUFS UP,
                         TGFEMP GE,
                         TSIEMP EMP
                   WHERE (    FIN.DTENTSAI IS NULL
                          AND TRUNC (FIN.DTNEG) >= P_DTINI
                          AND TRUNC (FIN.DTNEG) < P_DTFIM)
                         AND FIN.CODEMP = GE.CODEMP
                         AND GE.CODEMP = EMP.CODEMP
                         AND GE.GERARLIVROS = 'S'
                         AND (P_CODEMP = 0 OR GE.CODEMP = P_CODEMP)
                         AND ( ( (FIN.ORIGEM = 'F')
                                AND (FIN.NURENEG IS NULL
                                     OR EXISTS
                                          (SELECT 1
                                             FROM TGFREN REN
                                            WHERE     REN.NUFIN = FIN.NUFIN
                                                  AND REN.NURENEGORIG = 0
                                                  AND FIN.RECDESP = 0)))
                              OR (    (P_FRETERENEG = 'S')
                                  AND (FIN.RECDESP <> 0)
                                  AND ( (FIN.DESDOBDUPL = 'F')
                                       OR EXISTS (SELECT 1
                                                    FROM TGFFNF
                                                   WHERE NUFIN = FIN.NUFIN)
                                       OR (TPO.CODMODDOC  IN (57,67) AND TPO.TIPMOV = 'I')))
                              OR ( (P_FRETERENEG = 'N')
                                  AND ( (FIN.DESDOBDUPL = 'F')
                                       OR EXISTS (SELECT 1
                                                    FROM TGFFNF
                                                   WHERE NUFIN = FIN.NUFIN))
                                  AND ( (FIN.RECDESP = 0
                                         AND FIN.NURENEG IS NOT NULL
                                         AND NOT EXISTS
                                               (SELECT 1
                                                  FROM TGFREN REN
                                                 WHERE REN.NUFIN = FIN.NUFIN
                                                       AND NURENEGORIG <> 0))
                                       OR (FIN.RECDESP <> 0
                                           AND FIN.NURENEG IS NULL))))
                         AND FIN.CODTIPOPER = TPO.CODTIPOPER
                         AND FIN.DHTIPOPER = TPO.DHALTER
                         AND TPO.ATUALLIVFIS <> 'N'
                         AND TPO.ATUALLIVFIS <> 'A'
                         AND FIN.CODPARC = PAR.CODPARC
                         AND CASE WHEN TPO.CODMODDOC IN (8, 57, 67) THEN NVL(FIN.CODCIDINICTE, PAR.CODCID) ELSE PAR.CODCID END = CP.CODCID
                         AND CP.UF = UP.CODUF
                         AND FIN.CODTIPTIT = TIT.CODTIPTIT
                         AND FIN.PROVISAO = 'N'
                GROUP BY FIN.DTENTSAI,
                         FIN.DTNEG,
                         TPO.ATUALLIVFIS,
                         UP.UF,
                         CP.UF,
                         FIN.NUMNOTA,
                         CASE
                            WHEN TRIM (FIN.SERIENOTA) IS NOT NULL
                            THEN
                               FIN.SERIENOTA
                            WHEN GE.GRAVARSERIENOTA = 'N'
                            THEN
                               'U'
                            ELSE
                               ' '
                         END,
                         FIN.CODEMP,
                         PAR.CODPARC,
                         NVL(FIN.CODCFO, 0),
                         NVL(TPO.CODCFO_ENTRADA, 0),
                         NVL(TPO.CODCFO_ENTRADA_FORA, 0),
                         NVL(TPO.CODCFO_SAIDA, 0),
                         NVL(TPO.CODCFO_SAIDA_FORA, 0),
                         TIT.ESPDOC,
                         TPO.CODMODDOC,
                         CASE
                            WHEN EMP.SIMPLES = 'S' AND EMP.CODREGTRIB = 1
                            THEN
                               CASE
                                  WHEN (TPO.ATUALLIVFIS = 'S'
                                        OR (TPO.ATUALLIVFIS = 'E'
                                            AND GE.TIPICMSTOPENTSIMNAC = 'N'))
                                  THEN
                                     '3'
                                  ELSE
                                     TPO.TIPICMS
                               END
                            ELSE
                               TPO.TIPICMS
                         END,
                         TPO.TIPIPI,
                         CASE
                            WHEN TPO.CODMODDOC  IN (57,67) THEN FIN.CHAVECTE
                            ELSE NULL
                         END,
                         CASE
                            WHEN TPO.CODMODDOC  IN (57,67) THEN FIN.CHAVECTEREF
                            ELSE NULL
                         END,
                         PAR.CLASSIFICMS,
                         TPO.CALCDIFICMS,
                         CASE WHEN TPO.CODMODDOC IN (8, 57, 67) THEN FIN.CODCIDINICTE ELSE NULL END,
                         CASE WHEN TPO.CODMODDOC IN (8, 57, 67) THEN FIN.CODCIDFIMCTE ELSE NULL END,
                         PAR.CODCID,
                         FIN.CODTRIB) LIV
      ORDER BY LIV.CODEMPORIG;
BEGIN
   SELECT MIN (LOGICO)
     INTO P_FRETERENEG
     FROM TSIPAR
    WHERE CHAVE = 'LIVFRETERENEG';

   SELECT COMPIPI
     INTO P_COMPENSAIPI
     FROM TGFEMP
    WHERE CODEMP = P_CODEMP AND GERARLIVROS = 'S';

   IF P_FRETERENEG IS NULL
   THEN
      P_FRETERENEG := 'N';
   END IF;

   P_CONT := 0;

   DELETE FROM TGFLIV
         WHERE     DTFILT >= P_DTINI
               AND DTFILT < P_DTFIM
               AND (P_CODEMP = 0 OR CODEMPORIG = P_CODEMP)
               AND ORIGEM = 'F'
               AND DIGITADO <> 'S';

   P_CODEMPORIG_ANT := 0;
   P_CODPARC_ANT := 0;
   P_CODCFO_ANT := 0;
   P_CODCIDINICTE_ANT := 0;
   P_CODCIDFIMCTE_ANT := 0;
    
   FOR P_LIVRO IN cLivro
   LOOP
      IF P_CODEMPORIG_ANT <> P_LIVRO.CODEMPORIG OR P_CODPARC_ANT <> P_LIVRO.CODPARC OR P_CODCFO_ANT <> P_LIVRO.CODCFO OR P_CODCIDFIMCTE_ANT <> P_LIVRO.CODCIDFIMCTE OR P_CODCIDINICTE_ANT <> P_LIVRO.CODCIDINICTE THEN
         SELECT 
                CASE WHEN P_LIVRO.CODCIDINICTE IS NOT NULL THEN P_LIVRO.UFPARC
                   WHEN P_LIVRO.ATUALLIVFIS = 'E' THEN P_LIVRO.UFPARC
                   ELSE UE.UF
                END AS UFORIGEM,
                CASE WHEN P_LIVRO.CODCIDFIMCTE IS NOT NULL THEN UE.UF
                    WHEN P_LIVRO.ATUALLIVFIS = 'E' THEN UE.UF 
                    ELSE P_LIVRO.UFPARC
                END AS UFDESTINO,
                CASE
                   WHEN P_LIVRO.CODCFO <> 0
                   THEN
                      P_LIVRO.CODCFO
                   WHEN P_LIVRO.ATUALLIVFIS = 'E'
                   THEN
                      CASE
                         WHEN CE.UF = P_LIVRO.CODUFPARC
                         THEN
                            P_LIVRO.CODCFO_ENTRADA
                         ELSE
                            P_LIVRO.CODCFO_ENTRADA_FORA
                      END
                   ELSE
                      CASE
                         WHEN CE.UF = P_LIVRO.CODUFPARC
                         THEN
                            P_LIVRO.CODCFO_SAIDA
                         ELSE
                            P_LIVRO.CODCFO_SAIDA_FORA
                      END
                END
                   AS CODCFO,
                CE.UF AS CODUFEMP,
                CASE WHEN P_LIVRO.CODMODDOC NOT IN (8, 57, 67) THEN NULL WHEN P_LIVRO.CODCIDINICTE IS NOT NULL THEN P_LIVRO.CODCIDINICTE WHEN P_LIVRO.ATUALLIVFIS = 'E' THEN P_LIVRO.CODCIDPARC ELSE EMP.CODCID END,
                CASE WHEN P_LIVRO.CODMODDOC NOT IN (8, 57, 67) THEN NULL WHEN P_LIVRO.CODCIDFIMCTE IS NOT NULL THEN P_LIVRO.CODCIDFIMCTE WHEN P_LIVRO.ATUALLIVFIS = 'E' THEN EMP.CODCID  ELSE P_LIVRO.CODCIDPARC END
           INTO P_UFORIGEM,
                P_UFDESTINO,
                P_CODCFO,
                P_CODUFEMP,
                P_CODCIDINICTE_ANT,
                P_CODCIDFIMCTE_ANT
           FROM TSIEMP EMP, TSICID CE, TSIUFS UE
          WHERE     EMP.CODEMP = P_LIVRO.CODEMPORIG
                AND CASE WHEN P_LIVRO.CODCIDFIMCTE IS NOT NULL THEN P_LIVRO.CODCIDFIMCTE ELSE EMP.CODCID END = CE.CODCID
                AND CE.UF = UE.CODUF;

         P_CODEMPORIG_ANT := P_LIVRO.CODEMPORIG;
         P_CODPARC_ANT := P_LIVRO.CODPARC;
         P_CODCFO_ANT := P_LIVRO.CODCFO;
      END IF;

      P_CONT := P_CONT + 1;

      IF (P_LIVRO.ENTSAI = 'E') AND (P_CODCFO > 5000) AND (P_CODCFO < 7000)
      THEN
         P_CODCFO := P_CODCFO - 4000;
      ELSIF     (P_LIVRO.ENTSAI = 'S')
            AND (P_CODCFO > 1000)
            AND (P_CODCFO < 3000)
      THEN
         P_CODCFO := P_CODCFO + 4000;
      END IF;

      IF P_LIVRO.CODMODDOC <= 1
      THEN
         IF    P_CODCFO BETWEEN 140 AND 145
            OR P_CODCFO BETWEEN 1250 AND 1299
            OR P_CODCFO BETWEEN 240 AND 245
            OR P_CODCFO BETWEEN 2250 AND 2299
         THEN
            P_LIVRO.CODMODDOC := 06;
         ELSIF    P_CODCFO BETWEEN 150 AND 156
               OR P_CODCFO BETWEEN 1300 AND 1349
               OR P_CODCFO BETWEEN 250 AND 256
               OR P_CODCFO BETWEEN 2300 AND 2349
         THEN
            P_LIVRO.CODMODDOC := 22;
         ELSIF    P_CODCFO BETWEEN 160 AND 166
               OR P_CODCFO BETWEEN 1350 AND 1400
               OR P_CODCFO BETWEEN 260 AND 266
               OR P_CODCFO BETWEEN 2350 AND 2400
         THEN
            P_LIVRO.CODMODDOC := 08;
         ELSE
            P_LIVRO.CODMODDOC := 1;
         END IF;
      END IF;

      
      P_DIFICMS := 0;

      IF     P_LIVRO.CALCDIFICMS = 'S'
         AND P_UFORIGEM <> P_UFDESTINO
         AND P_LIVRO.BASEICMS > 0
      THEN
         SELECT COUNT ( * )
           INTO P_COUNT
           FROM TGFCFO
          WHERE CODCFO = P_CODCFO AND CALCDIFICMS = 'S';

         IF P_COUNT > 0
         THEN
            SELECT COUNT ( * ), MIN (I.ALIQUOTA)
              INTO P_COUNT, P_ALIQ
              FROM TGFICM I
             WHERE     I.UFORIG = P_CODUFEMP
                   AND I.UFDEST = P_CODUFEMP
                   AND I.TIPRESTRICAO = 'S'
                   AND I.TIPRESTRICAO2 = 'S';

            IF P_COUNT > 0
            THEN
               P_DIFICMS :=
                  ROUND (
                     (P_LIVRO.BASEICMS * P_ALIQ / 100) - P_LIVRO.VLRICMS,
                     2);

               IF P_DIFICMS < 0
               THEN
                  P_DIFICMS := 0;
               END IF;
            END IF;
         END IF;
      END IF;
      
      
      IF P_LIVRO.TIPICMS = 2
      THEN
         P_LIVRO.BASEICMS := 0;
         P_LIVRO.ALIQICMS := 0;
         P_LIVRO.VLRICMS := 0;
         P_LIVRO.ISENTASICMS := P_LIVRO.VLRCTB;
      ELSIF P_LIVRO.TIPICMS = 3
      THEN
         P_LIVRO.BASEICMS := 0;
         P_LIVRO.ALIQICMS := 0;
         P_LIVRO.VLRICMS := 0;
         P_LIVRO.OUTRASICMS := P_LIVRO.VLRCTB;
      ELSIF (P_LIVRO.TIPICMS = 4)
            OR ( (P_LIVRO.TIPICMS = 1) AND (P_LIVRO.CLASSIFICMS = 'I'))
      THEN
         P_LIVRO.ISENTASICMS := P_LIVRO.VLRCTB - P_LIVRO.BASEICMS;

         IF P_LIVRO.ISENTASICMS <> 0
         THEN
            P_LIVRO.TIPICMS := 2;
         ELSE
            P_LIVRO.TIPICMS := 1;
         END IF;
      ELSE
         P_LIVRO.OUTRASICMS := P_LIVRO.VLRCTB - P_LIVRO.BASEICMS;

         IF P_LIVRO.OUTRASICMS <> 0
         THEN
            P_LIVRO.TIPICMS := 3;
         ELSE
            P_LIVRO.TIPICMS := 1;
         END IF;
      END IF;

      SELECT COUNT(*) INTO P_QTDLIV
      FROM TGFLIV L 
      WHERE L.SEQUENCIA = 1 
            AND L.ORIGEM = 'F' 
            AND L.NUNOTA = P_LIVRO.NUNOTA
            AND L.CODEMP = P_LIVRO.CODEMP;      

      IF P_QTDLIV = 0 THEN
          INSERT INTO TGFLIV (ORIGEM,
                              NUNOTA,
                              SEQUENCIA,
                              DTFILT,
                              DTDOC,
                              DHMOV,
                              UFORIGEM,
                              UFDESTINO,
                              NUMNOTA,
                              SERIENOTA,
                              CODEMPORIG,
                              CODEMP,
                              EMPPARC,
                              CODPARC,
                              CODCFO,
                              ESPDOC,
                              CODMODDOC,
                              CODTRIB,
                              VLRCTB,
                              TIPICMS,
                              BASEICMS,
                              ALIQICMS,
                              VLRICMS,
                              ISENTASICMS,
                              OUTRASICMS,
                              TIPIPI,
                              BASEIPI,
                              ALIQIPI,
                              VLRIPI,
                              ISENTASIPI,
                              OUTRASIPI,
                              BASERETENCAO,
                              BASERETENCAOSEMRED,
                              ICMSRETENCAO,
                              VLRCTBTARE,
                              BASEICMSTARE,
                              VLRICMSTARE,
                              DIFICMS,
                              ENTSAI,
                              DIGITADO,
                              CHAVECTE,
                              CHAVECTEREF,
                              VLRICMSDIFALDEST,
                              VLRICMSDIFALREM,
                              VLRICMSFCP,
                              CODCIDINICTE,
                              CODCIDFIMCTE)
              VALUES ('F',
                      P_LIVRO.NUNOTA,
                      1,
                      P_LIVRO.DTFILT,
                      P_LIVRO.DTDOC,
                      P_LIVRO.DHMOV,
                      P_UFORIGEM,
                      P_UFDESTINO,
                      P_LIVRO.NUMNOTA,
                      P_LIVRO.SERIENOTA,
                      P_LIVRO.CODEMPORIG,
                      P_LIVRO.CODEMP,
                      'P',
                      P_LIVRO.CODPARC,
                      P_CODCFO,
                      P_LIVRO.ESPDOC,
                      P_LIVRO.CODMODDOC,
                      P_LIVRO.CODTRIB,
                      P_LIVRO.VLRCTB,
                      P_LIVRO.TIPICMS,
                      P_LIVRO.BASEICMS,
                      P_LIVRO.ALIQICMS,
                      P_LIVRO.VLRICMS,
                      P_LIVRO.ISENTASICMS,
                      P_LIVRO.OUTRASICMS,
                      P_LIVRO.TIPIPI,
                      0,
                      0,
                      0,
                      CASE
                         WHEN P_COMPENSAIPI = 'S' AND P_LIVRO.TIPIPI = 2
                         THEN
                            P_LIVRO.VLRCTB
                         ELSE
                            0
                      END,
                      CASE
                         WHEN P_COMPENSAIPI = 'S' AND P_LIVRO.TIPIPI = 3
                         THEN
                            P_LIVRO.VLRCTB
                         ELSE
                            0
                      END,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      P_DIFICMS,
                      P_LIVRO.ENTSAI,
                      'N',
                      P_LIVRO.CHAVECTE,
                      P_LIVRO.CHAVECTEREF,
                      0,
                      0,
                      0,
                      P_CODCIDINICTE_ANT,
                      P_CODCIDFIMCTE_ANT);
      ELSE
        P_CONT := P_CONT - 1;
      END IF;
   END LOOP;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48591-0-1000
Nro. O.S. : 1111625
Nome      : INSERE - THOOBJ - 4859000
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE STP_GERAR_LIVRO_FIN
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210000
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'STP_GERAR_LIVRO_FIN' NOMEOBJ, 48590 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, 'b67742921d566ef525c6a036f647e4ca' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'STP_GERAR_LIVRO_FIN' and THO.hashcode = 'b67742921d566ef525c6a036f647e4ca')
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48614-0-0
Nro. O.S. : 1129813
Nome      : Cria - TFPCMV CODCMV
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: CODCMV
TipoObjeto: COLUMN
NomeTabela: TFPCMV
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPCMV ADD CODCMV DECIMAL(10, 0)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48615-0-0
Nro. O.S. : 1129813
Nome      : Cria - TFPCMV MANUAL
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: MANUAL
TipoObjeto: COLUMN
NomeTabela: TFPCMV
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPCMV ADD MANUAL CHAR(1) DEFAULT 'N'
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48616-0-0
Nro. O.S. : 1129813
Nome      : Cria - TFPCMV CODEVENTO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: CODEVENTO
TipoObjeto: COLUMN
NomeTabela: TFPCMV
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPCMV ADD CODEVENTO DECIMAL(10, 0)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48617-0-0
Nro. O.S. : 1129813
Nome      : Cria - TFPCMV VLREXTRAEMP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLREXTRAEMP
TipoObjeto: COLUMN
NomeTabela: TFPCMV
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPCMV ADD VLREXTRAEMP FLOAT
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48618-0-0
Nro. O.S. : 1129813
Nome      : Cria - TFPCMV VLREXTRABEN
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLREXTRABEN
TipoObjeto: COLUMN
NomeTabela: TFPCMV
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPCMV ADD VLREXTRABEN FLOAT
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48619-0-0
Nro. O.S. : 1129813
Nome      : Cria - TFPCMV QTDITE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: QTDITE
TipoObjeto: COLUMN
NomeTabela: TFPCMV
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPCMV ADD QTDITE DECIMAL(10, 0)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48620-0-0
Nro. O.S. : 1129813
Nome      : Cria - TFPCMV INDBEN
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: INDBEN
TipoObjeto: COLUMN
NomeTabela: TFPCMV
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPCMV ADD INDBEN DECIMAL(10, 0)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48621-0-0
Nro. O.S. : 1129813
Nome      : Cria - TFPCMV INDEMP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: INDEMP
TipoObjeto: COLUMN
NomeTabela: TFPCMV
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPCMV ADD INDEMP DECIMAL(10, 0)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48622-0-0
Nro. O.S. : 1129813
Nome      : Cria - TFPBEN FORMULAIND
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: FORMULAIND
TipoObjeto: COLUMN
NomeTabela: TFPBEN
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPBEN ADD FORMULAIND VARCHAR2(1000)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48624-0-0
Nro. O.S. : 1129813
Nome      : Drop - PK_TFPCMV
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - PK_TFPCMV
NomeObjeto: PK_TFPCMV
TipoObjeto: PRIMARY KEY
NomeTabela: TFPCMV
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPCMV DROP CONSTRAINT PK_TFPCMV
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48624-0-1
Nro. O.S. : 1129813
Nome      : Drop - PK_TFPCMV
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - PK_TFPCMV
NomeObjeto: PK_TFPCMV
TipoObjeto: INDEX
NomeTabela: TFPCMV
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
    BEGIN
        EXECUTE IMMEDIATE 'DROP INDEX PK_TFPCMV';
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48625-0-0
Nro. O.S. : 1129813
Nome      : Script - CODCMV
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - CODCMV
NomeObjeto: CODCMV
TipoObjeto: COLUMN
NomeTabela: TFPCMV
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
UPDATE TFPCMV SET CODCMV = ROWNUM
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48626-0-0
Nro. O.S. : 1129813
Nome      : Altera - CODCMV
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - CODCMV
NomeObjeto: CODCMV
TipoObjeto: COLUMN
NomeTabela: TFPCMV
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
  L_NULLABLE VARCHAR2(1);
BEGIN
  SELECT NULLABLE INTO L_NULLABLE
  FROM USER_TAB_COLUMNS
  WHERE TABLE_NAME = 'TFPCMV'
  AND   COLUMN_NAME = 'CODCMV';

  IF L_NULLABLE IN ('Y','S') THEN
    EXECUTE IMMEDIATE 'ALTER TABLE TFPCMV MODIFY CODCMV NOT NULL';
  END IF;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48627-0-0
Nro. O.S. : 1129813
Nome      : Cria - PK_TFPCMV
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - PK_TFPCMV
NomeObjeto: PK_TFPCMV
TipoObjeto: PRIMARY KEY
NomeTabela: TFPCMV
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPCMV ADD CONSTRAINT PK_TFPCMV PRIMARY KEY (CODCMV)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48709-0-0
Nro. O.S. : 1130556
Nome      : Cria - TCBEMP DEREX
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: DEREX
TipoObjeto: COLUMN
NomeTabela: TCBEMP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TCBEMP ADD DEREX CHAR(1)';
   EXECUTE IMMEDIATE 'UPDATE TCBEMP SET DEREX = ''N''';
   EXECUTE IMMEDIATE 'ALTER TABLE TCBEMP ADD  CONSTRAINT CKC_DEREX_TCBEMP CHECK (DEREX IN (''S'',''N''))';
   EXECUTE IMMEDIATE 'ALTER TABLE TCBEMP MODIFY DEREX DEFAULT ''N'' NOT NULL';
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48710-0-0
Nro. O.S. : 1130556
Nome      : Drop - CKC_BLOCO_TCBECF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - CKC_BLOCO_TCBECF
NomeObjeto: CKC_BLOCO_TCBECF
TipoObjeto: CONSTRAINT
NomeTabela: TCBECF
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TCBECF DROP CONSTRAINT CKC_BLOCO_TCBECF
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48711-0-0
Nro. O.S. : 1130556
Nome      : Cria - CKC_BLOCO_TCBECF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - CKC_BLOCO_TCBECF
NomeObjeto: CKC_BLOCO_TCBECF
TipoObjeto: CONSTRAINT
NomeTabela: TCBECF
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TCBECF ADD CONSTRAINT CKC_BLOCO_TCBECF
  CHECK (BLOCO IN ('N','P','Q','T','U','W','X','Y','V'))
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48730-0-0
Nro. O.S. : 1127307
Nome      : Script - TFPCTG
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - TFPCTG
NomeObjeto: TFPCTG
TipoObjeto: TABLE
NomeTabela: TFPCTG
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN

    EXECUTE IMMEDIATE 'UPDATE TFPCTG 
                                       SET DESCRCATEGESOCIAL = ''PARTICIPANTE DE CURSO DE FORMAÇÃO, COMO ETAPA DE CONCURSO PÚBLICO, SEM VÍNCULO DE EMPREGO/ESTATUTÁRIO''
                                       WHERE CODCATEGESOCIAL = 904';

    EXECUTE IMMEDIATE 'UPDATE TFPCTG 
                                       SET DESCRCATEGESOCIAL = ''ATLETA NÃO PROFISSIONAL EM FORMAÇÃO QUE RECEBA BOLSA''
                                       WHERE CODCATEGESOCIAL = 905';

    EXECUTE IMMEDIATE 'UPDATE TFPCTG SET DESCRCATEGESOCIAL = ''EMPREGADO - CONTRATO DE TRABALHO INTERMITENTE''
                                        WHERE CODCATEGESOCIAL = 111';

END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48738-0-0
Nro. O.S. : 1127159
Nome      : Ajusta - TFPFOR CODFORM 407
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Ajusta - TFPFOR CODFORM 407
NomeObjeto: CODFORM
TipoObjeto: COLUMN
NomeTabela: TFPFOR
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
  P_CODFORMULA      TFPFOR.CODFORM%TYPE;
  P_DESCRFORMULA    TFPFOR.DESCRFORM%TYPE;
  P_DESCRFORMNOVO   TFPFOR.DESCRFORM%TYPE;
  P_FORMULA         VARCHAR2(4000);
  P_FORMULANOVO     VARCHAR2(4000);
  P_CODFORMIND      VARCHAR2(4000);
  P_CODFORMINDNOVO  VARCHAR2(4000);
  P_SANKHYA         TFPFOR.SANKHYA%TYPE;
BEGIN
  
  P_CODFORMULA := 407;
  
  BEGIN
    SELECT FORMULA, DESCRFORM, CODFORMIND, SANKHYA
    INTO P_FORMULA, P_DESCRFORMULA, P_CODFORMIND, P_SANKHYA
    FROM TFPFOR
    WHERE CODFORM = P_CODFORMULA;
  EXCEPTION WHEN NO_DATA_FOUND THEN
    P_FORMULA := 'A';
    P_CODFORMIND := NULL;
    P_DESCRFORMULA := NULL;
    P_SANKHYA := 'S'; 
  END;
  
  IF P_SANKHYA = 'N' THEN
    RETURN;
  END IF;
  
  P_DESCRFORMNOVO := 'LICENCA REMUNERADA';
  P_FORMULANOVO := 'IF((QueFuncionario.VINCULO <> 2) AND (&DIALICREM <> 0) AND (MemSetVar(''varDIASLICENCA'', IF((INT(MemGetVar(''varDIAFER'')) <= IF(quePrefSindicato.LANCFERADIANT = ''S'', &DIAFERREF, &DIAFER)),(&DIAFER + IF((quePrefSindicato.LANCFERADIANT = ''S''), &DIALICREMREF, &DIALICREM)) - MemGetVar(''varDIAFER''),0)) > 0),((QueFuncionario.SALBASE * IF(QueFuncionario.TIPSAL=5,QueFuncionario.HORASSEM*5,1) + &VLRINCORPORA)/30) *MemGetVar(''varDIASLICENCA''), 0)';
  P_CODFORMINDNOVO := 'MemGetVar(''varDIASLICENCA'')';
  
  IF P_FORMULA = 'A' THEN
    INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
      VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
             'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO);
    
    IF P_CODFORMINDNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO);
    END IF;
    
    IF P_DESCRFORMNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO);
    END IF;
    
    INSERT INTO TFPFOR (CODFORM, DESCRFORM, SANKHYA, FORMULA, CODFORMIND)
      VALUES(P_CODFORMULA, P_DESCRFORMNOVO, 'S', P_FORMULANOVO, P_CODFORMINDNOVO);
    
  ELSIF (P_FORMULANOVO <> P_FORMULA OR 
         NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') OR 
         NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z')) 
  THEN
    
    IF P_FORMULANOVO <> P_FORMULA THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO, P_FORMULA);
    END IF;
    
    IF NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO, P_CODFORMIND);
    END IF;
    
    IF NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO, P_DESCRFORMULA);
    END IF;
    
    UPDATE TFPFOR
    SET FORMULA = P_FORMULANOVO
    , DESCRFORM = P_DESCRFORMNOVO
    , CODFORMIND = P_CODFORMINDNOVO
    , FORMULANTERIOR = CASE WHEN FORMULA <> P_FORMULANOVO THEN P_FORMULA ELSE FORMULANTERIOR END
    , DTALTER = SYSDATE
    , CODUSU = 0
    WHERE CODFORM = P_CODFORMULA
    AND SANKHYA = 'S';
    
  END IF;
  
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48741-0-0
Nro. O.S. : 1128010
Nome      : Ajusta - TFPFOR CODFORM 902
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Ajusta - TFPFOR CODFORM 902
NomeObjeto: CODFORM
TipoObjeto: COLUMN
NomeTabela: TFPFOR
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
  P_CODFORMULA      TFPFOR.CODFORM%TYPE;
  P_DESCRFORMULA    TFPFOR.DESCRFORM%TYPE;
  P_DESCRFORMNOVO   TFPFOR.DESCRFORM%TYPE;
  P_FORMULA         VARCHAR2(4000);
  P_FORMULANOVO     VARCHAR2(4000);
  P_CODFORMIND      VARCHAR2(4000);
  P_CODFORMINDNOVO  VARCHAR2(4000);
  P_SANKHYA         TFPFOR.SANKHYA%TYPE;
BEGIN
  
  P_CODFORMULA := 902;
  
  BEGIN
    SELECT FORMULA, DESCRFORM, CODFORMIND, SANKHYA
    INTO P_FORMULA, P_DESCRFORMULA, P_CODFORMIND, P_SANKHYA
    FROM TFPFOR
    WHERE CODFORM = P_CODFORMULA;
  EXCEPTION WHEN NO_DATA_FOUND THEN
    P_FORMULA := 'A';
    P_CODFORMIND := NULL;
    P_DESCRFORMULA := NULL;
    P_SANKHYA := 'S'; 
  END;
  
  IF P_SANKHYA = 'N' THEN
    RETURN;
  END IF;
  
  P_DESCRFORMNOVO := 'INSS - FERIAS';
  P_FORMULANOVO := 'IF(QueFuncionario.VINCULO = 2,0,TRUNCFOL(IF(&INSSMESAMES = ''S'',&INSSCPLF,IF(&F5011 > FTF(1,3,&F5011,&Refere,QueFuncionario.TIPTAB), FTF(1,4,&F5011,&Refere,QueFuncionario.TIPTAB),((((&F5011 * FTF(1,1,&F5011,&Refere,QueFuncionario.TIPTAB)) / 100) * IF(&F5011 > 0,(&E1902 / &F5011),0))+ IF(&F5011 <= FTF(1,3,&F5011,&Refere,QueFuncionario.TIPTAB),((&E505 + FBE(QueFuncionario.CODEMP,QueFuncionario.CODFUNC,&Refere,''F,1,2,3'',''1902'') * FTF(1,1,&F5011,&Refere,QueFuncionario.TIPTAB)) / 100),0)))),2)) - (&E506 + ABS(FBE(QueFuncionario.CODEMP,QueFuncionario.CODFUNC,&Refere,''F,1,2,3'',''902'')))';
  P_CODFORMINDNOVO := 'FTF(1,1,&F5011 ,&Refere,QueFuncionario.TIPTAB)';
  
  IF P_FORMULA = 'A' THEN
    INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
      VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
             'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO);
    
    IF P_CODFORMINDNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO);
    END IF;
    
    IF P_DESCRFORMNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO);
    END IF;
    
    INSERT INTO TFPFOR (CODFORM, DESCRFORM, SANKHYA, FORMULA, CODFORMIND)
      VALUES(P_CODFORMULA, P_DESCRFORMNOVO, 'S', P_FORMULANOVO, P_CODFORMINDNOVO);
    
  ELSIF (P_FORMULANOVO <> P_FORMULA OR 
         NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') OR 
         NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z')) 
  THEN
    
    IF P_FORMULANOVO <> P_FORMULA THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO, P_FORMULA);
    END IF;
    
    IF NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO, P_CODFORMIND);
    END IF;
    
    IF NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO, P_DESCRFORMULA);
    END IF;
    
    UPDATE TFPFOR
    SET FORMULA = P_FORMULANOVO
    , DESCRFORM = P_DESCRFORMNOVO
    , CODFORMIND = P_CODFORMINDNOVO
    , FORMULANTERIOR = CASE WHEN FORMULA <> P_FORMULANOVO THEN P_FORMULA ELSE FORMULANTERIOR END
    , DTALTER = SYSDATE
    , CODUSU = 0
    WHERE CODFORM = P_CODFORMULA
    AND SANKHYA = 'S';
    
  END IF;
  
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48748-0-0
Nro. O.S. : 1128862
Nome      : Ajusta - TFPFOR CODFORM 9000
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Ajusta - TFPFOR CODFORM 9000
NomeObjeto: CODFORM
TipoObjeto: COLUMN
NomeTabela: TFPFOR
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
  P_CODFORMULA      TFPFOR.CODFORM%TYPE;
  P_DESCRFORMULA    TFPFOR.DESCRFORM%TYPE;
  P_DESCRFORMNOVO   TFPFOR.DESCRFORM%TYPE;
  P_FORMULA         VARCHAR2(4000);
  P_FORMULANOVO     VARCHAR2(4000);
  P_CODFORMIND      VARCHAR2(4000);
  P_CODFORMINDNOVO  VARCHAR2(4000);
  P_SANKHYA         TFPFOR.SANKHYA%TYPE;
BEGIN
  
  P_CODFORMULA := 9000;
  
  BEGIN
    SELECT FORMULA, DESCRFORM, CODFORMIND, SANKHYA
    INTO P_FORMULA, P_DESCRFORMULA, P_CODFORMIND, P_SANKHYA
    FROM TFPFOR
    WHERE CODFORM = P_CODFORMULA;
  EXCEPTION WHEN NO_DATA_FOUND THEN
    P_FORMULA := 'A';
    P_CODFORMIND := NULL;
    P_DESCRFORMULA := NULL;
    P_SANKHYA := 'S'; 
  END;
  
  IF P_SANKHYA = 'N' THEN
    RETURN;
  END IF;
  
  P_DESCRFORMNOVO := 'BASE 1904 + DEPENDENTES';
  P_FORMULANOVO := '&E1907 + &E510 + IF(&TIPFOL= ''R'',FBEDTPAG(QueFuncionario.CODEMPORIG,QueFuncionario.CODFUNCORIG, &DataPagamento, ''1904,1916'') + FBEDTPAG(queFuncionario.CODEMP, queFuncionario.CODFUNC, &DataPagamento, ''1904,1916''),0) +IF(&TIPFOL = ''C'',FBEDTPAG(queFuncionario.CODEMP, queFuncionario.CODFUNC,&DataPagamento, ''1907''),0) + IF(&TIPFOL= ''R'',ABS(FBEDTPAG(QueFuncionario.CODEMPORIG, QueFuncionario.CODFUNCORIG, &DATAPAGAMENTO,''999'')) + ABS(FBEDTPAG(queFuncionario.CODEMP, queFuncionario.CODFUNC,&DATAPAGAMENTO, ''999'')),0)';
  P_CODFORMINDNOVO := '';
  
  IF P_FORMULA = 'A' THEN
    INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
      VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
             'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO);
    
    IF P_CODFORMINDNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO);
    END IF;
    
    IF P_DESCRFORMNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO);
    END IF;
    
    INSERT INTO TFPFOR (CODFORM, DESCRFORM, SANKHYA, FORMULA, CODFORMIND)
      VALUES(P_CODFORMULA, P_DESCRFORMNOVO, 'S', P_FORMULANOVO, P_CODFORMINDNOVO);
    
  ELSIF (P_FORMULANOVO <> P_FORMULA OR 
         NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') OR 
         NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z')) 
  THEN
    
    IF P_FORMULANOVO <> P_FORMULA THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO, P_FORMULA);
    END IF;
    
    IF NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO, P_CODFORMIND);
    END IF;
    
    IF NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO, P_DESCRFORMULA);
    END IF;
    
    UPDATE TFPFOR
    SET FORMULA = P_FORMULANOVO
    , DESCRFORM = P_DESCRFORMNOVO
    , CODFORMIND = P_CODFORMINDNOVO
    , FORMULANTERIOR = CASE WHEN FORMULA <> P_FORMULANOVO THEN P_FORMULA ELSE FORMULANTERIOR END
    , DTALTER = SYSDATE
    , CODUSU = 0
    WHERE CODFORM = P_CODFORMULA
    AND SANKHYA = 'S';
    
  END IF;
  
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48769-0-0
Nro. O.S. : 1103051
Nome      : Criar - TSIPARLGT
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TSIPARLGT
NomeObjeto: TSIPARLGT
TipoObjeto: TABLE
NomeTabela: TSIPARLGT
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TSIPARLGT
(
 NOMETAB    VARCHAR2(10), 
 DHACAO     DATE,
 ACAO		VARCHAR2(20), 
 USUBANCO   VARCHAR2(60), 
 USUREDE    VARCHAR2(60), 
 NOMMAQUINA VARCHAR2(60), 
 IPMAQUINA  VARCHAR2(60), 
 PROGRAMA   VARCHAR2(60), 
 USUARIOSIS VARCHAR2(60), 
 CHAVE      VARCHAR2(255), 
 CAMPO		VARCHAR2(30), 
 NOVO       VARCHAR2(4000), 
 VELHO      VARCHAR2(4000)
)

/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48770-0-0
Nro. O.S. : 1103051
Nome      : Criar - STP_GRAVA_TSIPARLOG
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - STP_GRAVA_TSIPARLOG
NomeObjeto: STP_GRAVA_TSIPARLOG
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE STP_GRAVA_TSIPARLOG (P_TABELA IN VARCHAR2, 
                                                 P_CHAVE  IN VARCHAR2, 
                                                 P_CAMPO  IN VARCHAR2, 
                                                 P_CODUSU IN INT, 
                                                 P_ACAO   IN VARCHAR2, 
                                                 P_NEW    IN VARCHAR2, 
                                                 P_OLD    IN VARCHAR2) 
AS 
BEGIN 
    DECLARE 
        V_USUARIO_BANCO VARCHAR2(60); 
        V_USUARIO_REDE  VARCHAR2(60); 
        V_NOMEMAQUINA   VARCHAR2(60); 
        V_IPMAQUINA     VARCHAR2(60); 
        V_PROGRAMA      VARCHAR2(60); 
        V_USUARIOSIS    VARCHAR2(60); 
        V_CODUSUAUX     VARCHAR2(100); 
    BEGIN 
        IF ( P_CODUSU IS NULL ) 
            OR ( P_CODUSU = 0 ) 
            OR ( P_TABELA = 'TSIUSU' ) THEN 
          V_CODUSUAUX := TSIUSU_LOG_PKG.V_CODUSULOG; 

          V_USUARIOSIS := TSIUSU_LOG_PKG.V_NOMEUSULOG; 
        ELSE 
          V_CODUSUAUX := P_CODUSU; 

          BEGIN 
              SELECT USU.NOMEUSU 
              INTO   V_USUARIOSIS 
              FROM   TSIUSU USU 
              WHERE  USU.CODUSU = V_CODUSUAUX; 
          EXCEPTION 
              WHEN NO_DATA_FOUND THEN 
                V_USUARIOSIS := 'USUARIO NAO LOCALIZADO NA TSIUSU ' 
                                || V_CODUSUAUX; 
          END; 
        END IF; 

        SELECT USERNAME, 
               OSUSER, 
               MACHINE, 
               SYS_CONTEXT('USERENV', 'IP_ADDRESS'), 
               PROGRAM 
        INTO   V_USUARIO_BANCO, V_USUARIO_REDE, V_NOMEMAQUINA, V_IPMAQUINA, 
               V_PROGRAMA 
        FROM   V$SESSION 
        WHERE  AUDSID = (SELECT USERENV('SESSIONID') 
                         FROM   DUAL); 

        INSERT INTO TSIPARLGT 
                    (NOMETAB, 
                     DHACAO, 
                     ACAO, 
                     USUBANCO, 
                     USUREDE, 
                     NOMMAQUINA, 
                     IPMAQUINA, 
                     PROGRAMA, 
                     USUARIOSIS, 
                     CHAVE, 
                     CAMPO, 
                     NOVO, 
                     VELHO) 
        VALUES      ( P_TABELA, 
                     SYSDATE, 
                     P_ACAO, 
                     V_USUARIO_BANCO, 
                     V_USUARIO_REDE, 
                     V_NOMEMAQUINA, 
                     V_IPMAQUINA, 
                     V_PROGRAMA, 
                     V_USUARIOSIS, 
                     P_CHAVE, 
                     P_CAMPO, 
                     P_NEW, 
                     P_OLD ); 
    END; 
END; 

/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:16
Num.Script: 48771-0-1000
Nro. O.S. : 1103051
Nome      : INSERE - THOOBJ - 4877000
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE STP_GRAVA_TSIPARLOG
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210000
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'STP_GRAVA_TSIPARLOG' NOMEOBJ, 48770 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, 'efc9d8a1cd748f782eb9191d083ec6fd' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'STP_GRAVA_TSIPARLOG' and THO.hashcode = 'efc9d8a1cd748f782eb9191d083ec6fd')
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48772-0-0
Nro. O.S. : 1103051
Nome      : Criar - TRG_TSIPAR_LOG
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TRG_TSIPAR_LOG
NomeObjeto: TRG_TSIPAR_LOG
TipoObjeto: TRIGGER
NomeTabela: TSIPAR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_TSIPAR_LOG 
  BEFORE UPDATE OR DELETE ON TSIPAR 
  FOR EACH ROW 
DECLARE 
    ERROR EXCEPTION; 
    ERRMSG    VARCHAR2(255); 
    P_CHAVEPK VARCHAR(400); 
BEGIN 
    P_CHAVEPK := 'PK [CHAVE=' 
                 || :NEW.CHAVE 
                 || '][CODUSU=' 
                 ||:NEW.CODUSU 
                 ||']'; 

    IF :OLD.LOGICO <> :NEW.LOGICO THEN 
      STP_GRAVA_TSIPARLOG('TSIPAR', P_CHAVEPK, 'LOGICO', 0, 
      'UPDATE', :NEW.LOGICO, :OLD.LOGICO); 
    END IF; 

    IF :OLD.INTEIRO <> :NEW.INTEIRO THEN 
      STP_GRAVA_TSIPARLOG('TSIPAR', P_CHAVEPK, 'INTEIRO', 0, 
      'UPDATE', :NEW.INTEIRO, :OLD.INTEIRO); 
    END IF; 

    IF :OLD.NUMDEC <> :NEW.NUMDEC THEN 
      STP_GRAVA_TSIPARLOG('TSIPAR', P_CHAVEPK, 'NUMDEC', 0, 
      'UPDATE', :NEW.NUMDEC, :OLD.NUMDEC); 
    END IF; 

    IF :OLD.DATA <> :NEW.DATA THEN 
      STP_GRAVA_TSIPARLOG('TSIPAR', P_CHAVEPK, 'DATA', 0, 
      'UPDATE', :NEW.DATA, :OLD.DATA); 
    END IF; 

    IF :OLD.TEXTO <> :NEW.TEXTO THEN 
      STP_GRAVA_TSIPARLOG('TSIPAR', P_CHAVEPK, 'TEXTO', 0, 
      'UPDATE', :NEW.TEXTO, :OLD.TEXTO); 
    END IF; 
EXCEPTION 
    WHEN ERROR THEN 
      RAISE_APPLICATION_ERROR(-20101, SQLERRM); 
END; 

/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:16
Num.Script: 48773-0-1000
Nro. O.S. : 1103051
Nome      : INSERE - THOOBJ - 4877200
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_TSIPAR_LOG
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210000
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_TSIPAR_LOG' NOMEOBJ, 48772 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '2ba092eb09f617fb5b298007f2eb0ee2' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_TSIPAR_LOG' and THO.hashcode = '2ba092eb09f617fb5b298007f2eb0ee2')
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48777-0-0
Nro. O.S. : 1132246
Nome      : Script - TGFTOP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - TGFTOP
NomeObjeto: TGFTOP
TipoObjeto: TABLE
NomeTabela: TGFTOP
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
    P_COUNT         NUMBER(05);
BEGIN
    SELECT COUNT(*) INTO P_COUNT
    FROM TSISCR 
    WHERE NME_SCRIPT = '1132246';
    
    IF P_COUNT = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO TSISCR VALUES(''1132246'',''1132246'')';
    
        UPDATE TGFTOP TPO SET
          TPO.CODCTACTBEFD = (SELECT T2.CODCTACTBEFD FROM TGFTOP T2
                              WHERE T2.CODTIPOPER = TPO.CODTIPOPER
                              AND T2.DHALTER = (SELECT MAX(T3.DHALTER) FROM TGFTOP T3
                                                WHERE T3.CODTIPOPER = T2.CODTIPOPER))
        WHERE TPO.CODTIPOPER > 0
        AND EXISTS (SELECT 1 FROM TGFTOP T2 WHERE T2.CODTIPOPER = TPO.CODTIPOPER AND NVL(T2.CODCTACTBEFD,0) > 0);
    END IF;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48826-0-0
Nro. O.S. : 1077195
Nome      : Criar - TSIAVI_I02
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TSIAVI_I02
NomeObjeto: TSIAVI_I02
TipoObjeto: INDEX
NomeTabela: TSIAVI
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN 
    BEGIN 
    EXECUTE IMMEDIATE 'CREATE INDEX TSIAVI_I02 ON TSIAVI (DHCRIACAO)';
    EXCEPTION 
     WHEN OTHERS THEN 
         NULL;
    END;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48827-0-0
Nro. O.S. : 1077195
Nome      : Criar - TSIRAV_I01
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TSIRAV_I01
NomeObjeto: TSIRAV_I01
TipoObjeto: INDEX
NomeTabela: TSIRAV
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN 
    BEGIN 
    EXECUTE IMMEDIATE 'CREATE INDEX TSIRAV_I01 ON TSIRAV (CODUSU)';
    EXCEPTION 
     WHEN OTHERS THEN 
         NULL;
    END;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48838-0-0
Nro. O.S. : 1090873
Nome      : Drop - PK_TRIREP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - PK_TRIREP
NomeObjeto: PK_TRIREP
TipoObjeto: PRIMARY KEY
NomeTabela: TRIREP
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIREP DROP CONSTRAINT PK_TRIREP
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48838-1-0
Nro. O.S. : 1090873
Nome      : Dropa - PK_TRIREP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropa - PK_TRIREP
NomeObjeto: PK_TRIREP
TipoObjeto: INDEX
NomeTabela: TRIREP
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
    BEGIN
        EXECUTE IMMEDIATE 'DROP INDEX PK_TRIREP';
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48839-0-0
Nro. O.S. : 1090873
Nome      : Criar - PK_TRIREP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - PK_TRIREP
NomeObjeto: PK_TRIREP
TipoObjeto: PRIMARY KEY
NomeTabela: TRIREP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIREP ADD CONSTRAINT PK_TRIREP PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48840-0-0
Nro. O.S. : 1090873
Nome      : Drop - CKC_STATUSREG_TRIICR
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - CKC_STATUSREG_TRIICR
NomeObjeto: CKC_STATUSREG_TRIICR
TipoObjeto: CONSTRAINT
NomeTabela: TRIICR
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIICR DROP CONSTRAINT CKC_STATUSREG_TRIICR
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48841-0-0
Nro. O.S. : 1090873
Nome      : Criar - CKC_STATUSREG_TRIICR
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - CKC_STATUSREG_TRIICR
NomeObjeto: CKC_STATUSREG_TRIICR
TipoObjeto: CONSTRAINT
NomeTabela: TRIICR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIICR ADD CONSTRAINT CKC_STATUSREG_TRIICR CHECK (STATUSREG IN ('P', 'E', 'A', 'F', 'X'))
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48842-0-0
Nro. O.S. : 1090873
Nome      : Drop - CKC_STATUSREG_TRIPAJR
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - CKC_STATUSREG_TRIPAJR
NomeObjeto: CKC_STATUSREG_TRIPAJR
TipoObjeto: CONSTRAINT
NomeTabela: TRIPAJR
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIPAJR DROP CONSTRAINT CKC_STATUSREG_TRIPAJR
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48843-0-0
Nro. O.S. : 1090873
Nome      : Criar - CKC_STATUSREG_TRIPAJR
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - CKC_STATUSREG_TRIPAJR
NomeObjeto: CKC_STATUSREG_TRIPAJR
TipoObjeto: CONSTRAINT
NomeTabela: TRIPAJR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIPAJR ADD CONSTRAINT CKC_STATUSREG_TRIPAJR CHECK (STATUSREG IN ('P', 'E', 'A', 'F', 'X'))
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48844-0-0
Nro. O.S. : 1090873
Nome      : Drop - CKC_STATUSREG_TRIRCST
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - CKC_STATUSREG_TRIRCST
NomeObjeto: CKC_STATUSREG_TRIRCST
TipoObjeto: CONSTRAINT
NomeTabela: TRIRCST
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCST DROP CONSTRAINT CKC_STATUSREG_TRIRCST
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48845-0-0
Nro. O.S. : 1090873
Nome      : Criar - CKC_STATUSREG_TRIRCST
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - CKC_STATUSREG_TRIRCST
NomeObjeto: CKC_STATUSREG_TRIRCST
TipoObjeto: CONSTRAINT
NomeTabela: TRIRCST
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCST ADD CONSTRAINT CKC_STATUSREG_TRIRCST CHECK (STATUSREG IN ('P', 'E', 'A', 'F', 'X'))
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48846-0-0
Nro. O.S. : 1090873
Nome      : Drop - CKC_STATUSREG_TRIRCSP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - CKC_STATUSREG_TRIRCSP
NomeObjeto: CKC_STATUSREG_TRIRCSP
TipoObjeto: CONSTRAINT
NomeTabela: TRIRCSP
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCSP DROP CONSTRAINT CKC_STATUSREG_TRIRCSP
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48847-0-0
Nro. O.S. : 1090873
Nome      : Criar - CKC_STATUSREG_TRIRCSP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - CKC_STATUSREG_TRIRCSP
NomeObjeto: CKC_STATUSREG_TRIRCSP
TipoObjeto: CONSTRAINT
NomeTabela: TRIRCSP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCSP ADD CONSTRAINT CKC_STATUSREG_TRIRCSP CHECK (STATUSREG IN ('P', 'E', 'A', 'F', 'X'))
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48848-0-0
Nro. O.S. : 1090873
Nome      : Drop - CKC_STATUSREG_TRICPPR
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - CKC_STATUSREG_TRICPPR
NomeObjeto: CKC_STATUSREG_TRICPPR
TipoObjeto: CONSTRAINT
NomeTabela: TRICPPR
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRICPPR DROP CONSTRAINT CKC_STATUSREG_TRICPPR
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48849-0-0
Nro. O.S. : 1090873
Nome      : Criar - CKC_STATUSREG_TRICPPR
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - CKC_STATUSREG_TRICPPR
NomeObjeto: CKC_STATUSREG_TRICPPR
TipoObjeto: CONSTRAINT
NomeTabela: TRICPPR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRICPPR ADD CONSTRAINT CKC_STATUSREG_TRICPPR CHECK (STATUSREG IN ('P', 'E', 'A', 'F', 'X'))
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48850-0-0
Nro. O.S. : 1090873
Nome      : Drop - CKC_STATUSREG_TRICPRB
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - CKC_STATUSREG_TRICPRB
NomeObjeto: CKC_STATUSREG_TRICPRB
TipoObjeto: CONSTRAINT
NomeTabela: TRICPRB
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRICPRB DROP CONSTRAINT CKC_STATUSREG_TRICPRB
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48851-0-0
Nro. O.S. : 1090873
Nome      : Criar - CKC_STATUSREG_TRICPRB
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - CKC_STATUSREG_TRICPRB
NomeObjeto: CKC_STATUSREG_TRICPRB
TipoObjeto: CONSTRAINT
NomeTabela: TRICPRB
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRICPRB ADD CONSTRAINT CKC_STATUSREG_TRICPRB CHECK (STATUSREG IN ('P', 'E', 'A', 'F', 'X'))
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48852-0-0
Nro. O.S. : 1090873
Nome      : Drop - CKC_STATUSREG_TRIFEP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - CKC_STATUSREG_TRIFEP
NomeObjeto: CKC_STATUSREG_TRIFEP
TipoObjeto: CONSTRAINT
NomeTabela: TRIFEP
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIFEP DROP CONSTRAINT CKC_STATUSREG_TRIFEP
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48853-0-0
Nro. O.S. : 1090873
Nome      : Criar - CKC_STATUSREG_TRIFEP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - CKC_STATUSREG_TRIFEP
NomeObjeto: CKC_STATUSREG_TRIFEP
TipoObjeto: CONSTRAINT
NomeTabela: TRIFEP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIFEP ADD CONSTRAINT CKC_STATUSREG_TRIFEP CHECK (STATUSREG IN ('P', 'E', 'A', 'F', 'X'))
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48854-0-0
Nro. O.S. : 1090873
Nome      : Drop - CKC_STATUSREG_TRIREP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - CKC_STATUSREG_TRIREP
NomeObjeto: CKC_STATUSREG_TRIREP
TipoObjeto: CONSTRAINT
NomeTabela: TRIREP
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIREP DROP CONSTRAINT CKC_STATUSREG_TRIREP
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48855-0-0
Nro. O.S. : 1090873
Nome      : Criar - CKC_STATUSREG_TRIREP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - CKC_STATUSREG_TRIREP
NomeObjeto: CKC_STATUSREG_TRIREP
TipoObjeto: CONSTRAINT
NomeTabela: TRIREP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIREP ADD CONSTRAINT CKC_STATUSREG_TRIREP CHECK (STATUSREG IN ('P', 'E', 'A', 'F', 'X'))
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48858-0-0
Nro. O.S. : 1090873
Nome      : Criar - EVTERROEVTPRIOR
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - EVTERROEVTPRIOR
NomeObjeto: EVTERROEVTPRIOR
TipoObjeto: COLUMN
NomeTabela: TRICAB
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRICAB ADD EVTERROEVTPRIOR NUMBER(5)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48862-0-0
Nro. O.S. : 1090873
Nome      : Criar - DTREFPRODREINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - DTREFPRODREINF
NomeObjeto: DTREFPRODREINF
TipoObjeto: COLUMN
NomeTabela: TGFEMP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFEMP ADD DTREFPRODREINF DATE
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48863-0-0
Nro. O.S. : 1090873
Nome      : Criar - DTREFPREPRODREAISREINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - DTREFPREPRODREAISREINF
NomeObjeto: DTREFPREPRODREAISREINF
TipoObjeto: COLUMN
NomeTabela: TGFEMP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFEMP ADD DTREFPREPRODREAISREINF DATE
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48864-0-0
Nro. O.S. : 1090873
Nome      : Criar - DTREFPREPRODFICTREINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - DTREFPREPRODFICTREINF
NomeObjeto: DTREFPREPRODFICTREINF
TipoObjeto: COLUMN
NomeTabela: TGFEMP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFEMP ADD DTREFPREPRODFICTREINF DATE
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48876-0-0
Nro. O.S. : 1090873
Nome      : Criar - CODOBRA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - CODOBRA
NomeObjeto: CODOBRA
TipoObjeto: COLUMN
NomeTabela: TGFFIN
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFFIN ADD CODOBRA VARCHAR2(15)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48877-0-0
Nro. O.S. : 1090873
Nome      : Criar - EVTTOTAIS
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - EVTTOTAIS
NomeObjeto: EVTTOTAIS
TipoObjeto: COLUMN
NomeTabela: TRICAB
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRICAB ADD EVTTOTAIS NUMBER(5)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48879-0-0
Nro. O.S. : 1090873
Nome      : Drop - CKC_CONTROLE_TRICAB
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - CKC_CONTROLE_TRICAB
NomeObjeto: CKC_CONTROLE_TRICAB
TipoObjeto: CONSTRAINT
NomeTabela: TRICAB
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRICAB DROP CONSTRAINT CKC_CONTROLE_TRICAB
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48880-0-0
Nro. O.S. : 1090873
Nome      : Criar - CKC_CONTROLE_TRICAB
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - CKC_CONTROLE_TRICAB
NomeObjeto: CKC_CONTROLE_TRICAB
TipoObjeto: CONSTRAINT
NomeTabela: TRICAB
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRICAB ADD CONSTRAINT CKC_CONTROLE_TRICAB CHECK (CONTROLE IN ('I', 'A', 'E'))
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48881-0-0
Nro. O.S. : 1090873
Nome      : Drop - CKC_CONTROLE_TRIICR
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - CKC_CONTROLE_TRIICR
NomeObjeto: CKC_CONTROLE_TRIICR
TipoObjeto: CONSTRAINT
NomeTabela: TRIICR
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIICR DROP CONSTRAINT CKC_CONTROLE_TRIICR
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48882-0-0
Nro. O.S. : 1090873
Nome      : Criar - CKC_CONTROLE_TRIICR
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - CKC_CONTROLE_TRIICR
NomeObjeto: CKC_CONTROLE_TRIICR
TipoObjeto: CONSTRAINT
NomeTabela: TRIICR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIICR ADD CONSTRAINT CKC_CONTROLE_TRIICR CHECK (CONTROLE IN ('I', 'A', 'E'))
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48883-0-0
Nro. O.S. : 1090873
Nome      : Drop - CKC_CONTROLE_TRIPAJR
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - CKC_CONTROLE_TRIPAJR
NomeObjeto: CKC_CONTROLE_TRIPAJR
TipoObjeto: CONSTRAINT
NomeTabela: TRIPAJR
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIPAJR DROP CONSTRAINT CKC_CONTROLE_TRIPAJR
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48884-0-0
Nro. O.S. : 1090873
Nome      : Criar - CKC_CONTROLE_TRIPAJR 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - CKC_CONTROLE_TRIPAJR 
NomeObjeto: CKC_CONTROLE_TRIPAJR 
TipoObjeto: CONSTRAINT
NomeTabela: TRIPAJR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIPAJR ADD CONSTRAINT CKC_CONTROLE_TRIPAJR CHECK (CONTROLE IN ('I', 'A', 'E'))
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48885-0-0
Nro. O.S. : 1090873
Nome      : Drop - CKC_CONTROLE_TRIRCST
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - CKC_CONTROLE_TRIRCST
NomeObjeto: CKC_CONTROLE_TRIRCST
TipoObjeto: CONSTRAINT
NomeTabela: TRIRCST
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCST DROP CONSTRAINT CKC_CONTROLE_TRIRCST
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48886-0-0
Nro. O.S. : 1090873
Nome      : Criar - CKC_CONTROLE_TRIRCST 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - CKC_CONTROLE_TRIRCST 
NomeObjeto: CKC_CONTROLE_TRIRCST 
TipoObjeto: CONSTRAINT
NomeTabela: TRIRCST 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCST ADD CONSTRAINT CKC_CONTROLE_TRIRCST CHECK (CONTROLE IN ('I', 'A', 'E'))
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48887-0-0
Nro. O.S. : 1090873
Nome      : Drop - CKC_CONTROLE_TRIRCSP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - CKC_CONTROLE_TRIRCSP
NomeObjeto: CKC_CONTROLE_TRIRCSP
TipoObjeto: CONSTRAINT
NomeTabela: TRIRCSP 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCSP DROP CONSTRAINT CKC_CONTROLE_TRIRCSP
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48888-0-0
Nro. O.S. : 1090873
Nome      : Criar - CKC_CONTROLE_TRIRCSP 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - CKC_CONTROLE_TRIRCSP 
NomeObjeto: CKC_CONTROLE_TRIRCSP 
TipoObjeto: CONSTRAINT
NomeTabela: TRIRCSP 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCSP ADD CONSTRAINT CKC_CONTROLE_TRIRCSP CHECK (CONTROLE IN ('I', 'A', 'E'))
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48893-0-0
Nro. O.S. : 1090873
Nome      : Drop - CKC_CONTROLE_TRICPPR
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - CKC_CONTROLE_TRICPPR
NomeObjeto: CKC_CONTROLE_TRICPPR
TipoObjeto: CONSTRAINT
NomeTabela: TRICPPR 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRICPPR DROP CONSTRAINT CKC_CONTROLE_TRICPPR
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48896-0-0
Nro. O.S. : 1090873
Nome      : Criar - CKC_CONTROLE_TRICPPR 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - CKC_CONTROLE_TRICPPR 
NomeObjeto: CKC_CONTROLE_TRICPPR 
TipoObjeto: CONSTRAINT
NomeTabela: TRICPPR 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRICPPR ADD CONSTRAINT CKC_CONTROLE_TRICPPR CHECK (CONTROLE IN ('I', 'A', 'E'))
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48897-0-0
Nro. O.S. : 1090873
Nome      : Drop - CKC_CONTROLE_TRICPRB
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - CKC_CONTROLE_TRICPRB
NomeObjeto: CKC_CONTROLE_TRICPRB
TipoObjeto: CONSTRAINT
NomeTabela: TRICPRB 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRICPRB DROP CONSTRAINT CKC_CONTROLE_TRICPRB
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48898-0-0
Nro. O.S. : 1090873
Nome      : Criar - CKC_CONTROLE_TRICPRB 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - CKC_CONTROLE_TRICPRB 
NomeObjeto: CKC_CONTROLE_TRICPRB 
TipoObjeto: CONSTRAINT
NomeTabela: TRICPRB 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRICPRB ADD CONSTRAINT CKC_CONTROLE_TRICPRB CHECK (CONTROLE IN ('I', 'A', 'E'))
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48901-0-0
Nro. O.S. : 1090873
Nome      : Dropar - TRG_INC_EVTLOTEREINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - TRG_INC_EVTLOTEREINF
NomeObjeto: TRG_INC_EVTLOTEREINF
TipoObjeto: TRIGGER
NomeTabela: EVTLOTEREINF
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DROP TRIGGER TRG_INC_EVTLOTEREINF
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48905-0-5
Nro. O.S. : 1129455
Nome      : Drop - CHK_STATUSNFE_TGFPELLOG
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - CHK_STATUSNFE_TGFPELLOG
NomeObjeto: CHK_STATUSNFE_TGFPELLOG
TipoObjeto: CONSTRAINT
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
    BEGIN
        EXECUTE IMMEDIATE 'ALTER TABLE TGFPEL DROP CONSTRAINT CHK_STATUSNFE_TGFPELLOG';
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END;
END;    
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48906-0-0
Nro. O.S. : 1129455
Nome      : Drop - CHK_STATUSNFE_TGFPELLOG
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - CHK_STATUSNFE_TGFPELLOG
NomeObjeto: CHK_STATUSNFE_TGFPELLOG
TipoObjeto: CONSTRAINT
NomeTabela: TGFPELLOG
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
    BEGIN
        EXECUTE IMMEDIATE 'ALTER TABLE TGFPELLOG DROP CONSTRAINT CHK_STATUSNFE_TGFPELLOG';
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END;
END;    
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48907-0-0
Nro. O.S. : 1129455
Nome      : Cria - CHK_STATUSNFE_TGFPELLOG
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - CHK_STATUSNFE_TGFPELLOG
NomeObjeto: CHK_STATUSNFE_TGFPELLOG
TipoObjeto: CONSTRAINT
NomeTabela: TGFPELLOG
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFPELLOG
ADD CONSTRAINT CHK_STATUSNFE_TGFPELLOG
CHECK (STATUSNFE IN ('Z', 'F', 'X', 'Y', 'V', 'D', 'E', 'N', 'C', 'R', 'A') OR STATUSNFE IS NULL)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48908-0-0
Nro. O.S. : 1090873
Nome      : Alterar - VRI_EVT_R1000
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VRI_EVT_R1000
NomeObjeto: VRI_EVT_R1000
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R1000
AS 
SELECT
 EMP.CODEMP                                       AS CODEMP
,SYSDATE                                          AS DTREF
,EMP.CODEMP                                       AS CHAVE
,CASE WHEN LENGTH(EMPC.CGC) = 14
	  THEN '1' 
	  ELSE '2' 
 END                                              AS TPINSC
,CASE WHEN LENGTH(EMPC.CGC) = 14 
	  THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
				THEN EMPC.CGC
				ELSE SUBSTR(EMPC.CGC,1,8)
		   END
	  ELSE EMPC.CGC
 END                                              AS NRINSC
,EMP.DTVALINIREINF                                AS INIVALID
,EMP.DTVALFINREINF                                AS FIMVALID
,EMP.TRIBREINF                                    AS CLASSTRIB
,CASE WHEN EMP.ENTREGAECD = 'S' 
	  THEN '1' 
	  ELSE '0' 
 END                                              AS INDESCRITURACAO
,CASE WHEN EMP.DESONERAFOLHACPRB = 'S' 
	  THEN '1' 
	  ELSE '0' 
 END                                              AS INDDESONERACAO 
, 0                                               AS INDACORDOISENMULTA
,EMP.SITEMPREINF                                  AS INDSITPJ
,PAR.NOMEPARC                                     AS NMCTT
,PAR.CGC_CPF                                      AS CPFCTT
,PAR.TELEFONE                                     AS FONEFIXOCTT
,PAR.FAX                                          AS FONECEL
,PAR.EMAIL                                        AS EMAILCTT
,CASE WHEN NVL(EMP.VINCULOEFR,2) = '1' 
	  THEN 'S' 
	  ELSE 'N' 
 END                                              AS IDEEFR
,CASE WHEN NVL(EMP.VINCULOEFR,2) = '1' 
	  THEN EMP.CNPJEFRVINC 
	  ELSE '' 
 END                                              AS CNPJEFR
FROM TGFEMP EMP 
	INNER JOIN TSIEMP EMPC ON EMP.CODEMP = EMPC.CODEMP
	LEFT JOIN TGFPAR PAR ON EMP.RESPENTREINF = PAR.CODPARC
WHERE EMP.ATIVO = 'S'
  AND (EMP.EMPADMPUBDIR = 'S' OR NVL(EMP.CODEMPMATRIZEFD, EMP.CODEMP) IN(0, EMP.CODEMP))
  AND EMP.DTVALINIREINF IS NOT NULL
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48909-0-0
Nro. O.S. : 1090873
Nome      : Alterar - VRI_EVT_R1070
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VRI_EVT_R1070
NomeObjeto: VRI_EVT_R1070
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R1070
AS
SELECT DISTINCT
 PAJ.NUPROCESSO                                AS NUPROCESSO
,EMP.CODEMP                                    AS CODEMP
,SYSDATE                                       AS DTREF
,PAJ.NUPROCESSO                                AS CHAVE
,CASE WHEN LENGTH(EMPC.CGC) = 14 
	  THEN '1' 
	  ELSE '2' 
 END                                            AS TPINSC
,CASE WHEN LENGTH(EMPC.CGC) = 14 
	  THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
				THEN EMPC.CGC
				ELSE SUBSTR(EMPC.CGC,1,8)
		   END
	  ELSE EMPC.CGC
 END                                            AS NRINSC
,PAJ.TIPO                                       AS TPPROC
,CAST(PAJ.NUMPROCESSO AS VARCHAR2(10))          AS NRPROC
,PAJ.DTINIVALIDADE                              AS INIVALID
,PAJ.DTFIMVALIDADE                              AS FIMVALID
,PAJ.AUTORIA                                    AS INDAUTORIA
,UFS.UF                                         AS UFVARA
,CID.CODMUNFIS                                  AS CODMUNIC
,PAJ.CODIDENTVARA                               AS IDVARA
FROM TRIPAJ PAJ
	LEFT JOIN TGFEMP EMP ON (NOT EXISTS(SELECT 1
										FROM TRIPEMP PEMP                                             
										WHERE PEMP.NUPROCESSO = PAJ.NUPROCESSO
							 AND EXISTS(SELECT 1
										FROM TRIPISET ISET
										WHERE PEMP.NUPROCESSO = PAJ.NUPROCESSO)) OR 
							 EXISTS(SELECT 1
									FROM TRIPEMP PEMP
									WHERE PEMP.NUPROCESSO = PAJ.NUPROCESSO
									  AND PEMP.CODEMP = EMP.CODEMP) )
	LEFT JOIN TSIEMP EMPC ON EMPC.CODEMP = EMP.CODEMP 
	LEFT JOIN TSICID CID ON PAJ.CODCID = CID.CODCID
	LEFT JOIN TSIUFS UFS ON UFS.CODUF = CID.UF
WHERE PAJ.ATIVO = 'S'
	AND EMP.ATIVO = 'S'
	AND PAJ.TIPO IS NOT NULL
	AND EXISTS(SELECT 1 
			   FROM TRIPIMP PIMP 
			   WHERE PIMP.NUPROCESSO = PAJ.NUPROCESSO
				   AND PIMP.TIPOIMPOSTO IN (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
	AND PAJ.DTINIVALIDADE IS NOT NULL
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48910-0-0
Nro. O.S. : 1090873
Nome      : Alterar - VRI_EVT_R2010_NFS_INFOTPSERV
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VRI_EVT_R2010_NFS_INFOTPSERV
NomeObjeto: VRI_EVT_R2010_NFS_INFOTPSERV
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2010_NFS_INFOTPSERV
AS
SELECT
 TAB.CODEMP
,TAB.DTREF
,TAB.TPINSC||','||TAB.NRINSC||','||TAB.TPINSCESTAB||','||TAB.NRINSCESTAB||','||TAB.INDOBRA||','||TAB.CNPJPRESTADOR||','||TAB.INDCPRB AS CHAVE
,TAB.NUDOCUMENTO AS NUNOTA
,TAB.TPSERVICO
,TAB.TIPODOCUMENTO
,TAB.TPINSC
,TAB.NRINSC
,TAB.TPINSCESTAB
,TAB.NRINSCESTAB
,TAB.INDOBRA
,TAB.CNPJPRESTADOR
,TAB.INDCPRB
,TAB.VLRTOTALBRUTO
,TAB.VLRBASERET
,TAB.VLRRETENCAO
,TAB.VLRRETSUB
,TRUNC(NVL(TAB.VLRRETENCAO, 0) * (NVL(ISET_INSS_PRINC.PERCSUSPIMP, 0) / 100), 2) AS VLRNRETPRINC
,TRUNC(TAB.VLRSERVICOS15, 2) AS VLRSERVICOS15
,TRUNC(TAB.VLRSERVICOS20, 2) AS VLRSERVICOS20
,TRUNC(TAB.VLRSERVICOS25, 2) AS VLRSERVICOS25
,TRUNC(TAB.VLRADICIONAL, 2) AS VLRADICIONAL
,TRUNC(NVL(TAB.VLRSERVICOS15, 0) * (NVL(ISET_INSS_15.PERCSUSPIMP, 0) / 100) +
 NVL(TAB.VLRSERVICOS20, 0) * (NVL(ISET_INSS_20.PERCSUSPIMP, 0) / 100) +
 NVL(TAB.VLRSERVICOS25, 0) * (NVL(ISET_INSS_25.PERCSUSPIMP, 0) / 100), 2) AS VLRNRETADIC
,TAB.NUPROCESSO_INSS_PRINC
,TAB.SEQPROCESSO_INSS_PRINC
,TAB.NUPROCESSO_INSS_15
,TAB.SEQPROCESSO_INSS_15
,TAB.NUPROCESSO_INSS_20
,TAB.SEQPROCESSO_INSS_20
,TAB.NUPROCESSO_INSS_25
,TAB.SEQPROCESSO_INSS_25
FROM (
    /*Busca pelas notas de serviços tomados*/
    SELECT 
     CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMP.CODEMP
          WHEN NVL(EMP.CODEMPMATRIZEFD, 0) > 0 THEN EMP.CODEMPMATRIZEFD
          ELSE EMP.CODEMP 
     END AS CODEMP
    ,TRUNC(CAB.DTNEG, 'MM') AS DTREF
    ,CASE WHEN LENGTH(EMPC.CGC) = 14 
          THEN '1' 
          ELSE '2' 
     END AS TPINSC
    ,CASE WHEN LENGTH(EMPC.CGC) = 14 
          THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
                    THEN EMPC.CGC
                    ELSE SUBSTR(EMPC.CGC,1,8)
               END
          ELSE EMPC.CGC
     END AS NRINSC
    ,ITE.NUNOTA AS NUDOCUMENTO
    ,'N' AS TIPODOCUMENTO
    ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN 4 ELSE 1 END AS TPINSCESTAB
    ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN CAB.CODOBRA ELSE EMPC.CGC END AS NRINSCESTAB
    ,CASE WHEN PRO.OBRACONSTCIVIL IS NULL THEN 0 ELSE PRO.OBRACONSTCIVIL END AS INDOBRA
    ,PAR.CGC_CPF AS CNPJPRESTADOR
    ,CASE WHEN NVL(DIN.ALIQUOTA, IMN.ALIQUOTA) = 11 THEN 0 ELSE 1 END AS INDCPRB /*Se a alíquota não for 11% espera-se que ela seja 3.5% - ver se preciso tratar o ELSE*/
    ,PRO.CLASSIFCESSAOOBRA AS TPSERVICO
    ,SUM(ITE.VLRTOT) AS VLRTOTALBRUTO
    ,SUM(NVL(DIN.BASERED, 0) + NVL(IMN.BASE, 0)) AS VLRBASERET
    ,SUM(NVL(DIN.VALOR, 0) + NVL(IMN.VALOR, 0)) AS VLRRETENCAO
    ,0 AS VLRRETSUB /*Por enquanto não vamos gerar essa tag*/
    ,SUM(CASE WHEN NVL(DIN.TIPOINSSESPECIAL, '') = '1' AND NVL(DIN.VLRINSSESPECIAL, 0) > 0 OR
                   NVL(IMN.TIPOINSSESPECIAL, '') = '1' AND NVL(IMN.VLRINSSESPECIAL, 0) > 0 THEN ITE.VLRTOT ELSE 0 END) AS VLRSERVICOS15
    ,SUM(CASE WHEN NVL(DIN.TIPOINSSESPECIAL, '') = '2' AND NVL(DIN.VLRINSSESPECIAL, 0) > 0 OR
                   NVL(IMN.TIPOINSSESPECIAL, '') = '2' AND NVL(IMN.VLRINSSESPECIAL, 0) > 0 THEN ITE.VLRTOT ELSE 0 END) AS VLRSERVICOS20
    ,SUM(CASE WHEN NVL(DIN.TIPOINSSESPECIAL, '') = '3' AND NVL(DIN.VLRINSSESPECIAL, 0) > 0 OR
                   NVL(IMN.TIPOINSSESPECIAL, '') = '3' AND NVL(IMN.VLRINSSESPECIAL, 0) > 0 THEN ITE.VLRTOT ELSE 0 END) AS VLRSERVICOS25
    ,SUM(NVL(DIN.VLRINSSESPECIAL, 0) + NVL(IMN.VLRINSSESPECIAL, 0)) AS VLRADICIONAL
    ,MAX(SNK_GET_IDPROCESSO_IMP_EFD(1, 
                                  EMP.CODEMP, 
                                  PAR.CODPARC, 
                                  ITE.CODPROD, 
                                  PRO.CODLST, 
                                  CAB.DTNEG)) AS NUPROCESSO_INSS_PRINC
    ,MAX(SNK_GET_IDPROCESSO_IMP_EFD(1, 
                                  EMP.CODEMP, 
                                  PAR.CODPARC, 
                                  ITE.CODPROD, 
                                  PRO.CODLST, 
                                  CAB.DTNEG,
                                  'S')) AS SEQPROCESSO_INSS_PRINC
    ,MAX(CASE WHEN NVL(DIN.TIPOINSSESPECIAL, '') = '1' THEN SNK_GET_IDPROCESSO_IMP_EFD(9, 
                                                                                      EMP.CODEMP, 
                                                                                      PAR.CODPARC, 
                                                                                      ITE.CODPROD, 
                                                                                      PRO.CODLST, 
                                                                                      CAB.DTNEG)
              ELSE NULL END) AS NUPROCESSO_INSS_15
    ,MAX(CASE WHEN NVL(DIN.TIPOINSSESPECIAL, '') = '1' THEN SNK_GET_IDPROCESSO_IMP_EFD(9, 
                                                                                      EMP.CODEMP, 
                                                                                      PAR.CODPARC, 
                                                                                      ITE.CODPROD, 
                                                                                      PRO.CODLST, 
                                                                                      CAB.DTNEG,
                                                                                      'S')
              ELSE NULL END) AS SEQPROCESSO_INSS_15
    ,MAX(CASE WHEN NVL(DIN.TIPOINSSESPECIAL, '') = '2' THEN SNK_GET_IDPROCESSO_IMP_EFD(10, 
                                                                                      EMP.CODEMP, 
                                                                                      PAR.CODPARC, 
                                                                                      ITE.CODPROD, 
                                                                                      PRO.CODLST, 
                                                                                      CAB.DTNEG)
              ELSE NULL END) AS NUPROCESSO_INSS_20
    ,MAX(CASE WHEN NVL(DIN.TIPOINSSESPECIAL, '') = '2' THEN SNK_GET_IDPROCESSO_IMP_EFD(10, 
                                                                                      EMP.CODEMP, 
                                                                                      PAR.CODPARC, 
                                                                                      ITE.CODPROD, 
                                                                                      PRO.CODLST, 
                                                                                      CAB.DTNEG,
                                                                                      'S')
              ELSE NULL END) AS SEQPROCESSO_INSS_20
    ,MAX(CASE WHEN NVL(DIN.TIPOINSSESPECIAL, '') = '3' THEN SNK_GET_IDPROCESSO_IMP_EFD(11, 
                                                                                      EMP.CODEMP, 
                                                                                      PAR.CODPARC, 
                                                                                      ITE.CODPROD, 
                                                                                      PRO.CODLST, 
                                                                                      CAB.DTNEG)
              ELSE NULL END) AS NUPROCESSO_INSS_25
    ,MAX(CASE WHEN NVL(DIN.TIPOINSSESPECIAL, '') = '3' THEN SNK_GET_IDPROCESSO_IMP_EFD(11, 
                                                                                      EMP.CODEMP, 
                                                                                      PAR.CODPARC, 
                                                                                      ITE.CODPROD, 
                                                                                      PRO.CODLST, 
                                                                                      CAB.DTNEG,
                                                                                      'S')
              ELSE NULL END) AS SEQPROCESSO_INSS_25
    FROM TGFITE ITE
        INNER JOIN TGFCAB CAB  ON CAB.NUNOTA = ITE.NUNOTA
        INNER JOIN (SELECT CODTIPOPER, DHALTER, TIPMOV, ATUALLIVISS, DESCROPER FROM TGFTOP) TPO  ON TPO.CODTIPOPER = CAB.CODTIPOPER AND TPO.DHALTER = CAB.DHTIPOPER
        INNER JOIN (SELECT CODEMP, CODEMPMATRIZEFD, EMPADMPUBDIR, ATIVO FROM TGFEMP) EMP  ON EMP.CODEMP = CAB.CODEMP
        INNER JOIN (SELECT CODEMP, RAZAOSOCIAL, NOMEFANTASIA, CGC FROM TSIEMP) EMPC ON EMPC.CODEMP = EMP.CODEMP
        INNER JOIN (SELECT CODPARC, NOMEPARC, CGC_CPF FROM TGFPAR) PAR  ON PAR.CODPARC = CAB.CODPARC
        INNER JOIN (SELECT CODPROD, OBRACONSTCIVIL, CLASSIFCESSAOOBRA, CODLST FROM TGFPRO) PRO  ON PRO.CODPROD = ITE.CODPROD
        LEFT JOIN  TGFDIN DIN  ON DIN.NUNOTA = ITE.NUNOTA AND DIN.SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 5 AND DIN.TIPO = -1
        LEFT JOIN  TGFIMN IMN  ON IMN.NUNOTA = ITE.NUNOTA AND IMN.SEQUENCIA = ITE.SEQUENCIA AND IMN.TIPOIMPOSTO = 5 AND IMN.TIPIMP = -1
    WHERE EMP.ATIVO = 'S'
        AND PRO.CLASSIFCESSAOOBRA IS NOT NULL
        AND ITE.USOPROD = 'S'
        AND TPO.TIPMOV = 'C'
        AND TPO.ATUALLIVISS = 'E'
        AND CAB.STATUSNOTA = 'L'
        AND (EXISTS (SELECT 1 FROM TGFDIN DIN WHERE DIN.NUNOTA = ITE.NUNOTA AND DIN.SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 5 AND DIN.TIPO = -1) OR 
             EXISTS (SELECT 1 FROM TGFIMN IMN WHERE IMN.NUNOTA = ITE.NUNOTA AND IMN.SEQUENCIA = ITE.SEQUENCIA AND IMN.TIPOIMPOSTO = 5 AND IMN.TIPIMP = -1))
    GROUP BY 
     CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMP.CODEMP
          WHEN NVL(EMP.CODEMPMATRIZEFD, 0) > 0 THEN EMP.CODEMPMATRIZEFD
          ELSE EMP.CODEMP 
     END
    ,TRUNC(CAB.DTNEG, 'MM')
        ,CASE WHEN LENGTH(EMPC.CGC) = 14 
          THEN '1' 
          ELSE '2' 
     END
    ,CASE WHEN LENGTH(EMPC.CGC) = 14 
          THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
                    THEN EMPC.CGC
                    ELSE SUBSTR(EMPC.CGC,1,8)
               END
          ELSE EMPC.CGC
     END
    ,ITE.NUNOTA
    ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN 4 ELSE 1 END
    ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN CAB.CODOBRA ELSE EMPC.CGC END
    ,CASE WHEN PRO.OBRACONSTCIVIL IS NULL THEN 0 ELSE PRO.OBRACONSTCIVIL END
    ,PAR.CGC_CPF
    ,CASE WHEN NVL(DIN.ALIQUOTA, IMN.ALIQUOTA) = 11 THEN 0 ELSE 1 END
    ,PRO.CLASSIFCESSAOOBRA
    UNION
    /*Busca pelo financeiros que representam serviços tomados*/
    SELECT 
     CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMP.CODEMP
          WHEN NVL(EMP.CODEMPMATRIZEFD, 0) > 0 THEN EMP.CODEMPMATRIZEFD
          ELSE EMP.CODEMP 
     END AS CODEMP
    ,TRUNC(FIN.DTNEG, 'MM') AS DTREF
    ,CASE WHEN LENGTH(EMPC.CGC) = 14 
          THEN '1' 
          ELSE '2' 
     END AS TPINSC
    ,CASE WHEN LENGTH(EMPC.CGC) = 14 
          THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
                    THEN EMPC.CGC
                    ELSE SUBSTR(EMPC.CGC,1,8)
               END
          ELSE EMPC.CGC
     END AS NRINSC
    ,FIN.NUFIN AS NUDOCUMENTO
    ,'F' AS TIPODOCUMENTO
    ,CASE WHEN FIN.CODOBRA IS NOT NULL THEN 4 ELSE 1 END AS TPINSCESTAB
    ,CASE WHEN FIN.CODOBRA IS NOT NULL THEN FIN.CODOBRA ELSE EMPC.CGC END AS NRINSCESTAB
    ,CASE WHEN FIN.OBRACONSTCIVIL IS NULL THEN 0 ELSE FIN.OBRACONSTCIVIL END AS INDOBRA
    ,PAR.CGC_CPF AS CNPJPRESTADOR
    ,CASE WHEN NVL(IMF.ALIQUOTA, 0) = 11 THEN 0 ELSE 1 END AS INDCPRB /*Se a alíquota não for 11% espera-se que ela seja 3.5% - ver se preciso tratar o ELSE*/
    ,FIN.CLASSIFCESSAOOBRA AS TPSERVICO
    ,SUM(FIN.VLRDESDOB) AS VLRTOTALBRUTO
    ,SUM(NVL(IMF.BASE, 0)) AS VLRBASERET
    ,SUM(NVL(IMF.VALOR, 0)) AS VLRRETENCAO
    ,0 AS VLRRETSUB /*Por enquanto não vamos gerar essa tag*/
    /*Para o financeiro não estamos considerando INSS Especial. Se houver, o usuário deverá criar um nota para lançar esses valores*/
    ,0 AS VLRSERVICOS15
    ,0 AS VLRSERVICOS20
    ,0 AS VLRSERVICOS25
    ,0 AS VLRADICIONAL
    ,MAX(SNK_GET_IDPROCESSO_IMP_EFD(1, 
                                  EMP.CODEMP, 
                                  PAR.CODPARC, 
                                  NULL, 
                                  FIN.CODLST, 
                                  FIN.DTNEG)) AS NUPROCESSO_INSS_PRINC
    ,MAX(SNK_GET_IDPROCESSO_IMP_EFD(1, 
                                  EMP.CODEMP, 
                                  PAR.CODPARC, 
                                  NULL, 
                                  FIN.CODLST, 
                                  FIN.DTNEG,
                                  'S')) AS SEQPROCESSO_INSS_PRINC
    ,NULL AS NUPROCESSO_INSS_15
    ,NULL AS SEQPROCESSO_INSS_15
    ,NULL AS NUPROCESSO_INSS_20
    ,NULL AS SEQPROCESSO_INSS_20
    ,NULL AS NUPROCESSO_INSS_25
    ,NULL AS SEQPROCESSO_INSS_25
    FROM TGFFIN FIN
        INNER JOIN (SELECT CODTIPOPER, DHALTER, TIPMOV, ATUALLIVISS, DESCROPER FROM TGFTOP)  TPO  ON TPO.CODTIPOPER = FIN.CODTIPOPER AND TPO.DHALTER = FIN.DHTIPOPER
        INNER JOIN (SELECT CODEMP, CODEMPMATRIZEFD, EMPADMPUBDIR, ATIVO FROM TGFEMP) EMP  ON EMP.CODEMP = FIN.CODEMP
        INNER JOIN (SELECT CODEMP, RAZAOSOCIAL, NOMEFANTASIA, CGC FROM TSIEMP) EMPC ON EMPC.CODEMP = EMP.CODEMP
        INNER JOIN (SELECT CODPARC, NOMEPARC, CGC_CPF FROM TGFPAR) PAR  ON PAR.CODPARC = FIN.CODPARC
        INNER JOIN TGFIMF IMF  ON IMF.NUFIN = FIN.NUFIN AND IMF.CODIMP = 5 AND IMF.TIPIMP = -1
    WHERE EMP.ATIVO = 'S'
        AND FIN.CLASSIFCESSAOOBRA IS NOT NULL
        AND TPO.TIPMOV = 'I'
        AND TPO.ATUALLIVISS = 'E'
        AND EXISTS (SELECT 1 FROM TGFIMF IMF WHERE IMF.NUFIN = FIN.NUFIN AND IMF.CODIMP = 5 AND IMF.TIPIMP = -1)
    GROUP BY 
     CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMP.CODEMP
          WHEN NVL(EMP.CODEMPMATRIZEFD, 0) > 0 THEN EMP.CODEMPMATRIZEFD
          ELSE EMP.CODEMP 
     END
    ,TRUNC(FIN.DTNEG, 'MM')
    ,CASE WHEN LENGTH(EMPC.CGC) = 14 
          THEN '1' 
          ELSE '2' 
     END
    ,CASE WHEN LENGTH(EMPC.CGC) = 14 
          THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
                    THEN EMPC.CGC
                    ELSE SUBSTR(EMPC.CGC,1,8)
               END
          ELSE EMPC.CGC
     END
    ,FIN.NUFIN
    ,CASE WHEN FIN.CODOBRA IS NOT NULL THEN 4 ELSE 1 END
    ,CASE WHEN FIN.CODOBRA IS NOT NULL THEN FIN.CODOBRA ELSE EMPC.CGC END
    ,CASE WHEN FIN.OBRACONSTCIVIL IS NULL THEN 0 ELSE FIN.OBRACONSTCIVIL END
    ,PAR.CGC_CPF
    ,CASE WHEN NVL(IMF.ALIQUOTA, 0) = 11 THEN 0 ELSE 1 END
    ,FIN.CLASSIFCESSAOOBRA
) TAB
    LEFT JOIN  TRIPISET ISET_INSS_PRINC ON ISET_INSS_PRINC.NUPROCESSO = NUPROCESSO_INSS_PRINC AND ISET_INSS_PRINC.SEQUENCIA = SEQPROCESSO_INSS_PRINC 
    LEFT JOIN  TRIPISET ISET_INSS_15 ON ISET_INSS_15.NUPROCESSO = NUPROCESSO_INSS_15 AND ISET_INSS_15.SEQUENCIA = SEQPROCESSO_INSS_15
    LEFT JOIN  TRIPISET ISET_INSS_20 ON ISET_INSS_20.NUPROCESSO = NUPROCESSO_INSS_20 AND ISET_INSS_20.SEQUENCIA = SEQPROCESSO_INSS_20
    LEFT JOIN  TRIPISET ISET_INSS_25 ON ISET_INSS_25.NUPROCESSO = NUPROCESSO_INSS_25 AND ISET_INSS_25.SEQUENCIA = SEQPROCESSO_INSS_25
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48911-0-0
Nro. O.S. : 1090873
Nome      : Alterar - VRI_EVT_R2020_NFS_INFOTPSERV
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VRI_EVT_R2020_NFS_INFOTPSERV
NomeObjeto: VRI_EVT_R2020_NFS_INFOTPSERV
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2020_NFS_INFOTPSERV
AS 
SELECT
 TAB.CODEMP
,TAB.DTREF
,TAB.TPINSC||','||TAB.NRINSC||','||TAB.TPINSCESTABPREST||','||TAB.NRINSCESTABPREST||','||TAB.TPINSCTOMADOR||','||TAB.NRINSCTOMADOR||','||TAB.INDOBRA AS CHAVE
,TAB.NUNOTA
,TAB.TPSERVICO
,TAB.TPINSC
,TAB.NRINSC
,TAB.TPINSCESTABPREST
,TAB.NRINSCESTABPREST
,TAB.TPINSCTOMADOR
,TAB.NRINSCTOMADOR
,TAB.INDOBRA
,TAB.VLRTOTALBRUTO
,TAB.VLRBASERET
,TAB.VLRRETENCAO
,TAB.VLRRETSUB
,TRUNC(NVL(TAB.VLRRETENCAO, 0) * (NVL(ISET_INSS_PRINC.PERCSUSPIMP, 0) / 100), 2) AS VLRNRETPRINC
,TRUNC(TAB.VLRSERVICOS15, 2) AS VLRSERVICOS15
,TRUNC(TAB.VLRSERVICOS20, 2) AS VLRSERVICOS20
,TRUNC(TAB.VLRSERVICOS25, 2) AS VLRSERVICOS25
,TRUNC(TAB.VLRADICIONAL, 2) AS VLRADICIONAL
,TRUNC(NVL(TAB.VLRSERVICOS15, 0) * (NVL(ISET_INSS_15.PERCSUSPIMP, 0) / 100) +
 NVL(TAB.VLRSERVICOS20, 0) * (NVL(ISET_INSS_20.PERCSUSPIMP, 0) / 100) +
 NVL(TAB.VLRSERVICOS25, 0) * (NVL(ISET_INSS_25.PERCSUSPIMP, 0) / 100), 2) AS VLRNRETADIC
,TAB.NUPROCESSO_INSS_PRINC
,TAB.SEQPROCESSO_INSS_PRINC
,TAB.NUPROCESSO_INSS_15
,TAB.SEQPROCESSO_INSS_15
,TAB.NUPROCESSO_INSS_20
,TAB.SEQPROCESSO_INSS_20
,TAB.NUPROCESSO_INSS_25
,SEQPROCESSO_INSS_25
FROM (
    SELECT 
     CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMP.CODEMP
          WHEN NVL(EMP.CODEMPMATRIZEFD, 0) > 0 THEN EMP.CODEMPMATRIZEFD
          ELSE EMP.CODEMP 
     END AS CODEMP
    ,TRUNC(CAB.DTNEG, 'MM') AS DTREF
    ,CASE WHEN LENGTH(EMPC.CGC) = 14 
          THEN '1' 
          ELSE '2' 
     END AS TPINSC
    ,CASE WHEN LENGTH(EMPC.CGC) = 14 
          THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
                    THEN EMPC.CGC
                    ELSE SUBSTR(EMPC.CGC,1,8)
               END
          ELSE EMPC.CGC
     END AS NRINSC
    ,1 AS TPINSCESTABPREST
    ,EMPC.CGC AS NRINSCESTABPREST
    ,ITE.NUNOTA AS NUNOTA
    ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN 4 ELSE 1 END AS TPINSCTOMADOR
    ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN CAB.CODOBRA ELSE PAR.CGC_CPF END AS NRINSCTOMADOR
    ,CASE WHEN PRO.OBRACONSTCIVIL IS NULL THEN 0 ELSE PRO.OBRACONSTCIVIL END AS INDOBRA
    ,PRO.CLASSIFCESSAOOBRA AS TPSERVICO
    ,SUM(ITE.VLRTOT) AS VLRTOTALBRUTO
    ,SUM(NVL(DIN.BASERED, 0) + NVL(IMN.BASE, 0)) AS VLRBASERET
    ,SUM(NVL(DIN.VALOR, 0) + NVL(IMN.VALOR, 0)) AS VLRRETENCAO
    ,0 AS VLRRETSUB /*Por enquanto não vamos gerar essa tag*/
    ,SUM(CASE WHEN DIN.TIPOINSSESPECIAL = '1' AND NVL(DIN.VLRINSSESPECIAL, 0) > 0 OR
                   IMN.TIPOINSSESPECIAL = '1' AND NVL(IMN.VLRINSSESPECIAL, 0) > 0 THEN ITE.VLRTOT ELSE 0 END) AS VLRSERVICOS15
    ,SUM(CASE WHEN DIN.TIPOINSSESPECIAL = '2' AND NVL(DIN.VLRINSSESPECIAL, 0) > 0 OR
                   IMN.TIPOINSSESPECIAL = '2' AND NVL(IMN.VLRINSSESPECIAL, 0) > 0 THEN ITE.VLRTOT ELSE 0 END) AS VLRSERVICOS20
    ,SUM(CASE WHEN DIN.TIPOINSSESPECIAL = '3' AND NVL(DIN.VLRINSSESPECIAL, 0) > 0 OR
                   IMN.TIPOINSSESPECIAL = '3' AND NVL(IMN.VLRINSSESPECIAL, 0) > 0 THEN ITE.VLRTOT ELSE 0 END) AS VLRSERVICOS25
    ,SUM(NVL(DIN.VLRINSSESPECIAL, 0) + NVL(IMN.VLRINSSESPECIAL, 0)) AS VLRADICIONAL
    ,MAX(SNK_GET_IDPROCESSO_IMP_EFD(1, 
                                  EMP.CODEMP, 
                                  PAR.CODPARC, 
                                  ITE.CODPROD, 
                                  PRO.CODLST, 
                                  CAB.DTNEG)) AS NUPROCESSO_INSS_PRINC
    ,MAX(SNK_GET_IDPROCESSO_IMP_EFD(1, 
                                  EMP.CODEMP, 
                                  PAR.CODPARC, 
                                  ITE.CODPROD, 
                                  PRO.CODLST, 
                                  CAB.DTNEG,
                                  'S')) AS SEQPROCESSO_INSS_PRINC
    ,MAX(CASE WHEN NVL(DIN.TIPOINSSESPECIAL, '') = '1' THEN SNK_GET_IDPROCESSO_IMP_EFD(9, 
                                                                                      EMP.CODEMP, 
                                                                                      PAR.CODPARC, 
                                                                                      ITE.CODPROD, 
                                                                                      PRO.CODLST, 
                                                                                      CAB.DTNEG) 
              ELSE NULL END) AS NUPROCESSO_INSS_15
    ,MAX(CASE WHEN NVL(DIN.TIPOINSSESPECIAL, '') = '1' THEN SNK_GET_IDPROCESSO_IMP_EFD(9, 
                                                                                      EMP.CODEMP, 
                                                                                      PAR.CODPARC, 
                                                                                      ITE.CODPROD, 
                                                                                      PRO.CODLST, 
                                                                                      CAB.DTNEG,
                                                                                      'S')
              ELSE NULL END) AS SEQPROCESSO_INSS_15
    ,MAX(CASE WHEN NVL(DIN.TIPOINSSESPECIAL, '') = '2' THEN SNK_GET_IDPROCESSO_IMP_EFD(10, 
                                                                                      EMP.CODEMP, 
                                                                                      PAR.CODPARC, 
                                                                                      ITE.CODPROD, 
                                                                                      PRO.CODLST, 
                                                                                      CAB.DTNEG)
              ELSE NULL END) AS NUPROCESSO_INSS_20
    ,MAX(CASE WHEN NVL(DIN.TIPOINSSESPECIAL, '') = '2' THEN SNK_GET_IDPROCESSO_IMP_EFD(10, 
                                                                                      EMP.CODEMP, 
                                                                                      PAR.CODPARC, 
                                                                                      ITE.CODPROD, 
                                                                                      PRO.CODLST, 
                                                                                      CAB.DTNEG,
                                                                                      'S')
              ELSE NULL END) AS SEQPROCESSO_INSS_20
    ,MAX(CASE WHEN NVL(DIN.TIPOINSSESPECIAL, '') = '3' THEN SNK_GET_IDPROCESSO_IMP_EFD(11, 
                                                                                      EMP.CODEMP, 
                                                                                      PAR.CODPARC, 
                                                                                      ITE.CODPROD, 
                                                                                      PRO.CODLST, 
                                                                                      CAB.DTNEG)
              ELSE NULL END) AS NUPROCESSO_INSS_25
    ,MAX(CASE WHEN NVL(DIN.TIPOINSSESPECIAL, '') = '3' THEN SNK_GET_IDPROCESSO_IMP_EFD(11, 
                                                                                      EMP.CODEMP, 
                                                                                      PAR.CODPARC, 
                                                                                      ITE.CODPROD, 
                                                                                      PRO.CODLST, 
                                                                                      CAB.DTNEG,
                                                                                      'S')
              ELSE NULL END) AS SEQPROCESSO_INSS_25
    FROM TGFITE ITE
        INNER JOIN TGFCAB CAB  ON CAB.NUNOTA = ITE.NUNOTA
        INNER JOIN (SELECT CODTIPOPER, DHALTER, TIPMOV, ATUALLIVISS, DESCROPER FROM TGFTOP) TPO  ON TPO.CODTIPOPER = CAB.CODTIPOPER AND TPO.DHALTER = CAB.DHTIPOPER
        INNER JOIN (SELECT CODEMP, CODEMPMATRIZEFD, EMPADMPUBDIR, ATIVO FROM TGFEMP) EMP  ON EMP.CODEMP = CAB.CODEMP
        INNER JOIN (SELECT CODEMP, RAZAOSOCIAL, NOMEFANTASIA, CGC FROM TSIEMP) EMPC ON EMPC.CODEMP = EMP.CODEMP
        INNER JOIN (SELECT CODPARC, NOMEPARC, CGC_CPF FROM TGFPAR) PAR  ON PAR.CODPARC = CAB.CODPARC
        INNER JOIN (SELECT CODPROD, OBRACONSTCIVIL, CLASSIFCESSAOOBRA, CODLST FROM TGFPRO) PRO  ON PRO.CODPROD = ITE.CODPROD
        LEFT JOIN  TGFDIN DIN  ON DIN.NUNOTA = ITE.NUNOTA AND DIN.SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 5 AND DIN.TIPO = -1
        LEFT JOIN  TGFIMN IMN  ON IMN.NUNOTA = ITE.NUNOTA AND IMN.SEQUENCIA = ITE.SEQUENCIA AND IMN.TIPOIMPOSTO = 5 AND IMN.TIPIMP = -1
    WHERE EMP.ATIVO = 'S'
        AND PRO.CLASSIFCESSAOOBRA IS NOT NULL
        AND ITE.USOPROD = 'S'
        AND TPO.TIPMOV = 'V'
        AND TPO.ATUALLIVISS = 'S'
        AND CAB.STATUSNOTA = 'L'
        AND (EXISTS (SELECT 1 FROM TGFDIN WHERE NUNOTA = ITE.NUNOTA AND SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 5 AND DIN.TIPO = -1) OR 
             EXISTS (SELECT 1 FROM TGFIMN WHERE NUNOTA = ITE.NUNOTA AND SEQUENCIA = ITE.SEQUENCIA AND IMN.TIPOIMPOSTO = 5 AND IMN.TIPIMP = -1))
    GROUP BY 
     CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMP.CODEMP
          WHEN NVL(EMP.CODEMPMATRIZEFD, 0) > 0 THEN EMP.CODEMPMATRIZEFD
          ELSE EMP.CODEMP 
     END
    ,TRUNC(CAB.DTNEG, 'MM')
    ,CASE WHEN LENGTH(EMPC.CGC) = 14 
          THEN '1' 
          ELSE '2' 
     END
    ,CASE WHEN LENGTH(EMPC.CGC) = 14 
          THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
                    THEN EMPC.CGC
                    ELSE SUBSTR(EMPC.CGC,1,8)
               END
          ELSE EMPC.CGC
     END
    ,1
    ,EMPC.CGC
    ,ITE.NUNOTA
    ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN 4 ELSE 1 END
    ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN CAB.CODOBRA ELSE PAR.CGC_CPF END
    ,CASE WHEN PRO.OBRACONSTCIVIL IS NULL THEN 0 ELSE PRO.OBRACONSTCIVIL END
    ,PRO.CLASSIFCESSAOOBRA
) TAB
    LEFT JOIN  TRIPISET ISET_INSS_PRINC ON ISET_INSS_PRINC.NUPROCESSO = NUPROCESSO_INSS_PRINC AND ISET_INSS_PRINC.SEQUENCIA = SEQPROCESSO_INSS_PRINC
    LEFT JOIN  TRIPISET ISET_INSS_15 ON ISET_INSS_15.NUPROCESSO = NUPROCESSO_INSS_15 AND ISET_INSS_15.SEQUENCIA = SEQPROCESSO_INSS_15
    LEFT JOIN  TRIPISET ISET_INSS_20 ON ISET_INSS_20.NUPROCESSO = NUPROCESSO_INSS_20 AND ISET_INSS_20.SEQUENCIA = SEQPROCESSO_INSS_20
    LEFT JOIN  TRIPISET ISET_INSS_25 ON ISET_INSS_25.NUPROCESSO = NUPROCESSO_INSS_25 AND ISET_INSS_25.SEQUENCIA = SEQPROCESSO_INSS_25
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48912-0-0
Nro. O.S. : 1090873
Nome      : Alterar - VRI_EVT_R2050_NFS 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VRI_EVT_R2050_NFS 
NomeObjeto: VRI_EVT_R2050_NFS 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2050_NFS 
AS
SELECT 
 TAB.CODEMP
,TAB.DTREF
,TAB.TPINSC||','||TAB.NRINSC||','||TAB.TPINSCESTAB||','||TAB.NRINSCESTAB||','||TAB.INDCOM AS CHAVE
,TAB.TPINSC
,TAB.NRINSC
,TAB.TPINSCESTAB
,TAB.NRINSCESTAB
,TAB.INDCOM
,TAB.NUNOTA
,SUM(TAB.VLRRECBRUTA) AS VLRRECBRUTA
,SUM(TAB.VLRCPAPUR) AS VLRCPAPUR
,SUM(TAB.VLRRATAPUR) AS VLRRATAPUR
,SUM(TAB.VLRSENARAPUR) AS VLRSENARAPUR    
,TAB.NUPROCESSO_INSS
,TAB.SEQPROCESSO_INSS
,TAB.NUPROCESSO_SENAR
,TAB.SEQPROCESSO_SENAR
,TAB.NUPROCESSO_GILRAT
,TAB.SEQPROCESSO_GILRAT
FROM (    
    SELECT 
     CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMP.CODEMP
          WHEN NVL(EMP.CODEMPMATRIZEFD, 0) > 0 THEN EMP.CODEMPMATRIZEFD
          ELSE EMP.CODEMP 
     END AS CODEMP
    ,TRUNC(CAB.DTNEG, 'MM') AS DTREF
    ,CASE WHEN LENGTH(EMPC.CGC) = 14 
          THEN '1' 
          ELSE '2' 
     END AS TPINSC
    ,CASE WHEN LENGTH(EMPC.CGC) = 14 
          THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
                    THEN EMPC.CGC
                    ELSE SUBSTR(EMPC.CGC,1,8)
               END
          ELSE EMPC.CGC
     END AS NRINSC
    ,1 AS TPINSCESTAB
    ,EMPC.CGC AS NRINSCESTAB
    ,PAR.INDCOMERCIALIZACAO AS INDCOM
    ,CAB.NUNOTA
    ,ITE.VLRTOT AS VLRRECBRUTA
    ,NVL(DIN.VALOR, 0) + NVL(IMN.VALOR, 0) AS VLRCPAPUR
    ,0 AS VLRRATAPUR /*Posteriormente iremos atrás dessas regras*/
    ,0 AS VLRSENARAPUR /*Posteriormente iremos atrás dessas regras*/
    ,SNK_GET_IDPROCESSO_IMP_EFD(1, 
                                EMP.CODEMP, 
                                PAR.CODPARC, 
                                ITE.CODPROD, 
                                PRO.CODLST, 
                                CAB.DTNEG) AS NUPROCESSO_INSS
    ,SNK_GET_IDPROCESSO_IMP_EFD(1, 
                                EMP.CODEMP, 
                                PAR.CODPARC, 
                                ITE.CODPROD, 
                                PRO.CODLST, 
                                CAB.DTNEG,
                                'S') AS SEQPROCESSO_INSS
    ,NULL /*SNK_GET_IDPROCESSO_IMP_EFD(3, 
                                EMP.CODEMP, 
                                PAR.CODPARC, 
                                ITE.CODPROD, 
                                PRO.CODLST, 
                                CAB.DTNEG)*/ AS NUPROCESSO_SENAR
    ,NULL /*SNK_GET_IDPROCESSO_IMP_EFD(3, 
                                EMP.CODEMP, 
                                PAR.CODPARC, 
                                ITE.CODPROD, 
                                PRO.CODLST, 
                                CAB.DTNEG,
                                'S')*/ AS SEQPROCESSO_SENAR
    ,NULL /*SNK_GET_IDPROCESSO_IMP_EFD(4, 
                                EMP.CODEMP, 
                                PAR.CODPARC, 
                                ITE.CODPROD, 
                                PRO.CODLST, 
                                CAB.DTNEG)*/ AS NUPROCESSO_GILRAT
    ,NULL /*SNK_GET_IDPROCESSO_IMP_EFD(4, 
                                EMP.CODEMP, 
                                PAR.CODPARC, 
                                ITE.CODPROD, 
                                PRO.CODLST, 
                                CAB.DTNEG,
                                'S')*/ AS SEQPROCESSO_GILRAT
    FROM TGFITE ITE
        INNER JOIN TGFCAB CAB  ON CAB.NUNOTA = ITE.NUNOTA
        INNER JOIN (SELECT CODTIPOPER, DHALTER, DESCROPER, TIPMOV, CODMODDOC FROM TGFTOP) TPO  ON TPO.CODTIPOPER = CAB.CODTIPOPER AND TPO.DHALTER = CAB.DHTIPOPER
        INNER JOIN (SELECT CODEMP, CODEMPMATRIZEFD, EMPADMPUBDIR, ATIVO FROM TGFEMP) EMP  ON EMP.CODEMP = CAB.CODEMP
        INNER JOIN (SELECT CODEMP, RAZAOSOCIAL, NOMEFANTASIA, CGC FROM TSIEMP) EMPC ON EMPC.CODEMP = EMP.CODEMP
        INNER JOIN (SELECT CODPARC, NOMEPARC, INDCOMERCIALIZACAO FROM TGFPAR) PAR  ON PAR.CODPARC = CAB.CODPARC
        INNER JOIN (SELECT CODPROD, DESCRPROD, CODLST, COMERCIALIZACAOAGRI FROM TGFPRO) PRO  ON PRO.CODPROD = ITE.CODPROD
        LEFT JOIN  TGFDIN DIN  ON DIN.NUNOTA = ITE.NUNOTA AND DIN.SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 5 AND DIN.TIPO = -1
        LEFT JOIN  TGFIMN IMN  ON IMN.NUNOTA = ITE.NUNOTA AND IMN.SEQUENCIA = ITE.SEQUENCIA AND IMN.TIPOIMPOSTO = 5 AND IMN.TIPIMP = -1
    WHERE EMP.ATIVO = 'S'
        AND NVL(PAR.INDCOMERCIALIZACAO, '0') IN ('1', '8', '9')
        AND NVL(PRO.COMERCIALIZACAOAGRI, 'N') = 'S'
        AND TPO.TIPMOV = 'V'
        AND CAB.STATUSNOTA = 'L' 
        AND TPO.CODMODDOC = 55
        AND CAB.STATUSNFE = 'A'
        AND (EXISTS (SELECT 1 FROM TGFDIN WHERE NUNOTA = ITE.NUNOTA AND SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 5 AND DIN.TIPO = -1) OR 
             EXISTS (SELECT 1 FROM TGFIMN WHERE NUNOTA = ITE.NUNOTA AND SEQUENCIA = ITE.SEQUENCIA AND IMN.TIPOIMPOSTO = 5 AND IMN.TIPIMP = -1))
) TAB
GROUP BY  
 TAB.CODEMP
,TAB.DTREF
,TAB.TPINSC
,TAB.NRINSC
,TAB.TPINSCESTAB
,TAB.NRINSCESTAB
,TAB.INDCOM
,TAB.NUNOTA    
,TAB.NUPROCESSO_INSS
,TAB.SEQPROCESSO_INSS
,TAB.NUPROCESSO_SENAR
,TAB.SEQPROCESSO_SENAR
,TAB.NUPROCESSO_GILRAT
,TAB.SEQPROCESSO_GILRAT
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48913-0-0
Nro. O.S. : 1090873
Nome      : Alterar - VRI_EVT_R2060_NFS 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VRI_EVT_R2060_NFS 
NomeObjeto: VRI_EVT_R2060_NFS 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2060_NFS 
AS
SELECT 
 TABX.CODEMP
,TABX.DTREF
,TABX.TPINSC||','||TABX.NRINSC||','||TABX.TPINSCESTAB||','||TABX.NRINSCESTAB||','||TABX.CODATIVECON AS CHAVE
,TABX.TPINSC
,TABX.NRINSC
,TABX.TPINSCESTAB
,TABX.NRINSCESTAB
,TABX.CODATIVECON
,TABX.NUNOTA
,SUM(TABX.VLRRECEITABRUTAESTAB) AS VLRRECEITABRUTAESTAB
,SUM(TABX.VLRRECEITABRUTAATIV) AS VLRRECEITABRUTAATIV
,SUM(TABX.VLRABATIMENTOBRUTOATIV) AS VLRABATIMENTOBRUTOATIV
,SUM(TABX.VLREXCLUSAOBRUTAATIV) AS VLREXCLUSAOBRUTAATIV
,SUM(TABX.VLRCPRBAPUR) AS VLRCPRBAPUR
,TABX.NUPROCESSO_INSS
,TABX.SEQPROCESSO_INSS
FROM (
    SELECT
     TAB.CODEMP
    ,TAB.DTREF
    ,TAB.TPINSC
    ,TAB.NRINSC
    ,TAB.TPINSCESTAB
    ,TAB.NRINSCESTAB
    ,CASE WHEN NVL(TAB.ENQREINTEGRA, 'N') = 'S' THEN CASE WHEN TAB.CODATIVREINTEGRA IS NOT NULL THEN CODATIVREINTEGRA 
                                                          ELSE TAB.CODATIVIDADE END
          ELSE TAB.CNAE END AS CODATIVECON
    ,TAB.NUNOTA
    ,TAB.RECEITABRUTAESTAB AS VLRRECEITABRUTAESTAB 
    ,TAB.RECEITABRUTAATIV AS VLRRECEITABRUTAATIV
    ,TAB.ABATIMENTOBRUTOATIV AS VLRABATIMENTOBRUTOATIV
    ,TAB.EXCLUSAOBRUTAATIV AS VLREXCLUSAOBRUTAATIV
    ,TAB.VLRCPRBAPUR
    ,TAB.NUPROCESSO_INSS
    ,TAB.SEQPROCESSO_INSS
    FROM ( 
        SELECT 
         CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMP.CODEMP
              WHEN NVL(EMP.CODEMPMATRIZEFD, 0) > 0 THEN EMP.CODEMPMATRIZEFD
              ELSE EMP.CODEMP 
         END AS CODEMP
        ,TRUNC(LIV.DHMOV, 'MM') AS DTREF
        ,CASE WHEN LENGTH(EMPC.CGC) = 14 
              THEN '1' 
              ELSE '2' 
         END AS TPINSC
        ,CASE WHEN LENGTH(EMPC.CGC) = 14 
              THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
                        THEN EMPC.CGC
                        ELSE SUBSTR(EMPC.CGC,1,8)
                   END
              ELSE EMPC.CGC
         END AS NRINSC
        ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN 4 ELSE 1 END AS TPINSCESTAB
        ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN CAB.CODOBRA ELSE EMPC.CGC END AS NRINSCESTAB
        ,CAST(PRO.NCM AS VARCHAR(10)) AS CODATIVIDADE
        ,PRO.ENQREINTEGRA
        ,NVL(PRO.CODCPRB, PRO.CODATIVREINTEGRA) AS CODATIVREINTEGRA
        ,RNT.CNAE
        ,CAB.NUNOTA
        ,CASE WHEN CFO.RECBRUTAEFDBLOCOP = 'S' THEN LIV.VLRCTB ELSE 0 END AS RECEITABRUTAESTAB
        ,CASE WHEN PRO.ENQREINTEGRA = 'S' THEN
                   CASE WHEN CFO.RECBRUTAEFDBLOCOP = 'S' THEN LIV.VLRCTB ELSE 0 END
              ELSE 0 END AS RECEITABRUTAATIV
        ,CASE WHEN PRO.ENQREINTEGRA = 'S' THEN
                   CASE WHEN CFO.RECBRUTAEFDBLOCOP = 'S' THEN 0 ELSE LIV.VLRCTB END
              ELSE 0 END AS ABATIMENTOBRUTOATIV
        ,CASE WHEN PRO.ENQREINTEGRA = 'S' THEN
                   CASE WHEN UFS.CODPAIS = NVL((SELECT INTEIRO FROM TSIPAR WHERE CHAVE = 'CODPAISBRASIL'), 55) THEN
                             CASE WHEN CFO.RECBRUTAEFDBLOCOP = 'S' THEN LIV.VLRIPI + LIV.ICMSRETENCAO
                                  ELSE (LIV.VLRIPI + LIV.ICMSRETENCAO) * (-1) END
                        ELSE CASE WHEN CFO.RECBRUTAEFDBLOCOP = 'S' THEN LIV.VLRCTB ELSE LIV.VLRCTB * (-1) END END
              ELSE 0 END AS EXCLUSAOBRUTAATIV
        ,NVL(DIN.VALOR, 0) + NVL(IMN.VALOR, 0) AS VLRCPRBAPUR 
        ,SNK_GET_IDPROCESSO_IMP_EFD(1, 
                                    EMP.CODEMP, 
                                    PAR.CODPARC, 
                                    ITE.CODPROD, 
                                    PRO.CODLST, 
                                    LIV.DHMOV) AS NUPROCESSO_INSS
        ,SNK_GET_IDPROCESSO_IMP_EFD(1, 
                                    EMP.CODEMP, 
                                    PAR.CODPARC, 
                                    ITE.CODPROD, 
                                    PRO.CODLST, 
                                    LIV.DHMOV,
                                    'S') AS SEQPROCESSO_INSS
        FROM TGFLIV LIV
            INNER JOIN (SELECT NUNOTA, CODOBRA, DTNEG, CODMAQ, NROREDZ FROM TGFCAB) CAB ON CAB.NUNOTA = LIV.NUNOTA
            INNER JOIN (SELECT NUNOTA, SEQUENCIA, CODPROD, VLRTOT, VLRDESC FROM TGFITE) ITE ON ITE.NUNOTA = LIV.NUNOTA AND ITE.SEQUENCIA = LIV.SEQUENCIA
            INNER JOIN (SELECT CODPROD, DESCRPROD, NCM, ENQREINTEGRA, CODCPRB, CODATIVREINTEGRA, CODLST, USOPROD, CNAE FROM TGFPRO) PRO ON PRO.CODPROD = ITE.CODPROD
            INNER JOIN TGFCFO CFO ON CFO.CODCFO = LIV.CODCFO
            INNER JOIN (SELECT CODEMP, EMPADMPUBDIR, CODEMPMATRIZEFD FROM TGFEMP) EMP ON EMP.CODEMP = LIV.CODEMP
            INNER JOIN (SELECT CODEMP, RAZAOSOCIAL, NOMEFANTASIA, CGC FROM TSIEMP) EMPC ON EMPC.CODEMP = EMP.CODEMP
            INNER JOIN (SELECT CODPARC, NOMEPARC, CODCID FROM TGFPAR) PAR ON PAR.CODPARC = LIV.CODPARC
            INNER JOIN TSICID CID ON CID.CODCID = PAR.CODCID
            INNER JOIN TSIUFS UFS ON UFS.CODUF = CID.UF
            LEFT JOIN TGFRNT RNT ON LIV.CODEMP = RNT.CODEMP AND LIV.DHMOV BETWEEN RNT.DTINI AND NVL(RNT.DTFIM, SYSDATE)
            LEFT JOIN TGFCPRB CPRB ON CPRB.CODCPRB = PRO.CODCPRB
            LEFT JOIN  TGFDIN DIN  ON DIN.NUNOTA = ITE.NUNOTA AND DIN.SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 5 AND DIN.TIPO = -1
            LEFT JOIN  TGFIMN IMN  ON IMN.NUNOTA = ITE.NUNOTA AND IMN.SEQUENCIA = ITE.SEQUENCIA AND IMN.TIPOIMPOSTO = 5 AND IMN.TIPIMP = -1
        WHERE LIV.ORIGEM IN ('E','A','D') 
            AND ((PRO.USOPROD <> 'S') OR (LIV.CODMODDOC IN (7, 8, 9, 10, 11, 26, 27, 57)))
            AND (CPRB.CODCPRB IS NOT NULL OR RNT.CODEMP IS NOT NULL)
            AND CFO.RECBRUTAEFDBLOCOP <> 'N'
            AND (EXISTS (SELECT 1 FROM TGFDIN WHERE NUNOTA = LIV.NUNOTA AND SEQUENCIA = LIV.SEQUENCIA AND DIN.CODIMP = 5 AND DIN.TIPO = -1) OR 
                 EXISTS (SELECT 1 FROM TGFIMN WHERE NUNOTA = LIV.NUNOTA AND SEQUENCIA = LIV.SEQUENCIA AND IMN.TIPOIMPOSTO = 5 AND IMN.TIPIMP = -1))
        UNION
        SELECT 
         CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMP.CODEMP
              WHEN NVL(EMP.CODEMPMATRIZEFD, 0) > 0 THEN EMP.CODEMPMATRIZEFD
              ELSE EMP.CODEMP 
         END AS CODEMP
        ,TRUNC(LIS.DTMOV, 'MM') AS DTREF
        ,CASE WHEN LENGTH(EMPC.CGC) = 14 
              THEN '1' 
              ELSE '2' 
         END AS TPINSC
        ,CASE WHEN LENGTH(EMPC.CGC) = 14 
              THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
                        THEN EMPC.CGC
                        ELSE SUBSTR(EMPC.CGC,1,8)
                   END
              ELSE EMPC.CGC
         END AS NRINSC
        ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN 4 ELSE 1 END AS TPINSCESTAB
        ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN CAB.CODOBRA ELSE EMPC.CGC END AS NRINSCESTAB
        ,CASE WHEN ((PRO.CNAE = 0) OR (PRO.CNAE IS NULL)) THEN CAST(RNT.CNAE AS VARCHAR(10))
              ELSE CAST(PRO.CNAE AS VARCHAR(10)) END AS CODATIVIDADE
        ,PRO.ENQREINTEGRA
        ,NVL(PRO.CODCPRB, PRO.CODATIVREINTEGRA) AS CODATIVREINTEGRA
        ,RNT.CNAE
        ,CAB.NUNOTA
        ,LIS.VLRCTB AS RECEITABRUTAESTAB
        ,CASE WHEN PRO.ENQREINTEGRA = 'S' THEN LIS.VLRCTB ELSE 0 END AS RECEITABRUTAATIV
        ,0 AS ABATIMENTOBRUTOATIV
        ,CASE WHEN ((PRO.ENQREINTEGRA = 'S') AND (UFS.CODPAIS <> NVL((SELECT INTEIRO FROM TSIPAR WHERE CHAVE = 'CODPAISBRASIL'), 55))) THEN
                        LIS.VLRCTB ELSE 0 END AS EXCLUSAOBRUTAATIV
        ,NVL(DIN.VALOR, 0) + NVL(IMN.VALOR, 0) AS VLRCPRBAPUR
        ,SNK_GET_IDPROCESSO_IMP_EFD(1, 
                                    EMP.CODEMP, 
                                    PAR.CODPARC, 
                                    ITE.CODPROD, 
                                    PRO.CODLST, 
                                    LIS.DTMOV) AS NUPROCESSO_INSS
        ,SNK_GET_IDPROCESSO_IMP_EFD(1, 
                                    EMP.CODEMP, 
                                    PAR.CODPARC, 
                                    ITE.CODPROD, 
                                    PRO.CODLST, 
                                    LIS.DTMOV,
                                    'S') AS SEQPROCESSO_INSS
        FROM TGFLIS LIS
            INNER JOIN (SELECT NUNOTA, CODOBRA, DTNEG, CODMAQ, NROREDZ FROM TGFCAB) CAB ON CAB.NUNOTA = LIS.NUNOTA
            INNER JOIN (SELECT NUNOTA, SEQUENCIA, CODPROD, VLRTOT, VLRDESC FROM TGFITE) ITE ON ITE.NUNOTA = LIS.NUNOTA AND ITE.SEQUENCIA = LIS.SEQUENCIA
            INNER JOIN (SELECT CODPROD, DESCRPROD, NCM, ENQREINTEGRA, CODCPRB, CODATIVREINTEGRA, CODLST, USOPROD, CNAE FROM TGFPRO) PRO ON PRO.CODPROD = ITE.CODPROD
            INNER JOIN (SELECT CODEMP, EMPADMPUBDIR, CODEMPMATRIZEFD FROM TGFEMP) EMP ON EMP.CODEMP = LIS.CODEMP
            INNER JOIN (SELECT CODEMP, RAZAOSOCIAL, NOMEFANTASIA, CGC FROM TSIEMP) EMPC ON EMPC.CODEMP = EMP.CODEMP
            INNER JOIN (SELECT CODPARC, NOMEPARC, CODCID FROM TGFPAR) PAR ON PAR.CODPARC = LIS.CODPARC
            INNER JOIN TSICID CID ON CID.CODCID = PAR.CODCID
            INNER JOIN TSIUFS UFS ON UFS.CODUF = CID.UF
            LEFT JOIN TGFRNT RNT ON LIS.CODEMP = RNT.CODEMP AND LIS.DTMOV BETWEEN RNT.DTINI AND NVL(RNT.DTFIM, SYSDATE)
            LEFT JOIN TGFCPRB CPRB ON CPRB.CODCPRB = PRO.CODCPRB
            LEFT JOIN  TGFDIN DIN  ON DIN.NUNOTA = ITE.NUNOTA AND DIN.SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 5 AND DIN.TIPO = -1
            LEFT JOIN  TGFIMN IMN  ON IMN.NUNOTA = ITE.NUNOTA AND IMN.SEQUENCIA = ITE.SEQUENCIA AND IMN.TIPOIMPOSTO = 5 AND IMN.TIPIMP = -1
        WHERE LIS.ORIGEM = 'E' 
            AND PRO.USOPROD = 'S'
            AND (CPRB.CODCPRB IS NOT NULL OR RNT.CODEMP IS NOT NULL)
            AND (EXISTS (SELECT 1 FROM TGFDIN WHERE NUNOTA = LIS.NUNOTA AND SEQUENCIA = LIS.SEQUENCIA AND DIN.CODIMP = 5 AND DIN.TIPO = -1) OR 
                 EXISTS (SELECT 1 FROM TGFIMN WHERE NUNOTA = LIS.NUNOTA AND SEQUENCIA = LIS.SEQUENCIA AND IMN.TIPOIMPOSTO = 5 AND IMN.TIPIMP = -1))
        UNION
        SELECT 
         CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMP.CODEMP
              WHEN NVL(EMP.CODEMPMATRIZEFD, 0) > 0 THEN EMP.CODEMPMATRIZEFD
              ELSE EMP.CODEMP 
         END AS CODEMP
        ,TRUNC(LIV.DHMOV, 'MM') AS DTREF
        ,CASE WHEN LENGTH(EMPC.CGC) = 14 
              THEN '1' 
              ELSE '2' 
         END AS TPINSC
        ,CASE WHEN LENGTH(EMPC.CGC) = 14 
              THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
                        THEN EMPC.CGC
                        ELSE SUBSTR(EMPC.CGC,1,8)
                   END
              ELSE EMPC.CGC
         END AS NRINSC
        ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN 4 ELSE 1 END AS TPINSCESTAB
        ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN CAB.CODOBRA ELSE EMPC.CGC END AS NRINSCESTAB
        ,CAST(PRO.NCM AS VARCHAR(10)) AS CODATIVIDADE
        ,PRO.ENQREINTEGRA
        ,NVL(PRO.CODCPRB, PRO.CODATIVREINTEGRA) AS CODATIVREINTEGRA
        ,RNT.CNAE
        ,CAB.NUNOTA
        ,CASE WHEN CFO.RECBRUTAEFDBLOCOP = 'S' THEN (ITE.VLRTOT - ITE.VLRDESC) ELSE 0 END AS RECEITABRUTAESTAB
        ,CASE WHEN PRO.ENQREINTEGRA = 'S' THEN
                   CASE WHEN CFO.RECBRUTAEFDBLOCOP = 'S' THEN (ITE.VLRTOT - ITE.VLRDESC) ELSE 0 END
              ELSE 0 END AS RECEITABRUTAATIV
        ,CASE WHEN PRO.ENQREINTEGRA = 'S' THEN
                   CASE WHEN CFO.RECBRUTAEFDBLOCOP = 'S' THEN 0 ELSE (ITE.VLRTOT - ITE.VLRDESC) END
              ELSE 0 END AS ABATIMENTOBRUTOATIV
        ,0 AS EXCLUSAOBRUTAATIV
        ,NVL(DIN.VALOR, 0) + NVL(IMN.VALOR, 0) AS VLRCPRBAPUR 
        ,SNK_GET_IDPROCESSO_IMP_EFD(1, 
                                    EMP.CODEMP, 
                                    PAR.CODPARC, 
                                    ITE.CODPROD, 
                                    PRO.CODLST, 
                                    LIV.DHMOV) AS NUPROCESSO_INSS
        ,SNK_GET_IDPROCESSO_IMP_EFD(1, 
                                    EMP.CODEMP, 
                                    PAR.CODPARC, 
                                    ITE.CODPROD, 
                                    PRO.CODLST, 
                                    LIV.DHMOV,
                                    'S') AS SEQPROCESSO_INSS
        FROM TGFLIV LIV
            INNER JOIN (SELECT NUNOTA, CODOBRA, DTNEG, CODMAQ, NROREDZ FROM TGFCAB) CAB ON CAB.DTNEG = LIV.DTDOC
            INNER JOIN (SELECT NUNOTA, SEQUENCIA, CODPROD, VLRTOT, VLRDESC FROM TGFITE) ITE ON ITE.NUNOTA = CAB.NUNOTA
            INNER JOIN TGFECF ECF ON ECF.NUECF = LIV.NUNOTA AND ECF.CODMAQ = CAB.CODMAQ AND ECF.CONTZ = CAB.NROREDZ
            INNER JOIN (SELECT CODPROD, DESCRPROD, NCM, ENQREINTEGRA, CODCPRB, CODATIVREINTEGRA, CODLST, USOPROD, CNAE FROM TGFPRO) PRO ON PRO.CODPROD = ITE.CODPROD
            INNER JOIN TGFCFO CFO ON CFO.CODCFO = LIV.CODCFO
            INNER JOIN (SELECT CODEMP, EMPADMPUBDIR, CODEMPMATRIZEFD FROM TGFEMP) EMP ON EMP.CODEMP = LIV.CODEMP
            INNER JOIN (SELECT CODEMP, RAZAOSOCIAL, NOMEFANTASIA, CGC FROM TSIEMP) EMPC ON EMPC.CODEMP = EMP.CODEMP
            INNER JOIN (SELECT CODPARC, NOMEPARC, CODCID FROM TGFPAR) PAR ON PAR.CODPARC = LIV.CODPARC
            INNER JOIN TSICID CID ON CID.CODCID = PAR.CODCID
            INNER JOIN TSIUFS UFS ON UFS.CODUF = CID.UF
            LEFT JOIN TGFRNT RNT ON LIV.CODEMP = RNT.CODEMP AND LIV.DHMOV BETWEEN RNT.DTINI AND NVL(RNT.DTFIM, SYSDATE)
            LEFT JOIN TGFCPRB CPRB ON CPRB.CODCPRB = PRO.CODCPRB
            LEFT JOIN  TGFDIN DIN  ON DIN.NUNOTA = ITE.NUNOTA AND DIN.SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 5 AND DIN.TIPO = -1
            LEFT JOIN  TGFIMN IMN  ON IMN.NUNOTA = ITE.NUNOTA AND IMN.SEQUENCIA = ITE.SEQUENCIA AND IMN.TIPOIMPOSTO = 5 AND IMN.TIPIMP = -1
        WHERE LIV.ORIGEM = 'Z'
            AND LIV.SEQUENCIA = (SELECT MIN(LIV2.SEQUENCIA)
                                 FROM TGFLIV LIV2
                                 WHERE LIV2.CODEMP = LIV.CODEMP
                                     AND LIV2.DHMOV = LIV.DHMOV
                                     AND LIV2.ORIGEM = 'Z'
                                     AND LIV2.NUNOTA = LIV.NUNOTA) 
            AND PRO.USOPROD NOT IN ('S', 'D', 'M')
            AND CFO.RECBRUTAEFDBLOCOP <> 'N'
            AND (EXISTS (SELECT 1 FROM TGFDIN DIN WHERE DIN.NUNOTA = LIV.NUNOTA AND DIN.SEQUENCIA = LIV.SEQUENCIA AND DIN.CODIMP = 5 AND DIN.TIPO = -1) OR 
                 EXISTS (SELECT 1 FROM TGFIMN IMN WHERE IMN.NUNOTA = LIV.NUNOTA AND IMN.SEQUENCIA = LIV.SEQUENCIA AND IMN.TIPOIMPOSTO = 5 AND IMN.TIPIMP = -1))
    ) TAB
) TABX
GROUP BY
 TABX.CODEMP
,TABX.DTREF
,TABX.TPINSC
,TABX.NRINSC
,TABX.TPINSCESTAB
,TABX.NRINSCESTAB
,TABX.CODATIVECON
,TABX.NUNOTA
,TABX.NUPROCESSO_INSS
,TABX.SEQPROCESSO_INSS
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 29/03/2018 18:00:16
Num.Script: 48914-0-0
Nro. O.S. : 1090873
Nome      : Alterar - SNK_PROCESSA_DADOS_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - SNK_PROCESSA_DADOS_REINF
NomeObjeto: SNK_PROCESSA_DADOS_REINF
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_PROCESSA_DADOS_REINF(P_CODEMP           NUMBER,
                                                     P_DTREF            DATE,
                                                     P_TPAMB            VARCHAR2,
                                                     P_SEQUENCIA_ATUAL  NUMBER, 
                                                     P_TIPDADOS         CHAR,                   /*T=TODOS, C=CADOSTRO, M=MOVIMENTO*/
                                                     P_EVENTO           VARCHAR2 := 'TODOS',    /*TODOS, NOMEEVENTO*/
                                                     P_NOMETAB          VARCHAR2 := NULL,       /*UTILIZADO NA RECURSIVIDADE*/
                                                     P_SEQUENCIA_PAI    NUMBER := NULL,         /*UTILIZADO NA RECURSIVIDADE*/
                                                     P_RESULT           OUT NUMBER)     
AS
    P_SEQUENCIA_OLD         NUMBER;
    P_SEQUENCIA_NEW         NUMBER;
    P_SEQUENCIA_DEL         NUMBER;
    P_DTREF_OLD             DATE;
    P_NRORECIBO             VARCHAR2(50);
    P_NRORECIBO_OLD         VARCHAR2(50) := NULL;
    P_COL_PAD_PAI_CADASTRO  VARCHAR2(4000) := 'CODEMP, DTREF, TPAMB, SEQUENCIA, STATUSREG, TIPO, NRORECIBO, NRORECIBOANT, IDEVENTO, CONTROLE, ';
    P_COL_PAD_PAI_MOVIMENTO VARCHAR2(4000) := 'CODEMP, DTREF, TPAMB, SEQUENCIA, STATUSREG, NRORECIBO, NRORECIBOANT, IDEVENTO, CONTROLE, ';
    P_COL_PAD_PAI           VARCHAR2(4000);    
    /*AS VARIAVEIS 'P_COL_PAD_FILHOS' E 'P_COL_PAD_FILHOS_PARAM' TEM QUE RESPEITAR A MESMA SEQUÊNCIA DE CAMPOS/PARAMETROS*/
    P_COL_PAD_FILHOS        VARCHAR2(4000) := 'CODEMP, DTREF, TPAMB, SEQUENCIA, ';
    P_COL_PAD_FILHOS_PARAM  VARCHAR2(4000) := ':CODEMP, :DTREF, :TPAMB, :SEQUENCIA, ';
    P_INSERT_COLUMNS        VARCHAR2(4000);
    P_INSERT_VALUES         VARCHAR2(4000);
    P_COUNT                 NUMBER(10);
    P_STATUS                CHAR(1);
    P_TIPO                  CHAR(1);
    queSql                  VARCHAR2(4000);
BEGIN

    IF P_NOMETAB IS NULL THEN
        FOR EVE IN (SELECT MON.NOMETAB, MON.NOMEEVENTO
                    FROM TRIMON MON
                        INNER JOIN TRIEVT EVT ON EVT.TIPOEVENTO = MON.NOMEEVENTO
                    WHERE (P_EVENTO = 'TODOS' OR MON.NOMEEVENTO = P_EVENTO)
                        AND MON.NOMETABPAI IS NULL
                        AND (P_EVENTO <> 'TODOS' OR P_TIPDADOS = 'T' OR EVT.GRUPO = P_TIPDADOS)
                        AND (EXISTS(SELECT 1
                                   FROM TGFEPS
                                   WHERE EVENTO = EVT.TIPOEVENTO
                                     AND CODEMP = P_CODEMP
                                     AND GERAREVENTO = 'S') OR 
                             EVT.GRUPO = 'C') /*EVENTOS DE CADASTRO NÃO ESTÃO NA TABELA TGFEPS*/
                    GROUP BY MON.NOMEEVENTO, MON.NOMETAB, MON.ORDEM
                    ORDER BY MON.ORDEM
                    ) 
        LOOP
            queSql := ' SELECT COUNT(1)  
                        FROM '||EVE.NOMETAB||'
                        WHERE CODEMP = :CODEMP
                          AND DTREF = :DTREF
                          AND TPAMB = :TPAMB
                          AND STATUSREG = ''E'' ';

            EXECUTE IMMEDIATE queSql INTO P_COUNT USING P_CODEMP, P_DTREF, P_TPAMB;

            IF P_COUNT > 0 THEN
                RAISE_APPLICATION_ERROR(-20101, 'Não é possivel gerar dados do REINF se existir eventos enviados para esta empresa/referência.');
            END IF;

            queSql := ' SELECT MAX(SEQUENCIA)
                        FROM '||EVE.NOMETAB||'
                        WHERE CODEMP = :CODEMP
                          AND DTREF = :DTREF
                          AND TPAMB = :TPAMB
                          AND STATUSREG = ''P''';

            EXECUTE IMMEDIATE queSql INTO P_SEQUENCIA_DEL USING P_CODEMP, P_DTREF, P_TPAMB;

            IF NVL(P_SEQUENCIA_DEL, 0) > 0 THEN
                FOR CUR_DEL IN (SELECT NOMETAB
                                FROM TRIMON
                                WHERE NOMETABPAI IS NULL
                                ORDER BY ORDEM DESC /*NÃO ALTERAR ESSA ORDEM: OS MOVIMENTOS DEVEM SER DELETADOS ANTES DOS PROCESSOS, POIS EXISTE FK ENTRE ELES*/
                                ) 
                LOOP
                    queSql := ' DELETE FROM '||CUR_DEL.NOMETAB||'
                                WHERE CODEMP = :CODEMP
                                  AND DTREF = :DTREF
                                  AND TPAMB = :TPAMB
                                  AND SEQUENCIA = :SEQUENCIA';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_DEL;
                END LOOP;
                P_SEQUENCIA_NEW := P_SEQUENCIA_ATUAL;
                EXIT; /*COMO JÁ DELETEI TODOS OS REGISTROS PARA A ULTIMA SEQUENCIA PENDENTE, POSSO SAIR DO LOOP*/
            END IF;
        END LOOP;
    ELSE
        P_SEQUENCIA_NEW := P_SEQUENCIA_PAI;
    END IF;

    IF P_SEQUENCIA_NEW IS NULL THEN /*SE A SEQUENCIA ESTÁ NULL, NENHUM REGISTRO FOI DELETADO, LOGO A SEQUENCIA SERÁ A SEQUENCIA ATUAL + 1*/
        P_SEQUENCIA_NEW := P_SEQUENCIA_ATUAL + 1;
    END IF;

    FOR EVE IN (SELECT MON.NOMETAB, MON.NOMEEVENTO, MON.NOMEVIEW, MON.NOMETABPAI, MON.VIEWDETALHE, EVT.GRUPO, MON.ORDEM
                FROM TRIMON MON
                    INNER JOIN TRIEVT EVT ON EVT.TIPOEVENTO = MON.NOMEEVENTO
                WHERE (P_NOMETAB IS NOT NULL AND MON.NOMETAB = P_NOMETAB) /*BUSCA O PRÓPRIO EVENTO*/ OR 
                         (  P_NOMETAB IS NULL
                         AND MON.NOMETABPAI IS NULL 
                         AND (P_EVENTO = 'TODOS' OR MON.NOMEEVENTO = P_EVENTO)                      
                         AND (P_EVENTO <> 'TODOS' OR P_TIPDADOS = 'T' OR EVT.GRUPO = P_TIPDADOS)
                         AND (EXISTS(SELECT 1
                                       FROM TGFEPS
                                     WHERE EVENTO = EVT.TIPOEVENTO
                                        AND GERAREVENTO = 'S') OR
                              EVT.GRUPO = 'C') /*EVENTOS DE CADASTRO NÃO ESTÃO NA TABELA TGFEPS*/
                      )
                GROUP BY MON.NOMETAB, MON.NOMEEVENTO, MON.NOMEVIEW, MON.NOMETABPAI, MON.VIEWDETALHE, EVT.GRUPO, MON.ORDEM
                ORDER BY MON.ORDEM  
               )
    LOOP
        P_NRORECIBO := NULL;
        P_NRORECIBO_OLD := NULL;
        P_STATUS := 'P';
        P_TIPO := 'I';

        IF EVE.GRUPO = 'C' THEN
            P_COL_PAD_PAI :=  P_COL_PAD_PAI_CADASTRO;
        ELSE 
            P_COL_PAD_PAI :=  P_COL_PAD_PAI_MOVIMENTO;
        END IF;

        IF P_SEQUENCIA_NEW > 1 THEN
            queSql := ' SELECT MAX(SEQUENCIA)
                        FROM '||EVE.NOMETAB||'
                        WHERE CODEMP = :CODEMP
                          AND DTREF = :DTREF
                          AND TPAMB = :TPAMB
                          AND SEQUENCIA < :SEQUENCIA_NEW';

            EXECUTE IMMEDIATE queSql INTO P_SEQUENCIA_OLD USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW;

            P_DTREF_OLD := P_DTREF;
        ELSIF EVE.GRUPO <> 'M' THEN
            queSql := ' SELECT NVL(MAX(DTREF), :DTREF)
                        FROM '||EVE.NOMETAB||'
                        WHERE CODEMP = :CODEMP
                          AND DTREF < :DTREF
                          AND TPAMB = :TPAMB';
            EXECUTE IMMEDIATE queSql INTO P_DTREF_OLD USING P_DTREF, P_CODEMP, P_DTREF, P_TPAMB;

            IF P_DTREF_OLD <> P_DTREF THEN
                queSql := ' SELECT NVL(MAX(SEQUENCIA),0)
                            FROM '||EVE.NOMETAB||'
                            WHERE CODEMP = :CODEMP
                              AND DTREF = :DTREF
                              AND TPAMB = :TPAMB';

                EXECUTE IMMEDIATE queSql INTO P_SEQUENCIA_OLD USING P_CODEMP, P_DTREF_OLD, P_TPAMB;
            ELSE
                P_SEQUENCIA_OLD := P_SEQUENCIA_NEW;
            END IF;
        ELSE
            P_SEQUENCIA_OLD := P_SEQUENCIA_NEW;
            P_DTREF_OLD := P_DTREF;
        END IF;

        IF EVE.GRUPO = 'M' THEN  /*MOVIMENTOS GRAVAM OS EVENTOS FILHOS PRIMEIRO*/     
            FOR EVEF IN (SELECT NOMEEVENTO, NOMETAB
                         FROM TRIMON
                         WHERE NOMETABPAI = EVE.NOMETAB
                         GROUP BY NOMEEVENTO, NOMETAB
                         ORDER BY NOMEEVENTO 
                        ) 
            LOOP
                SNK_PROCESSA_DADOS_REINF(P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_ATUAL, P_TIPDADOS, EVEF.NOMEEVENTO, EVEF.NOMETAB, P_SEQUENCIA_NEW, P_RESULT);
            END LOOP;
        END IF;

        P_INSERT_COLUMNS := SNK_GET_COLUMNS_TABLE(EVE.NOMETAB, P_COL_PAD_PAI); /*BASTA CHAMAR UMA VEZ PQ AS COLUNAS PADRÕES DOS FILHOS ESTÃO CONTIDAS NAS COLUNAS PADRÕES DO PAI*/

        IF EVE.NOMETABPAI IS NULL THEN
            P_INSERT_VALUES  := P_INSERT_COLUMNS;
            P_INSERT_COLUMNS := P_COL_PAD_PAI||P_INSERT_COLUMNS;

            /*AS COLUNAS DE PARAMETRO DO SELECT, TEM QUE SEGUIR A MESMA ORDEM DOS CAMPOS DA VARIÁVEL P_COL_PAD_PAI (CADASTRO OU MOVIMENTO)*/
            queSql := ' INSERT INTO '||EVE.NOMETAB||' ('||P_INSERT_COLUMNS||')
                                  SELECT :CODEMP
                                       , :DTREF
                                       , :TPAMB
                                       , :SEQUENCIA
                                       , CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND STATUSREG_OLD = ''F'' THEN ''F'' 
                                              ELSE ''P'' 
                                         END AS STATUSREG ';

            IF EVE.GRUPO = 'C' THEN  
                queSql := queSql||    ', CASE WHEN DADOS.CONTROLE_OLD = ''I'' OR DADOS.NRORECIBO_OLD IS NULL THEN ''I'' 
                                              WHEN DADOS.CONTROLE_OLD = ''E'' THEN ''E'' 
                                              ELSE ''A'' 
                                         END AS TIPO ';
            END IF;

            queSql :=  queSql||       ', CASE WHEN DADOS.CONTROLE_OLD = ''I'' THEN DADOS.NRORECIBO_OLD
                                              WHEN DADOS.CONTROLE_OLD = ''A'' THEN NULL 
                                              ELSE NRORECIBOANT_OLD 
                                         END AS NRORECIBO
                                       , CASE WHEN DADOS.CONTROLE_OLD = ''I'' THEN NRORECIBOANT_OLD 
                                              ELSE DADOS.NRORECIBO_OLD 
                                         END AS NRORECIBO_ANT
                                       , CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND STATUSREG_OLD = ''F'' THEN IDEVENTO_OLD 
                                              ELSE NULL 
                                         END AS IDEEVENTO
                                       , ''I'' AS CONTROLE
                                       , '||P_INSERT_VALUES||'     
                                  FROM (SELECT 
                                             NVL(ANT.CONTROLE, '' '') AS CONTROLE_OLD
                                           , ANT.NRORECIBO AS NRORECIBO_OLD 
                                           , ANT.NRORECIBOANT AS NRORECIBOANT_OLD ';

            IF EVE.GRUPO = 'C' THEN  
                queSql :=  queSql||       ', ANT.TIPO AS TIPO_OLD ';
            END IF;

            queSql :=  queSql||           ', ANT.STATUSREG AS STATUSREG_OLD
                                           , ANT.IDEVENTO AS IDEVENTO_OLD
                                           , V.*
                                        FROM '||EVE.NOMEVIEW||' V
                                             LEFT JOIN ( SELECT 
                                                            CHAVE
                                                          , CONTROLE
                                                          , NRORECIBO
                                                          , NRORECIBOANT ';

        IF EVE.GRUPO = 'C' THEN
            queSql :=  queSql||                           ', TIPO ';
        END IF;

        queSql :=  queSql||                               ', STATUSREG
                                                           , IDEVENTO
                                                          FROM '||EVE.NOMETAB||' OLD
                                                          WHERE OLD.CODEMP = :CODEMP
                                                             AND OLD.DTREF = :DTREF_OLD
                                                             AND OLD.TPAMB = :TPAMB
                                                             AND OLD.SEQUENCIA = :SEQUENCIA_OLD) ANT ON ANT.CHAVE = V.CHAVE
                                        WHERE V.CODEMP = :CODEMP ';

            IF EVE.GRUPO = 'C' THEN
                queSql :=  queSql||      '  AND :GRUPO = ''C'' 
                                            AND :DTREF BETWEEN V.INIVALID AND NVL(V.FIMVALID, :DTREF)
                                       ) DADOS';

                EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW, P_CODEMP, P_DTREF_OLD, P_TPAMB, P_SEQUENCIA_OLD, P_CODEMP, EVE.GRUPO, P_DTREF, P_DTREF;
            ELSE
                IF EVE.VIEWDETALHE = 'S' THEN /*A VIEW QUE É DETALHADA NÃO PRECISA PASSAR OS DADOS 'TPAMB' E 'SEQUENCIA' COMO PARAMETROS*/
                    queSql :=  queSql||  ' AND DTREF = :DTREF 
                                       ) DADOS';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW, P_CODEMP, P_DTREF_OLD, P_TPAMB, P_SEQUENCIA_OLD, P_CODEMP, P_DTREF;
                ELSE
                    queSql :=  queSql||  ' AND DTREF = :DTREF 
                                           AND TPAMB = :TPAMB
                                           AND SEQUENCIA = :SEQUENCIA
                                       ) DADOS';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW, P_CODEMP, P_DTREF_OLD, P_TPAMB, P_SEQUENCIA_OLD, P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW;
                END IF; 
            END IF;
        ELSE
            /*SÓ ENTRA AQUI PARA OS FILHOS*/
            P_INSERT_VALUES  := P_COL_PAD_FILHOS_PARAM||P_INSERT_COLUMNS;
            P_INSERT_COLUMNS := P_COL_PAD_FILHOS||P_INSERT_COLUMNS;

            queSql :=       ' INSERT INTO '||EVE.NOMETAB||' ('||P_INSERT_COLUMNS||')
                                        SELECT '||P_INSERT_VALUES||'
                                        FROM '||EVE.NOMEVIEW||'
                                        WHERE CODEMP = :CODEMP';

            IF EVE.GRUPO = 'C' THEN
                queSql :=  queSql||      ' AND :GRUPO = ''C'' ';

                EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW, P_CODEMP, EVE.GRUPO;
            ELSE
                IF EVE.VIEWDETALHE = 'S' THEN /*A VIEW QUE É DETALHADA NÃO PRECISA PASSAR OS DADOS 'TPAMB' E 'SEQUENCIA' COMO PARAMETROS*/
                    queSql :=  queSql||  ' AND DTREF = :DTREF ';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW, P_CODEMP, P_DTREF;
                ELSE
                    queSql :=  queSql||  ' AND DTREF = :DTREF 
                                           AND TPAMB = :TPAMB
                                           AND SEQUENCIA = :SEQUENCIA ';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW, P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW;
                END IF; 
            END IF;
        END IF;

        IF EVE.GRUPO = 'C' THEN  /*CADASTROS GRAVAM O EVENTO PAI PRIMEIRO*/

            /*UTILIZADO QUANDO O INSERT NÃO FOI FEITO POR CONTA DE EXCLUSÃO, ASSIM PRECISAMOS CRIAR UMA NOVA LINHA PARA SE FAZER A EXCLUSÃO*/
            IF P_DTREF <> P_DTREF_OLD  OR P_SEQUENCIA_NEW <> P_SEQUENCIA_OLD THEN
                P_INSERT_VALUES := SNK_GET_COLUMNS_TABLE(EVE.NOMETAB, P_COL_PAD_PAI);
                P_INSERT_VALUES := REPLACE(P_INSERT_VALUES, ' ', '');
                P_INSERT_VALUES := 'O.'||REPLACE(P_INSERT_VALUES, ',', ',O.');

                IF EVE.NOMETABPAI IS NULL THEN 
                    queSql := ' MERGE INTO '||EVE.NOMETAB||' N
                                USING (SELECT '||P_INSERT_COLUMNS||' 
                                       FROM '||EVE.NOMETAB||' 
                                       WHERE CODEMP = :CODEMP
                                         AND DTREF = :DTREF_OLD
                                         AND TPAMB = :TPAMB
                                         AND SEQUENCIA = :SEQUENCIA_OLD
                                          ) O 
                                ON (N.CODEMP = O.CODEMP AND
                                    N.DTREF = :DTREF AND
                                    N.TPAMB = O.TPAMB AND
                                    N.SEQUENCIA = :SEQUENCIA AND
                                    N.CHAVE = O.CHAVE)
                                WHEN NOT MATCHED THEN INSERT ('||P_INSERT_COLUMNS||')
                                    VALUES (O.CODEMP, 
                                           :DTREF, 
                                           O.TPAMB, 
                                           :SEQUENCIA, 
                                           CASE WHEN O.CONTROLE = ''E'' OR O.STATUSREG <> ''F'' THEN ''P''
                                                ELSE ''F''
                                           END, 
                                           CASE WHEN O.CONTROLE = ''E'' OR O.STATUSREG <> ''F'' THEN ''E''
                                                ELSE O.TIPO
                                           END, 
                                           CASE WHEN O.CONTROLE = ''E'' OR O.STATUSREG <> ''F'' THEN NULL 
                                                ELSE O.NRORECIBO
                                           END, 
                                           CASE WHEN O.CONTROLE = ''E'' THEN O.NRORECIBO 
                                                ELSE O.NRORECIBOANT 
                                           END, 
                                           CASE WHEN O.CONTROLE = ''E'' OR O.STATUSREG <> ''F'' THEN NULL
                                                ELSE O.IDEVENTO
                                           END, 
                                           CASE WHEN O.CONTROLE = ''E'' OR O.STATUSREG <> ''F'' THEN ''I''
                                                ELSE O.CONTROLE
                                           END, 
                                           '||P_INSERT_VALUES||' ) ';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF_OLD, P_TPAMB, P_SEQUENCIA_OLD, P_DTREF, P_SEQUENCIA_NEW, P_DTREF, P_SEQUENCIA_NEW;
                ELSE 
                    queSql := ' MERGE INTO '||EVE.NOMETAB||' N
                                USING (SELECT '||P_INSERT_COLUMNS||'
                                       FROM '||EVE.NOMETAB||' 
                                       WHERE CODEMP = :CODEMP
                                         AND DTREF = :DTREF_OLD
                                         AND TPAMB = :TPAMB
                                         AND SEQUENCIA = :SEQUENCIA_OLD
                                          ) O 
                                ON (N.CODEMP = O.CODEMP AND
                                    N.DTREF = :DTREF AND
                                    N.TPAMB = O.TPAMB AND
                                    N.SEQUENCIA = :SEQUENCIA AND 
                                    N.CHAVE = O.CHAVE)
                                WHEN NOT MATCHED THEN INSERT ('||P_INSERT_COLUMNS||')
                                    VALUES (O.CODEMP, 
                                            :DTREF, 
                                            O.TPAMB, 
                                            :SEQUENCIA, 
                                            '||P_INSERT_VALUES||' ) ';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF_OLD, P_TPAMB, P_SEQUENCIA_OLD, P_DTREF, P_SEQUENCIA_NEW, P_DTREF, P_SEQUENCIA_NEW;                                    
                END IF;
            END IF;

            FOR EVEF IN (SELECT NOMEEVENTO, NOMETAB
                         FROM TRIMON
                         WHERE NOMETABPAI = EVE.NOMETAB
                         GROUP BY NOMEEVENTO, NOMETAB
                         ORDER BY NOMEEVENTO 
                        ) 
            LOOP
                SNK_PROCESSA_DADOS_REINF(P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_ATUAL, P_TIPDADOS, EVEF.NOMEEVENTO, EVEF.NOMETAB, P_SEQUENCIA_NEW, P_RESULT);
            END LOOP;
        END IF;

        P_RESULT := P_SEQUENCIA_NEW;
    END LOOP;
EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    IF queSql IS NOT NULL THEN
        SELECT COUNT(1) INTO P_COUNT
        FROM LOGREINF
        WHERE DTOCOR = SYSDATE
         AND CODUSU = STP_GET_CODUSULOGADO();
        IF P_COUNT = 0 THEN
            INSERT INTO LOGREINF(DTOCOR, CODUSU, SQLERR)
                SELECT SYSDATE, STP_GET_CODUSULOGADO(), queSql FROM DUAL; 
        END IF;
    END IF;
    COMMIT;
    RAISE_APPLICATION_ERROR(-20101, SQLERRM);
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48915-0-0
Nro. O.S. : 1090873
Nome      : Criar - SNK_GET_COLUMNS_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - SNK_GET_COLUMNS_REINF
NomeObjeto: SNK_GET_COLUMNS_REINF
TipoObjeto: FUNCTION
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE FUNCTION SNK_GET_COLUMNS_REINF(P_TABLE            VARCHAR2, 
                                                 P_COLUMNNS_EXCECAO VARCHAR2 DEFAULT '*')
    RETURN VARCHAR2
IS  
    P_RESULT          VARCHAR2(4000);
    P_APELIDO_NEW     VARCHAR2(10) := 'N.';
    P_APELIDO_OLD     VARCHAR2(10) := 'O.';
    P_FORMAT_COLUMN   VARCHAR2(100);  
BEGIN  
    P_RESULT := ' ';

    FOR CUR_COLUMNS IN (SELECT COLUMN_NAME
                             , NULLABLE
                             , CASE WHEN DATA_TYPE IN ('NUMBER', 'FLOAT') THEN '0'
                                    WHEN DATA_TYPE = 'DATE' THEN 'SYSDATE'
                                    ELSE ''' ''' END AS DATA_NVL
                        FROM USER_TAB_COLUMNS
                        WHERE UPPER(TABLE_NAME) = UPPER(P_TABLE)
                            AND INSTR(P_COLUMNNS_EXCECAO, COLUMN_NAME) = 0) LOOP
    
        IF CUR_COLUMNS.NULLABLE = 'Y' THEN
            P_FORMAT_COLUMN := 'NVL('||P_APELIDO_NEW||CUR_COLUMNS.COLUMN_NAME||', '||CUR_COLUMNS.DATA_NVL||') = NVL('||P_APELIDO_OLD||CUR_COLUMNS.COLUMN_NAME||', '||CUR_COLUMNS.DATA_NVL||')';
        ELSE
            P_FORMAT_COLUMN := P_APELIDO_NEW||CUR_COLUMNS.COLUMN_NAME||' = '||P_APELIDO_OLD||CUR_COLUMNS.COLUMN_NAME; 
        END IF;
        
        IF P_RESULT = ' ' THEN
            P_RESULT := P_FORMAT_COLUMN;
        ELSE
            P_RESULT := P_RESULT ||' AND '||P_FORMAT_COLUMN;
        END IF;
    END LOOP;

    RETURN P_RESULT; 
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48916-0-0
Nro. O.S. : 1090873
Nome      : Criar - SNK_GET_PK_FOR_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - SNK_GET_PK_FOR_REINF
NomeObjeto: SNK_GET_PK_FOR_REINF
TipoObjeto: FUNCTION
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE FUNCTION SNK_GET_PK_FOR_REINF(P_TABELA   		VARCHAR2,
												P_COL_EXCESSAO 	VARCHAR2 := NULL)
RETURN VARCHAR2
AS
    P_RESULT    VARCHAR2(1000) := ' ';
    P_COL       VARCHAR2(4000);
BEGIN
    P_COL := ','||REPLACE(P_COL_EXCESSAO, ' ', '')||',';

    FOR COL IN (SELECT COLUMN_NAME
                FROM USER_CONS_COLUMNS COL
                     INNER JOIN USER_CONSTRAINTS CONS ON CONS.CONSTRAINT_NAME = COL.CONSTRAINT_NAME AND CONS.CONSTRAINT_TYPE = 'P'
                WHERE COL.TABLE_NAME = P_TABELA
                  AND INSTR(P_COL, COL.COLUMN_NAME) = 0
                ORDER BY COL.POSITION) LOOP
        IF P_RESULT = ' ' THEN
            P_RESULT := ' AND O.'||COL.COLUMN_NAME||' = N.'||COL.COLUMN_NAME;
        ELSE
            P_RESULT := P_RESULT || ' AND O.'||COL.COLUMN_NAME||' = N.'||COL.COLUMN_NAME;
        END IF;
    END LOOP;
    RETURN P_RESULT;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 02/03/2018 14:10:22
Num.Script: 48917-0-0
Nro. O.S. : 1090873
Nome      : Criar - SNK_VERIF_ALTER_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - SNK_VERIF_ALTER_REINF
NomeObjeto: SNK_VERIF_ALTER_REINF
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_VERIF_ALTER_REINF(P_CODEMP          NUMBER, 
                                                  P_DTREF           DATE, 
                                                  P_TPAMB           VARCHAR2, 
                                                  P_SEQUENCIAATUAL  NUMBER,
                                                  P_NOMETAB_PAI     VARCHAR2 := NULL,
                                                  P_NOMETAB         VARCHAR2,
                                                  P_NOMEVIEW        VARCHAR2)
IS
    P_CONDITION         VARCHAR2(4000);
    queSql              VARCHAR2(4000);
    queUpd              VARCHAR2(4000);
    TYPE CURTYPE        IS REF CURSOR;
    CURVAL              CURTYPE;
    P_CHAVES            VARCHAR2(4000);
    P_CHAVES_ALT        VARCHAR2(4000);
    P_CHAVE             VARCHAR2(50);
    P_VALIDACAO         VARCHAR2(50);
    P_COLUNAS_PADRAO    VARCHAR2(4000) := 'CODEMP, DTREF, TPAMB, SEQUENCIA, STATUSREG, TIPO, NRORECIBO, NRORECIBOANT, IDEVENTO, CONTROLE, ';
    P_COL_PAD_FILHOS    VARCHAR2(4000) := 'CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE';
    P_NOMETAB_UTIL      VARCHAR2(100);
    P_FILTRO_FILHOS     VARCHAR2(4000);
BEGIN
    P_CONDITION := SNK_GET_COLUMNS_REINF(P_NOMETAB, P_COLUNAS_PADRAO);

    IF P_NOMETAB_PAI IS NULL THEN 
        P_NOMETAB_UTIL := P_NOMETAB;

        queSql :=   'SELECT CHAVE, VALIDACAO
                         FROM (  SELECT O.CHAVE
                                      , CASE WHEN N.CODEMP IS NULL AND O.TIPO <> ''E'' THEN ''E''
                                             WHEN (N.CODEMP IS NULL AND O.TIPO = ''E'') OR ('||P_CONDITION||') THEN ''I''
                                             ELSE ''A'' 
                                        END AS VALIDACAO 
                                 FROM '||P_NOMETAB||' O
                                     LEFT JOIN '||P_NOMEVIEW||' N ON O.CODEMP = N.CODEMP AND O.CHAVE = N.CHAVE
                                 WHERE O.CODEMP = :CODEMP
                                   AND O.DTREF = :DTREF
                                   AND O.TPAMB = :TPAMB
                                   AND O.SEQUENCIA = :SEQUENCIA
                                   AND O.CONTROLE = ''I''
                              ) DTALT
                         WHERE DTALT.VALIDACAO <> ''I'' ';
    ELSE 
        P_NOMETAB_UTIL := P_NOMETAB_PAI;
        P_FILTRO_FILHOS := NVL(SNK_GET_PK_FOR_REINF(P_NOMETAB, P_COL_PAD_FILHOS), ' ');

        /*NÃO EXISTE A POSSIBILIDADE DO FILHO SETAR O STATUS DO PAI PARA 'E - EXCLUSÃO', POIS SE CHEGOU NO PONTO DE HAVER A VALIDAÇÃO DO FILHO, É POR QUE O PAI NÃO FOI ALTERADO,
        LOGO NÃO É UMA EXCLUSÃO E SIM UMA ALTERAÇÃO*/
        queSql :=   'SELECT CHAVE, VALIDACAO
                     FROM (  SELECT O.CHAVE
                                  , CASE WHEN (N.CODEMP IS NULL AND P.TIPO = ''E'') OR ('||P_CONDITION||') THEN ''I''
                                         ELSE ''A'' 
                                    END AS VALIDACAO 
                             FROM '||P_NOMETAB||' O
                                 LEFT JOIN '||P_NOMEVIEW||' N ON O.CODEMP = N.CODEMP AND O.CHAVE = N.CHAVE '||P_FILTRO_FILHOS||'
                                 INNER JOIN '||P_NOMETAB_PAI||' P ON P.CODEMP = O.CODEMP AND P.DTREF = O.DTREF AND P.TPAMB = O.TPAMB AND P.SEQUENCIA = O.SEQUENCIA AND O.CHAVE = P.CHAVE AND P.CONTROLE = ''I''
                             WHERE O.CODEMP = :CODEMP
                               AND O.DTREF = :DTREF
                               AND O.TPAMB = :TPAMB
                               AND O.SEQUENCIA = :SEQUENCIA
                          ) DTALT
                     WHERE DTALT.VALIDACAO <> ''I'' ';
    END IF;

    P_CHAVES := NULL;
    P_CHAVES_ALT := NULL;

    OPEN CURVAL FOR queSql USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIAATUAL;
    LOOP
        FETCH CURVAL INTO P_CHAVE, P_VALIDACAO;
        EXIT WHEN CURVAL%NOTFOUND;

        IF P_CHAVES IS NOT NULL AND LENGTH(P_CHAVES) + LENGTH(P_CHAVE) >= 3000 THEN
            queUpd :=               ' UPDATE '||P_NOMETAB_UTIL;

            IF P_CHAVES_ALT IS NOT NULL THEN
                queUpd := queUpd || ' SET CONTROLE = CASE WHEN CHAVE IN ('||P_CHAVES_ALT||') THEN ''A'' ELSE ''E'' END ';
            ELSE
                queUpd := queUpd || ' SET CONTROLE = ''E'' ';
            END IF;

            queUpd := queUpd ||     ' WHERE CODEMP = :CODEMP
                                         AND DTREF = :DTREF
                                         AND TPAMB = :TPAMB
                                         AND SEQUENCIA = :SEQUENCIA
                                         AND CONTROLE = ''I''
                                         AND CHAVE IN ('||P_CHAVES||')';
            IF P_NOMETAB_UTIL = 'TRIPRISET' THEN RAISE_APPLICATION_ERROR(-20101, 'PARTE 2: ' || queUpd); END IF;
            EXECUTE IMMEDIATE queUpd USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIAATUAL;

            P_CHAVES := NULL;
            P_CHAVES_ALT := NULL;
         END IF;

        IF P_CHAVES IS NULL THEN
            P_CHAVES := ''''||P_CHAVE||'''';

            IF P_VALIDACAO = 'A' THEN
                P_CHAVES_ALT := ''''||P_CHAVE||'''';
            END IF;
        ELSE 
            P_CHAVES := P_CHAVES||','''||P_CHAVE||'''';

            IF P_VALIDACAO = 'A' THEN
                P_CHAVES_ALT := P_CHAVES_ALT||','''||P_CHAVE||'''';
            END IF;
        END IF;
    END LOOP;

    IF P_CHAVES IS NOT NULL AND LENGTH(P_CHAVES) > 0 THEN
            queUpd :=               ' UPDATE '||P_NOMETAB_UTIL;

            IF P_CHAVES_ALT IS NOT NULL THEN
                queUpd := queUpd || ' SET CONTROLE = CASE WHEN CHAVE IN ('||P_CHAVES_ALT||') THEN ''A'' ELSE ''E'' END ';
            ELSE
                queUpd := queUpd || ' SET CONTROLE = ''E'' ';
            END IF;

            queUpd := queUpd ||     ' WHERE CODEMP = :CODEMP
                                         AND DTREF = :DTREF
                                         AND TPAMB = :TPAMB
                                         AND SEQUENCIA = :SEQUENCIA
                                         AND CONTROLE = ''I''
                                         AND CHAVE IN ('||P_CHAVES||')';

        EXECUTE IMMEDIATE queUpd USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIAATUAL;

        P_CHAVES := NULL;
        P_CHAVES_ALT := NULL;
    END IF;

    FOR EVEF IN (SELECT MON.NOMETAB, MON.NOMEVIEW
                 FROM TRIMON MON
                 WHERE MON.NOMETABPAI = P_NOMETAB 
                 GROUP BY MON.NOMETAB, MON.NOMEVIEW
                 ORDER BY MON.NOMETAB
          ) LOOP
        SNK_VERIF_ALTER_REINF(P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIAATUAL, P_NOMETAB, EVEF.NOMETAB, EVEF.NOMEVIEW);
    END LOOP;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48918-0-0
Nro. O.S. : 1090873
Nome      : Criar - SNK_VALID_ALTER_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - SNK_VALID_ALTER_REINF
NomeObjeto: SNK_VALID_ALTER_REINF
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_VALID_ALTER_REINF(P_CODEMP     NUMBER)
IS
BEGIN
   FOR EMP IN (SELECT EMP.CODEMP
                    , CAB.DTREF
                    , CAB.TPAMB
                    , CAB.SEQUENCIAATUAL
               FROM TGFEMP EMP
                    INNER JOIN TRICAB CAB ON CAB.CODEMP = EMP.CODEMP
                    AND ( (CAB.DTREF = EMP.DTREFPRODREINF AND CAB.TPAMB = '1') OR 
                          (CAB.DTREF = EMP.DTREFPREPRODREAISREINF AND CAB.TPAMB = '2') OR 
                          (CAB.DTREF = EMP.DTREFPREPRODFICTREINF AND CAB.TPAMB = '3')
                        )
               WHERE ((P_CODEMP = 0 AND EMP.CODEMP = NVL(EMP.CODEMPMATRIZEFD, EMP.CODEMP)) OR
                      EMP.CODEMP = P_CODEMP)
                   AND EMP.AMBIENTEREINF IS NOT NULL
                   AND EMP.TRIBREINF IS NOT NULL
                   AND EMP.DTVALINIREINF IS NOT NULL
              ) LOOP

       FOR EVE IN (SELECT MON.NOMETAB, MON.NOMEVIEW
                   FROM TRIMON MON
                       INNER JOIN TRIEVT EVT ON EVT.TIPOEVENTO = MON.NOMEEVENTO
                   WHERE EVT.GRUPO = 'C'
                       AND MON.NOMETABPAI IS NULL
                   GROUP BY MON.NOMETAB, MON.NOMEVIEW, MON.ORDEM
                   ORDER BY MON.ORDEM
                 ) LOOP
           SNK_VERIF_ALTER_REINF(EMP.CODEMP, EMP.DTREF, EMP.TPAMB, EMP.SEQUENCIAATUAL, NULL /*NOME TAB PAI*/, EVE.NOMETAB, EVE.NOMEVIEW);
       END LOOP;
   END LOOP;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48940-0-0
Nro. O.S. : 1129981
Nome      : Insere - FSTROCACUPOM
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Inserir o parametro
NomeObjeto: FSTROCACUPOM
TipoObjeto: PARAMETRO
NomeTabela: TSIPAR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO TSIPAR ( CHAVE, DESCRICAO, CODUSU, MODULO, CLASSE, ABA, TIPO,  LOGICO)  VALUES ( 'FSTROCACUPOM', 'Realiza troca somente com cupom da loja?', 0,'E', 'Saídas', 'Comercial',  'L', 'N') 
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:14
Num.Script: 48949-0-0
Nro. O.S. : 1133242
Nome      : Alterar - SNK_GET_DADOS_EFD
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - SNK_GET_DADOS_EFD
NomeObjeto: SNK_GET_DADOS_EFD
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_GET_DADOS_EFD (P_REGISTRO        VARCHAR2,
                                               P_CODEMP          NUMBER,
                                               P_NUNICO          NUMBER,
                                               P_SEQNOTA         NUMBER,
                                               P_ORIGEM          VARCHAR2,
                                               P_CODCENCUS   OUT NUMBER,
                                               P_CTACTB      OUT VARCHAR2)
AS
   P_GRUPO_NATUREZA   VARCHAR2 (100);
   CURSOR CUR_DADOS IS
    SELECT PLA.CTACTB, LAN.CODCENCUS
    FROM TCBINT BINT
        INNER JOIN TCBLAN LAN
           ON     LAN.CODEMP = BINT.CODEMP
              AND LAN.REFERENCIA = BINT.REFERENCIA
              AND LAN.NUMLOTE = BINT.NUMLOTE
              AND LAN.NUMLANC = BINT.NUMLANC
              AND LAN.TIPLANC = BINT.TIPLANC
              AND LAN.SEQUENCIA = BINT.SEQUENCIA
        INNER JOIN TCBPLA PLA
           ON PLA.CODCTACTB = LAN.CODCTACTB
    WHERE ( (P_ORIGEM = 'F'
           AND BINT.ORIGEM IN ('F', 'B', 'M', 'R', 'J'))
         OR (P_ORIGEM = 'E' AND BINT.ORIGEM IN ('E', 'L')))
        AND BINT.NUNICO = P_NUNICO
        AND (BINT.SEQNOTA = 0 OR BINT.SEQNOTA = P_SEQNOTA)
        AND (BINT.CODEMP = P_CODEMP
             OR (P_ORIGEM = 'E'
                 AND EXISTS
                       (SELECT 1
                          FROM TGFCAB C
                         WHERE C.NUNOTA = P_NUNICO
                               AND C.CODEMP = P_CODEMP))
             OR (P_ORIGEM = 'F'
                 AND EXISTS
                       (SELECT 1
                          FROM TGFFIN F
                         WHERE F.NUFIN = P_NUNICO
                               AND F.CODEMP = P_CODEMP)))
        AND INSTR (P_GRUPO_NATUREZA, ',' || PLA.NATUREZAEFD || ',') > 0
     ORDER BY BINT.SEQNOTA DESC, LAN.VLRLANC DESC, PLA.CTACTB DESC; /* ESSA ORDENAÇÃO É MUITO IMPORTANTE, NÃO PODE SER ALTERADA */
        
BEGIN
   IF P_REGISTRO IN ('A170', 'C170', 'C191', 'C195', 'C396', 'C481', 'C485', 'C501', 'C505', 'F100_NOTA', 'F100_FINANCEIRO')
   THEN
      P_GRUPO_NATUREZA := ',1,2,4,6,7,8,9,';
   ELSIF P_REGISTRO IN ('C175', 'C181', 'C185', 'C381', 'C385', 'C491', 'C495', 'C810', 'C870')
   THEN
      P_GRUPO_NATUREZA := ',1,2,';
   ELSIF P_REGISTRO IN ('D100', 'D101', 'D105')
   THEN
      P_GRUPO_NATUREZA := ',3,5,6,7,8,9,11,';
   ELSIF P_REGISTRO IN ('D201', 'D205', 'D601', 'D605')
   THEN
      P_GRUPO_NATUREZA := ',3,';
   ELSIF P_REGISTRO IN ('D501', 'D505')
   THEN
      P_GRUPO_NATUREZA := ',6,7,';
   ELSIF P_REGISTRO IN ('F500', 'F510', 'F525', 'F550', 'F560', '1900')
   THEN
      P_GRUPO_NATUREZA := ',1,2,3,';
   ELSIF P_REGISTRO IN ('F100_MULTA', 'F100_JURO', 'F100_DESCONTO')
   THEN
      P_GRUPO_NATUREZA := ',1,2,6,7,12,13,';
   ELSE
      P_GRUPO_NATUREZA := ' ';
   END IF;

   IF P_GRUPO_NATUREZA <> ' ' THEN
      OPEN CUR_DADOS;
      FETCH CUR_DADOS INTO P_CTACTB, P_CODCENCUS;
      CLOSE CUR_DADOS;
   END IF;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:16
Num.Script: 48950-0-1000
Nro. O.S. : 1133242
Nome      : INSERE - THOOBJ - 4894900
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_GET_DADOS_EFD
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210000
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_GET_DADOS_EFD' NOMEOBJ, 48949 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, '3c09f8dc1f6eff8a8b3c881081113aca' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_GET_DADOS_EFD' and THO.hashcode = '3c09f8dc1f6eff8a8b3c881081113aca')
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 48957-0-0
Nro. O.S. : 1133242
Nome      : Alterar - SNK_GET_CTACTB_CADASTROS_EFD 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - SNK_GET_CTACTB_CADASTROS_EFD 
NomeObjeto: SNK_GET_CTACTB_CADASTROS_EFD 
TipoObjeto: FUNCTION
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE FUNCTION SNK_GET_CTACTB_CADASTROS_EFD (
   P_REGISTRO      VARCHAR2,
   P_CODEMP        NUMBER,
   P_CODPROD       NUMBER,
   P_CODNAT        NUMBER,
   P_CODTIPOPER    NUMBER,
   P_DHTIPOPER     DATE,
   P_USOPROD       VARCHAR2)
   RETURN VARCHAR2
AS
   P_CODCTACTB        TCBPLA.CODCTACTB%TYPE := NULL;
   P_RESULT           TCBPLA.CTACTB%TYPE := NULL;
   P_GRUPO_NATUREZA   VARCHAR2 (100) := ' ';
BEGIN
   IF P_REGISTRO IN
            ('A170',
             'C170',
             'C191',
             'C195',
             'C396',
             'C481',
             'C485',
             'C501',
             'C505',
             'F100_NOTA',
             'F100_FINANCEIRO')
   THEN
      P_GRUPO_NATUREZA := ',1,2,4,6,7,8,9,';
   ELSIF P_REGISTRO IN
               ('C175',
                'C181',
                'C185',
                'C381',
                'C385',
                'C491',
                'C495',
                'C810',
                'C870')
   THEN
      P_GRUPO_NATUREZA := ',1,2,';
   ELSIF P_REGISTRO IN ('D100', 'D101', 'D105')
   THEN
      P_GRUPO_NATUREZA := ',3,5,6,7,8,9,11,';
   ELSIF P_REGISTRO IN ('D201', 'D205', 'D601', 'D605')
   THEN
      P_GRUPO_NATUREZA := ',3,';
   ELSIF P_REGISTRO IN ('D501', 'D505')
   THEN
      P_GRUPO_NATUREZA := ',6,7,';
   ELSIF P_REGISTRO IN ('F500', 'F510', 'F525', 'F550', 'F560', '1900')
   THEN
      P_GRUPO_NATUREZA := ',1,2,3,';
   ELSIF P_REGISTRO IN ('F100_MULTA', 'F100_JURO', 'F100_DESCONTO')
   THEN
      P_GRUPO_NATUREZA := ',1,2,6,7,12,13,';
   ELSIF P_REGISTRO = 'F120'
   THEN 
      P_GRUPO_NATUREZA := ',10,';
   ELSIF P_REGISTRO = 'F130'
   THEN
      P_GRUPO_NATUREZA := ',11,';
   ELSE
      P_GRUPO_NATUREZA := ' ';
   END IF;

   IF NVL (P_CODPROD, 0) <> 0
   THEN
      IF NVL (P_USOPROD, 'R') = 'S'
      THEN
         BEGIN
            SELECT CODCTACTBEFD
              INTO P_CODCTACTB
              FROM TGFSEM PEM
             WHERE CODPROD = P_CODPROD AND CODEMP = P_CODEMP
                   AND EXISTS
                         (SELECT 1
                            FROM TCBPLA PLA
                           WHERE PLA.CODCTACTB = CODCTACTBEFD
                                 AND INSTR (P_GRUPO_NATUREZA,
                                            ',' || PLA.NATUREZAEFD || ',') >
                                       0);
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               P_CODCTACTB := NULL;
         END;
      ELSE
         BEGIN
            SELECT CODCTACTBEFD
              INTO P_CODCTACTB
              FROM TGFPEM PEM
             WHERE CODPROD = P_CODPROD AND CODEMP = P_CODEMP
                   AND EXISTS
                         (SELECT 1
                            FROM TCBPLA PLA
                           WHERE PLA.CODCTACTB = CODCTACTBEFD
                                 AND INSTR (P_GRUPO_NATUREZA,
                                            ',' || PLA.NATUREZAEFD || ',') >
                                       0);
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               P_CODCTACTB := NULL;
         END;
      END IF;

      IF P_CODCTACTB IS NULL
      THEN
         BEGIN
            SELECT CODCTACTBEFD
              INTO P_CODCTACTB
              FROM TGFPRO
             WHERE CODPROD = P_CODPROD
                   AND EXISTS
                         (SELECT 1
                            FROM TCBPLA PLA
                           WHERE PLA.CODCTACTB = CODCTACTBEFD
                                 AND INSTR (P_GRUPO_NATUREZA,
                                            ',' || PLA.NATUREZAEFD || ',') >
                                       0);
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               P_CODCTACTB := NULL;
         END;
      END IF;

      IF P_CODCTACTB IS NULL
      THEN
         BEGIN
            SELECT GEM.CODCTACTBEFD
              INTO P_CODCTACTB
              FROM TGFPRO PRO INNER JOIN TGFGEM GEM
                      ON GEM.CODGRUPOPROD = PRO.CODGRUPOPROD
             WHERE PRO.CODPROD = P_CODPROD AND GEM.CODEMP = P_CODEMP
                   AND EXISTS
                         (SELECT 1
                            FROM TCBPLA PLA
                           WHERE PLA.CODCTACTB = GEM.CODCTACTBEFD
                                 AND INSTR (P_GRUPO_NATUREZA,
                                            ',' || PLA.NATUREZAEFD || ',') >
                                       0);
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               P_CODCTACTB := NULL;
         END;
      END IF;

      IF P_CODCTACTB IS NULL
      THEN
         BEGIN
            SELECT GRU.CODCTACTBEFD
              INTO P_CODCTACTB
              FROM TGFPRO PRO INNER JOIN TGFGRU GRU
                      ON GRU.CODGRUPOPROD = PRO.CODGRUPOPROD
             WHERE PRO.CODPROD = P_CODPROD
                   AND EXISTS
                         (SELECT 1
                            FROM TCBPLA PLA
                           WHERE PLA.CODCTACTB = GRU.CODCTACTBEFD
                                 AND INSTR (P_GRUPO_NATUREZA,
                                            ',' || PLA.NATUREZAEFD || ',') >
                                       0);
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               P_CODCTACTB := NULL;
         END;
      END IF;
   END IF;


   IF P_CODCTACTB IS NULL AND NVL (P_CODNAT, 0) <> 0
   THEN
      BEGIN
         SELECT CODCTACTBEFD
           INTO P_CODCTACTB
           FROM TGFNAT
          WHERE CODNAT = P_CODNAT
                AND EXISTS
                      (SELECT 1
                         FROM TCBPLA PLA
                        WHERE PLA.CODCTACTB = CODCTACTBEFD
                              AND INSTR (P_GRUPO_NATUREZA,
                                         ',' || PLA.NATUREZAEFD || ',') > 0);
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            P_CODCTACTB := NULL;
      END;
   END IF;

   IF P_CODCTACTB IS NULL AND NVL (P_CODTIPOPER, 0) <> 0
   THEN
      BEGIN
         SELECT CODCTACTBEFD
           INTO P_CODCTACTB
           FROM TGFTOP
          WHERE CODTIPOPER = P_CODTIPOPER AND DHALTER = P_DHTIPOPER
                AND EXISTS
                      (SELECT 1
                         FROM TCBPLA PLA
                        WHERE PLA.CODCTACTB = CODCTACTBEFD
                              AND INSTR (P_GRUPO_NATUREZA,
                                         ',' || PLA.NATUREZAEFD || ',') > 0);
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            P_CODCTACTB := NULL;
      END;
   END IF;

   IF P_CODCTACTB IS NOT NULL
   THEN
      BEGIN
         SELECT CTACTB
           INTO P_RESULT
           FROM TCBPLA
          WHERE CODCTACTB = P_CODCTACTB;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            P_RESULT := NULL;
      END;
   END IF;

   RETURN P_RESULT;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:16
Num.Script: 48958-0-1000
Nro. O.S. : 1133242
Nome      : INSERE - THOOBJ - 4895700
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_GET_CTACTB_CADASTROS_EFD
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210000
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_GET_CTACTB_CADASTROS_EFD' NOMEOBJ, 48957 NUMSCRIPT, SYSDATE DTALTER, 'FUNCTION' TIPO, '607fc8d98439a48d66d863bf725d0145' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_GET_CTACTB_CADASTROS_EFD' and THO.hashcode = '607fc8d98439a48d66d863bf725d0145')
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 48959-0-0
Nro. O.S. : 1090873
Nome      : Cria - TRG_UPD_DLT_TRIICR
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TRG_UPD_DLT_TRIICR
NomeObjeto: TRG_UPD_DLT_TRIICR
TipoObjeto: TRIGGER
NomeTabela: TRIICR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_UPD_DLT_TRIICR
BEFORE UPDATE OR DELETE ON TRIICR
FOR EACH ROW
WHEN(
    NEW.CODEMP IS NULL OR OLD.STATUSREG <> NVL(NEW.STATUSREG, ' ')
)
DECLARE
    P_SEQUENCIA_ATUAL    NUMBER(5);
BEGIN
    SELECT NVL(SEQUENCIAATUAL, 0) INTO P_SEQUENCIA_ATUAL
    FROM TRICAB
    WHERE CODEMP = :OLD.CODEMP
    AND DTREF = :OLD.DTREF
    AND TPAMB = :OLD.TPAMB;

    /*O UPDATE da quantidade de eventos no cabeçalho quando estou incluindo um registro é feito pela aplicação*/
    IF P_SEQUENCIA_ATUAL = :OLD.SEQUENCIA THEN
        UPDATE TRICAB
        SET EVTPENDENTE = CASE WHEN :OLD.STATUSREG = 'P' THEN NVL(EVTPENDENTE, 0) - 1
                               WHEN NVL(:NEW.STATUSREG, ' ') = 'P' THEN NVL(EVTPENDENTE, 0) + 1
                               ELSE EVTPENDENTE 
                          END,
            EVTENVIADO = CASE WHEN :OLD.STATUSREG = 'E' THEN NVL(EVTENVIADO, 0) - 1
                              WHEN :NEW.STATUSREG = 'E' THEN NVL(EVTENVIADO, 0) + 1
                              ELSE EVTENVIADO 
                         END,
            EVTAGUARCORRECAO = CASE WHEN :OLD.STATUSREG = 'A' THEN NVL(EVTAGUARCORRECAO, 0) - 1
                                    WHEN NVL(:NEW.STATUSREG, ' ') = 'A' THEN NVL(EVTAGUARCORRECAO, 0) + 1
                                    ELSE EVTAGUARCORRECAO 
                               END,
            EVTERROEVTPRIOR = CASE WHEN :OLD.STATUSREG = 'X' THEN NVL(EVTERROEVTPRIOR, 0) - 1
                                    WHEN NVL(:NEW.STATUSREG, ' ') = 'X' THEN NVL(EVTERROEVTPRIOR, 0) + 1
                                    ELSE EVTERROEVTPRIOR 
                               END,
            EVTFINALIZADO = CASE WHEN :OLD.STATUSREG = 'F' THEN NVL(EVTFINALIZADO, 0) - 1
                                 WHEN NVL(:NEW.STATUSREG, ' ') = 'F' THEN NVL(EVTFINALIZADO, 0) + 1
                                 ELSE EVTFINALIZADO 
                            END
        WHERE CODEMP = :OLD.CODEMP
            AND DTREF = :OLD.DTREF
            AND TPAMB = :OLD.TPAMB;
    END IF;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 48960-0-0
Nro. O.S. : 1090873
Nome      : Criar - TRG_UPD_DLT_TRIPAJR
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TRG_UPD_DLT_TRIPAJR
NomeObjeto: TRG_UPD_DLT_TRIPAJR
TipoObjeto: TRIGGER
NomeTabela: TRIPAJR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_UPD_DLT_TRIPAJR
BEFORE UPDATE OR DELETE ON TRIPAJR
FOR EACH ROW
WHEN(
    NEW.CODEMP IS NULL OR OLD.STATUSREG <> NVL(NEW.STATUSREG, ' ')
)
DECLARE
    P_SEQUENCIA_ATUAL    NUMBER(5);
BEGIN
    SELECT NVL(SEQUENCIAATUAL, 0) INTO P_SEQUENCIA_ATUAL
    FROM TRICAB
    WHERE CODEMP = :OLD.CODEMP
    AND DTREF = :OLD.DTREF
    AND TPAMB = :OLD.TPAMB;

    /*O UPDATE da quantidade de eventos no cabeçalho quando estou incluindo um registro é feito pela aplicação*/
    IF P_SEQUENCIA_ATUAL = :OLD.SEQUENCIA THEN
        UPDATE TRICAB
        SET EVTPENDENTE = CASE WHEN :OLD.STATUSREG = 'P' THEN NVL(EVTPENDENTE, 0) - 1
                               WHEN NVL(:NEW.STATUSREG, ' ') = 'P' THEN NVL(EVTPENDENTE, 0) + 1
                               ELSE EVTPENDENTE 
                          END,
            EVTENVIADO = CASE WHEN :OLD.STATUSREG = 'E' THEN NVL(EVTENVIADO, 0) - 1
                              WHEN :NEW.STATUSREG = 'E' THEN NVL(EVTENVIADO, 0) + 1
                              ELSE EVTENVIADO 
                         END,
            EVTAGUARCORRECAO = CASE WHEN :OLD.STATUSREG = 'A' THEN NVL(EVTAGUARCORRECAO, 0) - 1
                                    WHEN NVL(:NEW.STATUSREG, ' ') = 'A' THEN NVL(EVTAGUARCORRECAO, 0) + 1
                                    ELSE EVTAGUARCORRECAO 
                               END,
            EVTERROEVTPRIOR = CASE WHEN :OLD.STATUSREG = 'X' THEN NVL(EVTERROEVTPRIOR, 0) - 1
                                    WHEN NVL(:NEW.STATUSREG, ' ') = 'X' THEN NVL(EVTERROEVTPRIOR, 0) + 1
                                    ELSE EVTERROEVTPRIOR 
                               END,
            EVTFINALIZADO = CASE WHEN :OLD.STATUSREG = 'F' THEN NVL(EVTFINALIZADO, 0) - 1
                                 WHEN NVL(:NEW.STATUSREG, ' ') = 'F' THEN NVL(EVTFINALIZADO, 0) + 1
                                 ELSE EVTFINALIZADO 
                            END
        WHERE CODEMP = :OLD.CODEMP
            AND DTREF = :OLD.DTREF
            AND TPAMB = :OLD.TPAMB;
    END IF;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 48961-0-0
Nro. O.S. : 1090873
Nome      : Criar - TRG_UPD_DLT_TRIRCST
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TRG_UPD_DLT_TRIRCST
NomeObjeto: TRG_UPD_DLT_TRIRCST
TipoObjeto: TRIGGER
NomeTabela: TRIRCST
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_UPD_DLT_TRIRCST
BEFORE UPDATE OR DELETE ON TRIRCST
FOR EACH ROW
WHEN(
    NEW.CODEMP IS NULL OR OLD.STATUSREG <> NVL(NEW.STATUSREG, ' ')
)
DECLARE
    P_SEQUENCIA_ATUAL    NUMBER(5);
BEGIN
    SELECT NVL(SEQUENCIAATUAL, 0) INTO P_SEQUENCIA_ATUAL
    FROM TRICAB
    WHERE CODEMP = :OLD.CODEMP
    AND DTREF = :OLD.DTREF
    AND TPAMB = :OLD.TPAMB;

    /*O UPDATE da quantidade de eventos no cabeçalho quando estou incluindo um registro é feito pela aplicação*/
    IF P_SEQUENCIA_ATUAL = :OLD.SEQUENCIA THEN
        UPDATE TRICAB
        SET EVTPENDENTE = CASE WHEN :OLD.STATUSREG = 'P' THEN NVL(EVTPENDENTE, 0) - 1
                               WHEN NVL(:NEW.STATUSREG, ' ') = 'P' THEN NVL(EVTPENDENTE, 0) + 1
                               ELSE EVTPENDENTE 
                          END,
            EVTENVIADO = CASE WHEN :OLD.STATUSREG = 'E' THEN NVL(EVTENVIADO, 0) - 1
                              WHEN :NEW.STATUSREG = 'E' THEN NVL(EVTENVIADO, 0) + 1
                              ELSE EVTENVIADO 
                         END,
            EVTAGUARCORRECAO = CASE WHEN :OLD.STATUSREG = 'A' THEN NVL(EVTAGUARCORRECAO, 0) - 1
                                    WHEN NVL(:NEW.STATUSREG, ' ') = 'A' THEN NVL(EVTAGUARCORRECAO, 0) + 1
                                    ELSE EVTAGUARCORRECAO 
                               END,
            EVTERROEVTPRIOR = CASE WHEN :OLD.STATUSREG = 'X' THEN NVL(EVTERROEVTPRIOR, 0) - 1
                                    WHEN NVL(:NEW.STATUSREG, ' ') = 'X' THEN NVL(EVTERROEVTPRIOR, 0) + 1
                                    ELSE EVTERROEVTPRIOR 
                               END,
            EVTFINALIZADO = CASE WHEN :OLD.STATUSREG = 'F' THEN NVL(EVTFINALIZADO, 0) - 1
                                 WHEN NVL(:NEW.STATUSREG, ' ') = 'F' THEN NVL(EVTFINALIZADO, 0) + 1
                                 ELSE EVTFINALIZADO 
                            END
        WHERE CODEMP = :OLD.CODEMP
            AND DTREF = :OLD.DTREF
            AND TPAMB = :OLD.TPAMB;
    END IF;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 48962-0-0
Nro. O.S. : 1090873
Nome      : Criar - TRG_UPD_DLT_TRIRCSP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TRG_UPD_DLT_TRIRCSP
NomeObjeto: TRG_UPD_DLT_TRIRCSP
TipoObjeto: TRIGGER
NomeTabela: TRIRCSP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_UPD_DLT_TRIRCSP
BEFORE UPDATE OR DELETE ON TRIRCSP
FOR EACH ROW
WHEN(
    NEW.CODEMP IS NULL OR OLD.STATUSREG <> NVL(NEW.STATUSREG, ' ')
)
DECLARE
    P_SEQUENCIA_ATUAL    NUMBER(5);
BEGIN
    SELECT NVL(SEQUENCIAATUAL, 0) INTO P_SEQUENCIA_ATUAL
    FROM TRICAB
    WHERE CODEMP = :OLD.CODEMP
    AND DTREF = :OLD.DTREF
    AND TPAMB = :OLD.TPAMB;

    /*O UPDATE da quantidade de eventos no cabeçalho quando estou incluindo um registro é feito pela aplicação*/
    IF P_SEQUENCIA_ATUAL = :OLD.SEQUENCIA THEN
        UPDATE TRICAB
        SET EVTPENDENTE = CASE WHEN :OLD.STATUSREG = 'P' THEN NVL(EVTPENDENTE, 0) - 1
                               WHEN NVL(:NEW.STATUSREG, ' ') = 'P' THEN NVL(EVTPENDENTE, 0) + 1
                               ELSE EVTPENDENTE 
                          END,
            EVTENVIADO = CASE WHEN :OLD.STATUSREG = 'E' THEN NVL(EVTENVIADO, 0) - 1
                              WHEN :NEW.STATUSREG = 'E' THEN NVL(EVTENVIADO, 0) + 1
                              ELSE EVTENVIADO 
                         END,
            EVTAGUARCORRECAO = CASE WHEN :OLD.STATUSREG = 'A' THEN NVL(EVTAGUARCORRECAO, 0) - 1
                                    WHEN NVL(:NEW.STATUSREG, ' ') = 'A' THEN NVL(EVTAGUARCORRECAO, 0) + 1
                                    ELSE EVTAGUARCORRECAO 
                               END,
            EVTERROEVTPRIOR = CASE WHEN :OLD.STATUSREG = 'X' THEN NVL(EVTERROEVTPRIOR, 0) - 1
                                    WHEN NVL(:NEW.STATUSREG, ' ') = 'X' THEN NVL(EVTERROEVTPRIOR, 0) + 1
                                    ELSE EVTERROEVTPRIOR 
                               END,
            EVTFINALIZADO = CASE WHEN :OLD.STATUSREG = 'F' THEN NVL(EVTFINALIZADO, 0) - 1
                                 WHEN NVL(:NEW.STATUSREG, ' ') = 'F' THEN NVL(EVTFINALIZADO, 0) + 1
                                 ELSE EVTFINALIZADO 
                            END
        WHERE CODEMP = :OLD.CODEMP
            AND DTREF = :OLD.DTREF
            AND TPAMB = :OLD.TPAMB;
    END IF;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 48963-0-0
Nro. O.S. : 1090873
Nome      : Criar - TRG_UPD_DLT_TRICPPR
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TRG_UPD_DLT_TRICPPR
NomeObjeto: TRG_UPD_DLT_TRICPPR
TipoObjeto: TRIGGER
NomeTabela: TRICPPR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_UPD_DLT_TRICPPR
BEFORE UPDATE OR DELETE ON TRICPPR
FOR EACH ROW
WHEN(
    NEW.CODEMP IS NULL OR OLD.STATUSREG <> NVL(NEW.STATUSREG, ' ')
)
DECLARE
    P_SEQUENCIA_ATUAL    NUMBER(5);
BEGIN
    SELECT NVL(SEQUENCIAATUAL, 0) INTO P_SEQUENCIA_ATUAL
    FROM TRICAB
    WHERE CODEMP = :OLD.CODEMP
    AND DTREF = :OLD.DTREF
    AND TPAMB = :OLD.TPAMB;

    /*O UPDATE da quantidade de eventos no cabeçalho quando estou incluindo um registro é feito pela aplicação*/
    IF P_SEQUENCIA_ATUAL = :OLD.SEQUENCIA THEN
        UPDATE TRICAB
        SET EVTPENDENTE = CASE WHEN :OLD.STATUSREG = 'P' THEN NVL(EVTPENDENTE, 0) - 1
                               WHEN NVL(:NEW.STATUSREG, ' ') = 'P' THEN NVL(EVTPENDENTE, 0) + 1
                               ELSE EVTPENDENTE 
                          END,
            EVTENVIADO = CASE WHEN :OLD.STATUSREG = 'E' THEN NVL(EVTENVIADO, 0) - 1
                              WHEN :NEW.STATUSREG = 'E' THEN NVL(EVTENVIADO, 0) + 1
                              ELSE EVTENVIADO 
                         END,
            EVTAGUARCORRECAO = CASE WHEN :OLD.STATUSREG = 'A' THEN NVL(EVTAGUARCORRECAO, 0) - 1
                                    WHEN NVL(:NEW.STATUSREG, ' ') = 'A' THEN NVL(EVTAGUARCORRECAO, 0) + 1
                                    ELSE EVTAGUARCORRECAO 
                               END,
            EVTERROEVTPRIOR = CASE WHEN :OLD.STATUSREG = 'X' THEN NVL(EVTERROEVTPRIOR, 0) - 1
                                    WHEN NVL(:NEW.STATUSREG, ' ') = 'X' THEN NVL(EVTERROEVTPRIOR, 0) + 1
                                    ELSE EVTERROEVTPRIOR 
                               END,
            EVTFINALIZADO = CASE WHEN :OLD.STATUSREG = 'F' THEN NVL(EVTFINALIZADO, 0) - 1
                                 WHEN NVL(:NEW.STATUSREG, ' ') = 'F' THEN NVL(EVTFINALIZADO, 0) + 1
                                 ELSE EVTFINALIZADO 
                            END
        WHERE CODEMP = :OLD.CODEMP
            AND DTREF = :OLD.DTREF
            AND TPAMB = :OLD.TPAMB;
    END IF;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 48964-0-0
Nro. O.S. : 1090873
Nome      : Criar - TRG_UPD_DLT_TRICPRB
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TRG_UPD_DLT_TRICPRB
NomeObjeto: TRG_UPD_DLT_TRICPRB
TipoObjeto: TRIGGER
NomeTabela: TRICPRB
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_UPD_DLT_TRICPRB
BEFORE UPDATE OR DELETE ON TRICPRB
FOR EACH ROW
WHEN(
    NEW.CODEMP IS NULL OR OLD.STATUSREG <> NVL(NEW.STATUSREG, ' ')
)
DECLARE
    P_SEQUENCIA_ATUAL    NUMBER(5);
BEGIN
    SELECT NVL(SEQUENCIAATUAL, 0) INTO P_SEQUENCIA_ATUAL
    FROM TRICAB
    WHERE CODEMP = :OLD.CODEMP
    AND DTREF = :OLD.DTREF
    AND TPAMB = :OLD.TPAMB;

    /*O UPDATE da quantidade de eventos no cabeçalho quando estou incluindo um registro é feito pela aplicação*/
    IF P_SEQUENCIA_ATUAL = :OLD.SEQUENCIA THEN
        UPDATE TRICAB
        SET EVTPENDENTE = CASE WHEN :OLD.STATUSREG = 'P' THEN NVL(EVTPENDENTE, 0) - 1
                               WHEN NVL(:NEW.STATUSREG, ' ') = 'P' THEN NVL(EVTPENDENTE, 0) + 1
                               ELSE EVTPENDENTE 
                          END,
            EVTENVIADO = CASE WHEN :OLD.STATUSREG = 'E' THEN NVL(EVTENVIADO, 0) - 1
                              WHEN :NEW.STATUSREG = 'E' THEN NVL(EVTENVIADO, 0) + 1
                              ELSE EVTENVIADO 
                         END,
            EVTAGUARCORRECAO = CASE WHEN :OLD.STATUSREG = 'A' THEN NVL(EVTAGUARCORRECAO, 0) - 1
                                    WHEN NVL(:NEW.STATUSREG, ' ') = 'A' THEN NVL(EVTAGUARCORRECAO, 0) + 1
                                    ELSE EVTAGUARCORRECAO 
                               END,
            EVTERROEVTPRIOR = CASE WHEN :OLD.STATUSREG = 'X' THEN NVL(EVTERROEVTPRIOR, 0) - 1
                                    WHEN NVL(:NEW.STATUSREG, ' ') = 'X' THEN NVL(EVTERROEVTPRIOR, 0) + 1
                                    ELSE EVTERROEVTPRIOR 
                               END,
            EVTFINALIZADO = CASE WHEN :OLD.STATUSREG = 'F' THEN NVL(EVTFINALIZADO, 0) - 1
                                 WHEN NVL(:NEW.STATUSREG, ' ') = 'F' THEN NVL(EVTFINALIZADO, 0) + 1
                                 ELSE EVTFINALIZADO 
                            END
        WHERE CODEMP = :OLD.CODEMP
            AND DTREF = :OLD.DTREF
            AND TPAMB = :OLD.TPAMB;
    END IF;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 48965-0-0
Nro. O.S. : 1090873
Nome      : Criar - TRG_UPD_DLT_TRIREP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TRG_UPD_DLT_TRIREP
NomeObjeto: TRG_UPD_DLT_TRIREP
TipoObjeto: TRIGGER
NomeTabela: TRIREP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_UPD_DLT_TRIREP
BEFORE UPDATE OR DELETE ON TRIREP
FOR EACH ROW
WHEN(
    NEW.CODEMP IS NULL OR OLD.STATUSREG <> NVL(NEW.STATUSREG, ' ')
)
DECLARE
    P_SEQUENCIA_ATUAL    NUMBER(5);
BEGIN
    SELECT NVL(SEQUENCIAATUAL, 0) INTO P_SEQUENCIA_ATUAL
    FROM TRICAB
    WHERE CODEMP = :OLD.CODEMP
    AND DTREF = :OLD.DTREF
    AND TPAMB = :OLD.TPAMB;

    /*O UPDATE da quantidade de eventos no cabeçalho quando estou incluindo um registro é feito pela aplicação*/
    IF P_SEQUENCIA_ATUAL = :OLD.SEQUENCIA THEN
        UPDATE TRICAB
        SET EVTPENDENTE = CASE WHEN :OLD.STATUSREG = 'P' THEN NVL(EVTPENDENTE, 0) - 1
                               WHEN NVL(:NEW.STATUSREG, ' ') = 'P' THEN NVL(EVTPENDENTE, 0) + 1
                               ELSE EVTPENDENTE 
                          END,
            EVTENVIADO = CASE WHEN :OLD.STATUSREG = 'E' THEN NVL(EVTENVIADO, 0) - 1
                              WHEN :NEW.STATUSREG = 'E' THEN NVL(EVTENVIADO, 0) + 1
                              ELSE EVTENVIADO 
                         END,
            EVTAGUARCORRECAO = CASE WHEN :OLD.STATUSREG = 'A' THEN NVL(EVTAGUARCORRECAO, 0) - 1
                                    WHEN NVL(:NEW.STATUSREG, ' ') = 'A' THEN NVL(EVTAGUARCORRECAO, 0) + 1
                                    ELSE EVTAGUARCORRECAO 
                               END,
            EVTERROEVTPRIOR = CASE WHEN :OLD.STATUSREG = 'X' THEN NVL(EVTERROEVTPRIOR, 0) - 1
                                    WHEN NVL(:NEW.STATUSREG, ' ') = 'X' THEN NVL(EVTERROEVTPRIOR, 0) + 1
                                    ELSE EVTERROEVTPRIOR 
                               END,
            EVTFINALIZADO = CASE WHEN :OLD.STATUSREG = 'F' THEN NVL(EVTFINALIZADO, 0) - 1
                                 WHEN NVL(:NEW.STATUSREG, ' ') = 'F' THEN NVL(EVTFINALIZADO, 0) + 1
                                 ELSE EVTFINALIZADO 
                            END
        WHERE CODEMP = :OLD.CODEMP
            AND DTREF = :OLD.DTREF
            AND TPAMB = :OLD.TPAMB;
    END IF;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 48966-0-0
Nro. O.S. : 1090873
Nome      : Criar - TRG_UPD_DLT_TRIFEP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TRG_UPD_DLT_TRIFEP
NomeObjeto: TRG_UPD_DLT_TRIFEP
TipoObjeto: TRIGGER
NomeTabela: TRIFEP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_UPD_DLT_TRIFEP
BEFORE UPDATE OR DELETE ON TRIFEP
FOR EACH ROW
WHEN(
    NEW.CODEMP IS NULL OR OLD.STATUSREG <> NVL(NEW.STATUSREG, ' ')
)
DECLARE
    P_SEQUENCIA_ATUAL    NUMBER(5);
BEGIN
    SELECT NVL(SEQUENCIAATUAL, 0) INTO P_SEQUENCIA_ATUAL
    FROM TRICAB
    WHERE CODEMP = :OLD.CODEMP
    AND DTREF = :OLD.DTREF
    AND TPAMB = :OLD.TPAMB;

    /*O UPDATE da quantidade de eventos no cabeçalho quando estou incluindo um registro é feito pela aplicação*/
    IF P_SEQUENCIA_ATUAL = :OLD.SEQUENCIA THEN
        UPDATE TRICAB
        SET EVTPENDENTE = CASE WHEN :OLD.STATUSREG = 'P' THEN NVL(EVTPENDENTE, 0) - 1
                               WHEN NVL(:NEW.STATUSREG, ' ') = 'P' THEN NVL(EVTPENDENTE, 0) + 1
                               ELSE EVTPENDENTE 
                          END,
            EVTENVIADO = CASE WHEN :OLD.STATUSREG = 'E' THEN NVL(EVTENVIADO, 0) - 1
                              WHEN :NEW.STATUSREG = 'E' THEN NVL(EVTENVIADO, 0) + 1
                              ELSE EVTENVIADO 
                         END,
            EVTAGUARCORRECAO = CASE WHEN :OLD.STATUSREG = 'A' THEN NVL(EVTAGUARCORRECAO, 0) - 1
                                    WHEN NVL(:NEW.STATUSREG, ' ') = 'A' THEN NVL(EVTAGUARCORRECAO, 0) + 1
                                    ELSE EVTAGUARCORRECAO 
                               END,
            EVTERROEVTPRIOR = CASE WHEN :OLD.STATUSREG = 'X' THEN NVL(EVTERROEVTPRIOR, 0) - 1
                                    WHEN NVL(:NEW.STATUSREG, ' ') = 'X' THEN NVL(EVTERROEVTPRIOR, 0) + 1
                                    ELSE EVTERROEVTPRIOR 
                               END,
            EVTFINALIZADO = CASE WHEN :OLD.STATUSREG = 'F' THEN NVL(EVTFINALIZADO, 0) - 1
                                 WHEN NVL(:NEW.STATUSREG, ' ') = 'F' THEN NVL(EVTFINALIZADO, 0) + 1
                                 ELSE EVTFINALIZADO 
                            END
        WHERE CODEMP = :OLD.CODEMP
            AND DTREF = :OLD.DTREF
            AND TPAMB = :OLD.TPAMB;
    END IF;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 48973-0-0
Nro. O.S. : 1103051
Nome      : Dropar - TRG_TSIPAR_LOG
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar  - TRG_TSIPAR_LOG
NomeObjeto: TRG_TSIPAR_LOG
TipoObjeto: TRIGGER
NomeTabela: TSIPAR
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
DROP TRIGGER TRG_TSIPAR_LOG
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:16
Num.Script: 48974-0-1000
Nro. O.S. : 1103051
Nome      : INSERE - THOOBJ - 4897300
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_TSIPAR_LOG
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210000
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_TSIPAR_LOG' NOMEOBJ, 48973 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '5224b43782c4179ca451257b0aa26107' HASHCODE, 'Drop Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_TSIPAR_LOG' and THO.hashcode = '5224b43782c4179ca451257b0aa26107')
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 48980-0-0
Nro. O.S. : 1047227
Nome      : Altera - TRG_INC_UPD_TGFITE_PRODNFE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - TRG_INC_UPD_TGFITE_PRODNFE
NomeObjeto: TRG_INC_UPD_TGFITE_PRODNFE
TipoObjeto: TRIGGER
NomeTabela: TGFITE
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_INC_UPD_TGFITE_PRODNFE
   BEFORE INSERT OR UPDATE
   ON TGFITE
   REFERENCING NEW AS NEW OLD AS OLD
   FOR EACH ROW
DECLARE
   P_EMPNFE          TGFEMP.NFE%TYPE;
   P_TOPNFE          TGFTOP.NFE%TYPE;
   P_TOPCALCICMS     TGFTOP.CALCICMS%TYPE;
   P_PRODUTONFE      TGFPRO.PRODUTONFE%TYPE;
   P_REFERENCIA      TGFPRO.REFERENCIA%TYPE;
   P_TIPGTINNFE      TGFPRO.TIPGTINNFE%TYPE;
   P_TIPCONTEST      TGFPRO.TIPCONTEST%TYPE;
   P_INDESCALA       TGFPRO.INDESCALA%TYPE;
   P_CNPJFABRICANTE  TGFPRO.CNPJFABRICANTE%TYPE;
   P_CODBENEFNAUF    TGFPRO.CODBENEFNAUF%TYPE;
   P_CODAGREGACAO    TGFPRO.CODAGREGACAO%TYPE;
   P_CODBARRA        TGFEST.CODBARRA%TYPE;
   P_TIPGTINNFEVOA   TGFVOA.TIPGTINNFE%TYPE;
   P_CODBARRAVOA     TGFVOA.CODBARRA%TYPE;
   P_COUNT           NUMBER( 10 );
   ERRMSG            VARCHAR2( 255 );
   ERROR EXCEPTION;
   P_VALIDAR         BOOLEAN;
   P_ORIGPROD        TGFITE.ORIGPROD%TYPE;
   P_BASENUMERACAO   CHAR( 1 );
   P_USACODVOLPARC   CHAR( 1 );
   P_CODTIPOPER      NUMBER( 10 );
   P_SERIENOTA       VARCHAR2( 3 );
   P_CODVOLPARC      VARCHAR2( 6 );
   P_CODMODDOC       NUMBER( 10 );
   P_CONTAUNTRIB     NUMBER( 5 );
BEGIN
   IF STP_GET_ATUALIZANDO THEN
      RETURN;
   END IF;

   /*
   Sincronização de dados
   */
   P_VALIDAR := FPODEVALIDAR( 'TGFITE' );

   IF NOT ( P_VALIDAR ) THEN
      RETURN;
   END IF;

   SELECT TPO.NFE, TPO.CALCICMS
     INTO P_TOPNFE, P_TOPCALCICMS
   FROM TGFTOP TPO
   INNER JOIN TGFCAB CAB ON CAB.CODTIPOPER = TPO.CODTIPOPER AND CAB.DHTIPOPER = TPO.DHALTER
   WHERE CAB.NUNOTA = :NEW.NUNOTA;

   IF P_TOPNFE = 'E' AND P_TOPCALCICMS = 'B' THEN
      RETURN; --NFE de Emissão Própria importada deve possuir os mesmos valores do XML, portanto, não devemos calcular nenhum campo da TGFITE.
   END IF;

   IF UPDATING AND (:NEW.PENDENTE <> :OLD.PENDENTE OR :NEW.QTDENTREGUE <> :OLD.QTDENTREGUE OR :NEW.QTDCONFERIDA <> :OLD.QTDCONFERIDA) THEN 
     RETURN;
   END IF;

    IF UPDATING AND NVL(:OLD.STATUSNOTA, 'P') = 'L' THEN
        SELECT COUNT(1) INTO P_COUNT
        FROM TGFCAB
        WHERE NUNOTA = :OLD.NUNOTA
          AND (NVL(STATUSNFE, ' ') IN ('A','T') OR NVL(STATUSNFSE, ' ') = 'A');

        IF P_COUNT > 0 THEN
            RETURN;
        END IF;
    END IF;

   /*
   OS: 574625
   */

   -- OS 927107
   :NEW.ORIGPROD :=
      SNK_GET_ORIGEM_PRODUTO_ITE( :NEW.CODPROD
                                , :NEW.CODEMP
                                , :NEW.CODLOCALORIG
                                , :NEW.CONTROLE );

   /* QDO SUBSTITUINDO PRODUTO, NÃO VALIDAR ESTOQUE */
   SELECT COUNT( 1 )
   INTO   P_COUNT
   FROM   TSIPAR
   WHERE  CHAVE = 'SBPRODUTO';

   IF ( P_COUNT <> 0 ) THEN
      RETURN;
   END IF;

   SELECT PRODUTONFE, REFERENCIA, TIPGTINNFE, TIPCONTEST
   INTO   P_PRODUTONFE, P_REFERENCIA, P_TIPGTINNFE, P_TIPCONTEST
   FROM   TGFPRO
   WHERE  CODPROD = :NEW.CODPROD;

   IF ( P_PRODUTONFE = 1 ) AND TRIM( P_REFERENCIA ) IS NOT NULL THEN
      :NEW.PRODUTONFE := P_REFERENCIA;
   ELSE
      :NEW.PRODUTONFE := :NEW.CODPROD;
   END IF;


   -- ATUALIZA CAMPO CODVOLPARC, UTILIZANDO A TABELA TGFUNP
   IF VARIAVEIS_PKG.V_USACODVOLPARC = 'S' THEN
      BEGIN
         SELECT CODVOLPARC
         INTO   P_CODVOLPARC
         FROM   TGFUNP P INNER JOIN TGFCAB C
                   ON ( P.CODPARC = C.CODPARC
                   AND C.NUNOTA = :NEW.NUNOTA
                   AND :NEW.CODVOL = P.CODVOL );
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            P_CODVOLPARC := NULL;
      END;

      IF NVL( :NEW.CODVOLPARC, ' ' ) <> NVL( P_CODVOLPARC, ' ' ) THEN
         :NEW.CODVOLPARC := P_CODVOLPARC;
      END IF;
   END IF;

   IF ( P_TIPGTINNFE = 0 ) THEN
      :NEW.GTINNFE := NULL;
   ELSIF ( P_TIPGTINNFE = 1 ) THEN
      :NEW.GTINNFE := :NEW.CODPROD;
   ELSIF ( P_TIPGTINNFE = 3 ) THEN
      BEGIN
         SELECT CODBARRA
         INTO   P_CODBARRA
         FROM   TGFEST
         WHERE  CODEMP = :NEW.CODEMP
         AND    CODPROD = :NEW.CODPROD
         AND    CODLOCAL = :NEW.CODLOCALORIG
         AND    CONTROLE = :NEW.CONTROLE
         AND    CODPARC = 0;

         :NEW.GTINNFE := SUBSTR( P_CODBARRA, 1, 14 );
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            :NEW.GTINNFE := NULL;
      END;
   ELSIF ( P_TIPGTINNFE = 4 ) THEN
      BEGIN
         IF ( P_TIPCONTEST = 'I' OR P_TIPCONTEST = 'S') THEN --CONTROLE LIVRE OU POR LISTA
             SELECT CODBARRA
             INTO   P_CODBARRAVOA
             FROM   TGFVOA
             WHERE  CODPROD = :NEW.CODPROD
             AND    CODVOL = :NEW.CODVOL
             AND    CONTROLE = :NEW.CONTROLE;
         ELSE
             SELECT CODBARRA
             INTO   P_CODBARRAVOA
             FROM   TGFVOA
             WHERE  CODPROD = :NEW.CODPROD
             AND    CODVOL = :NEW.CODVOL;
         END IF;

         IF ( P_CODBARRAVOA IS NULL )
            OR( P_CODBARRAVOA = '' ) THEN
            :NEW.GTINNFE := SUBSTR( P_REFERENCIA, 1, 14 );
         ELSE
            :NEW.GTINNFE := SUBSTR( P_CODBARRAVOA, 1, 14 );
         END IF;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            :NEW.GTINNFE := SUBSTR( P_REFERENCIA, 1, 14 );
      END;
   ELSE
      :NEW.GTINNFE := SUBSTR( P_REFERENCIA, 1, 14 );
   END IF;

   BEGIN
      SELECT MIN(TIPGTINNFE), MIN(CODBARRA), COUNT(UNIDTRIB)
      INTO   P_TIPGTINNFEVOA, P_CODBARRAVOA, P_CONTAUNTRIB
      FROM   TGFVOA
      WHERE  CODPROD = :NEW.CODPROD
      AND    UNIDTRIB = 'S';

      IF P_CONTAUNTRIB > 1 THEN
        RAISE_APPLICATION_ERROR(-20101, 'Há mais que uma unidade alternativa marcada como unidade de tributação para o produto ' || TO_CHAR(:NEW.CODPROD));  
      END IF;

      IF (P_CONTAUNTRIB = 0) THEN
         :NEW.GTINTRIBNFE := :NEW.GTINNFE;
      ELSIF ( P_TIPGTINNFEVOA = 0 ) THEN
         :NEW.GTINTRIBNFE := NULL;
      ELSIF ( P_TIPGTINNFEVOA = 1 ) THEN
         :NEW.GTINTRIBNFE := :NEW.CODPROD;
      ELSIF ( P_TIPGTINNFEVOA = 2 ) THEN
         :NEW.GTINTRIBNFE := SUBSTR( P_REFERENCIA, 1, 14 );
      ELSE
         :NEW.GTINTRIBNFE := SUBSTR( P_CODBARRAVOA, 1, 14 );
      END IF;
   EXCEPTION
      WHEN NO_DATA_FOUND THEN
         :NEW.GTINTRIBNFE := :NEW.GTINNFE;
   END;
   
    
    IF( INSERTING AND 
        (:NEW.INDESCALA  IS NULL OR :NEW.CNPJFABRICANTE   IS NULL OR
         :NEW.CODBENEFNAUF     IS NULL OR :NEW.CODAGREGACAO     IS NULL)
       ) OR
       (:OLD.CODPROD <> :NEW.CODPROD AND 
         (NVL(:NEW.INDESCALA,' ')      = NVL(:OLD.INDESCALA, ' ') OR 
         NVL(:NEW.CNPJFABRICANTE, ' ') = NVL(:OLD.CNPJFABRICANTE, ' ') OR
          NVL(:NEW.CODBENEFNAUF, ' ')  = NVL(:OLD.CODBENEFNAUF, ' ')  OR 
          NVL(:NEW.CODAGREGACAO, ' ')  = NVL(:OLD.CODAGREGACAO, ' '))
       ) THEN
       SELECT INDESCALA, CNPJFABRICANTE, CODBENEFNAUF, CODAGREGACAO
       INTO   P_INDESCALA, P_CNPJFABRICANTE, P_CODBENEFNAUF, P_CODAGREGACAO
       FROM   TGFPRO
       WHERE  CODPROD = :NEW.CODPROD;
       
       IF (:NEW.INDESCALA  = :OLD.INDESCALA OR :NEW.INDESCALA IS NULL) THEN
           :NEW.INDESCALA := P_INDESCALA;
       END IF;
       
       IF (:NEW.CNPJFABRICANTE  = :OLD.CNPJFABRICANTE  OR :NEW.CNPJFABRICANTE IS NULL) THEN
           :NEW.CNPJFABRICANTE := P_CNPJFABRICANTE;
       END IF;   
         
       IF (:NEW.CODBENEFNAUF  = :OLD.CODBENEFNAUF  OR :NEW.CODBENEFNAUF IS NULL) THEN
           :NEW.CODBENEFNAUF := P_CODBENEFNAUF;
       END IF;   
       
       IF (:NEW.CODAGREGACAO  = :OLD.CODAGREGACAO OR :NEW.CODAGREGACAO IS NULL) THEN
           :NEW.CODAGREGACAO := P_CODAGREGACAO;
       END IF;

    END IF;
    
   RETURN;
EXCEPTION
   WHEN ERROR THEN
      /*
      Sincronização de dados não faz validações
      */
      IF ( P_VALIDAR ) THEN
         RAISE_APPLICATION_ERROR( -20101, ERRMSG );
      END IF;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 48981-0-1000
Nro. O.S. : 1047227
Nome      : INSERE - THOOBJ - 4898000
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_INC_UPD_TGFITE_PRODNFE
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210000
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_INC_UPD_TGFITE_PRODNFE' NOMEOBJ, 48980 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, 'b315be3a176d444b73de318dbde30253' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_INC_UPD_TGFITE_PRODNFE' and THO.hashcode = 'b315be3a176d444b73de318dbde30253')
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 48987-0-0
Nro. O.S. : 1134038
Nome      : Insere - FSEMAILNFCE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Inserir o parametro
NomeObjeto: FSEMAILNFCE
TipoObjeto: PARAMETRO
NomeTabela: TSIPAR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO TSIPAR ( CHAVE, DESCRICAO, CODUSU, MODULO, CLASSE, ABA, TIPO,  LOGICO)  VALUES ( 'FSEMAILNFCE', 'Envia email para consumidor em venda NFCe?', 0,'E', 'Saídas', 'Comercial',  'L', 'S') 
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 48992-0-0
Nro. O.S. : 1122479
Nome      : Criar - TSIGBI
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TSIGBI
NomeObjeto: TSIGBI
TipoObjeto: TABLE
NomeTabela: TSIGBI
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TSIGBI
(
   CODGBI       NUMBER (10) NOT NULL,
   NUGDG        NUMBER (10),
   IDLVL        VARCHAR2 (100),
   IDCMP        VARCHAR2 (100),
   DESCRGBI     VARCHAR2 (200),
   CAMPOVALOR   VARCHAR2 (100),
   CAMPOAGRUP   VARCHAR2 (100),
   IDINFOBIA    VARCHAR2(100),
   CONSTRAINT PK_TSIGBI PRIMARY KEY (CODGBI),
   CONSTRAINT FK_TSIGBI_TSIGDG FOREIGN KEY (NUGDG) REFERENCES TSIGDG (NUGDG) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 48994-0-0
Nro. O.S. : 1122479
Nome      : Criar - TSIGBP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TSIGBP
NomeObjeto: TSIGBP
TipoObjeto: TABLE
NomeTabela: TSIGBP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TSIGBP
(
   CODGBI   NUMBER (10) NOT NULL,
   CHAVE    VARCHAR2 (100 BYTE) NOT NULL,
   TIPO     VARCHAR2 (10 BYTE),
   VLRTXT   VARCHAR2 (100 BYTE),
   VLRDEC   FLOAT (126),
   VLRDAT   DATE,
   CONSTRAINT PK_TSIGBP PRIMARY KEY (CODGBI, CHAVE),
   CONSTRAINT FK_TSIGBP_TSIGBI FOREIGN KEY (CODGBI) REFERENCES TSIGBI (CODGBI) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 48996-0-0
Nro. O.S. : 1122479
Nome      : Criar - TSIGBC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TSIGBC
NomeObjeto: TSIGBC
TipoObjeto: TABLE
NomeTabela: TSIGBC
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TSIGBC
(
   CODGBC       NUMBER (10) NOT NULL,
   CODUSU       NUMBER (5),
   NUDSB        NUMBER (10),
   RESOURCEID   VARCHAR2 (100 BYTE),
   PERGUNTA     VARCHAR2 (200 BYTE),
   CONSTRAINT PK_TSIGBC PRIMARY KEY (CODGBC),
   CONSTRAINT FK_TSIGBC_TSIDSB FOREIGN KEY (NUDSB) REFERENCES TSIDSB (NUDSB) ON DELETE CASCADE,
   CONSTRAINT FK_TSIGBC_TSIUSU FOREIGN KEY (CODUSU) REFERENCES TSIUSU (CODUSU) ON DELETE CASCADE)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 48997-0-0
Nro. O.S. : 1122479
Nome      : Criar - TSIGBV
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TSIGBV
NomeObjeto: TSIGBV
TipoObjeto: TABLE
NomeTabela: TSIGBV
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TSIGBV
(
   CODGBC   NUMBER (10) NOT NULL,
   CODGBI   NUMBER (10) NOT NULL,
   CONSTRAINT PK_TSIGBV PRIMARY KEY (CODGBC, CODGBI),
   CONSTRAINT FK_TSIGBV_TSIGBC FOREIGN KEY (CODGBC) REFERENCES TSIGBC (CODGBC) ON DELETE CASCADE,
   CONSTRAINT FK_TSIGBV_TSIGBI FOREIGN KEY (CODGBI) REFERENCES TSIGBI (CODGBI) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 48998-0-0
Nro. O.S. : 1090873
Nome      : Cria - TRG_UPD_TRICAB
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TRG_UPD_TRICAB
NomeObjeto: TRG_UPD_TRICAB
TipoObjeto: TRIGGER
NomeTabela: TRICAB
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_UPD_TRICAB
BEFORE UPDATE ON TRICAB
FOR EACH ROW
BEGIN
    IF NVL(:OLD.EVTPENDENTE, 0) <> NVL(:NEW.EVTPENDENTE, 0) OR
       NVL(:OLD.EVTENVIADO, 0) <> NVL(:NEW.EVTENVIADO, 0) OR
       NVL(:OLD.EVTAGUARCORRECAO, 0) <> NVL(:NEW.EVTAGUARCORRECAO, 0) OR
       NVL(:OLD.EVTERROEVTPRIOR, 0) <> NVL(:NEW.EVTERROEVTPRIOR, 0) OR
       NVL(:OLD.EVTFINALIZADO, 0) <> NVL(:NEW.EVTFINALIZADO, 0) THEN
        :NEW.EVTTOTAIS := NVL(:NEW.EVTPENDENTE, 0) + NVL(:NEW.EVTENVIADO, 0) + NVL(:NEW.EVTAGUARCORRECAO, 0) + NVL(:NEW.EVTERROEVTPRIOR, 0) + NVL(:NEW.EVTFINALIZADO, 0);
    END IF;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 49068-0-0
Nro. O.S. : 1116420
Nome      : Dropa - CKC_CTE_TGFTOP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropa - CKC_CTE_TGFTOP
NomeObjeto: CKC_CTE_TGFTOP
TipoObjeto: CONSTRAINT
NomeTabela: TGFTOP
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFTOP DROP CONSTRAINT CKC_CTE_TGFTOP
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 49069-0-0
Nro. O.S. : 1116420
Nome      : Cria - CKC_CTE_TGFTOP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - CKC_CTE_TGFTOP
NomeObjeto: CKC_CTE_TGFTOP
TipoObjeto: CONSTRAINT
NomeTabela: TGFTOP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFTOP ADD CONSTRAINT CKC_CTE_TGFTOP CHECK (CTE IN ('M','N','E','T') OR CTE IS NULL)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 49077-0-0
Nro. O.S. : 1131682
Nome      : Alterar - TFPTLT 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - TFPTLT 
NomeObjeto: TFPTLT 
TipoObjeto: TABLE
NomeTabela: TFPTLT 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
UPDATE TFPTLT SET USADO = 'E' WHERE CODLOTACAO IN (21,24)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 49093-0-1000
Nro. O.S. : 1118793
Nome      : INSERE - THOOBJ - 4909401
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_INC_UPD_DLT_TGFFNF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210000
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_INC_UPD_DLT_TGFFNF' NOMEOBJ, 49094 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, 'c1922c0c3019861f55fb10f7f1456956' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_INC_UPD_DLT_TGFFNF' and THO.hashcode = 'c1922c0c3019861f55fb10f7f1456956')
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 49094-0-0
Nro. O.S. : 1118793
Nome      : Cria - GET_VLRFRETE_TGFFNF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - GET_VLRFRETE_TGFFNF
NomeObjeto: GET_VLRFRETE_TGFFNF
TipoObjeto: FUNCTION
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE FUNCTION GET_VLRFRETE_TGFFNF(P_NUFIN NUMBER, P_NUNOTA NUMBER)
RETURN FLOAT
IS
  PRAGMA AUTONOMOUS_TRANSACTION;
  P_VLRFRETE       FLOAT;
BEGIN

  SELECT NVL(SUM(VLRFRETE), 0) INTO P_VLRFRETE
  FROM TGFFNF FNF 
  WHERE FNF.NUNOTA = P_NUNOTA
    AND FNF.NUFIN <> P_NUFIN;
  COMMIT;
  RETURN P_VLRFRETE;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 49094-0-1
Nro. O.S. : 1118793
Nome      : Altera - TRG_INC_UPD_DLT_TGFFNF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - TRG_INC_UPD_DLT_TGFFNF
NomeObjeto: TRG_INC_UPD_DLT_TGFFNF
TipoObjeto: TRIGGER
NomeTabela: TGFFNF
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_INC_UPD_DLT_TGFFNF
BEFORE INSERT OR UPDATE OR DELETE 
ON TGFFNF FOR EACH ROW

DECLARE
    P_COUNT              NUMBER(05);
    P_VALOR              FLOAT := 0;
BEGIN

    IF GET_TSIPAR_LOGICO('RATEXTNOTAFRINC') = 'S' THEN
        IF(INSERTING OR UPDATING) THEN
            P_VALOR := NVL(:NEW.VLRFRETE, 0) + GET_VLRFRETE_TGFFNF(NVL(:OLD.NUFIN, :NEW.NUFIN), NVL(:OLD.NUNOTA, :NEW.NUNOTA));
        ELSE --DELETING
            P_VALOR := GET_VLRFRETE_TGFFNF(NVL(:OLD.NUFIN, :NEW.NUFIN), NVL(:OLD.NUNOTA, :NEW.NUNOTA));
        END IF;

        SELECT COUNT(*)
        INTO P_COUNT
        FROM TGFCAB CAB
           WHERE CAB.NUNOTA = NVL(:OLD.NUNOTA, :NEW.NUNOTA)
             AND CASE WHEN CAB.TIPFRETE = 'N' THEN 0 ELSE NVL(VLRFRETE, 0) END + P_VALOR <> NVL(CAB.VLRFRETETOTAL, 0);      
         IF P_COUNT > 0 THEN
            UPDATE TGFCAB CAB
            SET VLRFRETETOTAL = CASE WHEN CAB.TIPFRETE = 'N' THEN 0 ELSE NVL(VLRFRETE, 0) END + P_VALOR
           WHERE CAB.NUNOTA = NVL(:OLD.NUNOTA, :NEW.NUNOTA);
         END IF;
    END IF;

END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 49095-0-1000
Nro. O.S. : 1118793
Nome      : INSERE - THOOBJ - 4909400
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE GET_VLRFRETE_TGFFNF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210000
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'GET_VLRFRETE_TGFFNF' NOMEOBJ, 49094 NUMSCRIPT, SYSDATE DTALTER, 'FUNCTION' TIPO, 'e8387507ca3cb5ab8af1f2474277dbc6' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'GET_VLRFRETE_TGFFNF' and THO.hashcode = 'e8387507ca3cb5ab8af1f2474277dbc6')
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 49096-0-0
Nro. O.S. : 1118793
Nome      : Altera - TRG_INC_UPD_TGFCAB_ORD
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - TRG_INC_UPD_TGFCAB_ORD
NomeObjeto: TRG_INC_UPD_TGFCAB_ORD
TipoObjeto: TRIGGER
NomeTabela: TGFCAB
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_INC_UPD_TGFCAB_ORD
BEFORE INSERT OR UPDATE 
ON TGFCAB 
FOR EACH ROW
DECLARE
  P_COUNT           INT;
  P_COUNTVAL     INT;
  ERRMSG            VARCHAR2(255);
  ERROR             EXCEPTION;
  P_VALIDAR BOOLEAN;
  P_VLRDESDOBFRETE FLOAT;
  
BEGIN

  IF STP_GET_ATUALIZANDO THEN
    RETURN;
  END IF;

  /* 
  Sincronizac?o de dados
  */
  P_VALIDAR := Fpodevalidar('TGFCAB');
  
  IF (NVL(:NEW.ORDEMCARGA,0) <> 0) THEN          
    SELECT COUNT(1) INTO P_COUNT
    FROM TGFORD ORD
    WHERE ORD.ORDEMCARGA = :NEW.ORDEMCARGA
      AND ORD.CODEMP = (SELECT CASE WHEN EMP.CODEMPOC IS NULL THEN EMP.CODEMP ELSE CODEMPOC END 
                        FROM TGFEMP EMP 
                        WHERE EMP.CODEMP = :NEW.CODEMP);
        
    IF (P_COUNT=0) THEN
        RAISE_APPLICATION_ERROR(-20101, 'Não existe referencia para ordem de Carga: '||TO_CHAR(:NEW.ORDEMCARGA)||' informada na nota de Nro Unico: '||TO_CHAR(:NEW.NUNOTA));
    END IF;  
  END IF;
  
  IF UPDATING THEN  
    IF (NVL(:OLD.ORDEMCARGA,0) <> NVL(:NEW.ORDEMCARGA,0)) THEN
      IF (NVL(:NEW.ORDEMCARGA,0) <> 0) THEN           
        SELECT COUNT(1) INTO P_COUNT
        FROM TGFORD ORD
        WHERE ORD.ORDEMCARGA = :NEW.ORDEMCARGA
          AND ORD.CODEMP = (SELECT CASE WHEN EMP.CODEMPOC IS NULL THEN EMP.CODEMP ELSE CODEMPOC END 
                            FROM TGFEMP EMP 
                            WHERE EMP.CODEMP = :NEW.CODEMP)
          AND SITUACAO = 'A';
              
        IF (P_COUNT = 0) AND (P_VALIDAR) THEN
          
          SELECT COUNT(1) INTO P_COUNT
          FROM TGFORD ORD
          WHERE ORD.ORDEMCARGA = :NEW.ORDEMCARGA
            AND ORD.CODEMP = (SELECT CASE WHEN EMP.CODEMPOC IS NULL THEN EMP.CODEMP ELSE CODEMPOC END 
                            FROM TGFEMP EMP 
                            WHERE EMP.CODEMP = :NEW.CODEMP)
            AND SITUACAO = 'F' 
            AND SNK_getTSIPARLogico('ALTOCFECFORMOC') = 'S';
        
          IF (P_COUNT = 0) THEN
            ERRMSG := 'Ordem de carga '||:NEW.ORDEMCARGA||' usada na nota de Nro Unico: '||:NEW.NUNOTA||' não esta aberta ou não existe.';
            RAISE ERROR;
          END IF;
        END IF;
            
        SELECT COUNT(1) INTO P_COUNT
        FROM TGFORD ORD
        WHERE ORD.ORDEMCARGA = :NEW.ORDEMCARGA
          AND ORD.CODEMP = (SELECT CASE WHEN EMP.CODEMPOC IS NULL THEN EMP.CODEMP ELSE CODEMPOC END 
                            FROM TGFEMP EMP 
                            WHERE EMP.CODEMP = :NEW.CODEMP)
          AND :NEW.DTNEG < NVL(DTINIC,'01-JAN-1998');
               
        IF (P_COUNT > 0) AND (P_VALIDAR) THEN
          SELECT COUNT(1) INTO P_COUNT
          FROM TSIPAR 
          WHERE CHAVE = 'DTNEGDTINICOC' 
            AND LOGICO = 'S';
          --E O PARAMETRO 'DTNEGDTINICOC' ESTA IGUAL A 'N' OU N?O EXISTE
          IF  (P_COUNT = 0) AND (P_VALIDAR) THEN
            ERRMSG := 'A data de negociação da nota de Nro Unico '||:NEW.NUNOTA||' e anterior a data inicio da Ordem de Carga '||:NEW.ORDEMCARGA||'.';
            RAISE ERROR;
          END IF;
        END IF;                  
      END IF;
      
      P_COUNTVAL := 0;
      SELECT COUNT(1) INTO P_COUNTVAL
      FROM TGFFIN
      WHERE NUNOTA = :NEW.NUNOTA
        AND ORDEMCARGA <> :NEW.ORDEMCARGA 
        AND (NURENEG IS NULL OR NURENEG = 0);
      IF P_COUNTVAL > 0 THEN             
        UPDATE TGFFIN SET ORDEMCARGA = :NEW.ORDEMCARGA
        WHERE NUNOTA = :NEW.NUNOTA  
          AND ORDEMCARGA <> :NEW.ORDEMCARGA 
          AND (NURENEG IS NULL OR NURENEG = 0);   /* alterac?o feita pelo Manoel  acrescentando a validac?o da ORDEM CARGA */ 
      END IF;  
    END IF;
          
    IF :OLD.NUMCONTRATO <> :NEW.NUMCONTRATO THEN
      P_COUNTVAL := 0;
      SELECT  COUNT(1) INTO P_COUNTVAL
      FROM TGFFIN
      WHERE NUNOTA = :NEW.NUNOTA
      AND NUMCONTRATO <> :NEW.NUMCONTRATO;
      IF P_COUNTVAL > 0 THEN            
        UPDATE TGFFIN SET NUMCONTRATO = :NEW.NUMCONTRATO
        WHERE NUNOTA = :NEW.NUNOTA
        AND NUMCONTRATO <> :NEW.NUMCONTRATO;
      END IF;  
    END IF;
      
    IF GET_TSIPAR_LOGICO('RATEXTNOTAFRINC') = 'N' AND ((:NEW.CODPARCTRANSP = 0) OR (:NEW.VLRFRETE = 0) OR (:NEW.TIPFRETE <> 'N')) THEN
      P_COUNTVAL := 0;
      
      SELECT COUNT(1) INTO P_COUNTVAL
      FROM TGFFIN
      WHERE NUNOTA = :NEW.NUNOTA AND DESDOBDUPL = 'F';
      
      IF P_COUNTVAL > 0 THEN 
        DELETE FROM TGFFIN WHERE NUNOTA = :NEW.NUNOTA AND DESDOBDUPL = 'F';
      END IF;  
    END IF;
      
    IF (:NEW.CODPARCTRANSP <> 0) AND (:NEW.VLRFRETE <> :OLD.VLRFRETE) AND (:NEW.TIPFRETE = 'N') THEN
      P_COUNTVAL := 0;
      
      SELECT SUM(VLRDESDOB) INTO P_VLRDESDOBFRETE
      FROM TGFFIN 
      WHERE NUNOTA = :NEW.NUNOTA
        AND DESDOBDUPL = 'F';
        
      P_VLRDESDOBFRETE := :NEW.VLRFRETE - P_VLRDESDOBFRETE;
          
      UPDATE TGFFIN SET VLRDESDOB = VLRDESDOB + (P_VLRDESDOBFRETE)
      WHERE NUNOTA = :NEW.NUNOTA
        AND DESDOBDUPL = 'F'
        AND DHBAIXA IS NULL;
    END IF;
    
  END IF;
  RETURN;  
EXCEPTION
  WHEN ERROR THEN
  /* 
  Sincronizac?o de dados n?o faz validac?es
  */
  IF (P_VALIDAR) THEN 
    RAISE_APPLICATION_ERROR(-20101, ERRMSG);
  END IF; 
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 49097-0-1000
Nro. O.S. : 1118793
Nome      : INSERE - THOOBJ - 4909600
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_INC_UPD_TGFCAB_ORD
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210000
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_INC_UPD_TGFCAB_ORD' NOMEOBJ, 49096 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, 'b150b2cd00ee70d73e0eb7d4652d07db' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_INC_UPD_TGFCAB_ORD' and THO.hashcode = 'b150b2cd00ee70d73e0eb7d4652d07db')
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 49098-0-0
Nro. O.S. : 1114872
Nome      : Cria - TGFNST CODDA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: CODDA
TipoObjeto: COLUMN
NomeTabela: TGFNST
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TGFNST ADD CODDA CHAR(1)';
   EXECUTE IMMEDIATE 'ALTER TABLE TGFNST ADD  CONSTRAINT CKC_CODDA_TGFNST CHECK (CODDA IN (''0'',''1'') OR CODDA IS NULL )';
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 49099-0-0
Nro. O.S. : 1114872
Nome      : Cria - TGFNST NUMDA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: NUMDA
TipoObjeto: COLUMN
NomeTabela: TGFNST
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFNST ADD NUMDA VARCHAR2(255)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 49124-0-0
Nro. O.S. : 1117898
Nome      : Insere - INIBECXDUPNFCE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Inserir o parametro
NomeObjeto: INIBECXDUPNFCE
TipoObjeto: PARAMETRO
NomeTabela: TSIPAR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO TSIPAR ( CHAVE, DESCRICAO, CODUSU, MODULO, CLASSE, ABA, TIPO,  LOGICO)  VALUES ( 'INIBECXDUPNFCE', 'Inibe abertura de caixa em máquinas distintas?', 0,'E', 'Saídas', 'Comercial',  'L', 'N') 
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 49129-0-0
Nro. O.S. : 1136509
Nome      : Insere - FSTLEITRANSITEM
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Inserir o parametro
NomeObjeto: FSTLEITRANSITEM
TipoObjeto: PARAMETRO
NomeTabela: TSIPAR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO TSIPAR ( CHAVE, DESCRICAO, CODUSU, MODULO, CLASSE, ABA, TIPO,  LOGICO)  VALUES ( 'FSTLEITRANSITEM', 'Lei da transparência no item?', 0,'E', 'Diversas', 'ECF',  'L', 'N') 
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 49370-0-0
Nro. O.S. : 1105331
Nome      : Criar - TGFCRA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TGFCRA
NomeObjeto: TGFCRA
TipoObjeto: TABLE
NomeTabela: TGFCRA
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TGFCRA(
  CODEMP           NUMBER(5)                    NOT NULL,
  REDE             VARCHAR2(50),
  CHAVEREQUISICAO  VARCHAR2(36),
  CNPJ             VARCHAR2(14),
  CONSTRAINT PK_TGFCRA PRIMARY KEY(CODEMP, REDE),
  CONSTRAINT FK_TGFCRA_CODEMP FOREIGN KEY (CODEMP) REFERENCES TGFEMP (CODEMP))
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 49371-0-0
Nro. O.S. : 1105331
Nome      : Insere - CAMINHOENVMFE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Inserir o parametro
NomeObjeto: CAMINHOENVMFE
TipoObjeto: PARAMETRO
NomeTabela: TSIPAR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO TSIPAR ( CHAVE, DESCRICAO, CODUSU, MODULO, CLASSE, ABA, TIPO,  TEXTO)  VALUES ( 'CAMINHOENVMFE', 'Caminho de envio do XML MFE', 0,'E', 'Diversas', 'ECF', 'T', 'C:\Integrador\Input') 
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 49372-0-0
Nro. O.S. : 1105331
Nome      : Insere - CAMINHORETMFE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Inserir o parametro
NomeObjeto: CAMINHORETMFE
TipoObjeto: PARAMETRO
NomeTabela: TSIPAR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO TSIPAR ( CHAVE, DESCRICAO, CODUSU, MODULO, CLASSE, ABA, TIPO,  TEXTO)  VALUES ( 'CAMINHORETMFE', 'Caminho de retorno do XML MFE', 0,'E', 'Diversas', 'ECF', 'T', 'C:\Integrador\Output') 
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 49373-0-0
Nro. O.S. : 1105331
Nome      : Cria - TGFEMP CHAVEACESSVALIDADOR
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: CHAVEACESSVALIDADOR
TipoObjeto: COLUMN
NomeTabela: TGFEMP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFEMP ADD CHAVEACESSVALIDADOR VARCHAR2(36)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 49374-0-0
Nro. O.S. : 1105331
Nome      : Cria - TGFMAQ POS
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: POS
TipoObjeto: COLUMN
NomeTabela: TGFMAQ
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFMAQ ADD POS CHAR(1)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 49375-0-0
Nro. O.S. : 1105331
Nome      : Cria - TGFPAR MERCHANTID
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: MERCHANTID
TipoObjeto: COLUMN
NomeTabela: TGFPAR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFPAR ADD MERCHANTID FLOAT
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 49376-0-0
Nro. O.S. : 1105331
Nome      : Cria - TGFTEF NOMEREDE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: NOMEREDE
TipoObjeto: COLUMN
NomeTabela: TGFTEF
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFTEF ADD NOMEREDE VARCHAR2(50)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 49377-0-0
Nro. O.S. : 1105331
Nome      : Cria - TGFTEF NSUSEFAZ
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: NSUSEFAZ
TipoObjeto: COLUMN
NomeTabela: TGFTEF
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFTEF ADD NSUSEFAZ VARCHAR2(20)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 49378-0-0
Nro. O.S. : 1105331
Nome      : Cria - TGFTEF CODRESPOSTA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: CODRESPOSTA
TipoObjeto: COLUMN
NomeTabela: TGFTEF
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFTEF ADD CODRESPOSTA DECIMAL(10, 0)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 49379-0-0
Nro. O.S. : 1105331
Nome      : Cria - TGFTEF BIN
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: BIN
TipoObjeto: COLUMN
NomeTabela: TGFTEF
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFTEF ADD BIN VARCHAR2(10)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 49380-0-0
Nro. O.S. : 1105331
Nome      : Cria - TGFTEF DTEXPIRACAO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: DTEXPIRACAO
TipoObjeto: COLUMN
NomeTabela: TGFTEF
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFTEF ADD DTEXPIRACAO VARCHAR2(10)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 49381-0-0
Nro. O.S. : 1105331
Nome      : Cria - TGFTEF DONOCARTAO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: DONOCARTAO
TipoObjeto: COLUMN
NomeTabela: TGFTEF
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFTEF ADD DONOCARTAO VARCHAR2(100)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 49382-0-0
Nro. O.S. : 1105331
Nome      : Cria - TGFTEF ULTIMOSDIGITOS
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: ULTIMOSDIGITOS
TipoObjeto: COLUMN
NomeTabela: TGFTEF
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFTEF ADD ULTIMOSDIGITOS VARCHAR2(10)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 49389-0-0
Nro. O.S. : 1106872
Nome      : Trunca - SWTMP_C100
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Trunca - SWTMP_C100
NomeObjeto: SWTMP_C100
TipoObjeto: TABLE
NomeTabela: SWTMP_C100
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
TRUNCATE TABLE SWTMP_C100
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 49390-0-0
Nro. O.S. : 1106872
Nome      : Drop - SWTMP_C100
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - SWTMP_C100
NomeObjeto: SWTMP_C100
TipoObjeto: TABLE
NomeTabela: SWTMP_C100
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
DROP TABLE SWTMP_C100
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 49395-0-0
Nro. O.S. : 1136736
Nome      : Alterar - TRG_UPD_TGFCAB 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - TRG_UPD_TGFCAB 
NomeObjeto: TRG_UPD_TGFCAB 
TipoObjeto: TRIGGER
NomeTabela: TGFCAB
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_UPD_TGFCAB
BEFORE UPDATE ON TGFCAB
FOR EACH ROW
DECLARE
    P_TIPRES                    CHAR(1);
    P_UPDSTATUS                 CHAR(1);
    P_ATUALV                    CHAR(1);
    P_UTILIZALOCAL              CHAR(1);
    P_PROVISAO                  CHAR(1);
    P_ATUALEST                  VARCHAR2(1);
    P_ATUALEST_D                VARCHAR2(1);
    P_ATUALFIN                  NUMBER(5);
    P_ATUALFIN_D                NUMBER(5);
    P_TIPATUALFIN               CHAR(1);
    P_TIPATUALFIN_D             CHAR(1);
    P_RESERVADO                 CHAR(1);
    P_GNREST                    NUMBER(10);
    P_TIPTITGNRESTRB            NUMBER(10);
    ERRMSG                      VARCHAR2(255);
    P_SOLICITANTE               CHAR(30);
    P_COUNT                     NUMBER(10) := 0;
    P_COUNT1                    NUMBER(10) := 0;
    P_ATIVO                     CHAR(1);
    P_TOTDESDOB                 FLOAT;
    P_MOTORISTA                 CHAR(1);
    P_ATUALFINTERC              CHAR(1); 
    P_ATUALESTTERC              CHAR(1);
    P_TIPTIT_COMPENSACAO        NUMBER(10) := 0;
    ERROR                       EXCEPTION;
    P_VALIDAR                   BOOLEAN;
    P_CHAVE                     VARCHAR2(15);
    P_SINAL                     NUMBER(5);
    P_VLRTROCA                  FLOAT;
    P_ULTCOD                    NUMBER(10);
    P_ALTITEMPARCFAT            CHAR(1);
    P_INDPRESNFCE               CHAR(1);
    P_EMPNFE                    TGFEMP.NFE%TYPE;
    P_TOPNFE                    TGFTOP.NFE%TYPE;
    P_TOPNFE_OLD                TGFTOP.NFE%TYPE;
    P_BASENUMERACAO             CHAR(1);
    P_CODTOPPREVENDA            NUMBER(10);
    P_CODVOLPARC                VARCHAR2(6);
    P_USACODVOLPARC             VARCHAR2(1);
    P_PERMFINMENORVLRNOTA       VARCHAR2(1);
    P_CODPARC_CLASSIFICMS       TGFPAR.CODPARC%TYPE;
BEGIN

  IF STP_GET_ATUALIZANDO THEN
    RETURN;
  END IF;
  /* 
   Sincronização de dados
  */
  P_VALIDAR := Fpodevalidar('TGFCAB');
  IF UPDATING('NUNOTA') THEN
     ERRMSG := 'A coluna NUNOTA não pode ser alterada.';
     RAISE ERROR;
  END IF;
  
  IF :NEW.TIPMOV = 'V' AND :NEW.SERIENOTA = 'CF' AND NVL(:OLD.CODMAQ,0) <> :NEW.CODMAQ AND NVL(:OLD.CODMAQ,0) <> 0 THEN
    ERRMSG := 'Código da máquina (ECF) já está preenchido, não pode ser alterado devido ao SPED.';
    RAISE ERROR;
  END IF;

  IF :NEW.TIPMOV = 'V' AND :NEW.SERIENOTA = 'CF' AND NVL(:OLD.NROREDZ,0) <> :NEW.NROREDZ AND NVL(:OLD.NROREDZ,0) <> 0 THEN
    ERRMSG := 'Nro da redução Z (ECF) já está preenchido, não pode ser alterado devido ao SPED.';
    RAISE ERROR;
  END IF;  

  IF :NEW.TIPMOV = 'V' AND :NEW.SERIENOTA = 'CF' AND NVL(:OLD.NUMNOTA,0) <> :NEW.NUMNOTA AND NVL(:OLD.NUMNOTA,0) <> 0 THEN
    ERRMSG := 'Cupom já foi numerado, não pode ser alterado devido ao SPED.';
    RAISE ERROR;
  END IF;
 
  P_GNREST := Get_Tsipar_Inteiro('TIPTITGNREST');
       
  P_TIPTITGNRESTRB := Get_Tsipar_Inteiro('TIPTITGNRESTRB');   
  
  --VALIDA SE O TIPO DE CONTROLE DE PRODUTO E O MESMO PARA AS EMPRESAS QUE ESTÃO SENDO ALTERADAS OS 770482
  IF UPDATING('CODEMP') THEN
     SELECT COUNT(1) INTO P_COUNT
     FROM TGFITE ITE
     WHERE (SELECT NVL(PEM.TIPCONTEST, PRO.TIPCONTEST) AS TIPCONTEST
            FROM TGFPRO PRO
            LEFT JOIN TGFPEM PEM ON (PEM.CODPROD = PRO.CODPROD AND PEM.CODEMP = :NEW.CODEMP)    
            WHERE PRO.CODPROD = ITE.CODPROD) <> (SELECT NVL(PEM.TIPCONTEST, PRO.TIPCONTEST) AS TIPCONTEST
                                                 FROM TGFPRO PRO
                                                 LEFT JOIN TGFPEM PEM ON (PEM.CODPROD = PRO.CODPROD AND PEM.CODEMP = :OLD.CODEMP)    
                                                 WHERE PRO.CODPROD = ITE.CODPROD)
     AND ITE.NUNOTA = :OLD.NUNOTA;
        
     IF(P_COUNT > 0) THEN
       ERRMSG := 'Não é possível alterar a empresa '||:OLD.CODEMP||' para '||:NEW.CODEMP||' pois elas possuem diferenças no controle adicional de estoque. Remova os itens da nota.';
       RAISE ERROR;
     END IF;
    END IF;    
  
  -- ATUALIZA CAMPO CODVOLPARC NA TGFITE, UTILIZANDO A TABELA TGFUNP, SOMENTE QUANDO É ALTERADO O CODIGO DO PARCEIRO 
   IF UPDATING('CODPARC') THEN
      SELECT LOGICO
      INTO P_USACODVOLPARC
      FROM TSIPAR 
      WHERE CHAVE = 'USACODVOLPARC';
      
      IF P_USACODVOLPARC = 'S' THEN
      
          INSERT INTO TSIPAR (CHAVE, DESCRICAO, CODUSU, TIPO, MODULO )
          VALUES             ('SBPRODUTO','p/Nao criticar na Ite ', 0, 'T', 'E');

          FOR I IN (SELECT SEQUENCIA, CODVOL FROM TGFITE WHERE NUNOTA = :NEW.NUNOTA)
          LOOP
            BEGIN
              SELECT P.CODVOLPARC INTO P_CODVOLPARC
              FROM TGFUNP P
              WHERE P.CODPARC = :NEW.CODPARC
                AND P.CODVOL = I.CODVOL;
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
                P_CODVOLPARC := NULL;
            END;
            
            UPDATE TGFITE SET CODVOLPARC = P_CODVOLPARC
            WHERE NUNOTA = :NEW.NUNOTA
              AND SEQUENCIA = I.SEQUENCIA
              AND NVL(CODVOLPARC, ' ') <> NVL(P_CODVOLPARC, ' ');
          END LOOP;

          DELETE FROM TSIPAR WHERE CHAVE= 'SBPRODUTO';

      END IF; 
   END IF;

  IF (UPDATING('STATUSNOTA') AND (:NEW.STATUSNOTA <> 'L')) AND
     (NOT ((:OLD.CHAVENFE IS NOT NULL) AND (:NEW.CHAVENFE IS NULL) AND (:OLD.NULOTENFE IS NOT NULL) AND (:NEW.NULOTENFE IS NULL))) THEN
     ERRMSG := 'A única atualização permitida para o Status da Nota é a passagem deste para L.';
     RAISE ERROR;
  END IF;

  IF :OLD.STATUSNOTA = 'L' AND ((:OLD.NUNOTA <> :NEW.NUNOTA) OR (:OLD.CODEMP <> :NEW.CODEMP) OR (:OLD.CODEMPNEGOC <> :NEW.CODEMPNEGOC)
      OR (:OLD.NUMNOTA <> :NEW.NUMNOTA) OR (:OLD.SERIENOTA <> :NEW.SERIENOTA) OR (:OLD.DTNEG <> :NEW.DTNEG) OR (:OLD.DTFATUR <> :NEW.DTFATUR)
       OR (:OLD.DTVAL <> :NEW.DTVAL) OR (:OLD.DTENTSAI <> :NEW.DTENTSAI) OR (:OLD.DTMOV <> :NEW.DTMOV) OR (:OLD.CODPARC <> :NEW.CODPARC) 
       OR (:OLD.BASEICMS <> :NEW.BASEICMS) OR (:OLD.VLRICMS <> :NEW.VLRICMS) OR (:OLD.BASEIPI <> :NEW.BASEIPI) OR (:OLD.VLRIPI <> :NEW.VLRIPI) 
       OR (:OLD.VLRNOTA <> :NEW.VLRNOTA) OR (:OLD.TIPMOV <> :NEW.TIPMOV) OR (:OLD.VLRDESCTOT <> :NEW.VLRDESCTOT) OR (:OLD.TIPFRETE <> :NEW.TIPFRETE)
       OR (:OLD.BASEICMSFRETE <> :NEW.BASEICMSFRETE) OR (:OLD.ICMSFRETE <> :NEW.ICMSFRETE) OR (:OLD.VLRSEG <> :NEW.VLRSEG) OR (:OLD.VLRICMSSEG <> :NEW.VLRICMSSEG)
       OR (:OLD.VLREMB <> :NEW.VLREMB) OR (:OLD.TIPIPIEMB <> :NEW.TIPIPIEMB) OR (:OLD.VLRICMSEMB <> :NEW.VLRICMSEMB) OR (:OLD.BASEISS <> :NEW.BASEISS) 
       OR (:OLD.ISSRETIDO <> :NEW.ISSRETIDO) OR (:OLD.VLRISS <> :NEW.VLRISS) OR (:OLD.VLRINSS <> :NEW.VLRINSS) OR (:OLD.CODTIPOPER <> :NEW.CODTIPOPER)
       OR (:OLD.CODOBSPADRAO <> :NEW.CODOBSPADRAO) OR (:OLD.IPIEMB <> :NEW.IPIEMB) OR (:OLD.VLRFRETE <> :NEW.VLRFRETE AND :NEW.TIPFRETE <> 'N') OR (:OLD.VLRDESTAQUE <> :NEW.VLRDESTAQUE)
       OR (:OLD.VLRJURO <> :NEW.VLRJURO) OR (:OLD.VLRDESCSERV <> :NEW.VLRDESCSERV) OR (:OLD.VLRSUBST <> :NEW.VLRSUBST) OR (:OLD.BASESUBSTIT <> :NEW.BASESUBSTIT)
       OR (:OLD.BASESUBSTSEMRED <> :NEW.BASESUBSTSEMRED) OR (:OLD.CODMODDOCNOTA <> :NEW.CODMODDOCNOTA) OR (:OLD.VLRIRF <> :NEW.VLRIRF)
       OR (:OLD.CODPARCDEST <> :NEW.CODPARCDEST) OR (:OLD.CODPARCREMETENTE <> :NEW.CODPARCREMETENTE) OR (:OLD.IRFRETIDO <> :NEW.IRFRETIDO)
       OR (:OLD.CHAVENFE <> :NEW.CHAVENFE) OR (:OLD.DTENTSAIINFO <> :NEW.DTENTSAIINFO) ) THEN

     SELECT COUNT(1) INTO P_COUNT FROM  TCBINT C WHERE  C.NUNICO = :OLD.NUNOTA AND C.ORIGEM = 'E';
     IF P_COUNT <> 0 THEN
        ERRMSG := 'Nota já foi contabilizada, não pode ser alterada.';
        RAISE ERROR;
     END IF;

    SELECT COUNT(1) INTO P_COUNT
    FROM TGFLIV
    WHERE NUNOTA = :OLD.NUNOTA
    AND ORIGEM IN ('A', 'D', 'E');
        
    IF P_COUNT <> 0 THEN
        ERRMSG := 'Nota já foi gerada no Livro Fiscal de ICMS/IPI, não pode ser alterada. Nota de Nro Único: '|| TO_CHAR(:OLD.NUNOTA) ||'';
        RAISE ERROR;
    END IF;
        
    SELECT COUNT(1) INTO P_COUNT
    FROM TGFLIS
    WHERE NUNOTA = :OLD.NUNOTA
    AND ORIGEM = 'E';

    IF P_COUNT <> 0 THEN
        ERRMSG := 'Nota já foi gerada no Livro Fiscal de ISS, não pode ser alterada. Nota de Nro Único: '|| TO_CHAR(:OLD.NUNOTA) ||'';
        RAISE ERROR;
    END IF;


  ELSIF (:OLD.STATUSNOTA = 'L' AND (NVL (:NEW.CODCENCUS, 0) <> NVL (:OLD.CODCENCUS, 0))) THEN

     SELECT COUNT(1) 
     INTO P_COUNT 
     FROM  TCBINT C
     , TCBLAN LAN 
     WHERE  C.NUNICO = :OLD.NUNOTA 
     AND C.ORIGEM = 'E'
     AND C.CODEMP = LAN.CODEMP
     AND C.REFERENCIA = LAN.REFERENCIA
     AND C.NUMLOTE = LAN.NUMLOTE
     AND C.NUMLANC = LAN.NUMLANC
     AND C.TIPLANC = LAN.TIPLANC
     AND C.SEQUENCIA = LAN.SEQUENCIA
     AND LAN.CODCENCUS <> 0;

     IF P_COUNT > 0 THEN
        ERRMSG := 'Nota já foi contabilizada, C.R. não pode ser alterado.';
        RAISE ERROR;
     END IF;

  END IF;

  IF UPDATING('CODNAT') THEN
     SELECT COUNT(1) INTO P_COUNT
     FROM TGFNAT N
     WHERE N.CODNAT = :NEW.CODNAT AND N.ATIVA= 'S' AND N.ANALITICA = 'S';
     IF (P_COUNT = 0) THEN
        Stp_Popula_Msg('TGFNAT');
     END IF;
  END IF;
  
  IF UPDATING('DTNEG') THEN     
    SELECT COUNT(1) INTO P_COUNT
    FROM TCSBLO BLO
            , TCIIBE IBE
            , TGFTOP TP
    WHERE IBE.NUNOTA   = :OLD.NUNOTA
    AND BLO.CODPROD     = IBE.CODPROD
    AND BLO.CODBEM    = IBE.CODBEM
    AND BLO.NUMCONTRATO = :OLD.NUMCONTRATO
    AND BLO.DTINICIO    = :OLD.DTNEG
    AND TP.CODTIPOPER   = :OLD.CODTIPOPER
    AND TP.DHALTER      = :OLD.DHTIPOPER
    AND TP.ATUALBEM     = 'T';
    IF P_COUNT > 0 THEN    
          ERRMSG := 'Data de Negociação não pode ser alterada com bens locados.';
          RAISE ERROR;
    END IF;
  END IF;

  IF UPDATING('DTENTSAI') THEN     
    SELECT COUNT(1) INTO P_COUNT
    FROM TCSBLO BLO
            , TCIIBE IBE
            , TGFTOP TP
    WHERE IBE.NUNOTA   = :OLD.NUNOTA
    AND BLO.CODPROD     = IBE.CODPROD
    AND BLO.CODBEM    = IBE.CODBEM
    AND BLO.NUMCONTRATO = :OLD.NUMCONTRATO
    AND BLO.DTFIM      = :OLD.DTENTSAI
    AND TP.CODTIPOPER   = :OLD.CODTIPOPER
    AND TP.DHALTER      = :OLD.DHTIPOPER
    AND TP.ATUALBEM     = 'D';
  IF P_COUNT > 0 THEN    
      ERRMSG := 'Data de Ent.\Sai. não pode ser alterada com bens locados.';
      RAISE ERROR;
  END IF;
  END IF;

  IF UPDATING('CODVEICULO') AND :NEW.CODVEICULO IS NOT NULL THEN
     Stp_Valida_Veiculo(:NEW.CODVEICULO);
  END IF;

  IF UPDATING('CODPARCDEST') AND (:NEW.CODPARCDEST IS NOT NULL) THEN
     SELECT COUNT(1)  INTO P_COUNT
     FROM  TGFPAR P
     WHERE P.CODPARC = :NEW.CODPARCDEST
       AND P.ATIVO = 'S';
     IF (P_COUNT = 0) THEN
        ERRMSG := 'Parceiro ' || TO_CHAR(:NEW.CODPARCDEST) || 'destino não está ativo. ';
        RAISE ERROR;
     END IF;
  END IF;

  IF UPDATING('NUMCONTRATO') AND (:NEW.NUMCONTRATO IS NOT NULL) THEN
     SELECT COUNT(1)  INTO P_COUNT
     FROM  TCSCON C
     WHERE C.NUMCONTRATO = :NEW.NUMCONTRATO
       AND C.ATIVO = 'S';
     IF (P_COUNT = 0) THEN
        ERRMSG := 'Contrato ' || TO_CHAR(:NEW.NUMCONTRATO) || ' não está ativo. ';
        RAISE ERROR;
     END IF;
  END IF;

  IF UPDATING('CODPROJ') AND (:NEW.CODPROJ IS NOT NULL) THEN
     SELECT COUNT(1)  INTO P_COUNT
     FROM  TCSPRJ P
     WHERE P.CODPROJ = :NEW.CODPROJ AND P.ATIVO = 'S'
       AND P.ANALITICO = 'S';
     IF (P_COUNT = 0) THEN
        ERRMSG := Erros_Pkg.ERRO_PROJETO_NAOATIVO;
        RAISE ERROR;
     END IF;
  END IF;

  IF UPDATING('CODEMP') THEN
     SELECT COUNT(1) INTO P_COUNT
     FROM TGFEMP E
     WHERE E.CODEMP = :NEW.CODEMP
     AND E.ATIVO = 'S';
     IF (P_COUNT = 0) THEN
        ERRMSG := 'Empresa ' || TO_CHAR(:NEW.CODEMP) || ' não está ativa. ';
        RAISE ERROR;
     END IF;
  END IF;

  IF UPDATING('CODCENCUS') AND (:NEW.CODCENCUS IS NOT NULL) AND (:NEW.CODCENCUS <> 0) THEN
     SELECT COUNT(1) INTO P_COUNT
     FROM TSICUS C
     WHERE C.CODCENCUS = :NEW.CODCENCUS AND C.ATIVO = 'S'
       AND C.ANALITICO = 'S';
     IF P_COUNT = 0 THEN
        Stp_Popula_Msg('TSICUS');
     END IF;
  END IF;

  IF UPDATING('CODEMPNEGOC') AND (:NEW.CODEMPNEGOC IS NOT NULL) AND (:NEW.CODEMP <> :NEW.CODEMPNEGOC) THEN
     SELECT COUNT(1) INTO P_COUNT
     FROM TGFEMP E
     WHERE E.CODEMP = :NEW.CODEMPNEGOC
     AND E.ATIVO = 'S';
     IF (P_COUNT = 0) THEN
        ERRMSG := 'Empresa de negociação ' || TO_CHAR(:NEW.CODEMPNEGOC) || ' não está ativa. ';
        RAISE ERROR;
     END IF;
  END IF;

  IF UPDATING('CODPARC') THEN
     SELECT COUNT(1)  INTO P_COUNT
     FROM  TGFPAR P
     WHERE P.CODPARC = :NEW.CODPARC
       AND P.ATIVO = 'S';
     IF (P_COUNT = 0) THEN
        ERRMSG := Erros_Pkg.ERRO_PARCEIRO_NAOATIVO;
        RAISE ERROR;
     END IF;
  END IF;

  IF UPDATING('CODPARCTRANSP') AND (:NEW.CODPARCTRANSP IS NOT NULL) THEN
     SELECT COUNT(1)  INTO P_COUNT
     FROM  TGFPAR P
     WHERE P.CODPARC = :NEW.CODPARCTRANSP
     AND P.ATIVO = 'S';
     IF (P_COUNT = 0) THEN
        ERRMSG := 'Transportadora ' || TO_CHAR(:NEW.CODPARCTRANSP) || ' não está ativa. ';
        RAISE ERROR;
     END IF;
  END IF;

  IF UPDATING('CODVEND') AND (:NEW.CODVEND IS NOT NULL) THEN
     SELECT COUNT(1) INTO P_COUNT
     FROM  TGFVEN V
     WHERE V.CODVEND = :NEW.CODVEND
       AND V.ATIVO = 'S';
     IF (P_COUNT = 0) THEN
        ERRMSG := Erros_Pkg.ERRO_VENDEDOR_NAOATIVO;
        RAISE ERROR;
     END IF;
  END IF;

          
  IF UPDATING('CODTIPOPER') OR UPDATING('DHTIPOPER') OR UPDATING('TIPMOV') THEN
    IF (:NEW.CODTIPOPER = 0) AND (:NEW.TIPMOV <> 'Z') THEN
       ERRMSG := 'Campo Top obrigatório.';
       RAISE ERROR;
    END IF;
    
    SELECT COUNT(1) INTO P_COUNT
    FROM  TGFTOP T
    WHERE :NEW.CODTIPOPER = T.CODTIPOPER
      AND :NEW.DHTIPOPER = T.DHALTER
      AND T.ATIVO = 'S';
    IF (P_COUNT = 0) THEN
        ERRMSG := Erros_Pkg.ERRO_TIPOPER_NAOATIVO;
        RAISE ERROR;
    END IF;

    IF (:NEW.TIPMOV <> 'Z') THEN

      SELECT COUNT(1) INTO P_COUNT
      FROM TGFTOP T
      WHERE T.CODTIPOPER = :NEW.CODTIPOPER
        AND T.DHALTER = :NEW.DHTIPOPER
        AND :NEW.TIPMOV <> T.TIPMOV;
      IF ( P_COUNT <> 0) THEN
         ERRMSG := 'Esta TOP ' || TO_CHAR(:NEW.CODTIPOPER) || ' não pode ser lançada nesta opção.';
         RAISE ERROR;
      END IF;
    END IF;

    IF (:NEW.APROVADO <> 'X') THEN
      SELECT T.ATUALFIN,  T.TIPATUALFIN, T.ATUALEST INTO
             P_ATUALFIN_D, P_TIPATUALFIN_D, P_ATUALEST_D
        FROM TGFTOP T
       WHERE T.CODTIPOPER = :OLD.CODTIPOPER
         AND T.DHALTER    = :OLD.DHTIPOPER;
      IF ((P_ATUALFIN_D <> P_ATUALFIN) OR (P_TIPATUALFIN_D <> P_TIPATUALFIN)) THEN
        SELECT COUNT(1) INTO P_COUNT
        FROM TGFFIN F
        WHERE F.NUNOTA = :NEW.NUNOTA
          AND F.VLRBAIXA > 0
          AND F.DTNEG <> F.DHBAIXA;
        IF (P_COUNT <> 0) THEN
            ERRMSG := 'Não foi possível atualizar a nota, pois a atualização da TOP ' || TO_CHAR(:NEW.CODTIPOPER) || ' é inválida.';
            RAISE ERROR;
        END IF;
      END IF;
    END IF;

  BEGIN  
  SELECT T.ATUALFIN,T.TIPATUALFIN, T.ATUALEST, T.ATUALFINTERC, T.ATUALESTTERC, T.ALTITEMPARCFAT, T.INDPRESNFCE, PERMFINMENORVLRNOTA
    INTO P_ATUALFIN,P_TIPATUALFIN, P_ATUALEST, P_ATUALFINTERC, P_ATUALESTTERC, P_ALTITEMPARCFAT, P_INDPRESNFCE, P_PERMFINMENORVLRNOTA
  FROM  TGFTOP T
  WHERE T.CODTIPOPER = :NEW.CODTIPOPER
    AND T.DHALTER    = :NEW.DHTIPOPER;
  EXCEPTION WHEN NO_DATA_FOUND THEN
    ERRMSG := 'Não foi encontrada a TOP ' || TO_CHAR(:NEW.CODTIPOPER) || ' com data de alteração igual a ' || TO_CHAR(:NEW.DHTIPOPER) || ' .';
    RAISE ERROR;
  END;        

  END IF;
  
       

  IF :NEW.INDPRESNFCE IS NULL THEN 
   :NEW.INDPRESNFCE := P_INDPRESNFCE;
  END IF;  
  
  IF (UPDATING('CODCONTATO') OR UPDATING('CODPARC')) AND (:NEW.CODCONTATO IS NOT NULL) THEN
    SELECT COUNT(1) INTO P_COUNT
    FROM  TGFCTT C
    WHERE :NEW.CODPARC = C.CODPARC
      AND :NEW.CODCONTATO = C.CODCONTATO
      AND C.ATIVO = 'S';
    IF (P_COUNT = 0) THEN
        ERRMSG := 'Contato ' || TO_CHAR(:NEW.CODCONTATO) || ' não está ativo. ';
        RAISE ERROR;
    END IF;
  END IF;
  
  IF (UPDATING('CODCONTATOENTREGA') OR UPDATING('CODPARC')) AND (:NEW.CODCONTATOENTREGA IS NOT NULL) THEN
    SELECT COUNT(1) INTO P_COUNT
    FROM  TGFCTT C
    WHERE :NEW.CODPARC = C.CODPARC
      AND :NEW.CODCONTATOENTREGA = C.CODCONTATO
      AND C.ATIVO = 'S';
    IF (P_COUNT = 0) THEN
        ERRMSG := 'Contato ' || TO_CHAR(:NEW.CODCONTATOENTREGA) || ' não está ativo. ';
        RAISE ERROR;
    END IF;
  END IF;
  IF (UPDATING('CODTIPVENDA') OR UPDATING('DHTIPVENDA')) THEN
    SELECT COUNT(1) INTO P_COUNT
    FROM  TGFTPV T
    WHERE :NEW.CODTIPVENDA = T.CODTIPVENDA
      AND :NEW.DHTIPVENDA = T.DHALTER
      AND T.ATIVO = 'S';
    IF (P_COUNT = 0) THEN
        ERRMSG := 'Verifique se o Tipo de Venda '  || TO_CHAR(:NEW.CODTIPVENDA, '9999')|| ' está ativo ou se sua data de alteração é menor ou igual a data de lançamento da nota. ';
        RAISE ERROR;
       --Stp_Popula_Msg('TGFTPV');
    END IF;

    /* Vendas tem tipo de negociaÝÒo */
    IF (:NEW.TIPMOV = 'P') OR (:NEW.TIPMOV = 'V') OR (:NEW.TIPMOV = 'D') THEN
      IF (:NEW.CODTIPVENDA = 0) THEN
         ERRMSG := 'Campo Tipo de negociação obrigatório.';
         RAISE ERROR;
      END IF;
    END IF;
  END IF;

  /* testa se o ano digitada e valido */
  IF UPDATING('DTMOV') THEN
    SELECT NVL(P.INTEIRO,0) INTO P_COUNT
    FROM TSIPAR P
    WHERE P.CHAVE = 'LIMSUPANO';
    IF  (P_COUNT <> 0)
        AND (((:NEW.DTMOV IS NOT NULL)           
        AND                                                   (TO_NUMBER(TO_CHAR(:NEW.DTMOV, 'YYYY')) >  TO_NUMBER(TO_CHAR(SYSDATE, 'YYYY')) + P_COUNT ) )
         OR (TO_NUMBER(TO_CHAR(:NEW.DTNEG, 'YYYY')) > (TO_NUMBER(TO_CHAR(SYSDATE, 'YYYY')) +  P_COUNT) )
        ) THEN




      ERRMSG := 'Ano superior ao limite permitido, veja o parâmetro de Limite Superior para Ano .';
      RAISE ERROR;
    END IF;
                                                                                                                                                                                                                                                                                                                                                                                                                
    BEGIN
      SELECT NVL(P.INTEIRO  ,0) INTO P_COUNT
      FROM TSIPAR P
      WHERE P.CHAVE = 'LIMINFANO';
    EXCEPTION 
    WHEN NO_DATA_FOUND THEN
      P_COUNT := 0;
    WHEN OTHERS THEN
      ERRMSG := SUBSTR(SQLERRM,1,200);
      RAISE ERROR;    
    END;           
    IF ( P_COUNT <> 0) AND ( ( ( :NEW.DTMOV <> NULL ) /*-------*/
        AND ( TO_NUMBER(TO_CHAR(:NEW.DTMOV, 'YYYY')) < (TO_NUMBER(TO_CHAR(SYSDATE, 'YYYY' )) - P_COUNT) ) )
         OR   ( TO_NUMBER(TO_CHAR(:NEW.DTNEG, 'YYYY')) < (TO_NUMBER(TO_CHAR(SYSDATE, 'YYYY')) - P_COUNT) ) ) THEN
          ERRMSG := 'Ano inferior ao limite permitido, veja o parâmetro de Limite Inferior para Ano.';
          RAISE ERROR;
    END IF; 
  END IF;
  IF (UPDATING('CODPARC') OR UPDATING('CODTIPVENDA') OR UPDATING('DHTIPVENDA') OR UPDATING('STATUSNOTA')) AND
     ((:NEW.TIPMOV = 'P') OR (:NEW.TIPMOV = 'V') OR (:NEW.TIPMOV = 'L')) THEN
     SELECT COUNT(1)   INTO P_COUNT
     FROM TGFPAR P, TGFTPV T
     WHERE :NEW.CODPARC = P.CODPARC
       AND :NEW.CODTIPVENDA = T.CODTIPVENDA
       AND :NEW.DHTIPVENDA = T.DHALTER
       AND T.SUBTIPOVENDA <> '1'
       AND T.SUBTIPOVENDA <> '6'
       AND T.SUBTIPOVENDA <> '7'
       AND T.SUBTIPOVENDA <> '8'
       AND (T.VALPRAZOCLIENTE = 'S') AND (P.PRAZOPAG = 0);
     IF (P_COUNT <> 0 ) THEN
        ERRMSG := 'Prazo bloqueado.';
        RAISE ERROR;
     END IF;

     SELECT COUNT(1) INTO P_COUNT
     FROM TGFPAR P, TGFTPV T
     WHERE :NEW.CODPARC = P.CODPARC
       AND :NEW.CODTIPVENDA = T.CODTIPVENDA
       AND :NEW.DHTIPVENDA = T.DHALTER
       AND T.SUBTIPOVENDA <> '1'
       AND T.SUBTIPOVENDA <> '6'
       AND T.SUBTIPOVENDA <> '7'
       AND T.SUBTIPOVENDA <> '8'
       AND P.BLOQUEAR = 'S';
     IF (P_COUNT <> 0 ) THEN
        ERRMSG := 'Venda a prazo bloqueada.';
        RAISE ERROR;
     END IF;
     /* valida se o parceiro da nota faz parte do grupo de alteraÝÒo da Top */
     SELECT COUNT(1)  INTO P_COUNT
     FROM TGFTPV T, TGFPAR P
     WHERE :NEW.CODPARC = P.CODPARC
       AND :NEW.CODTIPVENDA = T.CODTIPVENDA
       AND :NEW.DHTIPVENDA = T.DHALTER
       AND T.GRUPOAUTOR > ''
       AND NOT (P.GRUPOAUTOR LIKE '%' || T.GRUPOAUTOR || '%');
     IF (P_COUNT <> 0 ) THEN
        ERRMSG := 'Tipo de negociação ' || TO_CHAR(:NEW.CODTIPVENDA) || ' não autorizado para este cliente! Ver Grupo autorização.';
        RAISE ERROR;
     END IF;
  END IF;

  IF (UPDATING('CODPARC') OR UPDATING('TIPMOV')) THEN
    SELECT COUNT(1)  INTO P_COUNT
      FROM TGFPAR P
     WHERE P.CODPARC = :NEW.CODPARC
       AND ( ( P.CODPARC = 0 AND :NEW.TIPMOV IN ('O', 'C', 'E', 'P', 'V', 'D', 'S', 'M', '1', '2', '3', '8', 'N') )
            OR ( :NEW.TIPMOV IN ('O', 'C', 'E')  AND  P.FORNECEDOR <> 'S')
            OR ( :NEW.TIPMOV IN ('P', 'V', 'D', '1', '2', '3', '8', 'N') AND P.CLIENTE <> 'S' ));
    IF (P_COUNT <> 0 ) THEN
       ERRMSG := 'O parceiro deve ser diferente de zero' ||
                 ' e para compra, pedido de compra e devolução de compra, o parceiro deve ser um fornecedor' ||
                 ' e para pedido de venda, venda e devolução de venda o parceiro deve ser cliente.';
       RAISE ERROR;
    END IF;
  END IF;

  IF (:NEW.CODEMP = :NEW.CODEMPNEGOC) AND (:NEW.TIPMOV = 'T') THEN
    SELECT P.LOGICO INTO P_UTILIZALOCAL
    FROM TSIPAR P
    WHERE P.CHAVE = 'UTILIZALOCAL';
    IF (P_UTILIZALOCAL = 'N') THEN
        ERRMSG := 'Empresa de destino deve ser diferente da empresa de origem.';
        RAISE ERROR;
    END IF;
  END IF;
  /* nÒo posso atualizar a DTNEG, CODTIPVENDA, DHTIPVENDA E VLRNOTA se jî foi baixado algum registro na TGFFin */
  IF (:NEW.APROVADO <> 'X') 
     AND NOT(:NEW.TIPMOV IN ('P', 'O') AND P_TIPATUALFIN = 'P' AND P_ALTITEMPARCFAT = 'S') 
     AND( (:NEW.DTNEG <> :OLD.DTNEG)OR  (:NEW.CODTIPVENDA<>:OLD.CODTIPVENDA) OR
          (:NEW.DHTIPVENDA <> :OLD.DHTIPVENDA) OR (:NEW.VLRNOTA<>:OLD.VLRNOTA)) THEN
    BEGIN
       SELECT INTEIRO INTO P_TIPTIT_COMPENSACAO FROM TSIPAR WHERE CHAVE = 'TIPTITCREDCLI';
    EXCEPTION WHEN NO_DATA_FOUND THEN
      P_TIPTIT_COMPENSACAO := 0;
    WHEN OTHERS THEN
      RAISE;     
    END;
                                                 
    SELECT COUNT(1) INTO P_COUNT
    FROM TGFFIN F
    WHERE F.NUNOTA = :NEW.NUNOTA
    AND F.VLRBAIXA > 0
    AND F.NUFIN > 0
    AND ( P_TIPTIT_COMPENSACAO = 0 OR F.CODTIPTIT <> P_TIPTIT_COMPENSACAO )
    AND (DESDOBDUPL IS NULL OR DESDOBDUPL NOT IN ('M', 'V', 'K', 'F'));
    IF (P_COUNT <> 0 ) THEN
       ERRMSG := 'Não se pode atualizar a data de negociação, o código do tipo de negociação ou o valor da nota de uma nota que já foi baixada no financeiro.';
       RAISE ERROR;
    END IF;
  END IF;
  
  IF (:OLD.STATUSNOTA <> :NEW.STATUSNOTA) THEN
    /* Stp_Valida_Dentroestado(:NEW.NUNOTA);  */
    /* ======  Se a provisao do financeiro ' de um s¾ tipo e correta ====== */
    IF (P_ATUALFIN <> 0) THEN
        IF P_TIPATUALFIN = 'P' THEN
          P_PROVISAO := 'S';
        ELSE
          P_PROVISAO := 'N';
        END IF;
        SELECT COUNT(1) INTO P_COUNT
        FROM TGFFIN
        WHERE NUNOTA = :NEW.NUNOTA
          AND PROVISAO <> P_PROVISAO;
        IF (P_COUNT <> 0) THEN
           ERRMSG := 'O financeiro está provisionando e não provisionando. Só um dos dois pode acontecer.';
           RAISE ERROR;
        END IF;
        
       /* PARA ATUALIZAR O CRÉDITO DE CARTÃO FIDELIDADE  */
       SELECT COUNT(1) INTO P_COUNT
       FROM TGFCFM
       WHERE NUNOTA = :NEW.NUNOTA
         AND SINAL = 1;
       IF P_COUNT > 0 THEN
         UPDATE TGFCFM SET VALOR = :NEW.VLRNOTA
         WHERE NUNOTA = :NEW.NUNOTA
         AND SINAL = 1;
       END IF;
    END IF;

/* Verifica se o financeiro é da geração do conhecimento de transporte     
    SELECT COUNT(1) INTO P_COUNT  FROM TGFFIN
    WHERE NUNOTA = :NEW.NUNOTA
     AND DESDOBDUPL = 'T';

    IF (P_COUNT = 0) THEN  (VALIDAÇÃO COMENTADA OS 470978) */    
     /* ======  Verificando valores de desdobramento do Financeiro  ====== */     

     SELECT SUM(NVL(VLRDESDOB,0) * RECDESP) INTO P_TOTDESDOB
     FROM TGFFIN
     WHERE NUNOTA = :NEW.NUNOTA
     AND (DESDOBDUPL IS NULL OR DESDOBDUPL NOT IN ('M', 'V', 'K', 'F', 'T'))
     AND ((CODTIPTIT <> P_GNREST) OR(P_GNREST = 0))
     AND ((CODTIPTIT <> P_TIPTITGNRESTRB) OR(P_TIPTITGNRESTRB = 0));
         
      
      IF (P_ATUALFIN = 0) THEN
        IF (P_TOTDESDOB IS NOT NULL) THEN
           ERRMSG := 'Esta TOP não pode atualizar o financeiro.';
           RAISE ERROR;
        END IF;
      ELSIF ROUND((P_TOTDESDOB * P_ATUALFIN),2) < ROUND(:NEW.VLRNOTA,2) THEN
        IF(P_ATUALFINTERC = 'N') AND (P_ATUALESTTERC <>'N') THEN    
                        Tgfcab_Upd_Pkg.V_CONTADOR := Tgfcab_Upd_Pkg.V_CONTADOR + 1;
            Tgfcab_Upd_Pkg.V_NUNOTA(Tgfcab_Upd_Pkg.V_CONTADOR) := :NEW.NUNOTA;
            Tgfcab_Upd_Pkg.V_TOTDESDOB(Tgfcab_Upd_Pkg.V_CONTADOR) := ROUND((P_TOTDESDOB * P_ATUALFIN),2);
            Tgfcab_Upd_Pkg.V_VLRNOTA(Tgfcab_Upd_Pkg.V_CONTADOR) := :NEW.VLRNOTA;                        
        ELSE 
          IF P_PERMFINMENORVLRNOTA <> 'S' THEN
          ERRMSG := 'A somatória dos valores do financeiro ('||TO_CHAR((P_TOTDESDOB * P_ATUALFIN), '999999.99') ||
                    ') não corresponde ao total da nota (' || TO_CHAR(:NEW.VLRNOTA, '9999999.99') || ').';
          RAISE ERROR;
        END IF;
      END IF;
      END IF;
    /*END IF;*/
  END IF;        
        
  IF UPDATING('CODMOTORISTA') AND (:NEW.CODMOTORISTA <> 0) THEN
     SELECT MOTORISTA, ATIVO INTO P_MOTORISTA, P_ATIVO
      FROM TGFPAR 
     WHERE CODPARC = :NEW.CODMOTORISTA;
    IF (P_MOTORISTA <> 'S') THEN 
        ERRMSG := 'Parceiro ' || TO_CHAR(:NEW.CODMOTORISTA) || ' não está marcado como Motorista.';
        RAISE ERROR;
    END IF;
         
    IF (P_ATIVO <> 'S') THEN
        ERRMSG := 'Motorista ' || TO_CHAR(:NEW.CODMOTORISTA) || 'não está ativo.';
        RAISE ERROR;
    END IF;
  END IF;  
 
  IF (:NEW.STATUSNOTA = 'L') AND (:NEW.TIPMOV IN ('P','O','C','D','V')) THEN -- OS 447451
    SELECT COUNT(1), MIN(CHAVE)
    INTO P_COUNT, P_CHAVE
    FROM TSIPAR
    WHERE CHAVE IN ('TOPSACUMTROCA','TOPSUSATROCA')
    AND TEXTO IS NOT NULL
    AND  (',' || trim(REPLACE(TEXTO,' ','')) || ',') LIKE '%,' || :NEW.CODTIPOPER || ',%';
  IF P_COUNT <> 0 THEN
      IF P_COUNT > 1 THEN
        ERRMSG := 'Uma TOP não pode participar do param.TOPSACUMTROCA e do param.TOPSUSATROCA simultâneamente.';
        RAISE ERROR;
      ELSIF P_COUNT = 1 THEN
        --VERIFICANDO SE A NOTA ESTÁ LIGADA.
            SELECT COUNT (1)
              INTO P_COUNT
              FROM TGFVAR
             WHERE :NEW.NUNOTA IN (NUNOTA, NUNOTAORIG) AND NUNOTA <> NUNOTAORIG AND SEQUENCIA = 0 AND SEQUENCIAORIG = 0;
      
            IF ( P_COUNT > 0 ) 
          AND (    (:OLD.STATUSNOTA = 'L')
            AND (:NEW.TIPMOV NOT IN ('D', 'P')) 
            AND NOT (UPDATING('NUMNOTA') OR
             UPDATING ('PENDENTE') OR  
                     UPDATING('SERIENOTA') OR
                     UPDATING('TPEMISNFE') OR
                     UPDATING('DTALTER') OR
                     UPDATING('CODUSU') OR
                     UPDATING('NUMALEATORIO') OR
                     UPDATING('CHAVENFE') OR
                     UPDATING('DHPROTOC') OR
                     UPDATING('NUMPROTOC') OR
                     UPDATING('STATUSNFE'))
           ) THEN
         ERRMSG := 'Não é permitido alterar uma nota de troca já confirmada.';
          RAISE ERROR;
        END IF;
  
        IF P_CHAVE = 'TOPSACUMTROCA' THEN
          IF :NEW.TIPMOV NOT IN ('O', 'C', 'D','V') THEN
              ERRMSG := 'Param.TOPSACUMTROCA deve ter TOP de: Compra, Pedido de Compra ou Devolução de Venda.';
              RAISE ERROR;
          END IF;
          P_SINAL := 1;
        ELSE 
          P_SINAL := -1;
        END IF;
  
        IF P_CHAVE = 'TOPSUSATROCA' THEN
          P_VLRTROCA := :NEW.VLRNOTA;
        ELSE
          --VERIFICANDO SE TODOS OS ITENS POSSUEM O VLRTROCA                
          SELECT SUM(CASE WHEN VLRTROCA IS NULL THEN 1 ELSE 0 END), SUM(VLRTROCA) 
          INTO P_COUNT, P_VLRTROCA
          FROM TGFITE 
          WHERE NUNOTA = :NEW.NUNOTA
          AND SEQUENCIA > 0;
          IF P_COUNT > 0 THEN
            ERRMSG := 'Não é permitido confirmar, pois a TOP é de troca (parâmetro "TOPSACUMTROCA"). O preço base dos produtos deve ser atualizado através da rotina Atualizar Preço de Produtos para Acumular Saldo de Troca.';
            RAISE ERROR;
          END IF;
        
        IF (:OLD.STATUSNOTA <> 'L') THEN            
          SELECT COUNT(1) INTO P_ULTCOD
          FROM TGFNUM
          WHERE ARQUIVO = 'TGFMST';        
          
          IF P_ULTCOD = 0 THEN
            P_ULTCOD := 1; 
            INSERT INTO TGFNUM(ARQUIVO
            , CODEMP
            , ULTCOD
            , ULTNOTATALAO)VALUES('TGFMST'
            , :NEW.CODEMP
            , 1
            , 999999999);
          ELSE 
            SELECT MAX(NVL(ULTCOD, 0)) + 1 INTO P_ULTCOD
            FROM TGFNUM 
            WHERE ARQUIVO = 'TGFMST';  
           
            UPDATE TGFNUM SET ULTCOD = P_ULTCOD
            WHERE ARQUIVO = 'TGFMST';
          END IF;      
        
          INSERT INTO TGFMST(NUMST      
            , NUNOTA
            , CODVEND
            , CODPARC
            , VALOR
            , OBSERVACAO
            , SINAL
            , CODUSU)
          VALUES(P_ULTCOD
            , :NEW.NUNOTA
            , :NEW.CODVEND
            , :NEW.CODPARC
            , P_VLRTROCA
            , 'Inclusão efetuada na confirmação da nota.'
            , P_SINAL
            , 0);
        END IF; 
      END IF;
  END IF;  
  END IF; 
   END IF;
  
  IF (:NEW.CODEMP <> :OLD.CODEMP OR :NEW.CODEMPNEGOC <> :OLD.CODEMPNEGOC) THEN
    INSERT INTO TGFCAB_UPT ( NUNOTA,      CODEMPNOV,   CODEMPANT , CODEMPNEGOCNOV ,  CODEMPNEGOCANT)
                    VALUES (:NEW.NUNOTA, :NEW.CODEMP, :OLD.CODEMP,:NEW.CODEMPNEGOC, :OLD.CODEMPNEGOC);
  END IF;

  -- ALTERACAO PRODNFE OS 673279
  P_CODTOPPREVENDA := GET_TSIPAR_INTEIRO('CODTOPPREVENDA');
    
  SELECT EMP.NFE, TPO.NFE, TPO.BASENUMERACAO, TPO_OLD.NFE
    INTO P_EMPNFE, P_TOPNFE, P_BASENUMERACAO, P_TOPNFE_OLD
  FROM TGFEMP EMP
     , TGFTOP TPO
     , TGFTOP TPO_OLD
  WHERE EMP.CODEMP = :NEW.CODEMP
    AND TPO.CODTIPOPER = :NEW.CODTIPOPER
    AND TPO.DHALTER = :NEW.DHTIPOPER
    AND TPO_OLD.CODTIPOPER = :OLD.CODTIPOPER
    AND TPO_OLD.DHALTER = :OLD.DHTIPOPER;
     
  IF (((:NEW.CODTIPOPER <> :OLD.CODTIPOPER) OR (:NEW.DHTIPOPER <> :OLD.DHTIPOPER))
      AND NVL(P_TOPNFE, 'M') NOT IN ('M', 'T') 
      AND P_TOPNFE_OLD IN ('M', 'T')) THEN

    INSERT INTO TGFCAB_UPT (NUNOTA, PRODUTONFE) VALUES (:NEW.NUNOTA, 'S');

  END IF;

/*
  **MARCELO
  ATENCAO NAO PODE SER MODIFICADO O CODIGO DA EMPRESA E NEM O CODIGO DO
  PARCEIRO NO UPDATE DA TGFFIN , POR CAUSA DOS VALORES LANCADOS
  EM OUTROS E FRETE, TAMBEM POR CAUSA DO TIPO DE NEGOCIACAO QUE ESTES
  CAMPOS SAO LIVRES.
*/
  IF (:NEW.NUMNOTA <> :OLD.NUMNOTA OR
      :NEW.DTENTSAI <> :OLD.DTENTSAI OR
      :NEW.DTNEG <> :OLD.DTNEG OR
      :NEW.CODTIPOPER <> :OLD.CODTIPOPER OR
      :NEW.DHTIPOPER <> :OLD.DHTIPOPER) THEN
    SELECT COUNT(1) INTO P_COUNT
  FROM TGFFIN
  WHERE NUNOTA = :NEW.NUNOTA
      AND (DESDOBDUPL IS NULL OR DESDOBDUPL NOT IN ('M', 'V', 'K', 'F'));
  IF P_COUNT > 0 THEN
      UPDATE TGFFIN SET
       NUMNOTA      = :NEW.NUMNOTA,
       DTENTSAI     = :NEW.DTENTSAI,
       DTNEG        = :NEW.DTNEG,
       CODTIPOPER   = :NEW.CODTIPOPER,
       DHTIPOPER    = :NEW.DHTIPOPER
      WHERE NUNOTA = :NEW.NUNOTA
        AND (DESDOBDUPL IS NULL OR DESDOBDUPL NOT IN ('M', 'V', 'K', 'F'));
    END IF;
  END IF;
  
  IF (:NEW.SERIENOTA <> :OLD.SERIENOTA OR
      :NEW.CODVEND <> :OLD.CODVEND OR
      :NEW.CODMOEDA <> :OLD.CODMOEDA OR
      :NEW.CODVEICULO <> :OLD.CODVEICULO OR
    :NEW.CODUSU<> :OLD.CODUSU) THEN
  SELECT COUNT(1) INTO P_COUNT
  FROM TGFFIN
  WHERE NUNOTA = :NEW.NUNOTA
      AND (DESDOBDUPL IS NULL OR DESDOBDUPL NOT IN ('M', 'V', 'K', 'F'));
  IF P_COUNT > 0 THEN
    BEGIN
      Tgffin_Pkg.V_VALIDA_FINANCEIRO := FALSE;
        UPDATE TGFFIN SET
         SERIENOTA    = :NEW.SERIENOTA,
         CODVEND      = :NEW.CODVEND,
         CODMOEDA     = :NEW.CODMOEDA,
         CODVEICULO = :NEW.CODVEICULO,
       CODUSU = :NEW.CODUSU
        WHERE NUNOTA = :NEW.NUNOTA
          AND (DESDOBDUPL IS NULL OR DESDOBDUPL NOT IN ('M', 'V', 'K', 'F'));
    Tgffin_Pkg.V_VALIDA_FINANCEIRO := TRUE;
    EXCEPTION WHEN OTHERS THEN
      Tgffin_Pkg.V_VALIDA_FINANCEIRO := TRUE;
    RAISE;
    END;
    END IF;
  END IF;  

  IF (:NEW.TIPMOV = 'F') OR (:NEW.DTENTSAI IS NULL OR :NEW.DTENTSAI < :NEW.DTNEG) THEN
     :NEW.DTENTSAI := :NEW.DTNEG;
  END IF;

  IF :NEW.VLRNOTA <> :OLD.VLRNOTA AND :NEW.APROVADO = 'S' THEN
    :NEW.APROVADO := 'N';
  END IF;
  --ERRMSG := 'NVL(:NEW.VLRFRETE, 0): '||NVL(:NEW.VLRFRETE, 0)||' NVL(:OLD.VLRFRETE, 0): '||NVL(:OLD.VLRFRETE, 0)||' RATEXTNOTAFRINC:'||GET_TSIPAR_LOGICO('RATFRETEEXTNOTA')|| ':NEW.TIPFRETE: '||:NEW.TIPFRETE;
  
  
  IF (GET_TSIPAR_LOGICO('RATEXTNOTAFRINC') = 'S' AND :NEW.TIPFRETE = 'S' AND NVL(:NEW.VLRFRETE, 0) <> NVL(:OLD.VLRFRETE, 0)) THEN
    :NEW.VLRFRETETOTAL := NVL(:NEW.VLRFRETETOTAL, 0) + NVL(:NEW.VLRFRETE, 0) - NVL(:OLD.VLRFRETE, 0);    
  END IF;
  
  IF NVL(:NEW.CODPARCDEST, 0) <> 0 AND NVL(:NEW.CODPARCREMETENTE, 0) <> 0 AND NVL(:NEW.CODCONTATOENTREGA, 0) <> 0 AND
    :NEW.TIPMOV IN ('V', 'C') AND GET_TSIPAR_LOGICO('USAPARREMDESCPA') = 'S' THEN
    ERRMSG := 'Contato de entrega não pode ser em venda ordem (Parceiro remetente e destinatário preenchidos).';
    RAISE ERROR;
  END IF;
  
  IF :NEW.STATUSNOTA = 'L' THEN 
     
     IF (:OLD.STATUSNOTA <> :NEW.STATUSNOTA OR 
         :OLD.CODEMP <> :NEW.CODEMP OR
         :OLD.CODPARC <> :NEW.CODPARC OR
         NVL(:OLD.CODCONTATOENTREGA,0) <> NVL(:NEW.CODCONTATOENTREGA,0)) THEN
        SNK_ORIGEM_DESTINO_ENTREGA(0,
                                    :NEW.CODEMP,
                                    :NEW.CODEMPNEGOC,                                     
                                    :NEW.CODPARC,
                                    :NEW.CODPARCDEST,
                                    :NEW.CODPARCREMETENTE,
                                    :NEW.CODCONTATOENTREGA,
                                    :NEW.TIPMOV,
                                    :NEW.CODCIDORIGEM,
                                    :NEW.CODCIDDESTINO,
                                    :NEW.CODCIDENTREGA,
                                    :NEW.CODUFORIGEM,
                                    :NEW.CODUFDESTINO,
                                    :NEW.CODUFENTREGA);
     END IF;
     
     IF :OLD.STATUSNOTA <> :NEW.STATUSNOTA OR :OLD.CODTIPOPER <> :NEW.CODTIPOPER OR :OLD.DHTIPOPER <> :NEW.DHTIPOPER THEN
        IF (NVL(:NEW.CODPARCDEST, 0) <> 0 AND 
            (:NEW.TIPMOV = 'T' OR
             (:NEW.TIPMOV = 'V' AND NVL(:NEW.CODPARCREMETENTE, 0) <> 0) OR
             (:NEW.TIPMOV = 'C' AND NVL(:NEW.CODPARCREMETENTE, 0) <> 0 AND GET_TSIPAR_LOGICO('USAPARREMDESCPA') = 'S'))) THEN
            P_CODPARC_CLASSIFICMS := :NEW.CODPARCDEST;
        ELSIF NVL(:NEW.CODPARC, 0) <> 0 THEN
            P_CODPARC_CLASSIFICMS := :NEW.CODPARC;
        ELSE
            P_CODPARC_CLASSIFICMS := 0;
            :NEW.CLASSIFICMS := 'R';
        END IF;
        
        IF P_CODPARC_CLASSIFICMS <> 0 THEN   
            :NEW.CLASSIFICMS := SNK_GET_CLASSIFICMS(0, :NEW.CODEMP, P_CODPARC_CLASSIFICMS, NULL, NULL, :NEW.CODTIPOPER, :NEW.DHTIPOPER);

            IF :NEW.CLASSIFICMS = 'T' THEN
                  RAISE_APPLICATION_ERROR(-20101, 'Classificação de ICMS do parceiro inválida para ser usada com esta TOP.');
            END IF;
        END IF;  
     END IF;    
  END IF;
    
  RETURN;  
EXCEPTION
  WHEN ERROR THEN
    ERRMSG := ERRMSG || 'Nota de Nro Único: '|| TO_CHAR(:NEW.NUNOTA);
    /* 
    Sincronização de dados não faz validações
    */
    IF (P_VALIDAR) THEN 
      RAISE_APPLICATION_ERROR(-20101, ERRMSG);
    END IF; 
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:16
Num.Script: 49396-0-1000
Nro. O.S. : 1136736
Nome      : INSERE - THOOBJ - 4939500
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_UPD_TGFCAB
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210000
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_UPD_TGFCAB' NOMEOBJ, 49395 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, 'c31fccc19c42174cd3cd8694fcf24862' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_UPD_TGFCAB' and THO.hashcode = 'c31fccc19c42174cd3cd8694fcf24862')
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 49407-0-0
Nro. O.S. : 1128361
Nome      : Ajusta - TFPFOR CODFORM 990
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Ajusta - TFPFOR CODFORM 990
NomeObjeto: CODFORM
TipoObjeto: COLUMN
NomeTabela: TFPFOR
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
  P_CODFORMULA      TFPFOR.CODFORM%TYPE;
  P_DESCRFORMULA    TFPFOR.DESCRFORM%TYPE;
  P_DESCRFORMNOVO   TFPFOR.DESCRFORM%TYPE;
  P_FORMULA         VARCHAR2(4000);
  P_FORMULANOVO     VARCHAR2(4000);
  P_CODFORMIND      VARCHAR2(4000);
  P_CODFORMINDNOVO  VARCHAR2(4000);
  P_SANKHYA         TFPFOR.SANKHYA%TYPE;
BEGIN
  
  P_CODFORMULA := 990;
  
  BEGIN
    SELECT FORMULA, DESCRFORM, CODFORMIND, SANKHYA
    INTO P_FORMULA, P_DESCRFORMULA, P_CODFORMIND, P_SANKHYA
    FROM TFPFOR
    WHERE CODFORM = P_CODFORMULA;
  EXCEPTION WHEN NO_DATA_FOUND THEN
    P_FORMULA := 'A';
    P_CODFORMIND := NULL;
    P_DESCRFORMULA := NULL;
    P_SANKHYA := 'S'; 
  END;
  
  IF P_SANKHYA = 'N' THEN
    RETURN;
  END IF;
  
  P_DESCRFORMNOVO := 'MULTA FGTS';
  P_FORMULANOVO := 'TRUNCFOL(IF((QuelTFPafaF.DIRMULTAFGTS=''S'') And ((&CAUAFA = 60) OR (&CAUAFA=65)), (((IF((&TIPFOL=''R''),(&FGTSSALDO + (TRUNCFOL((((&E1826 +FBE(queFuncionario.CODEMP, queFuncionario.CODFUNC,&REFERE,''D'',''1826'')) *queRegFiscal.PERPAGTOFGTS)/100),2) + TRUNCFOL(((&E1827*queRegFiscal.PERPAGTOFGTS)/100),2))), TRUNCFOL(((&E1826*queRegFiscal.PERPAGTOFGTS)/100),2) + TRUNCFOL(((&E1827*queRegFiscal.PERPAGTOFGTS)/100),2))) + IF(&FGTSMESANT=''S'',FSOMAEVE(queFuncionario.CODEMP, queFuncionario.CODFUNC, FSOMAMES(&REFERE, (-1)),''N,F,D'',''1825'') * 0.08, 0)) * IF((&CAUAFA = 76),0.25,IF((QuelTFPafaF.CODGOVERNO=''I5''),0.20,0.50))),0),2)';
  P_CODFORMINDNOVO := '';
  
  IF P_FORMULA = 'A' THEN
    INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
      VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
             'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO);
    
    IF P_CODFORMINDNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO);
    END IF;
    
    IF P_DESCRFORMNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO);
    END IF;
    
    INSERT INTO TFPFOR (CODFORM, DESCRFORM, SANKHYA, FORMULA, CODFORMIND)
      VALUES(P_CODFORMULA, P_DESCRFORMNOVO, 'S', P_FORMULANOVO, P_CODFORMINDNOVO);
    
  ELSIF (P_FORMULANOVO <> P_FORMULA OR 
         NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') OR 
         NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z')) 
  THEN
    
    IF P_FORMULANOVO <> P_FORMULA THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO, P_FORMULA);
    END IF;
    
    IF NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO, P_CODFORMIND);
    END IF;
    
    IF NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO, P_DESCRFORMULA);
    END IF;
    
    UPDATE TFPFOR
    SET FORMULA = P_FORMULANOVO
    , DESCRFORM = P_DESCRFORMNOVO
    , CODFORMIND = P_CODFORMINDNOVO
    , FORMULANTERIOR = CASE WHEN FORMULA <> P_FORMULANOVO THEN P_FORMULA ELSE FORMULANTERIOR END
    , DTALTER = SYSDATE
    , CODUSU = 0
    WHERE CODFORM = P_CODFORMULA
    AND SANKHYA = 'S';
    
  END IF;
  
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 49749-0-0
Nro. O.S. : 1128228
Nome      : Script - TSICID
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - TSICID
NomeObjeto: TSICID
TipoObjeto: TABLE
NomeTabela: TSICID
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
    EXECUTE IMMEDIATE 'UPDATE TSICID SET TIPCANCNFSE = ''3'' WHERE CODMUNFIS = 1302603';
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 49797-0-0
Nro. O.S. : 1133146
Nome      : Drop - CHK_SITUACAO_EVTFILA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - CHK_SITUACAO_EVTFILA
NomeObjeto: CHK_SITUACAO_EVTFILA
TipoObjeto: CONSTRAINT
NomeTabela: EVTFILA
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE EVTFILA DROP CONSTRAINT CHK_SITUACAO_EVTFILA
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 49805-0-0
Nro. O.S. : 1138079
Nome      : Criar - TRG_DLT_TFPPTPR
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TRG_DLT_TFPPTPR
NomeObjeto: TRG_DLT_TFPPTPR
TipoObjeto: TRIGGER
NomeTabela: TFPPTPR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_DLT_TFPPTPR
BEFORE DELETE ON TFPPTPR
FOR EACH ROW
DECLARE 
P_COUNT INT;

BEGIN
  SELECT COUNT(*) INTO P_COUNT
  FROM TFPEMP EMP
  WHERE 
  EMP.CODEMP =:OLD.CODEMP
  AND (EMP.NUPROCESSORAT =:OLD.NUPROCESSO
  OR EMP.NUPROCESSOFAP =:OLD.NUPROCESSO);
  
  IF P_COUNT>0 THEN
  RAISE_APPLICATION_ERROR( -20101, 'Este codigo esta sendo utilizado por uma empresa' );
  END IF;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 49806-0-1000
Nro. O.S. : 1138079
Nome      : INSERE - THOOBJ - 4980500
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_DLT_TFPPTPR
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210000
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_DLT_TFPPTPR' NOMEOBJ, 49805 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, 'aeb32ea5df1e21c50d3a0dd6ed4419f5' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_DLT_TFPPTPR' and THO.hashcode = 'aeb32ea5df1e21c50d3a0dd6ed4419f5')
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50433-0-0
Nro. O.S. : 1134752
Nome      : Ajustar - TFPFOR CODFORM 225
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Ajustar - TFPFOR CODFORM 225
NomeObjeto: DESCRFORM 
TipoObjeto: COLUMN
NomeTabela: TFPFOR 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
UPDATE TFPFOR SET  DESCRFORM = 'Ferias Prop indenizadas API' WHERE CODFORM = 225
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50434-0-0
Nro. O.S. : 1134752
Nome      : Ajustar - TFPFOR CODFORM 423
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Ajustar - TFPFOR CODFORM 423
NomeObjeto: DESCRFORM 
TipoObjeto: COLUMN
NomeTabela: TFPFOR 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
UPDATE TFPFOR SET  DESCRFORM = 'Dif Abono Pecuniário' WHERE CODFORM = 423
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50438-0-0
Nro. O.S. : 1134752
Nome      : Ajustar - TFPFOR CODFORM 203
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Ajustar - TFPFOR CODFORM 203
NomeObjeto: DESCRFORM 
TipoObjeto: COLUMN
NomeTabela: TFPFOR 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
UPDATE TFPFOR SET  DESCRFORM = '13º Salário - API' WHERE CODFORM = 203
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50441-0-0
Nro. O.S. : 1134752
Nome      : Ajustar - TFPFOR CODFORM 201
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Ajustar - TFPFOR CODFORM 201
NomeObjeto: DESCRFORM 
TipoObjeto: COLUMN
NomeTabela: TFPFOR 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
UPDATE TFPFOR SET  DESCRFORM = 'Aviso Prévio Indenizado' WHERE CODFORM = 201
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50465-0-0
Nro. O.S. : 1138079
Nome      : Dropar - TRG_DLT_TFPPTPR
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - TRG_DLT_TFPPTPR
NomeObjeto: TRG_DLT_TFPPTPR
TipoObjeto: TRIGGER
NomeTabela: TFPPTPR
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DROP TRIGGER TRG_DLT_TFPPTPR
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:16
Num.Script: 50466-0-1000
Nro. O.S. : 1138079
Nome      : INSERE - THOOBJ - 5046500
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_DLT_TFPPTPR
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210000
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_DLT_TFPPTPR' NOMEOBJ, 50465 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '5224b43782c4179ca451257b0aa26107' HASHCODE, 'Drop Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_DLT_TFPPTPR' and THO.hashcode = '5224b43782c4179ca451257b0aa26107')
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50471-0-0
Nro. O.S. : 1139223
Nome      : Alterar - SNK_GET_DADOS_EFD
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - SNK_GET_DADOS_EFD
NomeObjeto: SNK_GET_DADOS_EFD
TipoObjeto: FUNCTION
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_GET_DADOS_EFD (P_REGISTRO        VARCHAR2,
                                               P_CODEMP          NUMBER,
                                               P_NUNICO          NUMBER,
                                               P_SEQNOTA         NUMBER,
                                               P_ORIGEM          VARCHAR2,
                                               P_CODCENCUS   OUT NUMBER,
                                               P_CTACTB      OUT VARCHAR2)
AS
   P_GRUPO_NATUREZA   VARCHAR2 (100);
   CURSOR CUR_DADOS IS
    SELECT PLA.CTACTB, LAN.CODCENCUS
    FROM TCBINT BINT
        INNER JOIN TCBLAN LAN
           ON     LAN.CODEMP = BINT.CODEMP
              AND LAN.REFERENCIA = BINT.REFERENCIA
              AND LAN.NUMLOTE = BINT.NUMLOTE
              AND LAN.NUMLANC = BINT.NUMLANC
              AND LAN.TIPLANC = BINT.TIPLANC
              AND LAN.SEQUENCIA = BINT.SEQUENCIA
        INNER JOIN TCBPLA PLA
           ON PLA.CODCTACTB = LAN.CODCTACTB
    WHERE ( (P_ORIGEM = 'F'
           AND BINT.ORIGEM IN ('F', 'B', 'M', 'R', 'J'))
         OR (P_ORIGEM = 'E' AND BINT.ORIGEM IN ('E', 'L')))
        AND BINT.NUNICO = P_NUNICO
        AND (BINT.SEQNOTA = 0 OR BINT.SEQNOTA = P_SEQNOTA)
        AND (BINT.CODEMP = P_CODEMP
             OR (P_ORIGEM = 'E'
                 AND EXISTS
                       (SELECT 1
                          FROM TGFCAB C
                         WHERE C.NUNOTA = P_NUNICO))
             OR (P_ORIGEM = 'F'
                 AND EXISTS
                       (SELECT 1
                          FROM TGFFIN F
                         WHERE F.NUFIN = P_NUNICO)))
        AND INSTR (P_GRUPO_NATUREZA, ',' || PLA.NATUREZAEFD || ',') > 0
     ORDER BY BINT.SEQNOTA DESC, LAN.VLRLANC DESC, PLA.CTACTB DESC; /* ESSA ORDENAÇÃO É MUITO IMPORTANTE, NÃO PODE SER ALTERADA */
        
BEGIN
   IF P_REGISTRO IN ('A170', 'C170', 'C191', 'C195', 'C396', 'C481', 'C485', 'C501', 'C505', 'F100_NOTA', 'F100_FINANCEIRO')
   THEN
      P_GRUPO_NATUREZA := ',1,2,3,4,6,7,8,9,';
   ELSIF P_REGISTRO IN ('C175', 'C181', 'C185', 'C381', 'C385', 'C491', 'C495', 'C810', 'C870')
   THEN
      P_GRUPO_NATUREZA := ',1,2,';
   ELSIF P_REGISTRO IN ('D100', 'D101', 'D105')
   THEN
      P_GRUPO_NATUREZA := ',3,5,6,7,8,9,11,';
   ELSIF P_REGISTRO IN ('D201', 'D205', 'D601', 'D605')
   THEN
      P_GRUPO_NATUREZA := ',3,';
   ELSIF P_REGISTRO IN ('D501', 'D505')
   THEN
      P_GRUPO_NATUREZA := ',6,7,';
   ELSIF P_REGISTRO IN ('F500', 'F510', 'F525', 'F550', 'F560', '1900')
   THEN
      P_GRUPO_NATUREZA := ',1,2,3,';
   ELSIF P_REGISTRO IN ('F100_MULTA', 'F100_JURO', 'F100_DESCONTO')
   THEN
      P_GRUPO_NATUREZA := ',1,2,6,7,12,13,';
   ELSE
      P_GRUPO_NATUREZA := ' ';
   END IF;

   IF P_GRUPO_NATUREZA <> ' ' THEN
      OPEN CUR_DADOS;
      FETCH CUR_DADOS INTO P_CTACTB, P_CODCENCUS;
      CLOSE CUR_DADOS;
   END IF;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:16
Num.Script: 50472-0-1000
Nro. O.S. : 1139223
Nome      : INSERE - THOOBJ - 5047100
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_GET_DADOS_EFD
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210000
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_GET_DADOS_EFD' NOMEOBJ, 50471 NUMSCRIPT, SYSDATE DTALTER, 'FUNCTION' TIPO, '65df6f4aa56ff1ffabbbf700043de80e' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_GET_DADOS_EFD' and THO.hashcode = '65df6f4aa56ff1ffabbbf700043de80e')
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50482-0-1000
Nro. O.S. : 1138079
Nome      : INSERE - THOOBJ - 5047900
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_DLT_TFPPTPR
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210000
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_DLT_TFPPTPR' NOMEOBJ, 50479 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '5224b43782c4179ca451257b0aa26107' HASHCODE, 'Drop Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_DLT_TFPPTPR' and THO.hashcode = '5224b43782c4179ca451257b0aa26107')
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50483-0-0
Nro. O.S. : 1132966
Nome      : Ajusta - TFPFOR CODFORM 7
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Ajusta - TFPFOR CODFORM 7
NomeObjeto: CODFORM
TipoObjeto: COLUMN
NomeTabela: TFPFOR
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
  P_CODFORMULA      TFPFOR.CODFORM%TYPE;
  P_DESCRFORMULA    TFPFOR.DESCRFORM%TYPE;
  P_DESCRFORMNOVO   TFPFOR.DESCRFORM%TYPE;
  P_FORMULA         VARCHAR2(4000);
  P_FORMULANOVO     VARCHAR2(4000);
  P_CODFORMIND      VARCHAR2(4000);
  P_CODFORMINDNOVO  VARCHAR2(4000);
  P_SANKHYA         TFPFOR.SANKHYA%TYPE;
BEGIN
  
  P_CODFORMULA := 7;
  
  BEGIN
    SELECT FORMULA, DESCRFORM, CODFORMIND, SANKHYA
    INTO P_FORMULA, P_DESCRFORMULA, P_CODFORMIND, P_SANKHYA
    FROM TFPFOR
    WHERE CODFORM = P_CODFORMULA;
  EXCEPTION WHEN NO_DATA_FOUND THEN
    P_FORMULA := 'A';
    P_CODFORMIND := NULL;
    P_DESCRFORMULA := NULL;
    P_SANKHYA := 'S'; 
  END;
  
  IF P_SANKHYA = 'N' THEN
    RETURN;
  END IF;
  
  P_DESCRFORMNOVO := 'Salário Família';
  P_FORMULANOVO := 'IF((&Folqui <> 1),IF(((QueFuncionario.SITUACAO = 1) AND (CTOI(PDESPARAM(''1'', ''TFPOCOO, TFPHIS H'', '' O.CODHISTOCOR = H.CODHISTOCOR  AND O.CODEMP = :INT_CODEMPAND O.CODFUNC = :INT_CODFUNC AND O.DTFINALOCOR >= :DAT_DTINI ANDO.DTFINALOCOR <= :DAT_DTFIM AND H.AFASTAMENTO IN (''A'', ''D'') ANDO.DTFINALOCOR IS NOT NULL'',STR(queFuncionario.CODEMP), STR(queFuncionario.CODFUNC), DTOC(&REFERE * 1.0), DTOC((FSOMAMES(&REFERE, 1) - 1)* 1.0))) <> 1)) OR (((QueFuncionario.SITUACAO = 3) OR (QueFuncionario.SITUACAO = 6) OR(QueFuncionario.SITUACAO = 5)) AND ((&DIASTRA + &F5020) > 0)),(FQD(queFuncionario.codemp,queFuncionario.codfunc,''S'',&Refere) * FTF(3,1,(IF(&TIPFOL =''N'',(QueFuncionario.SALBASE + (&E1900 - &E201) + &E105 + (&E102 + &E103 + &E104 +&E107)) - ((&E1+ &E415 + &E416) + ((QueFuncionario.SALBASE / 30) * &F5020)),(QueFuncionario.SALBASE + (&E1900 - &E201) + &E105 + (&E102 + &E103 + &E104 +&E107)) - (&E200 - ((QueFuncionario.SALBASE / 30) *&F5020)))),&Refere,queFuncionario.TIPTAB)),0) / IF(((&TIPFOL = ''N'') AND (MES(queFuncionario.DTADM) = &MESATU) AND (ANO(queFuncionario.DTADM) = &ANOATU))OR (&TIPFOL = ''R''), IF(QueFuncionario.TIPSAL = 5,QueFuncionario.HORASSEM * 5,30), 1) *IF(((&TIPFOL = ''N'') AND (MES(queFuncionario.DTADM) = &MESATU) AND(ANO(queFuncionario.DTADM) = &ANOATU)) OR (&TIPFOL = ''R''),IF(&DIASTRA >0,&DIASTRA,30), 1),0)';
  P_CODFORMINDNOVO := 'FQD(queFuncionario.codemp, queFuncionario.codfunc,''N'', &Refere)';
  
  IF P_FORMULA = 'A' THEN
    INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
      VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
             'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO);
    
    IF P_CODFORMINDNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO);
    END IF;
    
    IF P_DESCRFORMNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO);
    END IF;
    
    INSERT INTO TFPFOR (CODFORM, DESCRFORM, SANKHYA, FORMULA, CODFORMIND)
      VALUES(P_CODFORMULA, P_DESCRFORMNOVO, 'S', P_FORMULANOVO, P_CODFORMINDNOVO);
    
  ELSIF (P_FORMULANOVO <> P_FORMULA OR 
         NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') OR 
         NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z')) 
  THEN
    
    IF P_FORMULANOVO <> P_FORMULA THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO, P_FORMULA);
    END IF;
    
    IF NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO, P_CODFORMIND);
    END IF;
    
    IF NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO, P_DESCRFORMULA);
    END IF;
    
    UPDATE TFPFOR
    SET FORMULA = P_FORMULANOVO
    , DESCRFORM = P_DESCRFORMNOVO
    , CODFORMIND = P_CODFORMINDNOVO
    , FORMULANTERIOR = CASE WHEN FORMULA <> P_FORMULANOVO THEN P_FORMULA ELSE FORMULANTERIOR END
    , DTALTER = SYSDATE
    , CODUSU = 0
    WHERE CODFORM = P_CODFORMULA
    AND SANKHYA = 'S';
    
  END IF;
  
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50496-0-0
Nro. O.S. : 1136048
Nome      : Alterar - STP_IMPLANTA_RASTREAMENTO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Aterar - STP_IMPLANTA_RASTREAMENTO
NomeObjeto: STP_IMPLANTA_RASTREAMENTO
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE STP_IMPLANTA_RASTREAMENTO(P_CODEMP  INT, P_CODPROD INT)
AS
  P_COUNT  NUMBER(10);
  P_TOTAL  FLOAT;
    
    --BUSCA NOTAS DE COMPRA, DEV. COMPRA E A PERNA DE ENTRADA DE TRANSFERENCIAS
    CURSOR CUR_ETAPA1 IS
    SELECT C.NUNOTA, C.TIPMOV, I.CODEMP, NVL(C.DTENTSAI, C.DTNEG) AS DTENTSAI, C.CODTIPOPER, C.DHTIPOPER
       , I.SEQUENCIA, I.QTDNEG, I.CODPROD, I.CODLOCALORIG, I.CONTROLE, I.ATUALESTOQUE
    FROM TGFCAB C
     , TGFTOP T
     , TGFITE I
    WHERE I.CODEMP = P_CODEMP
    AND C.STATUSNOTA = 'L'
    AND T.CODTIPOPER = C.CODTIPOPER
    AND T.DHALTER = C.DHTIPOPER
    AND ((C.TIPMOV = 'C' AND T.ATUALLIVFIS = 'E') OR 
         (C.TIPMOV = 'T' AND T.ATUALLIVFIS = 'A' AND I.ATUALESTOQUE = 1 ) OR
         (C.TIPMOV = 'D' AND T.ATUALLIVFIS = 'E'))
    AND I.NUNOTA  = C.NUNOTA
    AND I.CODPROD = P_CODPROD
    AND I.ATUALESTOQUE <> 0
    AND I.RESERVA <> 'S'
    ORDER BY NVL(C.DTENTSAI, C.DTNEG), C.TIPMOV, I.ATUALESTOQUE;
      
    --BUSCA NOTAS DE VENDA, DEV. VENDA E A PERNA DE SAIDA DE TRANSFERENCIAS
    CURSOR CUR_ETAPA2 IS
    SELECT C.NUNOTA, C.TIPMOV, I.CODEMP, NVL(C.DTENTSAI, C.DTNEG) AS DTENTSAI, C.CODTIPOPER, C.DHTIPOPER
       , I.SEQUENCIA, I.QTDNEG, I.CODPROD, I.CODLOCALORIG, I.CONTROLE, I.ATUALESTOQUE
    FROM TGFCAB C
     , TGFTOP T
     , TGFITE I
    WHERE I.CODEMP = P_CODEMP
    AND C.STATUSNOTA = 'L'
    AND T.CODTIPOPER = C.CODTIPOPER
    AND T.DHALTER = C.DHTIPOPER
    AND ((C.TIPMOV = 'E' AND T.ATUALLIVFIS = 'S') OR
         (C.TIPMOV = 'T' AND T.ATUALLIVFIS = 'A' AND I.ATUALESTOQUE = -1 ) OR
         (C.TIPMOV = 'V' AND T.ATUALLIVFIS = 'S'))
    AND I.NUNOTA  = C.NUNOTA
    AND I.CODPROD = P_CODPROD
    AND I.ATUALESTOQUE <> 0
    AND I.RESERVA <> 'S'
    ORDER BY NVL(C.DTENTSAI, C.DTNEG), C.TIPMOV, I.ATUALESTOQUE;    
BEGIN  
    --VERIFICA TOTAL DAS MOVIMENTAÇÕES
    SELECT 
    SUM(I.QTDNEG*I.ATUALESTOQUE) AS TOTAL
    INTO P_TOTAL
    FROM TGFCAB C
    , TGFTOP T
    , TGFITE I
    WHERE I.CODEMP = P_CODEMP
    AND C.STATUSNOTA = 'L'
    AND T.CODTIPOPER = C.CODTIPOPER
    AND T.DHALTER = C.DHTIPOPER
    AND ((C.TIPMOV = 'D' AND T.ATUALLIVFIS = 'E') OR
        (C.TIPMOV = 'V' AND T.ATUALLIVFIS = 'S') OR
        (C.TIPMOV = 'C' AND T.ATUALLIVFIS = 'E') OR 
        (C.TIPMOV = 'T' AND T.ATUALLIVFIS = 'A') OR
        (C.TIPMOV = 'E' AND T.ATUALLIVFIS = 'S'))       
    AND I.NUNOTA  = C.NUNOTA
    AND I.CODPROD = P_CODPROD
    AND I.ATUALESTOQUE <> 0
        AND I.RESERVA <> 'S';
    
    --SE TOTAL NEGATIVO APRESENTA A INFORMAÇÃO E DADOS DAS MOVIMENTAÇÕES ANALISADAS.
    IF P_TOTAL < 0 THEN
        BEGIN
            RAISE_APPLICATION_ERROR(-20101, 'Produto: ' || P_CODPROD || ' na Empresa: ' || P_CODEMP || ' será negativo, '
                                            || ' analise suas movimentações efetivá-lo.');
        END;
       
    ELSE                                            
        --EXECUTA PRIMEIRA ETAPA PARA NOTAS DE COMPRA, DEV. COMPRA E TRANSFERENCIA
        FOR P_ETAPA1 IN CUR_ETAPA1
        LOOP
        Stp_Rastreamento_Est_Itens(P_ETAPA1.NUNOTA, P_ETAPA1.TIPMOV, P_ETAPA1.CODEMP, P_ETAPA1.DTENTSAI, P_ETAPA1.CODTIPOPER, P_ETAPA1.DHTIPOPER, 
                                  P_ETAPA1.SEQUENCIA, P_ETAPA1.QTDNEG, P_ETAPA1.CODPROD, P_ETAPA1.CODLOCALORIG, P_ETAPA1.CONTROLE, P_ETAPA1.ATUALESTOQUE, 'F');
        END LOOP;
          
        --EXECUTA SEGUNDA ETAPA PARA NOTAS DE VENDA E DEV. VENDA
        FOR P_ETAPA2 IN CUR_ETAPA2
        LOOP
                
            Stp_Rastreamento_Est_Itens(P_ETAPA2.NUNOTA, P_ETAPA2.TIPMOV, P_ETAPA2.CODEMP, P_ETAPA2.DTENTSAI, P_ETAPA2.CODTIPOPER, P_ETAPA2.DHTIPOPER, 
                                      P_ETAPA2.SEQUENCIA, P_ETAPA2.QTDNEG, P_ETAPA2.CODPROD, P_ETAPA2.CODLOCALORIG, P_ETAPA2.CONTROLE, P_ETAPA2.ATUALESTOQUE, 'F');
        END LOOP;
    END IF;          
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:16
Num.Script: 50497-0-1000
Nro. O.S. : 1136048
Nome      : INSERE - THOOBJ - 5049600
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE STP_IMPLANTA_RASTREAMENTO
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210000
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'STP_IMPLANTA_RASTREAMENTO' NOMEOBJ, 50496 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, '09c3d57851fbfa1334db2d39f0882984' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'STP_IMPLANTA_RASTREAMENTO' and THO.hashcode = '09c3d57851fbfa1334db2d39f0882984')
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50504-0-0
Nro. O.S. : 1083030
Nome      : Dropar - CKC_DIASFOLGA_TFPCGH
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - CKC_DIASFOLGA_TFPCGH
NomeObjeto: CKC_DIASFOLGA_TFPCGH
TipoObjeto: CONSTRAINT
NomeTabela: TFPCGH 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPCGH DROP CONSTRAINT CKC_DIASFOLGA_TFPCGH 
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50505-0-0
Nro. O.S. : 1083030
Nome      : Dropar - CKC_DIASTRAB_TFPCGH
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - CKC_DIASTRAB_TFPCGH
NomeObjeto: CKC_DIASTRAB_TFPCGH
TipoObjeto: CONSTRAINT
NomeTabela: TFPCGH 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPCGH DROP CONSTRAINT CKC_DIASTRAB_TFPCGH
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50506-0-0
Nro. O.S. : 1083030
Nome      : Dropar - CKC_DIASEM_TFPHOR
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - CKC_DIASEM_TFPHOR
NomeObjeto: CKC_DIASEM_TFPHOR
TipoObjeto: CONSTRAINT
NomeTabela: TFPHOR
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPHOR DROP CONSTRAINT CKC_DIASEM_TFPHOR
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50546-0-1000
Nro. O.S. : 1103495
Nome      : INSERE - THOOBJ - 5054500
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_INC_UPD_TGFITE_PRODNFE
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210000
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_INC_UPD_TGFITE_PRODNFE' NOMEOBJ, 50545 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '659a0afbc59c6ac914ee652ed3912a5c' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_INC_UPD_TGFITE_PRODNFE' and THO.hashcode = '659a0afbc59c6ac914ee652ed3912a5c')
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50559-0-0
Nro. O.S. : 1103495
Nome      : Cria - TGFPRO INDESCALA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: INDESCALA
TipoObjeto: COLUMN
NomeTabela: TGFPRO
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TGFPRO ADD INDESCALA CHAR(1)';
   EXECUTE IMMEDIATE 'ALTER TABLE TGFPRO ADD  CONSTRAINT CKC_INDESCALA_TGFPRO CHECK (INDESCALA IN (''S'',''N'') OR INDESCALA IS NULL )';
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50560-0-0
Nro. O.S. : 1103495
Nome      : Cria - TGFPRO CNPJFABRICANTE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: CNPJFABRICANTE
TipoObjeto: COLUMN
NomeTabela: TGFPRO
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFPRO ADD CNPJFABRICANTE VARCHAR2(14)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50561-0-0
Nro. O.S. : 1103495
Nome      : Cria - TGFPRO CODBENEFNAUF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: CODBENEFNAUF
TipoObjeto: COLUMN
NomeTabela: TGFPRO
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFPRO ADD CODBENEFNAUF VARCHAR2(10)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50562-0-0
Nro. O.S. : 1103495
Nome      : Cria - TGFPRO CODAGREGACAO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: CODAGREGACAO
TipoObjeto: COLUMN
NomeTabela: TGFPRO
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFPRO ADD CODAGREGACAO VARCHAR2(20)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50563-0-0
Nro. O.S. : 1103495
Nome      : Altera - TRG_INC_UPD_TGFITE_PRODNFE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - TRG_INC_UPD_TGFITE_PRODNFE
NomeObjeto: TRG_INC_UPD_TGFITE_PRODNFE
TipoObjeto: TRIGGER
NomeTabela: TGFITE
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_INC_UPD_TGFITE_PRODNFE
   BEFORE INSERT OR UPDATE
   ON TGFITE
   REFERENCING NEW AS NEW OLD AS OLD
   FOR EACH ROW
DECLARE
   P_EMPNFE          TGFEMP.NFE%TYPE;
   P_TOPNFE          TGFTOP.NFE%TYPE;
   P_PRODUTONFE      TGFPRO.PRODUTONFE%TYPE;
   P_REFERENCIA      TGFPRO.REFERENCIA%TYPE;
   P_TIPGTINNFE      TGFPRO.TIPGTINNFE%TYPE;
   P_TIPCONTEST      TGFPRO.TIPCONTEST%TYPE;
   P_INDESCALA       TGFPRO.INDESCALA%TYPE;
   P_CNPJFABRICANTE  TGFPRO.CNPJFABRICANTE%TYPE;
   P_CODBENEFNAUF    TGFPRO.CODBENEFNAUF%TYPE;
   P_CODAGREGACAO    TGFPRO.CODAGREGACAO%TYPE;
   P_CODBARRA        TGFEST.CODBARRA%TYPE;
   P_TIPGTINNFEVOA   TGFVOA.TIPGTINNFE%TYPE;
   P_CODBARRAVOA     TGFVOA.CODBARRA%TYPE;
   P_COUNT           NUMBER( 10 );
   ERRMSG            VARCHAR2( 255 );
   ERROR EXCEPTION;
   P_VALIDAR         BOOLEAN;
   P_ORIGPROD        TGFITE.ORIGPROD%TYPE;
   P_BASENUMERACAO   CHAR( 1 );
   P_USACODVOLPARC   CHAR( 1 );
   P_CODTIPOPER      NUMBER( 10 );
   P_SERIENOTA       VARCHAR2( 3 );
   P_CODVOLPARC      VARCHAR2( 6 );
   P_CODMODDOC       NUMBER( 10 );
   P_CONTAUNTRIB     NUMBER( 5 );
BEGIN
   IF STP_GET_ATUALIZANDO THEN
      RETURN;
   END IF;

   /*
   Sincronização de dados
   */
   P_VALIDAR := FPODEVALIDAR( 'TGFITE' );

   IF NOT ( P_VALIDAR ) THEN
      RETURN;
   END IF;

    IF UPDATING AND NVL(:OLD.STATUSNOTA, 'P') = 'L' THEN
        SELECT COUNT(1) INTO P_COUNT
        FROM TGFCAB
        WHERE NUNOTA = :OLD.NUNOTA
          AND (NVL(STATUSNFE, ' ') IN ('A','T') OR NVL(STATUSNFSE, ' ') = 'A');

        IF P_COUNT > 0 THEN
            RETURN;
        END IF;
    END IF;

   /*
   OS: 574625
   */

   -- OS 927107
   :NEW.ORIGPROD :=
      SNK_GET_ORIGEM_PRODUTO_ITE( :NEW.CODPROD
                                , :NEW.CODEMP
                                , :NEW.CODLOCALORIG
                                , :NEW.CONTROLE );

   /* QDO SUBSTITUINDO PRODUTO, NÃO VALIDAR ESTOQUE */
   SELECT COUNT( 1 )
   INTO   P_COUNT
   FROM   TSIPAR
   WHERE  CHAVE = 'SBPRODUTO';

   IF ( P_COUNT <> 0 ) THEN
      RETURN;
   END IF;

   SELECT PRODUTONFE, REFERENCIA, TIPGTINNFE, TIPCONTEST
   INTO   P_PRODUTONFE, P_REFERENCIA, P_TIPGTINNFE, P_TIPCONTEST
   FROM   TGFPRO
   WHERE  CODPROD = :NEW.CODPROD;

   IF ( P_PRODUTONFE = 1 ) AND TRIM( P_REFERENCIA ) IS NOT NULL THEN
      :NEW.PRODUTONFE := P_REFERENCIA;
   ELSE
      :NEW.PRODUTONFE := :NEW.CODPROD;
   END IF;


   -- ATUALIZA CAMPO CODVOLPARC, UTILIZANDO A TABELA TGFUNP
   IF VARIAVEIS_PKG.V_USACODVOLPARC = 'S' THEN
      BEGIN
         SELECT CODVOLPARC
         INTO   P_CODVOLPARC
         FROM   TGFUNP P INNER JOIN TGFCAB C
                   ON ( P.CODPARC = C.CODPARC
                   AND C.NUNOTA = :NEW.NUNOTA
                   AND :NEW.CODVOL = P.CODVOL );
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            P_CODVOLPARC := NULL;
      END;

      IF NVL( :NEW.CODVOLPARC, ' ' ) <> NVL( P_CODVOLPARC, ' ' ) THEN
         :NEW.CODVOLPARC := P_CODVOLPARC;
      END IF;
   END IF;

   IF ( P_TIPGTINNFE = 0 ) THEN
      :NEW.GTINNFE := NULL;
   ELSIF ( P_TIPGTINNFE = 1 ) THEN
      :NEW.GTINNFE := :NEW.CODPROD;
   ELSIF ( P_TIPGTINNFE = 3 ) THEN
      BEGIN
         SELECT CODBARRA
         INTO   P_CODBARRA
         FROM   TGFEST
         WHERE  CODEMP = :NEW.CODEMP
         AND    CODPROD = :NEW.CODPROD
         AND    CODLOCAL = :NEW.CODLOCALORIG
         AND    CONTROLE = :NEW.CONTROLE
         AND    CODPARC = 0;

         :NEW.GTINNFE := SUBSTR( P_CODBARRA, 1, 14 );
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            :NEW.GTINNFE := NULL;
      END;
   ELSIF ( P_TIPGTINNFE = 4 ) THEN
      BEGIN
         IF ( P_TIPCONTEST = 'I' OR P_TIPCONTEST = 'S') THEN --CONTROLE LIVRE OU POR LISTA
             SELECT CODBARRA
             INTO   P_CODBARRAVOA
             FROM   TGFVOA
             WHERE  CODPROD = :NEW.CODPROD
             AND    CODVOL = :NEW.CODVOL
             AND    CONTROLE = :NEW.CONTROLE;
         ELSE
             SELECT CODBARRA
             INTO   P_CODBARRAVOA
             FROM   TGFVOA
             WHERE  CODPROD = :NEW.CODPROD
             AND    CODVOL = :NEW.CODVOL;
         END IF;

         IF ( P_CODBARRAVOA IS NULL )
            OR( P_CODBARRAVOA = '' ) THEN
            :NEW.GTINNFE := SUBSTR( P_REFERENCIA, 1, 14 );
         ELSE
            :NEW.GTINNFE := SUBSTR( P_CODBARRAVOA, 1, 14 );
         END IF;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            :NEW.GTINNFE := SUBSTR( P_REFERENCIA, 1, 14 );
      END;
   ELSE
      :NEW.GTINNFE := SUBSTR( P_REFERENCIA, 1, 14 );
   END IF;

   BEGIN
      SELECT MIN(TIPGTINNFE), MIN(CODBARRA), COUNT(UNIDTRIB)
      INTO   P_TIPGTINNFEVOA, P_CODBARRAVOA, P_CONTAUNTRIB
      FROM   TGFVOA
      WHERE  CODPROD = :NEW.CODPROD
      AND    UNIDTRIB = 'S';

      IF P_CONTAUNTRIB > 1 THEN
        RAISE_APPLICATION_ERROR(-20101, 'Há mais que uma unidade alternativa marcada como unidade de tributação para o produto ' || TO_CHAR(:NEW.CODPROD));  
      END IF;

      IF (P_CONTAUNTRIB = 0) THEN
         :NEW.GTINTRIBNFE := :NEW.GTINNFE;
      ELSIF ( P_TIPGTINNFEVOA = 0 ) THEN
         :NEW.GTINTRIBNFE := NULL;
      ELSIF ( P_TIPGTINNFEVOA = 1 ) THEN
         :NEW.GTINTRIBNFE := :NEW.CODPROD;
      ELSIF ( P_TIPGTINNFEVOA = 2 ) THEN
         :NEW.GTINTRIBNFE := SUBSTR( P_REFERENCIA, 1, 14 );
      ELSE
         :NEW.GTINTRIBNFE := SUBSTR( P_CODBARRAVOA, 1, 14 );
      END IF;
   EXCEPTION
      WHEN NO_DATA_FOUND THEN
         :NEW.GTINTRIBNFE := :NEW.GTINNFE;
   END;
   
    
    IF( INSERTING AND 
        (:NEW.INDESCALA  IS NULL OR :NEW.CNPJFABRICANTE   IS NULL OR
         :NEW.CODBENEFNAUF     IS NULL OR :NEW.CODAGREGACAO     IS NULL)
       ) OR
       (:OLD.CODPROD <> :NEW.CODPROD AND 
         (NVL(:NEW.INDESCALA,' ')      = NVL(:OLD.INDESCALA, ' ') OR 
         NVL(:NEW.CNPJFABRICANTE, ' ') = NVL(:OLD.CNPJFABRICANTE, ' ') OR
          NVL(:NEW.CODBENEFNAUF, ' ')  = NVL(:OLD.CODBENEFNAUF, ' ')  OR 
          NVL(:NEW.CODAGREGACAO, ' ')  = NVL(:OLD.CODAGREGACAO, ' '))
       ) THEN
       SELECT INDESCALA, CNPJFABRICANTE, CODBENEFNAUF, CODAGREGACAO
       INTO   P_INDESCALA, P_CNPJFABRICANTE, P_CODBENEFNAUF, P_CODAGREGACAO
       FROM   TGFPRO
       WHERE  CODPROD = :NEW.CODPROD;
       
       IF (:NEW.INDESCALA  = :OLD.INDESCALA OR :NEW.INDESCALA IS NULL) THEN
           :NEW.INDESCALA := P_INDESCALA;
       END IF;
       
       IF (:NEW.CNPJFABRICANTE  = :OLD.CNPJFABRICANTE  OR :NEW.CNPJFABRICANTE IS NULL) THEN
           :NEW.CNPJFABRICANTE := P_CNPJFABRICANTE;
       END IF;   
         
       IF (:NEW.CODBENEFNAUF  = :OLD.CODBENEFNAUF  OR :NEW.CODBENEFNAUF IS NULL) THEN
           :NEW.CODBENEFNAUF := P_CODBENEFNAUF;
       END IF;   
       
       IF (:NEW.CODAGREGACAO  = :OLD.CODAGREGACAO OR :NEW.CODAGREGACAO IS NULL) THEN
           :NEW.CODAGREGACAO := P_CODAGREGACAO;
       END IF;

    END IF;
    
   RETURN;
EXCEPTION
   WHEN ERROR THEN
      /*
      Sincronização de dados não faz validações
      */
      IF ( P_VALIDAR ) THEN
         RAISE_APPLICATION_ERROR( -20101, ERRMSG );
      END IF;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50564-0-1000
Nro. O.S. : 1103495
Nome      : INSERE - THOOBJ - 5056300
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_INC_UPD_TGFITE_PRODNFE
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210000
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_INC_UPD_TGFITE_PRODNFE' NOMEOBJ, 50563 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '659a0afbc59c6ac914ee652ed3912a5c' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_INC_UPD_TGFITE_PRODNFE' and THO.hashcode = '659a0afbc59c6ac914ee652ed3912a5c')
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50565-0-0
Nro. O.S. : 1141283
Nome      : Alterar - TRG_UPD_TGFCAB
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - TRG_UPD_TGFCAB
NomeObjeto: TRG_UPD_TGFCAB
TipoObjeto: TRIGGER
NomeTabela: TFGCAB
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_UPD_TGFCAB
BEFORE UPDATE ON TGFCAB
FOR EACH ROW
DECLARE
    P_TIPRES                    CHAR(1);
    P_UPDSTATUS                 CHAR(1);
    P_ATUALV                    CHAR(1);
    P_UTILIZALOCAL              CHAR(1);
    P_PROVISAO                  CHAR(1);
    P_ATUALEST                  VARCHAR2(1);
    P_ATUALEST_D                VARCHAR2(1);
    P_ATUALFIN                  NUMBER(5);
    P_ATUALFIN_D                NUMBER(5);
    P_TIPATUALFIN               CHAR(1);
    P_TIPATUALFIN_D             CHAR(1);
    P_RESERVADO                 CHAR(1);
    P_GNREST                    NUMBER(10);
    P_TIPTITGNRESTRB            NUMBER(10);
    ERRMSG                      VARCHAR2(255);
    P_SOLICITANTE               CHAR(30);
    P_COUNT                     NUMBER(10) := 0;
    P_COUNT1                    NUMBER(10) := 0;
    P_ATIVO                     CHAR(1);
    P_TOTDESDOB                 FLOAT;
    P_MOTORISTA                 CHAR(1);
    P_ATUALFINTERC              CHAR(1); 
    P_ATUALESTTERC              CHAR(1);
    P_TIPTIT_COMPENSACAO        NUMBER(10) := 0;
    ERROR                       EXCEPTION;
    P_VALIDAR                   BOOLEAN;
    P_CHAVE                     VARCHAR2(15);
    P_SINAL                     NUMBER(5);
    P_VLRTROCA                  FLOAT;
    P_ULTCOD                    NUMBER(10);
    P_ALTITEMPARCFAT            CHAR(1);
    P_INDPRESNFCE               CHAR(1);
    P_EMPNFE                    TGFEMP.NFE%TYPE;
    P_TOPNFE                    TGFTOP.NFE%TYPE;
    P_TOPNFE_OLD                TGFTOP.NFE%TYPE;
    P_BASENUMERACAO             CHAR(1);
    P_CODTOPPREVENDA            NUMBER(10);
    P_CODVOLPARC                VARCHAR2(6);
    P_USACODVOLPARC             VARCHAR2(1);
    P_PERMFINMENORVLRNOTA       VARCHAR2(1);
    P_CODPARC_CLASSIFICMS       TGFPAR.CODPARC%TYPE;
BEGIN

  IF STP_GET_ATUALIZANDO THEN
    RETURN;
  END IF;
  /* 
   Sincronização de dados
  */
  P_VALIDAR := Fpodevalidar('TGFCAB');
  IF UPDATING('NUNOTA') THEN
     ERRMSG := 'A coluna NUNOTA não pode ser alterada.';
     RAISE ERROR;
  END IF;
  
  IF :NEW.TIPMOV = 'V' AND :NEW.SERIENOTA = 'CF' AND NVL(:OLD.CODMAQ,0) <> :NEW.CODMAQ AND NVL(:OLD.CODMAQ,0) <> 0 THEN
    ERRMSG := 'Código da máquina (ECF) já está preenchido, não pode ser alterado devido ao SPED.';
    RAISE ERROR;
  END IF;

  IF :NEW.TIPMOV = 'V' AND :NEW.SERIENOTA = 'CF' AND NVL(:OLD.NROREDZ,0) <> :NEW.NROREDZ AND NVL(:OLD.NROREDZ,0) <> 0 THEN
    ERRMSG := 'Nro da redução Z (ECF) já está preenchido, não pode ser alterado devido ao SPED.';
    RAISE ERROR;
  END IF;  

  IF :NEW.TIPMOV = 'V' AND :NEW.SERIENOTA = 'CF' AND NVL(:OLD.NUMNOTA,0) <> :NEW.NUMNOTA AND NVL(:OLD.NUMNOTA,0) <> 0 AND :NEW.STATUSNOTA = 'L' THEN
    ERRMSG := 'Cupom já foi numerado, não pode ser alterado devido ao SPED.';
    RAISE ERROR;
  END IF;
 
  P_GNREST := Get_Tsipar_Inteiro('TIPTITGNREST');
       
  P_TIPTITGNRESTRB := Get_Tsipar_Inteiro('TIPTITGNRESTRB');   
  
  --VALIDA SE O TIPO DE CONTROLE DE PRODUTO E O MESMO PARA AS EMPRESAS QUE ESTÃO SENDO ALTERADAS OS 770482
  IF UPDATING('CODEMP') THEN
     SELECT COUNT(1) INTO P_COUNT
     FROM TGFITE ITE
     WHERE (SELECT NVL(PEM.TIPCONTEST, PRO.TIPCONTEST) AS TIPCONTEST
            FROM TGFPRO PRO
            LEFT JOIN TGFPEM PEM ON (PEM.CODPROD = PRO.CODPROD AND PEM.CODEMP = :NEW.CODEMP)    
            WHERE PRO.CODPROD = ITE.CODPROD) <> (SELECT NVL(PEM.TIPCONTEST, PRO.TIPCONTEST) AS TIPCONTEST
                                                 FROM TGFPRO PRO
                                                 LEFT JOIN TGFPEM PEM ON (PEM.CODPROD = PRO.CODPROD AND PEM.CODEMP = :OLD.CODEMP)    
                                                 WHERE PRO.CODPROD = ITE.CODPROD)
     AND ITE.NUNOTA = :OLD.NUNOTA;
        
     IF(P_COUNT > 0) THEN
       ERRMSG := 'Não é possível alterar a empresa '||:OLD.CODEMP||' para '||:NEW.CODEMP||' pois elas possuem diferenças no controle adicional de estoque. Remova os itens da nota.';
       RAISE ERROR;
     END IF;
    END IF;    
  
  -- ATUALIZA CAMPO CODVOLPARC NA TGFITE, UTILIZANDO A TABELA TGFUNP, SOMENTE QUANDO É ALTERADO O CODIGO DO PARCEIRO 
   IF UPDATING('CODPARC') THEN
      SELECT LOGICO
      INTO P_USACODVOLPARC
      FROM TSIPAR 
      WHERE CHAVE = 'USACODVOLPARC';
      
      IF P_USACODVOLPARC = 'S' THEN
      
          INSERT INTO TSIPAR (CHAVE, DESCRICAO, CODUSU, TIPO, MODULO )
          VALUES             ('SBPRODUTO','p/Nao criticar na Ite ', 0, 'T', 'E');

          FOR I IN (SELECT SEQUENCIA, CODVOL FROM TGFITE WHERE NUNOTA = :NEW.NUNOTA)
          LOOP
            BEGIN
              SELECT P.CODVOLPARC INTO P_CODVOLPARC
              FROM TGFUNP P
              WHERE P.CODPARC = :NEW.CODPARC
                AND P.CODVOL = I.CODVOL;
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
                P_CODVOLPARC := NULL;
            END;
            
            UPDATE TGFITE SET CODVOLPARC = P_CODVOLPARC
            WHERE NUNOTA = :NEW.NUNOTA
              AND SEQUENCIA = I.SEQUENCIA
              AND NVL(CODVOLPARC, ' ') <> NVL(P_CODVOLPARC, ' ');
          END LOOP;

          DELETE FROM TSIPAR WHERE CHAVE= 'SBPRODUTO';

      END IF; 
   END IF;

  IF (UPDATING('STATUSNOTA') AND (:NEW.STATUSNOTA <> 'L')) AND
     (NOT ((:OLD.CHAVENFE IS NOT NULL) AND (:NEW.CHAVENFE IS NULL) AND (:OLD.NULOTENFE IS NOT NULL) AND (:NEW.NULOTENFE IS NULL))) THEN
     ERRMSG := 'A única atualização permitida para o Status da Nota é a passagem deste para L.';
     RAISE ERROR;
  END IF;

  IF :OLD.STATUSNOTA = 'L' AND ((:OLD.NUNOTA <> :NEW.NUNOTA) OR (:OLD.CODEMP <> :NEW.CODEMP) OR (:OLD.CODEMPNEGOC <> :NEW.CODEMPNEGOC)
      OR (:OLD.NUMNOTA <> :NEW.NUMNOTA) OR (:OLD.SERIENOTA <> :NEW.SERIENOTA) OR (:OLD.DTNEG <> :NEW.DTNEG) OR (:OLD.DTFATUR <> :NEW.DTFATUR)
       OR (:OLD.DTVAL <> :NEW.DTVAL) OR (:OLD.DTENTSAI <> :NEW.DTENTSAI) OR (:OLD.DTMOV <> :NEW.DTMOV) OR (:OLD.CODPARC <> :NEW.CODPARC) 
       OR (:OLD.BASEICMS <> :NEW.BASEICMS) OR (:OLD.VLRICMS <> :NEW.VLRICMS) OR (:OLD.BASEIPI <> :NEW.BASEIPI) OR (:OLD.VLRIPI <> :NEW.VLRIPI) 
       OR (:OLD.VLRNOTA <> :NEW.VLRNOTA) OR (:OLD.TIPMOV <> :NEW.TIPMOV) OR (:OLD.VLRDESCTOT <> :NEW.VLRDESCTOT) OR (:OLD.TIPFRETE <> :NEW.TIPFRETE)
       OR (:OLD.BASEICMSFRETE <> :NEW.BASEICMSFRETE) OR (:OLD.ICMSFRETE <> :NEW.ICMSFRETE) OR (:OLD.VLRSEG <> :NEW.VLRSEG) OR (:OLD.VLRICMSSEG <> :NEW.VLRICMSSEG)
       OR (:OLD.VLREMB <> :NEW.VLREMB) OR (:OLD.TIPIPIEMB <> :NEW.TIPIPIEMB) OR (:OLD.VLRICMSEMB <> :NEW.VLRICMSEMB) OR (:OLD.BASEISS <> :NEW.BASEISS) 
       OR (:OLD.ISSRETIDO <> :NEW.ISSRETIDO) OR (:OLD.VLRISS <> :NEW.VLRISS) OR (:OLD.VLRINSS <> :NEW.VLRINSS) OR (:OLD.CODTIPOPER <> :NEW.CODTIPOPER)
       OR (:OLD.CODOBSPADRAO <> :NEW.CODOBSPADRAO) OR (:OLD.IPIEMB <> :NEW.IPIEMB) OR (:OLD.VLRFRETE <> :NEW.VLRFRETE AND :NEW.TIPFRETE <> 'N') OR (:OLD.VLRDESTAQUE <> :NEW.VLRDESTAQUE)
       OR (:OLD.VLRJURO <> :NEW.VLRJURO) OR (:OLD.VLRDESCSERV <> :NEW.VLRDESCSERV) OR (:OLD.VLRSUBST <> :NEW.VLRSUBST) OR (:OLD.BASESUBSTIT <> :NEW.BASESUBSTIT)
       OR (:OLD.BASESUBSTSEMRED <> :NEW.BASESUBSTSEMRED) OR (:OLD.CODMODDOCNOTA <> :NEW.CODMODDOCNOTA) OR (:OLD.VLRIRF <> :NEW.VLRIRF)
       OR (:OLD.CODPARCDEST <> :NEW.CODPARCDEST) OR (:OLD.CODPARCREMETENTE <> :NEW.CODPARCREMETENTE) OR (:OLD.IRFRETIDO <> :NEW.IRFRETIDO)
       OR (:OLD.CHAVENFE <> :NEW.CHAVENFE) OR (:OLD.DTENTSAIINFO <> :NEW.DTENTSAIINFO) ) THEN

     SELECT COUNT(1) INTO P_COUNT FROM  TCBINT C WHERE  C.NUNICO = :OLD.NUNOTA AND C.ORIGEM = 'E';
     IF P_COUNT <> 0 THEN
        ERRMSG := 'Nota já foi contabilizada, não pode ser alterada.';
        RAISE ERROR;
     END IF;

    SELECT COUNT(1) INTO P_COUNT
    FROM TGFLIV
    WHERE NUNOTA = :OLD.NUNOTA
    AND ORIGEM IN ('A', 'D', 'E');
        
    IF P_COUNT <> 0 THEN
        ERRMSG := 'Nota já foi gerada no Livro Fiscal de ICMS/IPI, não pode ser alterada. Nota de Nro Único: '|| TO_CHAR(:OLD.NUNOTA) ||'';
        RAISE ERROR;
    END IF;
        
    SELECT COUNT(1) INTO P_COUNT
    FROM TGFLIS
    WHERE NUNOTA = :OLD.NUNOTA
    AND ORIGEM = 'E';

    IF P_COUNT <> 0 THEN
        ERRMSG := 'Nota já foi gerada no Livro Fiscal de ISS, não pode ser alterada. Nota de Nro Único: '|| TO_CHAR(:OLD.NUNOTA) ||'';
        RAISE ERROR;
    END IF;


  ELSIF (:OLD.STATUSNOTA = 'L' AND (NVL (:NEW.CODCENCUS, 0) <> NVL (:OLD.CODCENCUS, 0))) THEN

     SELECT COUNT(1) 
     INTO P_COUNT 
     FROM  TCBINT C
     , TCBLAN LAN 
     WHERE  C.NUNICO = :OLD.NUNOTA 
     AND C.ORIGEM = 'E'
     AND C.CODEMP = LAN.CODEMP
     AND C.REFERENCIA = LAN.REFERENCIA
     AND C.NUMLOTE = LAN.NUMLOTE
     AND C.NUMLANC = LAN.NUMLANC
     AND C.TIPLANC = LAN.TIPLANC
     AND C.SEQUENCIA = LAN.SEQUENCIA
     AND LAN.CODCENCUS <> 0;

     IF P_COUNT > 0 THEN
        ERRMSG := 'Nota já foi contabilizada, C.R. não pode ser alterado.';
        RAISE ERROR;
     END IF;

  END IF;

  IF UPDATING('CODNAT') THEN
     SELECT COUNT(1) INTO P_COUNT
     FROM TGFNAT N
     WHERE N.CODNAT = :NEW.CODNAT AND N.ATIVA= 'S' AND N.ANALITICA = 'S';
     IF (P_COUNT = 0) THEN
        Stp_Popula_Msg('TGFNAT');
     END IF;
  END IF;
  
  IF UPDATING('DTNEG') THEN     
    SELECT COUNT(1) INTO P_COUNT
    FROM TCSBLO BLO
            , TCIIBE IBE
            , TGFTOP TP
    WHERE IBE.NUNOTA   = :OLD.NUNOTA
    AND BLO.CODPROD     = IBE.CODPROD
    AND BLO.CODBEM    = IBE.CODBEM
    AND BLO.NUMCONTRATO = :OLD.NUMCONTRATO
    AND BLO.DTINICIO    = :OLD.DTNEG
    AND TP.CODTIPOPER   = :OLD.CODTIPOPER
    AND TP.DHALTER      = :OLD.DHTIPOPER
    AND TP.ATUALBEM     = 'T';
    IF P_COUNT > 0 THEN    
          ERRMSG := 'Data de Negociação não pode ser alterada com bens locados.';
          RAISE ERROR;
    END IF;
  END IF;

  IF UPDATING('DTENTSAI') THEN     
    SELECT COUNT(1) INTO P_COUNT
    FROM TCSBLO BLO
            , TCIIBE IBE
            , TGFTOP TP
    WHERE IBE.NUNOTA   = :OLD.NUNOTA
    AND BLO.CODPROD     = IBE.CODPROD
    AND BLO.CODBEM    = IBE.CODBEM
    AND BLO.NUMCONTRATO = :OLD.NUMCONTRATO
    AND BLO.DTFIM      = :OLD.DTENTSAI
    AND TP.CODTIPOPER   = :OLD.CODTIPOPER
    AND TP.DHALTER      = :OLD.DHTIPOPER
    AND TP.ATUALBEM     = 'D';
  IF P_COUNT > 0 THEN    
      ERRMSG := 'Data de Ent.\Sai. não pode ser alterada com bens locados.';
      RAISE ERROR;
  END IF;
  END IF;

  IF UPDATING('CODVEICULO') AND :NEW.CODVEICULO IS NOT NULL THEN
     Stp_Valida_Veiculo(:NEW.CODVEICULO);
  END IF;

  IF UPDATING('CODPARCDEST') AND (:NEW.CODPARCDEST IS NOT NULL) THEN
     SELECT COUNT(1)  INTO P_COUNT
     FROM  TGFPAR P
     WHERE P.CODPARC = :NEW.CODPARCDEST
       AND P.ATIVO = 'S';
     IF (P_COUNT = 0) THEN
        ERRMSG := 'Parceiro ' || TO_CHAR(:NEW.CODPARCDEST) || 'destino não está ativo. ';
        RAISE ERROR;
     END IF;
  END IF;

  IF UPDATING('NUMCONTRATO') AND (:NEW.NUMCONTRATO IS NOT NULL) THEN
     SELECT COUNT(1)  INTO P_COUNT
     FROM  TCSCON C
     WHERE C.NUMCONTRATO = :NEW.NUMCONTRATO
       AND C.ATIVO = 'S';
     IF (P_COUNT = 0) THEN
        ERRMSG := 'Contrato ' || TO_CHAR(:NEW.NUMCONTRATO) || ' não está ativo. ';
        RAISE ERROR;
     END IF;
  END IF;

  IF UPDATING('CODPROJ') AND (:NEW.CODPROJ IS NOT NULL) THEN
     SELECT COUNT(1)  INTO P_COUNT
     FROM  TCSPRJ P
     WHERE P.CODPROJ = :NEW.CODPROJ AND P.ATIVO = 'S'
       AND P.ANALITICO = 'S';
     IF (P_COUNT = 0) THEN
        ERRMSG := Erros_Pkg.ERRO_PROJETO_NAOATIVO;
        RAISE ERROR;
     END IF;
  END IF;

  IF UPDATING('CODEMP') THEN
     SELECT COUNT(1) INTO P_COUNT
     FROM TGFEMP E
     WHERE E.CODEMP = :NEW.CODEMP
     AND E.ATIVO = 'S';
     IF (P_COUNT = 0) THEN
        ERRMSG := 'Empresa ' || TO_CHAR(:NEW.CODEMP) || ' não está ativa. ';
        RAISE ERROR;
     END IF;
  END IF;

  IF UPDATING('CODCENCUS') AND (:NEW.CODCENCUS IS NOT NULL) AND (:NEW.CODCENCUS <> 0) THEN
     SELECT COUNT(1) INTO P_COUNT
     FROM TSICUS C
     WHERE C.CODCENCUS = :NEW.CODCENCUS AND C.ATIVO = 'S'
       AND C.ANALITICO = 'S';
     IF P_COUNT = 0 THEN
        Stp_Popula_Msg('TSICUS');
     END IF;
  END IF;

  IF UPDATING('CODEMPNEGOC') AND (:NEW.CODEMPNEGOC IS NOT NULL) AND (:NEW.CODEMP <> :NEW.CODEMPNEGOC) THEN
     SELECT COUNT(1) INTO P_COUNT
     FROM TGFEMP E
     WHERE E.CODEMP = :NEW.CODEMPNEGOC
     AND E.ATIVO = 'S';
     IF (P_COUNT = 0) THEN
        ERRMSG := 'Empresa de negociação ' || TO_CHAR(:NEW.CODEMPNEGOC) || ' não está ativa. ';
        RAISE ERROR;
     END IF;
  END IF;

  IF UPDATING('CODPARC') THEN
     SELECT COUNT(1)  INTO P_COUNT
     FROM  TGFPAR P
     WHERE P.CODPARC = :NEW.CODPARC
       AND P.ATIVO = 'S';
     IF (P_COUNT = 0) THEN
        ERRMSG := Erros_Pkg.ERRO_PARCEIRO_NAOATIVO;
        RAISE ERROR;
     END IF;
  END IF;

  IF UPDATING('CODPARCTRANSP') AND (:NEW.CODPARCTRANSP IS NOT NULL) THEN
     SELECT COUNT(1)  INTO P_COUNT
     FROM  TGFPAR P
     WHERE P.CODPARC = :NEW.CODPARCTRANSP
     AND P.ATIVO = 'S';
     IF (P_COUNT = 0) THEN
        ERRMSG := 'Transportadora ' || TO_CHAR(:NEW.CODPARCTRANSP) || ' não está ativa. ';
        RAISE ERROR;
     END IF;
  END IF;

  IF UPDATING('CODVEND') AND (:NEW.CODVEND IS NOT NULL) THEN
     SELECT COUNT(1) INTO P_COUNT
     FROM  TGFVEN V
     WHERE V.CODVEND = :NEW.CODVEND
       AND V.ATIVO = 'S';
     IF (P_COUNT = 0) THEN
        ERRMSG := Erros_Pkg.ERRO_VENDEDOR_NAOATIVO;
        RAISE ERROR;
     END IF;
  END IF;

          
  IF UPDATING('CODTIPOPER') OR UPDATING('DHTIPOPER') OR UPDATING('TIPMOV') THEN
    IF (:NEW.CODTIPOPER = 0) AND (:NEW.TIPMOV <> 'Z') THEN
       ERRMSG := 'Campo Top obrigatório.';
       RAISE ERROR;
    END IF;
    
    SELECT COUNT(1) INTO P_COUNT
    FROM  TGFTOP T
    WHERE :NEW.CODTIPOPER = T.CODTIPOPER
      AND :NEW.DHTIPOPER = T.DHALTER
      AND T.ATIVO = 'S';
    IF (P_COUNT = 0) THEN
        ERRMSG := Erros_Pkg.ERRO_TIPOPER_NAOATIVO;
        RAISE ERROR;
    END IF;

    IF (:NEW.TIPMOV <> 'Z') THEN

      SELECT COUNT(1) INTO P_COUNT
      FROM TGFTOP T
      WHERE T.CODTIPOPER = :NEW.CODTIPOPER
        AND T.DHALTER = :NEW.DHTIPOPER
        AND :NEW.TIPMOV <> T.TIPMOV;
      IF ( P_COUNT <> 0) THEN
         ERRMSG := 'Esta TOP ' || TO_CHAR(:NEW.CODTIPOPER) || ' não pode ser lançada nesta opção.';
         RAISE ERROR;
      END IF;
    END IF;

    IF (:NEW.APROVADO <> 'X') THEN
      SELECT T.ATUALFIN,  T.TIPATUALFIN, T.ATUALEST INTO
             P_ATUALFIN_D, P_TIPATUALFIN_D, P_ATUALEST_D
        FROM TGFTOP T
       WHERE T.CODTIPOPER = :OLD.CODTIPOPER
         AND T.DHALTER    = :OLD.DHTIPOPER;
      IF ((P_ATUALFIN_D <> P_ATUALFIN) OR (P_TIPATUALFIN_D <> P_TIPATUALFIN)) THEN
        SELECT COUNT(1) INTO P_COUNT
        FROM TGFFIN F
        WHERE F.NUNOTA = :NEW.NUNOTA
          AND F.VLRBAIXA > 0
          AND F.DTNEG <> F.DHBAIXA;
        IF (P_COUNT <> 0) THEN
            ERRMSG := 'Não foi possível atualizar a nota, pois a atualização da TOP ' || TO_CHAR(:NEW.CODTIPOPER) || ' é inválida.';
            RAISE ERROR;
        END IF;
      END IF;
    END IF;

  BEGIN  
  SELECT T.ATUALFIN,T.TIPATUALFIN, T.ATUALEST, T.ATUALFINTERC, T.ATUALESTTERC, T.ALTITEMPARCFAT, T.INDPRESNFCE, PERMFINMENORVLRNOTA
    INTO P_ATUALFIN,P_TIPATUALFIN, P_ATUALEST, P_ATUALFINTERC, P_ATUALESTTERC, P_ALTITEMPARCFAT, P_INDPRESNFCE, P_PERMFINMENORVLRNOTA
  FROM  TGFTOP T
  WHERE T.CODTIPOPER = :NEW.CODTIPOPER
    AND T.DHALTER    = :NEW.DHTIPOPER;
  EXCEPTION WHEN NO_DATA_FOUND THEN
    ERRMSG := 'Não foi encontrada a TOP ' || TO_CHAR(:NEW.CODTIPOPER) || ' com data de alteração igual a ' || TO_CHAR(:NEW.DHTIPOPER) || ' .';
    RAISE ERROR;
  END;        

  END IF;
  
       

  IF :NEW.INDPRESNFCE IS NULL THEN 
   :NEW.INDPRESNFCE := P_INDPRESNFCE;
  END IF;  
  
  IF (UPDATING('CODCONTATO') OR UPDATING('CODPARC')) AND (:NEW.CODCONTATO IS NOT NULL) THEN
    SELECT COUNT(1) INTO P_COUNT
    FROM  TGFCTT C
    WHERE :NEW.CODPARC = C.CODPARC
      AND :NEW.CODCONTATO = C.CODCONTATO
      AND C.ATIVO = 'S';
    IF (P_COUNT = 0) THEN
        ERRMSG := 'Contato ' || TO_CHAR(:NEW.CODCONTATO) || ' não está ativo. ';
        RAISE ERROR;
    END IF;
  END IF;
  
  IF (UPDATING('CODCONTATOENTREGA') OR UPDATING('CODPARC')) AND (:NEW.CODCONTATOENTREGA IS NOT NULL) THEN
    SELECT COUNT(1) INTO P_COUNT
    FROM  TGFCTT C
    WHERE :NEW.CODPARC = C.CODPARC
      AND :NEW.CODCONTATOENTREGA = C.CODCONTATO
      AND C.ATIVO = 'S';
    IF (P_COUNT = 0) THEN
        ERRMSG := 'Contato ' || TO_CHAR(:NEW.CODCONTATOENTREGA) || ' não está ativo. ';
        RAISE ERROR;
    END IF;
  END IF;
  IF (UPDATING('CODTIPVENDA') OR UPDATING('DHTIPVENDA')) THEN
    SELECT COUNT(1) INTO P_COUNT
    FROM  TGFTPV T
    WHERE :NEW.CODTIPVENDA = T.CODTIPVENDA
      AND :NEW.DHTIPVENDA = T.DHALTER
      AND T.ATIVO = 'S';
    IF (P_COUNT = 0) THEN
        ERRMSG := 'Verifique se o Tipo de Venda '  || TO_CHAR(:NEW.CODTIPVENDA, '9999')|| ' está ativo ou se sua data de alteração é menor ou igual a data de lançamento da nota. ';
        RAISE ERROR;
       --Stp_Popula_Msg('TGFTPV');
    END IF;

    /* Vendas tem tipo de negociaÝÒo */
    IF (:NEW.TIPMOV = 'P') OR (:NEW.TIPMOV = 'V') OR (:NEW.TIPMOV = 'D') THEN
      IF (:NEW.CODTIPVENDA = 0) THEN
         ERRMSG := 'Campo Tipo de negociação obrigatório.';
         RAISE ERROR;
      END IF;
    END IF;
  END IF;

  /* testa se o ano digitada e valido */
  IF UPDATING('DTMOV') THEN
    SELECT NVL(P.INTEIRO,0) INTO P_COUNT
    FROM TSIPAR P
    WHERE P.CHAVE = 'LIMSUPANO';
    IF  (P_COUNT <> 0)
        AND (((:NEW.DTMOV IS NOT NULL)           
        AND                                                   (TO_NUMBER(TO_CHAR(:NEW.DTMOV, 'YYYY')) >  TO_NUMBER(TO_CHAR(SYSDATE, 'YYYY')) + P_COUNT ) )
         OR (TO_NUMBER(TO_CHAR(:NEW.DTNEG, 'YYYY')) > (TO_NUMBER(TO_CHAR(SYSDATE, 'YYYY')) +  P_COUNT) )
        ) THEN




      ERRMSG := 'Ano superior ao limite permitido, veja o parâmetro de Limite Superior para Ano .';
      RAISE ERROR;
    END IF;
                                                                                                                                                                                                                                                                                                                                                                                                                
    BEGIN
      SELECT NVL(P.INTEIRO  ,0) INTO P_COUNT
      FROM TSIPAR P
      WHERE P.CHAVE = 'LIMINFANO';
    EXCEPTION 
    WHEN NO_DATA_FOUND THEN
      P_COUNT := 0;
    WHEN OTHERS THEN
      ERRMSG := SUBSTR(SQLERRM,1,200);
      RAISE ERROR;    
    END;           
    IF ( P_COUNT <> 0) AND ( ( ( :NEW.DTMOV <> NULL ) /*-------*/
        AND ( TO_NUMBER(TO_CHAR(:NEW.DTMOV, 'YYYY')) < (TO_NUMBER(TO_CHAR(SYSDATE, 'YYYY' )) - P_COUNT) ) )
         OR   ( TO_NUMBER(TO_CHAR(:NEW.DTNEG, 'YYYY')) < (TO_NUMBER(TO_CHAR(SYSDATE, 'YYYY')) - P_COUNT) ) ) THEN
          ERRMSG := 'Ano inferior ao limite permitido, veja o parâmetro de Limite Inferior para Ano.';
          RAISE ERROR;
    END IF; 
  END IF;
  IF (UPDATING('CODPARC') OR UPDATING('CODTIPVENDA') OR UPDATING('DHTIPVENDA') OR UPDATING('STATUSNOTA')) AND
     ((:NEW.TIPMOV = 'P') OR (:NEW.TIPMOV = 'V') OR (:NEW.TIPMOV = 'L')) THEN
     SELECT COUNT(1)   INTO P_COUNT
     FROM TGFPAR P, TGFTPV T
     WHERE :NEW.CODPARC = P.CODPARC
       AND :NEW.CODTIPVENDA = T.CODTIPVENDA
       AND :NEW.DHTIPVENDA = T.DHALTER
       AND T.SUBTIPOVENDA <> '1'
       AND T.SUBTIPOVENDA <> '6'
       AND T.SUBTIPOVENDA <> '7'
       AND T.SUBTIPOVENDA <> '8'
       AND (T.VALPRAZOCLIENTE = 'S') AND (P.PRAZOPAG = 0);
     IF (P_COUNT <> 0 ) THEN
        ERRMSG := 'Prazo bloqueado.';
        RAISE ERROR;
     END IF;

     SELECT COUNT(1) INTO P_COUNT
     FROM TGFPAR P, TGFTPV T
     WHERE :NEW.CODPARC = P.CODPARC
       AND :NEW.CODTIPVENDA = T.CODTIPVENDA
       AND :NEW.DHTIPVENDA = T.DHALTER
       AND T.SUBTIPOVENDA <> '1'
       AND T.SUBTIPOVENDA <> '6'
       AND T.SUBTIPOVENDA <> '7'
       AND T.SUBTIPOVENDA <> '8'
       AND P.BLOQUEAR = 'S';
     IF (P_COUNT <> 0 ) THEN
        ERRMSG := 'Venda a prazo bloqueada.';
        RAISE ERROR;
     END IF;
     /* valida se o parceiro da nota faz parte do grupo de alteraÝÒo da Top */
     SELECT COUNT(1)  INTO P_COUNT
     FROM TGFTPV T, TGFPAR P
     WHERE :NEW.CODPARC = P.CODPARC
       AND :NEW.CODTIPVENDA = T.CODTIPVENDA
       AND :NEW.DHTIPVENDA = T.DHALTER
       AND T.GRUPOAUTOR > ''
       AND NOT (P.GRUPOAUTOR LIKE '%' || T.GRUPOAUTOR || '%');
     IF (P_COUNT <> 0 ) THEN
        ERRMSG := 'Tipo de negociação ' || TO_CHAR(:NEW.CODTIPVENDA) || ' não autorizado para este cliente! Ver Grupo autorização.';
        RAISE ERROR;
     END IF;
  END IF;

  IF (UPDATING('CODPARC') OR UPDATING('TIPMOV')) THEN
    SELECT COUNT(1)  INTO P_COUNT
      FROM TGFPAR P
     WHERE P.CODPARC = :NEW.CODPARC
       AND ( ( P.CODPARC = 0 AND :NEW.TIPMOV IN ('O', 'C', 'E', 'P', 'V', 'D', 'S', 'M', '1', '2', '3', '8', 'N') )
            OR ( :NEW.TIPMOV IN ('O', 'C', 'E')  AND  P.FORNECEDOR <> 'S')
            OR ( :NEW.TIPMOV IN ('P', 'V', 'D', '1', '2', '3', '8', 'N') AND P.CLIENTE <> 'S' ));
    IF (P_COUNT <> 0 ) THEN
       ERRMSG := 'O parceiro deve ser diferente de zero' ||
                 ' e para compra, pedido de compra e devolução de compra, o parceiro deve ser um fornecedor' ||
                 ' e para pedido de venda, venda e devolução de venda o parceiro deve ser cliente.';
       RAISE ERROR;
    END IF;
  END IF;

  IF (:NEW.CODEMP = :NEW.CODEMPNEGOC) AND (:NEW.TIPMOV = 'T') THEN
    SELECT P.LOGICO INTO P_UTILIZALOCAL
    FROM TSIPAR P
    WHERE P.CHAVE = 'UTILIZALOCAL';
    IF (P_UTILIZALOCAL = 'N') THEN
        ERRMSG := 'Empresa de destino deve ser diferente da empresa de origem.';
        RAISE ERROR;
    END IF;
  END IF;
  /* nÒo posso atualizar a DTNEG, CODTIPVENDA, DHTIPVENDA E VLRNOTA se jî foi baixado algum registro na TGFFin */
  IF (:NEW.APROVADO <> 'X') 
     AND NOT(:NEW.TIPMOV IN ('P', 'O') AND P_TIPATUALFIN = 'P' AND P_ALTITEMPARCFAT = 'S') 
     AND( (:NEW.DTNEG <> :OLD.DTNEG)OR  (:NEW.CODTIPVENDA<>:OLD.CODTIPVENDA) OR
          (:NEW.DHTIPVENDA <> :OLD.DHTIPVENDA) OR (:NEW.VLRNOTA<>:OLD.VLRNOTA)) THEN
    BEGIN
       SELECT INTEIRO INTO P_TIPTIT_COMPENSACAO FROM TSIPAR WHERE CHAVE = 'TIPTITCREDCLI';
    EXCEPTION WHEN NO_DATA_FOUND THEN
      P_TIPTIT_COMPENSACAO := 0;
    WHEN OTHERS THEN
      RAISE;     
    END;
                                                 
    SELECT COUNT(1) INTO P_COUNT
    FROM TGFFIN F
    WHERE F.NUNOTA = :NEW.NUNOTA
    AND F.VLRBAIXA > 0
    AND F.NUFIN > 0
    AND ( P_TIPTIT_COMPENSACAO = 0 OR F.CODTIPTIT <> P_TIPTIT_COMPENSACAO )
    AND (DESDOBDUPL IS NULL OR DESDOBDUPL NOT IN ('M', 'V', 'K', 'F'));
    IF (P_COUNT <> 0 ) THEN
       ERRMSG := 'Não se pode atualizar a data de negociação, o código do tipo de negociação ou o valor da nota de uma nota que já foi baixada no financeiro.';
       RAISE ERROR;
    END IF;
  END IF;
  
  IF (:OLD.STATUSNOTA <> :NEW.STATUSNOTA) THEN
    /* Stp_Valida_Dentroestado(:NEW.NUNOTA);  */
    /* ======  Se a provisao do financeiro ' de um s¾ tipo e correta ====== */
    IF (P_ATUALFIN <> 0) THEN
        IF P_TIPATUALFIN = 'P' THEN
          P_PROVISAO := 'S';
        ELSE
          P_PROVISAO := 'N';
        END IF;
        SELECT COUNT(1) INTO P_COUNT
        FROM TGFFIN
        WHERE NUNOTA = :NEW.NUNOTA
          AND PROVISAO <> P_PROVISAO;
        IF (P_COUNT <> 0) THEN
           ERRMSG := 'O financeiro está provisionando e não provisionando. Só um dos dois pode acontecer.';
           RAISE ERROR;
        END IF;
        
       /* PARA ATUALIZAR O CRÉDITO DE CARTÃO FIDELIDADE  */
       SELECT COUNT(1) INTO P_COUNT
       FROM TGFCFM
       WHERE NUNOTA = :NEW.NUNOTA
         AND SINAL = 1;
       IF P_COUNT > 0 THEN
         UPDATE TGFCFM SET VALOR = :NEW.VLRNOTA
         WHERE NUNOTA = :NEW.NUNOTA
         AND SINAL = 1;
       END IF;
    END IF;

/* Verifica se o financeiro é da geração do conhecimento de transporte     
    SELECT COUNT(1) INTO P_COUNT  FROM TGFFIN
    WHERE NUNOTA = :NEW.NUNOTA
     AND DESDOBDUPL = 'T';

    IF (P_COUNT = 0) THEN  (VALIDAÇÃO COMENTADA OS 470978) */    
     /* ======  Verificando valores de desdobramento do Financeiro  ====== */     

     SELECT SUM(NVL(VLRDESDOB,0) * RECDESP) INTO P_TOTDESDOB
     FROM TGFFIN
     WHERE NUNOTA = :NEW.NUNOTA
     AND (DESDOBDUPL IS NULL OR DESDOBDUPL NOT IN ('M', 'V', 'K', 'F', 'T'))
     AND ((CODTIPTIT <> P_GNREST) OR(P_GNREST = 0))
     AND ((CODTIPTIT <> P_TIPTITGNRESTRB) OR(P_TIPTITGNRESTRB = 0));
         
      
      IF (P_ATUALFIN = 0) THEN
        IF (P_TOTDESDOB IS NOT NULL) THEN
           ERRMSG := 'Esta TOP não pode atualizar o financeiro.';
           RAISE ERROR;
        END IF;
      ELSIF ROUND((P_TOTDESDOB * P_ATUALFIN),2) < ROUND(:NEW.VLRNOTA,2) THEN
        IF(P_ATUALFINTERC = 'N') AND (P_ATUALESTTERC <>'N') THEN    
                        Tgfcab_Upd_Pkg.V_CONTADOR := Tgfcab_Upd_Pkg.V_CONTADOR + 1;
            Tgfcab_Upd_Pkg.V_NUNOTA(Tgfcab_Upd_Pkg.V_CONTADOR) := :NEW.NUNOTA;
            Tgfcab_Upd_Pkg.V_TOTDESDOB(Tgfcab_Upd_Pkg.V_CONTADOR) := ROUND((P_TOTDESDOB * P_ATUALFIN),2);
            Tgfcab_Upd_Pkg.V_VLRNOTA(Tgfcab_Upd_Pkg.V_CONTADOR) := :NEW.VLRNOTA;                        
        ELSE 
          IF P_PERMFINMENORVLRNOTA <> 'S' THEN
          ERRMSG := 'A somatória dos valores do financeiro ('||TO_CHAR((P_TOTDESDOB * P_ATUALFIN), '999999.99') ||
                    ') não corresponde ao total da nota (' || TO_CHAR(:NEW.VLRNOTA, '9999999.99') || ').';
          RAISE ERROR;
        END IF;
      END IF;
      END IF;
    /*END IF;*/
  END IF;        
        
  IF UPDATING('CODMOTORISTA') AND (:NEW.CODMOTORISTA <> 0) THEN
     SELECT MOTORISTA, ATIVO INTO P_MOTORISTA, P_ATIVO
      FROM TGFPAR 
     WHERE CODPARC = :NEW.CODMOTORISTA;
    IF (P_MOTORISTA <> 'S') THEN 
        ERRMSG := 'Parceiro ' || TO_CHAR(:NEW.CODMOTORISTA) || ' não está marcado como Motorista.';
        RAISE ERROR;
    END IF;
         
    IF (P_ATIVO <> 'S') THEN
        ERRMSG := 'Motorista ' || TO_CHAR(:NEW.CODMOTORISTA) || 'não está ativo.';
        RAISE ERROR;
    END IF;
  END IF;  
 
  IF (:NEW.STATUSNOTA = 'L') AND (:NEW.TIPMOV IN ('P','O','C','D','V')) THEN -- OS 447451
    SELECT COUNT(1), MIN(CHAVE)
    INTO P_COUNT, P_CHAVE
    FROM TSIPAR
    WHERE CHAVE IN ('TOPSACUMTROCA','TOPSUSATROCA')
    AND TEXTO IS NOT NULL
    AND  (',' || trim(REPLACE(TEXTO,' ','')) || ',') LIKE '%,' || :NEW.CODTIPOPER || ',%';
  IF P_COUNT <> 0 THEN
      IF P_COUNT > 1 THEN
        ERRMSG := 'Uma TOP não pode participar do param.TOPSACUMTROCA e do param.TOPSUSATROCA simultâneamente.';
        RAISE ERROR;
      ELSIF P_COUNT = 1 THEN
        --VERIFICANDO SE A NOTA ESTÁ LIGADA.
            SELECT COUNT (1)
              INTO P_COUNT
              FROM TGFVAR
             WHERE :NEW.NUNOTA IN (NUNOTA, NUNOTAORIG) AND NUNOTA <> NUNOTAORIG AND SEQUENCIA = 0 AND SEQUENCIAORIG = 0;
      
            IF ( P_COUNT > 0 ) 
          AND (    (:OLD.STATUSNOTA = 'L')
            AND (:NEW.TIPMOV NOT IN ('D', 'P')) 
            AND NOT (UPDATING('NUMNOTA') OR
             UPDATING ('PENDENTE') OR  
                     UPDATING('SERIENOTA') OR
                     UPDATING('TPEMISNFE') OR
                     UPDATING('DTALTER') OR
                     UPDATING('CODUSU') OR
                     UPDATING('NUMALEATORIO') OR
                     UPDATING('CHAVENFE') OR
                     UPDATING('DHPROTOC') OR
                     UPDATING('NUMPROTOC') OR
                     UPDATING('STATUSNFE'))
           ) THEN
         ERRMSG := 'Não é permitido alterar uma nota de troca já confirmada.';
          RAISE ERROR;
        END IF;
  
        IF P_CHAVE = 'TOPSACUMTROCA' THEN
          IF :NEW.TIPMOV NOT IN ('O', 'C', 'D','V') THEN
              ERRMSG := 'Param.TOPSACUMTROCA deve ter TOP de: Compra, Pedido de Compra ou Devolução de Venda.';
              RAISE ERROR;
          END IF;
          P_SINAL := 1;
        ELSE 
          P_SINAL := -1;
        END IF;
  
        IF P_CHAVE = 'TOPSUSATROCA' THEN
          P_VLRTROCA := :NEW.VLRNOTA;
        ELSE
          --VERIFICANDO SE TODOS OS ITENS POSSUEM O VLRTROCA                
          SELECT SUM(CASE WHEN VLRTROCA IS NULL THEN 1 ELSE 0 END), SUM(VLRTROCA) 
          INTO P_COUNT, P_VLRTROCA
          FROM TGFITE 
          WHERE NUNOTA = :NEW.NUNOTA
          AND SEQUENCIA > 0;
          IF P_COUNT > 0 THEN
            ERRMSG := 'Não é permitido confirmar, pois a TOP é de troca (parâmetro "TOPSACUMTROCA"). O preço base dos produtos deve ser atualizado através da rotina Atualizar Preço de Produtos para Acumular Saldo de Troca.';
            RAISE ERROR;
          END IF;
        
        IF (:OLD.STATUSNOTA <> 'L') THEN            
          SELECT COUNT(1) INTO P_ULTCOD
          FROM TGFNUM
          WHERE ARQUIVO = 'TGFMST';        
          
          IF P_ULTCOD = 0 THEN
            P_ULTCOD := 1; 
            INSERT INTO TGFNUM(ARQUIVO
            , CODEMP
            , ULTCOD
            , ULTNOTATALAO)VALUES('TGFMST'
            , :NEW.CODEMP
            , 1
            , 999999999);
          ELSE 
            SELECT MAX(NVL(ULTCOD, 0)) + 1 INTO P_ULTCOD
            FROM TGFNUM 
            WHERE ARQUIVO = 'TGFMST';  
           
            UPDATE TGFNUM SET ULTCOD = P_ULTCOD
            WHERE ARQUIVO = 'TGFMST';
          END IF;      
        
          INSERT INTO TGFMST(NUMST      
            , NUNOTA
            , CODVEND
            , CODPARC
            , VALOR
            , OBSERVACAO
            , SINAL
            , CODUSU)
          VALUES(P_ULTCOD
            , :NEW.NUNOTA
            , :NEW.CODVEND
            , :NEW.CODPARC
            , P_VLRTROCA
            , 'Inclusão efetuada na confirmação da nota.'
            , P_SINAL
            , 0);
        END IF; 
      END IF;
  END IF;  
  END IF; 
   END IF;
  
  IF (:NEW.CODEMP <> :OLD.CODEMP OR :NEW.CODEMPNEGOC <> :OLD.CODEMPNEGOC) THEN
    INSERT INTO TGFCAB_UPT ( NUNOTA,      CODEMPNOV,   CODEMPANT , CODEMPNEGOCNOV ,  CODEMPNEGOCANT)
                    VALUES (:NEW.NUNOTA, :NEW.CODEMP, :OLD.CODEMP,:NEW.CODEMPNEGOC, :OLD.CODEMPNEGOC);
  END IF;

  -- ALTERACAO PRODNFE OS 673279
  P_CODTOPPREVENDA := GET_TSIPAR_INTEIRO('CODTOPPREVENDA');
    
  SELECT EMP.NFE, TPO.NFE, TPO.BASENUMERACAO, TPO_OLD.NFE
    INTO P_EMPNFE, P_TOPNFE, P_BASENUMERACAO, P_TOPNFE_OLD
  FROM TGFEMP EMP
     , TGFTOP TPO
     , TGFTOP TPO_OLD
  WHERE EMP.CODEMP = :NEW.CODEMP
    AND TPO.CODTIPOPER = :NEW.CODTIPOPER
    AND TPO.DHALTER = :NEW.DHTIPOPER
    AND TPO_OLD.CODTIPOPER = :OLD.CODTIPOPER
    AND TPO_OLD.DHALTER = :OLD.DHTIPOPER;
     
  IF (((:NEW.CODTIPOPER <> :OLD.CODTIPOPER) OR (:NEW.DHTIPOPER <> :OLD.DHTIPOPER))
      AND NVL(P_TOPNFE, 'M') NOT IN ('M', 'T') 
      AND P_TOPNFE_OLD IN ('M', 'T')) THEN

    INSERT INTO TGFCAB_UPT (NUNOTA, PRODUTONFE) VALUES (:NEW.NUNOTA, 'S');

  END IF;

/*
  **MARCELO
  ATENCAO NAO PODE SER MODIFICADO O CODIGO DA EMPRESA E NEM O CODIGO DO
  PARCEIRO NO UPDATE DA TGFFIN , POR CAUSA DOS VALORES LANCADOS
  EM OUTROS E FRETE, TAMBEM POR CAUSA DO TIPO DE NEGOCIACAO QUE ESTES
  CAMPOS SAO LIVRES.
*/
  IF (:NEW.NUMNOTA <> :OLD.NUMNOTA OR
      :NEW.DTENTSAI <> :OLD.DTENTSAI OR
      :NEW.DTNEG <> :OLD.DTNEG OR
      :NEW.CODTIPOPER <> :OLD.CODTIPOPER OR
      :NEW.DHTIPOPER <> :OLD.DHTIPOPER) THEN
    SELECT COUNT(1) INTO P_COUNT
  FROM TGFFIN
  WHERE NUNOTA = :NEW.NUNOTA
      AND (DESDOBDUPL IS NULL OR DESDOBDUPL NOT IN ('M', 'V', 'K', 'F'));
  IF P_COUNT > 0 THEN
      UPDATE TGFFIN SET
       NUMNOTA      = :NEW.NUMNOTA,
       DTENTSAI     = :NEW.DTENTSAI,
       DTNEG        = :NEW.DTNEG,
       CODTIPOPER   = :NEW.CODTIPOPER,
       DHTIPOPER    = :NEW.DHTIPOPER
      WHERE NUNOTA = :NEW.NUNOTA
        AND (DESDOBDUPL IS NULL OR DESDOBDUPL NOT IN ('M', 'V', 'K', 'F'));
    END IF;
  END IF;
  
  IF (:NEW.SERIENOTA <> :OLD.SERIENOTA OR
      :NEW.CODVEND <> :OLD.CODVEND OR
      :NEW.CODMOEDA <> :OLD.CODMOEDA OR
      :NEW.CODVEICULO <> :OLD.CODVEICULO OR
    :NEW.CODUSU<> :OLD.CODUSU) THEN
  SELECT COUNT(1) INTO P_COUNT
  FROM TGFFIN
  WHERE NUNOTA = :NEW.NUNOTA
      AND (DESDOBDUPL IS NULL OR DESDOBDUPL NOT IN ('M', 'V', 'K', 'F'));
  IF P_COUNT > 0 THEN
    BEGIN
      Tgffin_Pkg.V_VALIDA_FINANCEIRO := FALSE;
        UPDATE TGFFIN SET
         SERIENOTA    = :NEW.SERIENOTA,
         CODVEND      = :NEW.CODVEND,
         CODMOEDA     = :NEW.CODMOEDA,
         CODVEICULO = :NEW.CODVEICULO,
       CODUSU = :NEW.CODUSU
        WHERE NUNOTA = :NEW.NUNOTA
          AND (DESDOBDUPL IS NULL OR DESDOBDUPL NOT IN ('M', 'V', 'K', 'F'));
    Tgffin_Pkg.V_VALIDA_FINANCEIRO := TRUE;
    EXCEPTION WHEN OTHERS THEN
      Tgffin_Pkg.V_VALIDA_FINANCEIRO := TRUE;
    RAISE;
    END;
    END IF;
  END IF;  

  IF (:NEW.TIPMOV = 'F') OR (:NEW.DTENTSAI IS NULL OR :NEW.DTENTSAI < :NEW.DTNEG) THEN
     :NEW.DTENTSAI := :NEW.DTNEG;
  END IF;

  IF :NEW.VLRNOTA <> :OLD.VLRNOTA AND :NEW.APROVADO = 'S' THEN
    :NEW.APROVADO := 'N';
  END IF;
  --ERRMSG := 'NVL(:NEW.VLRFRETE, 0): '||NVL(:NEW.VLRFRETE, 0)||' NVL(:OLD.VLRFRETE, 0): '||NVL(:OLD.VLRFRETE, 0)||' RATEXTNOTAFRINC:'||GET_TSIPAR_LOGICO('RATFRETEEXTNOTA')|| ':NEW.TIPFRETE: '||:NEW.TIPFRETE;
  
  
  IF (GET_TSIPAR_LOGICO('RATEXTNOTAFRINC') = 'S' AND :NEW.TIPFRETE = 'S' AND NVL(:NEW.VLRFRETE, 0) <> NVL(:OLD.VLRFRETE, 0)) THEN
    :NEW.VLRFRETETOTAL := NVL(:NEW.VLRFRETETOTAL, 0) + NVL(:NEW.VLRFRETE, 0) - NVL(:OLD.VLRFRETE, 0);    
  END IF;
  
  IF NVL(:NEW.CODPARCDEST, 0) <> 0 AND NVL(:NEW.CODPARCREMETENTE, 0) <> 0 AND NVL(:NEW.CODCONTATOENTREGA, 0) <> 0 AND
    :NEW.TIPMOV IN ('V', 'C') AND GET_TSIPAR_LOGICO('USAPARREMDESCPA') = 'S' THEN
    ERRMSG := 'Contato de entrega não pode ser em venda ordem (Parceiro remetente e destinatário preenchidos).';
    RAISE ERROR;
  END IF;
  
  IF :NEW.STATUSNOTA = 'L' THEN 
     
     IF (:OLD.STATUSNOTA <> :NEW.STATUSNOTA OR 
         :OLD.CODEMP <> :NEW.CODEMP OR
         :OLD.CODPARC <> :NEW.CODPARC OR
         NVL(:OLD.CODCONTATOENTREGA,0) <> NVL(:NEW.CODCONTATOENTREGA,0)) THEN
        SNK_ORIGEM_DESTINO_ENTREGA(0,
                                    :NEW.CODEMP,
                                    :NEW.CODEMPNEGOC,                                     
                                    :NEW.CODPARC,
                                    :NEW.CODPARCDEST,
                                    :NEW.CODPARCREMETENTE,
                                    :NEW.CODCONTATOENTREGA,
                                    :NEW.TIPMOV,
                                    :NEW.CODCIDORIGEM,
                                    :NEW.CODCIDDESTINO,
                                    :NEW.CODCIDENTREGA,
                                    :NEW.CODUFORIGEM,
                                    :NEW.CODUFDESTINO,
                                    :NEW.CODUFENTREGA);
     END IF;
     
     IF :OLD.STATUSNOTA <> :NEW.STATUSNOTA OR :OLD.CODTIPOPER <> :NEW.CODTIPOPER OR :OLD.DHTIPOPER <> :NEW.DHTIPOPER THEN
        IF (NVL(:NEW.CODPARCDEST, 0) <> 0 AND 
            (:NEW.TIPMOV = 'T' OR
             (:NEW.TIPMOV = 'V' AND NVL(:NEW.CODPARCREMETENTE, 0) <> 0) OR
             (:NEW.TIPMOV = 'C' AND NVL(:NEW.CODPARCREMETENTE, 0) <> 0 AND GET_TSIPAR_LOGICO('USAPARREMDESCPA') = 'S'))) THEN
            P_CODPARC_CLASSIFICMS := :NEW.CODPARCDEST;
        ELSIF NVL(:NEW.CODPARC, 0) <> 0 THEN
            P_CODPARC_CLASSIFICMS := :NEW.CODPARC;
        ELSE
            P_CODPARC_CLASSIFICMS := 0;
            :NEW.CLASSIFICMS := 'R';
        END IF;
        
        IF P_CODPARC_CLASSIFICMS <> 0 THEN   
            :NEW.CLASSIFICMS := SNK_GET_CLASSIFICMS(0, :NEW.CODEMP, P_CODPARC_CLASSIFICMS, NULL, NULL, :NEW.CODTIPOPER, :NEW.DHTIPOPER);

            IF :NEW.CLASSIFICMS = 'T' THEN
                  RAISE_APPLICATION_ERROR(-20101, 'Classificação de ICMS do parceiro inválida para ser usada com esta TOP.');
            END IF;
        END IF;  
     END IF;    
  END IF;
    
  RETURN;  
EXCEPTION
  WHEN ERROR THEN
    ERRMSG := ERRMSG || 'Nota de Nro Único: '|| TO_CHAR(:NEW.NUNOTA);
    /* 
    Sincronização de dados não faz validações
    */
    IF (P_VALIDAR) THEN 
      RAISE_APPLICATION_ERROR(-20101, ERRMSG);
    END IF; 
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50575-0-0
Nro. O.S. : 1141105
Nome      : Ajusta - TFPFOR CODFORM 225
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Ajusta - TFPFOR CODFORM 225
NomeObjeto: CODFORM
TipoObjeto: COLUMN
NomeTabela: TFPFOR
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
  P_CODFORMULA      TFPFOR.CODFORM%TYPE;
  P_DESCRFORMULA    TFPFOR.DESCRFORM%TYPE;
  P_DESCRFORMNOVO   TFPFOR.DESCRFORM%TYPE;
  P_FORMULA         VARCHAR2(4000);
  P_FORMULANOVO     VARCHAR2(4000);
  P_CODFORMIND      VARCHAR2(4000);
  P_CODFORMINDNOVO  VARCHAR2(4000);
  P_SANKHYA         TFPFOR.SANKHYA%TYPE;
BEGIN
  
  P_CODFORMULA := 225;
  
  BEGIN
    SELECT FORMULA, DESCRFORM, CODFORMIND, SANKHYA
    INTO P_FORMULA, P_DESCRFORMULA, P_CODFORMIND, P_SANKHYA
    FROM TFPFOR
    WHERE CODFORM = P_CODFORMULA;
  EXCEPTION WHEN NO_DATA_FOUND THEN
    P_FORMULA := 'A';
    P_CODFORMIND := NULL;
    P_DESCRFORMULA := NULL;
    P_SANKHYA := 'S'; 
  END;
  
  IF P_SANKHYA = 'N' THEN
    RETURN;
  END IF;
  
  P_DESCRFORMNOVO := 'FERIAS PROP INDENIZADAS API';
  P_FORMULANOVO := 'IF((QuelTFPafaR.DIRFERMENANO=''S'') AND (&TIPOAVISO = 2) And (&CAUAFA = 60) AND(QueFuncionario.VINCULO <> 2) ,(((QueFuncionario.SALBASE+&VLRINCORPORA)/12)*&MESPROPAPFER) * IF(QuelTFPafaF.CODGOVERNO = ''I5'', 0.5, 1), 0)';
  P_CODFORMINDNOVO := 'IF(QuelTFPafaF.CODGOVERNO = ''I5'', &MESPROPAPFER/2, &MESPROPAPFER)';
  
  IF P_FORMULA = 'A' THEN
    INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
      VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
             'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO);
    
    IF P_CODFORMINDNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO);
    END IF;
    
    IF P_DESCRFORMNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO);
    END IF;
    
    INSERT INTO TFPFOR (CODFORM, DESCRFORM, SANKHYA, FORMULA, CODFORMIND)
      VALUES(P_CODFORMULA, P_DESCRFORMNOVO, 'S', P_FORMULANOVO, P_CODFORMINDNOVO);
    
  ELSIF (P_FORMULANOVO <> P_FORMULA OR 
         NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') OR 
         NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z')) 
  THEN
    
    IF P_FORMULANOVO <> P_FORMULA THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO, P_FORMULA);
    END IF;
    
    IF NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO, P_CODFORMIND);
    END IF;
    
    IF NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO, P_DESCRFORMULA);
    END IF;
    
    UPDATE TFPFOR
    SET FORMULA = P_FORMULANOVO
    , DESCRFORM = P_DESCRFORMNOVO
    , CODFORMIND = P_CODFORMINDNOVO
    , FORMULANTERIOR = CASE WHEN FORMULA <> P_FORMULANOVO THEN P_FORMULA ELSE FORMULANTERIOR END
    , DTALTER = SYSDATE
    , CODUSU = 0
    WHERE CODFORM = P_CODFORMULA
    AND SANKHYA = 'S';
    
  END IF;
  
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50578-0-0
Nro. O.S. : 1127027
Nome      : Insere - FPEXCECAOREGFIS
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Inserir o parametro
NomeObjeto: FPEXCECAOREGFIS
TipoObjeto: PARAMETRO
NomeTabela: TSIPAR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO TSIPAR ( CHAVE, DESCRICAO, CODUSU, MODULO, CLASSE, ABA, TIPO,  LOGICO)  VALUES ( 'FPEXCECAOREGFIS', 'Exceção para Registro Fiscal?', 0,'F', 'Diversas', 'Geral',  'L', 'N') 
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50581-0-0
Nro. O.S. : 1134681
Nome      : Criar - VIEW_OUTROS_ESTOQUES_INV 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VIEW_OUTROS_ESTOQUES_INV 
NomeObjeto: VIEW_OUTROS_ESTOQUES_INV 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VIEW_OUTROS_ESTOQUES_INV (ESTOQUE, CODPROD, CODEMP, CONTROLE )
    AS  SELECT   
      0 AS ESTOQUEVOLPAD,
      0 AS CODPROD,
      0 AS CODEMP,
      '' CONTROLE
    FROM DUAL
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50602-0-0
Nro. O.S. : 1139070
Nome      : Ajusta - TFPFOR CODFORM 990
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Ajusta - TFPFOR CODFORM 990
NomeObjeto: CODFORM
TipoObjeto: COLUMN
NomeTabela: TFPFOR
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
  P_CODFORMULA      TFPFOR.CODFORM%TYPE;
  P_DESCRFORMULA    TFPFOR.DESCRFORM%TYPE;
  P_DESCRFORMNOVO   TFPFOR.DESCRFORM%TYPE;
  P_FORMULA         VARCHAR2(4000);
  P_FORMULANOVO     VARCHAR2(4000);
  P_CODFORMIND      VARCHAR2(4000);
  P_CODFORMINDNOVO  VARCHAR2(4000);
  P_SANKHYA         TFPFOR.SANKHYA%TYPE;
BEGIN
  
  P_CODFORMULA := 990;
  
  BEGIN
    SELECT FORMULA, DESCRFORM, CODFORMIND, SANKHYA
    INTO P_FORMULA, P_DESCRFORMULA, P_CODFORMIND, P_SANKHYA
    FROM TFPFOR
    WHERE CODFORM = P_CODFORMULA;
  EXCEPTION WHEN NO_DATA_FOUND THEN
    P_FORMULA := 'A';
    P_CODFORMIND := NULL;
    P_DESCRFORMULA := NULL;
    P_SANKHYA := 'S'; 
  END;
  
  IF P_SANKHYA = 'N' THEN
    RETURN;
  END IF;
  
  P_DESCRFORMNOVO := 'MULTA FGTS';
  P_FORMULANOVO := 'TRUNCFOL(IF((QuelTFPafaF.DIRMULTAFGTS=''S'') And ((&CAUAFA = 60) OR (&CAUAFA =65) OR (QuelTFPafaF.CODGOVERNO = ''I5'')), (((IF((&TIPFOL=''R''),(&FGTSSALDO +(TRUNCFOL(((&E1826 * queRegFiscal.PERPAGTOFGTS)/100),2) + TRUNCFOL(((&E1827 *queRegFiscal.PERPAGTOFGTS)/100),2))), TRUNCFOL(((&E1826 *queRegFiscal.PERPAGTOFGTS)/100),2) + TRUNCFOL(((&E1827 *queRegFiscal.PERPAGTOFGTS)/100),2))) + IF(&FGTSMESANT=''S'',FSOMAEVE(queFuncionario.CODEMP, queFuncionario.CODFUNC, FSOMAMES(&REFERE, (-1)), ''N'',''1810'') * 0.08, 0)) * IF((&CAUAFA = 76),0.25,IF((QuelTFPafaF.CODGOVERNO =''I5''),0.20,0.50))),0),2)';
  P_CODFORMINDNOVO := '';
  
  IF P_FORMULA = 'A' THEN
    INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
      VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
             'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO);
    
    IF P_CODFORMINDNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO);
    END IF;
    
    IF P_DESCRFORMNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO);
    END IF;
    
    INSERT INTO TFPFOR (CODFORM, DESCRFORM, SANKHYA, FORMULA, CODFORMIND)
      VALUES(P_CODFORMULA, P_DESCRFORMNOVO, 'S', P_FORMULANOVO, P_CODFORMINDNOVO);
    
  ELSIF (P_FORMULANOVO <> P_FORMULA OR 
         NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') OR 
         NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z')) 
  THEN
    
    IF P_FORMULANOVO <> P_FORMULA THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO, P_FORMULA);
    END IF;
    
    IF NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO, P_CODFORMIND);
    END IF;
    
    IF NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO, P_DESCRFORMULA);
    END IF;
    
    UPDATE TFPFOR
    SET FORMULA = P_FORMULANOVO
    , DESCRFORM = P_DESCRFORMNOVO
    , CODFORMIND = P_CODFORMINDNOVO
    , FORMULANTERIOR = CASE WHEN FORMULA <> P_FORMULANOVO THEN P_FORMULA ELSE FORMULANTERIOR END
    , DTALTER = SYSDATE
    , CODUSU = 0
    WHERE CODFORM = P_CODFORMULA
    AND SANKHYA = 'S';
    
  END IF;
  
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50638-0-0
Nro. O.S. : 1140168
Nome      : Insere - INIBEFINTITCRED
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Inserir o parametro
NomeObjeto: INIBEFINTITCRED
TipoObjeto: PARAMETRO
NomeTabela: TSIPAR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO TSIPAR ( CHAVE, DESCRICAO, CODUSU, MODULO, CLASSE, ABA, TIPO,  LOGICO)  VALUES ( 'INIBEFINTITCRED', 'Proíbe lançar financeiro com titulo de crédito no', 0,'E', 'Saídas', 'Comercial',  'L', 'N') 
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 12/03/2018 19:51:11
Num.Script: 50645-0-0
Nro. O.S. : 1134513
Nome      : Cria - SNK_TONUMBER
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - SNK_TONUMBER
NomeObjeto: SNK_TONUMBER
TipoObjeto: FUNCTION
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE FUNCTION SNK_TONUMBER(CNRO IN VARCHAR) RETURN NUMBER
AS
BEGIN
   RETURN TO_NUMBER(CNRO);
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 12/03/2018 19:51:11
Num.Script: 50646-0-1000
Nro. O.S. : 1134513
Nome      : INSERE - THOOBJ - 5064500
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_TONUMBER
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210000
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_TONUMBER' NOMEOBJ, 50645 NUMSCRIPT, SYSDATE DTALTER, 'FUNCTION' TIPO, '7cf259526c3541cea18d62a4cbd928c3' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_TONUMBER' and THO.hashcode = '7cf259526c3541cea18d62a4cbd928c3')
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/03/2018 17:54:20
Num.Script: 50657-0-0
Nro. O.S. : 1098532
Nome      : Cria - TFPEMP REGIMERETIRRFCX
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: REGIMERETIRRFCX
TipoObjeto: COLUMN
NomeTabela: TFPEMP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TFPEMP ADD REGIMERETIRRFCX CHAR(1)';
   EXECUTE IMMEDIATE 'UPDATE TFPEMP SET REGIMERETIRRFCX = ''S''';
   EXECUTE IMMEDIATE 'ALTER TABLE TFPEMP ADD  CONSTRAINT CKC_REGIMERETIRRFCX_TFPEMP CHECK (REGIMERETIRRFCX IN (''S'',''N''))';
   EXECUTE IMMEDIATE 'ALTER TABLE TFPEMP MODIFY REGIMERETIRRFCX DEFAULT ''S'' NOT NULL';
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:45:00
Num.Script: 50664-0-0
Nro. O.S. : 1141690
Nome      : Alterar - Stp_Gerar_Livro_Fin
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - Stp_Gerar_Livro_Fin (Retirado o trexo que usava o campo SITUACAOCTE a pedido do Jorlano pois deu erro)
NomeObjeto: Stp_Gerar_Livro_Fin
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE Stp_Gerar_Livro_Fin (
   P_DTINI        IN     DATE,
   P_DTFIM        IN     DATE,
   P_CODEMP       IN     SMALLINT,
   P_CODEMPDEST   IN     SMALLINT,
   P_CONT            OUT INT)
AS
   P_COUNT            INT;
   P_FRETERENEG       TSIPAR.LOGICO%TYPE;
   P_DIFICMS          TGFLIV.DIFICMS%TYPE;
   P_ALIQ             TGFICM.ALIQUOTA%TYPE;
   P_CODEMPORIG_ANT   TGFEMP.CODEMP%TYPE;
   P_CODPARC_ANT      TGFPAR.CODPARC%TYPE;
   P_UFORIGEM         TSIUFS.UF%TYPE;
   P_UFDESTINO        TSIUFS.UF%TYPE;
   P_CODCFO           TGFCFO.CODCFO%TYPE;
   P_CODCFO_ANT       TGFCFO.CODCFO%TYPE;
   P_CODUFEMP         TSIUFS.CODUF%TYPE;
   P_COMPENSAIPI      TGFEMP.COMPIPI%TYPE;
   P_QTDLIV           INT;
   P_CODCIDINICTE_ANT TSICID.CODCID%TYPE;
   P_CODCIDFIMCTE_ANT TSICID.CODCID%TYPE;
   P_IND_INI          NUMBER(10);
   P_IND_FIM          NUMBER(10);
   P_CMUNINI          VARCHAR2(10);
   P_CMUNFIM          VARCHAR2(10);
   P_XML              VARCHAR2(4000);
   P_CODCID_INI       NUMBER(10);
   P_CODCID_FIM       NUMBER(10);
   P_CODCIDINICTE     TSICID.CODCID%TYPE;
   P_CODCIDFIMCTE     TSICID.CODCID%TYPE;

   CURSOR cLivro
   IS
        SELECT *
          FROM (  SELECT MIN (FIN.NUFIN) AS NUNOTA,
                         TRUNC (FIN.DTENTSAI) AS DTFILT,
                         FIN.DTNEG AS DTDOC,
                         TRUNC(CASE
                                  WHEN TPO.ATUALLIVFIS = 'E' THEN FIN.DTENTSAI
                                  ELSE FIN.DTNEG
                               END)
                            AS DHMOV,
                         TPO.ATUALLIVFIS,
                         UP.UF UFPARC,
                         CP.UF CODUFPARC,
                         FIN.NUMNOTA,
                         CASE
                            WHEN TRIM (FIN.SERIENOTA) IS NOT NULL
                            THEN
                               FIN.SERIENOTA
                            WHEN GE.GRAVARSERIENOTA = 'N'
                            THEN
                               'U'
                            ELSE
                               ' '
                         END
                            AS SERIENOTA,
                         FIN.CODEMP AS CODEMPORIG,
                         CASE
                            WHEN P_CODEMPDEST = 0 THEN FIN.CODEMP
                            ELSE P_CODEMPDEST
                         END
                            AS CODEMP,
                         PAR.CODPARC,
                         NVL(FIN.CODCFO, 0) AS CODCFO,
                         NVL(TPO.CODCFO_ENTRADA, 0) AS CODCFO_ENTRADA,
                         NVL(TPO.CODCFO_ENTRADA_FORA, 0) AS CODCFO_ENTRADA_FORA,
                         NVL(TPO.CODCFO_SAIDA, 0) AS CODCFO_SAIDA,
                         NVL(TPO.CODCFO_SAIDA_FORA, 0) AS CODCFO_SAIDA_FORA,
                         TIT.ESPDOC,
                         TPO.CODMODDOC,
                         SUM (FIN.VLRDESDOB) AS VLRCTB,
                         CASE
                            WHEN EMP.SIMPLES = 'S' AND EMP.CODREGTRIB = 1
                            THEN
                               CASE
                                  WHEN (TPO.ATUALLIVFIS = 'S'
                                        OR (TPO.ATUALLIVFIS = 'E'
                                            AND GE.TIPICMSTOPENTSIMNAC = 'N'))
                                  THEN
                                     '3'
                                  ELSE
                                     TPO.TIPICMS
                               END
                            ELSE
                               TPO.TIPICMS
                         END
                            AS TIPICMS,
                         ROUND (SUM (FIN.BASEICMS), 2) AS BASEICMS,
                         ROUND (
                            SUM (FIN.BASEICMS * FIN.ALIQICMS / 100) / SUM(CASE
                                     WHEN FIN.BASEICMS <> 0 THEN FIN.BASEICMS
                                     ELSE 1
                                  END)
                            * 100,
                            2)
                            AS ALIQICMS,
                         ROUND (SUM (FIN.BASEICMS * FIN.ALIQICMS / 100), 2)
                            AS VLRICMS,
                         0.00 AS ISENTASICMS,
                         0.00 AS OUTRASICMS,
                         TPO.TIPIPI,
                         CASE WHEN TPO.ATUALLIVFIS = 'E' THEN 'E' ELSE 'S' END
                            AS ENTSAI,
                         CASE
                            WHEN TPO.CODMODDOC  IN (57,67) THEN FIN.CHAVECTE
                            ELSE NULL
                         END
                            AS CHAVECTE,
                         CASE
                            WHEN TPO.CODMODDOC  IN (57,67) THEN FIN.CHAVECTEREF
                            ELSE NULL
                         END
                            AS CHAVECTEREF,
                         PAR.CLASSIFICMS,
                         TPO.CALCDIFICMS,
                         CASE WHEN TPO.CODMODDOC IN (8, 57, 67) THEN FIN.CODCIDINICTE ELSE NULL END CODCIDINICTE,
                         CASE WHEN TPO.CODMODDOC IN (8, 57, 67) THEN FIN.CODCIDFIMCTE ELSE NULL END CODCIDFIMCTE,
                         PAR.CODCID AS CODCIDPARC,
                         FIN.CODTRIB
                    FROM TGFFIN FIN,
                         TGFTOP TPO,
                         TGFPAR PAR,
                         TSICID CP,
                         TGFTIT TIT,
                         TSIUFS UP,
                         TGFEMP GE,
                         TSIEMP EMP
                   WHERE (    FIN.DTENTSAI IS NOT NULL
                          AND TRUNC (FIN.DTENTSAI) >= P_DTINI
                          AND TRUNC (FIN.DTENTSAI) < P_DTFIM)
                         AND FIN.CODEMP = GE.CODEMP
                         AND GE.CODEMP = EMP.CODEMP
                         AND GE.GERARLIVROS = 'S'
                         AND (P_CODEMP = 0 OR GE.CODEMP = P_CODEMP)
                         AND ( ( (FIN.ORIGEM = 'F')
                                AND (FIN.NURENEG IS NULL
                                     OR EXISTS
                                          (SELECT 1
                                             FROM TGFREN REN
                                            WHERE     REN.NUFIN = FIN.NUFIN
                                                  AND REN.NURENEGORIG = 0
                                                  AND FIN.RECDESP = 0)))
                              OR (    (P_FRETERENEG = 'S')
                                  AND (FIN.RECDESP <> 0)
                                  AND ( (FIN.DESDOBDUPL = 'F')
                                       OR EXISTS (SELECT 1
                                                    FROM TGFFNF
                                                   WHERE NUFIN = FIN.NUFIN)
                                       OR (TPO.CODMODDOC IN (57,67) AND TPO.TIPMOV = 'I')))
                              OR ( (P_FRETERENEG = 'N')
                                  AND ( (FIN.DESDOBDUPL = 'F')
                                       OR EXISTS (SELECT 1
                                                    FROM TGFFNF
                                                   WHERE NUFIN = FIN.NUFIN))
                                  AND ( (FIN.RECDESP = 0
                                         AND FIN.NURENEG IS NOT NULL
                                         AND NOT EXISTS
                                               (SELECT 1
                                                  FROM TGFREN REN
                                                 WHERE REN.NUFIN = FIN.NUFIN
                                                       AND NURENEGORIG <> 0))
                                       OR (FIN.RECDESP <> 0
                                           AND FIN.NURENEG IS NULL))))
                         AND FIN.CODTIPOPER = TPO.CODTIPOPER
                         AND FIN.DHTIPOPER = TPO.DHALTER
                         AND TPO.ATUALLIVFIS <> 'N'
                         AND TPO.ATUALLIVFIS <> 'A'
                         AND FIN.CODPARC = PAR.CODPARC
                         AND CASE WHEN TPO.CODMODDOC IN (8, 57, 67) THEN NVL(FIN.CODCIDINICTE, PAR.CODCID) ELSE PAR.CODCID END = CP.CODCID
                         AND CP.UF = UP.CODUF
                         AND FIN.CODTIPTIT = TIT.CODTIPTIT
                         AND FIN.PROVISAO = 'N'
                         AND NOT EXISTS (SELECT 1
                                         FROM TGFIXN IXN
                                         WHERE IXN.NUFIN = FIN.NUFIN
                                            AND NVL(IXN.SITUACAOCTE, '') = 'C')                         
                GROUP BY FIN.DTENTSAI,
                         FIN.DTNEG,
                         TPO.ATUALLIVFIS,
                         UP.UF,
                         CP.UF,
                         FIN.NUMNOTA,
                         CASE
                            WHEN TRIM (FIN.SERIENOTA) IS NOT NULL
                            THEN
                               FIN.SERIENOTA
                            WHEN GE.GRAVARSERIENOTA = 'N'
                            THEN
                               'U'
                            ELSE
                               ' '
                         END,
                         FIN.CODEMP,
                         PAR.CODPARC,
                         NVL(FIN.CODCFO, 0),
                         NVL(TPO.CODCFO_ENTRADA, 0),
                         NVL(TPO.CODCFO_ENTRADA_FORA, 0),
                         NVL(TPO.CODCFO_SAIDA, 0),
                         NVL(TPO.CODCFO_SAIDA_FORA, 0),
                         TIT.ESPDOC,
                         TPO.CODMODDOC,
                         CASE
                            WHEN EMP.SIMPLES = 'S' AND EMP.CODREGTRIB = 1
                            THEN
                               CASE
                                  WHEN (TPO.ATUALLIVFIS = 'S'
                                        OR (TPO.ATUALLIVFIS = 'E'
                                            AND GE.TIPICMSTOPENTSIMNAC = 'N'))
                                  THEN
                                     '3'
                                  ELSE
                                     TPO.TIPICMS
                               END
                            ELSE
                               TPO.TIPICMS
                         END,
                         TPO.TIPIPI,
                         CASE
                            WHEN TPO.CODMODDOC IN (57,67) THEN FIN.CHAVECTE
                            ELSE NULL
                         END,
                         CASE
                            WHEN TPO.CODMODDOC IN (57,67) THEN FIN.CHAVECTEREF
                            ELSE NULL
                         END,
                         PAR.CLASSIFICMS,
                         TPO.CALCDIFICMS,
                         CASE WHEN TPO.CODMODDOC IN (8, 57, 67) THEN FIN.CODCIDINICTE ELSE NULL END,
                         CASE WHEN TPO.CODMODDOC IN (8, 57, 67) THEN FIN.CODCIDFIMCTE ELSE NULL END,
                         PAR.CODCID,
                         FIN.CODTRIB
                UNION ALL
                  SELECT MIN (FIN.NUFIN) AS NUNOTA,
                         TRUNC (FIN.DTNEG) AS DTFILT,
                         FIN.DTNEG AS DTDOC,
                         TRUNC (FIN.DTNEG) AS DHMOV,
                         TPO.ATUALLIVFIS,
                         UP.UF UFPARC,
                         CP.UF CODUFPARC,
                         FIN.NUMNOTA,
                         CASE
                            WHEN TRIM (FIN.SERIENOTA) IS NOT NULL
                            THEN
                               FIN.SERIENOTA
                            WHEN GE.GRAVARSERIENOTA = 'N'
                            THEN
                               'U'
                            ELSE
                               ' '
                         END
                            AS SERIENOTA,
                         FIN.CODEMP AS CODEMPORIG,
                         CASE
                            WHEN P_CODEMPDEST = 0 THEN FIN.CODEMP
                            ELSE P_CODEMPDEST
                         END
                            AS CODEMP,
                         PAR.CODPARC,
                         NVL(FIN.CODCFO, 0) AS CODCFO,
                         NVL(TPO.CODCFO_ENTRADA, 0) AS CODCFO_ENTRADA,
                         NVL(TPO.CODCFO_ENTRADA_FORA, 0) AS CODCFO_ENTRADA_FORA,
                         NVL(TPO.CODCFO_SAIDA, 0) AS CODCFO_SAIDA,
                         NVL(TPO.CODCFO_SAIDA_FORA, 0) AS CODCFO_SAIDA_FORA,
                         TIT.ESPDOC,
                         TPO.CODMODDOC,
                         SUM (FIN.VLRDESDOB) AS VLRCTB,
                         CASE
                            WHEN EMP.SIMPLES = 'S' AND EMP.CODREGTRIB = 1
                            THEN
                               CASE
                                  WHEN (TPO.ATUALLIVFIS = 'S'
                                        OR (TPO.ATUALLIVFIS = 'E'
                                            AND GE.TIPICMSTOPENTSIMNAC = 'N'))
                                  THEN
                                     '3'
                                  ELSE
                                     TPO.TIPICMS
                               END
                            ELSE
                               TPO.TIPICMS
                         END
                            AS TIPICMS,
                         ROUND (SUM (FIN.BASEICMS), 2) AS BASEICMS,
                         ROUND (
                            SUM (FIN.BASEICMS * FIN.ALIQICMS / 100) / SUM(CASE
                                     WHEN FIN.BASEICMS <> 0 THEN FIN.BASEICMS
                                     ELSE 1
                                  END)
                            * 100,
                            2)
                            AS ALIQICMS,
                         ROUND (SUM (FIN.BASEICMS * FIN.ALIQICMS / 100), 2)
                            AS VLRICMS,
                         0.00 AS ISENTASICMS,
                         0.00 AS OUTRASICMS,
                         TPO.TIPIPI,
                         CASE WHEN TPO.ATUALLIVFIS = 'E' THEN 'E' ELSE 'S' END
                            AS ENTSAI,
                         CASE
                            WHEN TPO.CODMODDOC  IN (57,67) THEN FIN.CHAVECTE
                            ELSE NULL
                         END
                            AS CHAVECTE,
                         CASE
                            WHEN TPO.CODMODDOC  IN (57,67) THEN FIN.CHAVECTEREF
                            ELSE NULL
                         END
                            AS CHAVECTEREF,
                         PAR.CLASSIFICMS,
                         TPO.CALCDIFICMS,
                         CASE WHEN TPO.CODMODDOC IN (8, 57, 67) THEN FIN.CODCIDINICTE ELSE NULL END CODCIDINICTE,
                         CASE WHEN TPO.CODMODDOC IN (8, 57, 67) THEN FIN.CODCIDFIMCTE ELSE NULL END CODCIDFIMCTE,
                         PAR.CODCID AS CODCIDPARC,
                         FIN.CODTRIB
                    FROM TGFFIN FIN,
                         TGFTOP TPO,
                         TGFPAR PAR,
                         TSICID CP,
                         TGFTIT TIT,
                         TSIUFS UP,
                         TGFEMP GE,
                         TSIEMP EMP
                   WHERE (    FIN.DTENTSAI IS NULL
                          AND TRUNC (FIN.DTNEG) >= P_DTINI
                          AND TRUNC (FIN.DTNEG) < P_DTFIM)
                         AND FIN.CODEMP = GE.CODEMP
                         AND GE.CODEMP = EMP.CODEMP
                         AND GE.GERARLIVROS = 'S'
                         AND (P_CODEMP = 0 OR GE.CODEMP = P_CODEMP)
                         AND ( ( (FIN.ORIGEM = 'F')
                                AND (FIN.NURENEG IS NULL
                                     OR EXISTS
                                          (SELECT 1
                                             FROM TGFREN REN
                                            WHERE     REN.NUFIN = FIN.NUFIN
                                                  AND REN.NURENEGORIG = 0
                                                  AND FIN.RECDESP = 0)))
                              OR (    (P_FRETERENEG = 'S')
                                  AND (FIN.RECDESP <> 0)
                                  AND ( (FIN.DESDOBDUPL = 'F')
                                       OR EXISTS (SELECT 1
                                                    FROM TGFFNF
                                                   WHERE NUFIN = FIN.NUFIN)
                                       OR (TPO.CODMODDOC  IN (57,67) AND TPO.TIPMOV = 'I')))
                              OR ( (P_FRETERENEG = 'N')
                                  AND ( (FIN.DESDOBDUPL = 'F')
                                       OR EXISTS (SELECT 1
                                                    FROM TGFFNF
                                                   WHERE NUFIN = FIN.NUFIN))
                                  AND ( (FIN.RECDESP = 0
                                         AND FIN.NURENEG IS NOT NULL
                                         AND NOT EXISTS
                                               (SELECT 1
                                                  FROM TGFREN REN
                                                 WHERE REN.NUFIN = FIN.NUFIN
                                                       AND NURENEGORIG <> 0))
                                       OR (FIN.RECDESP <> 0
                                           AND FIN.NURENEG IS NULL))))
                         AND FIN.CODTIPOPER = TPO.CODTIPOPER
                         AND FIN.DHTIPOPER = TPO.DHALTER
                         AND TPO.ATUALLIVFIS <> 'N'
                         AND TPO.ATUALLIVFIS <> 'A'
                         AND FIN.CODPARC = PAR.CODPARC
                         AND CASE WHEN TPO.CODMODDOC IN (8, 57, 67) THEN NVL(FIN.CODCIDINICTE, PAR.CODCID) ELSE PAR.CODCID END = CP.CODCID
                         AND CP.UF = UP.CODUF
                         AND FIN.CODTIPTIT = TIT.CODTIPTIT
                         AND FIN.PROVISAO = 'N'
                         AND NOT EXISTS (SELECT 1
                                         FROM TGFIXN IXN
                                         WHERE IXN.NUFIN = FIN.NUFIN
                                            AND NVL(IXN.SITUACAOCTE, '') = 'C')
                GROUP BY FIN.DTENTSAI,
                         FIN.DTNEG,
                         TPO.ATUALLIVFIS,
                         UP.UF,
                         CP.UF,
                         FIN.NUMNOTA,
                         CASE
                            WHEN TRIM (FIN.SERIENOTA) IS NOT NULL
                            THEN
                               FIN.SERIENOTA
                            WHEN GE.GRAVARSERIENOTA = 'N'
                            THEN
                               'U'
                            ELSE
                               ' '
                         END,
                         FIN.CODEMP,
                         PAR.CODPARC,
                         NVL(FIN.CODCFO, 0),
                         NVL(TPO.CODCFO_ENTRADA, 0),
                         NVL(TPO.CODCFO_ENTRADA_FORA, 0),
                         NVL(TPO.CODCFO_SAIDA, 0),
                         NVL(TPO.CODCFO_SAIDA_FORA, 0),
                         TIT.ESPDOC,
                         TPO.CODMODDOC,
                         CASE
                            WHEN EMP.SIMPLES = 'S' AND EMP.CODREGTRIB = 1
                            THEN
                               CASE
                                  WHEN (TPO.ATUALLIVFIS = 'S'
                                        OR (TPO.ATUALLIVFIS = 'E'
                                            AND GE.TIPICMSTOPENTSIMNAC = 'N'))
                                  THEN
                                     '3'
                                  ELSE
                                     TPO.TIPICMS
                               END
                            ELSE
                               TPO.TIPICMS
                         END,
                         TPO.TIPIPI,
                         CASE
                            WHEN TPO.CODMODDOC IN (57,67) THEN FIN.CHAVECTE
                            ELSE NULL
                         END,
                         CASE
                            WHEN TPO.CODMODDOC IN (57,67) THEN FIN.CHAVECTEREF
                            ELSE NULL
                         END,
                         PAR.CLASSIFICMS,
                         TPO.CALCDIFICMS,
                         CASE WHEN TPO.CODMODDOC IN (8, 57, 67) THEN FIN.CODCIDINICTE ELSE NULL END,
                         CASE WHEN TPO.CODMODDOC IN (8, 57, 67) THEN FIN.CODCIDFIMCTE ELSE NULL END,
                         PAR.CODCID,
                         FIN.CODTRIB) LIV
      ORDER BY LIV.CODEMPORIG;
BEGIN
   SELECT MIN (LOGICO)
     INTO P_FRETERENEG
     FROM TSIPAR
    WHERE CHAVE = 'LIVFRETERENEG';

   SELECT COMPIPI
     INTO P_COMPENSAIPI
     FROM TGFEMP
    WHERE CODEMP = P_CODEMP AND GERARLIVROS = 'S';

   IF P_FRETERENEG IS NULL
   THEN
      P_FRETERENEG := 'N';
   END IF;

   P_CONT := 0;

   DELETE FROM TGFLIV
         WHERE     DTFILT >= P_DTINI
               AND DTFILT < P_DTFIM
               AND (P_CODEMP = 0 OR CODEMPORIG = P_CODEMP)
               AND ORIGEM = 'F'
               AND DIGITADO <> 'S';

   P_CODEMPORIG_ANT := 0;
   P_CODPARC_ANT := 0;
   P_CODCFO_ANT := 0;
   P_CODCIDINICTE_ANT := 0;
   P_CODCIDFIMCTE_ANT := 0;
    
   FOR P_LIVRO IN cLivro
   LOOP
      IF P_LIVRO.ATUALLIVFIS = 'E' AND P_LIVRO.CODMODDOC IN (8, 57, 67) AND P_LIVRO.DHMOV >= '01/01/2018' AND (P_LIVRO.CODCIDINICTE IS NULL OR P_LIVRO.CODCIDFIMCTE IS NULL) AND P_LIVRO.CHAVECTE IS NOT NULL THEN
        BEGIN
            SELECT SUBSTR(XML, 1, 4000) INTO P_XML
            FROM TGFIXN
            WHERE CHAVEACESSO = P_LIVRO.CHAVECTE;

            P_IND_INI := INSTR(P_XML, '<cMunIni>') + 9;
            P_CMUNINI := SUBSTR(P_XML, P_IND_INI, 7);

            P_IND_FIM := INSTR(P_XML, '<cMunFim>') + 9;
            P_CMUNFIM := SUBSTR(P_XML, P_IND_FIM, 7);

            BEGIN
                SELECT MIN(CODCID) INTO P_CODCID_INI
                FROM TSICID
                WHERE TO_CHAR(CODMUNFIS) = TRIM(P_CMUNINI);
            EXCEPTION WHEN NO_DATA_FOUND THEN
                P_CODCID_INI := -1;
            END;

            BEGIN
                SELECT MIN(CODCID) INTO P_CODCID_FIM
                FROM TSICID
                WHERE TO_CHAR(CODMUNFIS) = TRIM(P_CMUNFIM);
            EXCEPTION WHEN NO_DATA_FOUND THEN
                P_CODCID_FIM := -1;
            END;

            P_CODCIDINICTE := P_CODCID_INI;
            P_CODCIDFIMCTE := P_CODCID_FIM;
            
            IF P_CODCIDINICTE = -1 OR P_CODCIDFIMCTE = -1 THEN
                RAISE_APPLICATION_ERROR(-20101, 'As informações de "Cód. Cid. Inicio CT-e" e "Cód. Cid. Fim CT-e" são obrigatórias para financeiro ' || P_LIVRO.NUNOTA);
            END IF;
        EXCEPTION WHEN NO_DATA_FOUND THEN
             RAISE_APPLICATION_ERROR(-20101, 'As informações de "Cód. Cid. Inicio CT-e" e "Cód. Cid. Fim CT-e" são obrigatórias para financeiro ' || P_LIVRO.NUNOTA);
        END;
      ELSE
        BEGIN
            P_CODCIDINICTE :=  P_LIVRO.CODCIDINICTE;
            P_CODCIDFIMCTE := P_LIVRO.CODCIDFIMCTE; 
        END;
      END IF;
      
      IF P_CODEMPORIG_ANT <> P_LIVRO.CODEMPORIG OR P_CODPARC_ANT <> P_LIVRO.CODPARC OR P_CODCFO_ANT <> P_LIVRO.CODCFO OR P_CODCIDFIMCTE_ANT <> P_CODCIDFIMCTE OR P_CODCIDINICTE_ANT <> P_CODCIDINICTE THEN
        BEGIN
         P_CODCIDINICTE_ANT := NULL;
         P_CODCIDFIMCTE_ANT := NULL;
         
         SELECT 
                CASE WHEN P_CODCIDINICTE IS NOT NULL THEN P_LIVRO.UFPARC
                   WHEN P_LIVRO.ATUALLIVFIS = 'E' THEN P_LIVRO.UFPARC
                   ELSE UE.UF
                END AS UFORIGEM,
                CASE WHEN P_CODCIDFIMCTE IS NOT NULL THEN UE.UF
                    WHEN P_LIVRO.ATUALLIVFIS = 'E' THEN UE.UF 
                    ELSE P_LIVRO.UFPARC
                END AS UFDESTINO,
                CASE
                   WHEN P_LIVRO.CODCFO <> 0
                   THEN
                      P_LIVRO.CODCFO
                   WHEN P_LIVRO.ATUALLIVFIS = 'E'
                   THEN
                      CASE
                         WHEN CE.UF = P_LIVRO.CODUFPARC
                         THEN
                            P_LIVRO.CODCFO_ENTRADA
                         ELSE
                            P_LIVRO.CODCFO_ENTRADA_FORA
                      END
                   ELSE
                      CASE
                         WHEN CE.UF = P_LIVRO.CODUFPARC
                         THEN
                            P_LIVRO.CODCFO_SAIDA
                         ELSE
                            P_LIVRO.CODCFO_SAIDA_FORA
                      END
                END
                   AS CODCFO,
                CE.UF AS CODUFEMP,
                CASE WHEN P_LIVRO.CODMODDOC NOT IN (8, 57, 67) THEN NULL WHEN P_CODCIDINICTE IS NOT NULL THEN P_CODCIDINICTE WHEN P_LIVRO.ATUALLIVFIS = 'E' THEN P_LIVRO.CODCIDPARC ELSE EMP.CODCID END,
                CASE WHEN P_LIVRO.CODMODDOC NOT IN (8, 57, 67) THEN NULL WHEN P_CODCIDFIMCTE IS NOT NULL THEN P_CODCIDFIMCTE WHEN P_LIVRO.ATUALLIVFIS = 'E' THEN EMP.CODCID  ELSE P_LIVRO.CODCIDPARC END
           INTO P_UFORIGEM,
                P_UFDESTINO,
                P_CODCFO,
                P_CODUFEMP,
                P_CODCIDINICTE_ANT,
                P_CODCIDFIMCTE_ANT
           FROM TSIEMP EMP, TSICID CE, TSIUFS UE
          WHERE     EMP.CODEMP = P_LIVRO.CODEMPORIG
                AND CASE WHEN P_LIVRO.CODCIDFIMCTE IS NOT NULL THEN P_LIVRO.CODCIDFIMCTE ELSE EMP.CODCID END = CE.CODCID
                AND CE.UF = UE.CODUF;

         P_CODEMPORIG_ANT := P_LIVRO.CODEMPORIG;
         P_CODPARC_ANT := P_LIVRO.CODPARC;
         P_CODCFO_ANT := P_LIVRO.CODCFO;
        END;
      END IF;

      P_CONT := P_CONT + 1;

      IF (P_LIVRO.ENTSAI = 'E') AND (P_CODCFO > 5000) AND (P_CODCFO < 7000)
      THEN
         P_CODCFO := P_CODCFO - 4000;
      ELSIF     (P_LIVRO.ENTSAI = 'S')
            AND (P_CODCFO > 1000)
            AND (P_CODCFO < 3000)
      THEN
         P_CODCFO := P_CODCFO + 4000;
      END IF;

      IF P_LIVRO.CODMODDOC <= 1
      THEN
         IF    P_CODCFO BETWEEN 140 AND 145
            OR P_CODCFO BETWEEN 1250 AND 1299
            OR P_CODCFO BETWEEN 240 AND 245
            OR P_CODCFO BETWEEN 2250 AND 2299
         THEN
            P_LIVRO.CODMODDOC := 06;
         ELSIF    P_CODCFO BETWEEN 150 AND 156
               OR P_CODCFO BETWEEN 1300 AND 1349
               OR P_CODCFO BETWEEN 250 AND 256
               OR P_CODCFO BETWEEN 2300 AND 2349
         THEN
            P_LIVRO.CODMODDOC := 22;
         ELSIF    P_CODCFO BETWEEN 160 AND 166
               OR P_CODCFO BETWEEN 1350 AND 1400
               OR P_CODCFO BETWEEN 260 AND 266
               OR P_CODCFO BETWEEN 2350 AND 2400
         THEN
            P_LIVRO.CODMODDOC := 08;
         ELSE
            P_LIVRO.CODMODDOC := 1;
         END IF;
      END IF;

      
      P_DIFICMS := 0;

      IF     P_LIVRO.CALCDIFICMS = 'S'
         AND P_UFORIGEM <> P_UFDESTINO
         AND P_LIVRO.BASEICMS > 0
      THEN
         SELECT COUNT ( * )
           INTO P_COUNT
           FROM TGFCFO
          WHERE CODCFO = P_CODCFO AND CALCDIFICMS = 'S';

         IF P_COUNT > 0
         THEN
            SELECT COUNT ( * ), MIN (I.ALIQUOTA)
              INTO P_COUNT, P_ALIQ
              FROM TGFICM I
             WHERE     I.UFORIG = P_CODUFEMP
                   AND I.UFDEST = P_CODUFEMP
                   AND I.TIPRESTRICAO = 'S'
                   AND I.TIPRESTRICAO2 = 'S';

            IF P_COUNT > 0
            THEN
               P_DIFICMS :=
                  ROUND (
                     (P_LIVRO.BASEICMS * P_ALIQ / 100) - P_LIVRO.VLRICMS,
                     2);

               IF P_DIFICMS < 0
               THEN
                  P_DIFICMS := 0;
               END IF;
            END IF;
         END IF;
      END IF;
      
      
      IF P_LIVRO.TIPICMS = 2
      THEN
         P_LIVRO.BASEICMS := 0;
         P_LIVRO.ALIQICMS := 0;
         P_LIVRO.VLRICMS := 0;
         P_LIVRO.ISENTASICMS := P_LIVRO.VLRCTB;
      ELSIF P_LIVRO.TIPICMS = 3
      THEN
         P_LIVRO.BASEICMS := 0;
         P_LIVRO.ALIQICMS := 0;
         P_LIVRO.VLRICMS := 0;
         P_LIVRO.OUTRASICMS := P_LIVRO.VLRCTB;
      ELSIF (P_LIVRO.TIPICMS = 4)
            OR ( (P_LIVRO.TIPICMS = 1) AND (P_LIVRO.CLASSIFICMS = 'I'))
      THEN
         P_LIVRO.ISENTASICMS := P_LIVRO.VLRCTB - P_LIVRO.BASEICMS;

         IF P_LIVRO.ISENTASICMS <> 0
         THEN
            P_LIVRO.TIPICMS := 2;
         ELSE
            P_LIVRO.TIPICMS := 1;
         END IF;
      ELSE
         P_LIVRO.OUTRASICMS := P_LIVRO.VLRCTB - P_LIVRO.BASEICMS;

         IF P_LIVRO.OUTRASICMS <> 0
         THEN
            P_LIVRO.TIPICMS := 3;
         ELSE
            P_LIVRO.TIPICMS := 1;
         END IF;
      END IF;

      SELECT COUNT(*) INTO P_QTDLIV
      FROM TGFLIV L 
      WHERE L.SEQUENCIA = 1 
            AND L.ORIGEM = 'F' 
            AND L.NUNOTA = P_LIVRO.NUNOTA
            AND L.CODEMP = P_LIVRO.CODEMP;      

      IF P_QTDLIV = 0 THEN
          INSERT INTO TGFLIV (ORIGEM,
                              NUNOTA,
                              SEQUENCIA,
                              DTFILT,
                              DTDOC,
                              DHMOV,
                              UFORIGEM,
                              UFDESTINO,
                              NUMNOTA,
                              SERIENOTA,
                              CODEMPORIG,
                              CODEMP,
                              EMPPARC,
                              CODPARC,
                              CODCFO,
                              ESPDOC,
                              CODMODDOC,
                              CODTRIB,
                              VLRCTB,
                              TIPICMS,
                              BASEICMS,
                              ALIQICMS,
                              VLRICMS,
                              ISENTASICMS,
                              OUTRASICMS,
                              TIPIPI,
                              BASEIPI,
                              ALIQIPI,
                              VLRIPI,
                              ISENTASIPI,
                              OUTRASIPI,
                              BASERETENCAO,
                              BASERETENCAOSEMRED,
                              ICMSRETENCAO,
                              VLRCTBTARE,
                              BASEICMSTARE,
                              VLRICMSTARE,
                              DIFICMS,
                              ENTSAI,
                              DIGITADO,
                              CHAVECTE,
                              CHAVECTEREF,
                              VLRICMSDIFALDEST,
                              VLRICMSDIFALREM,
                              VLRICMSFCP,
                              CODCIDINICTE,
                              CODCIDFIMCTE)
              VALUES ('F',
                      P_LIVRO.NUNOTA,
                      1,
                      P_LIVRO.DTFILT,
                      P_LIVRO.DTDOC,
                      P_LIVRO.DHMOV,
                      P_UFORIGEM,
                      P_UFDESTINO,
                      P_LIVRO.NUMNOTA,
                      P_LIVRO.SERIENOTA,
                      P_LIVRO.CODEMPORIG,
                      P_LIVRO.CODEMP,
                      'P',
                      P_LIVRO.CODPARC,
                      P_CODCFO,
                      P_LIVRO.ESPDOC,
                      P_LIVRO.CODMODDOC,
                      P_LIVRO.CODTRIB,
                      P_LIVRO.VLRCTB,
                      P_LIVRO.TIPICMS,
                      P_LIVRO.BASEICMS,
                      P_LIVRO.ALIQICMS,
                      P_LIVRO.VLRICMS,
                      P_LIVRO.ISENTASICMS,
                      P_LIVRO.OUTRASICMS,
                      P_LIVRO.TIPIPI,
                      0,
                      0,
                      0,
                      CASE
                         WHEN P_COMPENSAIPI = 'S' AND P_LIVRO.TIPIPI = 2
                         THEN
                            P_LIVRO.VLRCTB
                         ELSE
                            0
                      END,
                      CASE
                         WHEN P_COMPENSAIPI = 'S' AND P_LIVRO.TIPIPI = 3
                         THEN
                            P_LIVRO.VLRCTB
                         ELSE
                            0
                      END,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      P_DIFICMS,
                      P_LIVRO.ENTSAI,
                      'N',
                      P_LIVRO.CHAVECTE,
                      P_LIVRO.CHAVECTEREF,
                      0,
                      0,
                      0,
                      P_CODCIDINICTE_ANT,
                      P_CODCIDFIMCTE_ANT);
      ELSE
        P_CONT := P_CONT - 1;
      END IF;
   END LOOP;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50665-0-1000
Nro. O.S. : 1141690
Nome      : INSERE - THOOBJ - 5066400
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE STP_GERAR_LIVRO_FIN
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210000
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'STP_GERAR_LIVRO_FIN' NOMEOBJ, 50664 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, 'e446e357c767a8236dc9a93abe4993bd' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'STP_GERAR_LIVRO_FIN' and THO.hashcode = 'e446e357c767a8236dc9a93abe4993bd')
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50701-0-0
Nro. O.S. : 1143612
Nome      : Criar - FK_TFPEMP_TFPPTPR_RAT
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - FK_TFPEMP_TFPPTPR_RAT
NomeObjeto: FK_TFPEMP_TFPPTPR_RAT
TipoObjeto: FOREIGN KEY
NomeTabela: TFPEMP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPEMP ADD CONSTRAINT FK_TFPEMP_TFPPTPR_RAT
  FOREIGN KEY (NUPROCESSORAT, CODEMP)  REFERENCES TFPPTPR (NUPROCESSO,CODEMP)
  ENABLE VALIDATE
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50705-0-0
Nro. O.S. : 1143612
Nome      : Criar - FK_TFPEMP_TFPPTPR_FAP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - FK_TFPEMP_TFPPTPR_FAP
NomeObjeto: FK_TFPEMP_TFPPTPR_FAP
TipoObjeto: FOREIGN KEY
NomeTabela: TFPEMP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPEMP ADD CONSTRAINT FK_TFPEMP_TFPPTPR_FAP
  FOREIGN KEY (NUPROCESSOFAP, CODEMP)  REFERENCES TFPPTPR (NUPROCESSO,CODEMP)
  ENABLE VALIDATE
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50727-0-0
Nro. O.S. : 1144891
Nome      : Ajusta - TFPFOR CODFORM 7
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Ajusta - TFPFOR CODFORM 7
NomeObjeto: CODFORM
TipoObjeto: COLUMN
NomeTabela: TFPFOR
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
  P_CODFORMULA      TFPFOR.CODFORM%TYPE;
  P_DESCRFORMULA    TFPFOR.DESCRFORM%TYPE;
  P_DESCRFORMNOVO   TFPFOR.DESCRFORM%TYPE;
  P_FORMULA         VARCHAR2(4000);
  P_FORMULANOVO     VARCHAR2(4000);
  P_CODFORMIND      VARCHAR2(4000);
  P_CODFORMINDNOVO  VARCHAR2(4000);
  P_SANKHYA         TFPFOR.SANKHYA%TYPE;
BEGIN
  
  P_CODFORMULA := 7;
  
  BEGIN
    SELECT FORMULA, DESCRFORM, CODFORMIND, SANKHYA
    INTO P_FORMULA, P_DESCRFORMULA, P_CODFORMIND, P_SANKHYA
    FROM TFPFOR
    WHERE CODFORM = P_CODFORMULA;
  EXCEPTION WHEN NO_DATA_FOUND THEN
    P_FORMULA := 'A';
    P_CODFORMIND := NULL;
    P_DESCRFORMULA := NULL;
    P_SANKHYA := 'S'; 
  END;
  
  IF P_SANKHYA = 'N' THEN
    RETURN;
  END IF;
  
  P_DESCRFORMNOVO := 'Salário Família';
  P_FORMULANOVO := 'IF((&Folqui <> 1),IF(((QueFuncionario.SITUACAO = 1) AND (CTOI(PDESPARAM(''1'', ''TFPOCOO, TFPHIS H'', '' O.CODHISTOCOR = H.CODHISTOCOR AND O.CODEMP = :INT_CODEMPAND O.CODFUNC = :INT_CODFUNC AND O.DTFINALOCOR >= :DAT_DTINI ANDO.DTFINALOCOR <= :DAT_DTFIM AND H.AFASTAMENTO IN (''A'', ''D'') ANDO.DTFINALOCOR IS NOT NULL'',STR(queFuncionario.CODEMP), STR(queFuncionario.CODFUNC), DTOC(&REFERE * 1.0), DTOC((FSOMAMES(&REFERE, 1) - 1)* 1.0))) <> 1)) OR (((QueFuncionario.SITUACAO = 3) OR (QueFuncionario.SITUACAO = 6) OR(QueFuncionario.SITUACAO = 5)) AND ((&DIASTRA + &F5020) > 0)),(FQD(queFuncionario.codemp,queFuncionario.codfunc,''S'',&Refere) * FTF(3,1,(IF(&TIPFOL =''N'',(QueFuncionario.SALBASE + (&E1900 - &E201) + &E105 + (&E102 + &E103 + &E104 +&E107)) - ((&E1+ &E415 + &E416) + ((QueFuncionario.SALBASE / 30) * &F5020)),(QueFuncionario.SALBASE + (&E1900 - &E201) + &E105 + (&E102 + &E103 + &E104 +&E107)) - (&E200 - ((QueFuncionario.SALBASE / 30) *&F5020)))),&Refere,queFuncionario.TIPTAB)),0) / IF(((&TIPFOL = ''N'') AND (MES(queFuncionario.DTADM) = &MESATU) AND (ANO(queFuncionario.DTADM) = &ANOATU))OR (&TIPFOL = ''R''), IF(QueFuncionario.TIPSAL = 5,QueFuncionario.HORASSEM * 5,30), 1) *IF(((&TIPFOL = ''N'') AND (MES(queFuncionario.DTADM) = &MESATU) AND(ANO(queFuncionario.DTADM) = &ANOATU)) OR (&TIPFOL = ''R''),IF(&DIASTRA >0,&DIASTRA,30), 1),0)';
  P_CODFORMINDNOVO := 'FQD(queFuncionario.codemp, queFuncionario.codfunc,''N'', &Refere)';
  
  IF P_FORMULA = 'A' THEN
    INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
      VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
             'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO);
    
    IF P_CODFORMINDNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO);
    END IF;
    
    IF P_DESCRFORMNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO);
    END IF;
    
    INSERT INTO TFPFOR (CODFORM, DESCRFORM, SANKHYA, FORMULA, CODFORMIND)
      VALUES(P_CODFORMULA, P_DESCRFORMNOVO, 'S', P_FORMULANOVO, P_CODFORMINDNOVO);
    
  ELSIF (P_FORMULANOVO <> P_FORMULA OR 
         NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') OR 
         NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z')) 
  THEN
    
    IF P_FORMULANOVO <> P_FORMULA THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO, P_FORMULA);
    END IF;
    
    IF NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO, P_CODFORMIND);
    END IF;
    
    IF NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO, P_DESCRFORMULA);
    END IF;
    
    UPDATE TFPFOR
    SET FORMULA = P_FORMULANOVO
    , DESCRFORM = P_DESCRFORMNOVO
    , CODFORMIND = P_CODFORMINDNOVO
    , FORMULANTERIOR = CASE WHEN FORMULA <> P_FORMULANOVO THEN P_FORMULA ELSE FORMULANTERIOR END
    , DTALTER = SYSDATE
    , CODUSU = 0
    WHERE CODFORM = P_CODFORMULA
    AND SANKHYA = 'S';
    
  END IF;
  
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50732-0-0
Nro. O.S. : 1144891
Nome      : Ajusta - TFPFOR CODFORM 7
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Ajusta - TFPFOR CODFORM 7
NomeObjeto: CODFORM
TipoObjeto: COLUMN
NomeTabela: TFPFOR
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
  P_CODFORMULA      TFPFOR.CODFORM%TYPE;
  P_DESCRFORMULA    TFPFOR.DESCRFORM%TYPE;
  P_DESCRFORMNOVO   TFPFOR.DESCRFORM%TYPE;
  P_FORMULA         VARCHAR2(4000);
  P_FORMULANOVO     VARCHAR2(4000);
  P_CODFORMIND      VARCHAR2(4000);
  P_CODFORMINDNOVO  VARCHAR2(4000);
  P_SANKHYA         TFPFOR.SANKHYA%TYPE;
BEGIN
  
  P_CODFORMULA := 7;
  
  BEGIN
    SELECT FORMULA, DESCRFORM, CODFORMIND, SANKHYA
    INTO P_FORMULA, P_DESCRFORMULA, P_CODFORMIND, P_SANKHYA
    FROM TFPFOR
    WHERE CODFORM = P_CODFORMULA;
  EXCEPTION WHEN NO_DATA_FOUND THEN
    P_FORMULA := 'A';
    P_CODFORMIND := NULL;
    P_DESCRFORMULA := NULL;
    P_SANKHYA := 'S'; 
  END;
  
  IF P_SANKHYA = 'N' THEN
    RETURN;
  END IF;
  
  P_DESCRFORMNOVO := 'Salário Família';
  P_FORMULANOVO := 'IF((&Folqui <> 1),IF(((QueFuncionario.SITUACAO = 1) AND (CTOI(PDESPARAM(''1'', ''TFPOCO O, TFPHIS H'', '' O.CODHISTOCOR = H.CODHISTOCOR AND O.CODEMP = :INT_CODEMP AND O.CODFUNC = :INT_CODFUNC AND O.DTFINALOCOR >= :DAT_DTINI AND O.DTFINALOCOR <= :DAT_DTFIM AND H.AFASTAMENTO IN (''A'', ''D'') AND O.DTFINALOCOR IS NOT NULL'',STR(queFuncionario.CODEMP), STR(queFuncionario.CODFUNC), DTOC(&REFERE * 1.0), DTOC((FSOMAMES(&REFERE, 1) - 1) * 1.0))) <> 1)) OR (((QueFuncionario.SITUACAO = 3) OR (QueFuncionario.SITUACAO = 6) OR (QueFuncionario.SITUACAO = 5)) AND ((&DIASTRA + &F5020) > 0)),(FQD(queFuncionario.codemp,queFuncionario.codfunc,''S'',&Refere) * FTF(3,1,(IF(&TIPFOL = ''N'',(QueFuncionario.SALBASE + (&E1900 - &E201) + &E105 + (&E102 + &E103 + &E104 + &E107)) - ((&E1+ &E415 + &E416) + ((QueFuncionario.SALBASE / 30) * &F5020)),(QueFuncionario.SALBASE + (&E1900 - &E201) + &E105 + (&E102 + &E103 + &E104 + &E107)) - (&E200 - ((QueFuncionario.SALBASE / 30) * &F5020)))),&Refere,queFuncionario.TIPTAB)),0) / IF(((&TIPFOL = ''N'') AND (MES(queFuncionario.DTADM) = &MESATU) AND (ANO(queFuncionario.DTADM) = &ANOATU)) OR (&TIPFOL = ''R''), IF(QueFuncionario.TIPSAL = 5,QueFuncionario.HORASSEM * 5,30), 1) * IF(((&TIPFOL = ''N'') AND (MES(queFuncionario.DTADM) = &MESATU) AND (ANO(queFuncionario.DTADM) = &ANOATU)) OR (&TIPFOL = ''R''),IF(&DIASTRA > 0,&DIASTRA,30), 1),0)';
  P_CODFORMINDNOVO := 'FQD(queFuncionario.codemp, queFuncionario.codfunc,''N'', &Refere)';
  
  IF P_FORMULA = 'A' THEN
    INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
      VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
             'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO);
    
    IF P_CODFORMINDNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO);
    END IF;
    
    IF P_DESCRFORMNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO);
    END IF;
    
    INSERT INTO TFPFOR (CODFORM, DESCRFORM, SANKHYA, FORMULA, CODFORMIND)
      VALUES(P_CODFORMULA, P_DESCRFORMNOVO, 'S', P_FORMULANOVO, P_CODFORMINDNOVO);
    
  ELSIF (P_FORMULANOVO <> P_FORMULA OR 
         NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') OR 
         NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z')) 
  THEN
    
    IF P_FORMULANOVO <> P_FORMULA THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO, P_FORMULA);
    END IF;
    
    IF NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO, P_CODFORMIND);
    END IF;
    
    IF NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO, P_DESCRFORMULA);
    END IF;
    
    UPDATE TFPFOR
    SET FORMULA = P_FORMULANOVO
    , DESCRFORM = P_DESCRFORMNOVO
    , CODFORMIND = P_CODFORMINDNOVO
    , FORMULANTERIOR = CASE WHEN FORMULA <> P_FORMULANOVO THEN P_FORMULA ELSE FORMULANTERIOR END
    , DTALTER = SYSDATE
    , CODUSU = 0
    WHERE CODFORM = P_CODFORMULA
    AND SANKHYA = 'S';
    
  END IF;
  
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50741-0-0
Nro. O.S. : 882439
Nome      : Cria - STP_NOTIFICA_SISTEMA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - STP_NOTIFICA_SISTEMA
NomeObjeto: STP_NOTIFICA_SISTEMA
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE STP_NOTIFICA_SISTEMA(
                P_TITULO             VARCHAR2,
                P_DESCRICAO          VARCHAR2,
                P_CODUSU             NUMBER,
                P_CODGRUPO           NUMBER,
                P_CODUSUREMETENTE    NUMBER)
AS
BEGIN

  DECLARE 
    V_CODGRUPO NUMBER; 
    V_NUAVISO  NUMBER; 
  BEGIN       
    IF (P_CODUSU IS NOT NULL) THEN
      V_CODGRUPO := NULL;
    ELSE
      V_CODGRUPO := P_CODGRUPO;
    END IF; 

    SELECT NVL(MAX(NUAVISO), 0)+1 INTO V_NUAVISO FROM TSIAVI;

    INSERT INTO TSIAVI 
                (NUAVISO,
                 TITULO, 
                 DESCRICAO, 
                 IDENTIFICADOR, 
                 IMPORTANCIA, 
                 CODUSU, 
                 CODGRUPO, 
                 TIPO, 
                 DHCRIACAO, 
                 CODUSUREMETENTE)
    VALUES      (V_NUAVISO,
                 P_TITULO, 
                 P_DESCRICAO, 
                 'API', 
                 3, 
                 P_CODUSU, 
                 V_CODGRUPO, 
                 'P', 
                 SYSDATE, 
                 P_CODUSUREMETENTE);
  END;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50742-0-1000
Nro. O.S. : 882439
Nome      : INSERE - THOOBJ - 5074100
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE STP_NOTIFICA_SISTEMA
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210000
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'STP_NOTIFICA_SISTEMA' NOMEOBJ, 50741 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, 'cd5564c142e0c423f672e9bc742b093b' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'STP_NOTIFICA_SISTEMA' and THO.hashcode = 'cd5564c142e0c423f672e9bc742b093b')
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50743-0-0
Nro. O.S. : 882439
Nome      : Cria - GET_LINK_TELA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - GET_LINK_TELA
NomeObjeto: GET_LINK_TELA
TipoObjeto: FUNCTION
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE FUNCTION GET_LINK_TELA(P_RESOURCE_ID VARCHAR2, P_LINK_TEXT VARCHAR2, P_JSON_PK VARCHAR2)
RETURN VARCHAR2
IS  
    V_BASE64_P_RESOURCE_ID VARCHAR2(1000);
    V_BASE64_P_JSON_PK VARCHAR2(1000);
BEGIN

    V_BASE64_P_RESOURCE_ID := utl_raw.cast_to_varchar2(utl_encode.base64_encode(utl_raw.cast_to_raw(P_RESOURCE_ID)));
    V_BASE64_P_JSON_PK := utl_raw.cast_to_varchar2(utl_encode.base64_encode(utl_raw.cast_to_raw(P_JSON_PK)));

    RETURN CONCAT(CONCAT(CONCAT(CONCAT(CONCAT(CONCAT('<a href="#app/',V_BASE64_P_RESOURCE_ID),'/'),V_BASE64_P_JSON_PK),'">'),P_LINK_TEXT),'</a>');
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50744-0-1000
Nro. O.S. : 882439
Nome      : INSERE - THOOBJ - 5074300
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE GET_LINK_TELA
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210000
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'GET_LINK_TELA' NOMEOBJ, 50743 NUMSCRIPT, SYSDATE DTALTER, 'FUNCTION' TIPO, 'da9f185ba3d2b6a8fde14523137ed552' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'GET_LINK_TELA' and THO.hashcode = 'da9f185ba3d2b6a8fde14523137ed552')
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50800-0-0
Nro. O.S. : 1144564
Nome      : Cria - TSIEVP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TSIEVP
NomeObjeto: TSIEVP
TipoObjeto: TABLE
NomeTabela: TSIEVP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
 CREATE TABLE TSIEVP(
  NUEVENTO                  NUMBER(10)                    NOT NULL,
  NOMEINSTANCIA         VARCHAR2(30 BYTE)             NOT NULL,
  DESCRICAO                 VARCHAR2(100 BYTE)            NOT NULL,
  ATIVO                         VARCHAR2(1 BYTE) DEFAULT 'N'  NOT NULL,
  TIPO                             VARCHAR2(2 BYTE)              NOT NULL,
  RESOURCEID                VARCHAR2(100 BYTE),
  CONFIG                        CLOB,
  ORDEM                     NUMBER(10),
  CONSTRAINT PK_TSIEVP PRIMARY KEY (NUEVENTO),
   CONSTRAINT CKC_TIPO_TSIEVP CHECK (TIPO IS NULL OR (TIPO IN ('SP', 'RJ'))),
   CONSTRAINT CKC_ATIVO_TSIEVP CHECK (ATIVO IS NULL OR (ATIVO IN ('S', 'N')))
 )
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50801-0-0
Nro. O.S. : 1144564
Nome      : Cria - ATUALIZADO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - ATUALIZADO
NomeObjeto: ATUALIZADO
TipoObjeto: COLUMN
NomeTabela: EXECPARAMS
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE EXECPARAMS ADD ATUALIZADO NUMBER(5) DEFAULT 0
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50802-0-0
Nro. O.S. : 1144564
Nome      : Cria - EVP_SET_CAMPO_DTA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - EVP_SET_CAMPO_DTA
NomeObjeto: EVP_SET_CAMPO_DTA
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE EVP_SET_CAMPO_DTA(P_CHAVE IN VARCHAR2, P_NOME IN VARCHAR2 , P_DTA IN DATE)
AS
BEGIN
    UPDATE EXECPARAMS 
    SET DTA = P_DTA,
    ATUALIZADO = 1
    WHERE 
    IDSESSAO = P_CHAVE 
    AND SEQUENCIA = 0 
    AND NOME = P_NOME;
    
    IF SQL%ROWCOUNT = 0 THEN
        INSERT INTO EXECPARAMS (IDSESSAO,SEQUENCIA,NOME,TIPO,DTA,ATUALIZADO) VALUES(P_CHAVE,0,P_NOME,'D',P_DTA,1);
    END IF;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50803-0-1000
Nro. O.S. : 1144564
Nome      : INSERE - THOOBJ - 5080200
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE EVP_SET_CAMPO_DTA
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210000
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'EVP_SET_CAMPO_DTA' NOMEOBJ, 50802 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, '2868168f73a8537b1013808eb98faeb5' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'EVP_SET_CAMPO_DTA' and THO.hashcode = '2868168f73a8537b1013808eb98faeb5')
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50804-0-0
Nro. O.S. : 1144564
Nome      : Cria - EVP_SET_CAMPO_INT
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - EVP_SET_CAMPO_INT
NomeObjeto: EVP_SET_CAMPO_INT
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE EVP_SET_CAMPO_INT(P_CHAVE IN VARCHAR2, P_NOME IN VARCHAR2 , P_INT NUMBER )
AS
BEGIN
    UPDATE EXECPARAMS 
    SET NUMINT = P_INT,
    ATUALIZADO = 1
    WHERE 
    IDSESSAO = P_CHAVE 
    AND SEQUENCIA = 0 
    AND NOME = P_NOME;
    
    IF SQL%ROWCOUNT = 0 THEN
        INSERT INTO EXECPARAMS (IDSESSAO,SEQUENCIA,NOME,TIPO,NUMINT,ATUALIZADO) VALUES(P_CHAVE,0,P_NOME,'I',P_INT,1);
    END IF;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50805-0-1000
Nro. O.S. : 1144564
Nome      : INSERE - THOOBJ - 5080400
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE EVP_SET_CAMPO_INT
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210000
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'EVP_SET_CAMPO_INT' NOMEOBJ, 50804 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, 'a457fca9f2ff5e4ae9fc0af1d2d27e00' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'EVP_SET_CAMPO_INT' and THO.hashcode = 'a457fca9f2ff5e4ae9fc0af1d2d27e00')
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50806-0-0
Nro. O.S. : 1144564
Nome      : Cria - EVP_SET_CAMPO_TEXTO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - EVP_SET_CAMPO_TEXTO
NomeObjeto: EVP_SET_CAMPO_TEXTO
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE EVP_SET_CAMPO_TEXTO(P_CHAVE IN VARCHAR2, P_NOME IN VARCHAR2 , P_TEXTO VARCHAR2 )
AS
BEGIN
    UPDATE EXECPARAMS 
    SET TEXTO = P_TEXTO,
    ATUALIZADO = 1
    WHERE 
    IDSESSAO = P_CHAVE 
    AND SEQUENCIA = 0 
    AND NOME = P_NOME;
    
    IF SQL%ROWCOUNT = 0 THEN
        INSERT INTO EXECPARAMS (IDSESSAO,SEQUENCIA,NOME,TIPO,TEXTO,ATUALIZADO) VALUES(P_CHAVE,0,P_NOME,'S',P_TEXTO,1);
    END IF;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50807-0-1000
Nro. O.S. : 1144564
Nome      : INSERE - THOOBJ - 5080600
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE EVP_SET_CAMPO_TEXTO
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210000
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'EVP_SET_CAMPO_TEXTO' NOMEOBJ, 50806 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, 'ae0a1bb01c4f0c602a62edb6466135ad' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'EVP_SET_CAMPO_TEXTO' and THO.hashcode = 'ae0a1bb01c4f0c602a62edb6466135ad')
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50808-0-0
Nro. O.S. : 1144564
Nome      : Cria - EVP_SET_CAMPO_DEC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - EVP_SET_CAMPO_DEC
NomeObjeto: EVP_SET_CAMPO_DEC
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE EVP_SET_CAMPO_DEC(P_CHAVE IN VARCHAR2, P_NOME IN VARCHAR2 , P_DEC FLOAT )
AS
BEGIN
    UPDATE EXECPARAMS 
    SET NUMDEC = P_DEC,
    ATUALIZADO = 1
    WHERE 
    IDSESSAO = P_CHAVE 
    AND SEQUENCIA = 0 
    AND NOME = P_NOME;
    
    IF SQL%ROWCOUNT = 0 THEN
        INSERT INTO EXECPARAMS (IDSESSAO,SEQUENCIA,NOME,TIPO,NUMDEC,ATUALIZADO) VALUES(P_CHAVE,0,P_NOME,'F',P_DEC,1);
    END IF;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50809-0-1000
Nro. O.S. : 1144564
Nome      : INSERE - THOOBJ - 5080800
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE EVP_SET_CAMPO_DEC
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210000
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'EVP_SET_CAMPO_DEC' NOMEOBJ, 50808 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, '4f78f92151a06c6b3a3897b6091c6c0f' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'EVP_SET_CAMPO_DEC' and THO.hashcode = '4f78f92151a06c6b3a3897b6091c6c0f')
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50810-0-0
Nro. O.S. : 1144564
Nome      : Cria - EVP_GET_CAMPO_DTA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - EVP_GET_CAMPO_DTA
NomeObjeto: EVP_GET_CAMPO_DTA
TipoObjeto: FUNCTION
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE FUNCTION EVP_GET_CAMPO_DTA(P_CHAVE VARCHAR2, P_NOME VARCHAR2)
RETURN DATE
IS  
BEGIN
    RETURN ACT_DTA_PARAM(P_CHAVE,P_NOME);        
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50811-0-1000
Nro. O.S. : 1144564
Nome      : INSERE - THOOBJ - 5081000
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE EVP_GET_CAMPO_DTA
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210000
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'EVP_GET_CAMPO_DTA' NOMEOBJ, 50810 NUMSCRIPT, SYSDATE DTALTER, 'FUNCTION' TIPO, 'afe1051514671dda791843437a59a22e' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'EVP_GET_CAMPO_DTA' and THO.hashcode = 'afe1051514671dda791843437a59a22e')
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50812-0-0
Nro. O.S. : 1144564
Nome      : Cria - EVP_GET_CAMPO_INT
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - EVP_GET_CAMPO_INT
NomeObjeto: EVP_GET_CAMPO_INT
TipoObjeto: FUNCTION
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE FUNCTION EVP_GET_CAMPO_INT(P_CHAVE VARCHAR2, P_NOME VARCHAR2)
RETURN NUMBER
IS  
BEGIN
    RETURN ACT_INT_PARAM(P_CHAVE,P_NOME);        
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50813-0-1000
Nro. O.S. : 1144564
Nome      : INSERE - THOOBJ - 5081200
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE EVP_GET_CAMPO_INT
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210000
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'EVP_GET_CAMPO_INT' NOMEOBJ, 50812 NUMSCRIPT, SYSDATE DTALTER, 'FUNCTION' TIPO, 'c7edbda64b601c3ce3f192bccff94336' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'EVP_GET_CAMPO_INT' and THO.hashcode = 'c7edbda64b601c3ce3f192bccff94336')
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50814-0-0
Nro. O.S. : 1144564
Nome      : Cria - EVP_GET_CAMPO_DEC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - EVP_GET_CAMPO_DEC
NomeObjeto: EVP_GET_CAMPO_DEC
TipoObjeto: FUNCTION
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE FUNCTION EVP_GET_CAMPO_DEC(P_CHAVE VARCHAR2, P_NOME VARCHAR2)
RETURN FLOAT
IS  
BEGIN
    RETURN ACT_DEC_PARAM(P_CHAVE,P_NOME);        
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50815-0-1000
Nro. O.S. : 1144564
Nome      : INSERE - THOOBJ - 5081400
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE EVP_GET_CAMPO_DEC
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210000
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'EVP_GET_CAMPO_DEC' NOMEOBJ, 50814 NUMSCRIPT, SYSDATE DTALTER, 'FUNCTION' TIPO, '414af13fa213c510369cd48464882382' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'EVP_GET_CAMPO_DEC' and THO.hashcode = '414af13fa213c510369cd48464882382')
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50816-0-0
Nro. O.S. : 1144564
Nome      : Cria - EVP_GET_CAMPO_TEXTO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - EVP_GET_CAMPO_TEXTO
NomeObjeto: EVP_GET_CAMPO_TEXTO
TipoObjeto: FUNCTION
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE FUNCTION EVP_GET_CAMPO_TEXTO(P_CHAVE VARCHAR2, P_NOME VARCHAR2)
RETURN VARCHAR2
IS  
BEGIN
    RETURN ACT_TXT_PARAM(P_CHAVE,P_NOME);        
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50817-0-1000
Nro. O.S. : 1144564
Nome      : INSERE - THOOBJ - 5081600
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE EVP_GET_CAMPO_TEXTO
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210000
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'EVP_GET_CAMPO_TEXTO' NOMEOBJ, 50816 NUMSCRIPT, SYSDATE DTALTER, 'FUNCTION' TIPO, '800af07fa72013724f1d3b9ca285edcb' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'EVP_GET_CAMPO_TEXTO' and THO.hashcode = '800af07fa72013724f1d3b9ca285edcb')
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 18/04/2018 16:46:02
Num.Script: 50820-0-0
Nro. O.S. : 1099035
Nome      : Cria - TSLIPX
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TSLIPX
NomeObjeto: TSLIPX
TipoObjeto: TABLE
NomeTabela: TSLIPX
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TSLIPX
(
   CODEXEC      NUMBER (10) NOT NULL,
   CODPROD      NUMBER (10) NOT NULL,
   DIRETORIO    VARCHAR2 (30 BYTE) NOT NULL,
   TIPO         VARCHAR2 (30 BYTE) NOT NULL,
   PRIMARY KEY (CODEXEC)
)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 18/04/2018 16:46:02
Num.Script: 50821-0-0
Nro. O.S. : 1099035
Nome      : Cria - FK_TSLIPX_TGFPRO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - FK_TSLIPX_TGFPRO
NomeObjeto: FK_TSLIPX_TGFPRO
TipoObjeto: FOREIGN KEY
NomeTabela: TSLIPX
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TSLIPX ADD (
  CONSTRAINT FK_TSLIPX_TGFPRO
  FOREIGN KEY (CODPROD)
  REFERENCES TGFPRO (CODPROD)
  ON DELETE CASCADE)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 18/04/2018 16:46:02
Num.Script: 50822-0-0
Nro. O.S. : 1099035
Nome      : Cria - TSLISC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TSLISC
NomeObjeto: TSLISC
TipoObjeto: TABLE
NomeTabela: TSLISC
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TSLISC
(
   CODEXEC      NUMBER (10) NOT NULL,
   PRIMARY KEY (CODEXEC)
)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 18/04/2018 16:46:02
Num.Script: 50823-0-0
Nro. O.S. : 1099035
Nome      : Cria - FK_TSLISC_TSLIPX
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - FK_TSLISC_TSLIPX
NomeObjeto: FK_TSLISC_TSLIPX
TipoObjeto: FOREIGN KEY
NomeTabela: TSLISC
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TSLISC ADD (
  CONSTRAINT FK_TSLISC_TSLIPX
  FOREIGN KEY (CODEXEC)
  REFERENCES TSLIPX (CODEXEC)
  ON DELETE CASCADE)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 18/04/2018 16:46:02
Num.Script: 50824-0-0
Nro. O.S. : 1099035
Nome      : Cria - TSLIPV
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TSLIPV
NomeObjeto: TSLIPV
TipoObjeto: TABLE
NomeTabela: TSLIPV
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TSLIPV
(
   CODEXEC     NUMBER (10) NOT NULL,
   VENDAS      FLOAT (126),
   MARGEM      FLOAT (126),
   PRIMARY KEY (CODEXEC)
)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 18/04/2018 16:46:02
Num.Script: 50825-0-0
Nro. O.S. : 1099035
Nome      : Cria - FK_TSLIPV_TSLIPX
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - FK_TSLIPV_TSLIPX
NomeObjeto: FK_TSLIPV_TSLIPX
TipoObjeto: FOREIGN KEY
NomeTabela: TSLIPV
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TSLIPV ADD (
  CONSTRAINT FK_TSLIPV_TSLIPX
  FOREIGN KEY (CODEXEC)
  REFERENCES TSLIPX (CODEXEC)
  ON DELETE CASCADE)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 18/04/2018 16:46:02
Num.Script: 50826-0-0
Nro. O.S. : 1099035
Nome      : Cria - TSLIVM
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TSLIVM
NomeObjeto: TSLIVM
TipoObjeto: TABLE
NomeTabela: TSLIVM
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TSLIVM
(
   MES     DATE NOT NULL,
   CHAVE   VARCHAR2 (30 BYTE) NOT NULL,
   VALOR   FLOAT (126) NOT NULL,
   PRIMARY KEY (MES, CHAVE)
)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 18/04/2018 16:46:02
Num.Script: 50827-0-0
Nro. O.S. : 1099035
Nome      : Cria - TSLIVD
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TSLIVD
NomeObjeto: TSLIVD
TipoObjeto: TABLE
NomeTabela: TSLIVD
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TSLIVD
(
   DIA     DATE NOT NULL,
   CHAVE   VARCHAR2 (30 BYTE) NOT NULL,
   VALOR   FLOAT (126) NOT NULL,
   PRIMARY KEY (DIA, CHAVE)
)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 18/04/2018 16:46:02
Num.Script: 50828-0-0
Nro. O.S. : 1099035
Nome      : Cria - TSLIVA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TSLIVA
NomeObjeto: TSLIVA
TipoObjeto: TABLE
NomeTabela: TSLIVA
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TSLIVA
(
   CODEXEC     NUMBER (10) NOT NULL,
   TIPO        VARCHAR2 (30 BYTE) NOT NULL,
   CHAVE       VARCHAR2 (30 BYTE) NOT NULL,
   PRIMARY KEY (CODEXEC, TIPO, CHAVE)
)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 18/04/2018 16:46:02
Num.Script: 50829-0-0
Nro. O.S. : 1099035
Nome      : Cria - FK_TSLIVA_TSLIPX
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - FK_TSLIVA_TSLIPX
NomeObjeto: FK_TSLIVA_TSLIPX
TipoObjeto: FOREIGN KEY
NomeTabela: TSLIVA
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TSLIVA ADD (
  CONSTRAINT FK_TSLIVA_TSLIPX
  FOREIGN KEY (CODEXEC)
  REFERENCES TSLIPX (CODEXEC)
  ON DELETE CASCADE)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50831-0-0
Nro. O.S. : 1139193
Nome      : Cria - TFPFUN APRENDIZGRAVIDA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: APRENDIZGRAVIDA
TipoObjeto: COLUMN
NomeTabela: TFPFUN
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TFPFUN ADD APRENDIZGRAVIDA CHAR(1)';
   EXECUTE IMMEDIATE 'ALTER TABLE TFPFUN ADD  CONSTRAINT CKC_APRENDIZGRAVIDA_TFPFUN CHECK (APRENDIZGRAVIDA IN (''S'',''N'') OR APRENDIZGRAVIDA IS NULL )';
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50839-0-0
Nro. O.S. : 1079897
Nome      : Criar - GET_LOCAL_ORIGEM
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - GET_LOCAL_ORIGEM
NomeObjeto: GET_LOCAL_ORIGEM
TipoObjeto: FUNCTION
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE FUNCTION GET_LOCAL_ORIGEM (P_NUNOTA NUMBER, P_SEQUENCIA NUMBER) 
RETURN NUMBER AS
    P_LOCAL     NUMBER(10);
    
    PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN

    BEGIN
        SELECT MAX(ITE.CODLOCALORIG) INTO P_LOCAL
        FROM TGFITE ITE INNER JOIN TGFVAR VAR 
            ON (ITE.NUNOTA = VAR.NUNOTAORIG AND ITE.SEQUENCIA = VAR.SEQUENCIAORIG)
        WHERE VAR.NUNOTA = P_NUNOTA
             AND VAR.SEQUENCIA = P_SEQUENCIA;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            P_LOCAL := -1;
    END;
    
    RETURN P_LOCAL;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50840-0-1000
Nro. O.S. : 1079897
Nome      : INSERE - THOOBJ - 5083900
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE GET_LOCAL_ORIGEM
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210000
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'GET_LOCAL_ORIGEM' NOMEOBJ, 50839 NUMSCRIPT, SYSDATE DTALTER, 'FUNCTION' TIPO, 'a39d43f28e6b318cd82f94e32cf56d94' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'GET_LOCAL_ORIGEM' and THO.hashcode = 'a39d43f28e6b318cd82f94e32cf56d94')
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50850-0-1000
Nro. O.S. : 1079897
Nome      : INSERE - THOOBJ - 5084900
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_INC_UPD_DLT_TGFITE_ESTTERC
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210000
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_INC_UPD_DLT_TGFITE_ESTTERC' NOMEOBJ, 50849 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, 'e123502b326a036d09f4c79b9cb92964' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_INC_UPD_DLT_TGFITE_ESTTERC' and THO.hashcode = 'e123502b326a036d09f4c79b9cb92964')
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50851-0-0
Nro. O.S. : 1079897
Nome      : Altera - TRG_INC_UPD_DLT_TGFITE_ESTTERC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - TRG_INC_UPD_DLT_TGFITE_ESTTERC
NomeObjeto: TRG_INC_UPD_DLT_TGFITE_ESTTERC
TipoObjeto: TRIGGER
NomeTabela: TGFITE
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_INC_UPD_DLT_TGFITE_ESTTERC 
BEFORE INSERT OR UPDATE OR DELETE ON TGFITE 
FOR EACH ROW
DECLARE
  P_CODPARC            TGFEST.CODPARC%TYPE;
  P_CODPARCDEST        TGFCAB.CODPARCDEST%TYPE;
  P_USOPROD            TGFPRO.USOPROD%TYPE;  
  P_SINAL              NUMBER(5);
  P_COUNT              NUMBER(5);
  P_TIPO               CHAR(1);
  P_TIPMOV             CHAR(1);
  ERROR                EXCEPTION;
  ERRMSG               VARCHAR2(255);
  P_VALIDAR            BOOLEAN;
  P_DTVAL              DATE;
  P_DTFABRICACAO       DATE;
  P_CODLOCAL_NEW       NUMBER(10);
  P_CODLOCAL_OLD       NUMBER(10);
  P_CODCFOENTRADA      NUMBER(10);
  P_CODCFOENTRADA_FORA NUMBER(10);
  P_CODPARCCONSIG      NUMBER(10);
  P_TOPDENEGADA        CHAR(1);
  P_CODLOCAL_ORIGEM NUMBER(10);

BEGIN

  -- VERIFICANDO SE O CLIENTE UTILIZA ESTA FUNCIONALIDADE
  SELECT COUNT(*) INTO P_COUNT
  FROM TSIVARBD
  WHERE UTILIZA_ESTTERC = 'N';
  IF P_COUNT > 0 THEN 
    RETURN;
  END IF;

  IF STP_GET_ATUALIZANDO THEN
    RETURN;
  END IF;
  
  SELECT COUNT (1) INTO P_COUNT
  FROM TSIPAR
  WHERE CHAVE = 'SBPRODUTO';

  IF (P_COUNT > 0) THEN
    RETURN;
  END IF;
  
/* 
 sincronização de dados
 */
  P_VALIDAR := Fpodevalidar('TGFITE');
  
    -- OS 1079897 Não permitir mudar o local entre a devolução e a nota de venda
   BEGIN
    SELECT TIPMOV
    INTO P_TIPMOV
    FROM TGFCAB
    WHERE NUNOTA = :NEW.NUNOTA;
   EXCEPTION
    WHEN NO_DATA_FOUND THEN
        P_TIPMOV := '';
   END;
   
   IF (UPDATING AND  (:NEW.TERCEIROS = 'S' AND :NEW.ATUALESTTERC <> 'N') AND (P_TIPMOV = 'D')) THEN
        P_CODLOCAL_ORIGEM := GET_LOCAL_ORIGEM(:NEW.NUNOTA, :NEW.SEQUENCIA);
        IF  (:NEW.CODLOCALORIG <> P_CODLOCAL_ORIGEM) THEN
             ERRMSG :=  'Não é permitido alterar o Código de Local na Devolução.';
             RAISE ERROR;
        END IF;
   END IF;
    -- FIM OS 1079897 Não permitir mudar o local entre a devolução e a nota de venda

  IF (INSERTING OR UPDATING) THEN
      BEGIN 
        SELECT CASE WHEN C.STATUSNFE = 'D' THEN 'S' ELSE 'N' END
        INTO P_TOPDENEGADA
        FROM TGFCAB C
        WHERE C.NUNOTA = :NEW.NUNOTA;
      EXCEPTION WHEN NO_DATA_FOUND THEN      
        P_TOPDENEGADA := 'N'; --Não é denegada
      END;
  END IF;
    
  IF P_VALIDAR AND (INSERTING OR UPDATING) AND ( P_TOPDENEGADA = 'N' )THEN
    BEGIN
      SELECT C.TIPMOV, C.CODPARC
      INTO P_TIPMOV, P_CODPARC
      FROM TGFCAB C
      WHERE C.NUNOTA = :NEW.NUNOTA;
    EXCEPTION WHEN NO_DATA_FOUND THEN
      P_TIPMOV := '';
      P_CODPARC := 0;
    END;
    
    BEGIN
      SELECT CODPARCCONSIG
      INTO P_CODPARCCONSIG
      FROM TGFPRO
      WHERE CODPROD = :NEW.CODPROD;
    EXCEPTION WHEN NO_DATA_FOUND THEN
      P_CODPARCCONSIG := 0;
      P_USOPROD := 'S'; --Não valida
    END;
    
    P_USOPROD := :NEW.USOPROD;  -- OS 941793
    
    ERRMSG := NULL;
    IF :NEW.ATUALESTTERC = 'P' AND :NEW.ATUALESTOQUE = 1 THEN
      ERRMSG := 'Para somar o estoque com terceiros, não pode entrar estoque próprio.';
    END IF;
    IF :NEW.ATUALESTTERC = 'R' AND :NEW.ATUALESTOQUE = -1 THEN
      ERRMSG := 'Para subtrair o estoque com terceiros, não pode baixar estoque próprio.';
    END IF;
    IF :NEW.ATUALESTTERC = 'T' AND :NEW.ATUALESTOQUE = -1 AND NOT :NEW.CODCFO IN (5116, 5922, 6116, 6922) THEN
      ERRMSG := 'Para somar o estoque de terceiros, não pode baixar estoque próprio.';
    END IF;
    IF :NEW.ATUALESTTERC = 'D' AND :NEW.ATUALESTOQUE = 1 THEN
      ERRMSG := 'Para subtrair o estoque de terceiros, não pode entrar estoque próprio.';
    END IF;
    IF P_USOPROD <> 'S' THEN -- NÃO VALIDA ESTOQUE EM SERVIÇO
      IF P_CODPARCCONSIG > 0 THEN 
        IF P_TIPMOV IN ('O', 'C', 'E') AND P_CODPARCCONSIG <> P_CODPARC THEN
          ERRMSG := 'Produto consignado, o parceiro dever ser o mesmo que esta configurado no cadastro do produto.';
        END IF;
        IF P_TIPMOV IN ('O', 'C') AND (:NEW.ATUALESTTERC <> 'T' OR :NEW.ATUALESTOQUE <> 1) THEN
          IF NOT (:NEW.ATUALESTTERC = 'D' AND :NEW.ATUALESTOQUE = 0) THEN  -- Compra simbolica movimenta apenas estoque de terceiro.
            ERRMSG := 'Produto consignado, deve dar entrada no estoque proprio e de terceiros.'||CHR(13)||
                      'Ou baixar estoque de terceiro e não movimentar estoque próprio';
          END IF;
        END IF;
        IF P_TIPMOV = 'E' AND (:NEW.ATUALESTTERC <> 'D' OR :NEW.ATUALESTOQUE <> -1) THEN
          ERRMSG := 'Produto consignado, deve dar saída no estoque próprio e de terceiros.';
        END IF;
        IF P_TIPMOV IN ('P', 'V', 'D') AND :NEW.ATUALESTTERC IN ('T','D') THEN
          ERRMSG := 'Venda não pode atualizar estoque de terceiros.';
        END IF;
        IF :NEW.ATUALESTTERC IN ('P', 'R') THEN
          ERRMSG := 'Produto consignado, não pode atualizar estoque próprio em poder de terceiros.';
        END IF;
      ELSIF P_USOPROD <> 'T' AND :NEW.CODCFO NOT IN (5116, 6116, 5922, 6922) THEN
        IF (:NEW.ATUALESTTERC IN ('T', 'D') AND :NEW.ATUALESTOQUE <> 0) THEN
          ERRMSG := 'Produto não é consignado, não pode atualizar estoque de terceiros e próprio simultâneamente.';
        END IF;
      END IF;
    END IF;
    IF ERRMSG IS NOT NULL THEN 
      RAISE ERROR;
    END IF;
  END IF;

  IF :NEW.TERCEIROS = 'S' AND :NEW.ATUALESTTERC <> 'N' AND
     (NVL(:NEW.CODLOCALTERC,0) = 0 OR
      (UPDATING AND (NVL(:OLD.CODEMP,0) <> NVL(:NEW.CODEMP,0) OR 
                    NVL(:NEW.CODLOCALORIG,0) <> NVL(:OLD.CODLOCALORIG, 0)))) THEN
                    
      SELECT CASE WHEN NVL(CODLOCALTERC,0) = 0 THEN :NEW.CODLOCALORIG ELSE CODLOCALTERC END 
      INTO P_CODLOCAL_NEW      FROM TGFEMP
      WHERE CODEMP = :NEW.CODEMP;
      
    :NEW.CODLOCALTERC := P_CODLOCAL_NEW;          
  ELSE
    P_CODLOCAL_NEW := :NEW.CODLOCALTERC;
  END IF;
    
    P_CODLOCAL_OLD := NVL(:OLD.CODLOCALTERC,:OLD.CODLOCALORIG);    
    
      
   /* Pega deleção e update*/
  IF NOT INSERTING AND :OLD.TERCEIROS = 'S' AND :OLD.ATUALESTTERC <> 'N' THEN
    IF DELETING OR (:OLD.ATUALESTTERC <> :NEW.ATUALESTTERC) OR 
                    (:OLD.QTDNEG <> :NEW.QTDNEG) OR 
                    (:OLD.TERCEIROS <> :NEW.TERCEIROS) OR 
                    (P_CODLOCAL_OLD <> P_CODLOCAL_NEW) OR 
                    (:OLD.CONTROLE <> :NEW.CONTROLE) OR 
                    (:OLD.CODPROD <> :NEW.CODPROD) OR 
                    (:OLD.CODEMP <> :NEW.CODEMP) THEN
      BEGIN         
        SELECT C.CODPARC, NVL(C.CODPARCDEST,0), NVL(T.CODCFO_ENTRADA,0), NVL(T.CODCFO_ENTRADA_FORA,0) 
          INTO P_CODPARC, P_CODPARCDEST       , P_CODCFOENTRADA        , P_CODCFOENTRADA_FORA 
        FROM TGFCAB C
           , TGFTOP T
        WHERE C.NUNOTA = :OLD.NUNOTA
          AND C.CODTIPOPER = T.CODTIPOPER
          AND C.DHTIPOPER = T.DHALTER;          
      EXCEPTION WHEN NO_DATA_FOUND THEN 
        SELECT C.CODPARC, NVL(C.CODPARCDEST,0), NVL(T.CODCFO_ENTRADA,0), NVL(T.CODCFO_ENTRADA_FORA,0)
          INTO P_CODPARC, P_CODPARCDEST       , P_CODCFOENTRADA        , P_CODCFOENTRADA_FORA
        FROM TGFCAB_DLT C        
           , TGFTOP T
        WHERE C.NUNOTA = :OLD.NUNOTA
          AND C.CODTIPOPER = T.CODTIPOPER
          AND C.DHTIPOPER = T.DHALTER;          
      END;
         
      IF ((P_CODCFOENTRADA IN (1122,2122) OR 
          P_CODCFOENTRADA_FORA IN (1122,2122)) AND
      (:OLD.ATUALESTTERC IN ('P', 'T'))) THEN
       P_CODPARC := P_CODPARCDEST;
      END IF;
            
      IF(P_CODPARC =0) THEN
        ERRMSG := 'Parceiro 0 é inválido para controle de estoque com terceiros.';
        RAISE ERROR;
      END IF;
      
      IF (:OLD.ATUALESTTERC IN ('P', 'T')) THEN
        P_SINAL := CASE WHEN :OLD.SEQUENCIA > 0 THEN   1 ELSE -1 END;
      ELSE
        P_SINAL := CASE WHEN :OLD.SEQUENCIA > 0 THEN  -1 ELSE  1 END;
      END IF;
      
      IF (:OLD.ATUALESTTERC IN ('P', 'R')) THEN
        P_TIPO := 'P';
      ELSE
        P_TIPO := 'T';
      END IF;
      
      SELECT COUNT(1)
      INTO P_COUNT
      FROM TGFEST
      WHERE CODEMP = :OLD.CODEMP
      AND CODLOCAL = P_CODLOCAL_OLD
      AND CODPROD = :OLD.CODPROD
      AND CONTROLE = :OLD.CONTROLE
      AND CODPARC = P_CODPARC
      AND TIPO = P_TIPO;
      
      IF(P_COUNT = 0) OR (P_COUNT IS NULL) THEN
          SELECT MIN(DTVAL), MIN(DTFABRICACAO) 
          INTO P_DTVAL, P_DTFABRICACAO 
        FROM TGFEST 
        WHERE CODPARC = 0 
          AND CODPROD = :OLD.CODPROD 
          AND CONTROLE = :OLD.CONTROLE;
        INSERT INTO TGFEST(CODEMP, CODLOCAL, CODPROD, CONTROLE, ESTOQUE, RESERVADO, CODPARC, TIPO, DTVAL, DTFABRICACAO, STATUSLOTE)
        VALUES (:OLD.CODEMP, P_CODLOCAL_OLD, :OLD.CODPROD, :OLD.CONTROLE, :OLD.QTDNEG, 0, P_CODPARC, P_TIPO, P_DTVAL, P_DTFABRICACAO, :OLD.STATUSLOTE);
      ELSE
        UPDATE TGFEST SET
          ESTOQUE = ESTOQUE - (:OLD.QTDNEG * P_SINAL)
        WHERE CODEMP = :OLD.CODEMP
        AND CODLOCAL = P_CODLOCAL_OLD
        AND CODPROD = :OLD.CODPROD
        AND CONTROLE = :OLD.CONTROLE
        AND CODPARC = P_CODPARC
        AND TIPO = P_TIPO;
      END IF;
    END IF;
  END IF;

   /* Pega inserção ou update*/
  IF NOT DELETING AND :NEW.TERCEIROS = 'S' AND :NEW.ATUALESTTERC <> 'N' THEN
    IF INSERTING OR 
       (:OLD.ATUALESTTERC <> :NEW.ATUALESTTERC) OR 
       (:OLD.QTDNEG <> :NEW.QTDNEG) OR 
       (:OLD.TERCEIROS <> :NEW.TERCEIROS) OR 
       (P_CODLOCAL_OLD <> P_CODLOCAL_NEW) OR 
       (:OLD.CONTROLE <> :NEW.CONTROLE) OR 
       (:OLD.CODPROD <> :NEW.CODPROD) OR 
       (:OLD.CODEMP <> :NEW.CODEMP) THEN
         
      SELECT C.CODPARC, NVL(C.CODPARCDEST,0), NVL(T.CODCFO_ENTRADA,0), NVL(T.CODCFO_ENTRADA_FORA,0) 
        INTO P_CODPARC, P_CODPARCDEST       , P_CODCFOENTRADA        , P_CODCFOENTRADA_FORA 
      FROM TGFCAB C
         , TGFTOP T
      WHERE C.NUNOTA = :NEW.NUNOTA
        AND C.CODTIPOPER = T.CODTIPOPER
        AND C.DHTIPOPER = T.DHALTER;
        
      IF ((P_CODCFOENTRADA IN (1122,2122) OR 
           (P_CODCFOENTRADA_FORA IN (1122,2122)) AND
         (:NEW.ATUALESTTERC IN ('P', 'T')))) THEN
          P_CODPARC := P_CODPARCDEST;
      END IF;          
        
      IF(P_CODPARC = 0) THEN
        ERRMSG := 'Parceiro 0 é inválido para controle de estoque com terceiros.';
        RAISE ERROR;
      END IF;
      
      IF (:NEW.ATUALESTTERC IN ('P', 'T')) THEN
        P_SINAL := CASE WHEN :NEW.SEQUENCIA > 0 THEN   1 ELSE -1 END;
      ELSE
        P_SINAL := CASE WHEN :NEW.SEQUENCIA>0 THEN  -1 ELSE  1 END;
      END IF;
      
      IF (:NEW.ATUALESTTERC IN ('P', 'R')) THEN
        P_TIPO := 'P';
      ELSE
        P_TIPO := 'T';
      END IF;

      SELECT COUNT(1)
      INTO P_COUNT
      FROM TGFEST
      WHERE CODEMP = :NEW.CODEMP
      AND CODLOCAL = P_CODLOCAL_NEW
      AND CODPROD = :NEW.CODPROD
      AND CONTROLE = :NEW.CONTROLE
      AND CODPARC = P_CODPARC
      AND TIPO = P_TIPO;
      IF (P_COUNT = 0) OR (P_COUNT IS NULL) THEN
          SELECT MIN(DTVAL), MIN(DTFABRICACAO) 
          INTO P_DTVAL, P_DTFABRICACAO
        FROM TGFEST
        WHERE CODPARC = 0 
          AND CODPROD = :NEW.CODPROD 
          AND CONTROLE = :NEW.CONTROLE;
                    
        INSERT INTO TGFEST(CODEMP, CODLOCAL, CODPROD, CONTROLE, ESTOQUE, RESERVADO, CODPARC, TIPO, DTVAL, DTFABRICACAO, STATUSLOTE)
        VALUES (:NEW.CODEMP, P_CODLOCAL_NEW, :NEW.CODPROD, :NEW.CONTROLE, :NEW.QTDNEG, 0, P_CODPARC, P_TIPO, P_DTVAL, P_DTFABRICACAO, :NEW.STATUSLOTE);
      ELSE 
        UPDATE TGFEST SET
        ESTOQUE = ESTOQUE + (:NEW.QTDNEG * P_SINAL)
        WHERE CODEMP = :NEW.CODEMP
        AND CODLOCAL =  P_CODLOCAL_NEW
        AND CODPROD = :NEW.CODPROD
        AND CONTROLE = :NEW.CONTROLE
        AND CODPARC = P_CODPARC
        AND TIPO = P_TIPO;
        
        /*
         Apaga a linha da tgfest se ficar linha com estoque zero, 
         Foi comentado porque ao apgar essa linha, não sei porque a aplicação muda o tipo do campo atualestterc e terceiro para não, dessa forma não funciona mais.
        SELECT COUNT(1) 
        INTO 
        P_COUNT
        FROM TGFEST
        WHERE CODEMP = :NEW.CODEMP
        AND CODLOCAL = P_CODLOCAL_NEW
        AND CODPROD = :NEW.CODPROD
        AND CONTROLE = :NEW.CONTROLE
        AND CODPARC = P_CODPARC
        AND ESTOQUE = 0 
        AND RESERVADO = 0
        AND ESTMIN = 0 
        AND ESTMAX = 0 
        AND TRIM(CODBARRA) IS NULL
        AND DTVAL IS NULL
        AND TIPO = P_TIPO;
        IF (P_COUNT>0) THEN 
          DELETE FROM TGFEST
          WHERE CODEMP = :NEW.CODEMP
          AND CODLOCAL = P_CODLOCAL_NEW
          AND CODPROD = :NEW.CODPROD
          AND CONTROLE = :NEW.CONTROLE
          AND CODPARC = P_CODPARC
          AND TIPO = P_TIPO;
        END IF;
        */
      END IF;
    END IF;
  END IF;
 
  RETURN;
   
EXCEPTION
  WHEN ERROR THEN
    /* 
    Sincronização de dados não faz validações
    */
    IF (P_VALIDAR) THEN 
      RAISE_APPLICATION_ERROR(-20101, ERRMSG);
    END IF; 

END ;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50852-0-1000
Nro. O.S. : 1079897
Nome      : INSERE - THOOBJ - 5085100
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_INC_UPD_DLT_TGFITE_ESTTERC
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210000
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_INC_UPD_DLT_TGFITE_ESTTERC' NOMEOBJ, 50851 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, 'e123502b326a036d09f4c79b9cb92964' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_INC_UPD_DLT_TGFITE_ESTTERC' and THO.hashcode = 'e123502b326a036d09f4c79b9cb92964')
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50862-0-0
Nro. O.S. : 1146976
Nome      : Drop - CHK_STATUS_EVTLOTE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - CHK_STATUS_EVTLOTE
NomeObjeto: CHK_STATUS_EVTLOTE
TipoObjeto: CONSTRAINT
NomeTabela: EVTLOTE
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE EVTLOTE DROP CONSTRAINT CHK_STATUS_EVTLOTE
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50863-0-0
Nro. O.S. : 1146976
Nome      : Cria - CHK_STATUS_EVTLOTE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - CHK_STATUS_EVTLOTE
NomeObjeto: CHK_STATUS_EVTLOTE
TipoObjeto: CONSTRAINT
NomeTabela: EVTLOTE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE EVTLOTE ADD CONSTRAINT CHK_STATUS_EVTLOTE CHECK (STATUS IN ('P','I','C','E','F','T','V','R','Q','X','Y','Z','D'))
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50864-0-0
Nro. O.S. : 1146976
Nome      : Cria - EVTLOTE_CONS
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - EVTLOTE_CONS
NomeObjeto: EVTLOTE_CONS
TipoObjeto: TABLE
NomeTabela: EVTLOTE_CONS
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE EVTLOTE_CONS
(
  NULOTE                    NUMBER(10)                   NOT NULL,
  DHCONS                   DATE                             DEFAULT SYSDATE  NOT NULL,
  CODRESPOSTA         VARCHAR2(8),
  MSG                          VARCHAR2(255),
  CONSTRAINT PK_EVTLOTE_CONS PRIMARY KEY  (NULOTE,DHCONS)
)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50865-0-0
Nro. O.S. : 1146976
Nome      : Cria - EVTLOTE_DISC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - EVTLOTE_DISC
NomeObjeto: EVTLOTE_DISC
TipoObjeto: TABLE
NomeTabela: EVTLOTE_DISC
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE EVTLOTE_DISC(
  NULOTE                NUMBER(10),
  CODEMP               NUMBER(5),
  DHINC                  DATE,
  SEQEVENTO         NUMBER(10),
  REFERENCIA        DATE,
  CHAVE                 VARCHAR2(255),
  TPAMB                 NUMBER(5)                      NOT NULL,
  SEQUENCIA         NUMBER(5),
  CONSTRAINT PK_EVTLOTE_DISC PRIMARY KEY (NULOTE, CODEMP, DHINC, SEQEVENTO)
)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50903-0-0
Nro. O.S. : 1146301
Nome      : Dropa - CKC_CODTRIB70REDST_TGFEMP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropa - CKC_CODTRIB70REDST_TGFEMP
NomeObjeto: CKC_CODTRIB70REDST_TGFEMP
TipoObjeto: CONSTRAINT
NomeTabela: TGFEMP
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFEMP DROP CONSTRAINT CKC_CODTRIB70REDST_TGFEMP
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50904-0-0
Nro. O.S. : 1146301
Nome      : Cria - CKC_CODTRIB70REDST_TGFEMP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - CKC_CODTRIB70REDST_TGFEMP
NomeObjeto: CKC_CODTRIB70REDST_TGFEMP
TipoObjeto: CONSTRAINT
NomeTabela: TGFEMP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFEMP ADD CONSTRAINT CKC_CODTRIB70REDST_TGFEMP CHECK (CODTRIB70REDST IN ('I','O','X'))
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50911-0-0
Nro. O.S. : 1144564
Nome      : Altera - TSIBTA RESOURCEID
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - TSIBTA RESOURCEID
NomeObjeto: RESOURCEID
TipoObjeto: COLUMN
NomeTabela: TSIBTA
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TSIBTA MODIFY RESOURCEID VARCHAR2(4000)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50912-0-0
Nro. O.S. : 1144564
Nome      : Altera - TSIEVP RESOURCEID
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - TSIEVP RESOURCEID
NomeObjeto: RESOURCEID
TipoObjeto: COLUMN
NomeTabela: TSIEVP
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TSIEVP MODIFY RESOURCEID VARCHAR2(4000)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50933-0-0
Nro. O.S. : 1144111
Nome      : Cria - TGFEDIFRE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TGFEDIFRE
NomeObjeto: TGFEDIFRE
TipoObjeto: TABLE
NomeTabela: TGFEDIFRE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TGFEDIFRE (
  NUEDI           NUMBER(10)                      NOT NULL,
  DHIMPORTACAO    DATE            DEFAULT SYSDATE NOT NULL,
  CODUSU          NUMBER(5)       DEFAULT 0       NOT NULL,
  NOMEARQUIVO     VARCHAR2(255),
  QTDCTRC         NUMBER(5),
  VLRCTRCS        FLOAT,
  QTDNOTAS        NUMBER(5),
  VLRNOTAS        FLOAT,
  VLRFRETENFS     FLOAT,
  NURENEG         NUMBER(10),
  CODPARCTRANSP   NUMBER(10),
  ORDEMCARGA      NUMBER(10),
  CODEMP          NUMBER(5)
)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50934-0-0
Nro. O.S. : 1144111
Nome      : Cria - PK_TGFEDIFRE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - PK_TGFEDIFRE
NomeObjeto: PK_TGFEDIFRE
TipoObjeto: PRIMARY KEY
NomeTabela: TGFEDIFRE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFEDIFRE ADD 
  CONSTRAINT PK_TGFEDIFRE
  PRIMARY KEY
  (NUEDI)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50935-0-0
Nro. O.S. : 1144111
Nome      : Cria - TGFEDIFRE_I01
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TGFEDIFRE_I01
NomeObjeto: TGFEDIFRE_I01
TipoObjeto: INDEX
NomeTabela: TGFEDIFRE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE INDEX TGFEDIFRE_I01 ON TGFEDIFRE
(CODPARCTRANSP)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50936-0-0
Nro. O.S. : 1144111
Nome      : Cria - TGFEDIFRE_I02
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TGFEDIFRE_I02
NomeObjeto: TGFEDIFRE_I02
TipoObjeto: INDEX
NomeTabela: TGFEDIFRE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE INDEX TGFEDIFRE_I02 ON TGFEDIFRE
(DHIMPORTACAO)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50937-0-0
Nro. O.S. : 1144111
Nome      : Cria - TGFEDIFRE_I03
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TGFEDIFRE_I03
NomeObjeto: TGFEDIFRE_I03
TipoObjeto: INDEX
NomeTabela: TGFEDIFRE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE INDEX TGFEDIFRE_I03 ON TGFEDIFRE
(CODEMP, ORDEMCARGA)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50938-0-0
Nro. O.S. : 1144111
Nome      : Cria - TGFFRE NUEDI
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TGFFRE NUEDI
NomeObjeto: NUEDI
TipoObjeto: COLUMN
NomeTabela: TGFFRE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFFRE ADD NUEDI NUMBER(10)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50939-0-0
Nro. O.S. : 1144111
Nome      : Cria - FK_TGFFRE_NUEDI_TGFEDIFRE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - FK_TGFFRE_NUEDI_TGFEDIFRE
NomeObjeto: FK_TGFFRE_NUEDI_TGFEDIFRE
TipoObjeto: FOREIGN KEY
NomeTabela: TGFFRE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFFRE ADD 
  CONSTRAINT FK_TGFFRE_NUEDI_TGFEDIFRE 
  FOREIGN KEY (NUEDI) 
  REFERENCES TGFEDIFRE (NUEDI)
  ENABLE VALIDATE
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50940-0-0
Nro. O.S. : 1144111
Nome      : Cria - TGFFRE_I07
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TGFFRE_I07
NomeObjeto: TGFFRE_I07
TipoObjeto: INDEX
NomeTabela: TGFFRE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE INDEX TGFFRE_I07 ON TGFFRE
(NUEDI)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50943-0-0
Nro. O.S. : 1148088
Nome      : Cria - TFPAVI OBSERVACAODET
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TFPAVI OBSERVACAODET
NomeObjeto: OBSERVACAODET
TipoObjeto: COLUMN
NomeTabela: TFPAVI
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPAVI ADD OBSERVACAODET VARCHAR2(255)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50944-0-0
Nro. O.S. : 1148088
Nome      : Cria - TFPAVI OBSERVACAOCANC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TFPAVI OBSERVACAOCANC
NomeObjeto: OBSERVACAOCANC
TipoObjeto: COLUMN
NomeTabela: TFPAVI
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPAVI ADD OBSERVACAOCANC VARCHAR2(255)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50949-0-0
Nro. O.S. : 1147426
Nome      : Cria - TFPOCO ORIGRETIF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TFPOCO ORIGRETIF
NomeObjeto: ORIGRETIF
TipoObjeto: COLUMN
NomeTabela: TFPOCO
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPOCO ADD ORIGRETIF NUMBER(5) DEFAULT 0 CONSTRAINT CKC_ORIGRETIF_TFPOCO CHECK (ORIGRETIF IN (0, 1, 2, 3))
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50950-0-0
Nro. O.S. : 1147426
Nome      : Cria - TFPOCO NUPROCESSO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TFPOCO NUPROCESSO
NomeObjeto: NUPROCESSO
TipoObjeto: COLUMN
NomeTabela: TFPOCO
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPOCO ADD NUPROCESSO NUMBER(10)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50951-0-0
Nro. O.S. : 1147426
Nome      : Cria - FK_TFPOCO_NUPROCESSO_TFPPSS
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - FK_TFPOCO_NUPROCESSO_TFPPSS
NomeObjeto: FK_TFPOCO_NUPROCESSO_TFPPSS
TipoObjeto: FOREIGN KEY
NomeTabela: TFPOCO
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPOCO ADD CONSTRAINT FK_TFPOCO_NUPROCESSO_TFPPSS FOREIGN KEY (NUPROCESSO) REFERENCES TFPPSS (NUPROCESSO)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50952-0-0
Nro. O.S. : 1147426
Nome      : Cria - TFPATT
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TFPATT
NomeObjeto: TFPATT
TipoObjeto: TABLE
NomeTabela: TFPATT
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPATT
(
  NUOCOR           NUMBER(10)                   NOT NULL,
  NUATT            NUMBER(5)                    NOT NULL,
  IDEOC            NUMBER(5) CONSTRAINT CKC_IDEOC_TFPATT CHECK (IDEOC IN (1, 2, 3)),
  CODCID           VARCHAR2(4),
  DIASAFASTAMENTO  NUMBER(5),
  EMITENTE         VARCHAR2(70),
  NROC             VARCHAR2(14),
  UFOC             VARCHAR2(2),
  DHALTER          DATE  DEFAULT SYSDATE        NOT NULL,
  CONSTRAINT PK_TFPATT PRIMARY KEY (NUOCOR, NUATT),
  CONSTRAINT FK_TFPATT_TFPOCO FOREIGN KEY (NUOCOR) REFERENCES TFPOCO (NUOCOR)
)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50952-1-0
Nro. O.S. : 1147426
Nome      : Cria - TFPATT CODUSU
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TFPATT CODUSU
NomeObjeto: CODUSU
TipoObjeto: COLUMN
NomeTabela: TFPATT
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE P_COUNT NUMBER(5);
BEGIN
  SELECT COUNT(1) INTO P_COUNT
  FROM USER_TAB_COLUMNS
  WHERE TABLE_NAME = 'TSIUSU'
    AND COLUMN_NAME = 'CODUSU'
    AND DATA_PRECISION = 5;
  
  IF P_COUNT > 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE TFPATT ADD CODUSU NUMBER(5)';
  ELSE
    EXECUTE IMMEDIATE 'ALTER TABLE TFPATT ADD CODUSU NUMBER(10)';
  END IF;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50952-2-0
Nro. O.S. : 1147426
Nome      : Cria - FK_TFPATT_TSIUSU
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - FK_TFPATT_TSIUSU
NomeObjeto: FK_TFPATT_TSIUSU
TipoObjeto: FOREIGN KEY
NomeTabela: TFPATT
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPATT ADD CONSTRAINT FK_TFPATT_TSIUSU FOREIGN KEY (CODUSU) REFERENCES TSIUSU (CODUSU)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50961-0-0
Nro. O.S. : 1140528
Nome      : Deletar - TRDGRD
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Deletar - TRDGRD
NomeObjeto: TRDGRD
TipoObjeto: TABLE
NomeTabela: TRDGRD
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
DELETE TRDGRD
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50962-0-0
Nro. O.S. : 1140528
Nome      : Deletar - TRDCAM
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Deletar - TRDCAM
NomeObjeto: TRDCAM
TipoObjeto: TABLE
NomeTabela: TRDCAM
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
DELETE TRDCAM
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50963-0-0
Nro. O.S. : 1140528
Nome      : Deletar - TRDFIL
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Deletar - TRDFIL
NomeObjeto: TRDFIL
TipoObjeto: TABLE
NomeTabela: TRDFIL
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
DELETE TRDFIL
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50964-0-0
Nro. O.S. : 1140528
Nome      : Deletar - TRDTEL
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Deletar - TRDTEL
NomeObjeto: TRDTEL
TipoObjeto: TABLE
NomeTabela: TRDTEL
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
DELETE TRDTEL
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50968-0-0
Nro. O.S. : 1103227
Nome      : Cria - TGFCAB NUCFR
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: NUCFR
TipoObjeto: COLUMN
NomeTabela: TGFCAB
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFCAB ADD NUCFR DECIMAL(10, 0)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50969-0-0
Nro. O.S. : 1103227
Nome      : Cria - TGFFNF TIPFRETE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: TIPFRETE
TipoObjeto: COLUMN
NomeTabela: TGFFNF
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFFNF ADD TIPFRETE CHAR(1)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 26/02/2018 10:23:31
Num.Script: 50989-0-0
Nro. O.S. : 1147718
Nome      : Altera - VARIAVEIS_PKG
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VARIAVEIS_PKG
NomeObjeto: VARIAVEIS_PKG
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SEMPRE
Ocorrencia: 4210000
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PACKAGE VARIAVEIS_PKG AS
   V_DHCARGAPKG                    DATE := NULL;
   V_DHPARAMETROS                  DATE := SYSDATE;
   V_TEMPRODUTOSEMFAMILIA          CHAR( 1 ) := 'N';
   V_INSERCAOAUTOMATICA            CHAR( 1 ) := 'N';
   V_CONSIDERARIMPOSTORETIDONOTA   CHAR( 1 ) := 'N';
   V_CUSTOPOREMPRESA               CHAR( 1 ) := 'N';
   V_CUSTOPORLOCAL                 CHAR( 1 ) := 'N';
   V_CUSTOPORCONTROLE              CHAR( 1 ) := 'N';
   V_SOMACUSTOMEDIODASMPSNOPA      CHAR( 1 ) := 'N';
   V_FATURANDOESTOQUECONFERIDO     CHAR(1) := 'N';   
   V_DECIMAISPARACUSTO             INTEGER := 2;
   V_EMPRESADESMEMBRARCUSTO        INTEGER := 0;
   V_DTINICIOCONTEST               DATE := ADD_MONTHS( SYSDATE, -1200 );
   V_ATUALIZANDO                   BOOLEAN := FALSE;
   V_TEMOTICAS                     CHAR( 1 ) := 'N';
   CODBARRA_EST                    CHAR( 3 ) := ' ';
   V_ALTERADO_PELA_CAB             BOOLEAN := FALSE;
   V_VALEST_BLOQWMS_FAT            CHAR( 1 ) := 'S';
   V_DTLIMALTERCUSTO               DATE := TRUNC( SYSDATE - 90 );
   V_DLT_REG_COMPENSACAO           BOOLEAN := FALSE;
   V_DLT_MOV_COMISSAO              BOOLEAN := TRUE;
   V_DLT_PROD                      BOOLEAN := FALSE;
   V_GERANDO_REMESSA               BOOLEAN := FALSE;
   V_IPINACOMPRASEMDESCONTO        CHAR( 1 ) := 'N';
   V_IPINAVENDASEMDESCONTO         CHAR( 1 ) := 'N';
   V_SOMARSERVICONOTA              CHAR( 1 ) := 'S';
   V_CODOBSGARANTIDO               INTEGER;
   V_CODIMPGARANTIDO               INTEGER;
   V_TEMFUNRURAL                   CHAR( 1 );
   V_TOPSREQCON                    VARCHAR2( 400 );
   V_NATVA                         INTEGER;
   V_NATVT                         INTEGER;
   V_FORMULAFRETE_IRF              VARCHAR2( 4000 );
   V_VLRMINRETENCAOIR              FLOAT;
   V_TOPPISREDAQUIS                INTEGER;
   V_CODTIPTIT_TROCA               NUMBER(5) := NULL; 
   V_DESMEMBRANDOBEM               CHAR(1) := 'N';
   V_USACODVOLPARC                 CHAR( 1 ) := 'N';
   V_PROCPROVFIN_BATCH             INTEGER := 0;  
   V_FATURARESTWMS                 CHAR(1);
   V_DISTJDCONF                    BOOLEAN := FALSE;
   V_RATDESCSEMIMP                 CHAR(1) := 'N';
   V_EDITMPSOMAEXT                 CHAR(1) := 'N';
   V_TIPCANCELATEF                 CHAR(1) := NULL;
   V_PROCESSO_ATUAL_CUSTO          VARCHAR2(255) := NULL;
   -- VERIFICA SE O CLIENTE UTILIZA DETERMINADA FUNCIONALIDADE
   V_UTILIZA_CERTIFIC               CHAR( 1 );
   V_UTILIZA_TGAMOV                 CHAR( 1 );
   V_UTILIZA_GRANDES_CARGAS         CHAR( 1 );
   V_UTILIZA_ESTTERC                CHAR( 1 );
   V_UTILIZA_METAS                  CHAR( 1 );
   V_UTILIZA_FLEX                   CHAR( 1 );
   V_UTILIZA_INDENIZ                CHAR( 1 );
   V_UTILIZA_TGFCPP                 CHAR( 1 );
   V_UTILIZA_RASTEST                CHAR( 1 );
   V_UTILIZA_TCIBEM                 CHAR( 1 );
   V_UTILIZA_VERIFCORTE             CHAR( 1 );
   V_UTILIZA_DAV                    CHAR( 1 );
   V_UTILIZA_TRANSG                 CHAR( 1 );
   V_UTILIZA_HCRUZADAS              CHAR( 1 );
   V_USA_CONTA_BAIXA              CHAR( 1 );
   
   V_IGNORE_OCORR_BAIXA            BOOLEAN := FALSE;

   V_NUNOTA_LIV_PERMITEALTERAR        NUMBER( 10 );
   V_DBHASHCODE                    VARCHAR2( 400 );

   TYPE TYPERECCUSTO IS RECORD(
      NUNOTA        NUMBER( 10 )
    , SEQUENCIA     NUMBER( 5 )
    , DTBASE        DATE
    , CODEMP        NUMBER( 5 )
    , CODPROD       NUMBER( 10 )
    , CODLOCAL      NUMBER( 10 )
    , CONTROLE      VARCHAR( 50 )
    , CUSTOEXPLOD   CHAR( 1 )
   );
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50991-0-0
Nro. O.S. : 1147718
Nome      : Altera - STP_SET_SESSION2
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - STP_SET_SESSION2
NomeObjeto: STP_SET_SESSION2
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE STP_SET_SESSION2(P_CODUSU IN NUMBER, P_CODPROD IN NUMBER, P_VERSAO IN NUMBER , P_SESSION_INFO IN VARCHAR, P_DBHASHCODE IN VARCHAR2) AS
BEGIN
   STP_SET_SESSION(P_CODUSU,P_CODPROD,P_VERSAO);
   DBMS_APPLICATION_INFO.SET_CLIENT_INFO(P_SESSION_INFO); 
   VARIAVEIS_PKG.V_DBHASHCODE := P_DBHASHCODE;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50992-0-1000
Nro. O.S. : 1147718
Nome      : INSERE - THOOBJ - 5099100
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE STP_SET_SESSION2
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210000
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'STP_SET_SESSION2' NOMEOBJ, 50991 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, 'fdd47b0dda7453b8635185ed06cd4a36' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'STP_SET_SESSION2' and THO.hashcode = 'fdd47b0dda7453b8635185ed06cd4a36')
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50993-0-0
Nro. O.S. : 1147718
Nome      : Cria - TMDFMG DBHASHCODE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TMDFMG DBHASHCODE
NomeObjeto: DBHASHCODE
TipoObjeto: COLUMN
NomeTabela: TMDFMG
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TMDFMG ADD DBHASHCODE VARCHAR2(400)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50994-0-0
Nro. O.S. : 1090873
Nome      : Altera - VRI_EVT_R2010_NFS_INFOTPSERV
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VRI_EVT_R2010_NFS_INFOTPSERV
NomeObjeto: VRI_EVT_R2010_NFS_INFOTPSERV
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2010_NFS_INFOTPSERV
AS
SELECT
 TAB.CODEMP
,TAB.DTREF
,TAB.TPINSC||','||TAB.NRINSC||','||TAB.TPINSCESTAB||','||TAB.NRINSCESTAB||','||TAB.INDOBRA||','||TAB.CNPJPRESTADOR||','||TAB.INDCPRB AS CHAVE
,TAB.NUDOCUMENTO AS NUNOTA
,TAB.TPSERVICO
,TAB.TIPODOCUMENTO
,TAB.TPINSC
,TAB.NRINSC
,TAB.TPINSCESTAB
,TAB.NRINSCESTAB
,TAB.INDOBRA
,TAB.CNPJPRESTADOR
,TAB.INDCPRB
,TAB.VLRTOTALBRUTO
,TAB.VLRBASERET
,TAB.VLRRETENCAO
,TAB.VLRRETSUB
,TRUNC(NVL(TAB.VLRRETENCAO, 0) * (NVL(ISET_INSS_PRINC.PERCSUSPIMP, 0) / 100), 2) AS VLRNRETPRINC
,TRUNC(TAB.VLRSERVICOS15, 2) AS VLRSERVICOS15
,TRUNC(TAB.VLRSERVICOS20, 2) AS VLRSERVICOS20
,TRUNC(TAB.VLRSERVICOS25, 2) AS VLRSERVICOS25
,TRUNC(TAB.VLRADICIONAL, 2) AS VLRADICIONAL
,TRUNC(NVL(TAB.VLRSERVICOS15, 0) * (NVL(ISET_INSS_15.PERCSUSPIMP, 0) / 100) +
 NVL(TAB.VLRSERVICOS20, 0) * (NVL(ISET_INSS_20.PERCSUSPIMP, 0) / 100) +
 NVL(TAB.VLRSERVICOS25, 0) * (NVL(ISET_INSS_25.PERCSUSPIMP, 0) / 100), 2) AS VLRNRETADIC
,TAB.NUPROCESSO_INSS_PRINC
,TAB.SEQPROCESSO_INSS_PRINC
,TAB.NUPROCESSO_INSS_15
,TAB.SEQPROCESSO_INSS_15
,TAB.NUPROCESSO_INSS_20
,TAB.SEQPROCESSO_INSS_20
,TAB.NUPROCESSO_INSS_25
,TAB.SEQPROCESSO_INSS_25
FROM (
    /*Busca pelas notas de serviços tomados*/
    SELECT 
     CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMP.CODEMP
          WHEN NVL(EMP.CODEMPMATRIZEFD, 0) > 0 THEN EMP.CODEMPMATRIZEFD
          ELSE EMP.CODEMP 
     END AS CODEMP
    ,TRUNC(CAB.DTNEG, 'MM') AS DTREF
    ,CASE WHEN LENGTH(EMPC.CGC) = 14 
          THEN '1' 
          ELSE '2' 
     END AS TPINSC
    ,CASE WHEN LENGTH(EMPC.CGC) = 14 
          THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
                    THEN EMPC.CGC
                    ELSE SUBSTR(EMPC.CGC,1,8)
               END
          ELSE EMPC.CGC
     END AS NRINSC
    ,ITE.NUNOTA AS NUDOCUMENTO
    ,'N' AS TIPODOCUMENTO
    ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN 4 ELSE 1 END AS TPINSCESTAB
    ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN CAB.CODOBRA ELSE EMPC.CGC END AS NRINSCESTAB
    ,CASE WHEN PRO.OBRACONSTCIVIL IS NULL THEN 0 ELSE PRO.OBRACONSTCIVIL END AS INDOBRA
    ,PAR.CGC_CPF AS CNPJPRESTADOR
    ,CASE WHEN NVL(DIN.ALIQUOTA, IMN.ALIQUOTA) = 11 THEN 0 ELSE 1 END AS INDCPRB /*Se a alíquota não for 11% espera-se que ela seja 3.5% - ver se preciso tratar o ELSE*/
    ,PRO.CLASSIFCESSAOOBRA AS TPSERVICO
    ,SUM(ITE.VLRTOT) AS VLRTOTALBRUTO
    ,SUM(NVL(DIN.BASERED, 0) + NVL(IMN.BASE, 0)) AS VLRBASERET
    ,SUM(NVL(DIN.VALOR, 0) + NVL(IMN.VALOR, 0)) AS VLRRETENCAO
    ,0 AS VLRRETSUB /*Por enquanto não vamos gerar essa tag*/
    ,SUM(CASE WHEN NVL(DIN.TIPOINSSESPECIAL, '') = '1' AND NVL(DIN.VLRINSSESPECIAL, 0) > 0 OR
                   NVL(IMN.TIPOINSSESPECIAL, '') = '1' AND NVL(IMN.VLRINSSESPECIAL, 0) > 0 THEN ITE.VLRTOT ELSE 0 END) AS VLRSERVICOS15
    ,SUM(CASE WHEN NVL(DIN.TIPOINSSESPECIAL, '') = '2' AND NVL(DIN.VLRINSSESPECIAL, 0) > 0 OR
                   NVL(IMN.TIPOINSSESPECIAL, '') = '2' AND NVL(IMN.VLRINSSESPECIAL, 0) > 0 THEN ITE.VLRTOT ELSE 0 END) AS VLRSERVICOS20
    ,SUM(CASE WHEN NVL(DIN.TIPOINSSESPECIAL, '') = '3' AND NVL(DIN.VLRINSSESPECIAL, 0) > 0 OR
                   NVL(IMN.TIPOINSSESPECIAL, '') = '3' AND NVL(IMN.VLRINSSESPECIAL, 0) > 0 THEN ITE.VLRTOT ELSE 0 END) AS VLRSERVICOS25
    ,SUM(NVL(DIN.VLRINSSESPECIAL, 0) + NVL(IMN.VLRINSSESPECIAL, 0)) AS VLRADICIONAL
    ,MAX(SNK_GET_IDPROCESSO_IMP_EFD(1, 
                                  EMP.CODEMP, 
                                  PAR.CODPARC, 
                                  ITE.CODPROD, 
                                  PRO.CODLST, 
                                  CAB.DTNEG)) AS NUPROCESSO_INSS_PRINC
    ,MAX(SNK_GET_IDPROCESSO_IMP_EFD(1, 
                                  EMP.CODEMP, 
                                  PAR.CODPARC, 
                                  ITE.CODPROD, 
                                  PRO.CODLST, 
                                  CAB.DTNEG,
                                  'S')) AS SEQPROCESSO_INSS_PRINC
    ,MAX(CASE WHEN NVL(DIN.TIPOINSSESPECIAL, '') = '1' THEN SNK_GET_IDPROCESSO_IMP_EFD(9, 
                                                                                      EMP.CODEMP, 
                                                                                      PAR.CODPARC, 
                                                                                      ITE.CODPROD, 
                                                                                      PRO.CODLST, 
                                                                                      CAB.DTNEG)
              ELSE NULL END) AS NUPROCESSO_INSS_15
    ,MAX(CASE WHEN NVL(DIN.TIPOINSSESPECIAL, '') = '1' THEN SNK_GET_IDPROCESSO_IMP_EFD(9, 
                                                                                      EMP.CODEMP, 
                                                                                      PAR.CODPARC, 
                                                                                      ITE.CODPROD, 
                                                                                      PRO.CODLST, 
                                                                                      CAB.DTNEG,
                                                                                      'S')
              ELSE NULL END) AS SEQPROCESSO_INSS_15
    ,MAX(CASE WHEN NVL(DIN.TIPOINSSESPECIAL, '') = '2' THEN SNK_GET_IDPROCESSO_IMP_EFD(10, 
                                                                                      EMP.CODEMP, 
                                                                                      PAR.CODPARC, 
                                                                                      ITE.CODPROD, 
                                                                                      PRO.CODLST, 
                                                                                      CAB.DTNEG)
              ELSE NULL END) AS NUPROCESSO_INSS_20
    ,MAX(CASE WHEN NVL(DIN.TIPOINSSESPECIAL, '') = '2' THEN SNK_GET_IDPROCESSO_IMP_EFD(10, 
                                                                                      EMP.CODEMP, 
                                                                                      PAR.CODPARC, 
                                                                                      ITE.CODPROD, 
                                                                                      PRO.CODLST, 
                                                                                      CAB.DTNEG,
                                                                                      'S')
              ELSE NULL END) AS SEQPROCESSO_INSS_20
    ,MAX(CASE WHEN NVL(DIN.TIPOINSSESPECIAL, '') = '3' THEN SNK_GET_IDPROCESSO_IMP_EFD(11, 
                                                                                      EMP.CODEMP, 
                                                                                      PAR.CODPARC, 
                                                                                      ITE.CODPROD, 
                                                                                      PRO.CODLST, 
                                                                                      CAB.DTNEG)
              ELSE NULL END) AS NUPROCESSO_INSS_25
    ,MAX(CASE WHEN NVL(DIN.TIPOINSSESPECIAL, '') = '3' THEN SNK_GET_IDPROCESSO_IMP_EFD(11, 
                                                                                      EMP.CODEMP, 
                                                                                      PAR.CODPARC, 
                                                                                      ITE.CODPROD, 
                                                                                      PRO.CODLST, 
                                                                                      CAB.DTNEG,
                                                                                      'S')
              ELSE NULL END) AS SEQPROCESSO_INSS_25
    FROM TGFITE ITE
        INNER JOIN TGFCAB CAB  ON CAB.NUNOTA = ITE.NUNOTA
        INNER JOIN (SELECT CODTIPOPER, DHALTER, TIPMOV, ATUALLIVISS, DESCROPER FROM TGFTOP) TPO  ON TPO.CODTIPOPER = CAB.CODTIPOPER AND TPO.DHALTER = CAB.DHTIPOPER
        INNER JOIN (SELECT CODEMP, CODEMPMATRIZEFD, EMPADMPUBDIR, ATIVO FROM TGFEMP) EMP  ON EMP.CODEMP = CAB.CODEMP
        INNER JOIN (SELECT CODEMP, RAZAOSOCIAL, NOMEFANTASIA, CGC FROM TSIEMP) EMPC ON EMPC.CODEMP = EMP.CODEMP
        INNER JOIN (SELECT CODPARC, NOMEPARC, CGC_CPF FROM TGFPAR) PAR  ON PAR.CODPARC = CAB.CODPARC
        INNER JOIN (SELECT CODPROD, OBRACONSTCIVIL, CLASSIFCESSAOOBRA, CODLST FROM TGFPRO) PRO  ON PRO.CODPROD = ITE.CODPROD
        LEFT JOIN  TGFDIN DIN  ON DIN.NUNOTA = ITE.NUNOTA AND DIN.SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 5 AND DIN.TIPO = -1
        LEFT JOIN  TGFIMN IMN  ON IMN.NUNOTA = ITE.NUNOTA AND IMN.SEQUENCIA = ITE.SEQUENCIA AND IMN.TIPOIMPOSTO = 5 AND IMN.TIPIMP = -1
    WHERE EMP.ATIVO = 'S'
        AND PRO.CLASSIFCESSAOOBRA IS NOT NULL
        AND ITE.USOPROD = 'S'
        AND TPO.TIPMOV = 'C'
        AND TPO.ATUALLIVISS = 'E'
        AND CAB.STATUSNOTA = 'L'
        AND (EXISTS (SELECT 1 FROM TGFDIN DIN WHERE DIN.NUNOTA = ITE.NUNOTA AND DIN.SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 5 AND DIN.TIPO = -1) OR 
             EXISTS (SELECT 1 FROM TGFIMN IMN WHERE IMN.NUNOTA = ITE.NUNOTA AND IMN.SEQUENCIA = ITE.SEQUENCIA AND IMN.TIPOIMPOSTO = 5 AND IMN.TIPIMP = -1))
    GROUP BY 
     CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMP.CODEMP
          WHEN NVL(EMP.CODEMPMATRIZEFD, 0) > 0 THEN EMP.CODEMPMATRIZEFD
          ELSE EMP.CODEMP 
     END
    ,TRUNC(CAB.DTNEG, 'MM')
        ,CASE WHEN LENGTH(EMPC.CGC) = 14 
          THEN '1' 
          ELSE '2' 
     END
    ,CASE WHEN LENGTH(EMPC.CGC) = 14 
          THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
                    THEN EMPC.CGC
                    ELSE SUBSTR(EMPC.CGC,1,8)
               END
          ELSE EMPC.CGC
     END
    ,ITE.NUNOTA
    ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN 4 ELSE 1 END
    ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN CAB.CODOBRA ELSE EMPC.CGC END
    ,CASE WHEN PRO.OBRACONSTCIVIL IS NULL THEN 0 ELSE PRO.OBRACONSTCIVIL END
    ,PAR.CGC_CPF
    ,CASE WHEN NVL(DIN.ALIQUOTA, IMN.ALIQUOTA) = 11 THEN 0 ELSE 1 END
    ,PRO.CLASSIFCESSAOOBRA
    UNION
    /*Busca pelo financeiros que representam serviços tomados*/
    SELECT 
     CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMP.CODEMP
          WHEN NVL(EMP.CODEMPMATRIZEFD, 0) > 0 THEN EMP.CODEMPMATRIZEFD
          ELSE EMP.CODEMP 
     END AS CODEMP
    ,TRUNC(FIN.DTNEG, 'MM') AS DTREF
    ,CASE WHEN LENGTH(EMPC.CGC) = 14 
          THEN '1' 
          ELSE '2' 
     END AS TPINSC
    ,CASE WHEN LENGTH(EMPC.CGC) = 14 
          THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
                    THEN EMPC.CGC
                    ELSE SUBSTR(EMPC.CGC,1,8)
               END
          ELSE EMPC.CGC
     END AS NRINSC
    ,FIN.NUFIN AS NUDOCUMENTO
    ,'F' AS TIPODOCUMENTO
    ,CASE WHEN FIN.CODOBRA IS NOT NULL THEN 4 ELSE 1 END AS TPINSCESTAB
    ,CASE WHEN FIN.CODOBRA IS NOT NULL THEN FIN.CODOBRA ELSE EMPC.CGC END AS NRINSCESTAB
    ,CASE WHEN FIN.OBRACONSTCIVIL IS NULL THEN 0 ELSE FIN.OBRACONSTCIVIL END AS INDOBRA
    ,PAR.CGC_CPF AS CNPJPRESTADOR
    ,CASE WHEN NVL(IMF.ALIQUOTA, 0) = 11 THEN 0 ELSE 1 END AS INDCPRB /*Se a alíquota não for 11% espera-se que ela seja 3.5% - ver se preciso tratar o ELSE*/
    ,FIN.CLASSIFCESSAOOBRA AS TPSERVICO
    ,SUM(FIN.VLRDESDOB) AS VLRTOTALBRUTO
    ,SUM(NVL(IMF.BASE, 0)) AS VLRBASERET
    ,SUM(NVL(IMF.VALOR, 0)) AS VLRRETENCAO
    ,0 AS VLRRETSUB /*Por enquanto não vamos gerar essa tag*/
    /*Para o financeiro não estamos considerando INSS Especial. Se houver, o usuário deverá criar um nota para lançar esses valores*/
    ,0 AS VLRSERVICOS15
    ,0 AS VLRSERVICOS20
    ,0 AS VLRSERVICOS25
    ,0 AS VLRADICIONAL
    ,MAX(SNK_GET_IDPROCESSO_IMP_EFD(1, 
                                  EMP.CODEMP, 
                                  PAR.CODPARC, 
                                  NULL, 
                                  FIN.CODLST, 
                                  FIN.DTNEG)) AS NUPROCESSO_INSS_PRINC
    ,MAX(SNK_GET_IDPROCESSO_IMP_EFD(1, 
                                  EMP.CODEMP, 
                                  PAR.CODPARC, 
                                  NULL, 
                                  FIN.CODLST, 
                                  FIN.DTNEG,
                                  'S')) AS SEQPROCESSO_INSS_PRINC
    ,NULL AS NUPROCESSO_INSS_15
    ,NULL AS SEQPROCESSO_INSS_15
    ,NULL AS NUPROCESSO_INSS_20
    ,NULL AS SEQPROCESSO_INSS_20
    ,NULL AS NUPROCESSO_INSS_25
    ,NULL AS SEQPROCESSO_INSS_25
    FROM TGFFIN FIN
        INNER JOIN (SELECT CODTIPOPER, DHALTER, TIPMOV, ATUALLIVISS, DESCROPER FROM TGFTOP)  TPO  ON TPO.CODTIPOPER = FIN.CODTIPOPER AND TPO.DHALTER = FIN.DHTIPOPER
        INNER JOIN (SELECT CODEMP, CODEMPMATRIZEFD, EMPADMPUBDIR, ATIVO FROM TGFEMP) EMP  ON EMP.CODEMP = FIN.CODEMP
        INNER JOIN (SELECT CODEMP, RAZAOSOCIAL, NOMEFANTASIA, CGC FROM TSIEMP) EMPC ON EMPC.CODEMP = EMP.CODEMP
        INNER JOIN (SELECT CODPARC, NOMEPARC, CGC_CPF FROM TGFPAR) PAR  ON PAR.CODPARC = FIN.CODPARC
        INNER JOIN TGFIMF IMF  ON IMF.NUFIN = FIN.NUFIN AND IMF.CODIMP = 5 AND IMF.TIPIMP = -1
    WHERE EMP.ATIVO = 'S'
        AND FIN.CLASSIFCESSAOOBRA IS NOT NULL
        AND TPO.TIPMOV = 'I'
        AND TPO.ATUALLIVISS = 'E'
        AND EXISTS (SELECT 1 FROM TGFIMF IMF WHERE IMF.NUFIN = FIN.NUFIN AND IMF.CODIMP = 5 AND IMF.TIPIMP = -1)
    GROUP BY 
     CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMP.CODEMP
          WHEN NVL(EMP.CODEMPMATRIZEFD, 0) > 0 THEN EMP.CODEMPMATRIZEFD
          ELSE EMP.CODEMP 
     END
    ,TRUNC(FIN.DTNEG, 'MM')
    ,CASE WHEN LENGTH(EMPC.CGC) = 14 
          THEN '1' 
          ELSE '2' 
     END
    ,CASE WHEN LENGTH(EMPC.CGC) = 14 
          THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
                    THEN EMPC.CGC
                    ELSE SUBSTR(EMPC.CGC,1,8)
               END
          ELSE EMPC.CGC
     END
    ,FIN.NUFIN
    ,CASE WHEN FIN.CODOBRA IS NOT NULL THEN 4 ELSE 1 END
    ,CASE WHEN FIN.CODOBRA IS NOT NULL THEN FIN.CODOBRA ELSE EMPC.CGC END
    ,CASE WHEN FIN.OBRACONSTCIVIL IS NULL THEN 0 ELSE FIN.OBRACONSTCIVIL END
    ,PAR.CGC_CPF
    ,CASE WHEN NVL(IMF.ALIQUOTA, 0) = 11 THEN 0 ELSE 1 END
    ,FIN.CLASSIFCESSAOOBRA
) TAB
    LEFT JOIN  TRIPISET ISET_INSS_PRINC ON ISET_INSS_PRINC.NUPROCESSO = NUPROCESSO_INSS_PRINC AND ISET_INSS_PRINC.SEQUENCIA = SEQPROCESSO_INSS_PRINC 
    LEFT JOIN  TRIPISET ISET_INSS_15 ON ISET_INSS_15.NUPROCESSO = NUPROCESSO_INSS_15 AND ISET_INSS_15.SEQUENCIA = SEQPROCESSO_INSS_15
    LEFT JOIN  TRIPISET ISET_INSS_20 ON ISET_INSS_20.NUPROCESSO = NUPROCESSO_INSS_20 AND ISET_INSS_20.SEQUENCIA = SEQPROCESSO_INSS_20
    LEFT JOIN  TRIPISET ISET_INSS_25 ON ISET_INSS_25.NUPROCESSO = NUPROCESSO_INSS_25 AND ISET_INSS_25.SEQUENCIA = SEQPROCESSO_INSS_25
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50995-0-0
Nro. O.S. : 1090873
Nome      : Altera - VRI_EVT_R2020_NFS_INFOTPSERV
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VRI_EVT_R2020_NFS_INFOTPSERV
NomeObjeto: VRI_EVT_R2020_NFS_INFOTPSERV
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2020_NFS_INFOTPSERV
AS 
SELECT
 TAB.CODEMP
,TAB.DTREF
,TAB.TPINSC||','||TAB.NRINSC||','||TAB.TPINSCESTABPREST||','||TAB.NRINSCESTABPREST||','||TAB.TPINSCTOMADOR||','||TAB.NRINSCTOMADOR||','||TAB.INDOBRA AS CHAVE
,TAB.NUNOTA
,TAB.TPSERVICO
,TAB.TPINSC
,TAB.NRINSC
,TAB.TPINSCESTABPREST
,TAB.NRINSCESTABPREST
,TAB.TPINSCTOMADOR
,TAB.NRINSCTOMADOR
,TAB.INDOBRA
,TAB.VLRTOTALBRUTO
,TAB.VLRBASERET
,TAB.VLRRETENCAO
,TAB.VLRRETSUB
,TRUNC(NVL(TAB.VLRRETENCAO, 0) * (NVL(ISET_INSS_PRINC.PERCSUSPIMP, 0) / 100), 2) AS VLRNRETPRINC
,TRUNC(TAB.VLRSERVICOS15, 2) AS VLRSERVICOS15
,TRUNC(TAB.VLRSERVICOS20, 2) AS VLRSERVICOS20
,TRUNC(TAB.VLRSERVICOS25, 2) AS VLRSERVICOS25
,TRUNC(TAB.VLRADICIONAL, 2) AS VLRADICIONAL
,TRUNC(NVL(TAB.VLRSERVICOS15, 0) * (NVL(ISET_INSS_15.PERCSUSPIMP, 0) / 100) +
 NVL(TAB.VLRSERVICOS20, 0) * (NVL(ISET_INSS_20.PERCSUSPIMP, 0) / 100) +
 NVL(TAB.VLRSERVICOS25, 0) * (NVL(ISET_INSS_25.PERCSUSPIMP, 0) / 100), 2) AS VLRNRETADIC
,TAB.NUPROCESSO_INSS_PRINC
,TAB.SEQPROCESSO_INSS_PRINC
,TAB.NUPROCESSO_INSS_15
,TAB.SEQPROCESSO_INSS_15
,TAB.NUPROCESSO_INSS_20
,TAB.SEQPROCESSO_INSS_20
,TAB.NUPROCESSO_INSS_25
,SEQPROCESSO_INSS_25
FROM (
    SELECT 
     CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMP.CODEMP
          WHEN NVL(EMP.CODEMPMATRIZEFD, 0) > 0 THEN EMP.CODEMPMATRIZEFD
          ELSE EMP.CODEMP 
     END AS CODEMP
    ,TRUNC(CAB.DTNEG, 'MM') AS DTREF
    ,CASE WHEN LENGTH(EMPC.CGC) = 14 
          THEN '1' 
          ELSE '2' 
     END AS TPINSC
    ,CASE WHEN LENGTH(EMPC.CGC) = 14 
          THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
                    THEN EMPC.CGC
                    ELSE SUBSTR(EMPC.CGC,1,8)
               END
          ELSE EMPC.CGC
     END AS NRINSC
    ,1 AS TPINSCESTABPREST
    ,EMPC.CGC AS NRINSCESTABPREST
    ,ITE.NUNOTA AS NUNOTA
    ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN 4 ELSE 1 END AS TPINSCTOMADOR
    ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN CAB.CODOBRA ELSE PAR.CGC_CPF END AS NRINSCTOMADOR
    ,CASE WHEN PRO.OBRACONSTCIVIL IS NULL THEN 0 ELSE PRO.OBRACONSTCIVIL END AS INDOBRA
    ,PRO.CLASSIFCESSAOOBRA AS TPSERVICO
    ,SUM(ITE.VLRTOT) AS VLRTOTALBRUTO
    ,SUM(NVL(DIN.BASERED, 0) + NVL(IMN.BASE, 0)) AS VLRBASERET
    ,SUM(NVL(DIN.VALOR, 0) + NVL(IMN.VALOR, 0)) AS VLRRETENCAO
    ,0 AS VLRRETSUB /*Por enquanto não vamos gerar essa tag*/
    ,SUM(CASE WHEN DIN.TIPOINSSESPECIAL = '1' AND NVL(DIN.VLRINSSESPECIAL, 0) > 0 OR
                   IMN.TIPOINSSESPECIAL = '1' AND NVL(IMN.VLRINSSESPECIAL, 0) > 0 THEN ITE.VLRTOT ELSE 0 END) AS VLRSERVICOS15
    ,SUM(CASE WHEN DIN.TIPOINSSESPECIAL = '2' AND NVL(DIN.VLRINSSESPECIAL, 0) > 0 OR
                   IMN.TIPOINSSESPECIAL = '2' AND NVL(IMN.VLRINSSESPECIAL, 0) > 0 THEN ITE.VLRTOT ELSE 0 END) AS VLRSERVICOS20
    ,SUM(CASE WHEN DIN.TIPOINSSESPECIAL = '3' AND NVL(DIN.VLRINSSESPECIAL, 0) > 0 OR
                   IMN.TIPOINSSESPECIAL = '3' AND NVL(IMN.VLRINSSESPECIAL, 0) > 0 THEN ITE.VLRTOT ELSE 0 END) AS VLRSERVICOS25
    ,SUM(NVL(DIN.VLRINSSESPECIAL, 0) + NVL(IMN.VLRINSSESPECIAL, 0)) AS VLRADICIONAL
    ,MAX(SNK_GET_IDPROCESSO_IMP_EFD(1, 
                                  EMP.CODEMP, 
                                  PAR.CODPARC, 
                                  ITE.CODPROD, 
                                  PRO.CODLST, 
                                  CAB.DTNEG)) AS NUPROCESSO_INSS_PRINC
    ,MAX(SNK_GET_IDPROCESSO_IMP_EFD(1, 
                                  EMP.CODEMP, 
                                  PAR.CODPARC, 
                                  ITE.CODPROD, 
                                  PRO.CODLST, 
                                  CAB.DTNEG,
                                  'S')) AS SEQPROCESSO_INSS_PRINC
    ,MAX(CASE WHEN NVL(DIN.TIPOINSSESPECIAL, '') = '1' THEN SNK_GET_IDPROCESSO_IMP_EFD(9, 
                                                                                      EMP.CODEMP, 
                                                                                      PAR.CODPARC, 
                                                                                      ITE.CODPROD, 
                                                                                      PRO.CODLST, 
                                                                                      CAB.DTNEG) 
              ELSE NULL END) AS NUPROCESSO_INSS_15
    ,MAX(CASE WHEN NVL(DIN.TIPOINSSESPECIAL, '') = '1' THEN SNK_GET_IDPROCESSO_IMP_EFD(9, 
                                                                                      EMP.CODEMP, 
                                                                                      PAR.CODPARC, 
                                                                                      ITE.CODPROD, 
                                                                                      PRO.CODLST, 
                                                                                      CAB.DTNEG,
                                                                                      'S')
              ELSE NULL END) AS SEQPROCESSO_INSS_15
    ,MAX(CASE WHEN NVL(DIN.TIPOINSSESPECIAL, '') = '2' THEN SNK_GET_IDPROCESSO_IMP_EFD(10, 
                                                                                      EMP.CODEMP, 
                                                                                      PAR.CODPARC, 
                                                                                      ITE.CODPROD, 
                                                                                      PRO.CODLST, 
                                                                                      CAB.DTNEG)
              ELSE NULL END) AS NUPROCESSO_INSS_20
    ,MAX(CASE WHEN NVL(DIN.TIPOINSSESPECIAL, '') = '2' THEN SNK_GET_IDPROCESSO_IMP_EFD(10, 
                                                                                      EMP.CODEMP, 
                                                                                      PAR.CODPARC, 
                                                                                      ITE.CODPROD, 
                                                                                      PRO.CODLST, 
                                                                                      CAB.DTNEG,
                                                                                      'S')
              ELSE NULL END) AS SEQPROCESSO_INSS_20
    ,MAX(CASE WHEN NVL(DIN.TIPOINSSESPECIAL, '') = '3' THEN SNK_GET_IDPROCESSO_IMP_EFD(11, 
                                                                                      EMP.CODEMP, 
                                                                                      PAR.CODPARC, 
                                                                                      ITE.CODPROD, 
                                                                                      PRO.CODLST, 
                                                                                      CAB.DTNEG)
              ELSE NULL END) AS NUPROCESSO_INSS_25
    ,MAX(CASE WHEN NVL(DIN.TIPOINSSESPECIAL, '') = '3' THEN SNK_GET_IDPROCESSO_IMP_EFD(11, 
                                                                                      EMP.CODEMP, 
                                                                                      PAR.CODPARC, 
                                                                                      ITE.CODPROD, 
                                                                                      PRO.CODLST, 
                                                                                      CAB.DTNEG,
                                                                                      'S')
              ELSE NULL END) AS SEQPROCESSO_INSS_25
    FROM TGFITE ITE
        INNER JOIN TGFCAB CAB  ON CAB.NUNOTA = ITE.NUNOTA
        INNER JOIN (SELECT CODTIPOPER, DHALTER, TIPMOV, ATUALLIVISS, DESCROPER FROM TGFTOP) TPO  ON TPO.CODTIPOPER = CAB.CODTIPOPER AND TPO.DHALTER = CAB.DHTIPOPER
        INNER JOIN (SELECT CODEMP, CODEMPMATRIZEFD, EMPADMPUBDIR, ATIVO FROM TGFEMP) EMP  ON EMP.CODEMP = CAB.CODEMP
        INNER JOIN (SELECT CODEMP, RAZAOSOCIAL, NOMEFANTASIA, CGC FROM TSIEMP) EMPC ON EMPC.CODEMP = EMP.CODEMP
        INNER JOIN (SELECT CODPARC, NOMEPARC, CGC_CPF FROM TGFPAR) PAR  ON PAR.CODPARC = CAB.CODPARC
        INNER JOIN (SELECT CODPROD, OBRACONSTCIVIL, CLASSIFCESSAOOBRA, CODLST FROM TGFPRO) PRO  ON PRO.CODPROD = ITE.CODPROD
        LEFT JOIN  TGFDIN DIN  ON DIN.NUNOTA = ITE.NUNOTA AND DIN.SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 5 AND DIN.TIPO = -1
        LEFT JOIN  TGFIMN IMN  ON IMN.NUNOTA = ITE.NUNOTA AND IMN.SEQUENCIA = ITE.SEQUENCIA AND IMN.TIPOIMPOSTO = 5 AND IMN.TIPIMP = -1
    WHERE EMP.ATIVO = 'S'
        AND PRO.CLASSIFCESSAOOBRA IS NOT NULL
        AND ITE.USOPROD = 'S'
        AND TPO.TIPMOV = 'V'
        AND TPO.ATUALLIVISS = 'S'
        AND CAB.STATUSNOTA = 'L'
        AND (EXISTS (SELECT 1 FROM TGFDIN WHERE NUNOTA = ITE.NUNOTA AND SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 5 AND DIN.TIPO = -1) OR 
             EXISTS (SELECT 1 FROM TGFIMN WHERE NUNOTA = ITE.NUNOTA AND SEQUENCIA = ITE.SEQUENCIA AND IMN.TIPOIMPOSTO = 5 AND IMN.TIPIMP = -1))
    GROUP BY 
     CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMP.CODEMP
          WHEN NVL(EMP.CODEMPMATRIZEFD, 0) > 0 THEN EMP.CODEMPMATRIZEFD
          ELSE EMP.CODEMP 
     END
    ,TRUNC(CAB.DTNEG, 'MM')
    ,CASE WHEN LENGTH(EMPC.CGC) = 14 
          THEN '1' 
          ELSE '2' 
     END
    ,CASE WHEN LENGTH(EMPC.CGC) = 14 
          THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
                    THEN EMPC.CGC
                    ELSE SUBSTR(EMPC.CGC,1,8)
               END
          ELSE EMPC.CGC
     END
    ,1
    ,EMPC.CGC
    ,ITE.NUNOTA
    ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN 4 ELSE 1 END
    ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN CAB.CODOBRA ELSE PAR.CGC_CPF END
    ,CASE WHEN PRO.OBRACONSTCIVIL IS NULL THEN 0 ELSE PRO.OBRACONSTCIVIL END
    ,PRO.CLASSIFCESSAOOBRA
) TAB
    LEFT JOIN  TRIPISET ISET_INSS_PRINC ON ISET_INSS_PRINC.NUPROCESSO = NUPROCESSO_INSS_PRINC AND ISET_INSS_PRINC.SEQUENCIA = SEQPROCESSO_INSS_PRINC
    LEFT JOIN  TRIPISET ISET_INSS_15 ON ISET_INSS_15.NUPROCESSO = NUPROCESSO_INSS_15 AND ISET_INSS_15.SEQUENCIA = SEQPROCESSO_INSS_15
    LEFT JOIN  TRIPISET ISET_INSS_20 ON ISET_INSS_20.NUPROCESSO = NUPROCESSO_INSS_20 AND ISET_INSS_20.SEQUENCIA = SEQPROCESSO_INSS_20
    LEFT JOIN  TRIPISET ISET_INSS_25 ON ISET_INSS_25.NUPROCESSO = NUPROCESSO_INSS_25 AND ISET_INSS_25.SEQUENCIA = SEQPROCESSO_INSS_25
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50996-0-0
Nro. O.S. : 1090873
Nome      : Altera - VRI_EVT_R2050_INFOPROC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VRI_EVT_R2050_INFOPROC
NomeObjeto: VRI_EVT_R2050_INFOPROC
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2050_INFOPROC
AS
SELECT
 TAB.CODEMP
,TAB.DTREF
,TAB.TPAMB
,TAB.SEQUENCIA
,TAB.CHAVE
,TAB.NUPROCESSO AS CHAVEPROCESSO
,TAB.NUPROCESSO
,TAB.SEQPROCESSO
,PAJ.TIPO AS TPPROC
,PAJ.NUMPROCESSO AS NRPROC
,TAB.CODSUSP
,TRUNC(SUM(CASE WHEN TAB.TIPIMPOSTO = 1 THEN TAB.VALOR ELSE 0 END), 2) AS VLRCPSUSP
,TRUNC(SUM(CASE WHEN TAB.TIPIMPOSTO = 3 THEN TAB.VALOR ELSE 0 END), 2) AS VLRSENARSUSP
,TRUNC(SUM(CASE WHEN TAB.TIPIMPOSTO = 4 THEN TAB.VALOR ELSE 0 END), 2) AS VLRRATSUSP
FROM (
    SELECT
     NFPR.CODEMP
    ,NFPR.DTREF
    ,NFPR.TPAMB
    ,NFPR.SEQUENCIA
    ,NFPR.CHAVE  
    ,ISET_INSS.NUPROCESSO
    ,ISET_INSS.SEQUENCIA AS SEQPROCESSO
    ,1 AS TIPIMPOSTO
    ,ISET_INSS.CODSUSP
    ,NFPR.VLRCPAPUR * NVL(ISET_INSS.PERCSUSPIMP, 0) / 100 AS VALOR
    FROM TRINFPR NFPR
        INNER JOIN TRIPISET ISET_INSS ON ISET_INSS.NUPROCESSO = NFPR.NUPROCESSO_INSS AND ISET_INSS.SEQUENCIA = NFPR.SEQPROCESSO_INSS
    UNION
    SELECT
     NFPR.CODEMP
    ,NFPR.DTREF
    ,NFPR.TPAMB
    ,NFPR.SEQUENCIA
    ,NFPR.CHAVE 
    ,ISET_SENAR.NUPROCESSO
    ,ISET_SENAR.SEQUENCIA AS SEQPROCESSO
    ,3 AS TIPIMPOSTO
    ,ISET_SENAR.CODSUSP
    ,NFPR.VLRSENARAPUR * NVL(ISET_SENAR.PERCSUSPIMP, 0) / 100 AS VALOR 
    FROM TRINFPR NFPR
        INNER JOIN TRIPISET ISET_SENAR ON ISET_SENAR.NUPROCESSO = NFPR.NUPROCESSO_SENAR AND ISET_SENAR.SEQUENCIA = NFPR.SEQPROCESSO_SENAR
    UNION
    SELECT  
     NFPR.CODEMP
    ,NFPR.DTREF
    ,NFPR.TPAMB
    ,NFPR.SEQUENCIA
    ,NFPR.CHAVE  
    ,ISET_GILRAT.NUPROCESSO
    ,ISET_GILRAT.SEQUENCIA AS SEQPROCESSO
    ,4 AS TIPIMPOSTO
    ,ISET_GILRAT.CODSUSP 
    ,NFPR.VLRRATAPUR * NVL(ISET_GILRAT.PERCSUSPIMP, 0) / 100 AS VALOR 
    FROM TRINFPR NFPR
        INNER JOIN TRIPISET ISET_GILRAT ON ISET_GILRAT.NUPROCESSO = NFPR.NUPROCESSO_GILRAT AND ISET_GILRAT.SEQUENCIA = NFPR.SEQPROCESSO_GILRAT
) TAB
    INNER JOIN TRIPAJ PAJ ON PAJ.NUPROCESSO = TAB.NUPROCESSO
GROUP BY 
 TAB.CODEMP
,TAB.DTREF
,TAB.TPAMB
,TAB.SEQUENCIA
,TAB.CHAVE
,TAB.NUPROCESSO
,TAB.SEQPROCESSO
,PAJ.TIPO
,PAJ.NUMPROCESSO
,TAB.CODSUSP
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 50998-0-0
Nro. O.S. : 1090873
Nome      : Altera - VRI_EVT_R2060_INFOPROC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VRI_EVT_R2060_INFOPROC
NomeObjeto: VRI_EVT_R2060_INFOPROC
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2060_INFOPROC
AS
SELECT  
 NFRB.CODEMP
,NFRB.DTREF
,NFRB.TPAMB
,NFRB.SEQUENCIA
,NFRB.CHAVE
,ISET_INSS.NUPROCESSO AS CHAVEPROCESSO
,ISET_INSS.NUPROCESSO
,ISET_INSS.SEQUENCIA AS SEQPROCESSO
,PAJ.TIPO AS TPPROC
,PAJ.NUMPROCESSO AS NRPROC
,ISET_INSS.CODSUSP AS CODSUSP
,TRUNC(SUM(NFRB.VLRCPRBAPUR * NVL(ISET_INSS.PERCSUSPIMP, 0) / 100), 2) AS VLRCPRBSUSP
FROM TRINFRB NFRB
    INNER JOIN TRIPAJ PAJ ON PAJ.NUPROCESSO = NFRB.NUPROCESSO_INSS
    INNER JOIN TRIPISET ISET_INSS ON ISET_INSS.NUPROCESSO = NFRB.NUPROCESSO_INSS AND ISET_INSS.SEQUENCIA = NFRB.SEQPROCESSO_INSS
GROUP BY
 NFRB.CODEMP
,NFRB.DTREF
,NFRB.TPAMB
,NFRB.SEQUENCIA
,NFRB.CHAVE
,ISET_INSS.NUPROCESSO
,ISET_INSS.SEQUENCIA
,PAJ.TIPO
,PAJ.NUMPROCESSO
,ISET_INSS.CODSUSP
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51000-0-0
Nro. O.S. : 1090873
Nome      : Altera - VRI_EVT_R2010_NFS
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VRI_EVT_R2010_NFS
NomeObjeto: VRI_EVT_R2010_NFS
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2010_NFS
AS
SELECT
 INFST.CODEMP
,INFST.DTREF
,INFST.TPAMB
,INFST.SEQUENCIA 
,INFST.CHAVE
,INFST.NUNOTA
,CAB.SERIENOTA AS SERIE
,CAB.NUMNOTA AS NUMDOCTO
,NVL(CAB.DTFATUR, CAB.DTNEG) AS DTEMISSAONF
,SUM(INFST.VLRTOTALBRUTO) AS VLRBRUTO
,CAB.OBSERVACAO AS OBS
FROM TRIINFST INFST
    INNER JOIN TGFCAB CAB ON CAB.NUNOTA = INFST.NUNOTA
WHERE TIPODOCUMENTO = 'N'
GROUP BY
 INFST.CODEMP
,INFST.DTREF
,INFST.TPAMB
,INFST.SEQUENCIA
,INFST.CHAVE 
,INFST.NUNOTA
,CAB.SERIENOTA
,CAB.NUMNOTA
,NVL(CAB.DTFATUR, CAB.DTNEG)
,CAB.OBSERVACAO
UNION
SELECT
 INFST.CODEMP
,INFST.DTREF
,INFST.TPAMB
,INFST.SEQUENCIA
,INFST.CHAVE 
,INFST.NUNOTA
,FIN.SERIENOTA AS SERIE
,FIN.NUMNOTA AS NUMDOCTO
,FIN.DTNEG AS DTEMISSAONF
,SUM(INFST.VLRTOTALBRUTO) AS VLRBRUTO
,'' AS OBS
FROM TRIINFST INFST
    INNER JOIN TGFFIN FIN ON FIN.NUFIN = INFST.NUNOTA
WHERE TIPODOCUMENTO = 'F'
GROUP BY
 INFST.CODEMP
,INFST.DTREF
,INFST.TPAMB
,INFST.SEQUENCIA 
,INFST.CHAVE
,INFST.NUNOTA
,FIN.SERIENOTA
,FIN.NUMNOTA
,FIN.DTNEG
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51001-0-0
Nro. O.S. : 1090873
Nome      : Altera - VRI_EVT_R2020_NFS
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VRI_EVT_R2020_NFS
NomeObjeto: VRI_EVT_R2020_NFS
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2020_NFS
AS 
SELECT 
 INFSP.CODEMP
,INFSP.DTREF
,INFSP.TPAMB
,INFSP.SEQUENCIA
,INFSP.CHAVE
,CAB.NUNOTA
,CAB.SERIENOTA AS SERIE
,CAB.NUMNOTA AS NUMDOCTO
,NVL(CAB.DTFATUR, CAB.DTNEG) AS DTEMISSAONF
,SUM(INFSP.VLRTOTALBRUTO) AS VLRBRUTO
,CAB.OBSERVACAO AS OBS
FROM TRIINFSP INFSP
    INNER JOIN TGFCAB CAB ON CAB.NUNOTA = INFSP.NUNOTA
GROUP BY 
 INFSP.CODEMP
,INFSP.DTREF
,INFSP.TPAMB
,INFSP.SEQUENCIA
,INFSP.CHAVE
,CAB.NUNOTA
,CAB.SERIENOTA
,CAB.NUMNOTA
,NVL(CAB.DTFATUR, CAB.DTNEG)
,CAB.OBSERVACAO
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51002-0-0
Nro. O.S. : 1090873
Nome      : Cria - VRI_EVT_R1070_INFOSUSP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - VRI_EVT_R1070_INFOSUSP
NomeObjeto: VRI_EVT_R1070_INFOSUSP
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R1070_INFOSUSP
AS  
SELECT
 PAJR.CODEMP                            AS CODEMP
,PAJR.DTREF                             AS DTREF
,ISET.NUPROCESSO                        AS CHAVE
,ISET.NUPROCESSO                        AS NUPROCESSO
,ISET.SEQUENCIA                         AS SEQPRISET
,ISET.CODSUSP                           AS CODSUSP
,ISET.INDSUSPREINF                      AS INDSUSP  
,ISET.DTDECISAO                         AS DTDECISAO
,ISET.INDDEPOSITO                       AS INDDEPOSITO
FROM TRIPISET ISET
    INNER JOIN TRIPAJR PAJR ON PAJR.NUPROCESSO = ISET.NUPROCESSO
WHERE PAJR.SEQUENCIA = (SELECT MAX(SEQUENCIA) 
                        FROM TRIPAJR 
                        WHERE NUPROCESSO = PAJR.NUPROCESSO)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51003-0-0
Nro. O.S. : 1090873
Nome      : Altera - VRI_EVT_R2050_NFS
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VRI_EVT_R2050_NFS
NomeObjeto: VRI_EVT_R2050_NFS
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2050_NFS 
AS
SELECT 
 TAB.CODEMP
,TAB.DTREF
,TAB.TPINSC||','||TAB.NRINSC||','||TAB.TPINSCESTAB||','||TAB.NRINSCESTAB||','||TAB.INDCOM AS CHAVE
,TAB.TPINSC
,TAB.NRINSC
,TAB.TPINSCESTAB
,TAB.NRINSCESTAB
,TAB.INDCOM
,TAB.NUNOTA
,SUM(TAB.VLRRECBRUTA) AS VLRRECBRUTA
,SUM(TAB.VLRCPAPUR) AS VLRCPAPUR
,SUM(TAB.VLRRATAPUR) AS VLRRATAPUR
,SUM(TAB.VLRSENARAPUR) AS VLRSENARAPUR    
,TAB.NUPROCESSO_INSS
,TAB.SEQPROCESSO_INSS
,TAB.NUPROCESSO_SENAR
,TAB.SEQPROCESSO_SENAR
,TAB.NUPROCESSO_GILRAT
,TAB.SEQPROCESSO_GILRAT
FROM (    
    SELECT 
     CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMP.CODEMP
          WHEN NVL(EMP.CODEMPMATRIZEFD, 0) > 0 THEN EMP.CODEMPMATRIZEFD
          ELSE EMP.CODEMP 
     END AS CODEMP
    ,TRUNC(CAB.DTNEG, 'MM') AS DTREF
    ,CASE WHEN LENGTH(EMPC.CGC) = 14 
          THEN '1' 
          ELSE '2' 
     END AS TPINSC
    ,CASE WHEN LENGTH(EMPC.CGC) = 14 
          THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
                    THEN EMPC.CGC
                    ELSE SUBSTR(EMPC.CGC,1,8)
               END
          ELSE EMPC.CGC
     END AS NRINSC
    ,1 AS TPINSCESTAB
    ,EMPC.CGC AS NRINSCESTAB
    ,PAR.INDCOMERCIALIZACAO AS INDCOM
    ,CAB.NUNOTA
    ,ITE.VLRTOT AS VLRRECBRUTA
    ,NVL(DIN.VALOR, 0) + NVL(IMN.VALOR, 0) AS VLRCPAPUR
    ,0 AS VLRRATAPUR /*Posteriormente iremos atrás dessas regras*/
    ,0 AS VLRSENARAPUR /*Posteriormente iremos atrás dessas regras*/
    ,SNK_GET_IDPROCESSO_IMP_EFD(1, 
                                EMP.CODEMP, 
                                PAR.CODPARC, 
                                ITE.CODPROD, 
                                PRO.CODLST, 
                                CAB.DTNEG) AS NUPROCESSO_INSS
    ,SNK_GET_IDPROCESSO_IMP_EFD(1, 
                                EMP.CODEMP, 
                                PAR.CODPARC, 
                                ITE.CODPROD, 
                                PRO.CODLST, 
                                CAB.DTNEG,
                                'S') AS SEQPROCESSO_INSS
    ,NULL /*SNK_GET_IDPROCESSO_IMP_EFD(3, 
                                EMP.CODEMP, 
                                PAR.CODPARC, 
                                ITE.CODPROD, 
                                PRO.CODLST, 
                                CAB.DTNEG)*/ AS NUPROCESSO_SENAR
    ,NULL /*SNK_GET_IDPROCESSO_IMP_EFD(3, 
                                EMP.CODEMP, 
                                PAR.CODPARC, 
                                ITE.CODPROD, 
                                PRO.CODLST, 
                                CAB.DTNEG,
                                'S')*/ AS SEQPROCESSO_SENAR
    ,NULL /*SNK_GET_IDPROCESSO_IMP_EFD(4, 
                                EMP.CODEMP, 
                                PAR.CODPARC, 
                                ITE.CODPROD, 
                                PRO.CODLST, 
                                CAB.DTNEG)*/ AS NUPROCESSO_GILRAT
    ,NULL /*SNK_GET_IDPROCESSO_IMP_EFD(4, 
                                EMP.CODEMP, 
                                PAR.CODPARC, 
                                ITE.CODPROD, 
                                PRO.CODLST, 
                                CAB.DTNEG,
                                'S')*/ AS SEQPROCESSO_GILRAT
    FROM TGFITE ITE
        INNER JOIN TGFCAB CAB  ON CAB.NUNOTA = ITE.NUNOTA
        INNER JOIN (SELECT CODTIPOPER, DHALTER, DESCROPER, TIPMOV, CODMODDOC FROM TGFTOP) TPO  ON TPO.CODTIPOPER = CAB.CODTIPOPER AND TPO.DHALTER = CAB.DHTIPOPER
        INNER JOIN (SELECT CODEMP, CODEMPMATRIZEFD, EMPADMPUBDIR, ATIVO FROM TGFEMP) EMP  ON EMP.CODEMP = CAB.CODEMP
        INNER JOIN (SELECT CODEMP, RAZAOSOCIAL, NOMEFANTASIA, CGC FROM TSIEMP) EMPC ON EMPC.CODEMP = EMP.CODEMP
        INNER JOIN (SELECT CODPARC, NOMEPARC, INDCOMERCIALIZACAO FROM TGFPAR) PAR  ON PAR.CODPARC = CAB.CODPARC
        INNER JOIN (SELECT CODPROD, DESCRPROD, CODLST, COMERCIALIZACAOAGRI FROM TGFPRO) PRO  ON PRO.CODPROD = ITE.CODPROD
        LEFT JOIN  TGFDIN DIN  ON DIN.NUNOTA = ITE.NUNOTA AND DIN.SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 5 AND DIN.TIPO = -1
        LEFT JOIN  TGFIMN IMN  ON IMN.NUNOTA = ITE.NUNOTA AND IMN.SEQUENCIA = ITE.SEQUENCIA AND IMN.TIPOIMPOSTO = 5 AND IMN.TIPIMP = -1
    WHERE EMP.ATIVO = 'S'
        AND NVL(PAR.INDCOMERCIALIZACAO, '0') IN ('1', '8', '9')
        AND NVL(PRO.COMERCIALIZACAOAGRI, 'N') = 'S'
        AND TPO.TIPMOV = 'V'
        AND CAB.STATUSNOTA = 'L' 
        AND TPO.CODMODDOC = 55
        AND CAB.STATUSNFE = 'A'
        AND (EXISTS (SELECT 1 FROM TGFDIN WHERE NUNOTA = ITE.NUNOTA AND SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 5 AND DIN.TIPO = -1) OR 
             EXISTS (SELECT 1 FROM TGFIMN WHERE NUNOTA = ITE.NUNOTA AND SEQUENCIA = ITE.SEQUENCIA AND IMN.TIPOIMPOSTO = 5 AND IMN.TIPIMP = -1))
) TAB
GROUP BY  
 TAB.CODEMP
,TAB.DTREF
,TAB.TPINSC
,TAB.NRINSC
,TAB.TPINSCESTAB
,TAB.NRINSCESTAB
,TAB.INDCOM
,TAB.NUNOTA    
,TAB.NUPROCESSO_INSS
,TAB.SEQPROCESSO_INSS
,TAB.NUPROCESSO_SENAR
,TAB.SEQPROCESSO_SENAR
,TAB.NUPROCESSO_GILRAT
,TAB.SEQPROCESSO_GILRAT
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 29/03/2018 18:05:39
Num.Script: 51004-0-0
Nro. O.S. : 1090873
Nome      : Altera - SNK_PROCESSA_DADOS_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - SNK_PROCESSA_DADOS_REINF
NomeObjeto: SNK_PROCESSA_DADOS_REINF
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_PROCESSA_DADOS_REINF(P_CODEMP           NUMBER,
                                                     P_DTREF            DATE,
                                                     P_TPAMB            VARCHAR2,
                                                     P_SEQUENCIA_ATUAL  NUMBER, 
                                                     P_TIPDADOS         CHAR,                   /*T=TODOS, C=CADOSTRO, M=MOVIMENTO*/
                                                     P_EVENTO           VARCHAR2 := 'TODOS',    /*TODOS, NOMEEVENTO*/
                                                     P_NOMETAB          VARCHAR2 := NULL,       /*UTILIZADO NA RECURSIVIDADE*/
                                                     P_SEQUENCIA_PAI    NUMBER := NULL,         /*UTILIZADO NA RECURSIVIDADE*/
                                                     P_RESULT           OUT NUMBER)     
AS
    P_SEQUENCIA_OLD         NUMBER;
    P_SEQUENCIA_NEW         NUMBER;
    P_SEQUENCIA_DEL         NUMBER;
    P_DTREF_OLD             DATE;
    P_NRORECIBO             VARCHAR2(50);
    P_NRORECIBO_OLD         VARCHAR2(50) := NULL;
    P_COL_PAD_PAI_CADASTRO  VARCHAR2(4000) := 'CODEMP, DTREF, TPAMB, SEQUENCIA, STATUSREG, TIPO, NRORECIBO, NRORECIBOANT, IDEVENTO, CONTROLE, ';
    P_COL_PAD_PAI_MOVIMENTO VARCHAR2(4000) := 'CODEMP, DTREF, TPAMB, SEQUENCIA, STATUSREG, NRORECIBO, NRORECIBOANT, IDEVENTO, CONTROLE, ';
    P_COL_PAD_PAI           VARCHAR2(4000);    
    /*AS VARIAVEIS 'P_COL_PAD_FILHOS' E 'P_COL_PAD_FILHOS_PARAM' TEM QUE RESPEITAR A MESMA SEQUÊNCIA DE CAMPOS/PARAMETROS*/
    P_COL_PAD_FILHOS        VARCHAR2(4000) := 'CODEMP, DTREF, TPAMB, SEQUENCIA, ';
    P_COL_PAD_FILHOS_PARAM  VARCHAR2(4000) := ':CODEMP, :DTREF, :TPAMB, :SEQUENCIA, ';
    P_INSERT_COLUMNS        VARCHAR2(4000);
    P_INSERT_VALUES         VARCHAR2(4000);
    P_COUNT                 NUMBER(10);
    P_STATUS                CHAR(1);
    P_TIPO                  CHAR(1);
    queSql                  VARCHAR2(4000);
BEGIN

    IF P_NOMETAB IS NULL THEN
        FOR EVE IN (SELECT MON.NOMETAB, MON.NOMEEVENTO
                    FROM TRIMON MON
                        INNER JOIN TRIEVT EVT ON EVT.TIPOEVENTO = MON.NOMEEVENTO
                    WHERE (P_EVENTO = 'TODOS' OR MON.NOMEEVENTO = P_EVENTO)
                        AND MON.NOMETABPAI IS NULL
                        AND (P_EVENTO <> 'TODOS' OR P_TIPDADOS = 'T' OR EVT.GRUPO = P_TIPDADOS)
                        AND (EXISTS(SELECT 1
                                   FROM TGFEPS
                                   WHERE EVENTO = EVT.TIPOEVENTO
                                     AND CODEMP = P_CODEMP
                                     AND GERAREVENTO = 'S') OR 
                             EVT.GRUPO = 'C') /*EVENTOS DE CADASTRO NÃO ESTÃO NA TABELA TGFEPS*/
                    GROUP BY MON.NOMEEVENTO, MON.NOMETAB, MON.ORDEM
                    ORDER BY MON.ORDEM
                    ) 
        LOOP
            queSql := ' SELECT COUNT(1)  
                        FROM '||EVE.NOMETAB||'
                        WHERE CODEMP = :CODEMP
                          AND DTREF = :DTREF
                          AND TPAMB = :TPAMB
                          AND STATUSREG = ''E'' ';

            EXECUTE IMMEDIATE queSql INTO P_COUNT USING P_CODEMP, P_DTREF, P_TPAMB;

            IF P_COUNT > 0 THEN
                RAISE_APPLICATION_ERROR(-20101, 'Não é possivel gerar dados do REINF se existir eventos enviados para esta empresa/referência.');
            END IF;

            queSql := ' SELECT MAX(SEQUENCIA)
                        FROM '||EVE.NOMETAB||'
                        WHERE CODEMP = :CODEMP
                          AND DTREF = :DTREF
                          AND TPAMB = :TPAMB
                          AND STATUSREG = ''P''';

            EXECUTE IMMEDIATE queSql INTO P_SEQUENCIA_DEL USING P_CODEMP, P_DTREF, P_TPAMB;

            IF NVL(P_SEQUENCIA_DEL, 0) > 0 THEN
                FOR CUR_DEL IN (SELECT NOMETAB
                                FROM TRIMON
                                WHERE NOMETABPAI IS NULL
                                ORDER BY ORDEM DESC /*NÃO ALTERAR ESSA ORDEM: OS MOVIMENTOS DEVEM SER DELETADOS ANTES DOS PROCESSOS, POIS EXISTE FK ENTRE ELES*/
                                ) 
                LOOP
                    queSql := ' DELETE FROM '||CUR_DEL.NOMETAB||'
                                WHERE CODEMP = :CODEMP
                                  AND DTREF = :DTREF
                                  AND TPAMB = :TPAMB
                                  AND SEQUENCIA = :SEQUENCIA';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_DEL;
                END LOOP;
                P_SEQUENCIA_NEW := P_SEQUENCIA_ATUAL;
                EXIT; /*COMO JÁ DELETEI TODOS OS REGISTROS PARA A ULTIMA SEQUENCIA PENDENTE, POSSO SAIR DO LOOP*/
            END IF;
        END LOOP;
    ELSE
        P_SEQUENCIA_NEW := P_SEQUENCIA_PAI;
    END IF;

    IF P_SEQUENCIA_NEW IS NULL THEN /*SE A SEQUENCIA ESTÁ NULL, NENHUM REGISTRO FOI DELETADO, LOGO A SEQUENCIA SERÁ A SEQUENCIA ATUAL + 1*/
        P_SEQUENCIA_NEW := P_SEQUENCIA_ATUAL + 1;
    END IF;

    FOR EVE IN (SELECT MON.NOMETAB, MON.NOMEEVENTO, MON.NOMEVIEW, MON.NOMETABPAI, MON.VIEWDETALHE, EVT.GRUPO, MON.ORDEM
                FROM TRIMON MON
                    INNER JOIN TRIEVT EVT ON EVT.TIPOEVENTO = MON.NOMEEVENTO
                WHERE (P_NOMETAB IS NOT NULL AND MON.NOMETAB = P_NOMETAB) /*BUSCA O PRÓPRIO EVENTO*/ OR 
                         (  P_NOMETAB IS NULL
                         AND MON.NOMETABPAI IS NULL 
                         AND (P_EVENTO = 'TODOS' OR MON.NOMEEVENTO = P_EVENTO)                      
                         AND (P_EVENTO <> 'TODOS' OR P_TIPDADOS = 'T' OR EVT.GRUPO = P_TIPDADOS)
                         AND (EXISTS(SELECT 1
                                       FROM TGFEPS
                                     WHERE EVENTO = EVT.TIPOEVENTO
                                        AND GERAREVENTO = 'S') OR
                              EVT.GRUPO = 'C') /*EVENTOS DE CADASTRO NÃO ESTÃO NA TABELA TGFEPS*/
                      )
                GROUP BY MON.NOMETAB, MON.NOMEEVENTO, MON.NOMEVIEW, MON.NOMETABPAI, MON.VIEWDETALHE, EVT.GRUPO, MON.ORDEM
                ORDER BY MON.ORDEM  
               )
    LOOP
        P_NRORECIBO := NULL;
        P_NRORECIBO_OLD := NULL;
        P_STATUS := 'P';
        P_TIPO := 'I';

        IF EVE.GRUPO = 'C' THEN
            P_COL_PAD_PAI :=  P_COL_PAD_PAI_CADASTRO;
        ELSE 
            P_COL_PAD_PAI :=  P_COL_PAD_PAI_MOVIMENTO;
        END IF;

        IF P_SEQUENCIA_NEW > 1 THEN
            queSql := ' SELECT MAX(SEQUENCIA)
                        FROM '||EVE.NOMETAB||'
                        WHERE CODEMP = :CODEMP
                          AND DTREF = :DTREF
                          AND TPAMB = :TPAMB
                          AND SEQUENCIA < :SEQUENCIA_NEW';

            EXECUTE IMMEDIATE queSql INTO P_SEQUENCIA_OLD USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW;

            P_DTREF_OLD := P_DTREF;
        ELSIF EVE.GRUPO <> 'M' THEN
            queSql := ' SELECT NVL(MAX(DTREF), :DTREF)
                        FROM '||EVE.NOMETAB||'
                        WHERE CODEMP = :CODEMP
                          AND DTREF < :DTREF
                          AND TPAMB = :TPAMB';
            EXECUTE IMMEDIATE queSql INTO P_DTREF_OLD USING P_DTREF, P_CODEMP, P_DTREF, P_TPAMB;

            IF P_DTREF_OLD <> P_DTREF THEN
                queSql := ' SELECT NVL(MAX(SEQUENCIA),0)
                            FROM '||EVE.NOMETAB||'
                            WHERE CODEMP = :CODEMP
                              AND DTREF = :DTREF
                              AND TPAMB = :TPAMB';

                EXECUTE IMMEDIATE queSql INTO P_SEQUENCIA_OLD USING P_CODEMP, P_DTREF_OLD, P_TPAMB;
            ELSE
                P_SEQUENCIA_OLD := P_SEQUENCIA_NEW;
            END IF;
        ELSE
            P_SEQUENCIA_OLD := P_SEQUENCIA_NEW;
            P_DTREF_OLD := P_DTREF;
        END IF;

        IF EVE.GRUPO = 'M' THEN  /*MOVIMENTOS GRAVAM OS EVENTOS FILHOS PRIMEIRO*/     
            FOR EVEF IN (SELECT NOMEEVENTO, NOMETAB
                         FROM TRIMON
                         WHERE NOMETABPAI = EVE.NOMETAB
                         GROUP BY NOMEEVENTO, NOMETAB
                         ORDER BY NOMEEVENTO 
                        ) 
            LOOP
                SNK_PROCESSA_DADOS_REINF(P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_ATUAL, P_TIPDADOS, EVEF.NOMEEVENTO, EVEF.NOMETAB, P_SEQUENCIA_NEW, P_RESULT);
            END LOOP;
        END IF;

        P_INSERT_COLUMNS := SNK_GET_COLUMNS_TABLE(EVE.NOMETAB, P_COL_PAD_PAI); /*BASTA CHAMAR UMA VEZ PQ AS COLUNAS PADRÕES DOS FILHOS ESTÃO CONTIDAS NAS COLUNAS PADRÕES DO PAI*/

        IF EVE.NOMETABPAI IS NULL THEN
            P_INSERT_VALUES  := P_INSERT_COLUMNS;
            P_INSERT_COLUMNS := P_COL_PAD_PAI||P_INSERT_COLUMNS;

            /*AS COLUNAS DE PARAMETRO DO SELECT, TEM QUE SEGUIR A MESMA ORDEM DOS CAMPOS DA VARIÁVEL P_COL_PAD_PAI (CADASTRO OU MOVIMENTO)*/
            queSql := ' INSERT INTO '||EVE.NOMETAB||' ('||P_INSERT_COLUMNS||')
                                  SELECT :CODEMP
                                       , :DTREF
                                       , :TPAMB
                                       , :SEQUENCIA
                                       , CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND STATUSREG_OLD = ''F'' THEN ''F'' 
                                              ELSE ''P'' 
                                         END AS STATUSREG ';

            IF EVE.GRUPO = 'C' THEN  
                queSql := queSql||    ', CASE WHEN DADOS.CONTROLE_OLD = ''I'' OR DADOS.NRORECIBO_OLD IS NULL THEN ''I'' 
                                              WHEN DADOS.CONTROLE_OLD = ''E'' THEN ''E'' 
                                              ELSE ''A'' 
                                         END AS TIPO ';
            END IF;

            queSql :=  queSql||       ', CASE WHEN DADOS.CONTROLE_OLD = ''I'' THEN DADOS.NRORECIBO_OLD
                                              WHEN DADOS.CONTROLE_OLD = ''A'' THEN NULL 
                                              ELSE NRORECIBOANT_OLD 
                                         END AS NRORECIBO
                                       , CASE WHEN DADOS.CONTROLE_OLD = ''I'' THEN NRORECIBOANT_OLD 
                                              ELSE DADOS.NRORECIBO_OLD 
                                         END AS NRORECIBO_ANT
                                       , CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND STATUSREG_OLD = ''F'' THEN IDEVENTO_OLD 
                                              ELSE NULL 
                                         END AS IDEEVENTO
                                       , ''I'' AS CONTROLE
                                       , '||P_INSERT_VALUES||'     
                                  FROM (SELECT 
                                             NVL(ANT.CONTROLE, '' '') AS CONTROLE_OLD
                                           , ANT.NRORECIBO AS NRORECIBO_OLD 
                                           , ANT.NRORECIBOANT AS NRORECIBOANT_OLD ';

            IF EVE.GRUPO = 'C' THEN  
                queSql :=  queSql||       ', ANT.TIPO AS TIPO_OLD ';
            END IF;

            queSql :=  queSql||           ', ANT.STATUSREG AS STATUSREG_OLD
                                           , ANT.IDEVENTO AS IDEVENTO_OLD
                                           , V.*
                                        FROM '||EVE.NOMEVIEW||' V
                                             LEFT JOIN ( SELECT 
                                                            CHAVE
                                                          , CONTROLE
                                                          , NRORECIBO
                                                          , NRORECIBOANT ';

        IF EVE.GRUPO = 'C' THEN
            queSql :=  queSql||                           ', TIPO ';
        END IF;

        queSql :=  queSql||                               ', STATUSREG
                                                           , IDEVENTO
                                                          FROM '||EVE.NOMETAB||' OLD
                                                          WHERE OLD.CODEMP = :CODEMP
                                                             AND OLD.DTREF = :DTREF_OLD
                                                             AND OLD.TPAMB = :TPAMB
                                                             AND OLD.SEQUENCIA = :SEQUENCIA_OLD) ANT ON ANT.CHAVE = V.CHAVE
                                        WHERE V.CODEMP = :CODEMP ';

            IF EVE.GRUPO = 'C' THEN
                queSql :=  queSql||      '  AND :GRUPO = ''C'' 
                                            AND :DTREF BETWEEN V.INIVALID AND NVL(V.FIMVALID, :DTREF)
                                       ) DADOS';

                EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW, P_CODEMP, P_DTREF_OLD, P_TPAMB, P_SEQUENCIA_OLD, P_CODEMP, EVE.GRUPO, P_DTREF, P_DTREF;
            ELSE
                IF EVE.VIEWDETALHE = 'S' THEN /*A VIEW QUE É DETALHADA NÃO PRECISA PASSAR OS DADOS 'TPAMB' E 'SEQUENCIA' COMO PARAMETROS*/
                    queSql :=  queSql||  ' AND DTREF = :DTREF 
                                       ) DADOS';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW, P_CODEMP, P_DTREF_OLD, P_TPAMB, P_SEQUENCIA_OLD, P_CODEMP, P_DTREF;
                ELSE
                    queSql :=  queSql||  ' AND DTREF = :DTREF 
                                           AND TPAMB = :TPAMB
                                           AND SEQUENCIA = :SEQUENCIA
                                       ) DADOS';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW, P_CODEMP, P_DTREF_OLD, P_TPAMB, P_SEQUENCIA_OLD, P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW;
                END IF; 
            END IF;
        ELSE
            /*SÓ ENTRA AQUI PARA OS FILHOS*/
            P_INSERT_VALUES  := P_COL_PAD_FILHOS_PARAM||P_INSERT_COLUMNS;
            P_INSERT_COLUMNS := P_COL_PAD_FILHOS||P_INSERT_COLUMNS;

            queSql :=       ' INSERT INTO '||EVE.NOMETAB||' ('||P_INSERT_COLUMNS||')
                                        SELECT '||P_INSERT_VALUES||'
                                        FROM '||EVE.NOMEVIEW||'
                                        WHERE CODEMP = :CODEMP';

            IF EVE.GRUPO = 'C' THEN
                queSql :=  queSql||      ' AND DTREF = :DTREF
                                           AND :GRUPO = ''C'' ';

                EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW, P_CODEMP, P_DTREF, EVE.GRUPO;
            ELSE
                IF EVE.VIEWDETALHE = 'S' THEN /*A VIEW QUE É DETALHADA NÃO PRECISA PASSAR OS DADOS 'TPAMB' E 'SEQUENCIA' COMO PARAMETROS*/
                    queSql :=  queSql||  ' AND DTREF = :DTREF ';
                    
                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW, P_CODEMP, P_DTREF;
                ELSE
                    queSql :=  queSql||  ' AND DTREF = :DTREF 
                                           AND TPAMB = :TPAMB
                                           AND SEQUENCIA = :SEQUENCIA ';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW, P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW;
                END IF; 
            END IF;
        END IF;

        IF EVE.GRUPO = 'C' THEN  /*CADASTROS GRAVAM O EVENTO PAI PRIMEIRO*/

            /*UTILIZADO QUANDO O INSERT NÃO FOI FEITO POR CONTA DE EXCLUSÃO, ASSIM PRECISAMOS CRIAR UMA NOVA LINHA PARA SE FAZER A EXCLUSÃO*/
            IF P_DTREF <> P_DTREF_OLD  OR P_SEQUENCIA_NEW <> P_SEQUENCIA_OLD THEN
                P_INSERT_VALUES := SNK_GET_COLUMNS_TABLE(EVE.NOMETAB, P_COL_PAD_PAI);
                P_INSERT_VALUES := REPLACE(P_INSERT_VALUES, ' ', '');
                P_INSERT_VALUES := 'O.'||REPLACE(P_INSERT_VALUES, ',', ',O.');

                IF EVE.NOMETABPAI IS NULL THEN 
                    queSql := ' MERGE INTO '||EVE.NOMETAB||' N
                                USING (SELECT '||P_INSERT_COLUMNS||' 
                                       FROM '||EVE.NOMETAB||' 
                                       WHERE CODEMP = :CODEMP
                                         AND DTREF = :DTREF_OLD
                                         AND TPAMB = :TPAMB
                                         AND SEQUENCIA = :SEQUENCIA_OLD
                                          ) O 
                                ON (N.CODEMP = O.CODEMP AND
                                    N.DTREF = :DTREF AND
                                    N.TPAMB = O.TPAMB AND
                                    N.SEQUENCIA = :SEQUENCIA AND
                                    N.CHAVE = O.CHAVE)
                                WHEN NOT MATCHED THEN INSERT ('||P_INSERT_COLUMNS||')
                                    VALUES (O.CODEMP, 
                                           :DTREF, 
                                           O.TPAMB, 
                                           :SEQUENCIA, 
                                           CASE WHEN O.CONTROLE = ''E'' OR O.STATUSREG <> ''F'' THEN ''P''
                                                ELSE ''F''
                                           END, 
                                           CASE WHEN O.CONTROLE = ''E'' OR O.STATUSREG <> ''F'' THEN ''E''
                                                ELSE O.TIPO
                                           END, 
                                           CASE WHEN O.CONTROLE = ''E'' OR O.STATUSREG <> ''F'' THEN NULL 
                                                ELSE O.NRORECIBO
                                           END, 
                                           CASE WHEN O.CONTROLE = ''E'' THEN O.NRORECIBO 
                                                ELSE O.NRORECIBOANT 
                                           END, 
                                           CASE WHEN O.CONTROLE = ''E'' OR O.STATUSREG <> ''F'' THEN NULL
                                                ELSE O.IDEVENTO
                                           END, 
                                           CASE WHEN O.CONTROLE = ''E'' OR O.STATUSREG <> ''F'' THEN ''I''
                                                ELSE O.CONTROLE
                                           END, 
                                           '||P_INSERT_VALUES||' ) ';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF_OLD, P_TPAMB, P_SEQUENCIA_OLD, P_DTREF, P_SEQUENCIA_NEW, P_DTREF, P_SEQUENCIA_NEW;
                ELSE 
                    queSql := ' MERGE INTO '||EVE.NOMETAB||' N
                                USING (SELECT '||P_INSERT_COLUMNS||'
                                       FROM '||EVE.NOMETAB||' 
                                       WHERE CODEMP = :CODEMP
                                         AND DTREF = :DTREF_OLD
                                         AND TPAMB = :TPAMB
                                         AND SEQUENCIA = :SEQUENCIA_OLD
                                          ) O 
                                ON (N.CODEMP = O.CODEMP AND
                                    N.DTREF = :DTREF AND
                                    N.TPAMB = O.TPAMB AND
                                    N.SEQUENCIA = :SEQUENCIA AND 
                                    N.CHAVE = O.CHAVE)
                                WHEN NOT MATCHED THEN INSERT ('||P_INSERT_COLUMNS||')
                                    VALUES (O.CODEMP, 
                                            :DTREF, 
                                            O.TPAMB, 
                                            :SEQUENCIA, 
                                            '||P_INSERT_VALUES||' ) ';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF_OLD, P_TPAMB, P_SEQUENCIA_OLD, P_DTREF, P_SEQUENCIA_NEW, P_DTREF, P_SEQUENCIA_NEW;                                    
                END IF;
            END IF;

            FOR EVEF IN (SELECT NOMEEVENTO, NOMETAB
                         FROM TRIMON
                         WHERE NOMETABPAI = EVE.NOMETAB
                         GROUP BY NOMEEVENTO, NOMETAB
                         ORDER BY NOMEEVENTO 
                        ) 
            LOOP
                SNK_PROCESSA_DADOS_REINF(P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_ATUAL, P_TIPDADOS, EVEF.NOMEEVENTO, EVEF.NOMETAB, P_SEQUENCIA_NEW, P_RESULT);
            END LOOP;
        END IF;

        P_RESULT := P_SEQUENCIA_NEW;
    END LOOP;
EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    IF queSql IS NOT NULL THEN
        SELECT COUNT(1) INTO P_COUNT
        FROM LOGREINF
        WHERE DTOCOR = SYSDATE
         AND CODUSU = STP_GET_CODUSULOGADO();
        IF P_COUNT = 0 THEN
            INSERT INTO LOGREINF(DTOCOR, CODUSU, SQLERR)
                SELECT SYSDATE, STP_GET_CODUSULOGADO(), queSql FROM DUAL; 
        END IF;
    END IF;
    COMMIT;
    RAISE_APPLICATION_ERROR(-20101, SQLERRM);
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51005-0-1000
Nro. O.S. : 1090873
Nome      : INSERE - THOOBJ - 5100400
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_PROCESSA_DADOS_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210000
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_PROCESSA_DADOS_REINF' NOMEOBJ, 51004 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, 'a8356496ffcb4bb8620d983108a340d5' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_PROCESSA_DADOS_REINF' and THO.hashcode = 'a8356496ffcb4bb8620d983108a340d5')
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51040-0-0
Nro. O.S. : 1147054
Nome      : Cria - TRSSEL PERSONALIZAR
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TRSSEL PERSONALIZAR
NomeObjeto: PERSONALIZAR
TipoObjeto: COLUMN
NomeTabela: TRSSEL
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRSSEL ADD PERSONALIZAR VARCHAR2(1)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51041-0-0
Nro. O.S. : 1147054
Nome      : Cria - TRSEPE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TRSEPE
NomeObjeto: TRSEPE
TipoObjeto: TABLE
NomeTabela: TRSEPE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TRSEPE(
    NUREQUISICAO NUMBER(10) NOT NULL,
    NUSELECAO NUMBER(10),
    CODEPE NUMBER(10) NOT NULL, 
    CODETAPA NUMBER(10) NOT NULL,
    ARQMODEMAIL VARCHAR2(200), 
    DTALTER DATE DEFAULT SYSDATE NOT NULL,
    DTABERTURA DATE DEFAULT SYSDATE NOT NULL
)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51042-0-0
Nro. O.S. : 1147054
Nome      : Cria - TRSEPE CODUSU
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TRSEPE CODUSU
NomeObjeto: CODUSU
TipoObjeto: COLUMN
NomeTabela: TRSEPE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE P_COUNT NUMBER(5);
BEGIN
  SELECT COUNT(1) INTO P_COUNT
  FROM USER_TAB_COLUMNS
  WHERE TABLE_NAME = 'TSIUSU'
    AND COLUMN_NAME = 'CODUSU'
    AND DATA_PRECISION = 5;
  
  IF P_COUNT > 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE TRSEPE ADD CODUSU NUMBER(5) DEFAULT 0';
  ELSE
    EXECUTE IMMEDIATE 'ALTER TABLE TRSEPE ADD CODUSU NUMBER(10) DEFAULT 0';
  END IF;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51043-0-0
Nro. O.S. : 1147054
Nome      : Cria - PK_TRSEPE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - PK_TRSEPE
NomeObjeto: PK_TRSEPE
TipoObjeto: PRIMARY KEY
NomeTabela: TRSEPE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRSEPE ADD CONSTRAINT PK_TRSEPE PRIMARY KEY (CODEPE)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51044-0-0
Nro. O.S. : 1147054
Nome      : Cria - FK_TRSEPE_TRSETA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - FK_TRSEPE_TRSETA
NomeObjeto: FK_TRSEPE_TRSETA
TipoObjeto: FOREIGN KEY
NomeTabela: TRSEPE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRSEPE ADD CONSTRAINT FK_TRSEPE_TRSETA FOREIGN KEY (CODETAPA) REFERENCES TRSETA (CODETAPA)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51045-0-0
Nro. O.S. : 1147054
Nome      : Cria - FK_TRSEPE_TRSSEL
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - FK_TRSEPE_TRSSEL
NomeObjeto: FK_TRSEPE_TRSSEL
TipoObjeto: FOREIGN KEY
NomeTabela: TRSEPE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRSEPE ADD CONSTRAINT FK_TRSEPE_TRSSEL FOREIGN KEY (NUSELECAO) REFERENCES TRSSEL (NUSELECAO)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51046-0-0
Nro. O.S. : 1147054
Nome      : Cria - FK_TRSEPE_TRSREQ
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - FK_TRSEPE_TRSREQ
NomeObjeto: FK_TRSEPE_TRSREQ
TipoObjeto: FOREIGN KEY
NomeTabela: TRSEPE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRSEPE ADD CONSTRAINT FK_TRSEPE_TRSREQ FOREIGN KEY (NUREQUISICAO) REFERENCES TRSREQ (NUREQUISICAO)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51047-0-0
Nro. O.S. : 1147054
Nome      : Cria - FK_TRSEPE_TSIUSU
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - FK_TRSEPE_TSIUSU
NomeObjeto: FK_TRSEPE_TSIUSU
TipoObjeto: FOREIGN KEY
NomeTabela: TRSEPE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRSEPE ADD CONSTRAINT FK_TRSEPE_TSIUSU FOREIGN KEY (CODUSU) REFERENCES TSIUSU (CODUSU)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51048-0-0
Nro. O.S. : 1147054
Nome      : Dropa - CKC_STATUSAPROV_TRSCAN
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropa - CKC_STATUSAPROV_TRSCAN
NomeObjeto: CKC_STATUSAPROV_TRSCAN
TipoObjeto: CONSTRAINT
NomeTabela: TRSCAN
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRSCAN DROP CONSTRAINT CKC_STATUSAPROV_TRSCAN
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51049-0-0
Nro. O.S. : 1147054
Nome      : Cria - CKC_STATUSAPROV_TRSCAN
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - CKC_STATUSAPROV_TRSCAN
NomeObjeto: CKC_STATUSAPROV_TRSCAN
TipoObjeto: CONSTRAINT
NomeTabela: TRSCAN
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRSCAN ADD (
    CONSTRAINT CKC_STATUSAPROV_TRSCAN
    CHECK (STATUSAPROV IN ('A','C','D','E','P','R'))
    ENABLE VALIDATE)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51050-0-0
Nro. O.S. : 1147054
Nome      : Dropa - CKC_SITSELECAO_TRSSEL
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropa - CKC_SITSELECAO_TRSSEL
NomeObjeto: CKC_SITSELECAO_TRSSEL
TipoObjeto: CONSTRAINT
NomeTabela: TRSSEL
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRSSEL DROP CONSTRAINT CKC_SITSELECAO_TRSSEL
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51051-0-0
Nro. O.S. : 1147054
Nome      : Cria - CKC_SITSELECAO_TRSSEL
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - CKC_SITSELECAO_TRSSEL
NomeObjeto: CKC_SITSELECAO_TRSSEL
TipoObjeto: CONSTRAINT
NomeTabela: TRSSEL
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRSSEL ADD (
    CONSTRAINT CKC_SITSELECAO_TRSSEL
    CHECK (SITSELECAO IS NULL OR ( SITSELECAO IN (0,1,2,3) ))
    ENABLE VALIDATE)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51052-0-0
Nro. O.S. : 1147054
Nome      : Dropa - CKC_STATUS_TRSCAN
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropa - CKC_STATUS_TRSCAN
NomeObjeto: CKC_STATUS_TRSCAN
TipoObjeto: CONSTRAINT
NomeTabela: TRSCAN
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRSCAN DROP CONSTRAINT CKC_STATUS_TRSCAN
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51053-0-0
Nro. O.S. : 1147054
Nome      : Cria - CKC_STATUS_TRSCAN
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - CKC_STATUS_TRSCAN
NomeObjeto: CKC_STATUS_TRSCAN
TipoObjeto: CONSTRAINT
NomeTabela: TRSCAN
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRSCAN ADD (
    CONSTRAINT CKC_STATUS_TRSCAN
    CHECK (STATUS IN ('A','C','P','R'))
    ENABLE VALIDATE)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51054-0-0
Nro. O.S. : 1147054
Nome      : Cria - TRSSTE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TRSSTE
NomeObjeto: TRSSTE
TipoObjeto: TABLE
NomeTabela: TRSSTE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TRSSTE(
    CODSTAETAPA NUMBER(10) NOT NULL,
    CODETAPA NUMBER(10) NOT NULL,
    NUSELECAO NUMBER(10) NOT NULL,
    NUCURRICULO NUMBER(10) NOT NULL,
    NUREQUISICAO NUMBER(10) NOT NULL,
    STATUSETAPA VARCHAR2(1),
    TIPOETAPA VARCHAR2(1)
)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51055-0-0
Nro. O.S. : 1147054
Nome      : Cria - PK_TRSSTE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - PK_TRSSTE
NomeObjeto: PK_TRSSTE
TipoObjeto: PRIMARY KEY
NomeTabela: TRSSTE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRSSTE ADD CONSTRAINT PK_TRSSTE PRIMARY KEY (CODSTAETAPA)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51056-0-0
Nro. O.S. : 1147054
Nome      : Cria - FK_TRSSTE_TRSETA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - FK_TRSSTE_TRSETA
NomeObjeto: FK_TRSSTE_TRSETA
TipoObjeto: FOREIGN KEY
NomeTabela: TRSSTE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRSSTE ADD CONSTRAINT FK_TRSSTE_TRSETA FOREIGN KEY (CODETAPA) REFERENCES TRSETA (CODETAPA)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51057-0-0
Nro. O.S. : 1147054
Nome      : Cria - FK_TRSSTE_TRSSEL
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - FK_TRSSTE_TRSSEL
NomeObjeto: FK_TRSSTE_TRSSEL
TipoObjeto: FOREIGN KEY
NomeTabela: TRSSTE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRSSTE ADD CONSTRAINT FK_TRSSTE_TRSSEL FOREIGN KEY (NUSELECAO) REFERENCES TRSSEL (NUSELECAO)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51058-0-0
Nro. O.S. : 1147054
Nome      : Cria - TRSETA NUSELECAO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TRSETA NUSELECAO
NomeObjeto: NUSELECAO
TipoObjeto: COLUMN
NomeTabela: TRSETA
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRSETA ADD NUSELECAO NUMBER(10)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51059-0-0
Nro. O.S. : 1147054
Nome      : Cria - TRSETA NUCURRICULO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TRSETA NUCURRICULO
NomeObjeto: NUCURRICULO
TipoObjeto: COLUMN
NomeTabela: TRSETA
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRSETA ADD NUCURRICULO NUMBER(10)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51060-0-0
Nro. O.S. : 1147054
Nome      : Cria - TRSETA NUREQUISICAO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TRSETA NUREQUISICAO
NomeObjeto: NUREQUISICAO
TipoObjeto: COLUMN
NomeTabela: TRSETA
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRSETA ADD NUREQUISICAO NUMBER(10)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51061-0-0
Nro. O.S. : 1147054
Nome      : Cria - FK_TRSETA_TRSCAN
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - FK_TRSETA_TRSCAN
NomeObjeto: FK_TRSETA_TRSCAN
TipoObjeto: FOREIGN KEY
NomeTabela: TRSETA
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRSETA ADD CONSTRAINT FK_TRSETA_TRSCAN FOREIGN KEY (NUSELECAO,NUCURRICULO,NUREQUISICAO) REFERENCES TRSCAN (NUSELECAO,NUCURRICULO,NUREQUISICAO)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51062-0-0
Nro. O.S. : 1147054
Nome      : Cria - TRSSEL NUREQUISICAO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TRSSEL NUREQUISICAO
NomeObjeto: NUREQUISICAO
TipoObjeto: COLUMN
NomeTabela: TRSSEL
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRSSEL ADD NUREQUISICAO NUMBER(10)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51063-0-0
Nro. O.S. : 1147054
Nome      : Dropa - VGFSELECAO_ETAPA_CANDIDATO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropa - VGFSELECAO_ETAPA_CANDIDATO
NomeObjeto: VGFSELECAO_ETAPA_CANDIDATO
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
DROP VIEW VGFSELECAO_ETAPA_CANDIDATO
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 09/05/2018 09:49:52
Num.Script: 51064-0-0
Nro. O.S. : 1147054
Nome      : Cria - VGFSELECAO_ETAPA_CANDIDATO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - VGFSELECAO_ETAPA_CANDIDATO
NomeObjeto: VGFSELECAO_ETAPA_CANDIDATO
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE FORCE VIEW VGFSELECAO_ETAPA_CANDIDATO
(
   NUSELECAO,
   DESCRSELECAO,
   CODETAPA,
   DESCRETAPA,
   NUCURRICULO,
   NOMECANDIDATO,
   RESULTADO,
   CODUSU,
   DHINICIO,
   DHFINAL,
   NUEVENTO,
   NUREQUISICAO,
   STATUSETAPA,
   CODSTAETAPA,
   TIPOETAPA
)
AS
     SELECT SEL.NUSELECAO,
            SEL.DESCRSELECAO,
            ECG.CODETAPA,
            ETA.DESCRETAPA,
            CAN.NUCURRICULO,
            BCO.NOMECANDIDATO,
            PON.RESULTADO,
            EAG.CODUSU,
            EAG.DHINICIO,
            EAG.DHFINAL,
            EAG.NUEVENTO,
            REQ.NUREQUISICAO,
            STE.STATUSETAPA,
            STE.CODSTAETAPA,
            STE.TIPOETAPA
       FROM TRSSEL SEL
            INNER JOIN TRSCAN CAN ON CAN.NUSELECAO = SEL.NUSELECAO
            INNER JOIN TRSRQS RQS ON RQS.NUSELECAO = SEL.NUSELECAO
            INNER JOIN TRSREQ REQ ON REQ.NUREQUISICAO = RQS.NUREQUISICAO
            INNER JOIN
            TRSECG ECG
               ON     (ECG.CODCARGO = REQ.CODCARGO OR ECG.CODCARGO = 0)
                  AND ECG.CODEMP = REQ.CODEMP
            INNER JOIN TRSETA ETA ON (ETA.CODETAPA = ECG.CODETAPA)
            INNER JOIN TFCBCO BCO ON (BCO.NUCURRICULO = CAN.NUCURRICULO)
            LEFT JOIN
            TRSPON PON
               ON (    PON.CODETAPA = ETA.CODETAPA
                   AND PON.NUCURRICULO = BCO.NUCURRICULO
                   AND PON.NUSELECAO = CAN.NUSELECAO)
            LEFT JOIN
            TRSSTE STE
               ON (    STE.CODETAPA = ETA.CODETAPA
                   AND STE.NUSELECAO = SEL.NUSELECAO 
                   AND STE.NUCURRICULO = BCO.NUCURRICULO 
                   AND STE.NUREQUISICAO = RQS.NUREQUISICAO)
            LEFT JOIN
            TCSEAG EAG
               ON (    EAG.CODETAPA = ETA.CODETAPA
                   AND EAG.NUCURRICULO = BCO.NUCURRICULO
                   AND EAG.NUSELECAO = CAN.NUSELECAO
                   AND EAG.CANCELADO <> 'S')
      WHERE     (   ECG.CODCARGO <> 0
                 OR NOT EXISTS
                           (SELECT 1
                              FROM TRSECG ECG1
                             WHERE     ECG1.CODETAPA = ECG.CODETAPA
                                   AND ECG1.CODEMP = ECG.CODEMP
                                   AND ECG1.CODCARGO = REQ.CODCARGO))
                                   AND SEL.SITSELECAO <> 1 
                                   AND STE.STATUSETAPA IS NOT NULL                              
   ORDER BY 1, 3, 5
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51107-0-0
Nro. O.S. : 1148956
Nome      : Cria - LOGESOCIAL
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - LOGESOCIAL
NomeObjeto: LOGESOCIAL
TipoObjeto: TABLE
NomeTabela: LOGESOCIAL
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE LOGESOCIAL(
    DTLOG       DATE,
    SEQUENCIA   NUMBER(10),
    COMANDO     VARCHAR2(4000),
    CONSTRAINT PK_LOGESOCIAL PRIMARY KEY  (DTLOG, SEQUENCIA)
)
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51109-0-0
Nro. O.S. : 1148956
Nome      : Altera - SNK_GET_VALID_ALTER_ESOCIAL
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - SNK_GET_VALID_ALTER_ESOCIAL
NomeObjeto: SNK_GET_VALID_ALTER_ESOCIAL
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_GET_VALID_ALTER_ESOCIAL(P_EVENTO            VARCHAR2,
                                                        P_COLUNAS_PADRAO    VARCHAR2,
                                                        P_CODEMPMATRIZ      NUMBER,
                                                        P_DTREF             DATE,
                                                        P_SEQUENCIA         NUMBER,
                                                        P_TPAMB             CHAR,
                                                        P_NOMETAB_PAI       VARCHAR2 := NULL,
                                                        P_NOMETAB           VARCHAR2,
                                                        P_NOMEVIEW          VARCHAR2)
IS
   TYPE CURTYPE        IS REF CURSOR;
   CURVAL              CURTYPE;
   P_CONDITION         VARCHAR2(4000);
   queSql              VARCHAR2(4000);
   queUpd              VARCHAR2(4000);
   P_RESULT_QUERY      NUMBER;
   P_TABLE_PAI         VARCHAR2(100);
   P_CHAVES            VARCHAR2(4000);
   P_CHAVES_ALT        VARCHAR2(4000);
   P_CHAVE             VARCHAR2(50);
   P_VALIDACAO         VARCHAR2(50);
   P_NOMETAB_UTIL      VARCHAR2(100);
   P_COL_PAD_FILHOS    VARCHAR2(100) := 'CODEMP, DTREF, CHAVE, SEQUENCIA, TPAMB';
   P_FILTRO_FILHOS     VARCHAR2(4000);
   P_COUNT             NUMBER(10);
   P_DTLOG             DATE;
   P_SEQLOG            NUMBER(10);
   P_MSG               VARCHAR2(4000);
BEGIN
    P_CHAVES := NULL;
    P_CHAVES_ALT := NULL;

    IF P_NOMETAB = 'TFPS2200' THEN
        P_NOMETAB_UTIL := 'TFPS2200';
        FOR S2200 IN (SELECT CHAVE, VALIDACAO
                      FROM ( SELECT O.CHAVE
                                  , CASE WHEN N.CODEMP IS NULL AND O.ACAO <> 'E' THEN 'E'
                                         WHEN (N.CODEMP IS NULL AND O.ACAO = 'E') OR (NVL(N.INFOCOTA, ' ') = NVL(O.INFOCOTA, ' ') AND NVL(N.OBSERVACAO, ' ') = NVL(O.OBSERVACAO, ' ') AND NVL(N.TRABAPOSENT, ' ') = NVL(O.TRABAPOSENT, ' ') AND 
                                                                                        NVL(N.FONEPRINC, ' ') = NVL(O.FONEPRINC, ' ') AND NVL(N.FONEALTERNAT, ' ') = NVL(O.FONEALTERNAT, ' ') AND 
                                                                                        NVL(N.EMAILPRINC, ' ') = NVL(O.EMAILPRINC, ' ') AND NVL(N.MATRICULA, ' ') = NVL(O.MATRICULA, ' ') AND NVL(N.TPREGTRAB, 0) = NVL(O.TPREGTRAB, 0) AND 
                                                                                        NVL(N.TPREGPREV, 0) = NVL(O.TPREGPREV, 0) AND NVL(N.NRRECINFPRELIM, ' ') = NVL(O.NRRECINFPRELIM, ' ') AND NVL(N.CADINI, ' ') = NVL(O.CADINI, ' ') AND 
                                                                                        NVL(N.DTADM, SYSDATE) = NVL(O.DTADM, SYSDATE) AND NVL(N.TPADMISSAO, 0) = NVL(O.TPADMISSAO, 0) AND NVL(N.INDADMISSAO, 0) = NVL(O.INDADMISSAO, 0) AND 
                                                                                        NVL(N.TPREGJOR, 0) = NVL(O.TPREGJOR, 0) AND NVL(N.NATATIVIDADE, 0) = NVL(O.NATATIVIDADE, 0) AND NVL(N.DTBASE, 0) = NVL(O.DTBASE, 0) AND 
                                                                                        NVL(N.CNPJSINDCATEGPROF, ' ') = NVL(O.CNPJSINDCATEGPROF, ' ') AND NVL(N.OPCFGTS, 0) = NVL(O.OPCFGTS, 0) AND 
                                                                                        NVL(N.DTOPCFGTS, SYSDATE) = NVL(O.DTOPCFGTS, SYSDATE) AND NVL(N.HIPLEG, 0) = NVL(O.HIPLEG, 0) AND NVL(N.JUSTCONTR, ' ') = NVL(O.JUSTCONTR, ' ') AND 
                                                                                        NVL(N.TPINCLCONTR, 0) = NVL(O.TPINCLCONTR, 0) AND NVL(N.TPINSCIDETOMADORSERV, 0) = NVL(O.TPINSCIDETOMADORSERV, 0) AND 
                                                                                        NVL(N.NRINSCIDETOMADORSERV, ' ') = NVL(O.NRINSCIDETOMADORSERV, ' ') AND NVL(N.TPINSCIDEESTABVINC, 0) = NVL(O.TPINSCIDEESTABVINC, 0) AND 
                                                                                        NVL(N.NRINSCIDEESTABVINC, ' ') = NVL(O.NRINSCIDEESTABVINC, ' ') AND NVL(N.CPFTRABSUBST, ' ') = NVL(O.CPFTRABSUBST, ' ') AND 
                                                                                        NVL(N.INDPROVIM, 0) = NVL(O.INDPROVIM, 0) AND NVL(N.TPPROV, 0) = NVL(O.TPPROV, 0) AND NVL(N.DTNOMEACAO, SYSDATE) = NVL(O.DTNOMEACAO, SYSDATE) AND 
                                                                                        NVL(N.DTPOSSE, SYSDATE) = NVL(O.DTPOSSE, SYSDATE) AND NVL(N.DTEXERCICIO, SYSDATE) = NVL(O.DTEXERCICIO, SYSDATE) AND 
                                                                                        NVL(N.TPPLANRP, 0) = NVL(O.TPPLANRP, 0) AND NVL(N.NRPROCJUDINFODECJUD, ' ') = NVL(O.NRPROCJUDINFODECJUD, ' ') AND 
                                                                                        NVL(N.CODCARGO, ' ') = NVL(O.CODCARGO, ' ') AND NVL(N.CODFUNCAO, ' ') = NVL(O.CODFUNCAO, ' ') AND NVL(N.CODCATEG, 0) = NVL(O.CODCATEG, 0) AND 
                                                                                        NVL(N.CODCATEG2, 0) = NVL(O.CODCATEG2, 0) AND NVL(N.CODCARREIRA, ' ') = NVL(O.CODCARREIRA, ' ') AND 
                                                                                        NVL(N.DTINGRCARR, SYSDATE) = NVL(O.DTINGRCARR, SYSDATE) AND NVL(N.VRSALFX, 0) = NVL(O.VRSALFX, 0) AND NVL(N.UNDSALFIXO, 0) = NVL(O.UNDSALFIXO, 0) AND 
                                                                                        NVL(N.DSCSALVAR, ' ') = NVL(O.DSCSALVAR, ' ') AND NVL(N.TPCONTR, 0) = NVL(O.TPCONTR, 0) AND NVL(N.DTTERM, SYSDATE) = NVL(O.DTTERM, SYSDATE) AND 
                                                                                        NVL(N.CLAUASSEG, ' ') = NVL(O.CLAUASSEG, ' ') AND NVL(N.TPINSCLOCALTRABGERAL, 0) = NVL(O.TPINSCLOCALTRABGERAL, 0) AND 
                                                                                        NVL(N.NRINSCLOCALTRABGERAL, ' ') = NVL(O.NRINSCLOCALTRABGERAL, ' ') AND NVL(N.TPLOGRADLOCALTRABDOM, ' ') = NVL(O.TPLOGRADLOCALTRABDOM, ' ') AND 
                                                                                        NVL(N.DSCLOGRADLOCALTRABDOM, ' ') = NVL(O.DSCLOGRADLOCALTRABDOM, ' ') AND NVL(N.NRLOGRADLOCALTRABDOM, ' ') = NVL(O.NRLOGRADLOCALTRABDOM, ' ') AND 
                                                                                        NVL(N.COMPLEMENTOLOCALTRABDOM, ' ') = NVL(O.COMPLEMENTOLOCALTRABDOM, ' ') AND NVL(N.BAIRROLOCALTRABDOM, ' ') = NVL(O.BAIRROLOCALTRABDOM, ' ') AND 
                                                                                        NVL(N.CEPLOCALTRABDOM, ' ') = NVL(O.CEPLOCALTRABDOM, ' ') AND NVL(N.CODMUNICLOCALTRABDOM, 0) = NVL(O.CODMUNICLOCALTRABDOM, 0) AND 
                                                                                        NVL(N.UFLOCALTRABDOM, ' ') = NVL(O.UFLOCALTRABDOM, ' ') AND NVL(N.QTDHRSSEM, 0) = NVL(O.QTDHRSSEM, 0) AND NVL(N.TPJORNADA, 0) = 
                                                                                        NVL(O.TPJORNADA, 0) AND NVL(N.DSCTPJORN, ' ') = NVL(O.DSCTPJORN, ' ') AND NVL(N.TMPPARC, ' ') = NVL(O.TMPPARC, ' ') AND 
                                                                                        NVL(N.CNPJSINDTRAB, ' ') = NVL(O.CNPJSINDTRAB, ' ') AND NVL(N.NRPROCJUDALVARAJUDICIAL, ' ') = NVL(O.NRPROCJUDALVARAJUDICIAL, ' ') AND 
                                                                                        NVL(N.CNPJEMPREGANT, ' ') = NVL(O.CNPJEMPREGANT, ' ') AND NVL(N.MATRICANT, ' ') = NVL(O.MATRICANT, ' ') AND 
                                                                                        NVL(N.DTINIVINCULO, SYSDATE) = NVL(O.DTINIVINCULO, SYSDATE) AND NVL(N.OBSERVACAOSUCESSAOVINC, ' ') = NVL(O.OBSERVACAOSUCESSAOVINC, ' ') AND 
                                                                                        NVL(N.DTINIAFAST, SYSDATE) = NVL(O.DTINIAFAST, SYSDATE) AND NVL(N.CODMOTAFAST, ' ') = NVL(O.CODMOTAFAST, ' ') AND 
                                                                                        NVL(N.DTDESLIG, SYSDATE) = NVL(O.DTDESLIG, SYSDATE) AND N.CHAVE = O.CHAVE AND NVL(N.DTEXPEDRIC, SYSDATE) = NVL(O.DTEXPEDRIC, SYSDATE) AND 
                                                                                        NVL(N.TPINSCEMPREGADOR, 0) = NVL(O.TPINSCEMPREGADOR, 0) AND NVL(N.NRINSCEMPREGADOR, ' ') = NVL(O.NRINSCEMPREGADOR, ' ') AND 
                                                                                        NVL(N.CPFTRAB, ' ') = NVL(O.CPFTRAB, ' ') AND NVL(N.NISTRAB, ' ') = NVL(O.NISTRAB, ' ') AND NVL(N.NMTRAB, ' ') = NVL(O.NMTRAB, ' ') AND 
                                                                                        NVL(N.SEXO, ' ') = NVL(O.SEXO, ' ') AND NVL(N.RACACOR, 0) = NVL(O.RACACOR, 0) AND NVL(N.ESTCIV, 0) = NVL(O.ESTCIV, 0) AND 
                                                                                        NVL(N.GRAUINSTR, ' ') = NVL(O.GRAUINSTR, ' ') AND NVL(N.INDPRIEMPR, ' ') = NVL(O.INDPRIEMPR, ' ') AND NVL(N.NMSOC, ' ') = NVL(O.NMSOC, ' ') AND 
                                                                                        NVL(N.DTNASCTONASCIMENTO, SYSDATE) = NVL(O.DTNASCTONASCIMENTO, SYSDATE) AND NVL(N.CODMUNICNASCIMENTO, 0) = NVL(O.CODMUNICNASCIMENTO, 0) AND 
                                                                                        NVL(N.UFNASCIMENTO, ' ') = NVL(O.UFNASCIMENTO, ' ') AND NVL(N.PAISNASCTONASCIMENTO, ' ') = NVL(O.PAISNASCTONASCIMENTO, ' ') AND 
                                                                                        NVL(N.PAISNACNASCIMENTO, ' ') = NVL(O.PAISNACNASCIMENTO, ' ') AND NVL(N.NMMAENASCIMENTO, ' ') = NVL(O.NMMAENASCIMENTO, ' ') AND 
                                                                                        NVL(N.NMPAINASCIMENTO, ' ') = NVL(O.NMPAINASCIMENTO, ' ') AND NVL(N.NRCTPS, ' ') = NVL(O.NRCTPS, ' ') AND 
                                                                                        NVL(N.SERIECTPS, ' ') = NVL(O.SERIECTPS, ' ') AND NVL(N.UFCTPS, ' ') = NVL(O.UFCTPS, ' ') AND NVL(N.NRRIC, ' ') = NVL(O.NRRIC, ' ') AND 
                                                                                        NVL(N.ORGAOEMISSORRIC, ' ') = NVL(O.ORGAOEMISSORRIC, ' ') AND NVL(N.NRRG, ' ') = NVL(O.NRRG, ' ') AND 
                                                                                        NVL(N.ORGAOEMISSORRG, ' ') = NVL(O.ORGAOEMISSORRG, ' ') AND NVL(N.DTEXPEDRG, SYSDATE) = NVL(O.DTEXPEDRG, SYSDATE) AND 
                                                                                        NVL(N.NRRNE, ' ') = NVL(O.NRRNE, ' ') AND NVL(N.ORGAOEMISSORRNE, ' ') = NVL(O.ORGAOEMISSORRNE, ' ') AND 
                                                                                        NVL(N.DTEXPEDRNE, SYSDATE) = NVL(O.DTEXPEDRNE, SYSDATE) AND NVL(N.NROC, ' ') = NVL(O.NROC, ' ') AND 
                                                                                        NVL(N.ORGAOEMISSOROC, ' ') = NVL(O.ORGAOEMISSOROC, ' ') AND NVL(N.DTEXPEDOC, SYSDATE) = NVL(O.DTEXPEDOC, SYSDATE) AND 
                                                                                        NVL(N.DTVALIDOC, SYSDATE) = NVL(O.DTVALIDOC, SYSDATE) AND NVL(N.NRREGCNH, ' ') = NVL(O.NRREGCNH, ' ') AND 
                                                                                        NVL(N.DTEXPEDCNH, SYSDATE) = NVL(O.DTEXPEDCNH, SYSDATE) AND NVL(N.UFCNH, ' ') = NVL(O.UFCNH, ' ') AND 
                                                                                        NVL(N.DTVALIDCNH, SYSDATE) = NVL(O.DTVALIDCNH, SYSDATE) AND NVL(N.DTPRIHAB, SYSDATE) = NVL(O.DTPRIHAB, SYSDATE) AND 
                                                                                        NVL(N.CATEGORIACNH, ' ') = NVL(O.CATEGORIACNH, ' ') AND NVL(N.TPLOGRADBRASIL, ' ') = NVL(O.TPLOGRADBRASIL, ' ') AND 
                                                                                        NVL(N.DSCLOGRADBRASIL, ' ') = NVL(O.DSCLOGRADBRASIL, ' ') AND NVL(N.NRLOGRADBRASIL, ' ') = NVL(O.NRLOGRADBRASIL, ' ') AND 
                                                                                        NVL(N.COMPLEMENTOBRASIL, ' ') = NVL(O.COMPLEMENTOBRASIL, ' ') AND NVL(N.BAIRROBRASIL, ' ') = NVL(O.BAIRROBRASIL, ' ') AND
                                                                                         NVL(N.CEPBRASIL, ' ') = NVL(O.CEPBRASIL, ' ') AND NVL(N.CODMUNICBRASIL, ' ') = NVL(O.CODMUNICBRASIL, ' ') AND 
                                                                                         NVL(N.UFBRASIL, ' ') = NVL(O.UFBRASIL, ' ') AND NVL(N.PAISRESID, ' ') = NVL(O.PAISRESID, ' ') AND 
                                                                                         NVL(N.DSCLOGRADEXTERIOR, ' ') = NVL(O.DSCLOGRADEXTERIOR, ' ') AND NVL(N.NRLOGRADEXTERIOR, ' ') = NVL(O.NRLOGRADEXTERIOR, ' ') AND 
                                                                                         NVL(N.COMPLEMENTOEXTERIOR, ' ') = NVL(O.COMPLEMENTOEXTERIOR, ' ') AND NVL(N.BAIRROEXTERIOR, ' ') = NVL(O.BAIRROEXTERIOR, ' ') AND 
                                                                                         NVL(N.NMCIDEXTERIOR, ' ') = NVL(O.NMCIDEXTERIOR, ' ') AND NVL(N.CODPOSTALEXTERIOR, ' ') = NVL(O.CODPOSTALEXTERIOR, ' ') AND 
                                                                                        NVL(N.DTCHEGADA, SYSDATE) = NVL(O.DTCHEGADA, SYSDATE) AND NVL(N.CLASSTRABESTRANG, 0) = NVL(O.CLASSTRABESTRANG, 0) AND 
                                                                                        NVL(N.CASADOBR, ' ') = NVL(O.CASADOBR, ' ') AND NVL(N.FILHOSBR, ' ') = NVL(O.FILHOSBR, ' ') AND NVL(N.DEFFISICA, ' ') = NVL(O.DEFFISICA, ' ') AND 
                                                                                        NVL(N.DEFVISUAL, ' ') = NVL(O.DEFVISUAL, ' ') AND NVL(N.DEFAUDITIVA, ' ') = NVL(O.DEFAUDITIVA, ' ') AND NVL(N.DEFMENTAL, ' ') = NVL(O.DEFMENTAL, ' ') AND 
                                                                                        NVL(N.DEFINTELECTUAL, ' ') = NVL(O.DEFINTELECTUAL, ' ') AND NVL(N.REABREADAP, ' ') = NVL(O.REABREADAP, ' ')) THEN 'I'
                                         ELSE 'A'
                                    END AS VALIDACAO 
                             FROM TFPS2200 O
                                 LEFT JOIN VGF_EVENTO_S2200 N ON O.CODEMP = N.CODEMP AND O.CHAVE = N.CHAVE
                             WHERE O.CODEMP = P_CODEMPMATRIZ
                               AND O.DTREF = P_DTREF
                               AND O.TPAMB = P_TPAMB
                               AND O.SEQUENCIA = P_SEQUENCIA
                               AND O.CONTROLE = 'I'
                          ) DTALT
                      WHERE DTALT.VALIDACAO <> 'I') LOOP
            IF P_CHAVES IS NOT NULL AND LENGTH(P_CHAVES) + LENGTH(S2200.CHAVE) >= 3000 THEN
                queUpd :=               ' UPDATE TFPS2200';

                IF P_CHAVES_ALT IS NOT NULL THEN
                    queUpd := queUpd || ' SET CONTROLE = CASE WHEN CHAVE IN ('||P_CHAVES_ALT||') THEN ''A'' ELSE ''E'' END ';
                ELSE
                    queUpd := queUpd || ' SET CONTROLE = ''E'' ';
                END IF;

                queUpd := queUpd ||     ' WHERE CODEMP = :CODEMP
                                             AND DTREF = :DTREF
                                             AND SEQUENCIA = :SEQUENCIA
                                             AND TPAMB = :TPAMB
                                             AND CONTROLE = ''I''
                                             AND CHAVE IN ('||P_CHAVES||')';

                EXECUTE IMMEDIATE queUpd USING P_CODEMPMATRIZ, P_DTREF, P_SEQUENCIA, P_TPAMB;

                P_CHAVES := NULL;
                P_CHAVES_ALT := NULL;
             END IF;

            IF P_CHAVES IS NULL THEN
                P_CHAVES := ''''||P_CHAVE||'''';

                IF S2200.VALIDACAO = 'A' THEN
                    P_CHAVES_ALT := ''''||S2200.CHAVE||'''';
                END IF;
            ELSE 
                P_CHAVES := P_CHAVES||','''||S2200.CHAVE||'''';

                IF S2200.VALIDACAO = 'A' THEN
                    P_CHAVES_ALT := P_CHAVES_ALT||','''||S2200.CHAVE||'''';
                END IF;
             END IF;
        END LOOP;      
    ELSIF P_NOMETAB = 'TFPS2205' THEN
    P_NOMETAB_UTIL := 'TFPS2205';
        FOR S2205 IN (SELECT CHAVE, VALIDACAO
                      FROM ( SELECT O.CHAVE
                                  , CASE WHEN N.CODEMP IS NULL AND O.ACAO <> 'E' THEN 'E'
                                         WHEN (NVL(N.TPINSCEMPREGADOR, 0) = NVL(O.TPINSCEMPREGADOR, 0) AND NVL(N.NRINSCEMPREGADOR, ' ') = NVL(O.NRINSCEMPREGADOR, ' ') AND NVL(N.CPFTRAB, ' ') = NVL(O.CPFTRAB, ' ') AND
                                               NVL(N.NISTRAB, ' ') = NVL(O.NISTRAB, ' ') AND NVL(N.NMTRAB, ' ') = NVL(O.NMTRAB, ' ') AND NVL(N.SEXO, ' ') = NVL(O.SEXO, ' ') AND NVL(N.RACACOR, 0) = NVL(O.RACACOR, 0) AND 
                                               NVL(N.ESTCIV, 0) = NVL(O.ESTCIV, 0) AND NVL(N.NMSOC, ' ') = NVL(O.NMSOC, ' ') AND NVL(N.NRCTPS, ' ') = NVL(O.NRCTPS, ' ') AND NVL(N.SERIECTPS, ' ') = NVL(O.SERIECTPS, ' ') AND 
                                               NVL(N.UFCTPS, ' ') = NVL(O.UFCTPS, ' ') AND NVL(N.NRRIC, ' ') = NVL(O.NRRIC, ' ') AND NVL(N.ORGAOEMISSORRIC, ' ') = NVL(O.ORGAOEMISSORRIC, ' ') AND 
                                               NVL(N.DTEXPEDRIC, SYSDATE) = NVL(O.DTEXPEDRIC, SYSDATE) AND NVL(N.NRRG, ' ') = NVL(O.NRRG, ' ') AND NVL(N.ORGAOEMISSORRG, ' ') = NVL(O.ORGAOEMISSORRG, ' ') AND 
                                               NVL(N.DTEXPEDRG, SYSDATE) = NVL(O.DTEXPEDRG, SYSDATE) AND NVL(N.NRRNE, ' ') = NVL(O.NRRNE, ' ') AND NVL(N.ORGAOEMISSORRNE, ' ') = NVL(O.ORGAOEMISSORRNE, ' ') AND 
                                               NVL(N.DTEXPEDRNE, SYSDATE) = NVL(O.DTEXPEDRNE, SYSDATE) AND NVL(N.NROC, ' ') = NVL(O.NROC, ' ') AND NVL(N.ORGAOEMISSOROC, ' ') = NVL(O.ORGAOEMISSOROC, ' ') AND 
                                               NVL(N.DTEXPEDOC, SYSDATE) = NVL(O.DTEXPEDOC, SYSDATE) AND NVL(N.DTVALIDOC, SYSDATE) = NVL(O.DTVALIDOC, SYSDATE) AND NVL(N.NRREGCNH, ' ') = NVL(O.NRREGCNH, ' ') AND 
                                               NVL(N.DTEXPEDCNH, SYSDATE) = NVL(O.DTEXPEDCNH, SYSDATE) AND NVL(N.UFCNH, ' ') = NVL(O.UFCNH, ' ') AND NVL(N.DTVALIDCNH, SYSDATE) = NVL(O.DTVALIDCNH, SYSDATE) AND 
                                               NVL(N.DTPRIHAB, SYSDATE) = NVL(O.DTPRIHAB, SYSDATE) AND NVL(N.CATEGORIACNH, ' ') = NVL(O.CATEGORIACNH, ' ') AND NVL(N.TPLOGRADBRASIL, ' ') = NVL(O.TPLOGRADBRASIL, ' ') AND 
                                               NVL(N.DSCLOGRADBRASIL, ' ') = NVL(O.DSCLOGRADBRASIL, ' ') AND NVL(N.NRLOGRADBRASIL, ' ') = NVL(O.NRLOGRADBRASIL, ' ') AND 
                                               NVL(N.COMPLEMENTOBRASIL, ' ') = NVL(O.COMPLEMENTOBRASIL, ' ') AND NVL(N.BAIRROBRASIL, ' ') = NVL(O.BAIRROBRASIL, ' ') AND NVL(N.CEPBRASIL, ' ') = NVL(O.CEPBRASIL, ' ') AND 
                                               NVL(N.CODMUNICBRASIL, 0) = NVL(O.CODMUNICBRASIL, 0) AND NVL(N.UFBRASIL, ' ') = NVL(O.UFBRASIL, ' ') AND NVL(N.PAISRESID, ' ') = NVL(O.PAISRESID, ' ') AND 
                                               NVL(N.DSCLOGRADEXTERIOR, ' ') = NVL(O.DSCLOGRADEXTERIOR, ' ') AND NVL(N.NRLOGRADEXTERIOR, ' ') = NVL(O.NRLOGRADEXTERIOR, ' ') AND 
                                               NVL(N.COMPLEMENTOEXTERIOR, ' ') = NVL(O.COMPLEMENTOEXTERIOR, ' ') AND NVL(N.BAIRROEXTERIOR, ' ') = NVL(O.BAIRROEXTERIOR, ' ') AND 
                                               NVL(N.NMCIDEXTERIOR, ' ') = NVL(O.NMCIDEXTERIOR, ' ') AND NVL(N.CODPOSTALEXTERIOR, ' ') = NVL(O.CODPOSTALEXTERIOR, ' ') AND 
                                               NVL(N.DTCHEGADA, SYSDATE) = NVL(O.DTCHEGADA, SYSDATE) AND NVL(N.CLASSTRABESTRANG, 0) = NVL(O.CLASSTRABESTRANG, 0) AND NVL(N.CASADOBR, ' ') = NVL(O.CASADOBR, ' ') AND 
                                               NVL(N.FILHOSBR, ' ') = NVL(O.FILHOSBR, ' ') AND NVL(N.DEFFISICA, ' ') = NVL(O.DEFFISICA, ' ') AND NVL(N.DEFVISUAL, ' ') = NVL(O.DEFVISUAL, ' ') AND 
                                               NVL(N.DEFAUDITIVA, ' ') = NVL(O.DEFAUDITIVA, ' ') AND NVL(N.DEFMENTAL, ' ') = NVL(O.DEFMENTAL, ' ') AND NVL(N.DEFINTELECTUAL, ' ') = NVL(O.DEFINTELECTUAL, ' ') AND 
                                               NVL(N.REABREADAP, ' ') = NVL(O.REABREADAP, ' ') AND NVL(N.INFOCOTA, ' ') = NVL(O.INFOCOTA, ' ') AND NVL(N.OBSERVACAO, ' ') = NVL(O.OBSERVACAO, ' ') AND 
                                               NVL(N.TRABAPOSENT, ' ') = NVL(O.TRABAPOSENT, ' ') AND NVL(N.FONEPRINC, ' ') = NVL(O.FONEPRINC, ' ') AND NVL(N.FONEALTERNAT, ' ') = NVL(O.FONEALTERNAT, ' ') AND 
                                               NVL(N.EMAILPRINC, ' ') = NVL(O.EMAILPRINC, ' ') AND N.CHAVE = O.CHAVE) THEN 'I'
                                         ELSE 'A'
                                    END AS VALIDACAO 
                             FROM TFPS2205 O
                                 LEFT JOIN VGF_EVENTO_S2205 N ON O.CODEMP = N.CODEMP AND O.CHAVE = N.CHAVE
                             WHERE O.CODEMP = P_CODEMPMATRIZ
                               AND O.DTREF = P_DTREF
                               AND O.SEQUENCIA = P_SEQUENCIA
                               AND O.TPAMB = P_TPAMB
                               AND O.CONTROLE = 'I'
                          ) DTALT
                      WHERE DTALT.VALIDACAO <> 'I') LOOP
            IF P_CHAVES IS NOT NULL AND LENGTH(P_CHAVES) + LENGTH(S2205.CHAVE) >= 3000 THEN
                queUpd :=               ' UPDATE TFPS2205';

                IF P_CHAVES_ALT IS NOT NULL THEN
                    queUpd := queUpd || ' SET CONTROLE = CASE WHEN CHAVE IN ('||P_CHAVES_ALT||') THEN ''A'' ELSE ''E'' END ';
                ELSE
                    queUpd := queUpd || ' SET CONTROLE = ''E'' ';
                END IF;

                queUpd := queUpd ||     ' WHERE CODEMP = :CODEMP
                                             AND DTREF = :DTREF
                                             AND SEQUENCIA = :SEQUENCIA
                                             AND TPAMB = :TPAMB
                                             AND CONTROLE = ''I''
                                             AND CHAVE IN ('||P_CHAVES||')';

                EXECUTE IMMEDIATE queUpd USING P_CODEMPMATRIZ, P_DTREF, P_SEQUENCIA, P_TPAMB;

                P_CHAVES := NULL;
                P_CHAVES_ALT := NULL;
             END IF;

            IF P_CHAVES IS NULL THEN
                P_CHAVES := ''''||S2205.CHAVE||'''';

                IF S2205.VALIDACAO = 'A' THEN
                    P_CHAVES_ALT := ''''||S2205.CHAVE||'''';
                END IF;
            ELSE 
                P_CHAVES := P_CHAVES||','''||S2205.CHAVE||'''';

                IF S2205.VALIDACAO = 'A' THEN
                    P_CHAVES_ALT := P_CHAVES_ALT||','''||S2205.CHAVE||'''';
                END IF;
             END IF;
        END LOOP;
    ELSE
        P_CONDITION := SNK_GET_COLUMNS_ESOCIAL(P_NOMETAB, P_COLUNAS_PADRAO);

        IF P_NOMETAB_PAI IS NULL THEN   /*TABELAS PAI*/
            P_NOMETAB_UTIL := P_NOMETAB;
            queSql :=   'SELECT CHAVE, VALIDACAO
                         FROM (  SELECT O.CHAVE
                                      , CASE WHEN N.CODEMP IS NULL AND O.ACAO <> ''E'' THEN ''E''
                                             WHEN (N.CODEMP IS NULL AND O.ACAO = ''E'') OR ('||P_CONDITION||') THEN ''I''
                                             ELSE ''A'' 
                                        END AS VALIDACAO 
                                 FROM '||P_NOMETAB||' O
                                     LEFT JOIN '||P_NOMEVIEW||' N ON O.CODEMP = N.CODEMP AND O.CHAVE = N.CHAVE
                                 WHERE O.CODEMP = :CODEMP
                                   AND O.DTREF = :DTREF
                                   AND O.SEQUENCIA = :SEQUENCIA
                                   AND O.TPAMB = :TPAMB
                                   AND O.CONTROLE = ''I''
                              ) DTALT
                         WHERE DTALT.VALIDACAO <> ''I'' ';
        ELSE  /*TABELAS FILHAS*/
            P_NOMETAB_UTIL := P_NOMETAB_PAI;
            P_FILTRO_FILHOS := NVL(SNK_GET_PK_FOR_ESOCIAL(P_NOMETAB, P_COL_PAD_FILHOS), ' ');

            queSql :=   'SELECT CHAVE, VALIDACAO
                         FROM (  SELECT O.CHAVE
                                      , CASE WHEN (N.CODEMP IS NULL AND P.ACAO = ''E'') OR ('||P_CONDITION||') THEN ''I''
                                             ELSE ''A'' 
                                        END AS VALIDACAO 
                                 FROM '||P_NOMETAB||' O
                                     LEFT JOIN '||P_NOMEVIEW||' N ON O.CODEMP = N.CODEMP AND O.CHAVE = N.CHAVE '||P_FILTRO_FILHOS||'
                                     INNER JOIN '||P_NOMETAB_PAI||' P ON P.CODEMP = O.CODEMP AND P.DTREF = O.DTREF AND P.SEQUENCIA = O.SEQUENCIA AND O.CHAVE = P.CHAVE AND P.CONTROLE = ''I''
                                 WHERE O.CODEMP = :CODEMP
                                   AND O.DTREF = :DTREF
                                   AND O.SEQUENCIA = :SEQUENCIA
                                   AND O.TPAMB = :TPAMB
                              ) DTALT
                         WHERE DTALT.VALIDACAO <> ''I'' ';
        END IF;
        OPEN CURVAL FOR queSql USING P_CODEMPMATRIZ, P_DTREF, P_SEQUENCIA, P_TPAMB;
        LOOP
            FETCH CURVAL INTO P_CHAVE, P_VALIDACAO;
            EXIT WHEN CURVAL%NOTFOUND;
                
            IF P_CHAVES IS NOT NULL AND LENGTH(P_CHAVES) + LENGTH(P_CHAVE) >= 3000 THEN
                queUpd :=               ' UPDATE '||P_NOMETAB_UTIL;

                IF P_CHAVES_ALT IS NOT NULL THEN
                    queUpd := queUpd || ' SET CONTROLE = CASE WHEN CHAVE IN ('||P_CHAVES_ALT||') THEN ''A'' ELSE ''E'' END ';
                ELSE
                    queUpd := queUpd || ' SET CONTROLE = ''E'' ';
                END IF;

                queUpd := queUpd ||     ' WHERE CODEMP = :CODEMP
                                             AND DTREF = :DTREF
                                             AND SEQUENCIA = :SEQUENCIA
                                             AND TPAMB = :TPAMB
                                             AND CONTROLE = ''I''
                                             AND CHAVE IN ('||P_CHAVES||')';

                EXECUTE IMMEDIATE queUpd USING P_CODEMPMATRIZ, P_DTREF, P_SEQUENCIA, P_TPAMB;

                P_CHAVES := NULL;
                P_CHAVES_ALT := NULL;
             END IF;

            IF P_CHAVES IS NULL THEN
                P_CHAVES := ''''||P_CHAVE||'''';

                IF P_VALIDACAO = 'A' THEN
                    P_CHAVES_ALT := ''''||P_CHAVE||'''';
                END IF;
            ELSE 
                P_CHAVES := P_CHAVES||','''||P_CHAVE||'''';

                IF P_VALIDACAO = 'A' THEN
                    P_CHAVES_ALT := P_CHAVES_ALT||','''||P_CHAVE||'''';
                END IF;
            END IF;
        END LOOP;
    END IF;
    
    IF P_CHAVES IS NOT NULL AND LENGTH(P_CHAVES) > 0 THEN
        queUpd :=               ' UPDATE '||P_NOMETAB_UTIL;

        IF P_CHAVES_ALT IS NOT NULL THEN
            queUpd := queUpd || ' SET CONTROLE = CASE WHEN CHAVE IN ('||P_CHAVES_ALT||') THEN ''A'' ELSE ''E'' END ';
        ELSE
            queUpd := queUpd || ' SET CONTROLE = ''E'' ';
        END IF;

        queUpd := queUpd ||     ' WHERE CODEMP = :CODEMP
                                     AND DTREF = :DTREF
                                     AND SEQUENCIA = :SEQUENCIA
                                     AND TPAMB = :TPAMB
                                     AND CONTROLE = ''I''
                                     AND CHAVE IN ('||P_CHAVES||')';

        EXECUTE IMMEDIATE queUpd USING P_CODEMPMATRIZ, P_DTREF, P_SEQUENCIA, P_TPAMB;

        P_CHAVES := NULL;
        P_CHAVES_ALT := NULL;
    END IF;
        
    FOR EVEF IN (SELECT MON.NOMETAB, MON.NOMEVIEW
             FROM TFPMON MON
             WHERE MON.NOMEEVEVENTOPAI = P_NOMETAB 
             GROUP BY MON.NOMETAB, MON.NOMEVIEW
             ORDER BY MON.NOMETAB
      ) LOOP
        SNK_GET_VALID_ALTER_ESOCIAL (P_EVENTO, P_COLUNAS_PADRAO, P_CODEMPMATRIZ, P_DTREF, P_SEQUENCIA, P_TPAMB, P_NOMETAB_UTIL, EVEF.NOMETAB, EVEF.NOMEVIEW);
    END LOOP;
EXCEPTION WHEN OTHERS THEN
  ROLLBACK;
  P_DTLOG := SYSDATE;
  IF queSql IS NOT NULL THEN
    SELECT COUNT(1) + 1 INTO P_SEQLOG
    FROM LOGESOCIAL
    WHERE DTLOG = P_DTLOG; 

      INSERT INTO LOGESOCIAL(DTLOG, SEQUENCIA, COMANDO)
           SELECT P_DTLOG, P_SEQLOG, queSql from dual;
           
        COMMIT;
   END IF;
   
   IF queUpd IS NOT NULL THEN
    SELECT COUNT(1) + 1 INTO P_SEQLOG
    FROM LOGESOCIAL
    WHERE DTLOG = P_DTLOG; 

      INSERT INTO LOGESOCIAL(DTLOG, SEQUENCIA, COMANDO)
           SELECT P_DTLOG, P_SEQLOG, queUpd from dual;
           
        COMMIT; 
   END IF;
   
   P_MSG := P_MSG|| SUBSTR(SQLERRM, 1, 3950);
     RAISE_APPLICATION_ERROR(-20101, P_MSG);
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51110-0-0
Nro. O.S. : 1148956
Nome      : Altera - TRG_INC_EVTFILA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - TRG_INC_EVTFILA
NomeObjeto: TRG_INC_EVTFILA
TipoObjeto: TRIGGER
NomeTabela: EVTFILA
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_INC_EVTFILA
BEFORE INSERT ON EVTFILA
FOR EACH ROW
DECLARE P_CHAVEEVENTO       VARCHAR2(36);
BEGIN
   SELECT  'ID'|| --CAMPO FIXO
           CASE WHEN LENGTH(CGC) = 14 THEN 1 ELSE 2 END ||-- TIPO( 1:CNPJ OU 2:CPF)
           CASE WHEN (SELECT LOGICO FROM TSIPAR WHERE CHAVE = 'FPTRIBUNAL') = 'N' AND LENGTH (CGC) = 14 THEN RPAD(substr(CGC,1,8),14, '0') ELSE RPAD(CGC, 14, '0') END ||--CNPJ OU CPJ COM 14 DÍGITOS COMPLETANDO COM ZERO A DIREITA
           TO_CHAR(:NEW.DHINC, 'YYYYMMDDHH24MISS') || --DATA E HORA DA GERAÇÃO NO FORMADO YYYYMMDDHH24MISS SENDO QUE A HORA VAI DE 0 À 23
           LPAD(TO_CHAR(:NEW.SEQEVENTO), 5, '0') --Número sequêncial de livre preenchimento.
       INTO P_CHAVEEVENTO
   FROM TSIEMP
   WHERE CODEMP = :NEW.CODEMP;    

   :NEW.CHAVEEVENTO := P_CHAVEEVENTO;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51111-0-0
Nro. O.S. : 1148956
Nome      : Cria - VGF_EVENTO_EMPREGADOR
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - VGF_EVENTO_EMPREGADOR
NomeObjeto: VGF_EVENTO_EMPREGADOR
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE FORCE VIEW VGF_EVENTO_EMPREGADOR AS
SELECT
 SEMP.CODEMP
,NVL(SEMP.CODEMPMATRIZ,SEMP.CODEMP) AS CODEMPMATRIZ
,CASE WHEN LENGTH (SEMP.CGC) = 14 THEN 1 ELSE 2 END AS "TPINSCEMPREGADOR"
,CASE WHEN LENGTH (SEMP.CGC) = 14 AND ((SELECT LOGICO FROM TSIPAR WHERE CHAVE = 'FPTRIBUNAL') = 'N') AND ((SEMP.CODEMPMATRIZ = SEMP.CODEMP) OR (CODEMPMATRIZ IS NULL)) 
      THEN SUBSTR (SEMP.CGC, 1, 8)
      ELSE SEMP.CGC
 END AS "NRINSCEMPREGADOR"
,RAZAOSOCIAL AS "NMRAZAO"
,LPAD (CLASSTRIB, 2, '0') AS "CLASSTRIB"
,NATJUR AS "NATJURID"
,INDCOOP
,INDCONSTR
,INFOOBRA
,CNAEPREPON
,CEP
,COMPLEMENTO
,NUMEND
,CODEND
,CODBAI
,SEMP.CODCID
,ACDINTISENMULTA AS "INDACORDOISENMULTA"
,(SELECT UFS.UF FROM TSIUFS UFS WHERE UFS.CODUF = C.UF) AS UF
,C.CODMUNFIS AS CODMUNFIS
  FROM TSIEMP SEMP
      ,TSICID C
 WHERE SEMP.CODCID = C.CODCID
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51112-0-0
Nro. O.S. : 1148956
Nome      : Altera - VGF_EVENTO_S1000
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VGF_EVENTO_S1000
NomeObjeto: VGF_EVENTO_S1000
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1000 AS
SELECT 
 MATRIZ.TPINSCEMPREGADOR,
 MATRIZ.NRINSCEMPREGADOR,
 MATRIZ.NMRAZAO,
 LPAD (MATRIZ.CLASSTRIB, 2, '0') AS "CLASSTRIB",
 MATRIZ.NATJURID,
 MATRIZ.INDCOOP,
 MATRIZ.INDCONSTR,
 EMP.INDDESFOLHA,
 CASE WHEN EMP.MODPONTO IN (1, 2, 3) THEN 0 ELSE 1 END AS "INDOPTREGELETRON",
 EMP.INDENTED,
 EMP.INDETT,
 EMP.NRREGETT,
 EMP.SIGLAMIN AS "IDEMINLEI",
 EMP.NROCERTIF AS "NRCERTIF",
 EMP.DTEMICERTIF AS "DTEMISCERTIF",
 EMP.DTVENCCERTIF,
 EMP.NROPROTRENOV AS "NRPROTRENOV",
 EMP.DTPROTRENOV,
 EMP.DTDOU,
 EMP.PAGDOU,
 EMP.DIRFNOME AS "NMCTT",
 EMP.DIRFCPF AS "CPFCTT",
 EMP.DIRFDDD || EMP.DIRFFONE AS "FONEFIXO",
 EMP.DIRFEMAIL AS "EMAIL",
 EMP.NRSIAFI,
 EMP.IDEEFR,
 EMP.CNPJEFR,
 EMP.NMENTE,
 CASE WHEN EMP.INDRPPS = 'S' THEN MATRIZ.UF ELSE NULL END AS "UF",
 CASE WHEN EMP.INDRPPS = 'S' THEN MATRIZ.CODMUNFIS ELSE NULL END AS "CODMUNIC",
 EMP.INDRPPS,
 EMP.IDESUBTETO AS "SUBTETO",
 EMP.VALSUBTETO AS "VRSUBTETO",
 MATRIZ.INDACORDOISENMULTA,
 EMP.INDSITPJ,
 EMP.TIPEVENTOESP AS "INDSITPF",
 EMP.CODEMP,
 CAST (EMP.CODEMP AS VARCHAR (100)) AS "CHAVE"
 FROM TFPEMP EMP, TFPFIS FIS, VGF_EVENTO_EMPREGADOR MATRIZ
 WHERE  EMP.ATIVO = 'S'
 AND EMP.USADOESOCIAL = 'S'
 AND EMP.CODEMPLOTACAO IS NULL
 AND EMP.CODEMP = MATRIZ.CODEMP
 AND EMP.CODEMP = MATRIZ.CODEMPMATRIZ
 AND EMP.CODREGFIS = FIS.CODREGFIS
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51121-0-0
Nro. O.S. : 1148956
Nome      : Altera - VGF_EVENTO_S1060
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VGF_EVENTO_S1060
NomeObjeto: VGF_EVENTO_S1060
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1060 AS
SELECT 
    VEMP.TPINSCEMPREGADOR,
    VEMP.NRINSCEMPREGADOR,
    CAST(AMB.CODAMB  AS VARCHAR(20)) AS "CODAMB",
    AMB.DSCAMB AS "DSCAMB",
    AMB.LOCALAMB AS "LOCALAMB",
    AMB.TPINSC AS "TPINSC",
    AMB.NRINSCR AS "NRINSC",
    ABE.CODEMP AS "CODEMP",
    CAST(AMB.CODAMB  AS VARCHAR(20)) AS "CHAVE"
FROM TFPAMB AMB, VGF_EVENTO_EMPREGADOR VEMP, TFPABE ABE
WHERE ABE.CODEMP = VEMP.CODEMP 
   AND ABE.CODAMB = AMB.CODAMB
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51412-0-0
Nro. O.S. : 1141986
Nome      : Ajusta - TFPFOR CODFORM 407
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Ajusta - TFPFOR CODFORM 407
NomeObjeto: CODFORM
TipoObjeto: COLUMN
NomeTabela: TFPFOR
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
  P_CODFORMULA      TFPFOR.CODFORM%TYPE;
  P_DESCRFORMULA    TFPFOR.DESCRFORM%TYPE;
  P_DESCRFORMNOVO   TFPFOR.DESCRFORM%TYPE;
  P_FORMULA         VARCHAR2(4000);
  P_FORMULANOVO     VARCHAR2(4000);
  P_CODFORMIND      VARCHAR2(4000);
  P_CODFORMINDNOVO  VARCHAR2(4000);
  P_SANKHYA         TFPFOR.SANKHYA%TYPE;
BEGIN
  
  P_CODFORMULA := 407;
  
  BEGIN
    SELECT FORMULA, DESCRFORM, CODFORMIND, SANKHYA
    INTO P_FORMULA, P_DESCRFORMULA, P_CODFORMIND, P_SANKHYA
    FROM TFPFOR
    WHERE CODFORM = P_CODFORMULA;
  EXCEPTION WHEN NO_DATA_FOUND THEN
    P_FORMULA := 'A';
    P_CODFORMIND := NULL;
    P_DESCRFORMULA := NULL;
    P_SANKHYA := 'S'; 
  END;
  
  IF P_SANKHYA = 'N' THEN
    RETURN;
  END IF;
  
  P_DESCRFORMNOVO := 'LICENCA REMUNERADA';
  P_FORMULANOVO := 'IF((QueFuncionario.VINCULO <> 2) AND (&DIALICREM <> 0) AND (MemSetVar(''varDIASLICENCA'', IF((&DiaFerFrac <= IF(quePrefSindicato.LANCFERADIANT = ''S'', &DIAFERREF, &DIAFER)),(&DIAFER + IF((quePrefSindicato.LANCFERADIANT = ''S''), &DIALICREMREF, &DIALICREM)) - &DiaFerFrac,0)) > 0),((QueFuncionario.SALBASE * IF(QueFuncionario.TIPSAL=5,QueFuncionario.HORASSEM*5,1) + &VLRINCORPORA)/30) * MemGetVar(''varDIASLICENCA''), 0)';
  P_CODFORMINDNOVO := 'MemGetVar(''varDIASLICENCA'')';
  
  IF P_FORMULA = 'A' THEN
    INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
      VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
             'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO);
    
    IF P_CODFORMINDNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO);
    END IF;
    
    IF P_DESCRFORMNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO);
    END IF;
    
    INSERT INTO TFPFOR (CODFORM, DESCRFORM, SANKHYA, FORMULA, CODFORMIND)
      VALUES(P_CODFORMULA, P_DESCRFORMNOVO, 'S', P_FORMULANOVO, P_CODFORMINDNOVO);
    
  ELSIF (P_FORMULANOVO <> P_FORMULA OR 
         NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') OR 
         NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z')) 
  THEN
    
    IF P_FORMULANOVO <> P_FORMULA THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO, P_FORMULA);
    END IF;
    
    IF NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO, P_CODFORMIND);
    END IF;
    
    IF NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO, P_DESCRFORMULA);
    END IF;
    
    UPDATE TFPFOR
    SET FORMULA = P_FORMULANOVO
    , DESCRFORM = P_DESCRFORMNOVO
    , CODFORMIND = P_CODFORMINDNOVO
    , FORMULANTERIOR = CASE WHEN FORMULA <> P_FORMULANOVO THEN P_FORMULA ELSE FORMULANTERIOR END
    , DTALTER = SYSDATE
    , CODUSU = 0
    WHERE CODFORM = P_CODFORMULA
    AND SANKHYA = 'S';
    
  END IF;
  
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51415-0-0
Nro. O.S. : 1143772
Nome      : Insere - RESCORSEMDEPWMS
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Inserir o parametro
NomeObjeto: RESCORSEMDEPWMS
TipoObjeto: PARAMETRO
NomeTabela: TSIPAR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO TSIPAR ( CHAVE, DESCRICAO, CODUSU, MODULO, CLASSE, ABA, TIPO,  LOGICO)  VALUES ( 'RESCORSEMDEPWMS', 'Gerar reabastecimento corretivo sem dependente?', 0,'E', 'Especiais', 'WMS',  'L', 'N') 
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51435-0-0
Nro. O.S. : 1149424
Nome      : Altera - VGF_EVENTO_S1030
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VGF_EVENTO_S1030
NomeObjeto: VGF_EVENTO_S1030
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1030 AS
SELECT MATRIZ.TPINSCEMPREGADOR,
          MATRIZ.NRINSCEMPREGADOR,
          CAST (CAR.CODCARGO AS VARCHAR (20)) AS "CODCARGO",
          CAR.DESCRCARGO AS "NMCARGO",
          CAST (CAR.CODCBO AS VARCHAR (20)) AS "CODCBO",
          CASE WHEN TRIB = 'S' THEN CAR.ACUMCARGO ELSE 0 END AS "ACUMCARGO",
          CASE
             WHEN TRIB = 'N' THEN 0
             WHEN CONTAGEMTEMPO = 1 THEN 1
             WHEN CONTAGEMTEMPO = 2 THEN 2
             ELSE 3
          END
             AS "CONTAGEMESP",
          CASE WHEN TRIB = 'S' THEN CAR.DEDICACAOEXC ELSE 'N' END AS "DEDICEXCL",
          CASE WHEN TRIB = 'S' THEN CAR.NRLEI ELSE NULL END AS "NRLEI",
          CASE WHEN TRIB = 'S' THEN CAR.DTLEI ELSE NULL END AS "DTLEI",
          CASE WHEN TRIB = 'S' THEN CAR.SITCARGO ELSE NULL END AS "SITCARGO",
          CAST (CAR.CODCARGO AS VARCHAR (20)) AS "CHAVE",
          CGE.CODEMP AS "CODEMP"
     FROM TFPCAR CAR,
          VGF_EVENTO_EMPREGADOR MATRIZ,
          TFPCGE CGE,
          (SELECT NVL ( (SELECT LOGICO
                           FROM TSIPAR
                          WHERE CHAVE = 'FPTRIBUNAL'),
                       'N')
                     AS TRIB
             FROM DUAL) TRIBUNAL
    WHERE     CGE.CODEMP = MATRIZ.CODEMP
          AND CAR.CODCARGO = CGE.CODCARGO
          AND CAR.CODCARGO <> 0
          AND CAR.ATIVO = 'S'
          AND EXISTS
                 (SELECT 1
                    FROM TSIPAR
                   WHERE CHAVE = 'FPUTILIZACBO'
                         AND ((INTEIRO = 0) OR (INTEIRO IS NULL)))
   UNION
   SELECT MATRIZ.TPINSCEMPREGADOR,
          MATRIZ.NRINSCEMPREGADOR,
          CAST (FCO.CODFUNCAO AS VARCHAR (20)) AS "CODCARGO",
          FCO.DESCRFUNCAO AS "NMCARGO",
          CAST (FCO.CODCBO AS VARCHAR (20)) AS "CODCBO",
          0 AS "ACUMCARGO",
          0 AS "CONTAGEMESP",
          'N' AS "DEDICEXCL",
          NULL AS "NRLEI",
          NULL AS "DTLEI",
          NULL AS "SITCARGO",
          CAST (FCO.CODFUNCAO AS VARCHAR (20)) AS "CHAVE",
          FCE.CODEMP AS "CODEMP"
    FROM TFPFCO FCO LEFT JOIN TFPCBO CBO ON FCO.CODCBO = CBO.CODCBO,
          TSIPAR PAR,
         VGF_EVENTO_EMPREGADOR MATRIZ,
          TFPFCE FCE
    WHERE FCE.CODEMP = MATRIZ.CODEMP
      AND FCE.CODFUNCAO = FCO.CODFUNCAO
      AND FCO.CODFUNCAO <> 0
      AND PAR.CHAVE = 'FPUTILIZACBO'
      AND ((PAR.INTEIRO <> 0) AND (PAR.INTEIRO IS NOT NULL))
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51436-0-0
Nro. O.S. : 1149424
Nome      : Altera - VGF_EVENTO_S1050_DADOS_INTERV
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VGF_EVENTO_S1050_DADOS_INTERV
NomeObjeto: VGF_EVENTO_S1050_DADOS_INTERV
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE FORCE VIEW VGF_EVENTO_S1050_DADOS_INTERV AS
SELECT DISTINCT
SEMP.CODEMP,
HOR.CODCARGAHORESOCIAL,
CAST(HOR.TURNO AS VARCHAR(2)) AS CHAVE,
CAST(((SELECT CASE WHEN SAIDA = 2400 THEN 2359 ELSE SAIDA END
         FROM TFPHOR H2
        WHERE  CODCARGAHOR = HOR.CODCARGAHOR
          AND TURNO = HOR.TURNO
          AND DIASEM = HOR.DIASEM
          AND EXISTS (SELECT TURNO
                        FROM TFPHOR
                       WHERE  CODCARGAHOR = HOR.CODCARGAHOR
                         AND DIASEM = HOR.DIASEM
                         AND TURNO = HOR.TURNO + 1)) /** 1.0*/) AS VARCHAR(10)) AS INIINTERV,
 CAST(((SELECT CASE WHEN ENTRADA = 2400 THEN 2359 ELSE ENTRADA END
          FROM TFPHOR H2
         WHERE  CODCARGAHOR = HOR.CODCARGAHOR
           AND TURNO = HOR.TURNO + 1
           AND DIASEM = HOR.DIASEM) /** 1.0*/) AS VARCHAR(10)) AS TERMINTERV,
(SELECT DURINTERVALO
   FROM TFPCGH CGH
  WHERE CGH.CODCARGAHOR = HOR.CODCARGAHOR) AS DURINTERV
 FROM TFPHOR HOR,
      TFPHRE HRE,
      TSIEMP SEMP
WHERE HOR.TURNO <> (SELECT MAX (TURNO)
                      FROM TFPHOR
                     WHERE CODCARGAHORESOCIAL = HOR.CODCARGAHORESOCIAL)
  AND HRE.CODCARGAHORESOCIAL = HOR.CODCARGAHORESOCIAL
  AND HRE.CODEMP = SEMP.CODEMP
  AND EXISTS(SELECT 1 FROM VGF_EVENTO_S1050 S WHERE S.CODEMP = SEMP.CODEMP AND S.CHAVE = CAST (HOR.CODCARGAHORESOCIAL AS VARCHAR (20)))
ORDER BY 1, 2
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51441-0-0
Nro. O.S. : 1147718
Nome      : Cria - TRG_INS_TMDFMG
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TRG_INS_TMDFMG
NomeObjeto: TRG_INS_TMDFMG
TipoObjeto: TRIGGER
NomeTabela: TMDFMG
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_INS_TMDFMG
BEFORE INSERT ON TMDFMG 
FOR EACH ROW
BEGIN
    :NEW.DBHASHCODE := VARIAVEIS_PKG.V_DBHASHCODE;
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51442-0-1000
Nro. O.S. : 1147718
Nome      : INSERE - THOOBJ - 5144100
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_INS_TMDFMG
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210000
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_INS_TMDFMG' NOMEOBJ, 51441 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '2c4e3187c277358b04491e39d6668519' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_INS_TMDFMG' and THO.hashcode = '2c4e3187c277358b04491e39d6668519')
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51457-0-0
Nro. O.S. : 1150217
Nome      : Script - TFPFUN
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - TFPFUN
NomeObjeto: TFPFUN
TipoObjeto: TABLE
NomeTabela: TFPFUN
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
    P_COUNT     NUMBER(05);
BEGIN

   SELECT COUNT(*)
   INTO P_COUNT
   FROM TSISCR
   WHERE NME_SCRIPT = '1150217';
    
    IF P_COUNT = 0 THEN
        BEGIN
            EXECUTE IMMEDIATE 'INSERT INTO TSISCR VALUES (''1150217'', ''SCRIPT ALTERAÇÃO CAMPO APRENDIZGRAVIDA'')';
        
            EXECUTE IMMEDIATE 'ALTER TABLE TFPFUN ADD APRENDIZGRAVIDA_IMP CHAR(1)';
            EXECUTE IMMEDIATE 'UPDATE TFPFUN SET APRENDIZGRAVIDA_IMP = APRENDIZGRAVIDA';
            
            EXECUTE IMMEDIATE 'ALTER TABLE TFPFUN DROP COLUMN APRENDIZGRAVIDA';
            
            EXECUTE IMMEDIATE 'ALTER TABLE TFPFUN ADD APRENDIZGRAVIDA CHAR(1) DEFAULT ''N'' NOT NULL';
            EXECUTE IMMEDIATE 'ALTER TABLE TFPFUN ADD  CONSTRAINT CKC_APRENDIZGRAVIDA_TFPFUN CHECK (APRENDIZGRAVIDA IN (''S'',''N''))';
            
            EXECUTE IMMEDIATE 'UPDATE TFPFUN SET APRENDIZGRAVIDA = APRENDIZGRAVIDA_IMP WHERE APRENDIZGRAVIDA_IMP IS NOT NULL';
            
            EXECUTE IMMEDIATE 'ALTER TABLE TFPFUN DROP COLUMN APRENDIZGRAVIDA_IMP';
        EXCEPTION
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001,SQLERRM);
        END;
    END IF;

END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51460-0-0
Nro. O.S. : 1147818
Nome      : Script - TGFEXP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - TGFEXP
NomeObjeto: TGFEXP
TipoObjeto: TABLE
NomeTabela: TGFEXP
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
    P_COUNT     NUMBER(05);
BEGIN

   SELECT COUNT(*)
   INTO P_COUNT
   FROM TSISCR
   WHERE NME_SCRIPT = '1147818';
    
    IF P_COUNT = 0 THEN
        BEGIN
            EXECUTE IMMEDIATE 'INSERT INTO TSISCR VALUES (''1147818'', ''SCRIPT ALTERAÇÃO TGFEXP CAMPO NRODECLARACAO'')';
        
            EXECUTE IMMEDIATE 'ALTER TABLE TGFEXP DROP CONSTRAINT PK_TGFEXP';
            EXECUTE IMMEDIATE 'DROP INDEX TGFEXP_I03';
            
            EXECUTE IMMEDIATE 'ALTER TABLE TGFEXP MODIFY NRODECLARACAO VARCHAR2(14)';
            EXECUTE IMMEDIATE 'ALTER TABLE TGFEXP ADD CONSTRAINT PK_TGFEXP PRIMARY KEY (NRODECLARACAO, NRORE, NUNOTA)';
            
            EXECUTE IMMEDIATE 'CREATE INDEX TGFEXP_I03 ON TGFEXP (NRODECLARACAO)';
            
        EXCEPTION
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001,SQLERRM);
        END;
    END IF;

END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51494-0-0
Nro. O.S. : 1147501
Nome      : Ajusta - TFPFOR CODFORM 200
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Ajusta - TFPFOR CODFORM 200
NomeObjeto: CODFORM
TipoObjeto: COLUMN
NomeTabela: TFPFOR
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
  P_CODFORMULA      TFPFOR.CODFORM%TYPE;
  P_DESCRFORMULA    TFPFOR.DESCRFORM%TYPE;
  P_DESCRFORMNOVO   TFPFOR.DESCRFORM%TYPE;
  P_FORMULA         VARCHAR2(4000);
  P_FORMULANOVO     VARCHAR2(4000);
  P_CODFORMIND      VARCHAR2(4000);
  P_CODFORMINDNOVO  VARCHAR2(4000);
  P_SANKHYA         TFPFOR.SANKHYA%TYPE;
BEGIN
  
  P_CODFORMULA := 200;
  
  BEGIN
    SELECT FORMULA, DESCRFORM, CODFORMIND, SANKHYA
    INTO P_FORMULA, P_DESCRFORMULA, P_CODFORMIND, P_SANKHYA
    FROM TFPFOR
    WHERE CODFORM = P_CODFORMULA;
  EXCEPTION WHEN NO_DATA_FOUND THEN
    P_FORMULA := 'A';
    P_CODFORMIND := NULL;
    P_DESCRFORMULA := NULL;
    P_SANKHYA := 'S'; 
  END;
  
  IF P_SANKHYA = 'N' THEN
    RETURN;
  END IF;
  
  P_DESCRFORMNOVO := 'SDO SALARIOS RESCISAO';
  P_FORMULANOVO := 'IF(&DIASTRA <> 0,(QueFuncionario.SALBASE * IF(QueFuncionario.TIPSAL=5,QueFuncionario.HORASSEM*5,1) / IF((&MESATU = 2), IF(QueFuncionario.TIPSAL=5, (QueFuncionario.HORASSEM*5) / 30, 1) * &DiaDivSalBase, IF(QueFuncionario.TIPSAL=5,QueFuncionario.HORASSEM*5,30))*&DIASTRA),0)';
  P_CODFORMINDNOVO := '&DIASTRA';
  
  IF P_FORMULA = 'A' THEN
    INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
      VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
             'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO);
    
    IF P_CODFORMINDNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO);
    END IF;
    
    IF P_DESCRFORMNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO);
    END IF;
    
    INSERT INTO TFPFOR (CODFORM, DESCRFORM, SANKHYA, FORMULA, CODFORMIND)
      VALUES(P_CODFORMULA, P_DESCRFORMNOVO, 'S', P_FORMULANOVO, P_CODFORMINDNOVO);
    
  ELSIF (P_FORMULANOVO <> P_FORMULA OR 
         NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') OR 
         NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z')) 
  THEN
    
    IF P_FORMULANOVO <> P_FORMULA THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO, P_FORMULA);
    END IF;
    
    IF NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO, P_CODFORMIND);
    END IF;
    
    IF NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO, P_DESCRFORMULA);
    END IF;
    
    UPDATE TFPFOR
    SET FORMULA = P_FORMULANOVO
    , DESCRFORM = P_DESCRFORMNOVO
    , CODFORMIND = P_CODFORMINDNOVO
    , FORMULANTERIOR = CASE WHEN FORMULA <> P_FORMULANOVO THEN P_FORMULA ELSE FORMULANTERIOR END
    , DTALTER = SYSDATE
    , CODUSU = 0
    WHERE CODFORM = P_CODFORMULA
    AND SANKHYA = 'S';
    
  END IF;
  
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51496-0-0
Nro. O.S. : 1151161
Nome      : Cria - CHK_SITUACAO_EVTFILA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - CHK_SITUACAO_EVTFILA
NomeObjeto: CHK_SITUACAO_EVTFILA
TipoObjeto: CONSTRAINT
NomeTabela: EVTFILA
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE EVTFILA ADD CONSTRAINT CHK_SITUACAO_EVTFILA CHECK (SITUACAO IN ('P','I','E','F','T','A','V','C','R','Q','X','Y','Z', 'L'))
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51499-0-0
Nro. O.S. : 1151161
Nome      : Altera - VGF_EVENTO_S1005_INFOENTEDUC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VGF_EVENTO_S1005_INFOENTEDUC
NomeObjeto: VGF_EVENTO_S1005_INFOENTEDUC
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1005_INFOENTEDUC
(
   NRINSC,
   CODEMP,
   FILIAL,
   CHAVE
)
AS
SELECT 
    ENED.NRINSC AS "NRINSC",
    VEMP.CODEMPMATRIZ AS "CODEMP",
    CAST (ENED.CODEMP AS VARCHAR (100)) AS "FILIAL",
    ENED.NRINSC AS "CHAVE"
FROM TFPENED ENED, VGF_EVENTO_EMPREGADOR VEMP, TFPEMP EMP
WHERE EMP.CODEMPLOTACAO IS NULL 
AND ENED.CODEMP = VEMP.CODEMP
AND VEMP.CODEMP = EMP.CODEMP
AND EMP.USADOESOCIAL = 'S'
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 23/02/2018 16:08:15
Num.Script: 51511-0-0
Nro. O.S. : 1150713
Nome      : Insere - USOPRODCTRLP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Inserir o parametro
NomeObjeto: USOPRODCTRLP
TipoObjeto: PARAMETRO
NomeTabela: TSIPAR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO TSIPAR ( CHAVE, DESCRICAO, CODUSU, MODULO, CLASSE, ABA, TIPO,  TEXTO, INTEIRO)  VALUES ( 'USOPRODCTRLP', 'Filtra pesquisa Ctrl+P para certo(s) USOPROD', 0,'E', 'Saídas', 'Comercial', 'C', '/M/ /C/ /R/ /T/ /V/ /F/ /B/ /D/ /I/ /E/ /P/ /1/ /2/ /0/', 0) 
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 22/03/2018 16:20:17
Num.Script: 51793-0-0
Nro. O.S. : 1147664
Nome      : Cria - TFPMON AMBPRODUCAO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: AMBPRODUCAO
TipoObjeto: COLUMN
NomeTabela: TFPMON
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TFPMON ADD AMBPRODUCAO CHAR(1)';
   EXECUTE IMMEDIATE 'UPDATE TFPMON SET AMBPRODUCAO = ''P''';
   EXECUTE IMMEDIATE 'ALTER TABLE TFPMON ADD  CONSTRAINT CKC_AMBPRODUCAO_TFPMON CHECK (AMBPRODUCAO IN (''P'',''L''))';
   EXECUTE IMMEDIATE 'ALTER TABLE TFPMON MODIFY AMBPRODUCAO DEFAULT ''P'' NOT NULL';
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 22/03/2018 16:20:35
Num.Script: 51793-0-1
Nro. O.S. : 1148956
Nome      : Altera - SNK_PROCESSA_DADOS_ESOCIAL
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - SNK_PROCESSA_DADOS_ESOCIAL
NomeObjeto: SNK_PROCESSA_DADOS_ESOCIAL
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_PROCESSA_DADOS_ESOCIAL (
   P_CODEMPMATRIZ          NUMBER,
   P_DTREF                 DATE,
   P_TPAMB                 CHAR,                       /*P= PRODUCAO T=TESTE*/
   P_TIPDADOS              CHAR, /*P_TIPDADOS T= TODOS C=CADOSTRO M=MOVIMENTO*/
   P_EVENTO                VARCHAR2 := 'TODOS',
   P_SEQUENCIA_ATUAL       NUMBER,
   P_NOMETAB               VARCHAR2 := NULL,    /*UTILIZADO NA RECURSIVIDADE*/
   P_SEQUENCIA_PAI         VARCHAR2 := NULL,    /*UTILIZADO NA RECURSIVIDADE*/
   P_RESULT            OUT NUMBER)
AS
   P_SEQUENCIA_OLD          NUMBER (10);
   P_SEQUENCIA_NEW          NUMBER (10);
   P_DTREF_OLD              DATE;
   P_COLUNAS_PADRAO         VARCHAR2 (4000)
      := 'CODEMP, DTREF, STATUS, ACAO, NRORECIBO, NRORECIBO_ANT, SEQUENCIA, DTALTERACAO, DTEF, DSCALT, JUSTPRORR, MTVALTER, CONTROLE, TPAMB';
   queSql                   VARCHAR2 (8000);
   P_SEQUENCIA_DEL          NUMBER (10);
   P_COLUMNS                VARCHAR2 (4000);
   P_INSERT_COLUMNS         VARCHAR2 (4000);
   P_INSERT_VALUES          VARCHAR2 (4000);
   P_COLUMNS_PARAMETER      VARCHAR2 (4000)
      := 'CODEMP, DTREF, SEQUENCIA, STATUS, ACAO,NRORECIBO, NRORECIBO_ANT, ';
   P_COLUMNS_TO_PARAMETER   VARCHAR2 (4000)
      := 'CODEMP;, :DTREF, :SEQUENCIA, :STATUS, :ACAO,:NRORECIBO, :NRORECIBO_ANT, ';
   P_COL_PAD_FILHOS         VARCHAR2 (4000) := 'CODEMP, DTREF, SEQUENCIA, ';
   P_COL_PAD_FILHOS_PARAM   VARCHAR2 (4000) := 'CODEMP, :DTREF, :SEQUENCIA, ';
   P_TABLE_PAI              VARCHAR2 (100);
   P_VALID_ALTER            BOOLEAN := FALSE;
   P_COUNT                  NUMBER (10);
   P_DTLOG                  DATE;
   P_SEQLOG                 NUMBER (10);
   P_MSG                    VARCHAR2 (4000) := ' ';
BEGIN

   IF P_NOMETAB IS NULL
   THEN
      FOR EVE
         IN (  SELECT NOMETAB,
                      NOMEEVENTO,
                      NOMEVIEW,
                      NOMEEVEVENTOPAI
                 FROM TFPMON
                WHERE     TIPO = 'C'
                      AND (P_EVENTO = 'TODOS' OR NOMEEVENTO = P_EVENTO)
                      AND NOMEEVEVENTOPAI IS NULL
                      AND (   (P_TPAMB = 'P' AND AMBPRODUCAO = 'L')
                           OR (P_TPAMB = 'T' AND AMBTESTE = 'L'))
             ORDER BY NOMETAB--GROUP BY NOMETAB, NOMEEVENTO, NOMEVIEW, NOMEEVEVENTOPAI
            )
      LOOP
         queSql :=
               ' SELECT COUNT(1)  
                        FROM '
            || EVE.NOMETAB
            || '
                        WHERE CODEMP = :CODEMP
                          AND DTREF = :DTREF
                          AND TPAMB = :TPAMB
                          AND STATUS = ''I''';

         EXECUTE IMMEDIATE queSql
            INTO P_COUNT
            USING P_CODEMPMATRIZ, P_DTREF, P_TPAMB;

         IF P_COUNT > 0
         THEN
            RAISE_APPLICATION_ERROR (
               -20101,
               'Não é possivel gerar dados do e-social se existir eventos em processo de envio.');
         END IF;

         queSql :=
               ' SELECT MAX(SEQUENCIA)  
                        FROM '
            || EVE.NOMETAB
            || '
                        WHERE CODEMP = :CODEMP
                          AND DTREF = :DTREF
                          AND TPAMB = :TPAMB
                          AND STATUS = ''P''';

         EXECUTE IMMEDIATE queSql
            INTO P_SEQUENCIA_DEL
            USING P_CODEMPMATRIZ, P_DTREF, P_TPAMB;

         IF P_SEQUENCIA_DEL > 0 THEN /* SE EXISTE STATUS IGUAL A 'P' PODEMOS DELETAR, JA QUE MANDAMOS TODAS AS INFORMACOES DE UMA SO VEZ! */
            FOR CUR_DEL IN (SELECT NOMETAB
                              FROM TFPMON
                             WHERE NOMEEVEVENTOPAI IS NULL AND TIPO = 'C')
            LOOP
               queSql :=
                     ' DELETE FROM '
                  || CUR_DEL.NOMETAB
                  || '
                                WHERE CODEMP = :CODEMP
                                  AND DTREF = :DTREF
                                  AND TPAMB = :TPAMB
                                  AND SEQUENCIA = :SEQUENCIA';

               EXECUTE IMMEDIATE queSql
                  USING P_CODEMPMATRIZ,
                        P_DTREF,
                        P_TPAMB,
                        P_SEQUENCIA_DEL;
            END LOOP;

            P_SEQUENCIA_NEW := P_SEQUENCIA_ATUAL;
            EXIT;
         END IF;
      END LOOP;
   ELSE
      P_SEQUENCIA_NEW := P_SEQUENCIA_PAI;
   END IF;

   IF P_SEQUENCIA_NEW IS NULL THEN /*SE P_SEQUENCIA_NEW ESTA NULL, E PORQUE NAO DELETOU DAGOS, LOGO TEMOS QUE GERAR UMA SEQUENCIA NOVA.*/
      P_SEQUENCIA_NEW := P_SEQUENCIA_ATUAL + 1;
   END IF;
   
   IF P_NOMETAB IS NULL THEN
    SNK_SET_ESOCIAL_PKG(P_TPAMB, P_DTREF, CASE WHEN NVL(P_SEQUENCIA_DEL, 0) > 0 THEN P_SEQUENCIA_ATUAL - 1 ELSE P_SEQUENCIA_ATUAL END);
   END IF;

   FOR EVE
      IN (  SELECT MON.NOMETAB,
                   MON.NOMEEVENTO,
                   MON.NOMEVIEW,
                   MON.NOMEEVEVENTOPAI,
                   MON.TIPO
              FROM TFPMON MON
             WHERE    (P_NOMETAB IS NOT NULL AND MON.NOMETAB = P_NOMETAB)
                   OR     (    P_NOMETAB IS NULL
                           AND NOMEEVEVENTOPAI IS NULL
                           AND (P_EVENTO = 'TODOS' OR MON.NOMEEVENTO = P_EVENTO)
                           AND (P_TIPDADOS = 'T' OR MON.TIPO = P_TIPDADOS))
                      AND TIPO = 'C'
                      AND (   (P_TPAMB = 'P' AND MON.AMBPRODUCAO = 'L')
                           OR (P_TPAMB = 'T' AND MON.AMBTESTE = 'L'))
          GROUP BY MON.NOMETAB,
                   MON.NOMEEVENTO,
                   MON.NOMEVIEW,
                   MON.NOMEEVEVENTOPAI,
                   MON.TIPO
          ORDER BY MON.NOMETAB)
   LOOP
      P_MSG := 'EVENTO: ' || EVE.NOMEEVENTO;

      IF EVE.TIPO IN ('T', 'C')
      THEN
         P_INSERT_COLUMNS := SNK_GET_COLUMNS_TABLE (EVE.NOMETAB);
         P_INSERT_VALUES := P_INSERT_COLUMNS;
         P_INSERT_VALUES :=
            REPLACE (P_INSERT_VALUES, 'SEQUENCIA', TO_CHAR (P_SEQUENCIA_NEW));
         P_INSERT_VALUES :=
            REPLACE (
               P_INSERT_VALUES,
               'DTREF',
                  'TO_DATE('''
               || SNK_FORMAT_DATE (P_DTREF, 'DD/MM/YYYY HH24:MI:SS')
               || ''', ''DD/MM/YYYY HH24:MI:SS'')');
         P_INSERT_VALUES :=
            REPLACE (P_INSERT_VALUES, 'TPAMB', '''' || P_TPAMB || '''');

         IF EVE.NOMEEVEVENTOPAI IS NULL
         THEN
            P_TABLE_PAI := EVE.NOMETAB;

            IF P_SEQUENCIA_NEW > 1
            THEN
               --P_SEQUENCIA_OLD := P_SEQUENCIA_NEW - 1; --Nao pode ser assim, pois na primeira geracao, pode nao ter gerado algum evento.
               queSql :=
                     ' SELECT NVL(MAX(SEQUENCIA),0)  
                                FROM '
                  || EVE.NOMETAB
                  || '
                                WHERE CODEMP = :CODEMP
                                  AND DTREF = :DTREF
                                  AND TPAMB = :TPAMB
                                  AND SEQUENCIA < :SEQUENCIA_NEW';

               EXECUTE IMMEDIATE queSql
                  INTO P_SEQUENCIA_OLD
                  USING P_CODEMPMATRIZ,
                        P_DTREF,
                        P_TPAMB,
                        P_SEQUENCIA_NEW;

               P_DTREF_OLD := P_DTREF;
            ELSE
               queSql :=
                     ' SELECT NVL(MAX(DTREF), :DTMOV)
                                FROM '
                  || EVE.NOMETAB
                  || '
                                WHERE CODEMP = :CODEMP
                                  AND DTREF < :DTREF
                                  AND TPAMB = :TPAMB';

               EXECUTE IMMEDIATE queSql
                  INTO P_DTREF_OLD
                  USING P_DTREF,
                        P_CODEMPMATRIZ,
                        P_DTREF,
                        P_TPAMB;

               P_DTREF_OLD := NVL (P_DTREF_OLD, P_DTREF);

               IF P_DTREF_OLD <> P_DTREF
               THEN
                  queSql :=
                        ' SELECT NVL(MAX(SEQUENCIA),0)
                                    FROM '
                     || EVE.NOMETAB
                     || '
                                    WHERE CODEMP = :CODEMP
                                      AND DTREF = :DTREF
                                      AND TPAMB = :TPAMB';

                  EXECUTE IMMEDIATE queSql
                     INTO P_SEQUENCIA_OLD
                     USING P_CODEMPMATRIZ, P_DTREF_OLD, P_TPAMB;
               ELSE
                  P_SEQUENCIA_OLD := P_SEQUENCIA_NEW;
               END IF;
            END IF;

            IF P_DTREF_OLD <> P_DTREF OR P_SEQUENCIA_OLD <> P_SEQUENCIA_NEW
            THEN
               queSql := NULL;
               SNK_GET_VALID_ALTER_ESOCIAL (P_EVENTO,
                                            P_COLUNAS_PADRAO,
                                            P_CODEMPMATRIZ,
                                            P_DTREF_OLD,
                                            P_SEQUENCIA_OLD,
                                            P_TPAMB,
                                            NULL                /*NOMETABPAI*/
                                                ,
                                            EVE.NOMETAB,
                                            EVE.NOMEVIEW);
            END IF;

            P_INSERT_VALUES :=
               REPLACE (P_INSERT_VALUES, 'CONTROLE', '''I'' AS CONTROLE');
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'CHAVE', 'V.CHAVE');
            P_INSERT_VALUES :=
               REPLACE (
                  P_INSERT_VALUES,
                  'NRORECIBO,',
                  'CASE WHEN ANT.CHAVE IS NULL OR ANT.CONTROLE = ''I'' THEN ANT.NRORECIBO ELSE NULL END,');
            P_INSERT_VALUES :=
               REPLACE (
                  P_INSERT_VALUES,
                  'NRORECIBO_ANT,',
                  'CASE WHEN ANT.CHAVE IS NULL OR ANT.CONTROLE = ''I'' THEN ANT.NRORECIBO_ANT ELSE ANT.NRORECIBO END,'); /* TEM QUE SER PRIMEIRO POR QUE EXISTE NRORECIBO E O NRORECIBO_ANT */
            P_INSERT_VALUES :=
               REPLACE (
                  P_INSERT_VALUES,
                  'STATUS',
                  'CASE WHEN NVL(ANT.CONTROLE, '' '') = ''I'' AND NVL(ANT.STATUS, '' '') = ''F'' THEN ''F'' ELSE ''P'' END');
            P_INSERT_VALUES :=
               REPLACE (
                  P_INSERT_VALUES,
                  ' ACAO',
                  'CASE WHEN ANT.NRORECIBO IS NULL AND ANT.NRORECIBO_ANT IS NULL THEN ''I'' WHEN ANT.STATUS = ''F'' THEN NVL(ANT.CONTROLE, ''I'') ELSE NVL(ANT.ACAO, ''I'') END');

            queSql :=
                  'INSERT INTO '
               || EVE.NOMETAB
               || ' 
                               SELECT '
               || P_INSERT_VALUES
               || '
                               FROM '
               || EVE.NOMEVIEW
               || ' V
                                    LEFT JOIN (SELECT CHAVE
                                                    , STATUS
                                                    , NRORECIBO
                                                    , NRORECIBO_ANT
                                                    , ACAO
                                                    , CONTROLE
                                               FROM '
               || EVE.NOMETAB
               || ' OLD
                                               WHERE OLD.CODEMP = '
               || TO_CHAR (P_CODEMPMATRIZ)
               || '
                                     AND OLD.DTREF = TO_DATE('''
               || SNK_FORMAT_DATE (P_DTREF_OLD, 'DD/MM/YYYY HH24:MI:SS')
               || ''', ''DD/MM/YYYY HH24:MI:SS'')
                                                 AND OLD.SEQUENCIA = '
               || TO_CHAR (P_SEQUENCIA_OLD)
               || '
                                                 AND OLD.TPAMB = '''
               || P_TPAMB
               || ''') ANT ON ANT.CHAVE = V.CHAVE
                               WHERE CODEMP = '
               || TO_CHAR (P_CODEMPMATRIZ);

            EXECUTE IMMEDIATE queSql;
         ELSE                                 /*SO ENTRA AQUI PARA OS FILHOS*/
            queSql :=
                  '
                          INSERT INTO '
               || EVE.NOMETAB
               || ' 
                              SELECT '
               || P_INSERT_VALUES
               || '
                              FROM '
               || EVE.NOMEVIEW
               || '
                              WHERE CODEMP = :CODEMPMATRIZ';
            
            EXECUTE IMMEDIATE queSql USING P_CODEMPMATRIZ;
         END IF;
      END IF;

      -- IF P_TIPDADOS IN ('T', 'M') THEN

      --END IF;

      /* INCLUSAO DAS LINHAS DE EXCLUSAO */
      IF     (P_DTREF_OLD <> P_DTREF OR P_SEQUENCIA_OLD <> P_SEQUENCIA_NEW)
         AND (P_DTREF_OLD IS NOT NULL AND P_SEQUENCIA_OLD IS NOT NULL)
      THEN
         P_INSERT_COLUMNS := SNK_GET_COLUMNS_TABLE (EVE.NOMETAB);
         P_INSERT_VALUES := P_INSERT_COLUMNS;
         P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' ', '');
         P_INSERT_VALUES := 'O.' || REPLACE (P_INSERT_VALUES, ',', ',O.');
         P_INSERT_VALUES :=
            REPLACE (P_INSERT_VALUES,
                     'O.SEQUENCIA',
                     TO_CHAR (P_SEQUENCIA_NEW));
         P_INSERT_VALUES :=
            REPLACE (P_INSERT_VALUES, 'O.TPAMB', '''' || P_TPAMB || '''');
         P_INSERT_VALUES :=
            REPLACE (
               P_INSERT_VALUES,
               'O.DTREF',
                  'TO_DATE('''
               || SNK_FORMAT_DATE (P_DTREF, 'DD/MM/YYYY HH24:MI:SS')
               || ''', ''DD/MM/YYYY HH24:MI:SS'')');

         IF EVE.NOMEEVEVENTOPAI IS NULL
         THEN
            P_INSERT_VALUES :=
               REPLACE (P_INSERT_VALUES, 'O.CONTROLE', '''E''');
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.CHAVE', 'O.CHAVE');
            P_INSERT_VALUES :=
               REPLACE (P_INSERT_VALUES, 'O.NRORECIBO,', 'NULL,');
            P_INSERT_VALUES :=
               REPLACE (P_INSERT_VALUES, 'O.NRORECIBO_ANT,', 'O.NRORECIBO,'); /* TEM QUE SER PRIMEIRO POR QUE EXISTE NRORECIBO E O NRORECIBO_ANT */
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.STATUS', '''P''');
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.ACAO', '''E''');

            queSql :=
                  ' MERGE INTO '
               || EVE.NOMETAB
               || ' N
                                USING (SELECT '
               || P_INSERT_COLUMNS
               || ' 
                                       FROM '
               || EVE.NOMETAB
               || ' 
                                       WHERE CODEMP = '
               || TO_CHAR (P_CODEMPMATRIZ)
               || '
                                         AND DTREF = TO_DATE('''
               || SNK_FORMAT_DATE (P_DTREF_OLD, 'DD/MM/YYYY HH24:MI:SS')
               || ''', ''DD/MM/YYYY HH24:MI:SS'')
                                         AND SEQUENCIA = '
               || TO_CHAR (P_SEQUENCIA_OLD)
               || '
                                         AND TPAMB = '''
               || P_TPAMB
               || '''
                                         AND (('''
               || EVE.NOMEEVENTO
               || ''' NOT IN (''S-2205'', ''S-2206'')) OR
                                              ('''
               || EVE.NOMEEVENTO
               || ''' = ''S-2205'' AND EXISTS(SELECT 1 FROM TFPFUN WHERE CODEMP||'':''||CODFUNC = CHAVE AND SITESOCIAL IN (''5'', ''T'') )) OR
                                              ('''
               || EVE.NOMEEVENTO
               || ''' = ''S-2206'' AND EXISTS(SELECT 1 FROM TFPFUN WHERE CODEMP||'':''||CODFUNC = CHAVE AND SITESOCIAL IN (''6'', ''T'') ))  
                                             )
                                         AND ((STATUS = ''F'' AND NRORECIBO IS NOT NULL) OR (STATUS <> ''F'' AND ACAO = ''E'' AND NRORECIBO IS NULL) OR (STATUS <> ''F'' AND ACAO <> ''E'' AND NRORECIBO_ANT IS NOT NULL) )
                                          ) O 
                                ON (N.CODEMP = O.CODEMP AND
                                    N.DTREF = TO_DATE('''
               || SNK_FORMAT_DATE (P_DTREF, 'DD/MM/YYYY HH24:MI:SS')
               || ''', ''DD/MM/YYYY HH24:MI:SS'') AND
                                    N.SEQUENCIA = '
               || TO_CHAR (P_SEQUENCIA_NEW)
               || ' AND 
                                    N.TPAMB = '''
               || P_TPAMB
               || ''' AND 
                                    N.CHAVE = O.CHAVE 
                                    )
                                WHEN NOT MATCHED THEN INSERT ('
               || P_INSERT_COLUMNS
               || ')
                                       VALUES ('
               || P_INSERT_VALUES
               || ' ) ';

            EXECUTE IMMEDIATE queSql;
         ELSE                                 /*SO ENTRA AQUI PARA OS FILHOS*/
            queSql :=
                  ' MERGE INTO '
               || EVE.NOMETAB
               || ' N
                                USING (SELECT '
               || P_INSERT_COLUMNS
               || ' 
                                       FROM '
               || EVE.NOMETAB
               || ' 
                                       WHERE CODEMP = '
               || TO_CHAR (P_CODEMPMATRIZ)
               || '
                                         AND DTREF = TO_DATE('''
               || SNK_FORMAT_DATE (P_DTREF_OLD, 'DD/MM/YYYY HH24:MI:SS')
               || ''', ''DD/MM/YYYY HH24:MI:SS'')
                                         AND SEQUENCIA = '
               || TO_CHAR (P_SEQUENCIA_OLD)
               || '
                                         AND TPAMB = '''
               || P_TPAMB
               || '''
                                          ) O 
                                ON (N.CODEMP = O.CODEMP AND
                                    N.DTREF = TO_DATE('''
               || SNK_FORMAT_DATE (P_DTREF, 'DD/MM/YYYY HH24:MI:SS')
               || ''', ''DD/MM/YYYY HH24:MI:SS'') AND
                                    N.SEQUENCIA = '
               || TO_CHAR (P_SEQUENCIA_NEW)
               || ' AND
                                    N.TPAMB = O.TPAMB AND
                                    N.CHAVE = O.CHAVE)
                                WHEN NOT MATCHED THEN INSERT ('
               || P_INSERT_COLUMNS
               || ')
                                    VALUES ('
               || P_INSERT_VALUES
               || ' ) ';

            EXECUTE IMMEDIATE queSql;
         END IF;
      END IF;

      FOR EVEF
         IN (  SELECT NOMETAB,
                      NOMEEVENTO,
                      NOMEVIEW,
                      NOMEEVEVENTOPAI
                 FROM TFPMON
                WHERE     TIPO = 'C'
                      AND NOMEEVEVENTOPAI = EVE.NOMETAB
                      AND (   (P_TPAMB = 'P' AND AMBPRODUCAO = 'L')
                           OR (P_TPAMB = 'T' AND AMBTESTE = 'L'))
             ORDER BY NOMETAB)
      LOOP
         queSql := NULL;

         SNK_PROCESSA_DADOS_ESOCIAL (P_CODEMPMATRIZ,
                                     P_DTREF,
                                     P_TPAMB,
                                     P_TIPDADOS,
                                     EVEF.NOMEEVENTO,
                                     P_SEQUENCIA_NEW,
                                     EVEF.NOMETAB,
                                     P_SEQUENCIA_NEW,
                                     P_RESULT);
      END LOOP;

      P_RESULT := P_SEQUENCIA_NEW;
   END LOOP;
EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK;

      IF queSql IS NOT NULL
      THEN
         P_DTLOG := SYSDATE;

         SELECT COUNT (1) + 1
           INTO P_SEQLOG
           FROM LOGESOCIAL
          WHERE DTLOG = P_DTLOG;

         INSERT INTO LOGESOCIAL (DTLOG, SEQUENCIA, COMANDO)
            SELECT P_DTLOG, P_SEQLOG, SUBSTR (queSql, 1, 4000) FROM DUAL;

         IF LENGTH (queSql) > 4000
         THEN
            INSERT INTO LOGESOCIAL (DTLOG, SEQUENCIA, COMANDO)
               SELECT P_DTLOG, P_SEQLOG + 1, SUBSTR (queSql, 4001) FROM DUAL;
         END IF;

         COMMIT;
      END IF;

      P_MSG := P_MSG || SUBSTR (SQLERRM, 1, 3950);
      RAISE_APPLICATION_ERROR (-20101, P_MSG);
END;
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 25/04/2018 14:15:18
Num.Script: 52255-0-0
Nro. O.S. : 1161409
Nome      : Dropa - PK_TFPS2205_DEPENDENTE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropa - PK_TFPS2205_DEPENDENTE
NomeObjeto: PK_TFPS2205_DEPENDENTE
TipoObjeto: PRIMARY KEY
NomeTabela: TFPS2205_DEPENDENTE
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPS2205_DEPENDENTE DROP CONSTRAINT PK_TFPS2205_DEPENDENTE
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 25/04/2018 14:15:27
Num.Script: 52256-0-0
Nro. O.S. : 1161409
Nome      : Dropa - FK_DEPENDENTE_TFPS2205
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropa - FK_DEPENDENTE_TFPS2205
NomeObjeto: FK_DEPENDENTE_TFPS2205
TipoObjeto: FOREIGN KEY
NomeTabela: TFPS2205_DEPENDENTE
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPS2205_DEPENDENTE DROP CONSTRAINT FK_DEPENDENTE_TFPS2205
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 24/04/2018 14:56:29
Num.Script: 53933-0-0
Nro. O.S. : 1133146
Nome      : Dropar - PK_TFPS2205
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - PK_TFPS2205
NomeObjeto: PK_TFPS2205
TipoObjeto: PRIMARY KEY
NomeTabela: TFPS2205
Executar  : SE_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPS2205 DROP CONSTRAINT PK_TFPS2205
/
 
 
 
/*
Requer    : 4200019
Conexao   : ORCL
Data      : 24/04/2018 14:56:29
Num.Script: 53934-0-0
Nro. O.S. : 1133146
Nome      : Criar - PK_TFPS2205
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - PK_TFPS2205
NomeObjeto: PK_TFPS2205
TipoObjeto: PRIMARY KEY
NomeTabela: TFPS2205
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210000
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPS2205 ADD CONSTRAINT PK_TFPS2205 PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE)
/
 
 
 
/*
Conexao   : ORCL
NomeObjeto: UPDATE TSIPAR INTEIRO
TipoObjeto: TABLE
NomeTabela: 
Executar  : SEMPRE
Ocorrencia: 4210001
FullVersao: Sim
*/
 
 
UPDATE TSIPAR SET INTEIRO = 4210000 WHERE CHAVE = 'VERSAOATUALDB'
/
 
 
 
/*
Requer    : 4210000
Conexao   : ORCL
Data      : 06/03/2018 17:09:57
Num.Script: 49418-0-0
Nro. O.S. : 1121756
Nome      : Cria - TGFEMP ULTNSUCTE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: ULTNSUCTE
TipoObjeto: COLUMN
NomeTabela: TGFEMP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210001
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TGFEMP ADD ULTNSUCTE VARCHAR2(15)';
   EXECUTE IMMEDIATE 'UPDATE TGFEMP SET ULTNSUCTE = ''0''';
   EXECUTE IMMEDIATE 'ALTER TABLE TGFEMP MODIFY ULTNSUCTE DEFAULT ''0'' NOT NULL';
END;
/
 
 
 
/*
Requer    : 4210000
Conexao   : ORCL
Data      : 06/03/2018 17:09:57
Num.Script: 49419-0-0
Nro. O.S. : 1121756
Nome      : Cria - TGFEMP UTILIZADFETRANSP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: UTILIZADFETRANSP
TipoObjeto: COLUMN
NomeTabela: TGFEMP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210001
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TGFEMP ADD UTILIZADFETRANSP CHAR(1)';
   EXECUTE IMMEDIATE 'UPDATE TGFEMP SET UTILIZADFETRANSP = ''N''';
   EXECUTE IMMEDIATE 'ALTER TABLE TGFEMP ADD  CONSTRAINT CKC_UTILIZADFETRANSP_TGFEMP CHECK (UTILIZADFETRANSP IN (''S'',''N''))';
   EXECUTE IMMEDIATE 'ALTER TABLE TGFEMP MODIFY UTILIZADFETRANSP DEFAULT ''N'' NOT NULL';
END;
/
 
 
 
/*
Requer    : 4210000
Conexao   : ORCL
Data      : 06/03/2018 17:09:57
Num.Script: 49420-0-0
Nro. O.S. : 1121756
Nome      : Cria - TGFNSUF TIPO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: TIPO
TipoObjeto: COLUMN
NomeTabela: TGFNSUF
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210001
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TGFNSUF ADD TIPO CHAR(1)';
   EXECUTE IMMEDIATE 'UPDATE TGFNSUF SET TIPO = ''N''';
   EXECUTE IMMEDIATE 'ALTER TABLE TGFNSUF ADD  CONSTRAINT CKC_TIPO_TGFNSUF CHECK (TIPO IN (''C'',''N''))';
   EXECUTE IMMEDIATE 'ALTER TABLE TGFNSUF MODIFY TIPO DEFAULT ''N'' NOT NULL';
END;
/
 
 
 
/*
Requer    : 4210000
Conexao   : ORCL
Data      : 06/03/2018 17:09:57
Num.Script: 49421-0-0
Nro. O.S. : 1121756
Nome      : Script - TGFNSUF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - TGFNSUF
NomeObjeto: TGFNSUF
TipoObjeto: TABLE
NomeTabela: TGFNSUF
Executar  : SE_EXISTIR
Ocorrencia: 4210001
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
    P_COUNT NUMBER(5);
BEGIN
    SELECT COUNT(*) INTO P_COUNT
    FROM USER_CONS_COLUMNS ACC
    WHERE TABLE_NAME = 'TGFNSUF'
    AND CONSTRAINT_NAME = 'PK_TGFNSUF'
    AND COLUMN_NAME = 'TIPO';
    
    IF P_COUNT >  0 THEN
        RETURN;
    END IF;
    
    --DROPA PK DA TGFNSUF
    SELECT COUNT(1) INTO P_COUNT
    FROM USER_CONSTRAINTS
    WHERE CONSTRAINT_NAME = 'PK_TGFNSUF';

    IF P_COUNT > 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE TGFNSUF DROP CONSTRAINT PK_TGFNSUF';
    END IF;

    --DROPA INDEX DA TGFNSUF
    SELECT COUNT(1) INTO P_COUNT
    FROM USER_INDEXES
    WHERE INDEX_NAME = 'PK_TGFNSUF';

    IF P_COUNT > 0 THEN
      EXECUTE IMMEDIATE 'DROP INDEX PK_TGFNSUF';
    END IF;

    --ADICIONA A NOVA PK DA TGFNSUF
    EXECUTE IMMEDIATE 'ALTER TABLE TGFNSUF ADD CONSTRAINT PK_TGFNSUF PRIMARY KEY(NSU, TIPO)';
END;
/
 
 
 
/*
Requer    : 4210000
Conexao   : ORCL
Data      : 06/03/2018 17:09:57
Num.Script: 49422-0-0
Nro. O.S. : 1121756
Nome      : Cria - TGFIXN SITUACAOCTE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: SITUACAOCTE
TipoObjeto: COLUMN
NomeTabela: TGFIXN
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210001
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TGFIXN ADD SITUACAOCTE CHAR(1)';
   EXECUTE IMMEDIATE 'ALTER TABLE TGFIXN ADD  CONSTRAINT CKC_SITUACAOCTE_TGFIXN CHECK (SITUACAOCTE IN (''A'',''C'',''E'') OR SITUACAOCTE IS NULL )';
END;
/
 
 
 
/*
Requer    : 4210000
Conexao   : ORCL
Data      : 06/03/2018 17:09:57
Num.Script: 49423-0-0
Nro. O.S. : 1121756
Nome      : Cria - TGFIXN PAPELCTE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: PAPELCTE
TipoObjeto: COLUMN
NomeTabela: TGFIXN
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210001
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TGFIXN ADD PAPELCTE CHAR(1)';
   EXECUTE IMMEDIATE 'ALTER TABLE TGFIXN ADD  CONSTRAINT CKC_PAPELCTE_TGFIXN CHECK (PAPELCTE IN (''R'',''D'',''E'',''C'',''T'') OR PAPELCTE IS NULL )';
END;
/
 
 
 
/*
Requer    : 4210000
Conexao   : ORCL
Data      : 06/03/2018 17:09:57
Num.Script: 49424-0-0
Nro. O.S. : 1121756
Nome      : Cria - TGFMDT SITUACAONFE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: SITUACAONFE
TipoObjeto: COLUMN
NomeTabela: TGFMDT
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210001
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TGFMDT ADD SITUACAONFE CHAR(1)';
   EXECUTE IMMEDIATE 'UPDATE TGFMDT SET SITUACAONFE = ''1''';
   EXECUTE IMMEDIATE 'ALTER TABLE TGFMDT ADD  CONSTRAINT CKC_SITUACAONFE_TGFMDT CHECK (SITUACAONFE IN (''1'',''2'',''3''))';
   EXECUTE IMMEDIATE 'ALTER TABLE TGFMDT MODIFY SITUACAONFE DEFAULT ''1'' NOT NULL';
END;
/
 
 
 
/*
Requer    : 4210000
Conexao   : ORCL
Data      : 06/03/2018 17:09:57
Num.Script: 49432-0-0
Nro. O.S. : 1121756
Nome      : Altera - Stp_Gerar_Livro_Fin
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - Stp_Gerar_Livro_Fin
NomeObjeto: Stp_Gerar_Livro_Fin
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210001
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE Stp_Gerar_Livro_Fin (
   P_DTINI        IN     DATE,
   P_DTFIM        IN     DATE,
   P_CODEMP       IN     SMALLINT,
   P_CODEMPDEST   IN     SMALLINT,
   P_CONT            OUT INT)
AS
   P_COUNT            INT;
   P_FRETERENEG       TSIPAR.LOGICO%TYPE;
   P_DIFICMS          TGFLIV.DIFICMS%TYPE;
   P_ALIQ             TGFICM.ALIQUOTA%TYPE;
   P_CODEMPORIG_ANT   TGFEMP.CODEMP%TYPE;
   P_CODPARC_ANT      TGFPAR.CODPARC%TYPE;
   P_UFORIGEM         TSIUFS.UF%TYPE;
   P_UFDESTINO        TSIUFS.UF%TYPE;
   P_CODCFO           TGFCFO.CODCFO%TYPE;
   P_CODCFO_ANT       TGFCFO.CODCFO%TYPE;
   P_CODUFEMP         TSIUFS.CODUF%TYPE;
   P_COMPENSAIPI      TGFEMP.COMPIPI%TYPE;
   P_QTDLIV           INT;
   P_CODCIDINICTE_ANT        TSICID.CODCID%TYPE;
   P_CODCIDFIMCTE_ANT        TSICID.CODCID%TYPE;

   CURSOR cLivro
   IS
        SELECT *
          FROM (  SELECT MIN (FIN.NUFIN) AS NUNOTA,
                         TRUNC (FIN.DTENTSAI) AS DTFILT,
                         FIN.DTNEG AS DTDOC,
                         TRUNC(CASE
                                  WHEN TPO.ATUALLIVFIS = 'E' THEN FIN.DTENTSAI
                                  ELSE FIN.DTNEG
                               END)
                            AS DHMOV,
                         TPO.ATUALLIVFIS,
                         UP.UF UFPARC,
                         CP.UF CODUFPARC,
                         FIN.NUMNOTA,
                         CASE
                            WHEN TRIM (FIN.SERIENOTA) IS NOT NULL
                            THEN
                               FIN.SERIENOTA
                            WHEN GE.GRAVARSERIENOTA = 'N'
                            THEN
                               'U'
                            ELSE
                               ' '
                         END
                            AS SERIENOTA,
                         FIN.CODEMP AS CODEMPORIG,
                         CASE
                            WHEN P_CODEMPDEST = 0 THEN FIN.CODEMP
                            ELSE P_CODEMPDEST
                         END
                            AS CODEMP,
                         PAR.CODPARC,
                         NVL(FIN.CODCFO, 0) AS CODCFO,
                         NVL(TPO.CODCFO_ENTRADA, 0) AS CODCFO_ENTRADA,
                         NVL(TPO.CODCFO_ENTRADA_FORA, 0) AS CODCFO_ENTRADA_FORA,
                         NVL(TPO.CODCFO_SAIDA, 0) AS CODCFO_SAIDA,
                         NVL(TPO.CODCFO_SAIDA_FORA, 0) AS CODCFO_SAIDA_FORA,
                         TIT.ESPDOC,
                         TPO.CODMODDOC,
                         SUM (FIN.VLRDESDOB) AS VLRCTB,
                         CASE
                            WHEN EMP.SIMPLES = 'S' AND EMP.CODREGTRIB = 1
                            THEN
                               CASE
                                  WHEN (TPO.ATUALLIVFIS = 'S'
                                        OR (TPO.ATUALLIVFIS = 'E'
                                            AND GE.TIPICMSTOPENTSIMNAC = 'N'))
                                  THEN
                                     '3'
                                  ELSE
                                     TPO.TIPICMS
                               END
                            ELSE
                               TPO.TIPICMS
                         END
                            AS TIPICMS,
                         ROUND (SUM (FIN.BASEICMS), 2) AS BASEICMS,
                         ROUND (
                            SUM (FIN.BASEICMS * FIN.ALIQICMS / 100) / SUM(CASE
                                     WHEN FIN.BASEICMS <> 0 THEN FIN.BASEICMS
                                     ELSE 1
                                  END)
                            * 100,
                            2)
                            AS ALIQICMS,
                         ROUND (SUM (FIN.BASEICMS * FIN.ALIQICMS / 100), 2)
                            AS VLRICMS,
                         0.00 AS ISENTASICMS,
                         0.00 AS OUTRASICMS,
                         TPO.TIPIPI,
                         CASE WHEN TPO.ATUALLIVFIS = 'E' THEN 'E' ELSE 'S' END
                            AS ENTSAI,
                         CASE
                            WHEN TPO.CODMODDOC  IN (57,67) THEN FIN.CHAVECTE
                            ELSE NULL
                         END
                            AS CHAVECTE,
                         CASE
                            WHEN TPO.CODMODDOC  IN (57,67) THEN FIN.CHAVECTEREF
                            ELSE NULL
                         END
                            AS CHAVECTEREF,
                         PAR.CLASSIFICMS,
                         TPO.CALCDIFICMS,
                         CASE WHEN TPO.CODMODDOC IN (8, 57, 67) THEN FIN.CODCIDINICTE ELSE NULL END CODCIDINICTE,
                         CASE WHEN TPO.CODMODDOC IN (8, 57, 67) THEN FIN.CODCIDFIMCTE ELSE NULL END CODCIDFIMCTE,
                         PAR.CODCID AS CODCIDPARC,
                         FIN.CODTRIB
                    FROM TGFFIN FIN,
                         TGFTOP TPO,
                         TGFPAR PAR,
                         TSICID CP,
                         TGFTIT TIT,
                         TSIUFS UP,
                         TGFEMP GE,
                         TSIEMP EMP
                   WHERE (    FIN.DTENTSAI IS NOT NULL
                          AND TRUNC (FIN.DTENTSAI) >= P_DTINI
                          AND TRUNC (FIN.DTENTSAI) < P_DTFIM)
                         AND FIN.CODEMP = GE.CODEMP
                         AND GE.CODEMP = EMP.CODEMP
                         AND GE.GERARLIVROS = 'S'
                         AND (P_CODEMP = 0 OR GE.CODEMP = P_CODEMP)
                         AND ( ( (FIN.ORIGEM = 'F')
                                AND (FIN.NURENEG IS NULL
                                     OR EXISTS
                                          (SELECT 1
                                             FROM TGFREN REN
                                            WHERE     REN.NUFIN = FIN.NUFIN
                                                  AND REN.NURENEGORIG = 0
                                                  AND FIN.RECDESP = 0)))
                              OR (    (P_FRETERENEG = 'S')
                                  AND (FIN.RECDESP <> 0)
                                  AND ( (FIN.DESDOBDUPL = 'F')
                                       OR EXISTS (SELECT 1
                                                    FROM TGFFNF
                                                   WHERE NUFIN = FIN.NUFIN)
                                       OR (TPO.CODMODDOC IN (57,67) AND TPO.TIPMOV = 'I')))
                              OR ( (P_FRETERENEG = 'N')
                                  AND ( (FIN.DESDOBDUPL = 'F')
                                       OR EXISTS (SELECT 1
                                                    FROM TGFFNF
                                                   WHERE NUFIN = FIN.NUFIN))
                                  AND ( (FIN.RECDESP = 0
                                         AND FIN.NURENEG IS NOT NULL
                                         AND NOT EXISTS
                                               (SELECT 1
                                                  FROM TGFREN REN
                                                 WHERE REN.NUFIN = FIN.NUFIN
                                                       AND NURENEGORIG <> 0))
                                       OR (FIN.RECDESP <> 0
                                           AND FIN.NURENEG IS NULL))))
                         AND FIN.CODTIPOPER = TPO.CODTIPOPER
                         AND FIN.DHTIPOPER = TPO.DHALTER
                         AND TPO.ATUALLIVFIS <> 'N'
                         AND TPO.ATUALLIVFIS <> 'A'
                         AND FIN.CODPARC = PAR.CODPARC
                         AND CASE WHEN TPO.CODMODDOC IN (8, 57, 67) THEN NVL(FIN.CODCIDINICTE, PAR.CODCID) ELSE PAR.CODCID END = CP.CODCID
                         AND CP.UF = UP.CODUF
                         AND FIN.CODTIPTIT = TIT.CODTIPTIT
                         AND FIN.PROVISAO = 'N'
                         AND NOT EXISTS (SELECT 1
                                         FROM TGFIXN IXN
                                         WHERE IXN.NUFIN = FIN.NUFIN
                                            AND NVL(IXN.SITUACAOCTE, '') = 'C')                         
                GROUP BY FIN.DTENTSAI,
                         FIN.DTNEG,
                         TPO.ATUALLIVFIS,
                         UP.UF,
                         CP.UF,
                         FIN.NUMNOTA,
                         CASE
                            WHEN TRIM (FIN.SERIENOTA) IS NOT NULL
                            THEN
                               FIN.SERIENOTA
                            WHEN GE.GRAVARSERIENOTA = 'N'
                            THEN
                               'U'
                            ELSE
                               ' '
                         END,
                         FIN.CODEMP,
                         PAR.CODPARC,
                         NVL(FIN.CODCFO, 0),
                         NVL(TPO.CODCFO_ENTRADA, 0),
                         NVL(TPO.CODCFO_ENTRADA_FORA, 0),
                         NVL(TPO.CODCFO_SAIDA, 0),
                         NVL(TPO.CODCFO_SAIDA_FORA, 0),
                         TIT.ESPDOC,
                         TPO.CODMODDOC,
                         CASE
                            WHEN EMP.SIMPLES = 'S' AND EMP.CODREGTRIB = 1
                            THEN
                               CASE
                                  WHEN (TPO.ATUALLIVFIS = 'S'
                                        OR (TPO.ATUALLIVFIS = 'E'
                                            AND GE.TIPICMSTOPENTSIMNAC = 'N'))
                                  THEN
                                     '3'
                                  ELSE
                                     TPO.TIPICMS
                               END
                            ELSE
                               TPO.TIPICMS
                         END,
                         TPO.TIPIPI,
                         CASE
                            WHEN TPO.CODMODDOC IN (57,67) THEN FIN.CHAVECTE
                            ELSE NULL
                         END,
                         CASE
                            WHEN TPO.CODMODDOC IN (57,67) THEN FIN.CHAVECTEREF
                            ELSE NULL
                         END,
                         PAR.CLASSIFICMS,
                         TPO.CALCDIFICMS,
                         CASE WHEN TPO.CODMODDOC IN (8, 57, 67) THEN FIN.CODCIDINICTE ELSE NULL END,
                         CASE WHEN TPO.CODMODDOC IN (8, 57, 67) THEN FIN.CODCIDFIMCTE ELSE NULL END,
                         PAR.CODCID,
                         FIN.CODTRIB
                UNION ALL
                  SELECT MIN (FIN.NUFIN) AS NUNOTA,
                         TRUNC (FIN.DTNEG) AS DTFILT,
                         FIN.DTNEG AS DTDOC,
                         TRUNC (FIN.DTNEG) AS DHMOV,
                         TPO.ATUALLIVFIS,
                         UP.UF UFPARC,
                         CP.UF CODUFPARC,
                         FIN.NUMNOTA,
                         CASE
                            WHEN TRIM (FIN.SERIENOTA) IS NOT NULL
                            THEN
                               FIN.SERIENOTA
                            WHEN GE.GRAVARSERIENOTA = 'N'
                            THEN
                               'U'
                            ELSE
                               ' '
                         END
                            AS SERIENOTA,
                         FIN.CODEMP AS CODEMPORIG,
                         CASE
                            WHEN P_CODEMPDEST = 0 THEN FIN.CODEMP
                            ELSE P_CODEMPDEST
                         END
                            AS CODEMP,
                         PAR.CODPARC,
                         NVL(FIN.CODCFO, 0) AS CODCFO,
                         NVL(TPO.CODCFO_ENTRADA, 0) AS CODCFO_ENTRADA,
                         NVL(TPO.CODCFO_ENTRADA_FORA, 0) AS CODCFO_ENTRADA_FORA,
                         NVL(TPO.CODCFO_SAIDA, 0) AS CODCFO_SAIDA,
                         NVL(TPO.CODCFO_SAIDA_FORA, 0) AS CODCFO_SAIDA_FORA,
                         TIT.ESPDOC,
                         TPO.CODMODDOC,
                         SUM (FIN.VLRDESDOB) AS VLRCTB,
                         CASE
                            WHEN EMP.SIMPLES = 'S' AND EMP.CODREGTRIB = 1
                            THEN
                               CASE
                                  WHEN (TPO.ATUALLIVFIS = 'S'
                                        OR (TPO.ATUALLIVFIS = 'E'
                                            AND GE.TIPICMSTOPENTSIMNAC = 'N'))
                                  THEN
                                     '3'
                                  ELSE
                                     TPO.TIPICMS
                               END
                            ELSE
                               TPO.TIPICMS
                         END
                            AS TIPICMS,
                         ROUND (SUM (FIN.BASEICMS), 2) AS BASEICMS,
                         ROUND (
                            SUM (FIN.BASEICMS * FIN.ALIQICMS / 100) / SUM(CASE
                                     WHEN FIN.BASEICMS <> 0 THEN FIN.BASEICMS
                                     ELSE 1
                                  END)
                            * 100,
                            2)
                            AS ALIQICMS,
                         ROUND (SUM (FIN.BASEICMS * FIN.ALIQICMS / 100), 2)
                            AS VLRICMS,
                         0.00 AS ISENTASICMS,
                         0.00 AS OUTRASICMS,
                         TPO.TIPIPI,
                         CASE WHEN TPO.ATUALLIVFIS = 'E' THEN 'E' ELSE 'S' END
                            AS ENTSAI,
                         CASE
                            WHEN TPO.CODMODDOC  IN (57,67) THEN FIN.CHAVECTE
                            ELSE NULL
                         END
                            AS CHAVECTE,
                         CASE
                            WHEN TPO.CODMODDOC  IN (57,67) THEN FIN.CHAVECTEREF
                            ELSE NULL
                         END
                            AS CHAVECTEREF,
                         PAR.CLASSIFICMS,
                         TPO.CALCDIFICMS,
                         CASE WHEN TPO.CODMODDOC IN (8, 57, 67) THEN FIN.CODCIDINICTE ELSE NULL END CODCIDINICTE,
                         CASE WHEN TPO.CODMODDOC IN (8, 57, 67) THEN FIN.CODCIDFIMCTE ELSE NULL END CODCIDFIMCTE,
                         PAR.CODCID AS CODCIDPARC,
                         FIN.CODTRIB
                    FROM TGFFIN FIN,
                         TGFTOP TPO,
                         TGFPAR PAR,
                         TSICID CP,
                         TGFTIT TIT,
                         TSIUFS UP,
                         TGFEMP GE,
                         TSIEMP EMP
                   WHERE (    FIN.DTENTSAI IS NULL
                          AND TRUNC (FIN.DTNEG) >= P_DTINI
                          AND TRUNC (FIN.DTNEG) < P_DTFIM)
                         AND FIN.CODEMP = GE.CODEMP
                         AND GE.CODEMP = EMP.CODEMP
                         AND GE.GERARLIVROS = 'S'
                         AND (P_CODEMP = 0 OR GE.CODEMP = P_CODEMP)
                         AND ( ( (FIN.ORIGEM = 'F')
                                AND (FIN.NURENEG IS NULL
                                     OR EXISTS
                                          (SELECT 1
                                             FROM TGFREN REN
                                            WHERE     REN.NUFIN = FIN.NUFIN
                                                  AND REN.NURENEGORIG = 0
                                                  AND FIN.RECDESP = 0)))
                              OR (    (P_FRETERENEG = 'S')
                                  AND (FIN.RECDESP <> 0)
                                  AND ( (FIN.DESDOBDUPL = 'F')
                                       OR EXISTS (SELECT 1
                                                    FROM TGFFNF
                                                   WHERE NUFIN = FIN.NUFIN)
                                       OR (TPO.CODMODDOC  IN (57,67) AND TPO.TIPMOV = 'I')))
                              OR ( (P_FRETERENEG = 'N')
                                  AND ( (FIN.DESDOBDUPL = 'F')
                                       OR EXISTS (SELECT 1
                                                    FROM TGFFNF
                                                   WHERE NUFIN = FIN.NUFIN))
                                  AND ( (FIN.RECDESP = 0
                                         AND FIN.NURENEG IS NOT NULL
                                         AND NOT EXISTS
                                               (SELECT 1
                                                  FROM TGFREN REN
                                                 WHERE REN.NUFIN = FIN.NUFIN
                                                       AND NURENEGORIG <> 0))
                                       OR (FIN.RECDESP <> 0
                                           AND FIN.NURENEG IS NULL))))
                         AND FIN.CODTIPOPER = TPO.CODTIPOPER
                         AND FIN.DHTIPOPER = TPO.DHALTER
                         AND TPO.ATUALLIVFIS <> 'N'
                         AND TPO.ATUALLIVFIS <> 'A'
                         AND FIN.CODPARC = PAR.CODPARC
                         AND CASE WHEN TPO.CODMODDOC IN (8, 57, 67) THEN NVL(FIN.CODCIDINICTE, PAR.CODCID) ELSE PAR.CODCID END = CP.CODCID
                         AND CP.UF = UP.CODUF
                         AND FIN.CODTIPTIT = TIT.CODTIPTIT
                         AND FIN.PROVISAO = 'N'
                         AND NOT EXISTS (SELECT 1
                                         FROM TGFIXN IXN
                                         WHERE IXN.NUFIN = FIN.NUFIN
                                            AND NVL(IXN.SITUACAOCTE, '') = 'C')
                GROUP BY FIN.DTENTSAI,
                         FIN.DTNEG,
                         TPO.ATUALLIVFIS,
                         UP.UF,
                         CP.UF,
                         FIN.NUMNOTA,
                         CASE
                            WHEN TRIM (FIN.SERIENOTA) IS NOT NULL
                            THEN
                               FIN.SERIENOTA
                            WHEN GE.GRAVARSERIENOTA = 'N'
                            THEN
                               'U'
                            ELSE
                               ' '
                         END,
                         FIN.CODEMP,
                         PAR.CODPARC,
                         NVL(FIN.CODCFO, 0),
                         NVL(TPO.CODCFO_ENTRADA, 0),
                         NVL(TPO.CODCFO_ENTRADA_FORA, 0),
                         NVL(TPO.CODCFO_SAIDA, 0),
                         NVL(TPO.CODCFO_SAIDA_FORA, 0),
                         TIT.ESPDOC,
                         TPO.CODMODDOC,
                         CASE
                            WHEN EMP.SIMPLES = 'S' AND EMP.CODREGTRIB = 1
                            THEN
                               CASE
                                  WHEN (TPO.ATUALLIVFIS = 'S'
                                        OR (TPO.ATUALLIVFIS = 'E'
                                            AND GE.TIPICMSTOPENTSIMNAC = 'N'))
                                  THEN
                                     '3'
                                  ELSE
                                     TPO.TIPICMS
                               END
                            ELSE
                               TPO.TIPICMS
                         END,
                         TPO.TIPIPI,
                         CASE
                            WHEN TPO.CODMODDOC IN (57,67) THEN FIN.CHAVECTE
                            ELSE NULL
                         END,
                         CASE
                            WHEN TPO.CODMODDOC IN (57,67) THEN FIN.CHAVECTEREF
                            ELSE NULL
                         END,
                         PAR.CLASSIFICMS,
                         TPO.CALCDIFICMS,
                         CASE WHEN TPO.CODMODDOC IN (8, 57, 67) THEN FIN.CODCIDINICTE ELSE NULL END,
                         CASE WHEN TPO.CODMODDOC IN (8, 57, 67) THEN FIN.CODCIDFIMCTE ELSE NULL END,
                         PAR.CODCID,
                         FIN.CODTRIB) LIV
      ORDER BY LIV.CODEMPORIG;
BEGIN
   SELECT MIN (LOGICO)
     INTO P_FRETERENEG
     FROM TSIPAR
    WHERE CHAVE = 'LIVFRETERENEG';

   SELECT COMPIPI
     INTO P_COMPENSAIPI
     FROM TGFEMP
    WHERE CODEMP = P_CODEMP AND GERARLIVROS = 'S';

   IF P_FRETERENEG IS NULL
   THEN
      P_FRETERENEG := 'N';
   END IF;

   P_CONT := 0;

   DELETE FROM TGFLIV
         WHERE     DTFILT >= P_DTINI
               AND DTFILT < P_DTFIM
               AND (P_CODEMP = 0 OR CODEMPORIG = P_CODEMP)
               AND ORIGEM = 'F'
               AND DIGITADO <> 'S';

   P_CODEMPORIG_ANT := 0;
   P_CODPARC_ANT := 0;
   P_CODCFO_ANT := 0;
   P_CODCIDINICTE_ANT := 0;
   P_CODCIDFIMCTE_ANT := 0;
    
   FOR P_LIVRO IN cLivro
   LOOP
      IF P_CODEMPORIG_ANT <> P_LIVRO.CODEMPORIG OR P_CODPARC_ANT <> P_LIVRO.CODPARC OR P_CODCFO_ANT <> P_LIVRO.CODCFO OR P_CODCIDFIMCTE_ANT <> P_LIVRO.CODCIDFIMCTE OR P_CODCIDINICTE_ANT <> P_LIVRO.CODCIDINICTE THEN
         SELECT 
                CASE WHEN P_LIVRO.CODCIDINICTE IS NOT NULL THEN P_LIVRO.UFPARC
                   WHEN P_LIVRO.ATUALLIVFIS = 'E' THEN P_LIVRO.UFPARC
                   ELSE UE.UF
                END AS UFORIGEM,
                CASE WHEN P_LIVRO.CODCIDFIMCTE IS NOT NULL THEN UE.UF
                    WHEN P_LIVRO.ATUALLIVFIS = 'E' THEN UE.UF 
                    ELSE P_LIVRO.UFPARC
                END AS UFDESTINO,
                CASE
                   WHEN P_LIVRO.CODCFO <> 0
                   THEN
                      P_LIVRO.CODCFO
                   WHEN P_LIVRO.ATUALLIVFIS = 'E'
                   THEN
                      CASE
                         WHEN CE.UF = P_LIVRO.CODUFPARC
                         THEN
                            P_LIVRO.CODCFO_ENTRADA
                         ELSE
                            P_LIVRO.CODCFO_ENTRADA_FORA
                      END
                   ELSE
                      CASE
                         WHEN CE.UF = P_LIVRO.CODUFPARC
                         THEN
                            P_LIVRO.CODCFO_SAIDA
                         ELSE
                            P_LIVRO.CODCFO_SAIDA_FORA
                      END
                END
                   AS CODCFO,
                CE.UF AS CODUFEMP,
                CASE WHEN P_LIVRO.CODMODDOC NOT IN (8, 57, 67) THEN NULL WHEN P_LIVRO.CODCIDINICTE IS NOT NULL THEN P_LIVRO.CODCIDINICTE WHEN P_LIVRO.ATUALLIVFIS = 'E' THEN P_LIVRO.CODCIDPARC ELSE EMP.CODCID END,
                CASE WHEN P_LIVRO.CODMODDOC NOT IN (8, 57, 67) THEN NULL WHEN P_LIVRO.CODCIDFIMCTE IS NOT NULL THEN P_LIVRO.CODCIDFIMCTE WHEN P_LIVRO.ATUALLIVFIS = 'E' THEN EMP.CODCID  ELSE P_LIVRO.CODCIDPARC END
           INTO P_UFORIGEM,
                P_UFDESTINO,
                P_CODCFO,
                P_CODUFEMP,
                P_CODCIDINICTE_ANT,
                P_CODCIDFIMCTE_ANT
           FROM TSIEMP EMP, TSICID CE, TSIUFS UE
          WHERE     EMP.CODEMP = P_LIVRO.CODEMPORIG
                AND CASE WHEN P_LIVRO.CODCIDFIMCTE IS NOT NULL THEN P_LIVRO.CODCIDFIMCTE ELSE EMP.CODCID END = CE.CODCID
                AND CE.UF = UE.CODUF;

         P_CODEMPORIG_ANT := P_LIVRO.CODEMPORIG;
         P_CODPARC_ANT := P_LIVRO.CODPARC;
         P_CODCFO_ANT := P_LIVRO.CODCFO;
      END IF;

      P_CONT := P_CONT + 1;

      IF (P_LIVRO.ENTSAI = 'E') AND (P_CODCFO > 5000) AND (P_CODCFO < 7000)
      THEN
         P_CODCFO := P_CODCFO - 4000;
      ELSIF     (P_LIVRO.ENTSAI = 'S')
            AND (P_CODCFO > 1000)
            AND (P_CODCFO < 3000)
      THEN
         P_CODCFO := P_CODCFO + 4000;
      END IF;

      IF P_LIVRO.CODMODDOC <= 1
      THEN
         IF    P_CODCFO BETWEEN 140 AND 145
            OR P_CODCFO BETWEEN 1250 AND 1299
            OR P_CODCFO BETWEEN 240 AND 245
            OR P_CODCFO BETWEEN 2250 AND 2299
         THEN
            P_LIVRO.CODMODDOC := 06;
         ELSIF    P_CODCFO BETWEEN 150 AND 156
               OR P_CODCFO BETWEEN 1300 AND 1349
               OR P_CODCFO BETWEEN 250 AND 256
               OR P_CODCFO BETWEEN 2300 AND 2349
         THEN
            P_LIVRO.CODMODDOC := 22;
         ELSIF    P_CODCFO BETWEEN 160 AND 166
               OR P_CODCFO BETWEEN 1350 AND 1400
               OR P_CODCFO BETWEEN 260 AND 266
               OR P_CODCFO BETWEEN 2350 AND 2400
         THEN
            P_LIVRO.CODMODDOC := 08;
         ELSE
            P_LIVRO.CODMODDOC := 1;
         END IF;
      END IF;

      
      P_DIFICMS := 0;

      IF     P_LIVRO.CALCDIFICMS = 'S'
         AND P_UFORIGEM <> P_UFDESTINO
         AND P_LIVRO.BASEICMS > 0
      THEN
         SELECT COUNT ( * )
           INTO P_COUNT
           FROM TGFCFO
          WHERE CODCFO = P_CODCFO AND CALCDIFICMS = 'S';

         IF P_COUNT > 0
         THEN
            SELECT COUNT ( * ), MIN (I.ALIQUOTA)
              INTO P_COUNT, P_ALIQ
              FROM TGFICM I
             WHERE     I.UFORIG = P_CODUFEMP
                   AND I.UFDEST = P_CODUFEMP
                   AND I.TIPRESTRICAO = 'S'
                   AND I.TIPRESTRICAO2 = 'S';

            IF P_COUNT > 0
            THEN
               P_DIFICMS :=
                  ROUND (
                     (P_LIVRO.BASEICMS * P_ALIQ / 100) - P_LIVRO.VLRICMS,
                     2);

               IF P_DIFICMS < 0
               THEN
                  P_DIFICMS := 0;
               END IF;
            END IF;
         END IF;
      END IF;
      
      
      IF P_LIVRO.TIPICMS = 2
      THEN
         P_LIVRO.BASEICMS := 0;
         P_LIVRO.ALIQICMS := 0;
         P_LIVRO.VLRICMS := 0;
         P_LIVRO.ISENTASICMS := P_LIVRO.VLRCTB;
      ELSIF P_LIVRO.TIPICMS = 3
      THEN
         P_LIVRO.BASEICMS := 0;
         P_LIVRO.ALIQICMS := 0;
         P_LIVRO.VLRICMS := 0;
         P_LIVRO.OUTRASICMS := P_LIVRO.VLRCTB;
      ELSIF (P_LIVRO.TIPICMS = 4)
            OR ( (P_LIVRO.TIPICMS = 1) AND (P_LIVRO.CLASSIFICMS = 'I'))
      THEN
         P_LIVRO.ISENTASICMS := P_LIVRO.VLRCTB - P_LIVRO.BASEICMS;

         IF P_LIVRO.ISENTASICMS <> 0
         THEN
            P_LIVRO.TIPICMS := 2;
         ELSE
            P_LIVRO.TIPICMS := 1;
         END IF;
      ELSE
         P_LIVRO.OUTRASICMS := P_LIVRO.VLRCTB - P_LIVRO.BASEICMS;

         IF P_LIVRO.OUTRASICMS <> 0
         THEN
            P_LIVRO.TIPICMS := 3;
         ELSE
            P_LIVRO.TIPICMS := 1;
         END IF;
      END IF;

      SELECT COUNT(*) INTO P_QTDLIV
      FROM TGFLIV L 
      WHERE L.SEQUENCIA = 1 
            AND L.ORIGEM = 'F' 
            AND L.NUNOTA = P_LIVRO.NUNOTA
            AND L.CODEMP = P_LIVRO.CODEMP;      

      IF P_QTDLIV = 0 THEN
          INSERT INTO TGFLIV (ORIGEM,
                              NUNOTA,
                              SEQUENCIA,
                              DTFILT,
                              DTDOC,
                              DHMOV,
                              UFORIGEM,
                              UFDESTINO,
                              NUMNOTA,
                              SERIENOTA,
                              CODEMPORIG,
                              CODEMP,
                              EMPPARC,
                              CODPARC,
                              CODCFO,
                              ESPDOC,
                              CODMODDOC,
                              CODTRIB,
                              VLRCTB,
                              TIPICMS,
                              BASEICMS,
                              ALIQICMS,
                              VLRICMS,
                              ISENTASICMS,
                              OUTRASICMS,
                              TIPIPI,
                              BASEIPI,
                              ALIQIPI,
                              VLRIPI,
                              ISENTASIPI,
                              OUTRASIPI,
                              BASERETENCAO,
                              BASERETENCAOSEMRED,
                              ICMSRETENCAO,
                              VLRCTBTARE,
                              BASEICMSTARE,
                              VLRICMSTARE,
                              DIFICMS,
                              ENTSAI,
                              DIGITADO,
                              CHAVECTE,
                              CHAVECTEREF,
                              VLRICMSDIFALDEST,
                              VLRICMSDIFALREM,
                              VLRICMSFCP,
                              CODCIDINICTE,
                              CODCIDFIMCTE)
              VALUES ('F',
                      P_LIVRO.NUNOTA,
                      1,
                      P_LIVRO.DTFILT,
                      P_LIVRO.DTDOC,
                      P_LIVRO.DHMOV,
                      P_UFORIGEM,
                      P_UFDESTINO,
                      P_LIVRO.NUMNOTA,
                      P_LIVRO.SERIENOTA,
                      P_LIVRO.CODEMPORIG,
                      P_LIVRO.CODEMP,
                      'P',
                      P_LIVRO.CODPARC,
                      P_CODCFO,
                      P_LIVRO.ESPDOC,
                      P_LIVRO.CODMODDOC,
                      P_LIVRO.CODTRIB,
                      P_LIVRO.VLRCTB,
                      P_LIVRO.TIPICMS,
                      P_LIVRO.BASEICMS,
                      P_LIVRO.ALIQICMS,
                      P_LIVRO.VLRICMS,
                      P_LIVRO.ISENTASICMS,
                      P_LIVRO.OUTRASICMS,
                      P_LIVRO.TIPIPI,
                      0,
                      0,
                      0,
                      CASE
                         WHEN P_COMPENSAIPI = 'S' AND P_LIVRO.TIPIPI = 2
                         THEN
                            P_LIVRO.VLRCTB
                         ELSE
                            0
                      END,
                      CASE
                         WHEN P_COMPENSAIPI = 'S' AND P_LIVRO.TIPIPI = 3
                         THEN
                            P_LIVRO.VLRCTB
                         ELSE
                            0
                      END,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      P_DIFICMS,
                      P_LIVRO.ENTSAI,
                      'N',
                      P_LIVRO.CHAVECTE,
                      P_LIVRO.CHAVECTEREF,
                      0,
                      0,
                      0,
                      P_CODCIDINICTE_ANT,
                      P_CODCIDFIMCTE_ANT);
      ELSE
        P_CONT := P_CONT - 1;
      END IF;
   END LOOP;
END;
/
 
 
 
/*
Requer    : 4210000
Conexao   : ORCL
Data      : 06/03/2018 17:09:57
Num.Script: 49433-0-1000
Nro. O.S. : 1121756
Nome      : INSERE - THOOBJ - 4943200
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE STP_GERAR_LIVRO_FIN
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210001
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'STP_GERAR_LIVRO_FIN' NOMEOBJ, 49432 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, 'e626a6add11771d75b0d62c83e399efe' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'STP_GERAR_LIVRO_FIN' and THO.hashcode = 'e626a6add11771d75b0d62c83e399efe')
/
 
 
 
/*
Requer    : 4210000
Conexao   : ORCL
Data      : 26/02/2018 16:21:59
Num.Script: 50647-0-0
Nro. O.S. : 1137361
Nome      : Cria - TGFREM HRINICIALREM
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: HRINICIALREM
TipoObjeto: COLUMN
NomeTabela: TGFREM
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210001
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFREM ADD HRINICIALREM DECIMAL(5, 0)
/
 
 
 
/*
Requer    : 4210000
Conexao   : ORCL
Data      : 26/02/2018 16:21:59
Num.Script: 50648-0-0
Nro. O.S. : 1137361
Nome      : Cria - TGFREM HRFINALREM
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: HRFINALREM
TipoObjeto: COLUMN
NomeTabela: TGFREM
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210001
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFREM ADD HRFINALREM DECIMAL(5, 0)
/
 
 
 
/*
Requer    : 4210000
Conexao   : ORCL
Data      : 26/02/2018 16:21:59
Num.Script: 50649-0-0
Nro. O.S. : 1137361
Nome      : Cria - TSICTA CODCTABAIXA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: CODCTABAIXA
TipoObjeto: COLUMN
NomeTabela: TSICTA
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210001
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TSICTA ADD CODCTABAIXA DECIMAL(5, 0)
/
 
 
 
/*
Requer    : 4210000
Conexao   : ORCL
Data      : 26/02/2018 16:21:59
Num.Script: 50650-0-0
Nro. O.S. : 1137361
Nome      : Cria - FK_TSICTA_CODCTABAIXA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - FK_TSICTA_CODCTABAIXA
NomeObjeto: FK_TSICTA_CODCTABAIXA
TipoObjeto: FOREIGN KEY
NomeTabela: TSICTA
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210001
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TSICTA ADD CONSTRAINT FK_TSICTA_CODCTABAIXA FOREIGN KEY (CODCTABAIXA) REFERENCES TSICTA (CODCTABCOINT)
/
 
 
 
/*
Requer    : 4210000
Conexao   : ORCL
Data      : 26/02/2018 16:21:59
Num.Script: 50666-0-0
Nro. O.S. : 1137361
Nome      : Alera - VARIAVEIS_PKG
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alera - VARIAVEIS_PKG
NomeObjeto: VARIAVEIS_PKG
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SEMPRE
Ocorrencia: 4210001
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PACKAGE VARIAVEIS_PKG AS
   V_DHCARGAPKG                    DATE := NULL;
   V_DHPARAMETROS                  DATE := SYSDATE;
   V_TEMPRODUTOSEMFAMILIA          CHAR( 1 ) := 'N';
   V_INSERCAOAUTOMATICA            CHAR( 1 ) := 'N';
   V_CONSIDERARIMPOSTORETIDONOTA   CHAR( 1 ) := 'N';
   V_CUSTOPOREMPRESA               CHAR( 1 ) := 'N';
   V_CUSTOPORLOCAL                 CHAR( 1 ) := 'N';
   V_CUSTOPORCONTROLE              CHAR( 1 ) := 'N';
   V_SOMACUSTOMEDIODASMPSNOPA      CHAR( 1 ) := 'N';
   V_FATURANDOESTOQUECONFERIDO     CHAR(1) := 'N';   
   V_DECIMAISPARACUSTO             INTEGER := 2;
   V_EMPRESADESMEMBRARCUSTO        INTEGER := 0;
   V_DTINICIOCONTEST               DATE := ADD_MONTHS( SYSDATE, -1200 );
   V_ATUALIZANDO                   BOOLEAN := FALSE;
   V_TEMOTICAS                     CHAR( 1 ) := 'N';
   CODBARRA_EST                    CHAR( 3 ) := ' ';
   V_ALTERADO_PELA_CAB             BOOLEAN := FALSE;
   V_VALEST_BLOQWMS_FAT            CHAR( 1 ) := 'S';
   V_DTLIMALTERCUSTO               DATE := TRUNC( SYSDATE - 90 );
   V_DLT_REG_COMPENSACAO           BOOLEAN := FALSE;
   V_DLT_MOV_COMISSAO              BOOLEAN := TRUE;
   V_DLT_PROD                      BOOLEAN := FALSE;
   V_GERANDO_REMESSA               BOOLEAN := FALSE;
   V_IPINACOMPRASEMDESCONTO        CHAR( 1 ) := 'N';
   V_IPINAVENDASEMDESCONTO         CHAR( 1 ) := 'N';
   V_SOMARSERVICONOTA              CHAR( 1 ) := 'S';
   V_CODOBSGARANTIDO               INTEGER;
   V_CODIMPGARANTIDO               INTEGER;
   V_TEMFUNRURAL                   CHAR( 1 );
   V_TOPSREQCON                    VARCHAR2( 400 );
   V_NATVA                         INTEGER;
   V_NATVT                         INTEGER;
   V_FORMULAFRETE_IRF              VARCHAR2( 4000 );
   V_VLRMINRETENCAOIR              FLOAT;
   V_TOPPISREDAQUIS                INTEGER;
   V_CODTIPTIT_TROCA               NUMBER(5) := NULL; 
   V_DESMEMBRANDOBEM               CHAR(1) := 'N';
   V_USACODVOLPARC                 CHAR( 1 ) := 'N';
   V_PROCPROVFIN_BATCH             INTEGER := 0;  
   V_FATURARESTWMS                 CHAR(1);
   V_DISTJDCONF                    BOOLEAN := FALSE;
   V_RATDESCSEMIMP                 CHAR(1) := 'N';
   V_EDITMPSOMAEXT                 CHAR(1) := 'N';
   V_TIPCANCELATEF                 CHAR(1) := NULL;
   V_PROCESSO_ATUAL_CUSTO          VARCHAR2(255) := NULL;
   -- VERIFICA SE O CLIENTE UTILIZA DETERMINADA FUNCIONALIDADE
   V_UTILIZA_CERTIFIC               CHAR( 1 );
   V_UTILIZA_TGAMOV                 CHAR( 1 );
   V_UTILIZA_GRANDES_CARGAS         CHAR( 1 );
   V_UTILIZA_ESTTERC                CHAR( 1 );
   V_UTILIZA_METAS                  CHAR( 1 );
   V_UTILIZA_FLEX                   CHAR( 1 );
   V_UTILIZA_INDENIZ                CHAR( 1 );
   V_UTILIZA_TGFCPP                 CHAR( 1 );
   V_UTILIZA_RASTEST                CHAR( 1 );
   V_UTILIZA_TCIBEM                 CHAR( 1 );
   V_UTILIZA_VERIFCORTE             CHAR( 1 );
   V_UTILIZA_DAV                    CHAR( 1 );
   V_UTILIZA_TRANSG                 CHAR( 1 );
   V_UTILIZA_HCRUZADAS              CHAR( 1 );
   V_USA_CONTA_BAIXA              CHAR( 1 );
   
   V_IGNORE_OCORR_BAIXA            BOOLEAN := FALSE;

   V_NUNOTA_LIV_PERMITEALTERAR        NUMBER( 10 );

   V_DBHASHCODE                    VARCHAR2( 400 );

   TYPE TYPERECCUSTO IS RECORD(
      NUNOTA        NUMBER( 10 )
    , SEQUENCIA     NUMBER( 5 )
    , DTBASE        DATE
    , CODEMP        NUMBER( 5 )
    , CODPROD       NUMBER( 10 )
    , CODLOCAL      NUMBER( 10 )
    , CONTROLE      VARCHAR( 50 )
    , CUSTOEXPLOD   CHAR( 1 )
   );
END;
/
 
 
 
/*
Requer    : 4210000
Conexao   : ORCL
Data      : 26/02/2018 16:21:59
Num.Script: 50668-0-0
Nro. O.S. : 1137361
Nome      : Criar - STP_SET_USA_CONTA_BAIXA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - STP_SET_USA_CONTA_BAIXA
NomeObjeto: STP_SET_USA_CONTA_BAIXA
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210001
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE STP_SET_USA_CONTA_BAIXA(USA_CONTA_BAIXA CHAR)
AS
BEGIN
  VARIAVEIS_PKG.V_USA_CONTA_BAIXA := USA_CONTA_BAIXA;
END;
/
 
 
 
/*
Requer    : 4210000
Conexao   : ORCL
Data      : 26/02/2018 16:21:59
Num.Script: 50669-0-1000
Nro. O.S. : 1137361
Nome      : INSERE - THOOBJ - 5066800
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE STP_SET_USA_CONTA_BAIXA
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210001
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'STP_SET_USA_CONTA_BAIXA' NOMEOBJ, 50668 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, '98964252a11078d12fb81d4bb2817a6d' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'STP_SET_USA_CONTA_BAIXA' and THO.hashcode = '98964252a11078d12fb81d4bb2817a6d')
/
 
 
 
/*
Requer    : 4210000
Conexao   : ORCL
Data      : 26/02/2018 16:21:59
Num.Script: 50670-0-0
Nro. O.S. : 1137361
Nome      : Altera - TRG_INC_UPD_TGFFIN_MONIOCOREM
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - TRG_INC_UPD_TGFFIN_MONIOCOREM
NomeObjeto: TRG_INC_UPD_TGFFIN_MONIOCOREM
TipoObjeto: TRIGGER
NomeTabela: TGFFIN
Executar  : SE_EXISTIR
Ocorrencia: 4210001
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_INC_UPD_TGFFIN_MONIOCOREM
   BEFORE INSERT OR UPDATE OR DELETE
   ON TGFFIN
   FOR EACH ROW
DECLARE
   P_COUNT                   INT               := 0;
   P_TEMPERMISSAO            INT               := 0;
   P_CONTROLAPERMISSAO       INT               := 0;
   P_OCORRENCIA_ENTRADA_NEW  VARCHAR2(15 Byte) := NULL;
   P_OCORRENCIA_BAIXA        VARCHAR2(15 Byte) := NULL;
   P_OCORRENCIA_EXCLUSAO     VARCHAR2(15 Byte) := NULL;
   P_TROCANDO_CONTA          BOOLEAN           := UPDATING('CODCTABCOINT');
   P_DELETANDO               BOOLEAN           := NOT INSERTING AND NOT UPDATING;
   P_TITULO_MONITORADO       BOOLEAN           := :OLD.MONIOCOREM = 'S' OR :NEW.MONIOCOREM = 'S';
   P_GERANDO_REMESSA         BOOLEAN           := FALSE;
   P_IGNORE_OCORR_BAIXA      BOOLEAN           := FALSE;
   P_NUREMESSA               INT               := NULL;
   P_USA_CONTA_BAIXA        CHAR(1);
BEGIN

   IF STP_GET_ATUALIZANDO
   THEN
      RETURN;
   END IF;
   
   P_USA_CONTA_BAIXA := VARIAVEIS_PKG.V_USA_CONTA_BAIXA;
    
    --NAO MONITORAR DESPESAS
    IF NVL(:NEW.RECDESP,0) = -1 OR NVL(:OLD.RECDESP,0) = -1 OR (NVL(:NEW.RECDESP,-99) = 0 AND :NEW.PROVISAO = 'N' AND :NEW.NURENEG IS NULL) THEN
       RETURN;
    END IF;
    
   P_GERANDO_REMESSA := VARIAVEIS_PKG.V_GERANDO_REMESSA;
   P_IGNORE_OCORR_BAIXA := VARIAVEIS_PKG.V_IGNORE_OCORR_BAIXA;

    --BUSCA OCORRENCIA DE ENTRADA
   BEGIN
      SELECT C.OCORRENCIA_ENTRADA, C.OCORRENCIA_BAIXA INTO P_OCORRENCIA_ENTRADA_NEW, P_OCORRENCIA_BAIXA
      FROM TGFCRAF C 
      WHERE C.CODCTABCOINT = :NEW.CODCTABCOINT;
      EXCEPTION 
      WHEN NO_DATA_FOUND THEN
      P_OCORRENCIA_ENTRADA_NEW := NULL;
      P_OCORRENCIA_BAIXA := NULL;
   END;
   
   BEGIN
      SELECT C.OCORRENCIA_EXCLUSAO INTO P_OCORRENCIA_EXCLUSAO
      FROM TGFCRAF C 
      WHERE C.CODCTABCOINT = :OLD.CODCTABCOINT;
      EXCEPTION 
      WHEN NO_DATA_FOUND THEN
      P_OCORRENCIA_EXCLUSAO := NULL;
   END;

    IF((P_DELETANDO OR P_TROCANDO_CONTA OR (UPDATING('PROVISAO') AND :OLD.PROVISAO = 'N' AND :NEW.PROVISAO = 'S')) AND P_TITULO_MONITORADO) THEN

        SELECT
            COUNT(1) INTO P_COUNT
        FROM
            TGFRAF R
        WHERE
            R.NUFIN = :OLD.NUFIN
            AND EXISTS(SELECT 1 FROM TGFCRAF C WHERE C.CODCTABCOINT = :OLD.CODCTABCOINT AND C.OCORRENCIA_ENTRADA = R.OCORRENCIA)
            AND NUREMESSA IS NOT NULL
            AND TIPO='E'
            AND SEQUENCIA=(SELECT MAX(SEQUENCIA) 
                           FROM TGFRAF 
                           WHERE NUFIN=:OLD.NUFIN AND
                                 TIPO='E');
            
        IF(P_COUNT > 0) THEN
            IF(P_DELETANDO) THEN
                IF P_OCORRENCIA_EXCLUSAO IS NOT NULL THEN
                  UPDATE TGFRAF SET STATUS='X' WHERE NUFIN=:OLD.NUFIN AND ((TIPO='A' AND NUREMESSA IS NULL) OR TIPO='E');
                  
                  INSERT INTO 
                            TGFRAF (NUFIN,SEQUENCIA,NUREMESSA,CODUSU,DTALTER,CAMPO,STATUS,OCORRENCIA,TIPO)
                        VALUES 
                            (:OLD.NUFIN, (SELECT NVL(MAX(SEQUENCIA),0)+1 FROM TGFRAF WHERE NUFIN=:OLD.NUFIN), NULL, STP_GET_CODUSULOGADO, SYSDATE, ' ', 'A', P_OCORRENCIA_EXCLUSAO, 'X');
                  RETURN; --APOS INSERIR TGFRAF DE EXCLUSAO TENHO QUE SAIR DA TRIGGER 
                ELSE
                    RAISE_APPLICATION_ERROR (-20101, '<br><br><b>O título ' || :NEW.NUFIN ||' está em cobrança registrada e não pode ser excluído.</b><br>');
                END IF;
            ELSE IF(P_TROCANDO_CONTA) THEN
                            IF (P_USA_CONTA_BAIXA = 'N') THEN
                                RAISE_APPLICATION_ERROR (-20101, '<br><br><b>O título ' ||:NEW.NUFIN ||' está em cobrança registrada e a Conta não pode ser alterada. Caso haja necessidade este título deve ser renegociado.</b><br>');
                            END IF;
                    ELSE 
                            RAISE_APPLICATION_ERROR (-20101, '<br><br><b>O título ' ||:NEW.NUFIN ||' está em cobrança registrada, portanto não pode ser transformado em provisão.</b><br>');
                END IF;
            END IF;
        ELSE 
            DELETE FROM TGFRAF WHERE NUFIN = :OLD.NUFIN;
            IF(P_DELETANDO) THEN 
                --ACABA POR AQUI NO CASO DELETE
                RETURN;
            ELSE
                :NEW.MONIOCOREM := 'N';
            END IF;
        END IF;  
    END IF;   
             
   --INSERT ou TROCA DE CONTA ou DESMARCANDO PROVISAO
    IF((INSERTING OR P_TROCANDO_CONTA OR (UPDATING('PROVISAO') AND :OLD.PROVISAO = 'S')) AND :NEW.PROVISAO = 'N') THEN
        IF(P_OCORRENCIA_ENTRADA_NEW IS NOT NULL) THEN
            :NEW.MONIOCOREM := 'S';
            
            IF(P_GERANDO_REMESSA) THEN
                P_NUREMESSA := :NEW.NUMREMESSA;
            END IF;
            
            INSERT INTO 
                TGFRAF (NUFIN,SEQUENCIA,NUREMESSA,CODUSU,DTALTER,CAMPO,STATUS,OCORRENCIA,TIPO)
            VALUES 
                (:NEW.NUFIN,1,P_NUREMESSA,STP_GET_CODUSULOGADO,SYSDATE,' ','A', P_OCORRENCIA_ENTRADA_NEW,'E');
        END IF;
        RETURN; 
    END IF;

    -- SE O TITULO TEM O REGISTRO DE ENTRADA ENVIADO (NUREMESSA PREENCHIDO) E NAO TEM REGISTRO DE BAIXA NEM DE EXCLUSAO, PRECISO INSERIR MONITORAMENTOS E VALIDAR PERMISSOES DE ALTERACAO
    SELECT
        COUNT(1) INTO P_COUNT
    FROM
        TGFRAF
    WHERE
        NUFIN=:NEW.NUFIN
        AND NUREMESSA IS NOT NULL
        AND CAMPO = ' '
        AND OCORRENCIA=P_OCORRENCIA_ENTRADA_NEW
        AND TIPO='E'
        AND SEQUENCIA = (SELECT MAX(SEQUENCIA) 
                         FROM TGFRAF 
                         WHERE NUFIN=:NEW.NUFIN AND 
                               TIPO='E')
        AND NOT EXISTS (SELECT 1 
                            FROM TGFRAF 
                            WHERE NUFIN = :NEW.NUFIN
                              AND TIPO IN ('B','X')
                              AND SEQUENCIA > (SELECT MAX(SEQUENCIA) 
                                               FROM TGFRAF 
                                               WHERE NUFIN=:NEW.NUFIN AND 
                                                     TIPO='E'));

    IF(P_COUNT > 0 
       AND :NEW.DHBAIXA IS NULL AND :OLD.DHBAIXA IS NULL
       AND NOT (:OLD.RECDESP <> 0 AND :NEW.RECDESP = 0 AND -- NAO (NOT) RENEGOCIANDO
               ((:OLD.NURENEG IS NULL AND :NEW.NURENEG IS NOT NULL) 
                 OR
                (:OLD.NURENEG <> :NEW.NURENEG)))) THEN
        --PARA CADA CAMPO QUE EU MONITORO, VERIFICO SE EXISTE CONFIGURACAO DE PERMISSAO, SE NAO EXISTIR QUALQUER PESSOA PODE ALTERAR
        --SE EXISTIR VERIFICO SE O USUARIO TEM PERMISSAO, SE NAO TIVER BARRO A EDICAO.
        --QUANDO PERMITO EDITAR É REGISTRADO OU ATUALIZADO UM LOG NA TGFRAF
       DECLARE
          CURSOR curCampos IS
             SELECT
                O.NOMECAMPO,
                O.OCORRENCIA
             FROM
                TGFCRAF C
                INNER JOIN TGFOAF O ON O.NUCRAF = C.NUCRAF
             WHERE
                C.CODCTABCOINT = :NEW.CODCTABCOINT
             ORDER BY 
                O.NOMECAMPO DESC;
       BEGIN
          FOR registro IN curCampos
          LOOP
             IF (UPDATING (registro.NOMECAMPO)) THEN
                SELECT
                    COUNT(1) INTO P_CONTROLAPERMISSAO
                FROM
                    TGFCRAF C
                    INNER JOIN TGFOAF O ON O.NUCRAF = C.NUCRAF
                    INNER JOIN TGFPPO P ON P.NUCRAF = C.NUCRAF AND P.SEQUENCIA = O.SEQUENCIA
                WHERE
                    C.CODCTABCOINT = :NEW.CODCTABCOINT
                    AND O.NOMECAMPO = registro.NOMECAMPO;

                IF (P_CONTROLAPERMISSAO > 0) THEN
                    SELECT
                        COUNT(1) INTO P_TEMPERMISSAO
                    FROM
                        TGFCRAF C
                        INNER JOIN TGFOAF O ON O.NUCRAF = C.NUCRAF
                        INNER JOIN TGFPPO P  ON P.NUCRAF = C.NUCRAF AND P.SEQUENCIA = O.SEQUENCIA
                    WHERE
                        C.CODCTABCOINT = :NEW.CODCTABCOINT
                        AND O.NOMECAMPO = registro.NOMECAMPO
                        AND P.CODUSU = STP_GET_CODUSULOGADO;

                    IF (P_TEMPERMISSAO = 0) THEN
                        RAISE_APPLICATION_ERROR (-20101, '<br><br><b>Alteração não permitida para esse usuário pois o titulo é de cobrança registrada.</b><br>');
                    END IF;
                END IF;
                    
                SELECT 
                    COUNT(1) INTO P_COUNT
                FROM
                    TGFRAF 
                WHERE
                    NUFIN=:NEW.NUFIN
                    AND CAMPO = registro.NOMECAMPO
                    AND OCORRENCIA=registro.OCORRENCIA
                    AND STATUS = 'A'
                    AND TIPO = 'A'
                    AND SEQUENCIA = (SELECT MAX(SEQUENCIA) 
                                     FROM TGFRAF 
                                     WHERE NUFIN=:NEW.NUFIN AND 
                                           TIPO='A' AND 
                                           CAMPO = registro.NOMECAMPO);
                    
                IF(P_COUNT > 0) THEN --SE JA EXISTIR A LINHA FACO UPDATE
                    UPDATE
                        TGFRAF
                    SET 
                        DTALTER=SYSDATE,
                        CODUSU=STP_GET_CODUSULOGADO
                    WHERE
                        NUFIN=:NEW.NUFIN 
                        AND CAMPO = registro.NOMECAMPO 
                        AND OCORRENCIA=registro.OCORRENCIA
                        AND SEQUENCIA = (SELECT MAX(SEQUENCIA) 
                                     FROM TGFRAF 
                                     WHERE NUFIN=:NEW.NUFIN AND 
                                           TIPO='A' AND 
                                           CAMPO = registro.NOMECAMPO);
                            
                ELSE --SE NAO EXISTIR A LINHA EU A CRIO
                    INSERT INTO 
                        TGFRAF (NUFIN,SEQUENCIA,NUREMESSA,CODUSU,DTALTER,CAMPO,STATUS,OCORRENCIA,TIPO)
                    VALUES
                        (:NEW.NUFIN, (SELECT NVL(MAX(SEQUENCIA),0)+1 FROM TGFRAF WHERE NUFIN=:NEW.NUFIN), NULL, STP_GET_CODUSULOGADO, SYSDATE, registro.NOMECAMPO, 'A', registro.OCORRENCIA, 'A');
                END IF;
             END IF;
          END LOOP;
       END;  
    ELSE IF ((:OLD.DHBAIXA IS NULL AND :NEW.DHBAIXA IS NOT NULL) --BAIXANDO
            OR
             (:OLD.RECDESP <> 0 AND :NEW.RECDESP = 0 AND --RENEGOCIAÇÃO
             ((:OLD.NURENEG IS NULL AND :NEW.NURENEG IS NOT NULL) --PRIMEIRA RENEGOCIAÇÃO
               OR
             (:OLD.NURENEG <> :NEW.NURENEG)))) --RENEGOCIAÇÃO DE TITULOS JA RENEGOCIADOS
         THEN 
                UPDATE TGFRAF 
                SET STATUS=(CASE WHEN NVL(:NEW.NURENEG, 0) <> 0 THEN 'R' ELSE 'B' END)
                WHERE NUFIN=:NEW.NUFIN AND
                    ((TIPO='A' AND NUREMESSA IS NULL) OR
                     (TIPO='E' AND SEQUENCIA=(SELECT MAX(SEQUENCIA) 
                                            FROM TGFRAF 
                                            WHERE NUFIN=:NEW.NUFIN AND 
                                                  TIPO='E'))
                    );
                          
              P_COUNT := 0;
              
              SELECT COUNT(1) INTO P_COUNT
                      FROM TGFRAF
                      WHERE NUFIN = :NEW.NUFIN
                        AND NUREMESSA IS NOT NULL
                        AND CAMPO = ' '
                        AND OCORRENCIA = P_OCORRENCIA_ENTRADA_NEW 
                        AND TIPO='E'
                        AND SEQUENCIA=(SELECT MAX(SEQUENCIA) 
                                       FROM TGFRAF 
                                       WHERE NUFIN=:NEW.NUFIN AND 
                                             TIPO='E');
                        
                IF(P_COUNT > 0 AND NOT(P_IGNORE_OCORR_BAIXA)) THEN
                  INSERT INTO 
                        TGFRAF (NUFIN,SEQUENCIA,NUREMESSA,CODUSU,DTALTER,CAMPO,STATUS,OCORRENCIA,TIPO)
                  VALUES 
                        (:NEW.NUFIN, (SELECT NVL(MAX(SEQUENCIA),0)+1 FROM TGFRAF WHERE NUFIN=:NEW.NUFIN), NULL, STP_GET_CODUSULOGADO, SYSDATE, ' ', 'A', P_OCORRENCIA_BAIXA, 'B');
                END IF;
         ELSE
            IF (:OLD.DHBAIXA IS NOT NULL AND :NEW.DHBAIXA IS NULL)--ESTORNO
              OR
               (:OLD.NURENEG IS NOT NULL AND 
               (:NEW.NURENEG IS NULL OR (:NEW.NURENEG IS NOT NULL AND :OLD.NURENEG <> :NEW.NURENEG)) AND 
                :OLD.RECDESP = 0 AND :NEW.RECDESP = 1) -- DESFAZENDO RENEGOCIACAO  
            THEN 
                P_COUNT := 0;
                
                SELECT COUNT(1) INTO P_COUNT 
                FROM TGFRAF 
                WHERE NUFIN = :NEW.NUFIN 
                  AND TIPO IN ('B')
                  AND NUREMESSA IS NOT NULL
                  AND SEQUENCIA=(SELECT MAX(SEQUENCIA) 
                                 FROM TGFRAF 
                                 WHERE NUFIN=:NEW.NUFIN);
                                 
                IF P_COUNT > 0 THEN
                   INSERT INTO 
                      TGFRAF (NUFIN,SEQUENCIA,NUREMESSA,CODUSU,DTALTER,CAMPO,STATUS,OCORRENCIA,TIPO)
                   VALUES 
                     (:NEW.NUFIN,(SELECT NVL(MAX(SEQUENCIA),0)+1 FROM TGFRAF WHERE NUFIN=:NEW.NUFIN),NULL,STP_GET_CODUSULOGADO(),SYSDATE,' ','A', P_OCORRENCIA_ENTRADA_NEW,'E');

                   :NEW.NUMREMESSA := NULL;
                ELSE
                
                  UPDATE TGFRAF 
                  SET STATUS='A'
                  WHERE NUFIN=:NEW.NUFIN AND
                  ((TIPO='A' AND NUREMESSA IS NULL) OR
                   (TIPO='E' AND SEQUENCIA=(SELECT MAX(SEQUENCIA) 
                                            FROM TGFRAF 
                                            WHERE NUFIN=:NEW.NUFIN AND 
                                                  TIPO='E'))
                  );
                  
                  DELETE TGFRAF 
                  WHERE NUFIN=:NEW.NUFIN AND
                        TIPO='B' AND
                        NUREMESSA IS NULL;
              
              END IF;  
            END IF;
            
         END IF;
    END IF;
END;
/
 
 
 
/*
Requer    : 4210000
Conexao   : ORCL
Data      : 26/02/2018 16:21:59
Num.Script: 50671-0-1000
Nro. O.S. : 1137361
Nome      : INSERE - THOOBJ - 5067000
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_INC_UPD_TGFFIN_MONIOCOREM
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210001
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_INC_UPD_TGFFIN_MONIOCOREM' NOMEOBJ, 50670 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '648fc77e55c56280232d5880ea282580' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_INC_UPD_TGFFIN_MONIOCOREM' and THO.hashcode = '648fc77e55c56280232d5880ea282580')
/
 
 
 
/*
Conexao   : ORCL
NomeObjeto: UPDATE TSIPAR INTEIRO
TipoObjeto: TABLE
NomeTabela: 
Executar  : SEMPRE
Ocorrencia: 4210002
FullVersao: Sim
*/
 
 
UPDATE TSIPAR SET INTEIRO = 4210001 WHERE CHAVE = 'VERSAOATUALDB'
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 19/03/2018 14:17:22
Num.Script: 49182-0-0
Nro. O.S. : 1137095
Nome      : Criar - TGFTOP TIPMODALCTE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: TIPMODALCTE
TipoObjeto: COLUMN
NomeTabela: TGFTOP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TGFTOP ADD TIPMODALCTE CHAR(1)';
   EXECUTE IMMEDIATE 'ALTER TABLE TGFTOP ADD  CONSTRAINT CKC_TIPMODALCTE_TGFTOP CHECK (TIPMODALCTE IN (1,3) OR TIPMODALCTE IS NULL )';
END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 19/03/2018 14:17:22
Num.Script: 49183-0-0
Nro. O.S. : 1137095
Nome      : Criar - TGFCAB VLRPRESTAFRMM
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRPRESTAFRMM
TipoObjeto: COLUMN
NomeTabela: TGFCAB
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFCAB ADD VLRPRESTAFRMM FLOAT
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 19/03/2018 14:17:22
Num.Script: 49184-0-0
Nro. O.S. : 1137095
Nome      : Criar - TGFCAB VLRAFRMM
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRAFRMM
TipoObjeto: COLUMN
NomeTabela: TGFCAB
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFCAB ADD VLRAFRMM FLOAT
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 19/03/2018 14:17:22
Num.Script: 49185-0-0
Nro. O.S. : 1137095
Nome      : Criar - TGFCAB IDNAVIO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: IDNAVIO
TipoObjeto: COLUMN
NomeTabela: TGFCAB
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFCAB ADD IDNAVIO VARCHAR2(60)
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 19/03/2018 14:17:22
Num.Script: 49186-0-0
Nro. O.S. : 1137095
Nome      : Criar - TGFCAB IRINNAVIO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: IRINNAVIO
TipoObjeto: COLUMN
NomeTabela: TGFCAB
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFCAB ADD IRINNAVIO VARCHAR2(10)
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 19/03/2018 14:17:22
Num.Script: 49187-0-0
Nro. O.S. : 1137095
Nome      : Criar - TGFCAB DIRECAOVIAG
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: DIRECAOVIAG
TipoObjeto: COLUMN
NomeTabela: TGFCAB
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TGFCAB ADD DIRECAOVIAG CHAR(1)';
   EXECUTE IMMEDIATE 'ALTER TABLE TGFCAB ADD  CONSTRAINT CKC_DIRECAOVIAG_TGFCAB CHECK (DIRECAOVIAG IN (''N'',''S'',''L'',''O'') OR DIRECAOVIAG IS NULL )';
END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 19/03/2018 14:17:22
Num.Script: 49189-0-0
Nro. O.S. : 1137095
Nome      : Criar - TGFCAB IDBALSA01
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: IDBALSA01
TipoObjeto: COLUMN
NomeTabela: TGFCAB
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFCAB ADD IDBALSA01 NUMBER(10)
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 19/03/2018 14:17:22
Num.Script: 49190-0-0
Nro. O.S. : 1137095
Nome      : Criar - TGFCAB IDBALSA02
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: IDBALSA02
TipoObjeto: COLUMN
NomeTabela: TGFCAB
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFCAB ADD IDBALSA02 NUMBER(10)
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 19/03/2018 14:17:22
Num.Script: 49191-0-0
Nro. O.S. : 1137095
Nome      : Criar - TGFCAB IDBALSA03
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: IDBALSA03
TipoObjeto: COLUMN
NomeTabela: TGFCAB
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFCAB ADD IDBALSA03 NUMBER(10)
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 19/03/2018 14:17:22
Num.Script: 49192-0-0
Nro. O.S. : 1137095
Nome      : Criar - TGFCONT
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TGFCONT
NomeObjeto: TGFCONT
TipoObjeto: TABLE
NomeTabela: TGFCONT
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TGFCONT(
NUNOTA NUMBER(10),
IDCONTAINERS VARCHAR2(60),
CONSTRAINT PK_TGFCONT PRIMARY KEY(NUNOTA, IDCONTAINERS),
CONSTRAINT FK_TGFCAB_TGFCONT FOREIGN KEY(NUNOTA) REFERENCES TGFCAB(NUNOTA)
)
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 19/03/2018 14:17:22
Num.Script: 49193-0-0
Nro. O.S. : 1137095
Nome      : Script - TGFNCT
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - TGFNCT
NomeObjeto: TGFNCT
TipoObjeto: TABLE
NomeTabela: TGFNCT
Executar  : SEMPRE
Ocorrencia: 4210002
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
   DECLARE
   P_COUNT     VARCHAR2(20);
BEGIN
   SELECT COUNT(*)
   INTO P_COUNT
   FROM USER_TAB_COLUMNS
   WHERE UPPER(TABLE_NAME) = 'TGFNCT'
     AND COLUMN_NAME = 'AUX';

   IF P_COUNT > 0 THEN
       EXECUTE IMMEDIATE 'ALTER TABLE TGFNCT DROP COLUMN AUX';
   END IF;

   SELECT COUNT(*)
   INTO P_COUNT
   FROM USER_TAB_COLUMNS
   WHERE UPPER(TABLE_NAME) = 'TGFNCT'
     AND COLUMN_NAME = 'NUMERO'
     AND DATA_TYPE = 'NUMBER';
     
   IF P_COUNT > 0 THEN
       EXECUTE IMMEDIATE 'ALTER TABLE TGFNCT ADD AUX VARCHAR2(20)';
       EXECUTE IMMEDIATE 'UPDATE TGFNCT SET AUX = NUMERO';
       EXECUTE IMMEDIATE 'ALTER TABLE TGFNCT DROP COLUMN NUMERO';
       EXECUTE IMMEDIATE 'ALTER TABLE TGFNCT ADD NUMERO VARCHAR2(20)';
       EXECUTE IMMEDIATE 'UPDATE TGFNCT SET NUMERO = AUX';
       EXECUTE IMMEDIATE 'ALTER TABLE TGFNCT DROP COLUMN AUX';
   END IF;
   
END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 02/03/2018 17:48:35
Num.Script: 49809-0-0
Nro. O.S. : 1114344
Nome      : Alterar - TRG_INC_UPD_TGFCAB_ORD
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - TRG_INC_UPD_TGFCAB_ORD
NomeObjeto: TRG_INC_UPD_TGFCAB_ORD
TipoObjeto: TRIGGER
NomeTabela: TGFCAB 
Executar  : SE_EXISTIR
Ocorrencia: 4210002
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_INC_UPD_TGFCAB_ORD
BEFORE INSERT OR UPDATE 
ON TGFCAB 
FOR EACH ROW
DECLARE
  P_COUNT           INT;
  P_COUNTVAL        INT;
  ERRMSG            VARCHAR2(255);
  ERROR             EXCEPTION;
  P_VALIDAR         BOOLEAN;
  P_VLRDESDOBFRETE  FLOAT;
  P_NUVIAG          NUMBER(10);
  P_SEQMDFE         NUMBER(5);
  P_EXISTEMDFE      BOOLEAN;
BEGIN

  IF STP_GET_ATUALIZANDO THEN
    RETURN;
  END IF;

  /* 
  Sincronizac?o de dados
  */
  P_VALIDAR := Fpodevalidar('TGFCAB');
  
  IF (NVL(:NEW.ORDEMCARGA,0) <> 0) THEN          
    SELECT COUNT(1) INTO P_COUNT
    FROM TGFORD ORD
    WHERE ORD.ORDEMCARGA = :NEW.ORDEMCARGA
      AND ORD.CODEMP = (SELECT CASE WHEN EMP.CODEMPOC IS NULL THEN EMP.CODEMP ELSE CODEMPOC END 
                        FROM TGFEMP EMP 
                        WHERE EMP.CODEMP = :NEW.CODEMP);
        
    IF (P_COUNT=0) THEN
        RAISE_APPLICATION_ERROR(-20101, 'Não existe referencia para ordem de Carga: '||TO_CHAR(:NEW.ORDEMCARGA)||' informada na nota de Nro Unico: '||TO_CHAR(:NEW.NUNOTA));
    END IF;  
  END IF;
  
  IF UPDATING THEN  
    IF (NVL(:OLD.ORDEMCARGA,0) <> NVL(:NEW.ORDEMCARGA,0)) THEN
      IF (NVL(:NEW.ORDEMCARGA,0) <> 0) THEN           
        SELECT COUNT(1) INTO P_COUNT
        FROM TGFORD ORD
        WHERE ORD.ORDEMCARGA = :NEW.ORDEMCARGA
          AND ORD.CODEMP = (SELECT CASE WHEN EMP.CODEMPOC IS NULL THEN EMP.CODEMP ELSE CODEMPOC END 
                            FROM TGFEMP EMP 
                            WHERE EMP.CODEMP = :NEW.CODEMP)
          AND SITUACAO = 'A';
              
        IF (P_COUNT = 0) AND (P_VALIDAR) THEN
          
          SELECT COUNT(1) INTO P_COUNT
          FROM TGFORD ORD
          WHERE ORD.ORDEMCARGA = :NEW.ORDEMCARGA
            AND ORD.CODEMP = (SELECT CASE WHEN EMP.CODEMPOC IS NULL THEN EMP.CODEMP ELSE CODEMPOC END 
                            FROM TGFEMP EMP 
                            WHERE EMP.CODEMP = :NEW.CODEMP)
            AND SITUACAO = 'F' 
            AND SNK_getTSIPARLogico('ALTOCFECFORMOC') = 'S';
        
          IF (P_COUNT = 0) THEN
            ERRMSG := 'Ordem de carga '||:NEW.ORDEMCARGA||' usada na nota de Nro Unico: '||:NEW.NUNOTA||' não esta aberta ou não existe.';
            RAISE ERROR;
          END IF;
        END IF;
            
        SELECT COUNT(1) INTO P_COUNT
        FROM TGFORD ORD
        WHERE ORD.ORDEMCARGA = :NEW.ORDEMCARGA
          AND ORD.CODEMP = (SELECT CASE WHEN EMP.CODEMPOC IS NULL THEN EMP.CODEMP ELSE CODEMPOC END 
                            FROM TGFEMP EMP 
                            WHERE EMP.CODEMP = :NEW.CODEMP)
          AND :NEW.DTNEG < NVL(DTINIC,'01-JAN-1998');
               
        IF (P_COUNT > 0) AND (P_VALIDAR) THEN
          SELECT COUNT(1) INTO P_COUNT
          FROM TSIPAR 
          WHERE CHAVE = 'DTNEGDTINICOC' 
            AND LOGICO = 'S';
          --E O PARAMETRO 'DTNEGDTINICOC' ESTA IGUAL A 'N' OU N?O EXISTE
          IF  (P_COUNT = 0) AND (P_VALIDAR) THEN
            ERRMSG := 'A data de negociação da nota de Nro Unico '||:NEW.NUNOTA||' e anterior a data inicio da Ordem de Carga '||:NEW.ORDEMCARGA||'.';
            RAISE ERROR;
          END IF;
        END IF;                  
      END IF;

      IF :OLD.ORDEMCARGA IS NOT NULL THEN 
        BEGIN
          SELECT M.NUVIAG, M.SEQMDFE INTO P_NUVIAG, P_SEQMDFE
          FROM TGFORD O
              INNER JOIN TGFVIAG V ON V.NUVIAG = O.NUVIAG
              INNER JOIN TGFMDFE M ON M.NUVIAG = V.NUVIAG
          WHERE O.CODEMP = :OLD.CODEMP
              AND O.ORDEMCARGA = :OLD.ORDEMCARGA
              AND M.STATUSMDFE NOT IN ('5','6','7'); --5 - Cancelado  6 - Encerrado  7 - Denegado

          P_EXISTEMDFE := TRUE;
        EXCEPTION WHEN NO_DATA_FOUND THEN
          P_EXISTEMDFE := FALSE;
        END;

        IF P_EXISTEMDFE = TRUE THEN
          ERRMSG := 'Nota de Nro. Único '||:OLD.NUNOTA||' não pode ter sua Ordem de Carga '||:OLD.ORDEMCARGA||' alterada, pois está vinculada a um MDF-e com status diferente de Encerrado, Cancelado ou Denegado. Nro. Viagem '||P_NUVIAG||', Sequência do manifesto '||P_SEQMDFE||'.';
          RAISE ERROR;        
        END IF;
      END IF;
 
      P_COUNTVAL := 0;
      SELECT COUNT(1) INTO P_COUNTVAL
      FROM TGFFIN
      WHERE NUNOTA = :NEW.NUNOTA
        AND ORDEMCARGA <> :NEW.ORDEMCARGA 
        AND (NURENEG IS NULL OR NURENEG = 0);
      IF P_COUNTVAL > 0 THEN             
        UPDATE TGFFIN SET ORDEMCARGA = :NEW.ORDEMCARGA
        WHERE NUNOTA = :NEW.NUNOTA  
          AND ORDEMCARGA <> :NEW.ORDEMCARGA 
          AND (NURENEG IS NULL OR NURENEG = 0);   /* alterac?o feita pelo Manoel  acrescentando a validac?o da ORDEM CARGA */ 
      END IF;  
    END IF;
          
    IF :OLD.NUMCONTRATO <> :NEW.NUMCONTRATO THEN
      P_COUNTVAL := 0;
      SELECT  COUNT(1) INTO P_COUNTVAL
      FROM TGFFIN
      WHERE NUNOTA = :NEW.NUNOTA
      AND NUMCONTRATO <> :NEW.NUMCONTRATO;
      IF P_COUNTVAL > 0 THEN            
        UPDATE TGFFIN SET NUMCONTRATO = :NEW.NUMCONTRATO
        WHERE NUNOTA = :NEW.NUNOTA
        AND NUMCONTRATO <> :NEW.NUMCONTRATO;
      END IF;  
    END IF;
      
    IF GET_TSIPAR_LOGICO('RATEXTNOTAFRINC') = 'N' AND ((:NEW.CODPARCTRANSP = 0) OR (:NEW.VLRFRETE = 0) OR (:NEW.TIPFRETE <> 'N')) THEN
      P_COUNTVAL := 0;
      
      SELECT COUNT(1) INTO P_COUNTVAL
      FROM TGFFIN
      WHERE NUNOTA = :NEW.NUNOTA AND DESDOBDUPL = 'F';
      
      IF P_COUNTVAL > 0 THEN 
        DELETE FROM TGFFIN WHERE NUNOTA = :NEW.NUNOTA AND DESDOBDUPL = 'F';
      END IF;  
    END IF;
      
    IF (:NEW.CODPARCTRANSP <> 0) AND (:NEW.VLRFRETE <> :OLD.VLRFRETE) AND (:NEW.TIPFRETE = 'N') THEN
      P_COUNTVAL := 0;
      
      SELECT SUM(VLRDESDOB) INTO P_VLRDESDOBFRETE
      FROM TGFFIN 
      WHERE NUNOTA = :NEW.NUNOTA
        AND DESDOBDUPL = 'F';
        
      P_VLRDESDOBFRETE := :NEW.VLRFRETE - P_VLRDESDOBFRETE;
          
      UPDATE TGFFIN SET VLRDESDOB = VLRDESDOB + (P_VLRDESDOBFRETE)
      WHERE NUNOTA = :NEW.NUNOTA
        AND DESDOBDUPL = 'F'
        AND DHBAIXA IS NULL;
    END IF;
    
  END IF;
  RETURN;  
EXCEPTION
  WHEN ERROR THEN
  /* 
  Sincronizac?o de dados n?o faz validac?es
  */
  IF (P_VALIDAR) THEN 
    RAISE_APPLICATION_ERROR(-20101, ERRMSG);
  END IF; 
END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 02/03/2018 17:48:35
Num.Script: 49810-0-1000
Nro. O.S. : 1114344
Nome      : INSERE - THOOBJ - 4980900
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_INC_UPD_TGFCAB_ORD
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210002
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_INC_UPD_TGFCAB_ORD' NOMEOBJ, 49809 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '4e48e1a4c45a26d26762dcb48547aa43' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_INC_UPD_TGFCAB_ORD' and THO.hashcode = '4e48e1a4c45a26d26762dcb48547aa43')
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 02/03/2018 17:48:35
Num.Script: 50601-0-0
Nro. O.S. : 1128908
Nome      : Cria - TGFPAR CODPARCGRUECONOMICO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: CODPARCGRUECONOMICO
TipoObjeto: COLUMN
NomeTabela: TGFPAR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
EXECUTE IMMEDIATE 'ALTER TABLE TGFPAR ADD CODPARCGRUECONOMICO NUMBER(5)';
EXECUTE IMMEDIATE 'ALTER TABLE TGFPAR ADD CONSTRAINT FK_TGFPAR_TGFPAR_2 FOREIGN KEY (CODPARCGRUECONOMICO) REFERENCES TGFPAR (CODPARC)';
END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 02/03/2018 17:48:35
Num.Script: 50620-0-0
Nro. O.S. : 1114344
Nome      : Alterar - TRG_INC_UPD_TGFCAB_ORD
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - TRG_INC_UPD_TGFCAB_ORD
NomeObjeto: TRG_INC_UPD_TGFCAB_ORD
TipoObjeto: TRIGGER
NomeTabela: TGFCAB 
Executar  : SE_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_INC_UPD_TGFCAB_ORD
BEFORE INSERT OR UPDATE 
ON TGFCAB 
FOR EACH ROW
DECLARE
  P_COUNT           INT;
  P_COUNTVAL        INT;
  ERRMSG            VARCHAR2(255);
  ERROR             EXCEPTION;
  P_VALIDAR         BOOLEAN;
  P_VLRDESDOBFRETE  FLOAT;
  P_NUVIAG          NUMBER(10);
  P_SEQMDFE         NUMBER(5);
  P_EXISTEMDFE      BOOLEAN;
BEGIN

  IF STP_GET_ATUALIZANDO THEN
    RETURN;
  END IF;

  /* 
  Sincronizac?o de dados
  */
  P_VALIDAR := Fpodevalidar('TGFCAB');
  
  IF (NVL(:NEW.ORDEMCARGA,0) <> 0) THEN          
    SELECT COUNT(1) INTO P_COUNT
    FROM TGFORD ORD
    WHERE ORD.ORDEMCARGA = :NEW.ORDEMCARGA
      AND ORD.CODEMP = (SELECT CASE WHEN EMP.CODEMPOC IS NULL THEN EMP.CODEMP ELSE CODEMPOC END 
                        FROM TGFEMP EMP 
                        WHERE EMP.CODEMP = :NEW.CODEMP);
        
    IF (P_COUNT=0) THEN
        RAISE_APPLICATION_ERROR(-20101, 'Não existe referencia para ordem de Carga: '||TO_CHAR(:NEW.ORDEMCARGA)||' informada na nota de Nro Unico: '||TO_CHAR(:NEW.NUNOTA));
    END IF;  
  END IF;
  
  IF UPDATING THEN  
    IF (NVL(:OLD.ORDEMCARGA,0) <> NVL(:NEW.ORDEMCARGA,0)) THEN
      IF (NVL(:NEW.ORDEMCARGA,0) <> 0) THEN           
        SELECT COUNT(1) INTO P_COUNT
        FROM TGFORD ORD
        WHERE ORD.ORDEMCARGA = :NEW.ORDEMCARGA
          AND ORD.CODEMP = (SELECT CASE WHEN EMP.CODEMPOC IS NULL THEN EMP.CODEMP ELSE CODEMPOC END 
                            FROM TGFEMP EMP 
                            WHERE EMP.CODEMP = :NEW.CODEMP)
          AND SITUACAO = 'A';
              
        IF (P_COUNT = 0) AND (P_VALIDAR) THEN
          
          SELECT COUNT(1) INTO P_COUNT
          FROM TGFORD ORD
          WHERE ORD.ORDEMCARGA = :NEW.ORDEMCARGA
            AND ORD.CODEMP = (SELECT CASE WHEN EMP.CODEMPOC IS NULL THEN EMP.CODEMP ELSE CODEMPOC END 
                            FROM TGFEMP EMP 
                            WHERE EMP.CODEMP = :NEW.CODEMP)
            AND SITUACAO = 'F' 
            AND SNK_getTSIPARLogico('ALTOCFECFORMOC') = 'S';
        
          IF (P_COUNT = 0) THEN
            ERRMSG := 'Ordem de carga '||:NEW.ORDEMCARGA||' usada na nota de Nro Unico: '||:NEW.NUNOTA||' não esta aberta ou não existe.';
            RAISE ERROR;
          END IF;
        END IF;
            
        SELECT COUNT(1) INTO P_COUNT
        FROM TGFORD ORD
        WHERE ORD.ORDEMCARGA = :NEW.ORDEMCARGA
          AND ORD.CODEMP = (SELECT CASE WHEN EMP.CODEMPOC IS NULL THEN EMP.CODEMP ELSE CODEMPOC END 
                            FROM TGFEMP EMP 
                            WHERE EMP.CODEMP = :NEW.CODEMP)
          AND :NEW.DTNEG < NVL(DTINIC,'01-JAN-1998');
               
        IF (P_COUNT > 0) AND (P_VALIDAR) THEN
          SELECT COUNT(1) INTO P_COUNT
          FROM TSIPAR 
          WHERE CHAVE = 'DTNEGDTINICOC' 
            AND LOGICO = 'S';
          --E O PARAMETRO 'DTNEGDTINICOC' ESTA IGUAL A 'N' OU N?O EXISTE
          IF  (P_COUNT = 0) AND (P_VALIDAR) THEN
            ERRMSG := 'A data de negociação da nota de Nro Unico '||:NEW.NUNOTA||' e anterior a data inicio da Ordem de Carga '||:NEW.ORDEMCARGA||'.';
            RAISE ERROR;
          END IF;
        END IF;                  
      END IF;

      IF :OLD.ORDEMCARGA IS NOT NULL AND :NEW.STATUSNOTA = 'L' THEN 
        BEGIN
          SELECT M.NUVIAG, M.SEQMDFE INTO P_NUVIAG, P_SEQMDFE
          FROM TGFORD O
              INNER JOIN TGFVIAG V ON V.NUVIAG = O.NUVIAG
              INNER JOIN TGFMDFE M ON M.NUVIAG = V.NUVIAG
          WHERE O.CODEMP = :OLD.CODEMP
              AND O.ORDEMCARGA = :OLD.ORDEMCARGA
              AND M.STATUSMDFE NOT IN ('5','6','7'); --5 - Cancelado  6 - Encerrado  7 - Denegado

          P_EXISTEMDFE := TRUE;
        EXCEPTION WHEN NO_DATA_FOUND THEN
          P_EXISTEMDFE := FALSE;
        END;

        IF P_EXISTEMDFE = TRUE THEN
          ERRMSG := 'Nota de Nro. Único '||:OLD.NUNOTA||' não pode ter sua Ordem de Carga '||:OLD.ORDEMCARGA||' alterada, pois está vinculada a um MDF-e com status diferente de Encerrado, Cancelado ou Denegado. Nro. Viagem '||P_NUVIAG||', Sequência do manifesto '||P_SEQMDFE||'.';
          RAISE ERROR;        
        END IF;
      END IF;
 
      P_COUNTVAL := 0;
      SELECT COUNT(1) INTO P_COUNTVAL
      FROM TGFFIN
      WHERE NUNOTA = :NEW.NUNOTA
        AND ORDEMCARGA <> :NEW.ORDEMCARGA 
        AND (NURENEG IS NULL OR NURENEG = 0);
      IF P_COUNTVAL > 0 THEN             
        UPDATE TGFFIN SET ORDEMCARGA = :NEW.ORDEMCARGA
        WHERE NUNOTA = :NEW.NUNOTA  
          AND ORDEMCARGA <> :NEW.ORDEMCARGA 
          AND (NURENEG IS NULL OR NURENEG = 0);   /* alterac?o feita pelo Manoel  acrescentando a validac?o da ORDEM CARGA */ 
      END IF;  
    END IF;
          
    IF :OLD.NUMCONTRATO <> :NEW.NUMCONTRATO THEN
      P_COUNTVAL := 0;
      SELECT  COUNT(1) INTO P_COUNTVAL
      FROM TGFFIN
      WHERE NUNOTA = :NEW.NUNOTA
      AND NUMCONTRATO <> :NEW.NUMCONTRATO;
      IF P_COUNTVAL > 0 THEN            
        UPDATE TGFFIN SET NUMCONTRATO = :NEW.NUMCONTRATO
        WHERE NUNOTA = :NEW.NUNOTA
        AND NUMCONTRATO <> :NEW.NUMCONTRATO;
      END IF;  
    END IF;
      
    IF GET_TSIPAR_LOGICO('RATEXTNOTAFRINC') = 'N' AND ((:NEW.CODPARCTRANSP = 0) OR (:NEW.VLRFRETE = 0) OR (:NEW.TIPFRETE <> 'N')) THEN
      P_COUNTVAL := 0;
      
      SELECT COUNT(1) INTO P_COUNTVAL
      FROM TGFFIN
      WHERE NUNOTA = :NEW.NUNOTA AND DESDOBDUPL = 'F';
      
      IF P_COUNTVAL > 0 THEN 
        DELETE FROM TGFFIN WHERE NUNOTA = :NEW.NUNOTA AND DESDOBDUPL = 'F';
      END IF;  
    END IF;
      
    IF (:NEW.CODPARCTRANSP <> 0) AND (:NEW.VLRFRETE <> :OLD.VLRFRETE) AND (:NEW.TIPFRETE = 'N') THEN
      P_COUNTVAL := 0;
      
      SELECT SUM(VLRDESDOB) INTO P_VLRDESDOBFRETE
      FROM TGFFIN 
      WHERE NUNOTA = :NEW.NUNOTA
        AND DESDOBDUPL = 'F';
        
      P_VLRDESDOBFRETE := :NEW.VLRFRETE - P_VLRDESDOBFRETE;
          
      UPDATE TGFFIN SET VLRDESDOB = VLRDESDOB + (P_VLRDESDOBFRETE)
      WHERE NUNOTA = :NEW.NUNOTA
        AND DESDOBDUPL = 'F'
        AND DHBAIXA IS NULL;
    END IF;
    
  END IF;
  RETURN;  
EXCEPTION
  WHEN ERROR THEN
  /* 
  Sincronizac?o de dados n?o faz validac?es
  */
  IF (P_VALIDAR) THEN 
    RAISE_APPLICATION_ERROR(-20101, ERRMSG);
  END IF; 
END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 02/03/2018 17:48:35
Num.Script: 50621-0-1000
Nro. O.S. : 1114344
Nome      : INSERE - THOOBJ - 5062000
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_INC_UPD_TGFCAB_ORD
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210002
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_INC_UPD_TGFCAB_ORD' NOMEOBJ, 50620 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '23f27db135a37722bb5e800cc8bdff68' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_INC_UPD_TGFCAB_ORD' and THO.hashcode = '23f27db135a37722bb5e800cc8bdff68')
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 02/03/2018 17:48:35
Num.Script: 50879-0-0
Nro. O.S. : 1128908
Nome      : Cria - TGFMGC CODTIPVENDA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: CODTIPVENDA
TipoObjeto: COLUMN
NomeTabela: TGFMGC
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE P_COUNT NUMBER(5);
BEGIN
  SELECT COUNT(1) INTO P_COUNT
  FROM USER_TAB_COLUMNS
  WHERE TABLE_NAME = 'TGFCAB'
    AND COLUMN_NAME = 'CODTIPVENDA'
    AND DATA_PRECISION = 5;
  
  IF P_COUNT > 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE TGFMGC ADD CODTIPVENDA NUMBER(5) DEFAULT 0 NOT NULL';
  ELSE
    EXECUTE IMMEDIATE 'ALTER TABLE TGFMGC ADD CODTIPVENDA NUMBER(10) DEFAULT 0 NOT NULL';
  END IF;
END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 02/03/2018 17:48:35
Num.Script: 50880-0-0
Nro. O.S. : 1128908
Nome      : Cria - TGFMGC_TMP CODTIPVENDA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: CODTIPVENDA
TipoObjeto: COLUMN
NomeTabela: TGFMGC_TMP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE P_COUNT NUMBER(5);
BEGIN
  SELECT COUNT(1) INTO P_COUNT
  FROM USER_TAB_COLUMNS
  WHERE TABLE_NAME = 'TGFCAB'
    AND COLUMN_NAME = 'CODTIPVENDA'
    AND DATA_PRECISION = 5;
  
  IF P_COUNT > 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE TGFMGC_TMP ADD CODTIPVENDA NUMBER(5) DEFAULT 0 NOT NULL';
  ELSE
    EXECUTE IMMEDIATE 'ALTER TABLE TGFMGC_TMP ADD CODTIPVENDA NUMBER(10) DEFAULT 0 NOT NULL';
  END IF;
END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 02/03/2018 17:48:35
Num.Script: 50881-0-0
Nro. O.S. : 1128908
Nome      : Dropa - PK_TGFMGC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropa - PK_TGFMGC
NomeObjeto: PK_TGFMGC
TipoObjeto: PRIMARY KEY
NomeTabela: TGFMGC
Executar  : SE_EXISTIR
Ocorrencia: 4210002
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFMGC DROP CONSTRAINT PK_TGFMGC
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 02/03/2018 17:48:35
Num.Script: 50882-0-0
Nro. O.S. : 1128908
Nome      : Dropa - PK_TGFMGC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropa - PK_TGFMGC
NomeObjeto: PK_TGFMGC
TipoObjeto: INDEX
NomeTabela: TGFMGC
Executar  : SE_EXISTIR
Ocorrencia: 4210002
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
    BEGIN
        EXECUTE IMMEDIATE 'DROP INDEX PK_TGFMGC';
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END;
END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 02/03/2018 17:48:35
Num.Script: 50883-0-0
Nro. O.S. : 1128908
Nome      : Cria - PK_TGFMGC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - PK_TGFMGC
NomeObjeto: PK_TGFMGC
TipoObjeto: PRIMARY KEY
NomeTabela: TGFMGC
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFMGC ADD CONSTRAINT PK_TGFMGC PRIMARY KEY (CODTIPVENDA, CODCONFIG, CODEMP, REFERENCIA, CODPROD, CONTROLE, CODVEND, CODPARC, CODCENCUS, CODNAT, CODPROJ, CODTIPOPER, CODLOCAL, GOLSINAL, GOLDEV, RECDESP)
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 02/03/2018 17:48:35
Num.Script: 50884-0-0
Nro. O.S. : 1128908
Nome      : Dropa - PK_TGFMGC_TMP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropa - PK_TGFMGC_TMP
NomeObjeto: PK_TGFMGC_TMP
TipoObjeto: PRIMARY KEY
NomeTabela: TGFMGC_TMP
Executar  : SE_EXISTIR
Ocorrencia: 4210002
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFMGC_TMP DROP CONSTRAINT PK_TGFMGC_TMP
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 02/03/2018 17:48:35
Num.Script: 50885-0-0
Nro. O.S. : 1128908
Nome      : Dropa - PK_TGFMGC_TMP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropa - PK_TGFMGC_TMP
NomeObjeto: PK_TGFMGC_TMP
TipoObjeto: INDEX
NomeTabela: TGFMGC_TMP
Executar  : SE_EXISTIR
Ocorrencia: 4210002
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
    BEGIN
        EXECUTE IMMEDIATE 'DROP INDEX PK_TGFMGC_TMP';
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END;
END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 02/03/2018 17:48:35
Num.Script: 50886-0-0
Nro. O.S. : 1128908
Nome      : Cria - PK_TGFMGC_TMP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - PK_TGFMGC_TMP
NomeObjeto: PK_TGFMGC_TMP
TipoObjeto: PRIMARY KEY
NomeTabela: TGFMGC_TMP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFMGC_TMP ADD CONSTRAINT PK_TGFMGC_TMP PRIMARY KEY (CODTIPVENDA, CODCONFIG, CODEMP, REFERENCIA, CODPROD, CONTROLE, CODVEND, CODPARC, CODCENCUS, CODNAT, CODPROJ, CODTIPOPER, CODLOCAL, GOLSINAL, GOLDEV, RECDESP)
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 02/03/2018 17:48:35
Num.Script: 50887-0-0
Nro. O.S. : 1128908
Nome      : Altera - STP_EFETIVA_CONSOLIDACAO_GOL
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - STP_EFETIVA_CONSOLIDACAO_GOL
NomeObjeto: STP_EFETIVA_CONSOLIDACAO_GOL
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210002
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE STP_EFETIVA_CONSOLIDACAO_GOL AS
BEGIN 
  INSERT INTO TGFMGC (CODCENCUS,CODCONFIG,CODEMP,CODLOCAL,CODNAT,CODPARC,CODPROD,CODPROJ,CODTIPOPER,CODVEND,CONTROLE,CODTIPVENDA,CUSTOGER,CUSTOVAR,LUCRO,MARGEMCONTRIB,M3TOTAL,PARTCUSTOFIXO,PESOLIQTOTAL,PESOBRUTOTOTAL,QTDNEGTOTAL,QTDNOTASTOTAL,REFERENCIA,VALORVENDA, PIS, COFINS, GOLSINAL, GOLDEV, RECDESP)
  SELECT                       CODCENCUS,CODCONFIG,CODEMP,CODLOCAL,CODNAT,CODPARC,CODPROD,CODPROJ,CODTIPOPER,CODVEND,CONTROLE,CODTIPVENDA,CUSTOGER,CUSTOVAR,LUCRO,MARGEMCONTRIB,M3TOTAL,PARTCUSTOFIXO,PESOLIQTOTAL,PESOBRUTOTOTAL,QTDNEGTOTAL,QTDNOTASTOTAL,REFERENCIA,VALORVENDA, PIS, COFINS, GOLSINAL, GOLDEV, RECDESP
  FROM TGFMGC_TMP;
  
  EXECUTE IMMEDIATE  'TRUNCATE TABLE TGFMGC_TMP';
END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 02/03/2018 17:48:35
Num.Script: 50888-0-1000
Nro. O.S. : 1128908
Nome      : INSERE - THOOBJ - 5088700
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE STP_EFETIVA_CONSOLIDACAO_GOL
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210002
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'STP_EFETIVA_CONSOLIDACAO_GOL' NOMEOBJ, 50887 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, '4b8c913971073dc278e06561c74964d9' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'STP_EFETIVA_CONSOLIDACAO_GOL' and THO.hashcode = '4b8c913971073dc278e06561c74964d9')
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 19/03/2018 14:17:22
Num.Script: 51451-0-0
Nro. O.S. : 1137095
Nome      : Altera - IDBALSA01
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - IDBALSA01
NomeObjeto: IDBALSA01
TipoObjeto: COLUMN
NomeTabela: TGFCAB
Executar  : SE_EXISTIR
Ocorrencia: 4210002
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFCAB MODIFY IDBALSA01 VARCHAR2(60)
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 19/03/2018 14:17:22
Num.Script: 51452-0-0
Nro. O.S. : 1137095
Nome      : Altera - IDBALSA02
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - IDBALSA02
NomeObjeto: IDBALSA02
TipoObjeto: COLUMN
NomeTabela: TGFCAB
Executar  : SE_EXISTIR
Ocorrencia: 4210002
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFCAB MODIFY IDBALSA02 VARCHAR2(60)
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 19/03/2018 14:17:22
Num.Script: 51453-0-0
Nro. O.S. : 1137095
Nome      : Altera - IDBALSA03
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - IDBALSA03
NomeObjeto: IDBALSA03
TipoObjeto: COLUMN
NomeTabela: TGFCAB
Executar  : SE_EXISTIR
Ocorrencia: 4210002
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFCAB MODIFY IDBALSA03 VARCHAR2(60)
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 02/03/2018 17:48:35
Num.Script: 51458-0-0
Nro. O.S. : 1118184
Nome      : Cria - TGFPRO CODIDCNAE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: CODIDCNAE
TipoObjeto: COLUMN
NomeTabela: TGFPRO
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFPRO ADD CODIDCNAE NUMBER(10)
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 02/03/2018 17:48:35
Num.Script: 51459-0-0
Nro. O.S. : 1118184
Nome      : Cria - TGFEMP AEDFE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: AEDFE
TipoObjeto: COLUMN
NomeTabela: TGFEMP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFEMP ADD AEDFE VARCHAR2(10)
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 19/03/2018 14:17:22
Num.Script: 51479-1-0
Nro. O.S. : 1137095
Nome      : Altera - IDCONTAINERS
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - IDCONTAINERS
NomeObjeto: IDCONTAINERS
TipoObjeto: COLUMN
NomeTabela: TGFCONT
Executar  : SE_EXISTIR
Ocorrencia: 4210002
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFCONT MODIFY IDCONTAINERS VARCHAR2(20)
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 02/03/2018 17:48:35
Num.Script: 51481-0-0
Nro. O.S. : 1147821
Nome      : Cria - TSICID MOTCANCSUBNFSE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: MOTCANCSUBNFSE
TipoObjeto: COLUMN
NomeTabela: TSICID
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TSICID ADD MOTCANCSUBNFSE VARCHAR2(50)
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 02/03/2018 17:48:35
Num.Script: 51482-0-0
Nro. O.S. : 1147821
Nome      : Script - TSICID
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - TSICID
NomeObjeto: TSICID
TipoObjeto: TABLE
NomeTabela: TSICID
Executar  : SE_EXISTIR
Ocorrencia: 4210002
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
    P_COUNT     NUMBER(05);
BEGIN

   SELECT COUNT(*)
   INTO P_COUNT
   FROM TSISCR
   WHERE NME_SCRIPT = '1147821';
    
    IF P_COUNT = 0 THEN
        BEGIN
            EXECUTE IMMEDIATE 'INSERT INTO TSISCR VALUES (''1147821'', ''UPDATE CAMPO MOTCANCSUBNFSE'')';
        
            EXECUTE IMMEDIATE 'UPDATE TSICID SET MOTCANCSUBNFSE = ''1'' WHERE CODMUNFIS IN (2611606, 3304557, 3501608, 2507507, 3144805, 4313375)';

        EXCEPTION
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001,SQLERRM);
        END;
    END IF;

END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 02/03/2018 17:48:35
Num.Script: 51558-0-0
Nro. O.S. : 1152615
Nome      : Insere - URLDOCSISESOCIA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Inserir o parametro
NomeObjeto: URLDOCSISESOCIA
TipoObjeto: PARAMETRO
NomeTabela: TSIPAR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO TSIPAR ( CHAVE, DESCRICAO, CODUSU, MODULO, CLASSE, ABA, TIPO,  TEXTO)  VALUES ( 'URLDOCSISESOCIA', 'URL para documentação do sistema referente ESocial', 0,'F', 'Especiais', 'Geral', 'T', 'https://docs.google.com/document/d/1rxrKoLcT7Qkkv8TVXdoCL_ERy2d1FkGZ1uU5HeaNGQs/edit') 
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 02/03/2018 17:48:35
Num.Script: 51559-0-0
Nro. O.S. : 1152615
Nome      : Insere - URLDOCTECESOCIA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Inserir o parametro
NomeObjeto: URLDOCTECESOCIA
TipoObjeto: PARAMETRO
NomeTabela: TSIPAR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO TSIPAR ( CHAVE, DESCRICAO, CODUSU, MODULO, CLASSE, ABA, TIPO,  TEXTO)  VALUES ( 'URLDOCTECESOCIA', 'URL para documentação técnica referente ESocial', 0,'F', 'Especiais', 'Geral', 'T', 'https://portal.esocial.gov.br/manuais/mos-manual-de-orientacao-do-esocial-vs-2-4.pdf') 
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 02/03/2018 17:48:35
Num.Script: 51570-0-0
Nro. O.S. : 1147821
Nome      : Script - MOTCANCSUBNFSE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - MOTCANCSUBNFSE
NomeObjeto: MOTCANCSUBNFSE
TipoObjeto: COLUMN
NomeTabela: TSICID
Executar  : SE_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN

    EXECUTE IMMEDIATE 'UPDATE TSICID SET MOTCANCSUBNFSE = ''1'' WHERE CODMUNFIS IN (5100201, 5101803, 3106200, 4302105, 3118601, 4106902, 5208707, 3518800, 3520103, 2607901, 3525102, 1100122, 3525904, 1302603, 4115200, 3140803, 2408102, 3303302, 1721000, 4314407, 3543402, 4316808, 3547809, 3548708, 3548807, 3549904, 3165537, 3170107, 4322806, 4323002, 3205200, 3205309)';

    EXECUTE IMMEDIATE 'UPDATE TSICID SET MOTCANCSUBNFSE = ''2'' WHERE CODMUNFIS IN (4314902, 3548906, 3549805)';

    EXECUTE IMMEDIATE 'UPDATE TSICID SET MOTCANCSUBNFSE = ''SB'' WHERE CODMUNFIS = 5214507';

    EXECUTE IMMEDIATE 'UPDATE TSICID SET MOTCANCSUBNFSE = ''MC01'' WHERE CODMUNFIS IN (5107602,4304606)';

    EXECUTE IMMEDIATE 'UPDATE TSICID SET MOTCANCSUBNFSE = ''E501'' WHERE CODMUNFIS = 4307708';

    EXECUTE IMMEDIATE 'UPDATE TSICID SET MOTCANCSUBNFSE = ''E506'' WHERE CODMUNFIS = 4318705';

    EXECUTE IMMEDIATE 'UPDATE TSICID SET MOTCANCSUBNFSE = ''C999'' WHERE CODMUNFIS = 4208203';
    
END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 02/03/2018 17:48:35
Num.Script: 51596-0-0
Nro. O.S. : 1142819
Nome      : Cria - TFPSEQ
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TFPSEQ
NomeObjeto: TFPSEQ
TipoObjeto: TABLE
NomeTabela: TFPSEQ
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPSEQ
(
  CODPREF           NUMBER(5)                          NOT NULL,
  CODEVENTO      NUMBER(5)                          NOT NULL,
  SEQUENCIA        NUMBER(5)                          DEFAULT 1                     NOT NULL,
  DTALTER           DATE                                    DEFAULT SYSDATE               NOT NULL,
  CODUSU            NUMBER(5),
  CONSTRAINT PK_TFPSEQ PRIMARY KEY (CODPREF, CODEVENTO),
  CONSTRAINT FK_TFPSEQ_CODUSU_TSIUSU FOREIGN KEY (CODUSU) REFERENCES TSIUSU (CODUSU),
  CONSTRAINT FK_TFPSEQ_TFPPRE FOREIGN KEY (CODPREF) REFERENCES TFPPRE (CODPREF)
)
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 02/03/2018 17:48:35
Num.Script: 51602-0-0
Nro. O.S. : 1095995
Nome      : Cria - TGFCOM VLRRESIDUOCOM
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRRESIDUOCOM
TipoObjeto: COLUMN
NomeTabela: TGFCOM
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFCOM ADD VLRRESIDUOCOM FLOAT DEFAULT 0 NOT NULL 
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 02/03/2018 17:48:35
Num.Script: 51632-0-0
Nro. O.S. : 1154727
Nome      : Ajusta - TFPFOR CODFORM 1
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Ajusta - TFPFOR CODFORM 1
NomeObjeto: CODFORM
TipoObjeto: COLUMN
NomeTabela: TFPFOR
Executar  : SE_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
  P_CODFORMULA      TFPFOR.CODFORM%TYPE;
  P_DESCRFORMULA    TFPFOR.DESCRFORM%TYPE;
  P_DESCRFORMNOVO   TFPFOR.DESCRFORM%TYPE;
  P_FORMULA         VARCHAR2(4000);
  P_FORMULANOVO     VARCHAR2(4000);
  P_CODFORMIND      VARCHAR2(4000);
  P_CODFORMINDNOVO  VARCHAR2(4000);
  P_SANKHYA         TFPFOR.SANKHYA%TYPE;
BEGIN
  
  P_CODFORMULA := 1;
  
  BEGIN
    SELECT FORMULA, DESCRFORM, CODFORMIND, SANKHYA
    INTO P_FORMULA, P_DESCRFORMULA, P_CODFORMIND, P_SANKHYA
    FROM TFPFOR
    WHERE CODFORM = P_CODFORMULA;
  EXCEPTION WHEN NO_DATA_FOUND THEN
    P_FORMULA := 'A';
    P_CODFORMIND := NULL;
    P_DESCRFORMULA := NULL;
    P_SANKHYA := 'S'; 
  END;
  
  IF P_SANKHYA = 'N' THEN
    RETURN;
  END IF;
  
  P_DESCRFORMNOVO := 'Salario Base';
  P_FORMULANOVO := 'IF((&Tipfol =''N'') And (QueFuncionario.TIPSAL <> 5) And (fTemNaLista(formatnumeric(''00'',QueFuncionario.VINCULO),''02,30,55,80,90,99'') = ''N''),((QueFuncionario.SALBASE / &DiaDivSalBase) * &DIASTRA), 0)';
  P_CODFORMINDNOVO := '&DIASTRA';
  
  IF P_FORMULA = 'A' THEN
    INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
      VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
             'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO);
    
    IF P_CODFORMINDNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO);
    END IF;
    
    IF P_DESCRFORMNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO);
    END IF;
    
    INSERT INTO TFPFOR (CODFORM, DESCRFORM, SANKHYA, FORMULA, CODFORMIND)
      VALUES(P_CODFORMULA, P_DESCRFORMNOVO, 'S', P_FORMULANOVO, P_CODFORMINDNOVO);
    
  ELSIF (P_FORMULANOVO <> P_FORMULA OR 
         NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') OR 
         NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z')) 
  THEN
    
    IF P_FORMULANOVO <> P_FORMULA THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO, P_FORMULA);
    END IF;
    
    IF NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO, P_CODFORMIND);
    END IF;
    
    IF NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO, P_DESCRFORMULA);
    END IF;
    
    UPDATE TFPFOR
    SET FORMULA = P_FORMULANOVO
    , DESCRFORM = P_DESCRFORMNOVO
    , CODFORMIND = P_CODFORMINDNOVO
    , FORMULANTERIOR = CASE WHEN FORMULA <> P_FORMULANOVO THEN P_FORMULA ELSE FORMULANTERIOR END
    , DTALTER = SYSDATE
    , CODUSU = 0
    WHERE CODFORM = P_CODFORMULA
    AND SANKHYA = 'S';
    
  END IF;
  
END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 05/03/2018 19:19:04
Num.Script: 51781-0-0
Nro. O.S. : 1147664
Nome      : Cria - TFPFUN SITESOCIAL
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: SITESOCIAL
TipoObjeto: COLUMN
NomeTabela: TFPFUN
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TFPFUN ADD SITESOCIAL CHAR(1)';
   EXECUTE IMMEDIATE 'ALTER TABLE TFPFUN ADD  CONSTRAINT CKC_SITESOCIAL_TFPFUN CHECK (SITESOCIAL IN (''P'', ''O'', ''5'', ''6'', ''T'') OR SITESOCIAL IS NULL )';
END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 05/03/2018 19:19:04
Num.Script: 51782-0-0
Nro. O.S. : 1147664
Nome      : Cria - TFPEMP DTCARGAINICIAL
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: DTCARGAINICIAL
TipoObjeto: COLUMN
NomeTabela: TFPEMP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPEMP ADD DTCARGAINICIAL DATE
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 05/03/2018 19:19:04
Num.Script: 51783-0-0
Nro. O.S. : 1147664
Nome      : Cria - TFPFUN CODCATEGTRABCEDIDO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: CODCATEGTRABCEDIDO
TipoObjeto: COLUMN
NomeTabela: TFPFUN
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPFUN ADD CODCATEGTRABCEDIDO DECIMAL(5, 0)
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 05/03/2018 19:19:04
Num.Script: 51784-0-0
Nro. O.S. : 1147664
Nome      : Cria - FK_CATEGTRABCEDIDO_TFPCTG
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - FK_CATEGTRABCEDIDO_TFPCTG
NomeObjeto: FK_CATEGTRABCEDIDO_TFPCTG
TipoObjeto: FOREIGN KEY
NomeTabela: TFPFUN
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPFUN ADD CONSTRAINT FK_CATEGTRABCEDIDO_TFPCTG 
  FOREIGN KEY (CODCATEGTRABCEDIDO) 
  REFERENCES TFPCTG (CODCATEGESOCIAL)
  /
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 05/03/2018 19:19:04
Num.Script: 51785-0-0
Nro. O.S. : 1147664
Nome      : Cria - TFPFUN TPREGTRABCED
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: TPREGTRABCED
TipoObjeto: COLUMN
NomeTabela: TFPFUN
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TFPFUN ADD TPREGTRABCED DECIMAL(5, 0)';
   EXECUTE IMMEDIATE 'ALTER TABLE TFPFUN ADD  CONSTRAINT CKC_TPREGTRABCED_TFPFUN CHECK (TPREGTRABCED IN (1,2) OR TPREGTRABCED IS NULL )';
END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 05/03/2018 19:19:04
Num.Script: 51786-0-0
Nro. O.S. : 1147664
Nome      : Cria - TFPFUN TPREGPREVCED
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: TPREGPREVCED
TipoObjeto: COLUMN
NomeTabela: TFPFUN
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TFPFUN ADD TPREGPREVCED DECIMAL(5, 0)';
   EXECUTE IMMEDIATE 'ALTER TABLE TFPFUN ADD  CONSTRAINT CKC_TPREGPREVCED_TFPFUN CHECK (TPREGPREVCED IN (1,2,3) OR TPREGPREVCED IS NULL )';
END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 05/03/2018 19:19:04
Num.Script: 51787-0-0
Nro. O.S. : 1147664
Nome      : Cria - TFPFUN_I04
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TFPFUN_I04
NomeObjeto: TFPFUN_I04
TipoObjeto: INDEX
NomeTabela: TFPFUN
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN 
    BEGIN 
    EXECUTE IMMEDIATE 'CREATE INDEX TFPFUN_I04 ON TFPFUN(CODCATEGESOCIAL, SITESOCIAL)';
    EXCEPTION 
     WHEN OTHERS THEN 
         NULL;
    END;
END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 05/03/2018 19:19:04
Num.Script: 51788-0-0
Nro. O.S. : 1147664
Nome      : Cria - ESOCIAL_PKG
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - ESOCIAL_PKG
NomeObjeto: ESOCIAL_PKG
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SEMPRE
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PACKAGE ESOCIAL_PKG AS
  V_AMBIENTE                CHAR(1) := ' ';
  V_REFERENCIA              DATE;
  V_SEQUENCIA_ATUAL         NUMBER(10);
END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 05/03/2018 19:19:04
Num.Script: 51792-0-0
Nro. O.S. : 1147664
Nome      : Script - TFPMON
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - TFPMON
NomeObjeto: TFPMON
TipoObjeto: TABLE
NomeTabela: TFPMON
Executar  : SE_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE P_COUNT NUMBER(10);
BEGIN
    SELECT COUNT(1) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-2200';
    
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO)
                    VALUES ('S-2200', 'TFPS2200', 'NRORECIBO', 'R');
        
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW)
            VALUES ('S-2200', 'TFPS2200', 'NRORECIBO', 'C','VGF_EVENTO_S2200');

        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
                    VALUES ('S-2200', 'TFPS2200_DEPENDENTE', 'NRORECIBO', 'C','VGF_EVENTO_S2200_DEPENDENTE', 'TFPS2200');

        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
                    VALUES ('S-2200', 'TFPS2200_HORARIO', 'NRORECIBO', 'C','VGF_EVENTO_S2200_HORARIO','TFPS2200');
    END IF;
END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 05/03/2018 19:19:04
Num.Script: 51794-0-0
Nro. O.S. : 1147664
Nome      : Cria - TFPMON AMBTESTE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: AMBTESTE
TipoObjeto: COLUMN
NomeTabela: TFPMON
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TFPMON ADD AMBTESTE CHAR(1)';
   EXECUTE IMMEDIATE 'UPDATE TFPMON SET AMBTESTE = ''L''';
   EXECUTE IMMEDIATE 'ALTER TABLE TFPMON ADD  CONSTRAINT CKC_AMBTESTE_TFPMON CHECK (AMBTESTE IN (''P'',''L''))';
   EXECUTE IMMEDIATE 'ALTER TABLE TFPMON MODIFY AMBTESTE DEFAULT ''L'' NOT NULL';
END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 05/03/2018 19:19:05
Num.Script: 51795-0-0
Nro. O.S. : 1147664
Nome      : Script - AMBPRODUCAO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - AMBPRODUCAO
NomeObjeto: AMBPRODUCAO
TipoObjeto: COLUMN
NomeTabela: TFPMON
Executar  : SE_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
    UPDATE TFPMON SET AMBPRODUCAO = 'L' WHERE TIPO = 'C' AND NOMEEVENTO IN ('S-1000', 'S-1005', 'S-1010', 'S-1020', 'S-1030', 'S-1035', 'S-1040', 'S-1050', 'S-1070', 'S-2200');
END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 05/03/2018 19:19:05
Num.Script: 51796-0-0
Nro. O.S. : 1147664
Nome      : Insere - FPESOCIALDEPTOM
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Inserir o parametro
NomeObjeto: FPESOCIALDEPTOM
TipoObjeto: PARAMETRO
NomeTabela: TSIPAR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO TSIPAR ( CHAVE, DESCRICAO, CODUSU, MODULO, CLASSE, ABA, TIPO,  LOGICO)  VALUES ( 'FPESOCIALDEPTOM', 'eSocial com Obras por Departamento e Tomador?', 0,'F', 'Diversas', 'Geral',  'L', 'N') 
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 05/03/2018 19:19:05
Num.Script: 51797-0-0
Nro. O.S. : 1147664
Nome      : Cria - TRG_DLT_EVTLOTE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TRG_DLT_EVTLOTE
NomeObjeto: TRG_DLT_EVTLOTE
TipoObjeto: TRIGGER
NomeTabela: EVTLOTE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_DLT_EVTLOTE
BEFORE DELETE ON EVTLOTE
BEGIN
  RAISE_APPLICATION_ERROR(-20101, 'NÃO É PERMITIDO DELETAR AS INFORMAÇÕES DE ENVIO PARA O ESOCIAL. ESTAS TAMBÉM SÃO UTILIZADAS COMO LOG.');  
END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 05/03/2018 19:19:05
Num.Script: 51798-0-0
Nro. O.S. : 1147664
Nome      : Cria - TRG_DLT_EVTFILA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TRG_DLT_EVTFILA
NomeObjeto: TRG_DLT_EVTFILA
TipoObjeto: TRIGGER
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_DLT_EVTFILA
BEFORE DELETE ON EVTFILA
BEGIN
  RAISE_APPLICATION_ERROR(-20101, 'NÃO É PERMITIDO DELETAR AS INFORMAÇÕES DE ENVIO PARA O ESOCIAL. ESTAS TAMBÉM SÃO UTILIZADAS COMO LOG.');  
END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 05/03/2018 19:19:05
Num.Script: 51799-0-0
Nro. O.S. : 1147664
Nome      : Cria - SNK_GET_TPAMB_ESOCIAL
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - SNK_GET_TPAMB_ESOCIAL
NomeObjeto: SNK_GET_TPAMB_ESOCIAL
TipoObjeto: FUNCTION
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE FUNCTION SNK_GET_TPAMB_ESOCIAL
RETURN CHAR
AS
BEGIN
    RETURN ESOCIAL_PKG.V_AMBIENTE;
END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 05/03/2018 19:19:05
Num.Script: 51800-0-0
Nro. O.S. : 1147664
Nome      : Cria - SNK_GET_SEQ_ATUAL_ESOCIAL
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - SNK_GET_SEQ_ATUAL_ESOCIAL
NomeObjeto: SNK_GET_SEQ_ATUAL_ESOCIAL
TipoObjeto: FUNCTION
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE FUNCTION SNK_GET_SEQ_ATUAL_ESOCIAL
RETURN NUMBER
AS
BEGIN
    RETURN ESOCIAL_PKG.V_SEQUENCIA_ATUAL;
END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 05/03/2018 19:19:05
Num.Script: 51801-0-0
Nro. O.S. : 1147664
Nome      : Cria - SNK_GET_DTREF_ESOCIAL
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - SNK_GET_DTREF_ESOCIAL
NomeObjeto: SNK_GET_DTREF_ESOCIAL
TipoObjeto: FUNCTION
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE FUNCTION SNK_GET_DTREF_ESOCIAL
RETURN DATE
AS
BEGIN
    RETURN ESOCIAL_PKG.V_REFERENCIA;
END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 05/03/2018 19:19:06
Num.Script: 51802-0-0
Nro. O.S. : 1147664
Nome      : Cria - SNK_SET_ESOCIAL_PKG
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - SNK_SET_ESOCIAL_PKG
NomeObjeto: SNK_SET_ESOCIAL_PKG
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_SET_ESOCIAL_PKG(P_AMBIENTE                CHAR,
                                                P_REFERENCIA              DATE,
                                                P_SEQUENCIA_ATUAL         NUMBER)
AS
BEGIN
    ESOCIAL_PKG.V_AMBIENTE := P_AMBIENTE;
    ESOCIAL_PKG.V_REFERENCIA := P_REFERENCIA;
    ESOCIAL_PKG.V_SEQUENCIA_ATUAL := P_SEQUENCIA_ATUAL; 
END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 05/03/2018 19:19:06
Num.Script: 51803-0-0
Nro. O.S. : 1147664
Nome      : Cria - SNK_SET_TPAMB_ESOCIAL
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - SNK_SET_TPAMB_ESOCIAL
NomeObjeto: SNK_SET_TPAMB_ESOCIAL
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_SET_TPAMB_ESOCIAL(P_AMBIENTE   CHAR)
AS
BEGIN
    ESOCIAL_PKG.V_AMBIENTE := P_AMBIENTE;
END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 05/03/2018 19:19:06
Num.Script: 51804-0-0
Nro. O.S. : 1147664
Nome      : Altera - SNK_GET_COLUMNS_TABLE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - SNK_GET_COLUMNS_TABLE
NomeObjeto: SNK_GET_COLUMNS_TABLE
TipoObjeto: FUNCTION
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE FUNCTION SNK_GET_COLUMNS_TABLE(P_TABLE VARCHAR2, P_COLUMNNS_EXCECAO VARCHAR2 DEFAULT '*')
RETURN VARCHAR2
IS  
  P_COLUMN   VARCHAR2(30);
  P_RESULT   VARCHAR2(4000);
  CURSOR CUR_COLUMNS IS
    SELECT COLUMN_NAME
    FROM USER_TAB_COLUMNS
    WHERE UPPER(TABLE_NAME) = UPPER(P_TABLE)
      AND INSTR(P_COLUMNNS_EXCECAO, COLUMN_NAME) = 0
    ORDER BY COLUMN_ID;  
BEGIN  
  P_RESULT := ' ';
  P_COLUMN := '';
  OPEN CUR_COLUMNS;
  LOOP
    FETCH CUR_COLUMNS INTO P_COLUMN;
  EXIT WHEN CUR_COLUMNS%NOTFOUND;
  IF P_RESULT = ' ' THEN
    P_RESULT := P_COLUMN;
  ELSE
    P_RESULT := P_RESULT ||', '||P_COLUMN;
  END IF;
  END LOOP;
  CLOSE CUR_COLUMNS;
  RETURN P_RESULT; 
END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 06/03/2018 11:01:56
Num.Script: 51805-0-0
Nro. O.S. : 1147664
Nome      : Altera - SNK_PROCESSA_DADOS_ESOCIAL
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - SNK_PROCESSA_DADOS_ESOCIAL
NomeObjeto: SNK_PROCESSA_DADOS_ESOCIAL
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_PROCESSA_DADOS_ESOCIAL (
   P_CODEMPMATRIZ          NUMBER,
   P_DTREF                 DATE,
   P_TPAMB                 CHAR,                       /*P= PRODUCAO T=TESTE*/
   P_TIPDADOS              CHAR, /*P_TIPDADOS T= TODOS C=CADOSTRO M=MOVIMENTO*/
   P_EVENTO                VARCHAR2 := 'TODOS',
   P_SEQUENCIA_ATUAL       NUMBER,
   P_NOMETAB               VARCHAR2 := NULL,    /*UTILIZADO NA RECURSIVIDADE*/
   P_SEQUENCIA_PAI         VARCHAR2 := NULL,    /*UTILIZADO NA RECURSIVIDADE*/
   P_RESULT            OUT NUMBER)
AS
   P_SEQUENCIA_OLD          NUMBER (10);
   P_SEQUENCIA_NEW          NUMBER (10);
   P_DTREF_OLD              DATE;
   P_COLUNAS_PADRAO         VARCHAR2 (4000)
      := 'CODEMP, DTREF, STATUS, ACAO, NRORECIBO, NRORECIBO_ANT, SEQUENCIA, DTALTERACAO, DTEF, DSCALT, JUSTPRORR, MTVALTER, CONTROLE, TPAMB';
   queSql                   VARCHAR2 (8000);
   P_SEQUENCIA_DEL          NUMBER (10);
   P_COLUMNS                VARCHAR2 (4000);
   P_INSERT_COLUMNS         VARCHAR2 (4000);
   P_INSERT_VALUES          VARCHAR2 (4000);
   P_COLUMNS_PARAMETER      VARCHAR2 (4000)
      := 'CODEMP, DTREF, SEQUENCIA, STATUS, ACAO,NRORECIBO, NRORECIBO_ANT, ';
   P_COLUMNS_TO_PARAMETER   VARCHAR2 (4000)
      := 'CODEMP;, :DTREF, :SEQUENCIA, :STATUS, :ACAO,:NRORECIBO, :NRORECIBO_ANT, ';
   P_COL_PAD_FILHOS         VARCHAR2 (4000) := 'CODEMP, DTREF, SEQUENCIA, ';
   P_COL_PAD_FILHOS_PARAM   VARCHAR2 (4000) := 'CODEMP, :DTREF, :SEQUENCIA, ';
   P_TABLE_PAI              VARCHAR2 (100);
   P_VALID_ALTER            BOOLEAN := FALSE;
   P_COUNT                  NUMBER (10);
   P_DTLOG                  DATE;
   P_SEQLOG                 NUMBER (10);
   P_MSG                    VARCHAR2 (4000) := ' ';
BEGIN

   IF P_NOMETAB IS NULL
   THEN
      FOR EVE
         IN (  SELECT NOMETAB,
                      NOMEEVENTO,
                      NOMEVIEW,
                      NOMEEVEVENTOPAI
                 FROM TFPMON
                WHERE     TIPO = 'C'
                      AND (P_EVENTO = 'TODOS' OR NOMEEVENTO = P_EVENTO)
                      AND NOMEEVEVENTOPAI IS NULL
                      AND (   (P_TPAMB = 'P' AND AMBPRODUCAO = 'L')
                           OR (P_TPAMB = 'T' AND AMBTESTE = 'L'))
             ORDER BY NOMETAB--GROUP BY NOMETAB, NOMEEVENTO, NOMEVIEW, NOMEEVEVENTOPAI
            )
      LOOP
         queSql :=
               ' SELECT COUNT(1)  
                        FROM '
            || EVE.NOMETAB
            || '
                        WHERE CODEMP = :CODEMP
                          AND DTREF = :DTREF
                          AND TPAMB = :TPAMB
                          AND STATUS = ''I''';

         EXECUTE IMMEDIATE queSql
            INTO P_COUNT
            USING P_CODEMPMATRIZ, P_DTREF, P_TPAMB;

         IF P_COUNT > 0
         THEN
            RAISE_APPLICATION_ERROR (
               -20101,
               'Não é possivel gerar dados do e-social se existir eventos em processo de envio.');
         END IF;

         queSql :=
               ' SELECT MAX(SEQUENCIA)  
                        FROM '
            || EVE.NOMETAB
            || '
                        WHERE CODEMP = :CODEMP
                          AND DTREF = :DTREF
                          AND TPAMB = :TPAMB
                          AND STATUS = ''P''';

         EXECUTE IMMEDIATE queSql
            INTO P_SEQUENCIA_DEL
            USING P_CODEMPMATRIZ, P_DTREF, P_TPAMB;

         IF P_SEQUENCIA_DEL > 0 THEN /* SE EXISTE STATUS IGUAL A 'P' PODEMOS DELETAR, JA QUE MANDAMOS TODAS AS INFORMACOES DE UMA SO VEZ! */
            FOR CUR_DEL IN (SELECT NOMETAB
                              FROM TFPMON
                             WHERE NOMEEVEVENTOPAI IS NULL AND TIPO = 'C')
            LOOP
               queSql :=
                     ' DELETE FROM '
                  || CUR_DEL.NOMETAB
                  || '
                                WHERE CODEMP = :CODEMP
                                  AND DTREF = :DTREF
                                  AND TPAMB = :TPAMB
                                  AND SEQUENCIA = :SEQUENCIA';

               EXECUTE IMMEDIATE queSql
                  USING P_CODEMPMATRIZ,
                        P_DTREF,
                        P_TPAMB,
                        P_SEQUENCIA_DEL;
            END LOOP;

            P_SEQUENCIA_NEW := P_SEQUENCIA_ATUAL;
            EXIT;
         END IF;
      END LOOP;
   ELSE
      P_SEQUENCIA_NEW := P_SEQUENCIA_PAI;
   END IF;

   IF P_SEQUENCIA_NEW IS NULL THEN /*SE P_SEQUENCIA_NEW ESTA NULL, E PORQUE NAO DELETOU DAGOS, LOGO TEMOS QUE GERAR UMA SEQUENCIA NOVA.*/
      P_SEQUENCIA_NEW := P_SEQUENCIA_ATUAL + 1;
   END IF;
   
   IF P_NOMETAB IS NULL THEN
    SNK_SET_ESOCIAL_PKG(P_TPAMB, P_DTREF, CASE WHEN NVL(P_SEQUENCIA_DEL, 0) > 0 THEN P_SEQUENCIA_ATUAL - 1 ELSE P_SEQUENCIA_ATUAL END);
   END IF;

   FOR EVE
      IN (  SELECT MON.NOMETAB,
                   MON.NOMEEVENTO,
                   MON.NOMEVIEW,
                   MON.NOMEEVEVENTOPAI,
                   MON.TIPO
              FROM TFPMON MON
             WHERE    (P_NOMETAB IS NOT NULL AND MON.NOMETAB = P_NOMETAB)
                   OR     (    P_NOMETAB IS NULL
                           AND NOMEEVEVENTOPAI IS NULL
                           AND (P_EVENTO = 'TODOS' OR MON.NOMEEVENTO = P_EVENTO)
                           AND (P_TIPDADOS = 'T' OR MON.TIPO = P_TIPDADOS))
                      AND TIPO = 'C'
                      AND (   (P_TPAMB = 'P' AND MON.AMBPRODUCAO = 'L')
                           OR (P_TPAMB = 'T' AND MON.AMBTESTE = 'L'))
          GROUP BY MON.NOMETAB,
                   MON.NOMEEVENTO,
                   MON.NOMEVIEW,
                   MON.NOMEEVEVENTOPAI,
                   MON.TIPO
          ORDER BY MON.NOMETAB)
   LOOP
      P_MSG := 'EVENTO: ' || EVE.NOMEEVENTO;

      IF EVE.TIPO IN ('T', 'C')
      THEN
         P_INSERT_COLUMNS := SNK_GET_COLUMNS_TABLE (EVE.NOMETAB);
         P_INSERT_VALUES := P_INSERT_COLUMNS;
         P_INSERT_VALUES :=
            REPLACE (P_INSERT_VALUES, 'SEQUENCIA', TO_CHAR (P_SEQUENCIA_NEW));
         P_INSERT_VALUES :=
            REPLACE (
               P_INSERT_VALUES,
               'DTREF',
                  'TO_DATE('''
               || SNK_FORMAT_DATE (P_DTREF, 'DD/MM/YYYY HH24:MI:SS')
               || ''', ''DD/MM/YYYY HH24:MI:SS'')');
         P_INSERT_VALUES :=
            REPLACE (P_INSERT_VALUES, 'TPAMB', '''' || P_TPAMB || '''');

         IF EVE.NOMEEVEVENTOPAI IS NULL
         THEN
            P_TABLE_PAI := EVE.NOMETAB;

            IF P_SEQUENCIA_NEW > 1
            THEN
               --P_SEQUENCIA_OLD := P_SEQUENCIA_NEW - 1; --Nao pode ser assim, pois na primeira geracao, pode nao ter gerado algum evento.
               queSql :=
                     ' SELECT NVL(MAX(SEQUENCIA),0)  
                                FROM '
                  || EVE.NOMETAB
                  || '
                                WHERE CODEMP = :CODEMP
                                  AND DTREF = :DTREF
                                  AND TPAMB = :TPAMB
                                  AND SEQUENCIA < :SEQUENCIA_NEW';

               EXECUTE IMMEDIATE queSql
                  INTO P_SEQUENCIA_OLD
                  USING P_CODEMPMATRIZ,
                        P_DTREF,
                        P_TPAMB,
                        P_SEQUENCIA_NEW;

               P_DTREF_OLD := P_DTREF;
            ELSE
               queSql :=
                     ' SELECT NVL(MAX(DTREF), :DTMOV)
                                FROM '
                  || EVE.NOMETAB
                  || '
                                WHERE CODEMP = :CODEMP
                                  AND DTREF < :DTREF
                                  AND TPAMB = :TPAMB';

               EXECUTE IMMEDIATE queSql
                  INTO P_DTREF_OLD
                  USING P_DTREF,
                        P_CODEMPMATRIZ,
                        P_DTREF,
                        P_TPAMB;

               P_DTREF_OLD := NVL (P_DTREF_OLD, P_DTREF);

               IF P_DTREF_OLD <> P_DTREF
               THEN
                  queSql :=
                        ' SELECT NVL(MAX(SEQUENCIA),0)
                                    FROM '
                     || EVE.NOMETAB
                     || '
                                    WHERE CODEMP = :CODEMP
                                      AND DTREF = :DTREF
                                      AND TPAMB = :TPAMB';

                  EXECUTE IMMEDIATE queSql
                     INTO P_SEQUENCIA_OLD
                     USING P_CODEMPMATRIZ, P_DTREF_OLD, P_TPAMB;
               ELSE
                  P_SEQUENCIA_OLD := P_SEQUENCIA_NEW;
               END IF;
            END IF;

            IF P_DTREF_OLD <> P_DTREF OR P_SEQUENCIA_OLD <> P_SEQUENCIA_NEW
            THEN
               queSql := NULL;
               SNK_GET_VALID_ALTER_ESOCIAL (P_EVENTO,
                                            P_COLUNAS_PADRAO,
                                            P_CODEMPMATRIZ,
                                            P_DTREF_OLD,
                                            P_SEQUENCIA_OLD,
                                            P_TPAMB,
                                            NULL                /*NOMETABPAI*/
                                                ,
                                            EVE.NOMETAB,
                                            EVE.NOMEVIEW);
            END IF;

            P_INSERT_VALUES :=
               REPLACE (P_INSERT_VALUES, 'CONTROLE', '''I'' AS CONTROLE');
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'CHAVE', 'V.CHAVE');
            P_INSERT_VALUES :=
               REPLACE (
                  P_INSERT_VALUES,
                  'NRORECIBO,',
                  'CASE WHEN ANT.CHAVE IS NULL OR ANT.CONTROLE = ''I'' THEN ANT.NRORECIBO ELSE NULL END,');
            P_INSERT_VALUES :=
               REPLACE (
                  P_INSERT_VALUES,
                  'NRORECIBO_ANT,',
                  'CASE WHEN ANT.CHAVE IS NULL OR ANT.CONTROLE = ''I'' THEN ANT.NRORECIBO_ANT ELSE ANT.NRORECIBO END,'); /* TEM QUE SER PRIMEIRO POR QUE EXISTE NRORECIBO E O NRORECIBO_ANT */
            P_INSERT_VALUES :=
               REPLACE (
                  P_INSERT_VALUES,
                  'STATUS',
                  'CASE WHEN NVL(ANT.CONTROLE, '' '') = ''I'' AND NVL(ANT.STATUS, '' '') = ''F'' THEN ''F'' ELSE ''P'' END');
            P_INSERT_VALUES :=
               REPLACE (
                  P_INSERT_VALUES,
                  ' ACAO',
                  'CASE WHEN ANT.NRORECIBO IS NULL AND ANT.NRORECIBO_ANT IS NULL THEN ''I'' WHEN ANT.STATUS = ''F'' THEN NVL(ANT.CONTROLE, ''I'') ELSE NVL(ANT.ACAO, ''I'') END');

            queSql :=
                  'INSERT INTO '
               || EVE.NOMETAB
               || ' 
                               SELECT '
               || P_INSERT_VALUES
               || '
                               FROM '
               || EVE.NOMEVIEW
               || ' V
                                    LEFT JOIN (SELECT CHAVE
                                                    , STATUS
                                                    , NRORECIBO
                                                    , NRORECIBO_ANT
                                                    , ACAO
                                                    , CONTROLE
                                               FROM '
               || EVE.NOMETAB
               || ' OLD
                                               WHERE OLD.CODEMP = '
               || TO_CHAR (P_CODEMPMATRIZ)
               || '
                                     AND OLD.DTREF = TO_DATE('''
               || SNK_FORMAT_DATE (P_DTREF_OLD, 'DD/MM/YYYY HH24:MI:SS')
               || ''', ''DD/MM/YYYY HH24:MI:SS'')
                                                 AND OLD.SEQUENCIA = '
               || TO_CHAR (P_SEQUENCIA_OLD)
               || '
                                                 AND OLD.TPAMB = '''
               || P_TPAMB
               || ''') ANT ON ANT.CHAVE = V.CHAVE
                               WHERE CODEMP = '
               || TO_CHAR (P_CODEMPMATRIZ);

            EXECUTE IMMEDIATE queSql;
         ELSE                                 /*SO ENTRA AQUI PARA OS FILHOS*/
            queSql :=
                  '
                          INSERT INTO '
               || EVE.NOMETAB
               || ' 
                              SELECT '
               || P_INSERT_VALUES
               || '
                              FROM '
               || EVE.NOMEVIEW
               || '
                              WHERE CODEMP = :CODEMPMATRIZ';
            
            EXECUTE IMMEDIATE queSql USING P_CODEMPMATRIZ;
         END IF;
      END IF;

      -- IF P_TIPDADOS IN ('T', 'M') THEN

      --END IF;

      /* INCLUSAO DAS LINHAS DE EXCLUSAO */
      IF     (P_DTREF_OLD <> P_DTREF OR P_SEQUENCIA_OLD <> P_SEQUENCIA_NEW)
         AND (P_DTREF_OLD IS NOT NULL AND P_SEQUENCIA_OLD IS NOT NULL)
      THEN
         P_INSERT_COLUMNS := SNK_GET_COLUMNS_TABLE (EVE.NOMETAB);
         P_INSERT_VALUES := P_INSERT_COLUMNS;
         P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' ', '');
         P_INSERT_VALUES := 'O.' || REPLACE (P_INSERT_VALUES, ',', ',O.');
         P_INSERT_VALUES :=
            REPLACE (P_INSERT_VALUES,
                     'O.SEQUENCIA',
                     TO_CHAR (P_SEQUENCIA_NEW));
         P_INSERT_VALUES :=
            REPLACE (P_INSERT_VALUES, 'O.TPAMB', '''' || P_TPAMB || '''');
         P_INSERT_VALUES :=
            REPLACE (
               P_INSERT_VALUES,
               'O.DTREF',
                  'TO_DATE('''
               || SNK_FORMAT_DATE (P_DTREF, 'DD/MM/YYYY HH24:MI:SS')
               || ''', ''DD/MM/YYYY HH24:MI:SS'')');

         IF EVE.NOMEEVEVENTOPAI IS NULL
         THEN
            P_INSERT_VALUES :=
               REPLACE (P_INSERT_VALUES, 'O.CONTROLE', '''E''');
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.CHAVE', 'O.CHAVE');
            P_INSERT_VALUES :=
               REPLACE (P_INSERT_VALUES, 'O.NRORECIBO,', 'NULL,');
            P_INSERT_VALUES :=
               REPLACE (P_INSERT_VALUES, 'O.NRORECIBO_ANT,', 'O.NRORECIBO,'); /* TEM QUE SER PRIMEIRO POR QUE EXISTE NRORECIBO E O NRORECIBO_ANT */
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.STATUS', '''P''');
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.ACAO', '''E''');

            queSql :=
                  ' MERGE INTO '
               || EVE.NOMETAB
               || ' N
                                USING (SELECT '
               || P_INSERT_COLUMNS
               || ' 
                                       FROM '
               || EVE.NOMETAB
               || ' 
                                       WHERE CODEMP = '
               || TO_CHAR (P_CODEMPMATRIZ)
               || '
                                         AND DTREF = TO_DATE('''
               || SNK_FORMAT_DATE (P_DTREF_OLD, 'DD/MM/YYYY HH24:MI:SS')
               || ''', ''DD/MM/YYYY HH24:MI:SS'')
                                         AND SEQUENCIA = '
               || TO_CHAR (P_SEQUENCIA_OLD)
               || '
                                         AND TPAMB = '''
               || P_TPAMB
               || '''
                                         AND (('''
               || EVE.NOMEEVENTO
               || ''' NOT IN (''S-2205'', ''S-2206'')) OR
                                              ('''
               || EVE.NOMEEVENTO
               || ''' = ''S-2205'' AND EXISTS(SELECT 1 FROM TFPFUN WHERE CODEMP||'':''||CODFUNC = CHAVE AND SITESOCIAL IN (''5'', ''T'') )) OR
                                              ('''
               || EVE.NOMEEVENTO
               || ''' = ''S-2206'' AND EXISTS(SELECT 1 FROM TFPFUN WHERE CODEMP||'':''||CODFUNC = CHAVE AND SITESOCIAL IN (''6'', ''T'') ))  
                                             )
                                         AND ((STATUS = ''F'' AND NRORECIBO IS NOT NULL) OR (STATUS <> ''F'' AND ACAO = ''E'' AND NRORECIBO IS NULL) OR (STATUS <> ''F'' AND ACAO <> ''E'' AND NRORECIBO_ANT IS NOT NULL) )
                                          ) O 
                                ON (N.CODEMP = O.CODEMP AND
                                    N.DTREF = TO_DATE('''
               || SNK_FORMAT_DATE (P_DTREF, 'DD/MM/YYYY HH24:MI:SS')
               || ''', ''DD/MM/YYYY HH24:MI:SS'') AND
                                    N.SEQUENCIA = '
               || TO_CHAR (P_SEQUENCIA_NEW)
               || ' AND 
                                    N.TPAMB = '''
               || P_TPAMB
               || ''' AND 
                                    N.CHAVE = O.CHAVE 
                                    )
                                WHEN NOT MATCHED THEN INSERT ('
               || P_INSERT_COLUMNS
               || ')
                                       VALUES ('
               || P_INSERT_VALUES
               || ' ) ';

            EXECUTE IMMEDIATE queSql;
         ELSE                                 /*SO ENTRA AQUI PARA OS FILHOS*/
            queSql :=
                  ' MERGE INTO '
               || EVE.NOMETAB
               || ' N
                                USING (SELECT '
               || P_INSERT_COLUMNS
               || ' 
                                       FROM '
               || EVE.NOMETAB
               || ' 
                                       WHERE CODEMP = '
               || TO_CHAR (P_CODEMPMATRIZ)
               || '
                                         AND DTREF = TO_DATE('''
               || SNK_FORMAT_DATE (P_DTREF_OLD, 'DD/MM/YYYY HH24:MI:SS')
               || ''', ''DD/MM/YYYY HH24:MI:SS'')
                                         AND SEQUENCIA = '
               || TO_CHAR (P_SEQUENCIA_OLD)
               || '
                                         AND TPAMB = '''
               || P_TPAMB
               || '''
                                          ) O 
                                ON (N.CODEMP = O.CODEMP AND
                                    N.DTREF = TO_DATE('''
               || SNK_FORMAT_DATE (P_DTREF, 'DD/MM/YYYY HH24:MI:SS')
               || ''', ''DD/MM/YYYY HH24:MI:SS'') AND
                                    N.SEQUENCIA = '
               || TO_CHAR (P_SEQUENCIA_NEW)
               || ' AND
                                    N.TPAMB = O.TPAMB AND
                                    N.CHAVE = O.CHAVE)
                                WHEN NOT MATCHED THEN INSERT ('
               || P_INSERT_COLUMNS
               || ')
                                    VALUES ('
               || P_INSERT_VALUES
               || ' ) ';

            EXECUTE IMMEDIATE queSql;
         END IF;
      END IF;

      FOR EVEF
         IN (  SELECT NOMETAB,
                      NOMEEVENTO,
                      NOMEVIEW,
                      NOMEEVEVENTOPAI
                 FROM TFPMON
                WHERE     TIPO = 'C'
                      AND NOMEEVEVENTOPAI = EVE.NOMETAB
                      AND (   (P_TPAMB = 'P' AND AMBPRODUCAO = 'L')
                           OR (P_TPAMB = 'T' AND AMBTESTE = 'L'))
             ORDER BY NOMETAB)
      LOOP
         queSql := NULL;

         SNK_PROCESSA_DADOS_ESOCIAL (P_CODEMPMATRIZ,
                                     P_DTREF,
                                     P_TPAMB,
                                     P_TIPDADOS,
                                     EVEF.NOMEEVENTO,
                                     P_SEQUENCIA_NEW,
                                     EVEF.NOMETAB,
                                     P_SEQUENCIA_NEW,
                                     P_RESULT);
      END LOOP;

      P_RESULT := P_SEQUENCIA_NEW;
   END LOOP;
EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK;

      IF queSql IS NOT NULL
      THEN
         P_DTLOG := SYSDATE;

         SELECT COUNT (1) + 1
           INTO P_SEQLOG
           FROM LOGESOCIAL
          WHERE DTLOG = P_DTLOG;

         INSERT INTO LOGESOCIAL (DTLOG, SEQUENCIA, COMANDO)
            SELECT P_DTLOG, P_SEQLOG, SUBSTR (queSql, 1, 4000) FROM DUAL;

         IF LENGTH (queSql) > 4000
         THEN
            INSERT INTO LOGESOCIAL (DTLOG, SEQUENCIA, COMANDO)
               SELECT P_DTLOG, P_SEQLOG + 1, SUBSTR (queSql, 4001) FROM DUAL;
         END IF;

         COMMIT;
      END IF;

      P_MSG := P_MSG || SUBSTR (SQLERRM, 1, 3950);
      RAISE_APPLICATION_ERROR (-20101, P_MSG);
END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 05/03/2018 19:19:07
Num.Script: 51806-0-0
Nro. O.S. : 1147664
Nome      : Altera - SNK_GET_VALID_ALTER_ESOCIAL
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - SNK_GET_VALID_ALTER_ESOCIAL
NomeObjeto: SNK_GET_VALID_ALTER_ESOCIAL
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_GET_VALID_ALTER_ESOCIAL(P_EVENTO            VARCHAR2,
                                                        P_COLUNAS_PADRAO    VARCHAR2,
                                                        P_CODEMPMATRIZ      NUMBER,
                                                        P_DTREF             DATE,
                                                        P_SEQUENCIA         NUMBER,
                                                        P_TPAMB             CHAR,
                                                        P_NOMETAB_PAI       VARCHAR2 := NULL,
                                                        P_NOMETAB           VARCHAR2,
                                                        P_NOMEVIEW          VARCHAR2)
IS
   TYPE CURTYPE        IS REF CURSOR;
   CURVAL              CURTYPE;
   P_CONDITION         VARCHAR2(4000);
   queSql              VARCHAR2(4000);
   queUpd              VARCHAR2(4000);
   P_RESULT_QUERY      NUMBER;
   P_TABLE_PAI         VARCHAR2(100);
   P_CHAVES            VARCHAR2(4000);
   P_CHAVES_ALT        VARCHAR2(4000);
   P_CHAVE             VARCHAR2(50);
   P_VALIDACAO         VARCHAR2(50);
   P_NOMETAB_UTIL      VARCHAR2(100);
   P_COL_PAD_FILHOS    VARCHAR2(100) := 'CODEMP, DTREF, CHAVE, SEQUENCIA, TPAMB';
   P_FILTRO_FILHOS     VARCHAR2(4000);
   P_COUNT             NUMBER(10);
   P_DTLOG             DATE;
   P_SEQLOG            NUMBER(10);
   P_MSG               VARCHAR2(4000);
BEGIN
    P_CHAVES := NULL;
    P_CHAVES_ALT := NULL;

    IF P_NOMETAB = 'TFPS2200' THEN
        P_NOMETAB_UTIL := 'TFPS2200';
        FOR S2200 IN (SELECT CHAVE, VALIDACAO
                      FROM ( SELECT O.CHAVE
                                  , CASE WHEN N.CODEMP IS NULL AND O.ACAO <> 'E' THEN 'E'
                                         WHEN (N.CODEMP IS NULL AND O.ACAO = 'E') OR (NVL(N.INFOCOTA, ' ') = NVL(O.INFOCOTA, ' ') AND NVL(N.OBSERVACAO, ' ') = NVL(O.OBSERVACAO, ' ') AND NVL(N.TRABAPOSENT, ' ') = NVL(O.TRABAPOSENT, ' ') AND 
                                                                                        NVL(N.FONEPRINC, ' ') = NVL(O.FONEPRINC, ' ') AND NVL(N.FONEALTERNAT, ' ') = NVL(O.FONEALTERNAT, ' ') AND 
                                                                                        NVL(N.EMAILPRINC, ' ') = NVL(O.EMAILPRINC, ' ') AND NVL(N.MATRICULA, ' ') = NVL(O.MATRICULA, ' ') AND NVL(N.TPREGTRAB, 0) = NVL(O.TPREGTRAB, 0) AND 
                                                                                        NVL(N.TPREGPREV, 0) = NVL(O.TPREGPREV, 0) AND NVL(N.NRRECINFPRELIM, ' ') = NVL(O.NRRECINFPRELIM, ' ') AND NVL(N.CADINI, ' ') = NVL(O.CADINI, ' ') AND 
                                                                                        NVL(N.DTADM, SYSDATE) = NVL(O.DTADM, SYSDATE) AND NVL(N.TPADMISSAO, 0) = NVL(O.TPADMISSAO, 0) AND NVL(N.INDADMISSAO, 0) = NVL(O.INDADMISSAO, 0) AND 
                                                                                        NVL(N.TPREGJOR, 0) = NVL(O.TPREGJOR, 0) AND NVL(N.NATATIVIDADE, 0) = NVL(O.NATATIVIDADE, 0) AND NVL(N.DTBASE, 0) = NVL(O.DTBASE, 0) AND 
                                                                                        NVL(N.CNPJSINDCATEGPROF, ' ') = NVL(O.CNPJSINDCATEGPROF, ' ') AND NVL(N.OPCFGTS, 0) = NVL(O.OPCFGTS, 0) AND 
                                                                                        NVL(N.DTOPCFGTS, SYSDATE) = NVL(O.DTOPCFGTS, SYSDATE) AND NVL(N.HIPLEG, 0) = NVL(O.HIPLEG, 0) AND NVL(N.JUSTCONTR, ' ') = NVL(O.JUSTCONTR, ' ') AND 
                                                                                        NVL(N.TPINCLCONTR, 0) = NVL(O.TPINCLCONTR, 0) AND NVL(N.TPINSCIDETOMADORSERV, 0) = NVL(O.TPINSCIDETOMADORSERV, 0) AND 
                                                                                        NVL(N.NRINSCIDETOMADORSERV, ' ') = NVL(O.NRINSCIDETOMADORSERV, ' ') AND NVL(N.TPINSCIDEESTABVINC, 0) = NVL(O.TPINSCIDEESTABVINC, 0) AND 
                                                                                        NVL(N.NRINSCIDEESTABVINC, ' ') = NVL(O.NRINSCIDEESTABVINC, ' ') AND NVL(N.CPFTRABSUBST, ' ') = NVL(O.CPFTRABSUBST, ' ') AND 
                                                                                        NVL(N.INDPROVIM, 0) = NVL(O.INDPROVIM, 0) AND NVL(N.TPPROV, 0) = NVL(O.TPPROV, 0) AND NVL(N.DTNOMEACAO, SYSDATE) = NVL(O.DTNOMEACAO, SYSDATE) AND 
                                                                                        NVL(N.DTPOSSE, SYSDATE) = NVL(O.DTPOSSE, SYSDATE) AND NVL(N.DTEXERCICIO, SYSDATE) = NVL(O.DTEXERCICIO, SYSDATE) AND 
                                                                                        NVL(N.TPPLANRP, 0) = NVL(O.TPPLANRP, 0) AND NVL(N.NRPROCJUDINFODECJUD, ' ') = NVL(O.NRPROCJUDINFODECJUD, ' ') AND 
                                                                                        NVL(N.CODCARGO, ' ') = NVL(O.CODCARGO, ' ') AND NVL(N.CODFUNCAO, ' ') = NVL(O.CODFUNCAO, ' ') AND NVL(N.CODCATEG, 0) = NVL(O.CODCATEG, 0) AND 
                                                                                        NVL(N.CODCATEG2, 0) = NVL(O.CODCATEG2, 0) AND NVL(N.CODCARREIRA, ' ') = NVL(O.CODCARREIRA, ' ') AND 
                                                                                        NVL(N.DTINGRCARR, SYSDATE) = NVL(O.DTINGRCARR, SYSDATE) AND NVL(N.VRSALFX, 0) = NVL(O.VRSALFX, 0) AND NVL(N.UNDSALFIXO, 0) = NVL(O.UNDSALFIXO, 0) AND 
                                                                                        NVL(N.DSCSALVAR, ' ') = NVL(O.DSCSALVAR, ' ') AND NVL(N.TPCONTR, 0) = NVL(O.TPCONTR, 0) AND NVL(N.DTTERM, SYSDATE) = NVL(O.DTTERM, SYSDATE) AND 
                                                                                        NVL(N.CLAUASSEG, ' ') = NVL(O.CLAUASSEG, ' ') AND NVL(N.TPINSCLOCALTRABGERAL, 0) = NVL(O.TPINSCLOCALTRABGERAL, 0) AND 
                                                                                        NVL(N.NRINSCLOCALTRABGERAL, ' ') = NVL(O.NRINSCLOCALTRABGERAL, ' ') AND NVL(N.TPLOGRADLOCALTRABDOM, ' ') = NVL(O.TPLOGRADLOCALTRABDOM, ' ') AND 
                                                                                        NVL(N.DSCLOGRADLOCALTRABDOM, ' ') = NVL(O.DSCLOGRADLOCALTRABDOM, ' ') AND NVL(N.NRLOGRADLOCALTRABDOM, ' ') = NVL(O.NRLOGRADLOCALTRABDOM, ' ') AND 
                                                                                        NVL(N.COMPLEMENTOLOCALTRABDOM, ' ') = NVL(O.COMPLEMENTOLOCALTRABDOM, ' ') AND NVL(N.BAIRROLOCALTRABDOM, ' ') = NVL(O.BAIRROLOCALTRABDOM, ' ') AND 
                                                                                        NVL(N.CEPLOCALTRABDOM, ' ') = NVL(O.CEPLOCALTRABDOM, ' ') AND NVL(N.CODMUNICLOCALTRABDOM, 0) = NVL(O.CODMUNICLOCALTRABDOM, 0) AND 
                                                                                        NVL(N.UFLOCALTRABDOM, ' ') = NVL(O.UFLOCALTRABDOM, ' ') AND NVL(N.QTDHRSSEM, 0) = NVL(O.QTDHRSSEM, 0) AND NVL(N.TPJORNADA, 0) = 
                                                                                        NVL(O.TPJORNADA, 0) AND NVL(N.DSCTPJORN, ' ') = NVL(O.DSCTPJORN, ' ') AND NVL(N.TMPPARC, ' ') = NVL(O.TMPPARC, ' ') AND 
                                                                                        NVL(N.CNPJSINDTRAB, ' ') = NVL(O.CNPJSINDTRAB, ' ') AND NVL(N.NRPROCJUDALVARAJUDICIAL, ' ') = NVL(O.NRPROCJUDALVARAJUDICIAL, ' ') AND 
                                                                                        NVL(N.CNPJEMPREGANT, ' ') = NVL(O.CNPJEMPREGANT, ' ') AND NVL(N.MATRICANT, ' ') = NVL(O.MATRICANT, ' ') AND 
                                                                                        NVL(N.DTINIVINCULO, SYSDATE) = NVL(O.DTINIVINCULO, SYSDATE) AND NVL(N.OBSERVACAOSUCESSAOVINC, ' ') = NVL(O.OBSERVACAOSUCESSAOVINC, ' ') AND 
                                                                                        NVL(N.DTINIAFAST, SYSDATE) = NVL(O.DTINIAFAST, SYSDATE) AND NVL(N.CODMOTAFAST, ' ') = NVL(O.CODMOTAFAST, ' ') AND 
                                                                                        NVL(N.DTDESLIG, SYSDATE) = NVL(O.DTDESLIG, SYSDATE) AND N.CHAVE = O.CHAVE AND NVL(N.DTEXPEDRIC, SYSDATE) = NVL(O.DTEXPEDRIC, SYSDATE) AND 
                                                                                        NVL(N.TPINSCEMPREGADOR, 0) = NVL(O.TPINSCEMPREGADOR, 0) AND NVL(N.NRINSCEMPREGADOR, ' ') = NVL(O.NRINSCEMPREGADOR, ' ') AND 
                                                                                        NVL(N.CPFTRAB, ' ') = NVL(O.CPFTRAB, ' ') AND NVL(N.NISTRAB, ' ') = NVL(O.NISTRAB, ' ') AND NVL(N.NMTRAB, ' ') = NVL(O.NMTRAB, ' ') AND 
                                                                                        NVL(N.SEXO, ' ') = NVL(O.SEXO, ' ') AND NVL(N.RACACOR, 0) = NVL(O.RACACOR, 0) AND NVL(N.ESTCIV, 0) = NVL(O.ESTCIV, 0) AND 
                                                                                        NVL(N.GRAUINSTR, ' ') = NVL(O.GRAUINSTR, ' ') AND NVL(N.INDPRIEMPR, ' ') = NVL(O.INDPRIEMPR, ' ') AND NVL(N.NMSOC, ' ') = NVL(O.NMSOC, ' ') AND 
                                                                                        NVL(N.DTNASCTONASCIMENTO, SYSDATE) = NVL(O.DTNASCTONASCIMENTO, SYSDATE) AND NVL(N.CODMUNICNASCIMENTO, 0) = NVL(O.CODMUNICNASCIMENTO, 0) AND 
                                                                                        NVL(N.UFNASCIMENTO, ' ') = NVL(O.UFNASCIMENTO, ' ') AND NVL(N.PAISNASCTONASCIMENTO, ' ') = NVL(O.PAISNASCTONASCIMENTO, ' ') AND 
                                                                                        NVL(N.PAISNACNASCIMENTO, ' ') = NVL(O.PAISNACNASCIMENTO, ' ') AND NVL(N.NMMAENASCIMENTO, ' ') = NVL(O.NMMAENASCIMENTO, ' ') AND 
                                                                                        NVL(N.NMPAINASCIMENTO, ' ') = NVL(O.NMPAINASCIMENTO, ' ') AND NVL(N.NRCTPS, ' ') = NVL(O.NRCTPS, ' ') AND 
                                                                                        NVL(N.SERIECTPS, ' ') = NVL(O.SERIECTPS, ' ') AND NVL(N.UFCTPS, ' ') = NVL(O.UFCTPS, ' ') AND NVL(N.NRRIC, ' ') = NVL(O.NRRIC, ' ') AND 
                                                                                        NVL(N.ORGAOEMISSORRIC, ' ') = NVL(O.ORGAOEMISSORRIC, ' ') AND NVL(N.NRRG, ' ') = NVL(O.NRRG, ' ') AND 
                                                                                        NVL(N.ORGAOEMISSORRG, ' ') = NVL(O.ORGAOEMISSORRG, ' ') AND NVL(N.DTEXPEDRG, SYSDATE) = NVL(O.DTEXPEDRG, SYSDATE) AND 
                                                                                        NVL(N.NRRNE, ' ') = NVL(O.NRRNE, ' ') AND NVL(N.ORGAOEMISSORRNE, ' ') = NVL(O.ORGAOEMISSORRNE, ' ') AND 
                                                                                        NVL(N.DTEXPEDRNE, SYSDATE) = NVL(O.DTEXPEDRNE, SYSDATE) AND NVL(N.NROC, ' ') = NVL(O.NROC, ' ') AND 
                                                                                        NVL(N.ORGAOEMISSOROC, ' ') = NVL(O.ORGAOEMISSOROC, ' ') AND NVL(N.DTEXPEDOC, SYSDATE) = NVL(O.DTEXPEDOC, SYSDATE) AND 
                                                                                        NVL(N.DTVALIDOC, SYSDATE) = NVL(O.DTVALIDOC, SYSDATE) AND NVL(N.NRREGCNH, ' ') = NVL(O.NRREGCNH, ' ') AND 
                                                                                        NVL(N.DTEXPEDCNH, SYSDATE) = NVL(O.DTEXPEDCNH, SYSDATE) AND NVL(N.UFCNH, ' ') = NVL(O.UFCNH, ' ') AND 
                                                                                        NVL(N.DTVALIDCNH, SYSDATE) = NVL(O.DTVALIDCNH, SYSDATE) AND NVL(N.DTPRIHAB, SYSDATE) = NVL(O.DTPRIHAB, SYSDATE) AND 
                                                                                        NVL(N.CATEGORIACNH, ' ') = NVL(O.CATEGORIACNH, ' ') AND NVL(N.TPLOGRADBRASIL, ' ') = NVL(O.TPLOGRADBRASIL, ' ') AND 
                                                                                        NVL(N.DSCLOGRADBRASIL, ' ') = NVL(O.DSCLOGRADBRASIL, ' ') AND NVL(N.NRLOGRADBRASIL, ' ') = NVL(O.NRLOGRADBRASIL, ' ') AND 
                                                                                        NVL(N.COMPLEMENTOBRASIL, ' ') = NVL(O.COMPLEMENTOBRASIL, ' ') AND NVL(N.BAIRROBRASIL, ' ') = NVL(O.BAIRROBRASIL, ' ') AND
                                                                                         NVL(N.CEPBRASIL, ' ') = NVL(O.CEPBRASIL, ' ') AND NVL(N.CODMUNICBRASIL, ' ') = NVL(O.CODMUNICBRASIL, ' ') AND 
                                                                                         NVL(N.UFBRASIL, ' ') = NVL(O.UFBRASIL, ' ') AND NVL(N.PAISRESID, ' ') = NVL(O.PAISRESID, ' ') AND 
                                                                                         NVL(N.DSCLOGRADEXTERIOR, ' ') = NVL(O.DSCLOGRADEXTERIOR, ' ') AND NVL(N.NRLOGRADEXTERIOR, ' ') = NVL(O.NRLOGRADEXTERIOR, ' ') AND 
                                                                                         NVL(N.COMPLEMENTOEXTERIOR, ' ') = NVL(O.COMPLEMENTOEXTERIOR, ' ') AND NVL(N.BAIRROEXTERIOR, ' ') = NVL(O.BAIRROEXTERIOR, ' ') AND 
                                                                                         NVL(N.NMCIDEXTERIOR, ' ') = NVL(O.NMCIDEXTERIOR, ' ') AND NVL(N.CODPOSTALEXTERIOR, ' ') = NVL(O.CODPOSTALEXTERIOR, ' ') AND 
                                                                                        NVL(N.DTCHEGADA, SYSDATE) = NVL(O.DTCHEGADA, SYSDATE) AND NVL(N.CLASSTRABESTRANG, 0) = NVL(O.CLASSTRABESTRANG, 0) AND 
                                                                                        NVL(N.CASADOBR, ' ') = NVL(O.CASADOBR, ' ') AND NVL(N.FILHOSBR, ' ') = NVL(O.FILHOSBR, ' ') AND NVL(N.DEFFISICA, ' ') = NVL(O.DEFFISICA, ' ') AND 
                                                                                        NVL(N.DEFVISUAL, ' ') = NVL(O.DEFVISUAL, ' ') AND NVL(N.DEFAUDITIVA, ' ') = NVL(O.DEFAUDITIVA, ' ') AND NVL(N.DEFMENTAL, ' ') = NVL(O.DEFMENTAL, ' ') AND 
                                                                                        NVL(N.DEFINTELECTUAL, ' ') = NVL(O.DEFINTELECTUAL, ' ') AND NVL(N.REABREADAP, ' ') = NVL(O.REABREADAP, ' ')) THEN 'I'
                                         ELSE 'A'
                                    END AS VALIDACAO 
                             FROM TFPS2200 O
                                 LEFT JOIN VGF_EVENTO_S2200 N ON O.CODEMP = N.CODEMP AND O.CHAVE = N.CHAVE
                             WHERE O.CODEMP = P_CODEMPMATRIZ
                               AND O.DTREF = P_DTREF
                               AND O.TPAMB = P_TPAMB
                               AND O.SEQUENCIA = P_SEQUENCIA
                               AND O.CONTROLE = 'I'
                          ) DTALT
                      WHERE DTALT.VALIDACAO <> 'I') LOOP
            IF P_CHAVES IS NOT NULL AND LENGTH(P_CHAVES) + LENGTH(S2200.CHAVE) >= 1700 THEN
                queUpd :=               ' UPDATE TFPS2200';

                IF P_CHAVES_ALT IS NOT NULL THEN
                    queUpd := queUpd || ' SET CONTROLE = CASE WHEN CHAVE IN ('||P_CHAVES_ALT||') THEN ''A'' ELSE ''E'' END ';
                ELSE
                    queUpd := queUpd || ' SET CONTROLE = ''E'' ';
                END IF;

                queUpd := queUpd ||     ' WHERE CODEMP = :CODEMP
                                             AND DTREF = :DTREF
                                             AND SEQUENCIA = :SEQUENCIA
                                             AND TPAMB = :TPAMB
                                             AND CONTROLE = ''I''
                                             AND CHAVE IN ('||P_CHAVES||')';

                EXECUTE IMMEDIATE queUpd USING P_CODEMPMATRIZ, P_DTREF, P_SEQUENCIA, P_TPAMB;

                P_CHAVES := NULL;
                P_CHAVES_ALT := NULL;
             END IF;

            IF P_CHAVES IS NULL THEN
                P_CHAVES := ''''||S2200.CHAVE||'''';

                IF S2200.VALIDACAO = 'A' THEN
                    P_CHAVES_ALT := ''''||S2200.CHAVE||'''';
                END IF;
            ELSE 
                P_CHAVES := P_CHAVES||','''||S2200.CHAVE||'''';

                IF S2200.VALIDACAO = 'A' THEN
                    P_CHAVES_ALT := P_CHAVES_ALT||','''||S2200.CHAVE||'''';
                END IF;
             END IF;
        END LOOP;      
    ELSIF P_NOMETAB = 'TFPS2205' THEN
    P_NOMETAB_UTIL := 'TFPS2205';
        FOR S2205 IN (SELECT CHAVE, VALIDACAO
                      FROM ( SELECT O.CHAVE
                                  , CASE WHEN N.CODEMP IS NULL AND O.ACAO <> 'E' THEN 'E'
                                         WHEN (NVL(N.TPINSCEMPREGADOR, 0) = NVL(O.TPINSCEMPREGADOR, 0) AND NVL(N.NRINSCEMPREGADOR, ' ') = NVL(O.NRINSCEMPREGADOR, ' ') AND NVL(N.CPFTRAB, ' ') = NVL(O.CPFTRAB, ' ') AND
                                               NVL(N.NISTRAB, ' ') = NVL(O.NISTRAB, ' ') AND NVL(N.NMTRAB, ' ') = NVL(O.NMTRAB, ' ') AND NVL(N.SEXO, ' ') = NVL(O.SEXO, ' ') AND NVL(N.RACACOR, 0) = NVL(O.RACACOR, 0) AND 
                                               NVL(N.ESTCIV, 0) = NVL(O.ESTCIV, 0) AND NVL(N.NMSOC, ' ') = NVL(O.NMSOC, ' ') AND NVL(N.NRCTPS, ' ') = NVL(O.NRCTPS, ' ') AND NVL(N.SERIECTPS, ' ') = NVL(O.SERIECTPS, ' ') AND 
                                               NVL(N.UFCTPS, ' ') = NVL(O.UFCTPS, ' ') AND NVL(N.NRRIC, ' ') = NVL(O.NRRIC, ' ') AND NVL(N.ORGAOEMISSORRIC, ' ') = NVL(O.ORGAOEMISSORRIC, ' ') AND 
                                               NVL(N.DTEXPEDRIC, SYSDATE) = NVL(O.DTEXPEDRIC, SYSDATE) AND NVL(N.NRRG, ' ') = NVL(O.NRRG, ' ') AND NVL(N.ORGAOEMISSORRG, ' ') = NVL(O.ORGAOEMISSORRG, ' ') AND 
                                               NVL(N.DTEXPEDRG, SYSDATE) = NVL(O.DTEXPEDRG, SYSDATE) AND NVL(N.NRRNE, ' ') = NVL(O.NRRNE, ' ') AND NVL(N.ORGAOEMISSORRNE, ' ') = NVL(O.ORGAOEMISSORRNE, ' ') AND 
                                               NVL(N.DTEXPEDRNE, SYSDATE) = NVL(O.DTEXPEDRNE, SYSDATE) AND NVL(N.NROC, ' ') = NVL(O.NROC, ' ') AND NVL(N.ORGAOEMISSOROC, ' ') = NVL(O.ORGAOEMISSOROC, ' ') AND 
                                               NVL(N.DTEXPEDOC, SYSDATE) = NVL(O.DTEXPEDOC, SYSDATE) AND NVL(N.DTVALIDOC, SYSDATE) = NVL(O.DTVALIDOC, SYSDATE) AND NVL(N.NRREGCNH, ' ') = NVL(O.NRREGCNH, ' ') AND 
                                               NVL(N.DTEXPEDCNH, SYSDATE) = NVL(O.DTEXPEDCNH, SYSDATE) AND NVL(N.UFCNH, ' ') = NVL(O.UFCNH, ' ') AND NVL(N.DTVALIDCNH, SYSDATE) = NVL(O.DTVALIDCNH, SYSDATE) AND 
                                               NVL(N.DTPRIHAB, SYSDATE) = NVL(O.DTPRIHAB, SYSDATE) AND NVL(N.CATEGORIACNH, ' ') = NVL(O.CATEGORIACNH, ' ') AND NVL(N.TPLOGRADBRASIL, ' ') = NVL(O.TPLOGRADBRASIL, ' ') AND 
                                               NVL(N.DSCLOGRADBRASIL, ' ') = NVL(O.DSCLOGRADBRASIL, ' ') AND NVL(N.NRLOGRADBRASIL, ' ') = NVL(O.NRLOGRADBRASIL, ' ') AND 
                                               NVL(N.COMPLEMENTOBRASIL, ' ') = NVL(O.COMPLEMENTOBRASIL, ' ') AND NVL(N.BAIRROBRASIL, ' ') = NVL(O.BAIRROBRASIL, ' ') AND NVL(N.CEPBRASIL, ' ') = NVL(O.CEPBRASIL, ' ') AND 
                                               NVL(N.CODMUNICBRASIL, 0) = NVL(O.CODMUNICBRASIL, 0) AND NVL(N.UFBRASIL, ' ') = NVL(O.UFBRASIL, ' ') AND NVL(N.PAISRESID, ' ') = NVL(O.PAISRESID, ' ') AND 
                                               NVL(N.DSCLOGRADEXTERIOR, ' ') = NVL(O.DSCLOGRADEXTERIOR, ' ') AND NVL(N.NRLOGRADEXTERIOR, ' ') = NVL(O.NRLOGRADEXTERIOR, ' ') AND 
                                               NVL(N.COMPLEMENTOEXTERIOR, ' ') = NVL(O.COMPLEMENTOEXTERIOR, ' ') AND NVL(N.BAIRROEXTERIOR, ' ') = NVL(O.BAIRROEXTERIOR, ' ') AND 
                                               NVL(N.NMCIDEXTERIOR, ' ') = NVL(O.NMCIDEXTERIOR, ' ') AND NVL(N.CODPOSTALEXTERIOR, ' ') = NVL(O.CODPOSTALEXTERIOR, ' ') AND 
                                               NVL(N.DTCHEGADA, SYSDATE) = NVL(O.DTCHEGADA, SYSDATE) AND NVL(N.CLASSTRABESTRANG, 0) = NVL(O.CLASSTRABESTRANG, 0) AND NVL(N.CASADOBR, ' ') = NVL(O.CASADOBR, ' ') AND 
                                               NVL(N.FILHOSBR, ' ') = NVL(O.FILHOSBR, ' ') AND NVL(N.DEFFISICA, ' ') = NVL(O.DEFFISICA, ' ') AND NVL(N.DEFVISUAL, ' ') = NVL(O.DEFVISUAL, ' ') AND 
                                               NVL(N.DEFAUDITIVA, ' ') = NVL(O.DEFAUDITIVA, ' ') AND NVL(N.DEFMENTAL, ' ') = NVL(O.DEFMENTAL, ' ') AND NVL(N.DEFINTELECTUAL, ' ') = NVL(O.DEFINTELECTUAL, ' ') AND 
                                               NVL(N.REABREADAP, ' ') = NVL(O.REABREADAP, ' ') AND NVL(N.INFOCOTA, ' ') = NVL(O.INFOCOTA, ' ') AND NVL(N.OBSERVACAO, ' ') = NVL(O.OBSERVACAO, ' ') AND 
                                               NVL(N.TRABAPOSENT, ' ') = NVL(O.TRABAPOSENT, ' ') AND NVL(N.FONEPRINC, ' ') = NVL(O.FONEPRINC, ' ') AND NVL(N.FONEALTERNAT, ' ') = NVL(O.FONEALTERNAT, ' ') AND 
                                               NVL(N.EMAILPRINC, ' ') = NVL(O.EMAILPRINC, ' ') AND N.CHAVE = O.CHAVE) THEN 'I'
                                         ELSE 'A'
                                    END AS VALIDACAO 
                             FROM TFPS2205 O
                                 LEFT JOIN VGF_EVENTO_S2205 N ON O.CODEMP = N.CODEMP AND O.CHAVE = N.CHAVE
                             WHERE O.CODEMP = P_CODEMPMATRIZ
                               AND O.DTREF = P_DTREF
                               AND O.SEQUENCIA = P_SEQUENCIA
                               AND O.TPAMB = P_TPAMB
                               AND O.CONTROLE = 'I'
                          ) DTALT
                      WHERE DTALT.VALIDACAO <> 'I') LOOP
            IF P_CHAVES IS NOT NULL AND LENGTH(P_CHAVES) + LENGTH(S2205.CHAVE) >= 1700 THEN
                queUpd :=               ' UPDATE TFPS2205';

                IF P_CHAVES_ALT IS NOT NULL THEN
                    queUpd := queUpd || ' SET CONTROLE = CASE WHEN CHAVE IN ('||P_CHAVES_ALT||') THEN ''A'' ELSE ''E'' END ';
                ELSE
                    queUpd := queUpd || ' SET CONTROLE = ''E'' ';
                END IF;

                queUpd := queUpd ||     ' WHERE CODEMP = :CODEMP
                                             AND DTREF = :DTREF
                                             AND SEQUENCIA = :SEQUENCIA
                                             AND TPAMB = :TPAMB
                                             AND CONTROLE = ''I''
                                             AND CHAVE IN ('||P_CHAVES||')';

                EXECUTE IMMEDIATE queUpd USING P_CODEMPMATRIZ, P_DTREF, P_SEQUENCIA, P_TPAMB;

                P_CHAVES := NULL;
                P_CHAVES_ALT := NULL;
             END IF;

            IF P_CHAVES IS NULL THEN
                P_CHAVES := ''''||S2205.CHAVE||'''';

                IF S2205.VALIDACAO = 'A' THEN
                    P_CHAVES_ALT := ''''||S2205.CHAVE||'''';
                END IF;
            ELSE 
                P_CHAVES := P_CHAVES||','''||S2205.CHAVE||'''';

                IF S2205.VALIDACAO = 'A' THEN
                    P_CHAVES_ALT := P_CHAVES_ALT||','''||S2205.CHAVE||'''';
                END IF;
             END IF;
        END LOOP;
    ELSE
        P_CONDITION := SNK_GET_COLUMNS_ESOCIAL(P_NOMETAB, P_COLUNAS_PADRAO);

        IF P_NOMETAB_PAI IS NULL THEN   /*TABELAS PAI*/
            P_NOMETAB_UTIL := P_NOMETAB;
            queSql :=   'SELECT CHAVE, VALIDACAO
                         FROM (  SELECT O.CHAVE
                                      , CASE WHEN N.CODEMP IS NULL AND O.ACAO <> ''E'' THEN ''E''
                                             WHEN (N.CODEMP IS NULL AND O.ACAO = ''E'') OR ('||P_CONDITION||') THEN ''I''
                                             ELSE ''A'' 
                                        END AS VALIDACAO 
                                 FROM '||P_NOMETAB||' O
                                     LEFT JOIN '||P_NOMEVIEW||' N ON O.CODEMP = N.CODEMP AND O.CHAVE = N.CHAVE
                                 WHERE O.CODEMP = :CODEMP
                                   AND O.DTREF = :DTREF
                                   AND O.SEQUENCIA = :SEQUENCIA
                                   AND O.TPAMB = :TPAMB
                                   AND O.CONTROLE = ''I''
                              ) DTALT
                         WHERE DTALT.VALIDACAO <> ''I'' ';
        ELSE  /*TABELAS FILHAS*/
            P_NOMETAB_UTIL := P_NOMETAB_PAI;
            P_FILTRO_FILHOS := NVL(SNK_GET_PK_FOR_ESOCIAL(P_NOMETAB, P_COL_PAD_FILHOS), ' ');

            queSql :=   'SELECT CHAVE, VALIDACAO
                         FROM (  SELECT O.CHAVE
                                      , CASE WHEN (N.CODEMP IS NULL AND P.ACAO = ''E'') OR ('||P_CONDITION||') THEN ''I''
                                             ELSE ''A'' 
                                        END AS VALIDACAO 
                                 FROM '||P_NOMETAB||' O
                                     LEFT JOIN '||P_NOMEVIEW||' N ON O.CODEMP = N.CODEMP AND O.CHAVE = N.CHAVE '||P_FILTRO_FILHOS||'
                                     INNER JOIN '||P_NOMETAB_PAI||' P ON P.CODEMP = O.CODEMP AND P.DTREF = O.DTREF AND P.SEQUENCIA = O.SEQUENCIA AND O.CHAVE = P.CHAVE AND P.CONTROLE = ''I''
                                 WHERE O.CODEMP = :CODEMP
                                   AND O.DTREF = :DTREF
                                   AND O.SEQUENCIA = :SEQUENCIA
                                   AND O.TPAMB = :TPAMB
                              ) DTALT
                         WHERE DTALT.VALIDACAO <> ''I'' ';
        END IF;
        OPEN CURVAL FOR queSql USING P_CODEMPMATRIZ, P_DTREF, P_SEQUENCIA, P_TPAMB;
        LOOP
            FETCH CURVAL INTO P_CHAVE, P_VALIDACAO;
            EXIT WHEN CURVAL%NOTFOUND;
                
            IF P_CHAVES IS NOT NULL AND LENGTH(P_CHAVES) + LENGTH(P_CHAVE) >= 1700 THEN
                queUpd :=               ' UPDATE '||P_NOMETAB_UTIL;

                IF P_CHAVES_ALT IS NOT NULL THEN
                    queUpd := queUpd || ' SET CONTROLE = CASE WHEN CHAVE IN ('||P_CHAVES_ALT||') THEN ''A'' ELSE ''E'' END ';
                ELSE
                    queUpd := queUpd || ' SET CONTROLE = ''E'' ';
                END IF;

                queUpd := queUpd ||     ' WHERE CODEMP = :CODEMP
                                             AND DTREF = :DTREF
                                             AND SEQUENCIA = :SEQUENCIA
                                             AND TPAMB = :TPAMB
                                             AND CONTROLE = ''I''
                                             AND CHAVE IN ('||P_CHAVES||')';

                EXECUTE IMMEDIATE queUpd USING P_CODEMPMATRIZ, P_DTREF, P_SEQUENCIA, P_TPAMB;

                P_CHAVES := NULL;
                P_CHAVES_ALT := NULL;
             END IF;

            IF P_CHAVES IS NULL THEN
                P_CHAVES := ''''||P_CHAVE||'''';

                IF P_VALIDACAO = 'A' THEN
                    P_CHAVES_ALT := ''''||P_CHAVE||'''';
                END IF;
            ELSE 
                P_CHAVES := P_CHAVES||','''||P_CHAVE||'''';

                IF P_VALIDACAO = 'A' THEN
                    P_CHAVES_ALT := P_CHAVES_ALT||','''||P_CHAVE||'''';
                END IF;
            END IF;
        END LOOP;
    END IF;
    
    IF P_CHAVES IS NOT NULL AND LENGTH(P_CHAVES) > 0 THEN
        queUpd :=               ' UPDATE '||P_NOMETAB_UTIL;

        IF P_CHAVES_ALT IS NOT NULL THEN
            queUpd := queUpd || ' SET CONTROLE = CASE WHEN CHAVE IN ('||P_CHAVES_ALT||') THEN ''A'' ELSE ''E'' END ';
        ELSE
            queUpd := queUpd || ' SET CONTROLE = ''E'' ';
        END IF;

        queUpd := queUpd ||     ' WHERE CODEMP = :CODEMP
                                     AND DTREF = :DTREF
                                     AND SEQUENCIA = :SEQUENCIA
                                     AND TPAMB = :TPAMB
                                     AND CONTROLE = ''I''
                                     AND CHAVE IN ('||P_CHAVES||')';

        EXECUTE IMMEDIATE queUpd USING P_CODEMPMATRIZ, P_DTREF, P_SEQUENCIA, P_TPAMB;

        P_CHAVES := NULL;
        P_CHAVES_ALT := NULL;
    END IF;
        
    FOR EVEF IN (SELECT MON.NOMETAB, MON.NOMEVIEW
             FROM TFPMON MON
             WHERE MON.NOMEEVEVENTOPAI = P_NOMETAB 
               AND ((P_TPAMB = 'P' AND MON.AMBPRODUCAO = 'L') OR
                    (P_TPAMB = 'T' AND MON.AMBTESTE = 'L')) 
             GROUP BY MON.NOMETAB, MON.NOMEVIEW
             ORDER BY MON.NOMETAB
      ) LOOP
        SNK_GET_VALID_ALTER_ESOCIAL (P_EVENTO, P_COLUNAS_PADRAO, P_CODEMPMATRIZ, P_DTREF, P_SEQUENCIA, P_TPAMB, P_NOMETAB_UTIL, EVEF.NOMETAB, EVEF.NOMEVIEW);
    END LOOP;
EXCEPTION WHEN OTHERS THEN
  ROLLBACK;
  P_DTLOG := SYSDATE;
  IF queSql IS NOT NULL THEN
    SELECT COUNT(1) + 1 INTO P_SEQLOG
    FROM LOGESOCIAL
    WHERE DTLOG = P_DTLOG; 

      INSERT INTO LOGESOCIAL(DTLOG, SEQUENCIA, COMANDO)
           SELECT P_DTLOG, P_SEQLOG, SUBSTR(queSql, 1, 4000) from dual;
      IF LENGTH(queSql) > 4000 THEN
        INSERT INTO LOGESOCIAL(DTLOG, SEQUENCIA, COMANDO)
           SELECT P_DTLOG, P_SEQLOG + 1, SUBSTR(queSql, 4001) from dual;
      END IF;
           
        COMMIT;
   END IF;
   
   IF queUpd IS NOT NULL THEN
    SELECT COUNT(1) + 1 INTO P_SEQLOG
    FROM LOGESOCIAL
    WHERE DTLOG = P_DTLOG; 

      INSERT INTO LOGESOCIAL(DTLOG, SEQUENCIA, COMANDO)
           SELECT P_DTLOG, P_SEQLOG, SUBSTR(queUpd, 1, 4000) from dual;
      IF LENGTH(queUpd) > 4000 THEN
              INSERT INTO LOGESOCIAL(DTLOG, SEQUENCIA, COMANDO)
                              SELECT P_DTLOG, P_SEQLOG + 1, SUBSTR(queUpd, 4001) from dual;
      END IF;
           
        COMMIT; 
   END IF;
   
   P_MSG := P_MSG|| SUBSTR(SQLERRM, 1, 3950);
     RAISE_APPLICATION_ERROR(-20101, P_MSG);
END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 05/03/2018 19:19:07
Num.Script: 51808-0-0
Nro. O.S. : 1147664
Nome      : Cria - EVENTOLOTE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - EVENTOLOTE
NomeObjeto: EVENTOLOTE
TipoObjeto: TABLE
NomeTabela: EVENTOLOTE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE EVENTOLOTE (
    NULOTE                 NUMBER(10) NOT NULL,
    DHINC                 DATE    ,
    DHPREVCONSULTA         DATE, 
    MSG                 CLOB, 
    NROPROTLOTE         VARCHAR(255),
    STATUS                 VARCHAR(1),
    TPAMB                 NUMBER(10),
    XMLENVLOTE             CLOB, 
    XMLRETLOTE             CLOB, 
    CONSTRAINT PK_EVENTOLOTE PRIMARY KEY (NULOTE)
)
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 05/03/2018 19:19:07
Num.Script: 51809-0-0
Nro. O.S. : 1147664
Nome      : Cria - EVENTOFILA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - EVENTOFILA
NomeObjeto: EVENTOFILA
TipoObjeto: TABLE
NomeTabela: EVENTOFILA
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE EVENTOFILA (
    SEQEVENTO         NUMBER(10) NOT NULL,
    DHINC             DATE NOT NULL,
    CODEMP             NUMBER(10) NOT NULL,
    ACAO             VARCHAR(255), 
    CHAVE             VARCHAR(255),
    CHAVEEVENTO     VARCHAR(255),
    CODRETORNO         NUMBER(10),
    CODUSUINC         NUMBER(10),
    DHPROC             DATE,
    ENVIOLIB         VARCHAR(255), 
    FIMVALID         DATE,
    INDAPURACAO     NUMBER(10),
    INDRETIF         NUMBER(10),
    INIVALID         DATE,
    MSG             CLOB,
    NRORECIBO         VARCHAR(255),
    NROPROTLOTE     VARCHAR(255), 
    NULOTE             NUMBER(10),
    ORIGEM             VARCHAR(255),
    REFERENCIA         DATE,
    SEQUENCIA         NUMBER(10),
    SITUACAO         VARCHAR(255),
    TIPOEVENTO         VARCHAR(255), 
    TPAMB             NUMBER(10),
    VERPROC         VARCHAR(255),
    XMLEVENTO         CLOB,
    XMLRETORNO         CLOB, 
    CONSTRAINT PK_EVENTOFILA PRIMARY KEY (SEQEVENTO, DHINC, CODEMP)
)
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 05/03/2018 19:19:07
Num.Script: 51810-0-0
Nro. O.S. : 1147664
Nome      : Cria - TSIEMP_I02
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TSIEMP_I02
NomeObjeto: TSIEMP_I02
TipoObjeto: INDEX
NomeTabela: TSIEMP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN 
    BEGIN 
    EXECUTE IMMEDIATE 'CREATE INDEX TSIEMP_I02 ON TSIEMP(CODEMPMATRIZ)';
    EXCEPTION 
     WHEN OTHERS THEN 
         NULL;
    END;
END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 05/03/2018 19:19:07
Num.Script: 51811-0-0
Nro. O.S. : 1147664
Nome      : Altera - VGF_EVENTO_EMPREGADOR
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VGF_EVENTO_EMPREGADOR
NomeObjeto: VGF_EVENTO_EMPREGADOR
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE FORCE VIEW VGF_EVENTO_EMPREGADOR
AS
   SELECT E.CODEMP,
          E.CODEMPMATRIZ AS CODEMPMATRIZ,
          CASE WHEN LENGTH (E.CGC) = 14 THEN 1 ELSE 2 END
             AS "TPINSCEMPREGADOR",
          CASE
             WHEN     LENGTH (E.CGC) = 14
                  AND (SELECT LOGICO
                         FROM TSIPAR
                        WHERE CHAVE = 'FPTRIBUNAL') = 'N'
             THEN
                SUBSTR (E.CGC, 1, 8)
             ELSE
                E.CGC
          END
             AS "NRINSCEMPREGADOR",
          RAZAOSOCIAL AS "NMRAZAO",
          LPAD (CLASSTRIB, 2, '0') AS "CLASSTRIB",
          NATJUR AS "NATJURID",
          INDCOOP,
          INDCONSTR,
          INFOOBRA,
          CNAEPREPON,
          CEP,
          COMPLEMENTO,
          NUMEND,
          CODEND,
          CODBAI,
          E.CODCID,
          ACDINTISENMULTA AS "INDACORDOISENMULTA",
          (SELECT UFS.UF
             FROM TSIUFS UFS
            WHERE UFS.CODUF = C.UF)
             AS UF,
          C.CODMUNFIS AS CODMUNFIS,
          (SELECT DTCARGAINICIAL
             FROM TFPEMP
            WHERE CODEMP = E.CODEMPMATRIZ)
             AS DTCARGAINICIAL,             
          E.CGC
     FROM TSIEMP E, TSICID C, TFPEMP EF
    WHERE     E.CODCID = C.CODCID
          AND EF.USADOESOCIAL = 'S'
          AND E.CODEMP = EF.CODEMP
          AND E.CODEMPMATRIZ IS NOT NULL
   UNION
   SELECT E.CODEMP,
          E.CODEMP AS CODEMPMATRIZ,
          CASE WHEN LENGTH (E.CGC) = 14 THEN 1 ELSE 2 END
             AS "TPINSCEMPREGADOR",
          CASE
             WHEN     LENGTH (E.CGC) = 14
                  AND (SELECT LOGICO
                         FROM TSIPAR
                        WHERE CHAVE = 'FPTRIBUNAL') = 'N'
             THEN
                SUBSTR (E.CGC, 1, 8)
             ELSE
                E.CGC
          END
             AS "NRINSCEMPREGADOR",
          RAZAOSOCIAL AS "NMRAZAO",
          LPAD (CLASSTRIB, 2, '0') AS "CLASSTRIB",
          NATJUR AS "NATJURID",
          INDCOOP,
          INDCONSTR,
          INFOOBRA,
          CNAEPREPON,
          CEP,
          COMPLEMENTO,
          NUMEND,
          CODEND,
          CODBAI,
          E.CODCID,
          ACDINTISENMULTA AS "INDACORDOISENMULTA",
          (SELECT UFS.UF
             FROM TSIUFS UFS
            WHERE UFS.CODUF = C.UF)
             AS UF,
          C.CODMUNFIS AS CODMUNFIS,
          (SELECT DTCARGAINICIAL
             FROM TFPEMP
            WHERE CODEMP = E.CODEMP)
             AS DTCARGAINICIAL,
          E.CGC
     FROM TSIEMP E, TSICID C, TFPEMP EF
    WHERE     E.CODCID = C.CODCID
          AND EF.USADOESOCIAL = 'S'
          AND E.CODEMP = EF.CODEMP
          AND E.CODEMPMATRIZ IS NULL
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 06/03/2018 09:41:52
Num.Script: 51812-0-0
Nro. O.S. : 1147664
Nome      : Cria - VGF_EVENTO_S2200_BASE_HORARIO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - VGF_EVENTO_S2200_BASE_HORARIO
NomeObjeto: VGF_EVENTO_S2200_BASE_HORARIO
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE FORCE VIEW VGF_EVENTO_S2200_BASE_HORARIO
AS
     SELECT DISTINCT
            CASE
               WHEN CGH.ESCALONAR = 'S' THEN 8
               WHEN H.DIASEM = 1 THEN 7
               WHEN H.DIASEM <= 7 THEN H.DIASEM - 1
               ELSE NULL
            END
               AS "DIA",
            H.CODCARGAHORESOCIAL AS "CODHORCONTRAT",
            VEMP.CODEMPMATRIZ AS CODEMP,
            CAST (FHO.CODEMP || ':' || FHO.CODFUNC AS VARCHAR2 (100))
               AS "CHAVEPAI",
            CAST (H.CODCARGAHORESOCIAL AS VARCHAR2 (100)) AS "CHAVE"
       FROM TFPFHO FHO,
            TFPHOR H,
            VGF_EVENTO_EMPREGADOR VEMP,
            TFPCGH CGH,
            TFPHRE HRE
      WHERE     FHO.DHALTER =
                   (SELECT MAX (DHALTER)
                      FROM TFPFHO
                     WHERE     CODEMP = FHO.CODEMP
                           AND CODFUNC = FHO.CODFUNC
                           AND DHALTER <= SYSDATE) -- deve-se sempre olhar a atual ? e se aconteceu mudança
            AND FHO.CODCARGAHOR = CGH.CODCARGAHOR
            AND FHO.CODEMP = VEMP.CODEMP
            AND H.CODCARGAHOR = CGH.CODCARGAHOR
            AND CGH.CODCARGAHOR > 0
            AND HRE.CODCARGAHORESOCIAL = H.CODCARGAHORESOCIAL
            AND HRE.CODEMP = VEMP.CODEMP
            AND NVL(H.ENTRADA, 0) > 0
            AND NVL(H.SAIDA, 0) > 0
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 06/03/2018 09:39:20
Num.Script: 51813-0-0
Nro. O.S. : 1147664
Nome      : Altera - VGF_EVENTO_S2200_HORARIO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VGF_EVENTO_S2200_HORARIO
NomeObjeto: VGF_EVENTO_S2200_HORARIO
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE FORCE VIEW VGF_EVENTO_S2200_HORARIO
AS
     SELECT HOR.*
       FROM VGF_EVENTO_S2200_BASE_HORARIO HOR
          , VGF_EVENTO_S2200 FUN
      WHERE FUN.CODEMP = HOR.CODEMP
            AND FUN.CHAVE = HOR.CHAVEPAI
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 06/03/2018 09:41:44
Num.Script: 51814-0-0
Nro. O.S. : 1147664
Nome      : Altera - VGF_EVENTO_S2206_HORARIO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VGF_EVENTO_S2206_HORARIO
NomeObjeto: VGF_EVENTO_S2206_HORARIO
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE FORCE VIEW VGF_EVENTO_S2206_HORARIO
AS
SELECT HOR.*
       FROM VGF_EVENTO_S2200_BASE_HORARIO HOR
          , VGF_EVENTO_S2206 FUN
      WHERE FUN.CODEMP = HOR.CODEMP
            AND FUN.CHAVE = HOR.CHAVEPAI
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 06/03/2018 09:41:37
Num.Script: 51815-0-0
Nro. O.S. : 1147664
Nome      : Cria - VGF_EVENTO_S2200_BASE_DEPEND
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - VGF_EVENTO_S2200_BASE_DEPEND
NomeObjeto: VGF_EVENTO_S2200_BASE_DEPEND
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE FORCE VIEW VGF_EVENTO_S2200_BASE_DEPEND
AS
   SELECT CAST (
             (CASE
                 WHEN GRAUPARENTESCO = 1 THEN 3
                 WHEN GRAUPARENTESCO = 2 THEN 1
                 WHEN GRAUPARENTESCO = 3 THEN 9
                 WHEN GRAUPARENTESCO = 6 THEN 11
                 WHEN GRAUPARENTESCO = 8 THEN 5
                 WHEN GRAUPARENTESCO = 9 THEN 6
                 WHEN GRAUPARENTESCO = 10 THEN 8
                 WHEN GRAUPARENTESCO = 11 THEN 10
                 WHEN GRAUPARENTESCO = 12 THEN 2
                 WHEN GRAUPARENTESCO = 13 THEN 4
                 WHEN GRAUPARENTESCO = 14 THEN 12
              END) AS VARCHAR2 (2))
             "TPDEP",
          DPD.NOMEDEPEND AS "NMDEP",
          DPD.DTNASC AS "DTNASCTO",
          DPD.CPF AS "CPFDEP",
          CAST (DPD.DEPENDIRF AS CHAR (1)) AS "DEPIRRF",
          CAST (DPD.SALFAM AS CHAR (1)) AS "DEPSF",
          DPD.INCTRAB AS "INCTRAB",
          VEMP.CODEMPMATRIZ AS CODEMP,
          CAST (DPD.CODEMP || ':' || DPD.CODFUNC AS VARCHAR2 (100))
             AS "CHAVEPAI",
          CAST (DPD.SEQUENCIA AS VARCHAR2 (100)) AS "CHAVE"
     FROM TFPDPD DPD, VGF_EVENTO_EMPREGADOR VEMP
    WHERE     DPD.GRAUPARENTESCO NOT IN (4, 5, 7)
          AND DPD.CODEMP = VEMP.CODEMP
          AND (DPD.DEPENDIRF = 'S' OR DPD.SALFAM = 'S' OR DPD.INCTRAB = 'S')
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 06/03/2018 09:41:27
Num.Script: 51816-0-0
Nro. O.S. : 1147664
Nome      : Altera - VGF_EVENTO_S2200_DEPENDENTE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VGF_EVENTO_S2200_DEPENDENTE
NomeObjeto: VGF_EVENTO_S2200_DEPENDENTE
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE FORCE VIEW VGF_EVENTO_S2200_DEPENDENTE
AS
   SELECT DEP.*
     FROM VGF_EVENTO_S2200_BASE_DEPEND DEP
        , VGF_EVENTO_S2200 FUN
    WHERE DEP.CODEMP = FUN.CODEMP
      AND DEP.CHAVEPAI = FUN.CHAVE
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 06/03/2018 09:41:21
Num.Script: 51817-0-0
Nro. O.S. : 1147664
Nome      : Altera - VGF_EVENTO_S2205_DEPENDENTE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VGF_EVENTO_S2205_DEPENDENTE
NomeObjeto: VGF_EVENTO_S2205_DEPENDENTE
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE FORCE VIEW VGF_EVENTO_S2205_DEPENDENTE
AS
   SELECT DEP.*
   FROM VGF_EVENTO_S2200_BASE_DEPEND DEP
      , VGF_EVENTO_S2205 FUN
   WHERE DEP.CODEMP = FUN.CODEMP
      AND DEP.CHAVEPAI = FUN.CHAVE
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 05/03/2018 19:19:08
Num.Script: 51820-0-0
Nro. O.S. : 1147664
Nome      : Altera - VGF_EVENTO_S1050
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VGF_EVENTO_S1050
NomeObjeto: VGF_EVENTO_S1050
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE FORCE VIEW VGF_EVENTO_S1050
AS
     SELECT VEMP.TPINSCEMPREGADOR,
            VEMP.NRINSCEMPREGADOR,
            H.CODCARGAHORESOCIAL AS "CODHORCONTRAT",
            LPAD (
               CAST (
                  (SELECT MIN (ENTRADA)
                     FROM TFPHOR
                    WHERE     CODCARGAHOR = CGH.CODCARGAHOR
                          AND DIASEM = H.DIASEM
                          AND TURNO =
                                 (SELECT MIN (TURNO)
                                    FROM TFPHOR
                                   WHERE     CODCARGAHORESOCIAL =
                                                H.CODCARGAHORESOCIAL
                                         AND NVL (ENTRADA, 0) > 0)) AS VARCHAR (4)),
               4,
               '0')
               AS "HRENTR",
            LPAD (
               CAST (
                  (SELECT MAX (SAIDA)
                     FROM TFPHOR
                    WHERE     CODCARGAHOR = CGH.CODCARGAHOR
                          AND DIASEM = H.DIASEM
                          AND TURNO =
                                 (SELECT MAX (TURNO)
                                    FROM TFPHOR
                                   WHERE     CODCARGAHORESOCIAL =
                                                H.CODCARGAHORESOCIAL
                                         AND NVL (SAIDA, 0) > 0)) AS VARCHAR (4)),
               4,
               '0')
               AS "HRSAIDA",
            SUM (HR2DEC (H.DURJORNADAESOCIAL) * 60) AS "DURJORNADA",
            CAST (NVL (PERHORFLEXIVEL, 'N') AS CHAR (1)) AS "PERHORFLEXIVEL",
            CASE
               WHEN CGH.TIPINTERVALO = 0 THEN 2
               ELSE NVL (CGH.TIPINTERVALO, 2)
            END
               AS "TPINTERV",
            CASE
               WHEN CGH.TIPINTERVALO = 0 THEN 1
               ELSE NVL (CGH.DURINTERVALO, '000')
            END
               AS "DURINTERV",
            LPAD (CAST (CGH.INIINTERV AS VARCHAR (4)), 4, '0') AS "INIINTERV",
            LPAD (CAST (CGH.TERMINTERV AS VARCHAR (4)), 4, '0') AS "TERMINTERV",
            HRE.CODEMP AS "CODEMP",
            H.CODCARGAHORESOCIAL AS "CHAVE",
            CGH.CODCARGAHOR AS "CODCARGAHOR",
            CGH.DESCRCARGAHOR AS "DESCRCARGAHOR"
       FROM TFPHOR H,
            TFPCGH CGH,
            VGF_EVENTO_EMPREGADOR VEMP,
            TFPHRE HRE
      WHERE     (   (H.DESCANSOSEM = 'N')
                 OR (H.ENTRADA IS NULL AND H.SAIDA IS NULL))
            AND H.CODCARGAHOR = CGH.CODCARGAHOR
            AND HRE.CODCARGAHORESOCIAL = H.CODCARGAHORESOCIAL
            AND HRE.CODEMP = VEMP.CODEMP
            AND EXISTS
                   (SELECT 1
                      FROM TFPHOR
                     WHERE     CODCARGAHORESOCIAL = H.CODCARGAHORESOCIAL
                           AND NVL (ENTRADA, 0) > 0)
            AND EXISTS
                   (SELECT 1
                      FROM TFPHOR
                     WHERE     CODCARGAHORESOCIAL = H.CODCARGAHORESOCIAL
                           AND NVL (SAIDA, 0) > 0)
   GROUP BY CGH.CODCARGAHOR,
            H.CODCARGAHORESOCIAL,
            H.DIASEM,
            CGH.PERHORFLEXIVEL,
            CGH.TIPINTERVALO,
            CGH.DURINTERVALO,
            CGH.INIINTERV,
            CGH.TERMINTERV,
            HRE.CODEMP,
            CGH.DESCRCARGAHOR,
            VEMP.CODEMP,
            VEMP.CODEMPMATRIZ,
            VEMP.TPINSCEMPREGADOR,
            VEMP.NRINSCEMPREGADOR
   ORDER BY 1
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 05/03/2018 19:19:09
Num.Script: 51822-0-0
Nro. O.S. : 1147664
Nome      : Cria - TRG_INC_UPD_TFPS2200
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TRG_INC_UPD_TFPS2200
NomeObjeto: TRG_INC_UPD_TFPS2200
TipoObjeto: TRIGGER
NomeTabela: TFPS2200
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_INC_UPD_TFPS2200
BEFORE INSERT OR UPDATE ON TFPS2200
FOR EACH ROW
DECLARE P_COUNT     NUMBER(10);

BEGIN

IF (INSERTING AND (:NEW.STATUS = 'F')) OR 
   (UPDATING AND (:NEW.STATUS = 'F') AND (:OLD.STATUS <> :NEW.STATUS)) THEN
    SELECT COUNT(1) INTO P_COUNT
    FROM TFPS2205
    WHERE CODEMP = :NEW.CODEMP 
      AND CHAVE = :NEW.CHAVE
      AND TPAMB = SNK_GET_TPAMB_ESOCIAL
      AND EXISTS(SELECT 1   /* SE O FUNCIONÁRIO NÃO FOI LIBERADO PARA O EVENTO 2205 TEM QUE CONTINUAR GERANDO O 2205 COMO UMA CÓPIA DO 2200*/
                 FROM TFPFUN
                 WHERE CODEMP||':'||CODFUNC = TFPS2205.CHAVE
                   AND SITESOCIAL IN ('5', 'T'));
      
    IF P_COUNT = 0 THEN
        INSERT INTO TFPS2205(UFCTPS, UFCNH, UFBRASIL, TRABAPOSENT, TPLOGRADBRASIL, 
                             TPINSCEMPREGADOR, STATUS, SEXO, SERIECTPS, SEQUENCIA, 
                             REABREADAP, RACACOR, PAISRESID, ORGAOEMISSORRNE, 
                             ORGAOEMISSORRIC, ORGAOEMISSORRG, ORGAOEMISSOROC, 
                             OBSERVACAO, NRRNE, NRRIC, NRRG, NRREGCNH, 
                             NRORECIBO_ANT, NRORECIBO, NROC, NRLOGRADEXTERIOR, 
                             NRLOGRADBRASIL, NRINSCEMPREGADOR, NRCTPS, NMTRAB, 
                             NMSOC, NMCIDEXTERIOR, NISTRAB, INFOCOTA, FONEPRINC, 
                             FONEALTERNAT, FILHOSBR, ESTCIV, EMAILPRINC, DTVALIDOC, 
                             DTVALIDCNH, DTREF, DTPRIHAB, DTEXPEDRNE, DTEXPEDRIC, 
                             DTEXPEDRG, DTEXPEDOC, DTEXPEDCNH, DTCHEGADA, 
                             DTALTERACAO, DSCLOGRADEXTERIOR, DSCLOGRADBRASIL, 
                             DEFVISUAL, DEFMENTAL, DEFINTELECTUAL, DEFFISICA, 
                             DEFAUDITIVA, CPFTRAB, COMPLEMENTOEXTERIOR, 
                             COMPLEMENTOBRASIL, CODPOSTALEXTERIOR, CODMUNICBRASIL, 
                             CODEMP, CLASSTRABESTRANG, CHAVE, CEPBRASIL, 
                             CATEGORIACNH, CASADOBR, BAIRROEXTERIOR, BAIRROBRASIL, 
                             ACAO)
            VALUES(:NEW.UFCTPS, :NEW.UFCNH, :NEW.UFBRASIL, :NEW.TRABAPOSENT, :NEW.TPLOGRADBRASIL, 
                   :NEW.TPINSCEMPREGADOR, :NEW.STATUS, :NEW.SEXO, :NEW.SERIECTPS, :NEW.SEQUENCIA, 
                   :NEW.REABREADAP, :NEW.RACACOR, :NEW.PAISRESID, :NEW.ORGAOEMISSORRNE, 
                   :NEW.ORGAOEMISSORRIC, :NEW.ORGAOEMISSORRG, :NEW.ORGAOEMISSOROC, 
                   :NEW.OBSERVACAO, :NEW.NRRNE, :NEW.NRRIC, :NEW.NRRG, :NEW.NRREGCNH, 
                   :NEW.NRORECIBO_ANT, :NEW.NRORECIBO, :NEW.NROC, :NEW.NRLOGRADEXTERIOR, 
                   :NEW.NRLOGRADBRASIL, :NEW.NRINSCEMPREGADOR, :NEW.NRCTPS, :NEW.NMTRAB, 
                   :NEW.NMSOC, :NEW.NMCIDEXTERIOR, :NEW.NISTRAB, :NEW.INFOCOTA, :NEW.FONEPRINC, 
                   :NEW.FONEALTERNAT, :NEW.FILHOSBR, :NEW.ESTCIV, :NEW.EMAILPRINC, :NEW.DTVALIDOC, 
                   :NEW.DTVALIDCNH, :NEW.DTREF, :NEW.DTPRIHAB, :NEW.DTEXPEDRNE, :NEW.DTEXPEDRIC, 
                   :NEW.DTEXPEDRG, :NEW.DTEXPEDOC, :NEW.DTEXPEDCNH, :NEW.DTCHEGADA, 
                    NULL /*DTALTERACAO*/, :NEW.DSCLOGRADEXTERIOR, :NEW.DSCLOGRADBRASIL, 
                   :NEW.DEFVISUAL, :NEW.DEFMENTAL, :NEW.DEFINTELECTUAL, :NEW.DEFFISICA, 
                   :NEW.DEFAUDITIVA, :NEW.CPFTRAB, :NEW.COMPLEMENTOEXTERIOR, 
                   :NEW.COMPLEMENTOBRASIL, :NEW.CODPOSTALEXTERIOR, :NEW.CODMUNICBRASIL, 
                   :NEW.CODEMP, :NEW.CLASSTRABESTRANG, :NEW.CHAVE, :NEW.CEPBRASIL, 
                   :NEW.CATEGORIACNH, :NEW.CASADOBR, :NEW.BAIRROEXTERIOR, :NEW.BAIRROBRASIL, 
                   :NEW.ACAO);

  --          INSERT INTO TFPS2205_DEPENDENTE (CODEMP, DTREF, SEQUENCIA, TPDEP, NMDEP, DTNASCTO, CPFDEP, DEPIRRF, DEPSF, INCTRAB, CHAVEPAI, CHAVE, TPAMB)
  --          SELECT CODEMP, :NEW.DTREF, :NEW.SEQUENCIA, TPDEP, NMDEP, DTNASCTO, CPFDEP, DEPIRRF, DEPSF, INCTRAB, CHAVEPAI, CHAVE, SNK_GET_TPAMB_ESOCIAL
  --            FROM VGF_EVENTO_S2200_DEPENDENTE
  --          WHERE CODEMP = :NEW.CODEMP;

    END IF;

    SELECT COUNT(1) INTO P_COUNT
    FROM TFPS2206
    WHERE CODEMP = :NEW.CODEMP 
      AND CHAVE = :NEW.CHAVE
      AND EXISTS(SELECT 1   /* SE O FUNCIONÁRIO NÃO FOI LIBERADO PARA O EVENTO 2205 TEM QUE CONTINUAR GERANDO O 2205 COMO UMA CÓPIA DO 2200*/
                 FROM TFPFUN
                 WHERE CODEMP||':'||CODFUNC = TFPS2206.CHAVE
                   AND SITESOCIAL IN ('6', 'T'));
    IF P_COUNT = 0 THEN 
        INSERT INTO TFPS2206(CODEMP, DTREF, SEQUENCIA, TPINSCEMPREGADOR, 
                             NRINSCEMPREGADOR, CPFTRAB, NISTRAB, MATRICULA, 
                             DTALTERACAO, DTEF, DSCALT, TPREGTRAB, TPREGPREV, 
                             TPREGJOR, NATATIVIDADE, DTBASE, CNPJSINDCATEGPROF, 
                             JUSTPRORR, TPPLANRP, CODCARGO, CODFUNCAO, CODCATEG, 
                             CODCATEG2, CODCARREIRA, DTINGRCARR, VRSALFX, 
                             UNDSALFIXO, DSCSALVAR, TPCONTR, DTTERM, 
                             TPINSCLOCALTRABGERAL, NRINSCLOCALTRABGERAL, 
                             TPLOGRADLOCALTRABDOM, DSCLOGRADLOCALTRABDOM, 
                             NRLOGRADLOCALTRABDOM, COMPLEMENTOLOCALTRABDOM, 
                             BAIRROLOCALTRABDOM, CEPLOCALTRABDOM, CODMUNICLOCALTRABDOM, 
                             UFLOCALTRABDOM, QTDHRSSEM, TPJORNADA, DSCTPJORN, TMPPARC, 
                             CNPJSINDTRAB, NRPROCJUDALVARAJUDICIAL, MTVALTER, STATUS, 
                             NRORECIBO, NRORECIBO_ANT, ACAO, CHAVE)
            VALUES(:NEW.CODEMP, :NEW.DTREF, :NEW.SEQUENCIA, :NEW.TPINSCEMPREGADOR, 
                   :NEW.NRINSCEMPREGADOR, :NEW.CPFTRAB, :NEW.NISTRAB, :NEW.MATRICULA, 
                    NULL /*:NEW.DTALTERACAO*/, NULL/*:NEW.DTEF*/, NULL /*:NEW.DSCALT*/, :NEW.TPREGTRAB, :NEW.TPREGPREV, 
                   :NEW.TPREGJOR, :NEW.NATATIVIDADE, :NEW.DTBASE, :NEW.CNPJSINDCATEGPROF, 
                    NULL /*:NEW.JUSTPRORR*/, :NEW.TPPLANRP, :NEW.CODCARGO, :NEW.CODFUNCAO, :NEW.CODCATEG, 
                   :NEW.CODCATEG2, :NEW.CODCARREIRA, :NEW.DTINGRCARR, :NEW.VRSALFX, 
                   :NEW.UNDSALFIXO, :NEW.DSCSALVAR, :NEW.TPCONTR, :NEW.DTTERM, 
                   :NEW.TPINSCLOCALTRABGERAL, :NEW.NRINSCLOCALTRABGERAL, 
                   :NEW.TPLOGRADLOCALTRABDOM, :NEW.DSCLOGRADLOCALTRABDOM, 
                   :NEW.NRLOGRADLOCALTRABDOM, :NEW.COMPLEMENTOLOCALTRABDOM, 
                   :NEW.BAIRROLOCALTRABDOM, :NEW.CEPLOCALTRABDOM, :NEW.CODMUNICLOCALTRABDOM, 
                   :NEW.UFLOCALTRABDOM, :NEW.QTDHRSSEM, :NEW.TPJORNADA, :NEW.DSCTPJORN, :NEW.TMPPARC, 
                   :NEW.CNPJSINDTRAB, :NEW.NRPROCJUDALVARAJUDICIAL, NULL /*:NEW.MTVALTE*/, :NEW.STATUS, 
                   :NEW.NRORECIBO, :NEW.NRORECIBO_ANT, :NEW.ACAO, :NEW.CHAVE);

 
         --   INSERT INTO TFPS2206_HORARIO (CODEMP, DTREF, SEQUENCIA, DIA, CODHORCONTRAT, CHAVEPAI, CHAVE, TPAMB)
         --   SELECT CODEMP, :NEW.DTREF, :NEW.SEQUENCIA, DIA, CODHORCONTRAT, CHAVEPAI, CHAVE, SNK_GET_TPAMB_ESOCIAL
         --     FROM VGF_EVENTO_S2200_HORARIO
         --   WHERE CODEMP = :NEW.CODEMP;

   END IF;

END IF;

--COMMIT;

END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 15/05/2018 09:55:06
Num.Script: 51823-0-0
Nro. O.S. : 1147664
Nome      : Cria - VGF_EVENTO_S2200_BASE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - VGF_EVENTO_S2200_BASE
NomeObjeto: VGF_EVENTO_S2200_BASE
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2200_BASE
AS
 SELECT VEMP.TPINSCEMPREGADOR,
          VEMP.NRINSCEMPREGADOR,
          FUN.CPF AS "CPFTRAB",
          FUN.PIS AS "NISTRAB",
          FUN.NOMEFUNC AS "NMTRAB",
          FUN.DTALTER AS DTALTERACAO,
          CAST(NULL AS DATE) AS DTREF,
          '' AS EMAILALTERNAT,
          CAST (FUN.SEXO AS CHAR (1)) AS "SEXO",
          CASE
             WHEN RACAFUNCIONARIO = 2 THEN 1
             WHEN RACAFUNCIONARIO = 4 THEN 2
             WHEN RACAFUNCIONARIO = 8 THEN 3
             WHEN RACAFUNCIONARIO = 6 THEN 4
             WHEN RACAFUNCIONARIO = 0 THEN 5
             ELSE 6
          END
             AS "RACACOR",
          CASE
             WHEN FUN.ESTADOCIVIL = 3 THEN 5
             WHEN FUN.ESTADOCIVIL IN (5, 6) THEN 3
             WHEN FUN.ESTADOCIVIL = 7 THEN 2
             ELSE FUN.ESTADOCIVIL
          END
             AS "ESTCIV",
          CAST (
             CASE
                WHEN FUN.NIVESC = 10 THEN 11
                WHEN FUN.NIVESC = 11 THEN 12
                ELSE FUN.NIVESC
             END AS VARCHAR (2))
             AS "GRAUINSTR",
          CASE WHEN FUN.PRIMEMPREGO = 'S' THEN 'S' ELSE 'N' END "INDPRIEMPR",
          FUN.NMSOCIAL AS "NMSOC",
          FUN.DTNASC AS "DTNASCTONASCIMENTO",
          (SELECT CODMUNFIS
             FROM TSICID
            WHERE CODCID = FUN.CIDNASC)
             AS "CODMUNICNASCIMENTO",
          (SELECT UFS.UF
             FROM TSIUFS UFS, TSICID CID
            WHERE UFS.CODUF = CID.UF AND CID.CODCID = FUN.CIDNASC)
             AS "UFNASCIMENTO",
          (SELECT SUBSTR (CODPAISFIS, 1, 3)
             FROM TSIPAI PAI, TSIUFS UFS, TSICID CID
            WHERE     UFS.CODUF = CID.UF
                  AND CID.CODCID = FUN.CIDNASC
                  AND PAI.CODPAIS = UFS.CODPAIS)
             AS "PAISNASCTONASCIMENTO",
          (SELECT SUBSTR (CODPAISFIS, 1, 3)
             FROM TSIPAI PAI
            WHERE PAI.CODPAIS = FUN.CODPAISNAC)
             AS "PAISNACNASCIMENTO",
          FUN.NOMEMAE AS "NMMAENASCIMENTO",
          FUN.NOMEPAI AS "NMPAINASCIMENTO",
          CAST (FUN.NUMCPS AS VARCHAR (11)) AS "NRCTPS",
          FUN.SERIECPS AS "SERIECTPS",
          (SELECT UF
             FROM TSIUFS
            WHERE CODUF = FUN.UFCPS)
             AS "UFCTPS",
          FUN.NRORIC AS "NRRIC",
          FUN.ORGAORIC AS "ORGAOEMISSORRIC",
          FUN.DTEMIRIC AS "DTEXPEDRIC",
          REPLACE (
             REPLACE (REPLACE (REPLACE (FUN.IDENTIDADE, '-', ''), '/', ''),
                      '.',
                      ''),
             ' ',
             '')
             AS "NRRG",
          FUN.ORGAORG AS "ORGAOEMISSORRG",
          FUN.DTRG AS "DTEXPEDRG",
          SUBSTR (FUN.RNE, 1, 14) AS NRRNE,
          FUN.ORGAORNE AS "ORGAOEMISSORRNE",
          FUN.DTEXPRNE AS "DTEXPEDRNE",
          FUN.NROC AS "NROC",
          FUN.ORGAOOC AS "ORGAOEMISSOROC",
          FUN.DTEXPOC AS "DTEXPEDOC",
          FUN.DTVALOC AS "DTVALIDOC",
          FUN.NROCNH AS "NRREGCNH",
          FUN.DTEXPCNH AS "DTEXPEDCNH",
          (SELECT UF
             FROM TSIUFS
            WHERE CODUF = FUN.UFCNH)
             AS "UFCNH",
          FUN.VENCIMENTOCNH AS "DTVALIDCNH",
          FUN.PRIMEIRACNH AS "DTPRIHAB",
          SUBSTR (FUN.CATEGORIACNH, 1, 2) AS "CATEGORIACNH",
          EN.TIPO AS "TPLOGRADBRASIL",
          EN.NOMEEND AS "DSCLOGRADBRASIL",
          FUN.NUMEND AS "NRLOGRADBRASIL",
          FUN.COMPLEMENTO AS "COMPLEMENTOBRASIL",
          BAI.NOMEBAI AS "BAIRROBRASIL",
          FUN.CEP AS "CEPBRASIL",
          CAST (CID.CODMUNFIS AS VARCHAR (7)) AS "CODMUNICBRASIL",
          UFS.UF AS "UFBRASIL",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105
             THEN
                SUBSTR (PA.CODPAISFIS, 1, 3)
             ELSE
                NULL
          END
             AS "PAISRESID",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105 THEN EN.NOMEEND
             ELSE NULL
          END
             AS "DSCLOGRADEXTERIOR",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105 THEN FUN.NUMEND
             ELSE NULL
          END
             AS "NRLOGRADEXTERIOR",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105 THEN FUN.COMPLEMENTO
             ELSE NULL
          END
             AS "COMPLEMENTOEXTERIOR",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105 THEN BAI.NOMEBAI
             ELSE NULL
          END
             AS "BAIRROEXTERIOR",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105 THEN CID.NOMECID
             ELSE NULL
          END
             AS "NMCIDEXTERIOR",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105 THEN FUN.CAIXAPOSTAL
             ELSE NULL
          END
             AS "CODPOSTALEXTERIOR",
          FUN.DTCHEGPAIS AS "DTCHEGADA",
          FUN.CLASSTRABESTRANG,
          FUN.CASADOBR AS "CASADOBR",
          FUN.FILHOSBR AS "FILHOSBR",
          CASE WHEN FUN.TIPDEFICIENCIA IN (0, 5, 7) THEN 'N' ELSE 'S' END
             AS "DEFFISICA",
          CASE WHEN FUN.TIPDEFICIENCIA = 3 THEN 'S' ELSE 'N' END
             AS "DEFVISUAL",
          CASE WHEN FUN.TIPDEFICIENCIA = 2 THEN 'S' ELSE 'N' END
             AS "DEFAUDITIVA",
          CASE WHEN FUN.TIPDEFICIENCIA = 8 THEN 'S' ELSE 'N' END
             AS "DEFMENTAL",
          CASE WHEN FUN.TIPDEFICIENCIA = 4 THEN 'S' ELSE 'N' END
             AS "DEFINTELECTUAL",
          CASE WHEN FUN.TIPDEFICIENCIA = 6 THEN 'S' ELSE 'N' END
             AS "REABREADAP",
          FUN.INFOCOTA AS "INFOCOTA",
          FUN.OBSDEFICIENCIA AS "OBSERVACAO",
          FUN.TRABAPOSENT AS "TRABAPOSENT",
          CASE
             WHEN LENGTH (TRIM (FUN.TELEFONE)) < 10 THEN NULL
             ELSE REPLACE (FUN.TELEFONE, ' ', '')
          END
             AS "FONEPRINC",
          CASE
             WHEN LENGTH (TRIM (FUN.CELULAR)) < 10 THEN NULL
             ELSE REPLACE (FUN.CELULAR, ' ', '')
          END
             AS "FONEALTERNAT",
          REPLACE (FUN.EMAIL, ' ', '') AS "EMAILPRINC",
          CAST (FUN.MATRICULA AS VARCHAR (30)) AS "MATRICULA",
          CASE WHEN FUN.REGIMETRAB IN (2, 3) THEN 2 ELSE 1 END AS "TPREGTRAB",
          CASE
             WHEN FUN.REGIME IN (1, 3) THEN 2
             WHEN FUN.REGIME = 2 THEN 1
             ELSE 3
          END
             AS "TPREGPREV",
          (SELECT NVL (FILA.NRORECIBO, '')
             FROM EVTFILA FILA
            WHERE     FILA.TIPOEVENTO = 'S-2190'
                  AND FILA.CODEMP = VEMP.CODEMPMATRIZ
                  AND FILA.CHAVE =
                         CAST (
                            FUN.CODEMP || ':' || FUN.CODFUNC AS VARCHAR2 (100)))
             AS "NRRECINFPRELIM",
          CASE WHEN FUN.DTADM < VEMP.DTCARGAINICIAL THEN 'S' ELSE 'N' END
             AS "CADINI",
          FUN.DTADM AS "DTADM",
          CASE
             WHEN FUN.VINCULO IN (30, 31, 35) THEN NULL
             WHEN FUN.PRIMEMPREGO IN ('A', 'T') THEN 2
             WHEN FUN.PRIMEMPREGO = 'H' THEN 3
             WHEN FUN.PRIMEMPREGO = 'I' THEN 4
             ELSE 1
          END
             AS "TPADMISSAO",
          FUN.INDADMISSAO AS "INDADMISSAO",
          FUN.REGIMEJOR AS "TPREGJOR",
          (SELECT CASE WHEN TIPHORANOTURNA = 'U' THEN 1 ELSE 2 END
             FROM TFPCBO CBO
            WHERE CBO.CODCBO = CASE
                                  WHEN (SELECT 1
                                          FROM TSIPAR
                                         WHERE     CHAVE = 'FPUTILIZACBO'
                                               AND INTEIRO = 0) > 0
                                  THEN
                                     (SELECT CODCBO
                                        FROM TFPCAR C
                                       WHERE C.CODCARGO = FUN.CODCARGO)
                                  ELSE
                                     (SELECT CODCBO
                                        FROM TFPFCO F
                                       WHERE F.CODFUNCAO = FUN.CODFUNCAO)
                               END)
             AS "NATATIVIDADE",
          (SELECT MESDATABASE
             FROM TFPPRE
            WHERE CODPREF = SIND.CODPREF)
             AS "DTBASE",
          SIND.CGC AS "CNPJSINDCATEGPROF",
          1 AS "OPCFGTS",
          FUN.DTOPTFGTS AS "DTOPCFGTS",
          CASE WHEN FUN.CONTTRABTEMP > 0 THEN FUN.CONTTRABTEMP ELSE NULL END
             AS "HIPLEG",
          SUBSTR (FUN.JUSTCONTR, 1, 999) AS "JUSTCONTR",
          FUN.TPINCLCONTR AS "TPINCLCONTR",
          FUN.TPINSCTOMADOR AS "TPINSCIDETOMADORSERV",
          FUN.NRINSCTOMADOR AS "NRINSCIDETOMADORSERV",
          FUN.TPINSCESTABVINC AS "TPINSCIDEESTABVINC",
          FUN.NRINSCESTABVINC AS "NRINSCIDEESTABVINC",
          FUN.CPFSUBSTITUIDO AS "CPFTRABSUBST",
          CASE WHEN PUB.CODEMP IS NOT NULL THEN PUB.INDPROVIM ELSE NULL END
             AS "INDPROVIM",
          CASE WHEN PUB.CODEMP IS NOT NULL THEN PUB.TPPROV ELSE NULL END
             AS "TPPROV",
          CASE
             WHEN PUB.CODEMP IS NOT NULL THEN PUB.DTDESIGNACAO
             ELSE NULL
          END
             AS "DTNOMEACAO",
          CASE WHEN PUB.CODEMP IS NOT NULL THEN PUB.DTPOSSE ELSE NULL END
             AS "DTPOSSE",
          CASE WHEN PUB.CODEMP IS NOT NULL THEN PUB.DTEXERC ELSE NULL END
             AS "DTEXERCICIO",
          PUB.TPPLANRP AS "TPPLANRP",
          CAST (PUB.NUPROCESSOJUD AS VARCHAR (20)) AS "NRPROCJUDINFODECJUD",
          CAST (CASE
                   WHEN (SELECT 1
                           FROM TSIPAR
                          WHERE CHAVE = 'FPUTILIZACBO' AND INTEIRO = 0) > 0
                   THEN
                      FUN.CODCARGO
                   ELSE
                      FUN.CODFUNCAO
                END AS VARCHAR (30))
             AS "CODCARGO",
          CAST (CASE
                   WHEN (SELECT LOGICO
                           FROM TSIPAR
                          WHERE CHAVE = 'FPTRIBUNAL') = 'S'
                   THEN
                      (SELECT CODFUNCAO
                         FROM TFPFCO
                        WHERE CODFUNCAO = FUN.CODFUNCAO)
                   ELSE
                      0
                END AS VARCHAR2 (30))
             AS "CODFUNCAO",
          FUN.CODCATEGESOCIAL AS "CODCATEG",
          CASE WHEN FUN.CODCATEGESOCIAL IN (104, 106) THEN 1 ELSE 0 END
             AS "CODCATEG2",
          CASE
             WHEN PUB.CODEMP IS NOT NULL
             THEN
                CAST (FUN.CODCARREIRA AS VARCHAR (30))
             ELSE
                NULL
          END
             AS "CODCARREIRA",
          PUB.DTINGRCARR AS "DTINGRCARR",
          CAST (
             CASE
                WHEN FUN.TIPSAL = 5 AND NVL (FUN.SALBASE, 0) = 0 THEN 0
                ELSE FUN.SALBASE
             END AS FLOAT)
             AS "VRSALFX",
          CASE
             WHEN FUN.TIPSAL = 1 THEN 5
             WHEN FUN.TIPSAL = 2 THEN 4
             WHEN FUN.TIPSAL = 3 THEN 3
             WHEN FUN.TIPSAL = 4 THEN 2
             WHEN FUN.TIPSAL = 5 AND NVL (FUN.SALBASE, 0) > 0 THEN 1
             WHEN FUN.TIPSAL = 5 AND NVL (FUN.SALBASE, 0) = 0 THEN 7
             WHEN FUN.COMPSALARIO = 2 THEN 8
             ELSE 6
          END
             AS "UNDSALFIXO",
          CASE
             WHEN FUN.TIPSAL = 5 AND NVL (FUN.SALBASE, 0) = 0
             THEN
                FUN.OBSVARIAVEL
             ELSE
                NULL
          END
             AS "DSCSALVAR",
          CASE
             WHEN FUN.VINCULO IN (10, 15, 20, 25, 30, 31, 35, 55) THEN 1
             WHEN FUN.VINCULO IN (60, 65, 70, 75, 95, 96, 97) THEN 2
             ELSE NULL
          END
             AS "TPCONTR",
          CASE
             WHEN FUN.VINCULO IN (60, 65, 70, 75, 95, 96, 97) THEN DTTERMINO
             ELSE NULL
          END
             AS "DTTERM",
          CAST (FUN.DIRRECIPROCO AS CHAR (1)) AS "CLAUASSEG",
          NVL((SELECT CASE WHEN LENGTH(E.CGC) = 14 THEN 1 ELSE 2 END
                    FROM TFPTOM TOM, TSIEMP E
                   WHERE TOM.CODPARC = E.CODPARC
                     AND TOM.CODEMP = E.CODEMP
                     AND TOM.CODEMP = FUN.CODEMP
                     AND TOM.CODFUNC = FUN.CODFUNC
                     AND TOM.DTINICIO = (SELECT MAX(DTINICIO)
                                           FROM TFPTOM TM
                                          WHERE TM.CODEMP = TOM.CODEMP
                                            AND TM.CODPARC = TOM.CODPARC
                                            AND TM.CODFUNC = TOM.CODFUNC)), VEMP.TPINSCEMPREGADOR) AS "TPINSCLOCALTRABGERAL",
          NVL((SELECT CASE WHEN LENGTH(E.CGC) = 14 AND (SELECT LOGICO FROM TSIPAR WHERE CHAVE = 'FPTRIBUNAL') = 'N' THEN SUBSTR(E.CGC, 1, 8) ELSE E.CGC END 
                    FROM TFPTOM TOM, TSIEMP E
                   WHERE TOM.CODPARC = E.CODPARC
                     AND TOM.CODEMP = E.CODEMP
                     AND TOM.CODEMP = FUN.CODEMP
                     AND TOM.CODFUNC = FUN.CODFUNC
                     AND TOM.DTINICIO = (SELECT MAX(DTINICIO)
                                           FROM TFPTOM TM
                                          WHERE TM.CODEMP = TOM.CODEMP
                                            AND TM.CODPARC = TOM.CODPARC
                                            AND TM.CODFUNC = TOM.CODFUNC)), VEMP.NRINSCEMPREGADOR) AS "NRINSCLOCALTRABGERAL",

          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                (SELECT TIPO
                   FROM TSIEND
                  WHERE CODEND = VEMP.CODEND)
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT (SELECT TIPO
                           FROM TSIEND
                          WHERE CODEND = PAR.CODEND)
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "TPLOGRADLOCALTRABDOM",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                (SELECT NOMEEND
                   FROM TSIEND
                  WHERE CODEND = VEMP.CODEND)
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT (SELECT NOMEEND
                           FROM TSIEND
                          WHERE CODEND = PAR.CODEND)
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "DSCLOGRADLOCALTRABDOM",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                VEMP.NUMEND
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT PAR.NUMEND
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "NRLOGRADLOCALTRABDOM",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                VEMP.COMPLEMENTO
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT PAR.COMPLEMENTO
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "COMPLEMENTOLOCALTRABDOM",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                (SELECT NOMEBAI
                   FROM TSIBAI
                  WHERE CODBAI = VEMP.CODBAI)
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT (SELECT NOMEBAI
                           FROM TSIBAI
                          WHERE CODBAI = PAR.CODBAI)
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "BAIRROLOCALTRABDOM",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                VEMP.CEP
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT PAR.CEP
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "CEPLOCALTRABDOM",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                (SELECT CODMUNFIS
                   FROM TSICID
                  WHERE CODCID = VEMP.CODCID)
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT (SELECT CODMUNFIS
                           FROM TSICID
                          WHERE CODCID = PAR.CODCID)
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "CODMUNICLOCALTRABDOM",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                (SELECT UFS.UF
                   FROM TSIUFS UFS, TSICID CID
                  WHERE CODUF = CID.UF AND CID.CODCID = VEMP.CODCID)
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT (SELECT UFS.UF
                           FROM TSIUFS UFS, TSICID CID
                          WHERE CODUF = CID.UF AND CID.CODCID = PAR.CODCID)
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "UFLOCALTRABDOM",
          FUN.HORASSEM AS "QTDHRSSEM",
          CASE
             WHEN (CGH.ESCALONAR = 'N') THEN 1
             WHEN (CGH.DIASTRAB = CGH.DIASFOLGA) THEN 2
             ELSE 9
          END
             AS "TPJORNADA",
          CGH.DESCRCARGAHOR AS "DSCTPJORN",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104 AND FUN.HORASSEM <= 25 THEN '1'
             WHEN FUN.CODCATEGESOCIAL <> 104 AND FUN.HORASSEM <= 26 THEN '3'
             WHEN FUN.CODCATEGESOCIAL <> 104 AND FUN.HORASSEM <= 25 THEN '2'
             ELSE '0'
          END
             AS "TMPPARC",
          CASE
             WHEN (SELECT DISTINCT 1
                     FROM TFPFOL FOL
                    WHERE     FOL.REFERENCIA = EMP.REFERENCIA
                          AND FOL.CODEMP = FUN.CODEMP
                          AND FOL.CODFUNC = FUN.CODFUNC
                          AND (   ','
                               || CAST (
                                     SIND.EVENTOCONTASSOC AS VARCHAR (250))
                               || ',') LIKE
                                 (   '%,'
                                  || CAST (FOL.CODEVENTO AS VARCHAR (5))
                                  || ',%')) = 1
             THEN
                SIND.CGC
             ELSE
                ''
          END
             AS "CNPJSINDTRAB",
          CAST ( (SELECT NUMPROCESSO
                    FROM TFPPSS
                   WHERE NUPROCESSO = FUN.NUPROCESSOJUD) AS VARCHAR (20))
             AS "NRPROCJUDALVARAJUDICIAL",
          FUN.CNPJEMPANT AS "CNPJEMPREGANT",
          FUN.MATRICULAEMPANT AS "MATRICANT",
          FUN.DTVINCEMPANT AS "DTINIVINCULO",
          FUN.OBSEMPANT AS "OBSERVACAOSUCESSAOVINC",
          (SELECT NVL (OCO.DTINICOCOR, '')
             FROM TFPOCO OCO, TFPHIS H
            WHERE     OCO.CODEMP = FUN.CODEMP
                  AND OCO.CODFUNC = FUN.CODFUNC
                  AND OCO.CODHISTOCOR = H.CODHISTOCOR
                  AND H.AFASTAMENTO IN ('A', 'D', 'M', 'G', 'Y')
                  AND H.CODMOTAFAST IS NOT NULL
                  AND OCO.DTFINALOCOR IS NULL)
             AS "DTINIAFAST",
          (SELECT NVL (H.CODMOTAFAST, '')
             FROM TFPOCO OCO, TFPHIS H
            WHERE     OCO.CODEMP = FUN.CODEMP
                  AND OCO.CODFUNC = FUN.CODFUNC
                  AND OCO.CODHISTOCOR = H.CODHISTOCOR
                  AND H.AFASTAMENTO IN ('A', 'D', 'M', 'G', 'Y')
                  AND H.CODMOTAFAST IS NOT NULL
                  AND OCO.DTFINALOCOR IS NULL)
             AS "CODMOTAFAST",
          PUB.MTVALTER,
          FUN.JUSTPRORR,
          NULL AS DSCALT,
          FUN.DTDEM AS "DTDESLIG",
          VEMP.CODEMPMATRIZ AS CODEMP,
          CAST (FUN.CODEMP || ':' || FUN.CODFUNC AS VARCHAR2 (100))
             AS "CHAVE",
          FUN.SITESOCIAL,
          SNK_GET_TPAMB_ESOCIAL AS TPAMB
     FROM TFPFUN FUN
          LEFT JOIN TFPPUB PUB
             ON (    FUN.CODEMP = PUB.CODEMP
                 AND FUN.CODFUNC = PUB.CODFUNC
                 AND EXISTS
                        (SELECT 1
                           FROM TSIPAR
                          WHERE CHAVE = 'FPTRIBUNAL' AND LOGICO = 'S'))
          JOIN TFPDEP DEP ON DEP.CODDEP = FUN.CODDEP,
          TSICID CID,
          TSIEND EN,
          TSIBAI BAI,
          TSIUFS UFS,
          TSIPAI PA,
          TFPSIN SIND,
          TFPEMP EMP,
          VGF_EVENTO_EMPREGADOR VEMP,
          TFPCGH CGH
    WHERE     FUN.CODEND = EN.CODEND
          AND FUN.CODBAI = BAI.CODBAI
          AND FUN.CODCID = CID.CODCID
          AND CID.UF = UFS.CODUF
          AND UFS.CODPAIS = PA.CODPAIS
          AND FUN.CODSIND = SIND.CODSIND
          AND FUN.CODEMP = EMP.CODEMP
          AND FUN.CODEMP = VEMP.CODEMP
          AND FUN.CODCARGAHOR = CGH.CODCARGAHOR
          AND VEMP.DTCARGAINICIAL IS NOT NULL
          AND FUN.CODCATEGESOCIAL NOT IN
                 (701,
                  711,
                  712,
                  721,
                  722,
                  723,
                  731,
                  734,
                  738,
                  741,
                  751,
                  761,
                  771,
                  781)
          AND FUN.SITESOCIAL IN ('O', '5', '6', 'T')
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 05/03/2018 19:19:09
Num.Script: 51824-0-0
Nro. O.S. : 1147664
Nome      : Altera - VGF_EVENTO_S2200
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VGF_EVENTO_S2200
NomeObjeto: VGF_EVENTO_S2200
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2200
AS
   SELECT NOVO.TPINSCEMPREGADOR,
          NOVO.NRINSCEMPREGADOR,
          NOVO.CPFTRAB,
          NOVO.NISTRAB,
          NOVO.NMTRAB,
          NOVO.SEXO,
          NOVO.RACACOR,
          NOVO.ESTCIV,
          NOVO.GRAUINSTR,
          NOVO.INDPRIEMPR,
          NOVO.NMSOC,
          NOVO.DTNASCTONASCIMENTO,
          NOVO.CODMUNICNASCIMENTO,
          NOVO.UFNASCIMENTO,
          NOVO.PAISNASCTONASCIMENTO,
          NOVO.PAISNACNASCIMENTO,
          NOVO.NMMAENASCIMENTO,
          NOVO.NMPAINASCIMENTO,
          NOVO.NRCTPS,
          NOVO.SERIECTPS,
          NOVO.UFCTPS,
          NOVO.NRRIC,
          NOVO.ORGAOEMISSORRIC,
          NOVO.DTEXPEDRIC,
          NOVO.NRRG,
          NOVO.ORGAOEMISSORRG,
          NOVO.DTEXPEDRG,
          NOVO.NRRNE,
          NOVO.ORGAOEMISSORRNE,
          NOVO.DTEXPEDRNE,
          NOVO.NROC,
          NOVO.ORGAOEMISSOROC,
          NOVO.DTEXPEDOC,
          NOVO.DTVALIDOC,
          NOVO.NRREGCNH,
          NOVO.DTEXPEDCNH,
          NOVO.UFCNH,
          NOVO.DTVALIDCNH,
          NOVO.DTPRIHAB,
          NOVO.CATEGORIACNH,
          NOVO.TPLOGRADBRASIL,
          NOVO.DSCLOGRADBRASIL,
          NOVO.NRLOGRADBRASIL,
          NOVO.COMPLEMENTOBRASIL,
          NOVO.BAIRROBRASIL,
          NOVO.CEPBRASIL,
          NOVO.CODMUNICBRASIL,
          NOVO.UFBRASIL,
          NOVO.PAISRESID,
          NOVO.DSCLOGRADEXTERIOR,
          NOVO.NRLOGRADEXTERIOR,
          NOVO.COMPLEMENTOEXTERIOR,
          NOVO.BAIRROEXTERIOR,
          NOVO.NMCIDEXTERIOR,
          NOVO.CODPOSTALEXTERIOR,
          NOVO.DTCHEGADA,
          NOVO.CLASSTRABESTRANG,
          NOVO.CASADOBR,
          NOVO.FILHOSBR,
          NOVO.DEFFISICA,
          NOVO.DEFVISUAL,
          NOVO.DEFAUDITIVA,
          NOVO.DEFMENTAL,
          NOVO.DEFINTELECTUAL,
          NOVO.REABREADAP,
          NOVO.INFOCOTA,
          NOVO.OBSERVACAO,
          NOVO.TRABAPOSENT,
          NOVO.FONEPRINC,
          NOVO.FONEALTERNAT,
          NOVO.EMAILPRINC,
          NOVO.MATRICULA,
          NOVO.TPREGTRAB,
          NOVO.TPREGPREV,
          NOVO.NRRECINFPRELIM,
          NOVO.CADINI,
          NOVO.DTADM,
          NOVO.TPADMISSAO,
          NOVO.INDADMISSAO,
          NOVO.TPREGJOR,
          NOVO.NATATIVIDADE,
          NOVO.DTBASE,
          NOVO.CNPJSINDCATEGPROF,
          NOVO.OPCFGTS,
          NOVO.DTOPCFGTS,
          NOVO.HIPLEG,
          NOVO.JUSTCONTR,
          NOVO.TPINCLCONTR,
          NOVO.TPINSCIDETOMADORSERV,
          NOVO.NRINSCIDETOMADORSERV,
          NOVO.TPINSCIDEESTABVINC,
          NOVO.NRINSCIDEESTABVINC,
          NOVO.CPFTRABSUBST,
          NOVO.INDPROVIM,
          NOVO.TPPROV,
          NOVO.DTNOMEACAO,
          NOVO.DTPOSSE,
          NOVO.DTEXERCICIO,
          NOVO.TPPLANRP,
          NOVO.NRPROCJUDINFODECJUD,
          NOVO.CODCARGO,
          NOVO.CODFUNCAO,
          NOVO.CODCATEG,
          NOVO.CODCATEG2,
          NOVO.CODCARREIRA,
          NOVO.DTINGRCARR,
          NOVO.VRSALFX,
          NOVO.UNDSALFIXO,
          NOVO.DSCSALVAR,
          NOVO.TPCONTR,
          NOVO.DTTERM,
          NOVO.CLAUASSEG,
          NOVO.TPINSCLOCALTRABGERAL,
          NOVO.NRINSCLOCALTRABGERAL,
          NOVO.TPLOGRADLOCALTRABDOM,
          NOVO.DSCLOGRADLOCALTRABDOM,
          NOVO.NRLOGRADLOCALTRABDOM,
          NOVO.COMPLEMENTOLOCALTRABDOM,
          NOVO.BAIRROLOCALTRABDOM,
          NOVO.CEPLOCALTRABDOM,
          NOVO.CODMUNICLOCALTRABDOM,
          NOVO.UFLOCALTRABDOM,
          NOVO.QTDHRSSEM,
          NOVO.TPJORNADA,
          NOVO.DSCTPJORN,
          NOVO.TMPPARC,
          NOVO.CNPJSINDTRAB,
          NOVO.NRPROCJUDALVARAJUDICIAL,
          NOVO.CNPJEMPREGANT,
          NOVO.MATRICANT,
          NOVO.DTINIVINCULO,
          NOVO.OBSERVACAOSUCESSAOVINC,
          NOVO.DTINIAFAST,
          NOVO.CODMOTAFAST,
          NOVO.DTDESLIG,
          NOVO.CODEMP,
          NOVO.CHAVE
     FROM VGF_EVENTO_S2200_BASE NOVO
    WHERE    SITESOCIAL = 'O'
          OR NOT EXISTS
                    (SELECT 1
                       FROM TFPS2200 VELHO
                      WHERE     NOVO.CODEMP = VELHO.CODEMP
                            AND VELHO.TPAMB = NOVO.TPAMB
                            AND NOVO.CHAVE = VELHO.CHAVE)
   UNION
   SELECT NOVO.TPINSCEMPREGADOR,
          NOVO.NRINSCEMPREGADOR,
          NOVO.CPFTRAB,
          NOVO.NISTRAB,
          VELHO.NMTRAB,
          VELHO.SEXO,
          VELHO.RACACOR,
          VELHO.ESTCIV,
          VELHO.GRAUINSTR,
          VELHO.INDPRIEMPR,
          VELHO.NMSOC,
          NOVO.DTNASCTONASCIMENTO,
          NOVO.CODMUNICNASCIMENTO,
          NOVO.UFNASCIMENTO,
          NOVO.PAISNASCTONASCIMENTO,
          NOVO.PAISNACNASCIMENTO,
          NOVO.NMMAENASCIMENTO,
          NOVO.NMPAINASCIMENTO,
          VELHO.NRCTPS,
          VELHO.SERIECTPS,
          VELHO.UFCTPS,
          VELHO.NRRIC,
          VELHO.ORGAOEMISSORRIC,
          VELHO.DTEXPEDRIC,
          VELHO.NRRG,
          VELHO.ORGAOEMISSORRG,
          VELHO.DTEXPEDRG,
          VELHO.NRRNE,
          VELHO.ORGAOEMISSORRNE,
          VELHO.DTEXPEDRNE,
          VELHO.NROC,
          VELHO.ORGAOEMISSOROC,
          VELHO.DTEXPEDOC,
          VELHO.DTVALIDOC,
          VELHO.NRREGCNH,
          VELHO.DTEXPEDCNH,
          VELHO.UFCNH,
          VELHO.DTVALIDCNH,
          VELHO.DTPRIHAB,
          VELHO.CATEGORIACNH,
          VELHO.TPLOGRADBRASIL,
          VELHO.DSCLOGRADBRASIL,
          VELHO.NRLOGRADBRASIL,
          VELHO.COMPLEMENTOBRASIL,
          VELHO.BAIRROBRASIL,
          VELHO.CEPBRASIL,
          VELHO.CODMUNICBRASIL,
          VELHO.UFBRASIL,
          VELHO.PAISRESID,
          VELHO.DSCLOGRADEXTERIOR,
          VELHO.NRLOGRADEXTERIOR,
          VELHO.COMPLEMENTOEXTERIOR,
          VELHO.BAIRROEXTERIOR,
          VELHO.NMCIDEXTERIOR,
          VELHO.CODPOSTALEXTERIOR,
          VELHO.DTCHEGADA,
          VELHO.CLASSTRABESTRANG,
          VELHO.CASADOBR,
          VELHO.FILHOSBR,
          VELHO.DEFFISICA,
          VELHO.DEFVISUAL,
          VELHO.DEFAUDITIVA,
          VELHO.DEFMENTAL,
          VELHO.DEFINTELECTUAL,
          VELHO.REABREADAP,
          VELHO.INFOCOTA,
          VELHO.OBSERVACAO,
          VELHO.TRABAPOSENT,
          VELHO.FONEPRINC,
          VELHO.FONEALTERNAT,
          VELHO.EMAILPRINC,
          NOVO.MATRICULA,
          VELHO.TPREGTRAB,
          NOVO.TPREGPREV,
          NOVO.NRRECINFPRELIM,
          NOVO.CADINI,
          NOVO.DTADM,
          NOVO.TPADMISSAO,
          NOVO.INDADMISSAO,
          NOVO.TPREGJOR,
          NOVO.NATATIVIDADE,
          NOVO.DTBASE,
          NOVO.CNPJSINDCATEGPROF,
          NOVO.OPCFGTS,
          NOVO.DTOPCFGTS,
          NOVO.HIPLEG,
          NOVO.JUSTCONTR,
          NOVO.TPINCLCONTR,
          NOVO.TPINSCIDETOMADORSERV,
          NOVO.NRINSCIDETOMADORSERV,
          NOVO.TPINSCIDEESTABVINC,
          NOVO.NRINSCIDEESTABVINC,
          NOVO.CPFTRABSUBST,
          NOVO.INDPROVIM,
          NOVO.TPPROV,
          NOVO.DTNOMEACAO,
          NOVO.DTPOSSE,
          NOVO.DTEXERCICIO,
          NOVO.TPPLANRP,
          NOVO.NRPROCJUDINFODECJUD,
          NOVO.CODCARGO,
          NOVO.CODFUNCAO,
          NOVO.CODCATEG,
          NOVO.CODCATEG2,
          NOVO.CODCARREIRA,
          NOVO.DTINGRCARR,
          NOVO.VRSALFX,
          NOVO.UNDSALFIXO,
          NOVO.DSCSALVAR,
          NOVO.TPCONTR,
          NOVO.DTTERM,
          NOVO.CLAUASSEG,
          NOVO.TPINSCLOCALTRABGERAL,
          NOVO.NRINSCLOCALTRABGERAL,
          NOVO.TPLOGRADLOCALTRABDOM,
          NOVO.DSCLOGRADLOCALTRABDOM,
          NOVO.NRLOGRADLOCALTRABDOM,
          NOVO.COMPLEMENTOLOCALTRABDOM,
          NOVO.BAIRROLOCALTRABDOM,
          NOVO.CEPLOCALTRABDOM,
          NOVO.CODMUNICLOCALTRABDOM,
          NOVO.UFLOCALTRABDOM,
          NOVO.QTDHRSSEM,
          NOVO.TPJORNADA,
          NOVO.DSCTPJORN,
          NOVO.TMPPARC,
          NOVO.CNPJSINDTRAB,
          NOVO.NRPROCJUDALVARAJUDICIAL,
          NOVO.CNPJEMPREGANT,
          NOVO.MATRICANT,
          NOVO.DTINIVINCULO,
          NOVO.OBSERVACAOSUCESSAOVINC,
          NOVO.DTINIAFAST,
          NOVO.CODMOTAFAST,
          NOVO.DTDESLIG,
          NOVO.CODEMP,
          NOVO.CHAVE
     FROM VGF_EVENTO_S2200_BASE NOVO, TFPS2200 VELHO
    WHERE     NOVO.SITESOCIAL = '5'
          AND NOVO.CODEMP = VELHO.CODEMP
          AND VELHO.TPAMB = NOVO.TPAMB
          AND NOVO.CHAVE = VELHO.CHAVE
          AND VELHO.DTREF = (SELECT SNK_GET_DTREF_ESOCIAL() FROM DUAL)
          AND VELHO.SEQUENCIA = (SELECT SNK_GET_SEQ_ATUAL_ESOCIAL()  FROM DUAL)
   UNION
   SELECT NOVO.TPINSCEMPREGADOR,
          NOVO.NRINSCEMPREGADOR,
          NOVO.CPFTRAB,
          NOVO.NISTRAB,
          NOVO.NMTRAB,
          NOVO.SEXO,
          NOVO.RACACOR,
          NOVO.ESTCIV,
          NOVO.GRAUINSTR,
          NOVO.INDPRIEMPR,
          NOVO.NMSOC,
          NOVO.DTNASCTONASCIMENTO,
          NOVO.CODMUNICNASCIMENTO,
          NOVO.UFNASCIMENTO,
          NOVO.PAISNASCTONASCIMENTO,
          NOVO.PAISNACNASCIMENTO,
          NOVO.NMMAENASCIMENTO,
          NOVO.NMPAINASCIMENTO,
          NOVO.NRCTPS,
          NOVO.SERIECTPS,
          NOVO.UFCTPS,
          NOVO.NRRIC,
          NOVO.ORGAOEMISSORRIC,
          NOVO.DTEXPEDRIC,
          NOVO.NRRG,
          NOVO.ORGAOEMISSORRG,
          NOVO.DTEXPEDRG,
          NOVO.NRRNE,
          NOVO.ORGAOEMISSORRNE,
          NOVO.DTEXPEDRNE,
          NOVO.NROC,
          NOVO.ORGAOEMISSOROC,
          NOVO.DTEXPEDOC,
          NOVO.DTVALIDOC,
          NOVO.NRREGCNH,
          NOVO.DTEXPEDCNH,
          NOVO.UFCNH,
          NOVO.DTVALIDCNH,
          NOVO.DTPRIHAB,
          NOVO.CATEGORIACNH,
          NOVO.TPLOGRADBRASIL,
          NOVO.DSCLOGRADBRASIL,
          NOVO.NRLOGRADBRASIL,
          NOVO.COMPLEMENTOBRASIL,
          NOVO.BAIRROBRASIL,
          NOVO.CEPBRASIL,
          NOVO.CODMUNICBRASIL,
          NOVO.UFBRASIL,
          NOVO.PAISRESID,
          NOVO.DSCLOGRADEXTERIOR,
          NOVO.NRLOGRADEXTERIOR,
          NOVO.COMPLEMENTOEXTERIOR,
          NOVO.BAIRROEXTERIOR,
          NOVO.NMCIDEXTERIOR,
          NOVO.CODPOSTALEXTERIOR,
          NOVO.DTCHEGADA,
          NOVO.CLASSTRABESTRANG,
          NOVO.CASADOBR,
          NOVO.FILHOSBR,
          NOVO.DEFFISICA,
          NOVO.DEFVISUAL,
          NOVO.DEFAUDITIVA,
          NOVO.DEFMENTAL,
          NOVO.DEFINTELECTUAL,
          NOVO.REABREADAP,
          NOVO.INFOCOTA,
          NOVO.OBSERVACAO,
          NOVO.TRABAPOSENT,
          NOVO.FONEPRINC,
          NOVO.FONEALTERNAT,
          NOVO.EMAILPRINC,
          NOVO.MATRICULA,
          NOVO.TPREGTRAB,
          VELHO.TPREGPREV,
          NOVO.NRRECINFPRELIM,
          NOVO.CADINI,
          NOVO.DTADM,
          NOVO.TPADMISSAO,
          NOVO.INDADMISSAO,
          VELHO.TPREGJOR,
          VELHO.NATATIVIDADE,
          VELHO.DTBASE,
          VELHO.CNPJSINDCATEGPROF,
          NOVO.OPCFGTS,
          NOVO.DTOPCFGTS,
          NOVO.HIPLEG,
          NOVO.JUSTCONTR,
          NOVO.TPINCLCONTR,
          NOVO.TPINSCIDETOMADORSERV,
          NOVO.NRINSCIDETOMADORSERV,
          NOVO.TPINSCIDEESTABVINC,
          NOVO.NRINSCIDEESTABVINC,
          NOVO.CPFTRABSUBST,
          NOVO.INDPROVIM,
          NOVO.TPPROV,
          NOVO.DTNOMEACAO,
          NOVO.DTPOSSE,
          NOVO.DTEXERCICIO,
          VELHO.TPPLANRP,
          NOVO.NRPROCJUDINFODECJUD,
          VELHO.CODCARGO,
          VELHO.CODFUNCAO,
          VELHO.CODCATEG,
          VELHO.CODCATEG2,
          VELHO.CODCARREIRA,
          VELHO.DTINGRCARR,
          VELHO.VRSALFX,
          VELHO.UNDSALFIXO,
          VELHO.DSCSALVAR,
          VELHO.TPCONTR,
          VELHO.DTTERM,
          NOVO.CLAUASSEG,
          VELHO.TPINSCLOCALTRABGERAL,
          VELHO.NRINSCLOCALTRABGERAL,
          VELHO.TPLOGRADLOCALTRABDOM,
          VELHO.DSCLOGRADLOCALTRABDOM,
          VELHO.NRLOGRADLOCALTRABDOM,
          VELHO.COMPLEMENTOLOCALTRABDOM,
          VELHO.BAIRROLOCALTRABDOM,
          VELHO.CEPLOCALTRABDOM,
          VELHO.CODMUNICLOCALTRABDOM,
          VELHO.UFLOCALTRABDOM,
          VELHO.QTDHRSSEM,
          VELHO.TPJORNADA,
          VELHO.DSCTPJORN,
          VELHO.TMPPARC,
          VELHO.CNPJSINDTRAB,
          VELHO.NRPROCJUDALVARAJUDICIAL,
          NOVO.CNPJEMPREGANT,
          NOVO.MATRICANT,
          NOVO.DTINIVINCULO,
          NOVO.OBSERVACAOSUCESSAOVINC,
          NOVO.DTINIAFAST,
          NOVO.CODMOTAFAST,
          NOVO.DTDESLIG,
          NOVO.CODEMP,
          NOVO.CHAVE
     FROM VGF_EVENTO_S2200_BASE NOVO, TFPS2200 VELHO
    WHERE     NOVO.SITESOCIAL = '6'
          AND NOVO.CODEMP = VELHO.CODEMP
          AND VELHO.TPAMB = NOVO.TPAMB
          AND NOVO.CHAVE = VELHO.CHAVE
          AND VELHO.DTREF = (SELECT SNK_GET_DTREF_ESOCIAL() FROM DUAL)
          AND VELHO.SEQUENCIA = (SELECT SNK_GET_SEQ_ATUAL_ESOCIAL()  FROM DUAL)
   UNION
   SELECT NOVO.TPINSCEMPREGADOR,
          NOVO.NRINSCEMPREGADOR,
          NOVO.CPFTRAB,
          NOVO.NISTRAB,
          VELHO.NMTRAB,
          VELHO.SEXO,
          VELHO.RACACOR,
          VELHO.ESTCIV,
          VELHO.GRAUINSTR,
          VELHO.INDPRIEMPR,
          VELHO.NMSOC,
          NOVO.DTNASCTONASCIMENTO,
          NOVO.CODMUNICNASCIMENTO,
          NOVO.UFNASCIMENTO,
          NOVO.PAISNASCTONASCIMENTO,
          NOVO.PAISNACNASCIMENTO,
          NOVO.NMMAENASCIMENTO,
          NOVO.NMPAINASCIMENTO,
          VELHO.NRCTPS,
          VELHO.SERIECTPS,
          VELHO.UFCTPS,
          VELHO.NRRIC,
          VELHO.ORGAOEMISSORRIC,
          VELHO.DTEXPEDRIC,
          VELHO.NRRG,
          VELHO.ORGAOEMISSORRG,
          VELHO.DTEXPEDRG,
          VELHO.NRRNE,
          VELHO.ORGAOEMISSORRNE,
          VELHO.DTEXPEDRNE,
          VELHO.NROC,
          VELHO.ORGAOEMISSOROC,
          VELHO.DTEXPEDOC,
          VELHO.DTVALIDOC,
          VELHO.NRREGCNH,
          VELHO.DTEXPEDCNH,
          VELHO.UFCNH,
          VELHO.DTVALIDCNH,
          VELHO.DTPRIHAB,
          VELHO.CATEGORIACNH,
          VELHO.TPLOGRADBRASIL,
          VELHO.DSCLOGRADBRASIL,
          VELHO.NRLOGRADBRASIL,
          VELHO.COMPLEMENTOBRASIL,
          VELHO.BAIRROBRASIL,
          VELHO.CEPBRASIL,
          VELHO.CODMUNICBRASIL,
          VELHO.UFBRASIL,
          VELHO.PAISRESID,
          VELHO.DSCLOGRADEXTERIOR,
          VELHO.NRLOGRADEXTERIOR,
          VELHO.COMPLEMENTOEXTERIOR,
          VELHO.BAIRROEXTERIOR,
          VELHO.NMCIDEXTERIOR,
          VELHO.CODPOSTALEXTERIOR,
          VELHO.DTCHEGADA,
          VELHO.CLASSTRABESTRANG,
          VELHO.CASADOBR,
          VELHO.FILHOSBR,
          VELHO.DEFFISICA,
          VELHO.DEFVISUAL,
          VELHO.DEFAUDITIVA,
          VELHO.DEFMENTAL,
          VELHO.DEFINTELECTUAL,
          VELHO.REABREADAP,
          VELHO.INFOCOTA,
          VELHO.OBSERVACAO,
          VELHO.TRABAPOSENT,
          VELHO.FONEPRINC,
          VELHO.FONEALTERNAT,
          VELHO.EMAILPRINC,
          NOVO.MATRICULA,
          VELHO.TPREGTRAB,
          VELHO.TPREGPREV,
          NOVO.NRRECINFPRELIM,
          NOVO.CADINI,
          NOVO.DTADM,
          NOVO.TPADMISSAO,
          NOVO.INDADMISSAO,
          VELHO.TPREGJOR,
          VELHO.NATATIVIDADE,
          VELHO.DTBASE,
          VELHO.CNPJSINDCATEGPROF,
          NOVO.OPCFGTS,
          NOVO.DTOPCFGTS,
          NOVO.HIPLEG,
          NOVO.JUSTCONTR,
          NOVO.TPINCLCONTR,
          NOVO.TPINSCIDETOMADORSERV,
          NOVO.NRINSCIDETOMADORSERV,
          NOVO.TPINSCIDEESTABVINC,
          NOVO.NRINSCIDEESTABVINC,
          NOVO.CPFTRABSUBST,
          NOVO.INDPROVIM,
          NOVO.TPPROV,
          NOVO.DTNOMEACAO,
          NOVO.DTPOSSE,
          NOVO.DTEXERCICIO,
          VELHO.TPPLANRP,
          NOVO.NRPROCJUDINFODECJUD,
          VELHO.CODCARGO,
          VELHO.CODFUNCAO,
          VELHO.CODCATEG,
          VELHO.CODCATEG2,
          VELHO.CODCARREIRA,
          VELHO.DTINGRCARR,
          VELHO.VRSALFX,
          VELHO.UNDSALFIXO,
          VELHO.DSCSALVAR,
          VELHO.TPCONTR,
          VELHO.DTTERM,
          NOVO.CLAUASSEG,
          VELHO.TPINSCLOCALTRABGERAL,
          VELHO.NRINSCLOCALTRABGERAL,
          VELHO.TPLOGRADLOCALTRABDOM,
          VELHO.DSCLOGRADLOCALTRABDOM,
          VELHO.NRLOGRADLOCALTRABDOM,
          VELHO.COMPLEMENTOLOCALTRABDOM,
          VELHO.BAIRROLOCALTRABDOM,
          VELHO.CEPLOCALTRABDOM,
          VELHO.CODMUNICLOCALTRABDOM,
          VELHO.UFLOCALTRABDOM,
          VELHO.QTDHRSSEM,
          VELHO.TPJORNADA,
          VELHO.DSCTPJORN,
          VELHO.TMPPARC,
          VELHO.CNPJSINDTRAB,
          VELHO.NRPROCJUDALVARAJUDICIAL,
          NOVO.CNPJEMPREGANT,
          NOVO.MATRICANT,
          NOVO.DTINIVINCULO,
          NOVO.OBSERVACAOSUCESSAOVINC,
          NOVO.DTINIAFAST,
          NOVO.CODMOTAFAST,
          NOVO.DTDESLIG,
          NOVO.CODEMP,
          NOVO.CHAVE
     FROM VGF_EVENTO_S2200_BASE NOVO, TFPS2200 VELHO
    WHERE     NOVO.SITESOCIAL = 'T'
          AND NOVO.CODEMP = VELHO.CODEMP
          AND VELHO.TPAMB = NOVO.TPAMB
          AND NOVO.CHAVE = VELHO.CHAVE
          AND VELHO.DTREF = (SELECT SNK_GET_DTREF_ESOCIAL() FROM DUAL)
          AND VELHO.SEQUENCIA = (SELECT SNK_GET_SEQ_ATUAL_ESOCIAL()  FROM DUAL)
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 07/03/2018 11:16:41
Num.Script: 51893-0-0
Nro. O.S. : 1147664
Nome      : Cria - TFPS2190
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TFPS2190
NomeObjeto: TFPS2190
TipoObjeto: TABLE
NomeTabela: TFPS2190
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS2190
(
     CODEMP                         NUMBER(5)            NOT NULL,
     DTREF                            DATE                 NOT NULL,
     TPAMB                            CHAR(1)         DEFAULT 'T' NOT NULL,
     SEQUENCIA                    NUMBER(5)            NOT NULL,
     CHAVE                            VARCHAR2(100)   NOT NULL,
     NRORECIBO                   VARCHAR2(50),
     NRORECIBO_ANT           VARCHAR2(50),
     STATUS                          CHAR(1)         NOT NULL,
     ACAO                              CHAR(1),
     CONTROLE                     CHAR(1)         DEFAULT 'I' NOT NULL,
     TPINSCEMPREGADOR     NUMBER(5),
     NRINSCEMPREGADOR     VARCHAR2(15 BYTE),
     CPFTRAB                          VARCHAR2(11 BYTE),
     DTNASCTO                       DATE,
     DTADM                             DATE,
     CONSTRAINT PK_TFPS2190 PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE),
     CONSTRAINT CHK_ACAO_TFPS2190 CHECK (ACAO IN ('I', 'A', 'E')),
     CONSTRAINT CHK_CONTROLE_TFPS2190 CHECK (CONTROLE IN ('I', 'A', 'E')),
     CONSTRAINT CHK_STATUS_TFPS2190 CHECK (STATUS IN ('P','I', 'E', 'F', 'X')),
     CONSTRAINT CHK_TPAMB_TFPS2190 CHECK (TPAMB IN ('P', 'T'))
 )
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 07/03/2018 11:16:41
Num.Script: 51894-0-0
Nro. O.S. : 1147664
Nome      : Script - TFPMON
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - TFPMON
NomeObjeto: TFPMON
TipoObjeto: TABLE
NomeTabela: TFPMON
Executar  : SE_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
    P_COUNT     NUMBER(5);
BEGIN
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-2190'
        AND NOMETAB = 'TFPS2190'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'R';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO)
         VALUES ('S-2190', 'TFPS2190', 'NRORECIBO', 'R');
    END IF;

    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-2190'
        AND NOMETAB = 'TFPS2190'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'C';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW)
         VALUES ('S-2190', 'TFPS2190', 'NRORECIBO', 'C','VGF_EVENTO_S2190');
    END IF;
END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 07/03/2018 15:23:59
Num.Script: 51895-0-1
Nro. O.S. : 1147664
Nome      : Cria - VGF_EVENTO_S2190
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - VGF_EVENTO_S2190
NomeObjeto: VGF_EVENTO_S2190
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2190
AS
   SELECT VEMP.TPINSCEMPREGADOR,
          VEMP.NRINSCEMPREGADOR,
          FUN.CPF AS "CPFTRAB",
          FUN.DTNASC AS dtNascto,
          FUN.DTADM AS dtAdm,
          VEMP.CODEMPMATRIZ AS CODEMP,
          CAST (FUN.CODEMP || ':' || FUN.CODFUNC AS VARCHAR2 (100))
             AS "CHAVE"
     FROM TFPFUN FUN, VGF_EVENTO_EMPREGADOR VEMP
    WHERE     FUN.SITUACAO = 1
          AND FUN.CODCATEGESOCIAL NOT IN
                 (701,
                  711,
                  712,
                  721,
                  722,
                  723,
                  731,
                  734,
                  738,
                  741,
                  751,
                  761,
                  771,
                  781)
          AND FUN.CODEMP = VEMP.CODEMP
          AND FUN.VINCULO NOT IN (02, 40, 80, 90, 99)
          AND FUN.SITESOCIAL = 'P'
UNION
   SELECT S2190.TPINSCEMPREGADOR,
          S2190.NRINSCEMPREGADOR,
          S2190.CPFTRAB,
          S2190.DTNASCTO,
          S2190.DTADM,
          S2190.CODEMP,
          S2190.CHAVE
     FROM TFPFUN FUN, TFPS2190 S2190
    WHERE CAST (FUN.CODEMP || ':' || FUN.CODFUNC AS VARCHAR2 (100)) = S2190.CHAVE
          AND FUN.SITESOCIAL <> 'P'
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 07/03/2018 11:16:41
Num.Script: 51896-0-0
Nro. O.S. : 1147664
Nome      : Altera - ORGAOEMISSORRIC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - ORGAOEMISSORRIC
NomeObjeto: ORGAOEMISSORRIC
TipoObjeto: COLUMN
NomeTabela: TFPS2200
Executar  : SE_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPS2200 MODIFY ORGAOEMISSORRIC VARCHAR2(20)
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 07/03/2018 11:16:41
Num.Script: 51897-0-0
Nro. O.S. : 1147664
Nome      : Altera - DSCSALVAR
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - DSCSALVAR
NomeObjeto: DSCSALVAR
TipoObjeto: COLUMN
NomeTabela: TFPS2200
Executar  : SE_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPS2200 MODIFY DSCSALVAR VARCHAR2(250)
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 07/03/2018 11:16:41
Num.Script: 51898-0-0
Nro. O.S. : 1147664
Nome      : Drop - TRG_UPD_TFPS2200
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - TRG_UPD_TFPS2200
NomeObjeto: TRG_UPD_TFPS2200
TipoObjeto: TRIGGER
NomeTabela: TFPS2200
Executar  : SE_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
DROP TRIGGER TRG_UPD_TFPS2200
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 07/03/2018 11:16:41
Num.Script: 51899-0-0
Nro. O.S. : 1147664
Nome      : Cria - TFPS2200_I01
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TFPS2200_I01
NomeObjeto: TFPS2200_I01
TipoObjeto: INDEX
NomeTabela: TFPS2200
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN 
    BEGIN 
    EXECUTE IMMEDIATE 'CREATE INDEX TFPS2200_I01 ON TFPS2200 (CODEMP, CHAVE)';
    EXCEPTION 
     WHEN OTHERS THEN 
         NULL;
    END;
END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 07/03/2018 19:16:34
Num.Script: 51900-0-0
Nro. O.S. : 1147664
Nome      : Drop - PK_TFPS2200_DEPENDENTE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - PK_TFPS2200_DEPENDENTE
NomeObjeto: PK_TFPS2200_DEPENDENTE
TipoObjeto: PRIMARY KEY
NomeTabela: TFPS2200_DEPENDENTE
Executar  : SE_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
    BEGIN
        EXECUTE IMMEDIATE 'DROP INDEX PK_TFPS2200_DEPENDENTE';
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END;

    EXECUTE IMMEDIATE 'ALTER TABLE TFPS2200_DEPENDENTE DROP CONSTRAINT PK_TFPS2200_DEPENDENTE CASCADE';
END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 07/03/2018 11:16:41
Num.Script: 51901-0-0
Nro. O.S. : 1147664
Nome      : Drop - FK_DEPENDENTE_TFPS2200
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - FK_DEPENDENTE_TFPS2200
NomeObjeto: FK_DEPENDENTE_TFPS2200
TipoObjeto: FOREIGN KEY
NomeTabela: TFPS2200_DEPENDENTE
Executar  : SE_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPS2200_DEPENDENTE DROP CONSTRAINT FK_DEPENDENTE_TFPS2200
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 07/03/2018 11:16:41
Num.Script: 51902-0-0
Nro. O.S. : 1147664
Nome      : Rename - CPFFUNC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Rename - CPFFUNC
NomeObjeto: CHAVEPAI
TipoObjeto: COLUMN
NomeTabela: TFPS2200_DEPENDENTE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPS2200_DEPENDENTE RENAME COLUMN CPFFUNC TO CHAVEPAI
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 07/03/2018 11:16:41
Num.Script: 51903-0-0
Nro. O.S. : 1147664
Nome      : Cria - PK_TFPS2200_DEPENDENTE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - PK_TFPS2200_DEPENDENTE
NomeObjeto: PK_TFPS2200_DEPENDENTE
TipoObjeto: PRIMARY KEY
NomeTabela: TFPS2200_DEPENDENTE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPS2200_DEPENDENTE ADD CONSTRAINT PK_TFPS2200_DEPENDENTE PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVEPAI, CHAVE)
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 07/03/2018 11:16:41
Num.Script: 51904-0-0
Nro. O.S. : 1147664
Nome      : Cria - FK_DEPENDENTE_TFPS2200
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - FK_DEPENDENTE_TFPS2200
NomeObjeto: FK_DEPENDENTE_TFPS2200
TipoObjeto: FOREIGN KEY
NomeTabela: TFPS2200_DEPENDENTE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPS2200_DEPENDENTE ADD (
  CONSTRAINT FK_DEPENDENTE_TFPS2200 
  FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVEPAI) 
  REFERENCES TFPS2200 (CODEMP,DTREF,TPAMB,SEQUENCIA,CHAVE)
  ON DELETE CASCADE)
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 07/03/2018 19:19:34
Num.Script: 51905-0-0
Nro. O.S. : 1147664
Nome      : Drop - PK_TFPS2200_HORARIO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - PK_TFPS2200_HORARIO
NomeObjeto: PK_TFPS2200_HORARIO
TipoObjeto: PRIMARY KEY
NomeTabela: TFPS2200_HORARIO
Executar  : SE_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
    BEGIN
        EXECUTE IMMEDIATE 'DROP INDEX PK_TFPS2200_HORARIO';
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END;

    EXECUTE IMMEDIATE 'ALTER TABLE TFPS2200_HORARIO DROP CONSTRAINT PK_TFPS2200_HORARIO CASCADE';
END;
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 07/03/2018 19:20:10
Num.Script: 51906-0-0
Nro. O.S. : 1147664
Nome      : Drop - FK_HORARIO_TFPS2200
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - FK_HORARIO_TFPS2200
NomeObjeto: FK_HORARIO_TFPS2200
TipoObjeto: FOREIGN KEY
NomeTabela: TFPS2200_HORARIO
Executar  : SE_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPS2200_HORARIO DROP CONSTRAINT FK_HORARIO_TFPS2200
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 07/03/2018 11:16:41
Num.Script: 51907-0-0
Nro. O.S. : 1147664
Nome      : Rename - CPFFUNC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Rename - CPFFUNC
NomeObjeto: CHAVEPAI
TipoObjeto: COLUMN
NomeTabela: TFPS2200_HORARIO
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPS2200_HORARIO RENAME COLUMN CPFFUNC TO CHAVEPAI
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 07/03/2018 11:16:41
Num.Script: 51908-0-0
Nro. O.S. : 1147664
Nome      : Cria - PK_TFPS2200_HORARIO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - PK_TFPS2200_HORARIO
NomeObjeto: PK_TFPS2200_HORARIO
TipoObjeto: PRIMARY KEY
NomeTabela: TFPS2200_HORARIO
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPS2200_HORARIO ADD CONSTRAINT PK_TFPS2200_HORARIO PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVEPAI, CHAVE)
/
 
 
 
/*
Requer    : 4210001
Conexao   : ORCL
Data      : 07/03/2018 11:16:41
Num.Script: 51909-0-0
Nro. O.S. : 1147664
Nome      : Cria - FK_HORARIO_TFPS2200
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - FK_HORARIO_TFPS2200
NomeObjeto: FK_HORARIO_TFPS2200
TipoObjeto: FOREIGN KEY
NomeTabela: TFPS2200_HORARIO
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210002
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPS2200_HORARIO ADD (
  CONSTRAINT FK_HORARIO_TFPS2200 
  FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVEPAI) 
  REFERENCES TFPS2200 (CODEMP,DTREF,TPAMB,SEQUENCIA,CHAVE)
  ON DELETE CASCADE)
/
 
 
 
/*
Conexao   : ORCL
NomeObjeto: UPDATE TSIPAR INTEIRO
TipoObjeto: TABLE
NomeTabela: 
Executar  : SEMPRE
Ocorrencia: 4210003
FullVersao: Sim
*/
 
 
UPDATE TSIPAR SET INTEIRO = 4210002 WHERE CHAVE = 'VERSAOATUALDB'
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 16/05/2018 17:54:06
Num.Script: 48696-0-0
Nro. O.S. : 1114037
Nome      : Drop - TRG_INC_EVTLOTE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - TRG_INC_EVTLOTE
NomeObjeto: TRG_INC_EVTLOTE
TipoObjeto: TRIGGER
NomeTabela: EVTLOTE
Executar  : SE_EXISTIR
Ocorrencia: 4210003
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DROP TRIGGER TRG_INC_EVTLOTE
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 16/05/2018 17:54:06
Num.Script: 48697-0-1000
Nro. O.S. : 1114037
Nome      : INSERE - THOOBJ - 4869600
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_INC_EVTLOTE
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210003
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_INC_EVTLOTE' NOMEOBJ, 48696 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '5224b43782c4179ca451257b0aa26107' HASHCODE, 'Drop Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_INC_EVTLOTE' and THO.hashcode = '5224b43782c4179ca451257b0aa26107')
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 06/03/2018 10:23:55
Num.Script: 48865-0-0
Nro. O.S. : 1085140
Nome      : Dropa - CKC_TIPCALCSTESPEC_TGFICM
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropa - CKC_TIPCALCSTESPEC_TGFICM
NomeObjeto: CKC_TIPCALCSTESPEC_TGFICM
TipoObjeto: CONSTRAINT
NomeTabela: TGFICM
Executar  : SE_EXISTIR
Ocorrencia: 4210003
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFICM DROP CONSTRAINT CKC_TIPCALCSTESPEC_TGFICM
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 06/03/2018 10:23:55
Num.Script: 48866-0-0
Nro. O.S. : 1085140
Nome      : Cria - CKC_TIPCALCSTESPEC_TGFICM 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - CKC_TIPCALCSTESPEC_TGFICM 
NomeObjeto: CKC_TIPCALCSTESPEC_TGFICM 
TipoObjeto: CONSTRAINT
NomeTabela: TGFICM
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210003
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFICM ADD CONSTRAINT CKC_TIPCALCSTESPEC_TGFICM CHECK (TIPCALCSTESPEC IN (0,1,2,3,4,5,6))
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 06/03/2018 10:23:55
Num.Script: 48867-0-0
Nro. O.S. : 1085140
Nome      : Script - TGFICM
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - TGFICM
NomeObjeto: TGFICM
TipoObjeto: TABLE
NomeTabela: TGFICM
Executar  : SE_EXISTIR
Ocorrencia: 4210003
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
   P_CIENTE          VARCHAR (1);
   P_TEMALTERACOES   VARCHAR (1);
   P_COUNT          NUMBER(05);

   CURSOR C_ALIQ
   IS
      SELECT UFORIG,
             UFDEST,
             TIPRESTRICAO,
             CODRESTRICAO,
             TIPRESTRICAO2,
             CODRESTRICAO2,
             SEQUENCIA,
             MVASIMPLIFICADO,
             TIPCALCSTESPEC
        FROM TGFICM ICM INNER JOIN TSIUFS UFD
                ON UFD.CODUF = ICM.UFDEST
       WHERE UFD.UF = 'MT'
             AND (ICM.MVASIMPLIFICADO = 'S' OR ICM.TIPCALCSTESPEC = 5);

   R_ALIQ            C_ALIQ%ROWTYPE;
BEGIN
   SELECT COUNT(*) INTO P_COUNT
   FROM TSISCR
   WHERE NME_SCRIPT = '1085140';
   
   IF P_COUNT > 0 THEN
     RETURN;
   END IF;
   
   EXECUTE IMMEDIATE 'INSERT INTO TSISCR VALUES (''1085140'',''1085140'')'; 
   
   BEGIN
      SELECT LOGICO
        INTO P_CIENTE
        FROM TSIPAR
       WHERE CHAVE = 'CIENTEALTCFGMVA';
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         P_CIENTE := 'C';
   END;

   IF P_CIENTE = 'C'
   THEN
      P_TEMALTERACOES := 'N';

      OPEN C_ALIQ;

      LOOP
         FETCH C_ALIQ INTO R_ALIQ;

         EXIT WHEN C_ALIQ%NOTFOUND;
         P_TEMALTERACOES := 'S';

         IF R_ALIQ.MVASIMPLIFICADO = 'S'
         THEN
            UPDATE TGFICM
               SET TIPCALCSTESPEC = 5, MVASIMPLIFICADO = 'N'
             WHERE     UFORIG = R_ALIQ.UFORIG
                   AND UFDEST = R_ALIQ.UFDEST
                   AND TIPRESTRICAO = R_ALIQ.TIPRESTRICAO
                   AND CODRESTRICAO = R_ALIQ.CODRESTRICAO
                   AND TIPRESTRICAO2 = R_ALIQ.TIPRESTRICAO2
                   AND CODRESTRICAO2 = R_ALIQ.CODRESTRICAO2
                   AND SEQUENCIA = R_ALIQ.SEQUENCIA;
         ELSIF R_ALIQ.TIPCALCSTESPEC = 5
         THEN
            UPDATE TGFICM
               SET TIPCALCSTESPEC = 6
             WHERE     UFORIG = R_ALIQ.UFORIG
                   AND UFDEST = R_ALIQ.UFDEST
                   AND TIPRESTRICAO = R_ALIQ.TIPRESTRICAO
                   AND CODRESTRICAO = R_ALIQ.CODRESTRICAO
                   AND TIPRESTRICAO2 = R_ALIQ.TIPRESTRICAO2
                   AND CODRESTRICAO2 = R_ALIQ.CODRESTRICAO2
                   AND SEQUENCIA = R_ALIQ.SEQUENCIA;
         END IF;
      END LOOP;

      CLOSE C_ALIQ;

      IF P_TEMALTERACOES = 'S'
      THEN
         INSERT INTO TSIAVI (NUAVISO,
                             TITULO,
                             DESCRICAO,
                             SOLUCAO,
                             TIPO,
                             IDENTIFICADOR,
                             IMPORTANCIA)
             VALUES ( (    SELECT MAX (NUAVISO) + 1 NUAVISO FROM TSIAVI),
                     'Ajustes nas configurações de Alíquotas de<b>ICMS!',
                     'Foram realizados ajustes nas configurações de <br/><b>Alíquotas de ICMS</b>, em especial nos campos: <br/><br/><b>Tipo de Cálculo de ST Específico</b> <br/><br/><b>MVA Simplificado</b><br/><br/>É necessário conferir as informações das <b>Alíquotas de ICMS</b> para evitar transtornos futuros.',
                     'Acesse a tela Alíquotas de ICMS através do caminho:</br>Comercial » Arquivo » Cadastros » Alíquotas',
                     'S',
                     'CIENTEALTCFGMVA',
                     1);

         INSERT INTO TSIPAR (CHAVE,
                             DESCRICAO,
                             CODUSU,
                             TIPO,
                             MODULO,
                             LOGICO)
             VALUES ('CIENTEALTCFGMVA',
                     'Parâmetro de uso interno do sistema. Não alterar.',
                     0,
                     'L',
                     'B',
                     'N');
      END IF;
   END IF;
END;
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 09/03/2018 17:17:38
Num.Script: 49109-0-0
Nro. O.S. : 1130681
Nome      : Cria - TGFCAB NFEDEVRECUSA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: NFEDEVRECUSA
TipoObjeto: COLUMN
NomeTabela: TGFCAB
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210003
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TGFCAB ADD NFEDEVRECUSA CHAR(1)';
   EXECUTE IMMEDIATE 'ALTER TABLE TGFCAB ADD  CONSTRAINT CKC_NFEDEVRECUSA_TGFCAB CHECK (NFEDEVRECUSA IN (''S'',''N'') OR NFEDEVRECUSA IS NULL )';
END;
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 09/03/2018 12:50:49
Num.Script: 49119-0-0
Nro. O.S. : 1134194
Nome      : Altera - STP_CONFIRMANOTA2
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - STP_CONFIRMANOTA2
NomeObjeto: STP_CONFIRMANOTA2
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210003
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE Stp_Confirmanota2 (P_NUNOTA      INTEGER,
                                               P_PROVISAO    VARCHAR2,
                                               P_RECDESP     SMALLINT)
AS
BEGIN
   DECLARE
      P_CODEMP                     SMALLINT;
      P_NUMNOTA                    INT;
      P_SERIENOTA                  VARCHAR2 (3);
      P_DTNEG                      DATE;
      P_DTMOV                      DATE;
      P_DTFATUR                    DATE;
      P_CODPARC                    INT;
      P_CODTIPOPER                 SMALLINT;
      P_DHTIPOPER                  DATE;
      P_VENCFRETE                  DATE;
      P_CODVEND                    SMALLINT;
      P_CODMOEDA                   SMALLINT;
      P_COUNT                      DECIMAL (5, 0);
      P_VLRDESDOB                  FLOAT;
      P_VLRNOTA                    FLOAT;
      P_QTDVOL                     INT;
      P_VLROUTROS                  FLOAT;
      P_VLRFRETE                   FLOAT;
      P_VLRDESCTOT                 FLOAT;
      P_TIPFRETE                   CHAR (1);
      P_TIPMOV                     CHAR (1);
      P_TIPCHEQ                    CHAR (1);
      P_CODPARCTRANSP              INT;
      P_SOMAFIN                    FLOAT;
      P_SOMA                       FLOAT;
      P_GNREST                     INT;
      P_TOPCUPOMFISCAL             CHAR (1);
      P_IMPRIME_CUPOM_CONFIRMADO   CHAR (1);
      P_TIPTITGNRESTRB             INT;
      P_PERMFINMENORVLRNOTA        CHAR (1);
      P_SEQCONFIRMA                INT;
      P_BASENUMERACAO              TGFTOP.BASENUMERACAO%TYPE;
      P_NUNOTAPEDFRET           int;

      PROCEDURE LOCAL_STP_SEQ_CONFIRMA (P_ULTCOD OUT NUMBER)
      AS
         PRAGMA AUTONOMOUS_TRANSACTION;
      BEGIN
         BEGIN
                SELECT (ULTCOD + 1)
                  INTO P_ULTCOD
                  FROM TGFNUM
                 WHERE ARQUIVO = 'SEQCONFIRMA'
            FOR UPDATE ;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               BEGIN
                  INSERT INTO TGFNUM (ARQUIVO,
                                      CODEMP,
                                      ULTCOD,
                                      ULTNOTATALAO)
                      VALUES ('SEQCONFIRMA',
                              1,
                              0,
                              999999999);

                  P_ULTCOD := 1;
               END;
         END;

         UPDATE TGFNUM
            SET ULTCOD = P_ULTCOD
          WHERE ARQUIVO = 'SEQCONFIRMA';

         COMMIT;
      EXCEPTION
         WHEN OTHERS
         THEN
            ROLLBACK;
            RAISE;
      END;
   BEGIN
      /*    Stp_Valida_Dentroestado(P_NUNOTA);  no sqlserver nao tem */
      SELECT CODEMP,
             NUMNOTA,
             SERIENOTA,
             DTNEG,
             DTMOV,
             CODPARC,
             CODTIPOPER,
             DHTIPOPER,
             CODVEND,
             CODMOEDA,
             NVL (QTDVOL, 0),
             DTFATUR,
             VLRNOTA,
             VLROUTROS,
             VLRFRETE,
             TIPFRETE,
             TIPMOV,
             CODPARCTRANSP,
             VLRDESCTOT,
             VENCFRETE,
             NUNOTAPEDFRET
        INTO P_CODEMP,
             P_NUMNOTA,
             P_SERIENOTA,
             P_DTNEG,
             P_DTMOV,
             P_CODPARC,
             P_CODTIPOPER,
             P_DHTIPOPER,
             P_CODVEND,
             P_CODMOEDA,
             P_QTDVOL,
             P_DTFATUR,
             P_VLRNOTA,
             P_VLROUTROS,
             P_VLRFRETE,
             P_TIPFRETE,
             P_TIPMOV,
             P_CODPARCTRANSP,
             P_VLRDESCTOT,
             P_VENCFRETE,
             P_NUNOTAPEDFRET 
        FROM TGFCAB
       WHERE NUNOTA = P_NUNOTA;

      SELECT NVL (CUPOMFISCAL, 'N'), PERMFINMENORVLRNOTA, BASENUMERACAO
        INTO P_TOPCUPOMFISCAL, P_PERMFINMENORVLRNOTA, P_BASENUMERACAO
        FROM TGFTOP
       WHERE CODTIPOPER = P_CODTIPOPER AND DHALTER = P_DHTIPOPER;

      -- 861493
      BEGIN
         SELECT COUNT ( * )
           INTO P_COUNT
           FROM TSDPAR
          WHERE CHAVE = 'DATASYNCNOMENO';
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            P_COUNT := 0;
      END;

      IF P_COUNT > 0
      THEN
         LOCAL_STP_SEQ_CONFIRMA (P_SEQCONFIRMA);

         UPDATE TGFCAB
            SET SEQCONFIRMA = P_SEQCONFIRMA
          WHERE NUNOTA = P_NUNOTA;
      END IF;

      -- 861493

      P_GNREST := Get_Tsipar_Inteiro ('TIPTITGNREST');

      P_TIPTITGNRESTRB := Get_Tsipar_Inteiro ('TIPTITGNRESTRB');

      IF (P_RECDESP = 0)
      THEN
         SELECT COUNT (1)
           INTO P_COUNT
           FROM TGFFIN
          WHERE     NUNOTA = P_NUNOTA
                AND DESDOBDUPL <> 'F'
                AND DESDOBDUPL <> 'K'
                AND DESDOBDUPL <> 'T';

         IF (P_COUNT <> 0)
         THEN
            DELETE FROM TGFFIN
                  WHERE     NUNOTA = P_NUNOTA
                        AND DESDOBDUPL <> 'F'
                        AND DESDOBDUPL <> 'K'
                        AND DESDOBDUPL <> 'T';
         END IF;
      ELSE
         IF (P_RECDESP = -1) AND (P_TIPMOV <> 'D')
         THEN
            P_TIPCHEQ := 'A';
         ELSE
            P_TIPCHEQ := 'I';
         END IF;

         UPDATE TGFFIN
            SET NUMNOTA = P_NUMNOTA,
                SERIENOTA = P_SERIENOTA,
                DTNEG = P_DTNEG,
                DHMOV =
                   TO_DATE (
                      TO_CHAR (P_DTMOV, 'mon dd yyyy')
                      || TO_CHAR (TGFFIN.DHMOV, 'hh24:mi:ss'),
                      'mm dd yyyy hh24:mi:ss'),                   /*P_DTMOV,*/
                CODTIPOPER = P_CODTIPOPER,
                DHTIPOPER = P_DHTIPOPER,
                CODVEND = P_CODVEND,
                CODMOEDA = P_CODMOEDA,
                PROVISAO = P_PROVISAO,
                RECDESP =
                   CASE
                      WHEN (P_GNREST <> 0 AND CODTIPTIT = P_GNREST)
                      THEN
                         -1
                      WHEN (P_TIPTITGNRESTRB <> 0
                            AND CODTIPTIT = P_TIPTITGNRESTRB)
                      THEN
                         1
                      WHEN VLRDESDOB < 0
                      THEN
                         P_RECDESP * -1
                      ELSE
                         P_RECDESP
                   END,
                VLRDESDOB = ABS (VLRDESDOB),
                TIPMARCCHEQ = P_TIPCHEQ,
                DTALTER = SYSDATE,
                CARTA = NULL
          WHERE NUNOTA = P_NUNOTA
                AND (DESDOBDUPL IS NULL
                     OR (    DESDOBDUPL <> 'K'
                         AND DESDOBDUPL <> 'F'
                         AND DESDOBDUPL <> 'T'));

         SELECT COUNT ( * )
           INTO P_COUNT
           FROM TGFFIN
          WHERE NUNOTA = P_NUNOTA AND DESDOBDUPL = 'T' AND RECDESP = 0;

         IF P_COUNT > 0
         THEN
            UPDATE TGFFIN
               SET NUMNOTA = P_NUMNOTA,
                   SERIENOTA = P_SERIENOTA,
                   DTNEG = P_DTNEG,
                   CODTIPOPER = P_CODTIPOPER,
                   DHTIPOPER = P_DHTIPOPER,
                   CODVEND = P_CODVEND,
                   CODMOEDA = P_CODMOEDA,
                   VLRDESDOB = ABS (VLRDESDOB),
                   DTALTER = SYSDATE,
                   RECDESP =
                      CASE
                         WHEN (P_GNREST <> 0 AND CODTIPTIT = P_GNREST)
                         THEN
                            -1
                         WHEN (P_TIPTITGNRESTRB <> 0
                               AND CODTIPTIT = P_TIPTITGNRESTRB)
                         THEN
                            1
                         WHEN VLRDESDOB < 0
                         THEN
                            P_RECDESP * -1
                         ELSE
                            P_RECDESP
                      END
             WHERE NUNOTA = P_NUNOTA AND DESDOBDUPL = 'T' AND RECDESP = 0;
         END IF;
      END IF;

      IF (P_QTDVOL = 0)
      THEN
         SELECT SUM (QTDNEG)
           INTO P_QTDVOL
           FROM TGFITE
          WHERE     NUNOTA = P_NUNOTA
                AND USOPROD <> 'D'
                AND USOPROD <> 'S'
                AND SEQUENCIA > 0;

         IF (P_QTDVOL IS NOT NULL)
         THEN
            UPDATE TGFCAB
               SET QTDVOL = P_QTDVOL
             WHERE NUNOTA = P_NUNOTA AND (QTDVOL IS NULL OR QTDVOL = 0);
         END IF;
      END IF;

      IF P_DTFATUR IS NULL
      THEN
         P_DTFATUR := SYSDATE;
      END IF;

      UPDATE TGFCAB
         SET STATUSNOTA = 'L',
             DTFATUR = P_DTFATUR,
             DTALTER = SYSDATE,
             CODUSU = Tsiusu_Log_Pkg.V_CODUSULOG,
             HRENTSAI =
                CASE
                   WHEN TIPMOV IN ('V', 'D', 'E', 'T')
                        OR P_BASENUMERACAO IN ('V', 'D')
                   THEN
                      CASE
                         WHEN EXISTS
                                 (SELECT 1
                                    FROM TSIPAR
                                   WHERE CHAVE = 'SUBSTHRENTSAI'
                                         AND LOGICO = 'S')
                         THEN
                            TO_DATE (
                               TO_CHAR (NVL (DTENTSAI, DTNEG), 'dd/mm/yyyy')
                               || TO_CHAR (SYSDATE, 'hh24:mi:ss'),
                               'dd-mm-yyyy hh24:mi:ss')
                         ELSE
                            NVL (HRENTSAI, SYSDATE)
                      END
                   ELSE
                      HRENTSAI
                END
       WHERE NUNOTA = P_NUNOTA;

      SELECT COUNT (1)
        INTO P_COUNT
        FROM TGFVAR
       WHERE NUNOTA = P_NUNOTA AND STATUSNOTA <> 'L';

      IF P_COUNT <> 0
      THEN
         UPDATE TGFVAR
            SET STATUSNOTA = 'L'
          WHERE NUNOTA = P_NUNOTA;
      END IF;

      UPDATE TGFITE
         SET STATUSNOTA = 'L'
       WHERE NUNOTA = P_NUNOTA;

      /* Verifica se o financeiro é da geração do conhecimento de transporte*/
      IF (P_RECDESP <> 0)
      THEN
         SELECT ABS (SUM (VLRDESDOB * RECDESP))
           INTO P_VLRDESDOB
           FROM TGFFIN
          WHERE NUNOTA = P_NUNOTA
                AND (DESDOBDUPL IS NULL
                     OR DESDOBDUPL NOT IN ('M', 'V', 'K', 'F', 'T'))
                AND ( (CODTIPTIT <> P_GNREST) OR (P_GNREST = 0))
                AND ( (CODTIPTIT <> P_TIPTITGNRESTRB)
                     OR (P_TIPTITGNRESTRB = 0));


         IF (P_VLRDESDOB < P_VLRNOTA)
         THEN
            BEGIN
               SELECT SUM (VLRTOT + VLRIPI - VLRDESC - VLRREPRED)
                 INTO P_SOMA
                 FROM TGFITE
                WHERE NUNOTA = P_NUNOTA AND SEQUENCIA > 0 AND TERCEIROS = 'S';
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  P_SOMA := 0;
            END;

            IF ( (P_VLRDESDOB < (P_VLRNOTA - P_SOMA))
                AND (P_PERMFINMENORVLRNOTA <> 'S'))
            THEN
               RAISE_APPLICATION_ERROR (
                  -20101,
                  'Impossível confirmar a nota. Soma do financeiro, não corresponde ao valor total da nota.');
            END IF;
         END IF;

         P_IMPRIME_CUPOM_CONFIRMADO := 'N';

         IF P_TOPCUPOMFISCAL = 'S'
         THEN
            BEGIN
               SELECT LOGICO
                 INTO P_IMPRIME_CUPOM_CONFIRMADO
                 FROM TSIPAR
                WHERE CHAVE = 'IMPCUPOMCONF';
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  P_IMPRIME_CUPOM_CONFIRMADO := 'N';
            END;
         END IF;

         IF NOT (P_TOPCUPOMFISCAL = 'S' AND P_IMPRIME_CUPOM_CONFIRMADO = 'S')
         THEN
            SELECT COUNT (1)
              INTO P_COUNT
              FROM TGFFIN FIN
             WHERE FIN.NUNOTA = P_NUNOTA
                   AND ( (RECDESP = 0) OR (NUMNOTA = 0));

            IF (P_COUNT > 0)
            THEN
               /*Se não for NFE continua validando*/
               SELECT COUNT (1)
                 INTO P_COUNT
                 FROM TGFEMP EMP, TGFTOP TPO
                WHERE     EMP.CODEMP = P_CODEMP
                      AND TPO.CODTIPOPER = P_CODTIPOPER
                      AND TPO.DHALTER = P_DHTIPOPER
                      AND TPO.NFE IS NOT NULL
                      AND TPO.NFE <> 'M'
                      AND EMP.NFE IS NOT NULL
                      AND EMP.NFE <> '0';

               IF (P_COUNT = 0)
               THEN
                  RAISE_APPLICATION_ERROR (
                     -20101,
                     'Impossivel confirmar a nota. Financeiro com o Numero de nota igual a zero.');
               END IF;
            END IF;
         END IF;
      END IF;

      IF     (P_TIPMOV <> 'V' OR P_VENCFRETE IS NOT NULL)
         AND (NVL (P_NUNOTAPEDFRET, 0) = 0)
         AND (P_TIPFRETE = 'N')
         AND (P_VLRFRETE > 0)
         AND (P_CODPARCTRANSP <> 0)
      THEN
         SELECT SUM (VLRDESDOB)
           INTO P_SOMAFIN
           FROM TGFFIN
          WHERE NUNOTA = P_NUNOTA AND DESDOBDUPL = 'F';

         --Se ORIGEM em estoque e @SOMAFIN eh nulo e @VLRFRETE não eh nulo logo eh frete de Multiplas Notas
         IF P_SOMAFIN IS NULL
         THEN
            SELECT SUM (FNF.VLRFRETE)
              INTO P_SOMAFIN
              FROM TGFFIN FIN, TGFFNF FNF
             WHERE     FIN.ORIGEM = 'E'
                   AND FIN.NUNOTA = FNF.NUNOTA
                   AND FIN.NUNOTA = P_NUNOTA;
         END IF;

         IF (NVL(P_SOMAFIN, 0) > 0 OR P_TIPMOV IN ('V','C','D','T')) AND (P_SOMAFIN <> P_VLRFRETE)
         THEN
            RAISE_APPLICATION_ERROR (
               -20101,
               'Nota nao confirmada. Lancamento do Frete no Financeiro, diferente do frete na nota.');
         END IF;
      END IF;
   END;
END;
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 09/03/2018 12:50:49
Num.Script: 49120-0-1000
Nro. O.S. : 1134194
Nome      : INSERE - THOOBJ - 4911900
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE STP_CONFIRMANOTA2
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210003
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'STP_CONFIRMANOTA2' NOMEOBJ, 49119 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, '6b237868f498434b1056d64b0b5777ed' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'STP_CONFIRMANOTA2' and THO.hashcode = '6b237868f498434b1056d64b0b5777ed')
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 21/05/2018 11:14:03
Num.Script: 49141-0-0
Nro. O.S. : 1121615
Nome      :  Criar - TGFPAL_I01
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  :  Criar - TGFPAL_I01
NomeObjeto: TGFPAL_I01
TipoObjeto: INDEX
NomeTabela: TGFPAL
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210003
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN 
    BEGIN 
    EXECUTE IMMEDIATE 'CREATE INDEX TGFPAL_I01 ON TGFPAL (CODPROD)';
    EXCEPTION 
     WHEN OTHERS THEN 
         NULL;
    END;
END;
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 21/05/2018 11:14:03
Num.Script: 49145-0-0
Nro. O.S. : 1121615
Nome      :  Criar - TGFPAL_I02
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  :  Criar - TGFPAL_I02
NomeObjeto: TGFPAL_I02
TipoObjeto: INDEX
NomeTabela: TGFPAL
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210003
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN 
    BEGIN 
    EXECUTE IMMEDIATE 'CREATE INDEX TGFPAL_I02 ON TGFPAL (CODPRODALT)';
    EXCEPTION 
     WHEN OTHERS THEN 
         NULL;
    END;
END;
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 21/05/2018 11:14:02
Num.Script: 49158-0-0
Nro. O.S. : 1121615
Nome      : Alterar - SNK_MATGIRCALCGIRO 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - SNK_MATGIRCALCGIRO 
NomeObjeto: SNK_MATGIRCALCGIRO 
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210003
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_MATGIRCALCGIRO (
   p_CodRel             INT,
   p_Periodos           INT,
   p_DatIni             DATE,
   p_DatFim             DATE,
   p_DiasUteis          INT,
   p_Numero             INT,
   p_NUTab              INT,
   p_UsarEmp            CHAR,
   p_UsarLocal          CHAR,
   p_UsarControle       CHAR,
   p_TipoAgrupamento    CHAR,
   p_Custo              VARCHAR2,
   p_FiltroGiro         VARCHAR2,
   p_FiltroEstoque      VARCHAR2)
AS
   /*
   Ler a TGFGIR1 agrupando por período, aplicando um filtro e incluir na TGFGIR  no NUMERO do período respecitivo, preenchendo os campos
   relativos ao cadastro de produto, grupo de produtos, local,
   custo, preço e estoque
   */

   TYPE cur_typ IS REF CURSOR;

   c                        cur_typ;
   curEst                   cur_typ;
   curCusto                 cur_typ;

   queGiro                  VARCHAR2 (2000);
   queEstoq                 VARCHAR2 (4000);
   queCusto                 VARCHAR2 (1000);

   p_Count                  INT;
   intCODPROD               TGFITE.CODPROD%TYPE;
   intCodEmp                TGFITE.CODEMP%TYPE;
   intCodLocal              TGFITE.CODLOCALORIG%TYPE;
   strControle              TGFITE.CONTROLE%TYPE;
   intCodGrupoProd          TGFPRO.CodGrupoProd%TYPE;
   strDESCRPROD             TGFPRO.DESCRPROD%TYPE;
   strREFERENCIA            TGFPRO.REFERENCIA%TYPE;
   strMARCA                 TGFPRO.MARCA%TYPE;
   strCOMPLDESC             TGFPRO.COMPLDESC%TYPE;
   strCodVol                TGFPRO.CODVOL%TYPE;
   strCodVolCOMPRA          TGFPRO.CODVOLCOMPRA%TYPE;
   intCODPARCFORN           TGFPRO.CODPARCFORN%TYPE;
   strREFFORN               TGFPRO.REFFORN%TYPE;
   dobDESCMAX               TGFPRO.DESCMAX%TYPE;
   strLISTALPM              TGFPRO.LISTALPM%TYPE;
   strONEROSO               TGFPRO.ONEROSO%TYPE;
   strREFMERCMED            TGFPRO.REFMERCMED%TYPE;
   strTERMOLABIL            TGFPRO.TERMOLABIL%TYPE;
   strCONTROLADO            TGFPRO.CONTROLADO%TYPE;
   strSTATUSMED             TGFPRO.STATUSMED%TYPE;
   strIDENPORTARIA          TGFPRO.IDENPORTARIA%TYPE;
   strIDENOTC               TGFPRO.IDENOTC%TYPE;
   strIDENCORRELATO         TGFPRO.IDENCORRELATO%TYPE;
   strIDENCOSME             TGFPRO.IDENCOSME%TYPE;
   strPRODFALTA             TGFPRO.PRODFALTA%TYPE;
   strDESCRGRUPOPROD        TGFGIR.DESCRGRUPOPROD%TYPE;
   strDESCRLOCAL            TGFLOC.DESCRLOCAL%TYPE;
   dobORDEMMEDIDA           TGFPRO.ORDEMMEDIDA%TYPE;
   dobCustoAtual            FLOAT;
   dobCustoRep              FLOAT;
   dobVlrTot                FLOAT;
   dobQtde                  FLOAT;
   dobPeso                  FLOAT;
   dobCusGerencial          FLOAT;
   dobMargemContrib         FLOAT;
   dobCustoVariavel         FLOAT;
   dobMARKUP                FLOAT;
   dobLucro                 FLOAT;
   dobPopularidade          FLOAT;
   dobVLRTABPRECO           FLOAT;
   dobESTOQUE               FLOAT;
   dobESTCUSTGER            FLOAT;
   dobPARTESTOQUE           FLOAT;
   dobQTDULTCOMPRA          FLOAT;
   dobESTMIN                FLOAT;
   dobESTMINEst             FLOAT;
   dobESTMAX                FLOAT;
   dobESTMAXEst             FLOAT;
   dobSUGCOMPRA             FLOAT;
   dobSUGCOMPRAGIR          FLOAT;
   dobQTDTOTAL              FLOAT;
   dobQTDMINIMA             FLOAT;
   dobQTDMAXIMA             FLOAT;
   dobQTDMEDIA              FLOAT;
   strCustoPorEmp           VARCHAR2 (1);
   strCustoPorLoc           VARCHAR2 (1);
   strCustoPorCont          VARCHAR2 (1);
   fUsaLocalPreco           VARCHAR2 (1);
   fUsaControlePreco        VARCHAR2 (1);
   fDeduzirReservaEstoque   VARCHAR2 (1);
   intCodEmpCusto           TGFITE.CODEMP%TYPE;
   intCodLocalCusto         TGFITE.CODLOCALORIG%TYPE;
   strControleCusto         TGFITE.CONTROLE%TYPE;
   intLEADTIME              TGFPRO.LEADTIME%TYPE;
   ERRMSG                   VARCHAR2 (4000);
   ehProdutoGenerico        VARCHAR2 (1);
   strCustoRepTabFor        VARCHAR2 (1);
   intNuTabForn             NUMBER(5);
   floatCustoTabFor         FLOAT;
   cusRepIgnore             FLOAT;
   dobPercDesc              FLOAT;
BEGIN
   ERRMSG :=
         'p_CodRel: '
      || TO_CHAR (P_CODREL)
      || ' p_Periodos: '
      || TO_CHAR (p_Periodos)
      || ' p_DatIni: '
      || TO_CHAR (p_DatIni, 'DD/MM/YYYY')
      || ' p_DatFim: '
      || TO_CHAR (p_DatFim, 'DD/MM/YYYY')
      || ' p_DiasUteis: '
      || TO_CHAR (p_DiasUteis)
      || ' p_Numero: '
      || TO_CHAR (p_Numero)
      || ' p_NUTab: '
      || TO_CHAR (p_NUTab)
      || ' p_UsarEmp: '
      || TO_CHAR (p_UsarEmp)
      || ' p_UsarLocal: '
      || TO_CHAR (p_UsarLocal)
      || ' p_UsarControle: '
      || TO_CHAR (p_UsarControle)
      || ' p_TipoAgrupamento: '
      || TO_CHAR (p_TipoAgrupamento)
      || ' p_Custo: '
      || TO_CHAR (p_Custo)
      || ' p_FiltroGiro: '
      || TO_CHAR (p_FiltroGiro)
      || ' p_FiltroEstoque:  '
      || TO_CHAR (p_FiltroEstoque);
   -- RAISE_APPLICATION_ERROR(-20101, ERRMSG);

   strCustoPorEmp := Snk_Gettsiparlogico ('CUSTOPOREMP');
   strCustoPorLoc := 'N';
   strCustoPorCont := 'N';

   IF p_UsarLocal = 'S'
   THEN
      strCustoPorLoc := Snk_Gettsiparlogico ('CUSTOPORLOC');
   END IF;

   IF p_UsarControle = 'S'
   THEN
      strCustoPorCont := Snk_Gettsiparlogico ('CUSTOPORCONT');
   END IF;

   queCusto :=
         'SELECT MAX(CUSA.'
      || p_Custo
      || '), MAX(CUSA.CUSREP) '
      || 'FROM TGFCUS CUSA '
      || 'WHERE CUSA.CODPROD = :CODPROD '
      || 'AND (:CODEMP = 0 OR CUSA.CODEMP = :CODEMP) '
      || 'AND (:CODLOCAL = 0 OR CUSA.CODLOCAL = :CODLOCAL) '
      || 'AND (:CONTROLE = '' '' OR CUSA.CONTROLE = :CONTROLE) '
      || 'AND CUSA.DTATUAL = (SELECT MAX(CA.DTATUAL) FROM TGFCUS CA '
      || '                    WHERE CA.CODPROD = :CODPROD '
      || '                    AND (:CODEMP = 0 OR CA.CODEMP = :CODEMP) '
      || '                    AND (:CODLOCAL = 0 OR CA.CODLOCAL = :CODLOCAL) '
      || '                    AND (:CONTROLE = '' '' OR CA.CONTROLE = :CONTROLE) '
      || '                    AND CA.DTATUAL <= SYSDATE)';

   fUsaLocalPreco := 'N';
   fUsaControlePreco := 'N';

   IF p_NUTab <> 0
   THEN
      IF p_UsarLocal = 'S'
      THEN
         fUsaLocalPreco := Snk_Gettsiparlogico ('PRECOPORLOC');
      END IF;

      IF p_UsarControle = 'S'
      THEN
         fUsaControlePreco := Snk_Gettsiparlogico ('PRECOPORCONT');
      END IF;
   END IF;

   fDeduzirReservaEstoque := Snk_Gettsiparlogico ('DEDUZIRRESESTAN');

   queEstoq :=
         'SELECT CASE WHEN MIN(PEM.ESTMIN) IS NOT NULL THEN MIN(PEM.ESTMIN) ELSE SUM(EST.ESTMIN) END AS ESTMIN '
      || ', CASE WHEN MIN(PEM.ESTMAX) IS NOT NULL THEN MIN(PEM.ESTMAX) ELSE SUM(EST.ESTMAX) END AS ESTMAX ';

   IF fDeduzirReservaEstoque = 'S'
   THEN
      queEstoq := queEstoq || ', SUM(EST.ESTOQUE - EST.RESERVADO) AS TOTAL ';
   ELSE
      queEstoq := queEstoq || ', SUM(EST.ESTOQUE) AS TOTAL ';
   END IF;

   queEstoq :=
         queEstoq
      || 'FROM TGFEST EST'
      || ' LEFT JOIN TGFPEM PEM ON (PEM.CODPROD = EST.CODPROD AND PEM.CODEMP = EST.CODEMP AND PEM.ESTMIN IS NOT NULL)';

   IF p_TipoAgrupamento <> 'N'
   THEN
         queEstoq :=
            queEstoq || ' , (SELECT :CODPROD AS CODPROD FROM DUAL) PROD ';
   END IF;

   IF p_TipoAgrupamento = 'S'
   THEN
         queEstoq :=
            queEstoq || 'WHERE EST.CODPROD IN('
                 || '    SELECT '
                 || '    PAL.CODPROD AS CODPRODALT '
                 || '    FROM TGFPAL PAL, TGFPRO PRO '
                 || '    WHERE '
                 || '          CODPRODALT = PROD.CODPROD'
                 || '          AND PAL.CODPROD = PRO.CODPROD '
                 || '          AND PRO.ATIVO = ''S'' '
                 || '     UNION '
                 || '     SELECT '
                 || '     PAL.CODPRODALT AS CODPRODALT '
                 || '     FROM TGFPAL PAL, TGFPRO PRO '
                 || '     WHERE '
                 || '     (PAL.CODPROD = PROD.CODPROD '
                 || '            OR PAL.CODPROD IN ( '
                 || '            SELECT MIN(CODPROD) '
                 || '            FROM TGFPAL '
                 || '            WHERE CODPRODALT = PROD.CODPROD) '
                 || '     ) '
                 || '     AND PAL.CODPROD = PRO.CODPROD '
                 || '     AND PRO.ATIVO = ''S'' '
                 || '     UNION '
                 || '     SELECT '
                 || '     PROD.CODPROD '
                 || '     FROM DUAL )';
   ELSIF p_TipoAgrupamento = 'G'
   THEN
      queEstoq :=
            queEstoq
         || 'WHERE (Snk_GetProdutoAgrupadoGiro (EST.CODPROD, ''G'') = PROD.CODPROD OR EST.CODPROD IN(SELECT CODPRODESP FROM TGFGXE WHERE CODPROD = PROD.CODPROD)) ';
   ELSE
      queEstoq := queEstoq || 'WHERE EST.CODPROD = :CODPROD ';
   END IF;

   queEstoq :=
         queEstoq
      || 'AND (:CODLOCAL = 0 OR EST.CODLOCAL = :CODLOCAL) '
      || 'AND (:CONTROLE = '' '' OR EST.CONTROLE = :CONTROLE) ';

   IF P_USAREMP = 'M'
   THEN
      queEstoq :=
            queEstoq
         || 'AND (:CODEMP = 0 OR EST.CODEMP IN (SELECT EMP2.CODEMP
                                                                FROM TSIEMP EMP
                                                                     LEFT JOIN TSIEMP EMP2 ON EMP2.CODEMP = EMP.CODEMP OR EMP2.CODEMPMATRIZ = EMP.CODEMP
                                                                WHERE EMP.CODEMP IN (SELECT NVL(EMP.CODEMPMATRIZ, EMP.CODEMP) 
                                                                                     FROM TSIEMP EMP 
                                                                                     WHERE EMP.CODEMP = :CODEMP)
                                                                ))  ';
   ELSE
      queEstoq := queEstoq || 'AND (:CODEMP = 0 OR EST.CODEMP = :CODEMP) ';
   END IF;


   IF TRIM (p_FiltroEstoque) IS NOT NULL
   THEN
      queEstoq := queEstoq || ' AND (' || p_FiltroEstoque || ') ';
   END IF;

   --RAISE_APPLICATION_ERROR(-20000, queEstoq);

   IF p_TipoAgrupamento = 'S'
   THEN
      queGiro :=
         'SELECT Snk_GetProdutoAgrupadoGiro(ITE.CODPROD, ''S'') as CODPROD';
   ELSIF p_TipoAgrupamento = 'G'
   THEN
      queGiro :=
         'SELECT Snk_GetProdutoAgrupadoGiro(ITE.CODPROD, ''G'') as CODPROD';
   ELSE
      queGiro := 'SELECT ITE.CODPROD';
   END IF;

   IF P_USAREMP = 'M'
   THEN
      queGiro :=
            queGiro
         || ', NVL(EMP.CODEMPMATRIZ, EMP.CODEMP) AS CODEMP, MAX(NVL(PEM.LEADTIME, PRO.LEADTIME)) AS LEADTIME ';
   ELSIF P_USAREMP = 'S'
   THEN
      queGiro :=
            queGiro
         || ', ITE.CODEMP, MAX(NVL(PEM.LEADTIME, PRO.LEADTIME)) AS LEADTIME ';
   ELSE
      queGiro := queGiro || ', 0 AS CODEMP, MAX(PRO.LEADTIME) AS LEADTIME ';
   END IF;

   IF P_USARLOCAL = 'S'
   THEN
      queGiro := queGiro || ', ITE.CODLOCALORIG AS CODLOCAL ';
   ELSE
      queGiro := queGiro || ', 0 AS CODLOCAL ';
   END IF;

   IF P_USARCONTROLE = 'S'
   THEN
      queGiro := queGiro || ', ITE.CONTROLE ';
   ELSE
      queGiro := queGiro || ', '' '' AS CONTROLE ';
   END IF;

   queGiro :=
         queGiro
      || ', SUM(ITE.VLRTOT) AS VLRTOT '
      || ', SUM(ITE.QTDNEG) AS QTDE ';

   IF p_TipoAgrupamento = 'G'
   THEN
      queGiro :=
            queGiro
         || ', (SUM(CASE '
         || '            WHEN Snk_GetProdutoAgrupadoGiro (ITE.CODPROD, ''G'') <> ITE.CODPROD THEN ITE.'
         || p_Custo
         || ' * ITE.QTDNEG '
         || '            ELSE ITE.'
         || p_Custo
         || ' '
         || '          END '
         || '        ) '
         || '     / NVL(SUM(CASE '
         || '              WHEN Snk_GetProdutoAgrupadoGiro (ITE.CODPROD, ''G'') <> ITE.CODPROD THEN ITE.QTDNEG '
         || '              ELSE NULL '
         || '            END),1)) AS CUSGERENCIAL ';
   ELSE
      queGiro := queGiro || ', SUM(ITE.' || p_Custo || ') AS CUSGERENCIAL ';
   END IF;

   queGiro :=
         queGiro
      || ', SUM(ITE.MARGEMCONTRIB) AS MARGEMCONTRIB ';

   IF p_TipoAgrupamento = 'G'
   THEN
      queGiro :=
            queGiro
         || ', (SUM(CASE '
         || '            WHEN Snk_GetProdutoAgrupadoGiro (ITE.CODPROD, ''G'') <> ITE.CODPROD THEN ITE.CUSTOVARIAVEL * ITE.QTDNEG '
         || '            ELSE ITE.CUSTOVARIAVEL '
         || '          END '
         || '        ) '
         || '     / NVL(SUM(CASE '
         || '              WHEN Snk_GetProdutoAgrupadoGiro (ITE.CODPROD, ''G'') <> ITE.CODPROD THEN ITE.QTDNEG '
         || '              ELSE NULL '
         || '            END),1)) AS CUSTOVARIAVEL ';
   ELSE
      queGiro := queGiro || ', SUM(ITE.CUSTOVARIAVEL) AS CUSTOVARIAVEL ';
   END IF;

   queGiro :=
         queGiro
      || ', SUM(ITE.LUCRO) AS LUCRO '
      || ', SUM(CASE WHEN ITE.QTDNEG < 0 THEN 0 ELSE ITE.POPULARIDADE END) AS POPULARIDADE '
      ||                                                          -- OS 824856
        'FROM TGFGIR1 ITE '
      || '     INNER JOIN TGFPRO PRO ON PRO.CODPROD = ITE.CODPROD '
      || '     INNER JOIN TGFGRU GRU ON GRU.CODGRUPOPROD = PRO.CODGRUPOPROD ';

   IF P_USAREMP = 'M'
   THEN
      queGiro :=
            queGiro
         || ' INNER JOIN TSIEMP EMP ON EMP.CODEMP = ITE.CODEMP LEFT JOIN TGFPEM PEM ON PEM.CODEMP = EMP.CODEMP AND PEM.CODPROD = PRO.CODPROD ';
   ELSIF P_USAREMP = 'S'
   THEN
      queGiro :=
            queGiro
         || ' LEFT JOIN TGFPEM PEM ON PEM.CODEMP = ITE.CODEMP AND PEM.CODPROD = PRO.CODPROD  ';
   END IF;

   IF INSTR (p_FiltroGiro, 'TGFTOP.') > 0
   THEN
      queGiro := queGiro || ' ,TGFTOP ';
   END IF;

   queGiro :=
         queGiro
      || 'WHERE ITE.DTNEG >= :DatIni AND ITE.DTNEG <= :DatFim '
      || '  AND ITE.QTDNEG <> 0 ';

   IF INSTR (p_FiltroGiro, 'TGFTOP.') > 0
   THEN
      queGiro := queGiro || ' AND TGFTOP.CODTIPOPER = ITE.CODTIPOPER ';
      queGiro :=
            queGiro
         || ' AND TGFTOP.DHALTER = (SELECT MAX(DHALTER) FROM TGFTOP T2 WHERE T2.CODTIPOPER = ITE.CODTIPOPER) ';
   END IF;


   IF TRIM (p_FiltroGiro) IS NOT NULL
   THEN
      queGiro := queGiro || ' AND (' || p_FiltroGiro || ') ';
   END IF;

   IF p_TipoAgrupamento = 'S'
   THEN
      queGiro :=
            queGiro
         || ' GROUP BY Snk_GetProdutoAgrupadoGiro(ITE.CODPROD, ''S'') ';
   ELSIF p_TipoAgrupamento = 'G'
   THEN
      queGiro :=
            queGiro
         || ' GROUP BY Snk_GetProdutoAgrupadoGiro(ITE.CODPROD, ''G'') ';
   ELSE
      queGiro := queGiro || ' GROUP BY ITE.CODPROD ';
   END IF;

   IF P_USAREMP = 'M'
   THEN
      queGiro := queGiro || ', NVL(EMP.CODEMPMATRIZ, EMP.CODEMP) ';
   ELSIF P_USAREMP = 'S'
   THEN
      queGiro := queGiro || ', ITE.CODEMP ';
   END IF;

   IF P_USARLOCAL = 'S'
   THEN
      queGiro := queGiro || ', ITE.CODLOCALORIG ';
   END IF;

   IF P_USARCONTROLE = 'S'
   THEN
      queGiro := queGiro || ', ITE.CONTROLE ';
   END IF;   

   IF P_NUMERO = 1
   THEN
      DELETE FROM TGFGIR
            WHERE CODREL = P_CODREL;
   END IF;

   OPEN c FOR queGiro USING p_DatIni, p_DatFim;
   
   LOOP   
      FETCH c
      INTO intCodProd,
           intCodEmp,
           intLEADTIME,
           intCodLocal,
           strControle,
           dobVlrTot,
           dobQtde,
           dobCusGerencial,
           dobMargemContrib,
           dobCustoVariavel,
           dobLucro,
           dobPopularidade;

      EXIT WHEN c%NOTFOUND;
      
      IF p_Numero = 1
      THEN
         P_COUNT := 0;
      ELSE
         SELECT COUNT (*)
           INTO P_COUNT
           FROM TGFGIR
          WHERE     CODEMP = intCODEMP
                AND CODLOCAL = intCODLOCAL
                AND CODPROD = intCODPROD
                AND CONTROLE = strCONTROLE
                AND CODREL = p_CODREL;
      END IF;    
      
      IF p_Count = 0
      THEN
         SELECT DESCRPROD,
                REFERENCIA,
                MARCA,
                COMPLDESC,
                CODVOL,
                NVL (
                   (SELECT A.CODVOL
                      FROM (  SELECT CODPROD, CODVOL, QUANTIDADE
                                FROM TGFVOA
                            ORDER BY CODPROD ASC) A
                     WHERE     A.CODPROD = TGFPRO.CODPROD
                           AND A.CODVOL = TGFPRO.CODVOLCOMPRA
                           AND A.QUANTIDADE <> 0
                           AND A.QUANTIDADE <> 1
                           AND ROWNUM = 1),
                   CODVOL),
                NVL (CODPARCFORN, 0),
                REFFORN,
                DESCMAX,
                CODGRUPOPROD,
                LISTALPM,
                ONEROSO,
                REFMERCMED,
                TERMOLABIL,
                CONTROLADO,
                STATUSMED,
                IDENPORTARIA,
                IDENOTC,
                IDENCORRELATO,
                IDENCOSME,
                PRODFALTA,
                PESOBRUTO,
                NVL (ESTMIN, 0),
                NVL (ESTMAX, 0),
                ORDEMMEDIDA,
                (CASE
                    WHEN EXISTS
                            (SELECT 1
                               FROM TGFGXE
                              WHERE CODPROD = intCodProd)
                    THEN
                       'S'
                    ELSE
                       'N'
                 END)
                   AS GENERICO
           INTO strDESCRPROD,
                strREFERENCIA,
                strMARCA,
                strCOMPLDESC,
                strCodVol,
                strCodVolCOMPRA,
                intCODPARCFORN,
                strREFFORN,
                dobDESCMAX,
                intCODGRUPOPROD,
                strLISTALPM,
                strONEROSO,
                strREFMERCMED,
                strTERMOLABIL,
                strCONTROLADO,
                strSTATUSMED,
                strIDENPORTARIA,
                strIDENOTC,
                strIDENCORRELATO,
                strIDENCOSME,
                strPRODFALTA,
                dobPeso,
                dobEstMin,
                dobEstMax,
                dobORDEMMEDIDA,
                ehProdutoGenerico
           FROM TGFPRO
          WHERE CODPROD = intCodProd;

         SELECT DESCRGRUPOPROD
           INTO strDESCRGRUPOPROD
           FROM TGFGRU
          WHERE CODGRUPOPROD = intCodGrupoProd;

         IF intCodLocal = 0
         THEN
            strDESCRLOCAL := '';
         ELSE
            SELECT DESCRLOCAL
              INTO strDESCRLOCAL
              FROM TGFLOC
             WHERE CODLOCAL = intCodLocal;
         END IF;

         dobCustoAtual := 0;

         IF strCustoPorEmp = 'N'
         THEN
            intCodEmpCusto := 0;
         ELSE
            intCodEmpCusto := intCodEmp;
         END IF;

         IF strCustoPorLoc = 'N'
         THEN
            intCodLocalCusto := 0;
         ELSE
            intCodLocalCusto := intCodLocal;
         END IF;

         IF strCustoPorCont = 'N'
         THEN
            strControleCusto := ' ';
         ELSE
            strControleCusto := strControle;
         END IF;
         
         --1073904 Análise de Giro com Operador Logístico
         strCustoRepTabFor := SNK_getTSIPARLogico('TABCOTFORMTZ');
         dobPercDesc := 0;
		 dobCustoRep := 0;
         
         IF strCustoRepTabFor = 'S' AND intCODPARCFORN IS NOT NULL THEN
            BEGIN
                SELECT NUTAB INTO intNuTabForn 
                FROM TGFCPL COT 
                     INNER JOIN TGFTAB TAB ON COT.CODTABCOT = TAB.CODTAB AND COT.CODPARC = intCODPARCFORN
                     INNER JOIN TGFNTA NTA ON NTA.CODTAB = TAB.CODTAB 
                WHERE NTA.ATIVO = 'S'
                  AND TAB.DTVIGOR = (SELECT MAX(DTVIGOR)
                                     FROM TGFTAB T
                                     WHERE T.CODTAB = TAB.CODTAB
                                       AND DTVIGOR <= SYSDATE);
                
                IF strCustoPorLoc = 'S' OR strCustoPorCont = 'S' THEN
                    STP_OBTEM_PRECO3(intNuTabForn, intCodProd, intCodLocal, strControle, SYSDATE, dobCustoRep);
                ELSE
                    STP_OBTEM_PRECO2(intNuTabForn, intCodProd, SYSDATE, dobCustoRep);
                END IF;
            EXCEPTION WHEN NO_DATA_FOUND THEN
                    dobCustoRep := NULL;
            END;

            
         END IF;
         
         IF NVL(dobCustoRep, 0) > 0 THEN
            --1073904 Análise de Giro com Operador Logístico BUSCANDO DESCONTO FORNECEDOR
             BEGIN
                 SELECT NVL(PERCDESC, 0) INTO dobPercDesc FROM TGFPMA WHERE CODPROD = intCodProd AND MARCA = strMARCA AND CODPARC = intCODPARCFORN;            
             EXCEPTION
                 WHEN NO_DATA_FOUND THEN
                     BEGIN
                        SELECT NVL(PERCDESC, 0) INTO dobPercDesc FROM TGFPMA WHERE CODPROD = 0 AND MARCA = strMARCA AND CODPARC = intCODPARCFORN;
                    EXCEPTION
                        WHEN NO_DATA_FOUND THEN
                            dobPercDesc := 0;
                    END;
             END;
            IF P_CUSTO = 'CUSREP' THEN
                dobCustoAtual := dobCustoRep;
            ELSE
                OPEN curCusto FOR queCusto
                    USING intCodProd,
                          intCodEmpCusto,
                          intCodEmpCusto,
                          intCodLocalCusto,
                          intCodLocalCusto,
                          strControleCusto,
                          strControleCusto,
                          intCodProd,
                          intCodEmpCusto,
                          intCodEmpCusto,
                          intCodLocalCusto,
                          intCodLocalCusto,
                          strControleCusto,
                          strControleCusto;
                 FETCH curCusto
                 INTO dobCustoAtual, cusRepIgnore;                
            END IF;         
         ELSE         
             OPEN curCusto FOR queCusto
                USING intCodProd,
                      intCodEmpCusto,
                      intCodEmpCusto,
                      intCodLocalCusto,
                      intCodLocalCusto,
                      strControleCusto,
                      strControleCusto,
                      intCodProd,
                      intCodEmpCusto,
                      intCodEmpCusto,
                      intCodLocalCusto,
                      intCodLocalCusto,
                      strControleCusto,
                      strControleCusto;

             FETCH curCusto
             INTO dobCustoAtual, dobCustoRep;
         END IF;
         
         IF curCusto%isopen THEN
             CLOSE curCusto;
         END IF;        

         IF dobCustoAtual IS NULL
         THEN
            dobCustoAtual := 0;
            dobCustoRep := 0;
         END IF;

         OPEN curEst FOR queEstoq
            USING intCodProd,
                  intCodLocal,
                  intCodLocal,
                  strControle,
                  strControle,
                  intCodEmp,
                  intCodEmp;

         FETCH curEst
         INTO dobEstMinEst, dobEstMaxEst, dobEstoque;

         CLOSE curEst;

         IF (p_UsarEmp <> 'N' OR p_UsarLocal = 'S' OR p_UsarControle = 'S')
         THEN
            dobEstMax := dobEstMaxEst;
         END IF;

         IF (p_UsarEmp <> 'N' OR p_UsarLocal = 'S' OR p_UsarControle = 'S')
         THEN
            dobEstMin := dobEstMinEst;
         END IF;

         IF p_NUTab <> -1
         THEN
            IF ( (fUsaControlePreco = 'S') OR (fUsaLocalPreco = 'S'))
            THEN
               Stp_Obtem_Preco3 (p_NUTab,
                                 intCodProd,
                                 intCodLocal,
                                 strControle,
                                 SYSDATE,
                                 dobVlrTabPreco);
            ELSE
               Stp_Obtem_Preco2 (p_NUTab,
                                 intCodProd,
                                 SYSDATE,
                                 dobVlrTabPreco);
            END IF;

            IF dobCustoAtual = 0
            THEN
               dobMARKUP := 100;
            ELSE
               dobMARKUP :=
                  (dobVlrTabPreco - dobCustoAtual) * 100 / dobCustoAtual;
            END IF;
         ELSE
            dobVlrTabPreco := 0;
            dobMarkUp := 0;
         END IF;

         IF NVL (ehProdutoGenerico, 'N') = 'S'
         THEN
            dobVlrTabPreco := 0;
            dobMarkUp := 0;
            dobDESCMAX := 0;
         END IF;
         
         INSERT INTO TGFGIR (CODREL,
                             CODPROD,
                             CODVOL,
                             CODGRUPOPROD,
                             DESCRGRUPOPROD,
                             DESCRPROD,
                             REFERENCIA,
                             MARCA,
                             CODEMP,
                             CODLOCAL,
                             CONTROLE,
                             COMPLDESC,
                             DESCRLOCAL,
                             ESTOQUE,
                             ESTMIN,
                             ESTMAX,
                             ESTCUSTGER,
                             LEADTIME,
                             PARTESTOQUE,
                             QTDULTCOMPRA,
                             ESTMINGIR,
                             ESTMAXGIR,
                             SUGCOMPRA,
                             SUGCOMPRAGIR,
                             QTDTOTAL,
                             QTDMEDIA,
                             QTDMINIMA,
                             QTDMAXIMA,
                             CUSTOGER,
                             CUSTOREP,
                             POPTOTAL,
                             VLRTABPRECO,
                             PEDCPAPEND,
                             PEDVDAPEND,
                             MARKUP,
                             ESTMENMEDVEND,
                             CODVOLCOMPRA,
                             CODPARCFORN,
                             REFFORN,
                             DESCMAX,
                             LISTALPM,
                             ONEROSO,
                             REFMERCMED,
                             TERMOLABIL,
                             CONTROLADO,
                             IDENPORTARIA,
                             IDENOTC,
                             IDENCORRELATO,
                             IDENCOSME,
                             PRODFALTA,
                             STATUSMED,
                             ORDEMMEDIDA,
                             DIASUTEIS,
                             CUSTOVENDA_1,
                             CUSTOVENDA_2,
                             CUSTOVENDA_3,
                             CUSTOVENDA_4,
                             CUSTOVENDA_5,
                             CUSTOVENDA_6,
                             CUSTOVENDA_7,
                             CUSTOVENDA_8,
                             CUSTOVENDA_9,
                             CUSTOVENDA_10,
                             CUSTOVENDA_11,
                             CUSTOVENDA_12,
                             CUSTOVNDTOTAL_1,
                             CUSTOVNDTOTAL_2,
                             CUSTOVNDTOTAL_3,
                             CUSTOVNDTOTAL_4,
                             CUSTOVNDTOTAL_5,
                             CUSTOVNDTOTAL_6,
                             CUSTOVNDTOTAL_7,
                             CUSTOVNDTOTAL_8,
                             CUSTOVNDTOTAL_9,
                             CUSTOVNDTOTAL_10,
                             CUSTOVNDTOTAL_11,
                             CUSTOVNDTOTAL_12,
                             LUCRO_1,
                             LUCRO_2,
                             LUCRO_3,
                             LUCRO_4,
                             LUCRO_5,
                             LUCRO_6,
                             LUCRO_7,
                             LUCRO_8,
                             LUCRO_9,
                             LUCRO_10,
                             LUCRO_11,
                             LUCRO_12,
                             VLRGASTOVAR_1,
                             VLRGASTOVAR_2,
                             VLRGASTOVAR_3,
                             VLRGASTOVAR_4,
                             VLRGASTOVAR_5,
                             VLRGASTOVAR_6,
                             VLRGASTOVAR_7,
                             VLRGASTOVAR_8,
                             VLRGASTOVAR_9,
                             VLRGASTOVAR_10,
                             VLRGASTOVAR_11,
                             VLRGASTOVAR_12,
                             VLRMARGCONT_1,
                             VLRMARGCONT_2,
                             VLRMARGCONT_3,
                             VLRMARGCONT_4,
                             VLRMARGCONT_5,
                             VLRMARGCONT_6,
                             VLRMARGCONT_7,
                             VLRMARGCONT_8,
                             VLRMARGCONT_9,
                             VLRMARGCONT_10,
                             VLRMARGCONT_11,
                             VLRMARGCONT_12,
                             VLRTOT_1,
                             VLRTOT_2,
                             VLRTOT_3,
                             VLRTOT_4,
                             VLRTOT_5,
                             VLRTOT_6,
                             VLRTOT_7,
                             VLRTOT_8,
                             VLRTOT_9,
                             VLRTOT_10,
                             VLRTOT_11,
                             VLRTOT_12,
                             VLRUNIT_1,
                             VLRUNIT_2,
                             VLRUNIT_3,
                             VLRUNIT_4,
                             VLRUNIT_5,
                             VLRUNIT_6,
                             VLRUNIT_7,
                             VLRUNIT_8,
                             VLRUNIT_9,
                             VLRUNIT_10,
                             VLRUNIT_11,
                             VLRUNIT_12,
                             VLRVENDA_1,
                             VLRVENDA_2,
                             VLRVENDA_3,
                             VLRVENDA_4,
                             VLRVENDA_5,
                             VLRVENDA_6,
                             VLRVENDA_7,
                             VLRVENDA_8,
                             VLRVENDA_9,
                             VLRVENDA_10,
                             VLRVENDA_11,
                             VLRVENDA_12,
                             VLRVENDIAUTIL_1,
                             VLRVENDIAUTIL_2,
                             VLRVENDIAUTIL_3,
                             VLRVENDIAUTIL_4,
                             VLRVENDIAUTIL_5,
                             VLRVENDIAUTIL_6,
                             VLRVENDIAUTIL_7,
                             VLRVENDIAUTIL_8,
                             VLRVENDIAUTIL_9,
                             VLRVENDIAUTIL_10,
                             VLRVENDIAUTIL_11,
                             VLRVENDIAUTIL_12,
                             PESO_1,
                             PESO_2,
                             PESO_3,
                             PESO_4,
                             PESO_5,
                             PESO_6,
                             PESO_7,
                             PESO_8,
                             PESO_9,
                             PESO_10,
                             PESO_11,
                             PESO_12,
                             POPULARIDADE_1,
                             POPULARIDADE_2,
                             POPULARIDADE_3,
                             POPULARIDADE_4,
                             POPULARIDADE_5,
                             POPULARIDADE_6,
                             POPULARIDADE_7,
                             POPULARIDADE_8,
                             POPULARIDADE_9,
                             POPULARIDADE_10,
                             POPULARIDADE_11,
                             POPULARIDADE_12,
                             CURVAQTD_1,
                             CURVAQTD_2,
                             CURVAQTD_3,
                             CURVAQTD_4,
                             CURVAQTD_5,
                             CURVAQTD_6,
                             CURVAQTD_7,
                             CURVAQTD_8,
                             CURVAQTD_9,
                             CURVAQTD_10,
                             CURVAQTD_11,
                             CURVAQTD_12,
                             CURVAPESO_1,
                             CURVAPESO_2,
                             CURVAPESO_3,
                             CURVAPESO_4,
                             CURVAPESO_5,
                             CURVAPESO_6,
                             CURVAPESO_7,
                             CURVAPESO_8,
                             CURVAPESO_9,
                             CURVAPESO_10,
                             CURVAPESO_11,
                             CURVAPESO_12,
                             CURVATOT_1,
                             CURVATOT_2,
                             CURVATOT_3,
                             CURVATOT_4,
                             CURVATOT_5,
                             CURVATOT_6,
                             CURVATOT_7,
                             CURVATOT_8,
                             CURVATOT_9,
                             CURVATOT_10,
                             CURVATOT_11,
                             CURVATOT_12,
                             CURVAMARG_1,
                             CURVAMARG_2,
                             CURVAMARG_3,
                             CURVAMARG_4,
                             CURVAMARG_5,
                             CURVAMARG_6,
                             CURVAMARG_7,
                             CURVAMARG_8,
                             CURVAMARG_9,
                             CURVAMARG_10,
                             CURVAMARG_11,
                             CURVAMARG_12,
                             DUREST,
                             DURESTPOSCPA,
                             DIASSEMVENDA,
                             PERCDESCFORNECEDOR)
              VALUES (p_CODREL,
                      intCODPROD,
                      strCodVol,
                      intCODGRUPOPROD,
                      strDESCRGRUPOPROD,
                      strDESCRPROD,
                      strREFERENCIA,
                      strMARCA,
                      intCODEMP,
                      intCODLOCAL,
                      strCONTROLE,
                      strCOMPLDESC,
                      strDESCRLOCAL,
                      NVL (dobEstoque, 0),
                      NVL (dobEstMin, 0),
                      NVL (dobEstMax, 0),
                      NVL (dobEstoque, 0) * NVL (dobCustoAtual, 0),
                      intLEADTIME,
                      0,                                       -- PARTESTOQUE,
                      0,                                      -- QTDULTCOMPRA,
                      0,
                      0,
                      0,
                      0,     -- ESTMINGIR, ESTMAXGIR, SUGCOMPRA, SUGCOMPRAGIR,
                      0,
                      0,                                -- QTDTOTAL, QTDMEDIA,
                      dobQtde,
                      dobQtde,                        -- QTDMINIMA, QTDMAXIMA,
                      NVL (dobCustoAtual, 0),
                      NVL (dobCustoRep, 0),
                      0,                                          -- POPTOTAL,
                      NVL (dobVlrTabPreco, 0),
                      0,
                      0,                            -- PEDCPAPEND, PEDVDAPEND,
                      dobMarkUP,
                      'N',                                   -- ESTMENMEDVEND,
                      strCodVolCOMPRA,
                      intCODPARCFORN,
                      strREFFORN,
                      dobDESCMAX,
                      strLISTALPM,
                      strONEROSO,
                      strREFMERCMED,
                      strTERMOLABIL,
                      strCONTROLADO,
                      strIDENPORTARIA,
                      strIDENOTC,
                      strIDENCORRELATO,
                      strIDENCOSME,
                      strPRODFALTA,
                      strSTATUSMED,
                      dobORDEMMEDIDA,
                      0,                                          -- DIASUTEIS
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,                                          --CUSTOVENDA
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,                                       --CUSTOVNDTOTAL
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,                                               --LUCRO
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,                                         --VLRGASTOVAR
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,                                         --VLRMARGCONT
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,                                              --VLRTOT
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,                                             --VLRUNIT
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,                                            --VLRVENDA
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,                                       --VLRVENDIAUTIL
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,                                               -- PESO
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,                                       -- popularidade
                      'C',
                      'C',
                      'C',
                      'C',
                      'C',
                      'C',
                      'C',
                      'C',
                      'C',
                      'C',
                      'C',
                      'C',                                         -- CURVAQTD
                      'C',
                      'C',
                      'C',
                      'C',
                      'C',
                      'C',
                      'C',
                      'C',
                      'C',
                      'C',
                      'C',
                      'C',                                        -- CURVAPESO
                      'C',
                      'C',
                      'C',
                      'C',
                      'C',
                      'C',
                      'C',
                      'C',
                      'C',
                      'C',
                      'C',
                      'C',                                         -- CURVATOT
                      'C',
                      'C',
                      'C',
                      'C',
                      'C',
                      'C',
                      'C',
                      'C',
                      'C',
                      'C',
                      'C',
                      'C',                                        -- CURVAMARG
                      0,
                      0,
                      0,
                      dobPercDesc);
      ELSE
         BEGIN
            SELECT PESOBRUTO
              INTO dobPeso
              FROM TGFPRO
             WHERE CODPROD = intCodProd;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               dobPeso := 0;
         END;
      END IF;

      IF p_Numero = 1
      THEN
         UPDATE TGFGIR
            SET VLRVENDA_1 = dobQTDE,
                VLRVENDIAUTIL_1 = dobQtde / p_DiasUteis,
                PESO_1 = dobPESO * dobQtde,
                VLRUNIT_1 =
                   ROUND (
                        dobVlrTot
                      / CASE WHEN dobQtde = 0 THEN 1 ELSE dobQtde END,
                      8),
                VLRTOT_1 = dobVlrTot,
                CUSTOVENDA_1 = dobCusGerencial,
                CUSTOVNDTOTAL_1 = dobCusGerencial * dobQtde,
                LUCRO_1 = dobLUCRO,
                PERLUCRO_1 =
                   ROUND (
                      CASE
                         WHEN dobVlrTot = 0 THEN 0
                         ELSE dobLUCRO / dobVlrTot * 100
                      END,
                      8),
                VLRGASTOVAR_1 = dobCustoVariavel,
                PARTGASVARFAT_1 =
                   ROUND (
                      CASE
                         WHEN dobVlrTot = 0 THEN 0
                         ELSE dobCustoVariavel / dobVlrTot * 100
                      END,
                      8),
                VLRMARGCONT_1 = dobMargemContrib,
                PARTMARGCONTFAT_1 =
                   ROUND (
                      CASE
                         WHEN dobVlrTot = 0 THEN 0
                         ELSE dobMargemContrib / dobVlrTot * 100
                      END,
                      8),
                POPULARIDADE_1 = dobPOPULARIDADE,
                QTDTOTAL = QTDTOTAL + dobQtde,
                QTDMINIMA =
                   CASE
                      WHEN dobQtde < QTDMINIMA THEN dobQtde
                      ELSE QTDMINIMA
                   END,
                QTDMAXIMA =
                   CASE
                      WHEN dobQtde > QTDMAXIMA THEN dobQtde
                      ELSE QTDMAXIMA
                   END,
                QTDMEDIA = (QTDTOTAL + dobQtde) / p_Periodos,
                POPTOTAL = POPTOTAL + dobPOPULARIDADE,
                ESTMENMEDVEND =
                   CASE
                      WHEN (QTDTOTAL + dobQtde) / p_Periodos < ESTOQUE
                      THEN
                         'S'
                      ELSE
                         'N'
                   END,
                DIASUTEIS = DIASUTEIS + p_DiasUteis
          WHERE     CODEMP = intCODEMP
                AND CODLOCAL = intCODLOCAL
                AND CODPROD = intCODPROD
                AND CONTROLE = strCONTROLE
                AND CODREL = p_CODREL;
      ELSIF p_Numero = 2
      THEN
         UPDATE TGFGIR
            SET VLRVENDA_2 = dobQTDE,
                VLRVENDIAUTIL_2 = dobQtde / p_DiasUteis,
                PESO_2 = dobPESO * dobQtde,
                VLRUNIT_2 =
                   ROUND (
                        dobVlrTot
                      / CASE WHEN dobQtde = 0 THEN 1 ELSE dobQtde END,
                      8),
                VLRTOT_2 = dobVlrTot,
                CUSTOVENDA_2 = dobCusGerencial,
                CUSTOVNDTOTAL_2 = dobCusGerencial * dobQtde,
                LUCRO_2 = dobLUCRO,
                PERLUCRO_2 =
                   ROUND (
                      CASE
                         WHEN dobVlrTot = 0 THEN 0
                         ELSE dobLUCRO / dobVlrTot * 100
                      END,
                      8),
                VLRGASTOVAR_2 = dobCustoVariavel,
                PARTGASVARFAT_2 =
                   ROUND (
                      CASE
                         WHEN dobVlrTot = 0 THEN 0
                         ELSE dobCustoVariavel / dobVlrTot * 100
                      END,
                      8),
                VLRMARGCONT_2 = dobMargemContrib,
                PARTMARGCONTFAT_2 =
                   ROUND (
                      CASE
                         WHEN dobVlrTot = 0 THEN 0
                         ELSE dobMargemContrib / dobVlrTot * 100
                      END,
                      8),
                POPULARIDADE_2 = dobPOPULARIDADE,
                QTDTOTAL = QTDTOTAL + dobQtde,
                QTDMINIMA =
                   CASE
                      WHEN dobQtde < QTDMINIMA THEN dobQtde
                      ELSE QTDMINIMA
                   END,
                QTDMAXIMA =
                   CASE
                      WHEN dobQtde > QTDMAXIMA THEN dobQtde
                      ELSE QTDMAXIMA
                   END,
                QTDMEDIA = (QTDTOTAL + dobQtde) / p_Periodos,
                POPTOTAL = POPTOTAL + dobPOPULARIDADE,
                ESTMENMEDVEND =
                   CASE
                      WHEN (QTDTOTAL + dobQtde) / p_Periodos < ESTOQUE
                      THEN
                         'S'
                      ELSE
                         'N'
                   END,
                DIASUTEIS = DIASUTEIS + p_DiasUteis
          WHERE     CODEMP = intCODEMP
                AND CODLOCAL = intCODLOCAL
                AND CODPROD = intCODPROD
                AND CONTROLE = strCONTROLE
                AND CODREL = p_CODREL;
      ELSIF p_Numero = 3
      THEN
         UPDATE TGFGIR
            SET VLRVENDA_3 = dobQTDE,
                VLRVENDIAUTIL_3 = dobQtde / p_DiasUteis,
                PESO_3 = dobPESO * dobQtde,
                VLRUNIT_3 =
                     dobVlrTot
                   / ABS (CASE WHEN dobQtde = 0 THEN 1 ELSE dobQtde END),
                VLRTOT_3 = dobVlrTot,
                CUSTOVENDA_3 = dobCusGerencial,
                CUSTOVNDTOTAL_3 = dobCusGerencial * dobQtde,
                LUCRO_3 = dobLUCRO,
                PERLUCRO_3 =
                   ROUND (
                      CASE
                         WHEN dobVlrTot = 0 THEN 0
                         ELSE dobLUCRO / dobVlrTot * 100
                      END,
                      8),
                VLRGASTOVAR_3 = dobCustoVariavel,
                PARTGASVARFAT_3 =
                   ROUND (
                      CASE
                         WHEN dobVlrTot = 0 THEN 0
                         ELSE dobCustoVariavel / dobVlrTot * 100
                      END,
                      8),
                VLRMARGCONT_3 = dobMargemContrib,
                PARTMARGCONTFAT_3 =
                   ROUND (
                      CASE
                         WHEN dobVlrTot = 0 THEN 0
                         ELSE dobMargemContrib / dobVlrTot * 100
                      END,
                      8),
                POPULARIDADE_3 = dobPOPULARIDADE,
                QTDTOTAL = QTDTOTAL + dobQtde,
                QTDMINIMA =
                   CASE
                      WHEN dobQtde < QTDMINIMA THEN dobQtde
                      ELSE QTDMINIMA
                   END,
                QTDMAXIMA =
                   CASE
                      WHEN dobQtde > QTDMAXIMA THEN dobQtde
                      ELSE QTDMAXIMA
                   END,
                QTDMEDIA = (QTDTOTAL + dobQtde) / p_Periodos,
                POPTOTAL = POPTOTAL + dobPOPULARIDADE,
                ESTMENMEDVEND =
                   CASE
                      WHEN (QTDTOTAL + dobQtde) / p_Periodos < ESTOQUE
                      THEN
                         'S'
                      ELSE
                         'N'
                   END,
                DIASUTEIS = DIASUTEIS + p_DiasUteis
          WHERE     CODEMP = intCODEMP
                AND CODLOCAL = intCODLOCAL
                AND CODPROD = intCODPROD
                AND CONTROLE = strCONTROLE
                AND CODREL = p_CODREL;
      ELSIF p_Numero = 4
      THEN
         UPDATE TGFGIR
            SET VLRVENDA_4 = dobQTDE,
                VLRVENDIAUTIL_4 = dobQtde / p_DiasUteis,
                PESO_4 = dobPESO * dobQtde,
                VLRUNIT_4 =
                     dobVlrTot
                   / ABS (CASE WHEN dobQtde = 0 THEN 1 ELSE dobQtde END),
                VLRTOT_4 = dobVlrTot,
                CUSTOVENDA_4 = dobCusGerencial,
                CUSTOVNDTOTAL_4 = dobCusGerencial * dobQtde,
                LUCRO_4 = dobLUCRO,
                PERLUCRO_4 =
                   ROUND (
                      CASE
                         WHEN dobVlrTot = 0 THEN 0
                         ELSE dobLUCRO / dobVlrTot * 100
                      END,
                      8),
                VLRGASTOVAR_4 = dobCustoVariavel,
                PARTGASVARFAT_4 =
                   ROUND (
                      CASE
                         WHEN dobVlrTot = 0 THEN 0
                         ELSE dobCustoVariavel / dobVlrTot * 100
                      END,
                      8),
                VLRMARGCONT_4 = dobMargemContrib,
                PARTMARGCONTFAT_4 =
                   ROUND (
                      CASE
                         WHEN dobVlrTot = 0 THEN 0
                         ELSE dobMargemContrib / dobVlrTot * 100
                      END,
                      8),
                POPULARIDADE_4 = dobPOPULARIDADE,
                QTDTOTAL = QTDTOTAL + dobQtde,
                QTDMINIMA =
                   CASE
                      WHEN dobQtde < QTDMINIMA THEN dobQtde
                      ELSE QTDMINIMA
                   END,
                QTDMAXIMA =
                   CASE
                      WHEN dobQtde > QTDMAXIMA THEN dobQtde
                      ELSE QTDMAXIMA
                   END,
                QTDMEDIA = (QTDTOTAL + dobQtde) / p_Periodos,
                POPTOTAL = POPTOTAL + dobPOPULARIDADE,
                ESTMENMEDVEND =
                   CASE
                      WHEN (QTDTOTAL + dobQtde) / p_Periodos < ESTOQUE
                      THEN
                         'S'
                      ELSE
                         'N'
                   END,
                DIASUTEIS = DIASUTEIS + p_DiasUteis
          WHERE     CODEMP = intCODEMP
                AND CODLOCAL = intCODLOCAL
                AND CODPROD = intCODPROD
                AND CONTROLE = strCONTROLE
                AND CODREL = p_CODREL;
      ELSIF p_Numero = 5
      THEN
         UPDATE TGFGIR
            SET VLRVENDA_5 = dobQTDE,
                VLRVENDIAUTIL_5 = dobQtde / p_DiasUteis,
                PESO_5 = dobPESO * dobQtde,
                VLRUNIT_5 =
                     dobVlrTot
                   / ABS (CASE WHEN dobQtde = 0 THEN 1 ELSE dobQtde END),
                VLRTOT_5 = dobVlrTot,
                CUSTOVENDA_5 = dobCusGerencial,
                CUSTOVNDTOTAL_5 = dobCusGerencial * dobQtde,
                LUCRO_5 = dobLUCRO,
                PERLUCRO_5 =
                   ROUND (
                      CASE
                         WHEN dobVlrTot = 0 THEN 0
                         ELSE dobLUCRO / dobVlrTot * 100
                      END,
                      8),
                VLRGASTOVAR_5 = dobCustoVariavel,
                PARTGASVARFAT_5 =
                   ROUND (
                      CASE
                         WHEN dobVlrTot = 0 THEN 0
                         ELSE dobCustoVariavel / dobVlrTot * 100
                      END,
                      8),
                VLRMARGCONT_5 = dobMargemContrib,
                PARTMARGCONTFAT_5 =
                   ROUND (
                      CASE
                         WHEN dobVlrTot = 0 THEN 0
                         ELSE dobMargemContrib / dobVlrTot * 100
                      END,
                      8),
                POPULARIDADE_5 = dobPOPULARIDADE,
                QTDTOTAL = QTDTOTAL + dobQtde,
                QTDMINIMA =
                   CASE
                      WHEN dobQtde < QTDMINIMA THEN dobQtde
                      ELSE QTDMINIMA
                   END,
                QTDMAXIMA =
                   CASE
                      WHEN dobQtde > QTDMAXIMA THEN dobQtde
                      ELSE QTDMAXIMA
                   END,
                QTDMEDIA = (QTDTOTAL + dobQtde) / p_Periodos,
                POPTOTAL = POPTOTAL + dobPOPULARIDADE,
                ESTMENMEDVEND =
                   CASE
                      WHEN (QTDTOTAL + dobQtde) / p_Periodos < ESTOQUE
                      THEN
                         'S'
                      ELSE
                         'N'
                   END,
                DIASUTEIS = DIASUTEIS + p_DiasUteis
          WHERE     CODEMP = intCODEMP
                AND CODLOCAL = intCODLOCAL
                AND CODPROD = intCODPROD
                AND CONTROLE = strCONTROLE
                AND CODREL = p_CODREL;
      ELSIF p_Numero = 6
      THEN
         UPDATE TGFGIR
            SET VLRVENDA_6 = dobQTDE,
                VLRVENDIAUTIL_6 = dobQtde / p_DiasUteis,
                PESO_6 = dobPESO * dobQtde,
                VLRUNIT_6 =
                     dobVlrTot
                   / ABS (CASE WHEN dobQtde = 0 THEN 1 ELSE dobQtde END),
                VLRTOT_6 = dobVlrTot,
                CUSTOVENDA_6 = dobCusGerencial,
                CUSTOVNDTOTAL_6 = dobCusGerencial * dobQtde,
                LUCRO_6 = dobLUCRO,
                PERLUCRO_6 =
                   ROUND (
                      CASE
                         WHEN dobVlrTot = 0 THEN 0
                         ELSE dobLUCRO / dobVlrTot * 100
                      END,
                      8),
                VLRGASTOVAR_6 = dobCustoVariavel,
                PARTGASVARFAT_6 =
                   ROUND (
                      CASE
                         WHEN dobVlrTot = 0 THEN 0
                         ELSE dobCustoVariavel / dobVlrTot * 100
                      END,
                      8),
                VLRMARGCONT_6 = dobMargemContrib,
                PARTMARGCONTFAT_6 =
                   ROUND (
                      CASE
                         WHEN dobVlrTot = 0 THEN 0
                         ELSE dobMargemContrib / dobVlrTot * 100
                      END,
                      8),
                POPULARIDADE_6 = dobPOPULARIDADE,
                QTDTOTAL = QTDTOTAL + dobQtde,
                QTDMINIMA =
                   CASE
                      WHEN dobQtde < QTDMINIMA THEN dobQtde
                      ELSE QTDMINIMA
                   END,
                QTDMAXIMA =
                   CASE
                      WHEN dobQtde > QTDMAXIMA THEN dobQtde
                      ELSE QTDMAXIMA
                   END,
                QTDMEDIA = (QTDTOTAL + dobQtde) / p_Periodos,
                POPTOTAL = POPTOTAL + dobPOPULARIDADE,
                ESTMENMEDVEND =
                   CASE
                      WHEN (QTDTOTAL + dobQtde) / p_Periodos < ESTOQUE
                      THEN
                         'S'
                      ELSE
                         'N'
                   END,
                DIASUTEIS = DIASUTEIS + p_DiasUteis
          WHERE     CODEMP = intCODEMP
                AND CODLOCAL = intCODLOCAL
                AND CODPROD = intCODPROD
                AND CONTROLE = strCONTROLE
                AND CODREL = p_CODREL;
      ELSIF p_Numero = 7
      THEN
         UPDATE TGFGIR
            SET VLRVENDA_7 = dobQTDE,
                VLRVENDIAUTIL_7 = dobQtde / p_DiasUteis,
                PESO_7 = dobPESO * dobQtde,
                VLRUNIT_7 =
                     dobVlrTot
                   / ABS (CASE WHEN dobQtde = 0 THEN 1 ELSE dobQtde END),
                VLRTOT_7 = dobVlrTot,
                CUSTOVENDA_7 = dobCusGerencial,
                CUSTOVNDTOTAL_7 = dobCusGerencial * dobQtde,
                LUCRO_7 = dobLUCRO,
                PERLUCRO_7 =
                   ROUND (
                      CASE
                         WHEN dobVlrTot = 0 THEN 0
                         ELSE dobLUCRO / dobVlrTot * 100
                      END,
                      8),
                VLRGASTOVAR_7 = dobCustoVariavel,
                PARTGASVARFAT_7 =
                   ROUND (
                      CASE
                         WHEN dobVlrTot = 0 THEN 0
                         ELSE dobCustoVariavel / dobVlrTot * 100
                      END,
                      8),
                VLRMARGCONT_7 = dobMargemContrib,
                PARTMARGCONTFAT_7 =
                   ROUND (
                      CASE
                         WHEN dobVlrTot = 0 THEN 0
                         ELSE dobMargemContrib / dobVlrTot * 100
                      END,
                      8),
                POPULARIDADE_7 = dobPOPULARIDADE,
                QTDTOTAL = QTDTOTAL + dobQtde,
                QTDMINIMA =
                   CASE
                      WHEN dobQtde < QTDMINIMA THEN dobQtde
                      ELSE QTDMINIMA
                   END,
                QTDMAXIMA =
                   CASE
                      WHEN dobQtde > QTDMAXIMA THEN dobQtde
                      ELSE QTDMAXIMA
                   END,
                QTDMEDIA = (QTDTOTAL + dobQtde) / p_Periodos,
                POPTOTAL = POPTOTAL + dobPOPULARIDADE,
                ESTMENMEDVEND =
                   CASE
                      WHEN (QTDTOTAL + dobQtde) / p_Periodos < ESTOQUE
                      THEN
                         'S'
                      ELSE
                         'N'
                   END,
                DIASUTEIS = DIASUTEIS + p_DiasUteis
          WHERE     CODEMP = intCODEMP
                AND CODLOCAL = intCODLOCAL
                AND CODPROD = intCODPROD
                AND CONTROLE = strCONTROLE
                AND CODREL = p_CODREL;
      ELSIF p_Numero = 8
      THEN
         UPDATE TGFGIR
            SET VLRVENDA_8 = dobQTDE,
                VLRVENDIAUTIL_8 = dobQtde / p_DiasUteis,
                PESO_8 = dobPESO * dobQtde,
                VLRUNIT_8 =
                     dobVlrTot
                   / ABS (CASE WHEN dobQtde = 0 THEN 1 ELSE dobQtde END),
                VLRTOT_8 = dobVlrTot,
                CUSTOVENDA_8 = dobCusGerencial,
                CUSTOVNDTOTAL_8 = dobCusGerencial * dobQtde,
                LUCRO_8 = dobLUCRO,
                PERLUCRO_8 =
                   ROUND (
                      CASE
                         WHEN dobVlrTot = 0 THEN 0
                         ELSE dobLUCRO / dobVlrTot * 100
                      END,
                      8),
                VLRGASTOVAR_8 = dobCustoVariavel,
                PARTGASVARFAT_8 =
                   ROUND (
                      CASE
                         WHEN dobVlrTot = 0 THEN 0
                         ELSE dobCustoVariavel / dobVlrTot * 100
                      END,
                      8),
                VLRMARGCONT_8 = dobMargemContrib,
                PARTMARGCONTFAT_8 =
                   ROUND (
                      CASE
                         WHEN dobVlrTot = 0 THEN 0
                         ELSE dobMargemContrib / dobVlrTot * 100
                      END,
                      8),
                POPULARIDADE_8 = dobPOPULARIDADE,
                QTDTOTAL = QTDTOTAL + dobQtde,
                QTDMINIMA =
                   CASE
                      WHEN dobQtde < QTDMINIMA THEN dobQtde
                      ELSE QTDMINIMA
                   END,
                QTDMAXIMA =
                   CASE
                      WHEN dobQtde > QTDMAXIMA THEN dobQtde
                      ELSE QTDMAXIMA
                   END,
                QTDMEDIA = (QTDTOTAL + dobQtde) / p_Periodos,
                POPTOTAL = POPTOTAL + dobPOPULARIDADE,
                ESTMENMEDVEND =
                   CASE
                      WHEN (QTDTOTAL + dobQtde) / p_Periodos < ESTOQUE
                      THEN
                         'S'
                      ELSE
                         'N'
                   END,
                DIASUTEIS = DIASUTEIS + p_DiasUteis
          WHERE     CODEMP = intCODEMP
                AND CODLOCAL = intCODLOCAL
                AND CODPROD = intCODPROD
                AND CONTROLE = strCONTROLE
                AND CODREL = p_CODREL;
      ELSIF p_Numero = 9
      THEN
         UPDATE TGFGIR
            SET VLRVENDA_9 = dobQTDE,
                VLRVENDIAUTIL_9 = dobQtde / p_DiasUteis,
                PESO_9 = dobPESO * dobQtde,
                VLRUNIT_9 =
                     dobVlrTot
                   / ABS (CASE WHEN dobQtde = 0 THEN 1 ELSE dobQtde END),
                VLRTOT_9 = dobVlrTot,
                CUSTOVENDA_9 = dobCusGerencial,
                CUSTOVNDTOTAL_9 = dobCusGerencial * dobQtde,
                LUCRO_9 = dobLUCRO,
                PERLUCRO_9 =
                   ROUND (
                      CASE
                         WHEN dobVlrTot = 0 THEN 0
                         ELSE dobLUCRO / dobVlrTot * 100
                      END,
                      8),
                VLRGASTOVAR_9 = dobCustoVariavel,
                PARTGASVARFAT_9 =
                   ROUND (
                      CASE
                         WHEN dobVlrTot = 0 THEN 0
                         ELSE dobCustoVariavel / dobVlrTot * 100
                      END,
                      8),
                VLRMARGCONT_9 = dobMargemContrib,
                PARTMARGCONTFAT_9 =
                   ROUND (
                      CASE
                         WHEN dobVlrTot = 0 THEN 0
                         ELSE dobMargemContrib / dobVlrTot * 100
                      END,
                      8),
                POPULARIDADE_9 = dobPOPULARIDADE,
                QTDTOTAL = QTDTOTAL + dobQtde,
                QTDMINIMA =
                   CASE
                      WHEN dobQtde < QTDMINIMA THEN dobQtde
                      ELSE QTDMINIMA
                   END,
                QTDMAXIMA =
                   CASE
                      WHEN dobQtde > QTDMAXIMA THEN dobQtde
                      ELSE QTDMAXIMA
                   END,
                QTDMEDIA = (QTDTOTAL + dobQtde) / p_Periodos,
                POPTOTAL = POPTOTAL + dobPOPULARIDADE,
                ESTMENMEDVEND =
                   CASE
                      WHEN (QTDTOTAL + dobQtde) / p_Periodos < ESTOQUE
                      THEN
                         'S'
                      ELSE
                         'N'
                   END,
                DIASUTEIS = DIASUTEIS + p_DiasUteis
          WHERE     CODEMP = intCODEMP
                AND CODLOCAL = intCODLOCAL
                AND CODPROD = intCODPROD
                AND CONTROLE = strCONTROLE
                AND CODREL = p_CODREL;
      ELSIF p_Numero = 10
      THEN
         UPDATE TGFGIR
            SET VLRVENDA_10 = dobQTDE,
                VLRVENDIAUTIL_10 = dobQtde / p_DiasUteis,
                PESO_10 = dobPESO * dobQtde,
                VLRUNIT_10 =
                     dobVlrTot
                   / ABS (CASE WHEN dobQtde = 0 THEN 1 ELSE dobQtde END),
                VLRTOT_10 = dobVlrTot,
                CUSTOVENDA_10 = dobCusGerencial,
                CUSTOVNDTOTAL_10 = dobCusGerencial * dobQtde,
                LUCRO_10 = dobLUCRO,
                PERLUCRO_10 =
                   ROUND (
                      CASE
                         WHEN dobVlrTot = 0 THEN 0
                         ELSE dobLUCRO / dobVlrTot * 100
                      END,
                      8),
                VLRGASTOVAR_10 = dobCustoVariavel,
                PARTGASVARFAT_10 =
                   ROUND (
                      CASE
                         WHEN dobVlrTot = 0 THEN 0
                         ELSE dobCustoVariavel / dobVlrTot * 100
                      END,
                      8),
                VLRMARGCONT_10 = dobMargemContrib,
                PARTMARGCONTFAT_10 =
                   ROUND (
                      CASE
                         WHEN dobVlrTot = 0 THEN 0
                         ELSE dobMargemContrib / dobVlrTot * 100
                      END,
                      8),
                POPULARIDADE_10 = dobPOPULARIDADE,
                QTDTOTAL = QTDTOTAL + dobQtde,
                QTDMINIMA =
                   CASE
                      WHEN dobQtde < QTDMINIMA THEN dobQtde
                      ELSE QTDMINIMA
                   END,
                QTDMAXIMA =
                   CASE
                      WHEN dobQtde > QTDMAXIMA THEN dobQtde
                      ELSE QTDMAXIMA
                   END,
                QTDMEDIA = (QTDTOTAL + dobQtde) / p_Periodos,
                POPTOTAL = POPTOTAL + dobPOPULARIDADE,
                ESTMENMEDVEND =
                   CASE
                      WHEN (QTDTOTAL + dobQtde) / p_Periodos < ESTOQUE
                      THEN
                         'S'
                      ELSE
                         'N'
                   END,
                DIASUTEIS = DIASUTEIS + p_DiasUteis
          WHERE     CODEMP = intCODEMP
                AND CODLOCAL = intCODLOCAL
                AND CODPROD = intCODPROD
                AND CONTROLE = strCONTROLE
                AND CODREL = p_CODREL;
      ELSIF p_Numero = 11
      THEN
         UPDATE TGFGIR
            SET VLRVENDA_11 = dobQTDE,
                VLRVENDIAUTIL_11 = dobQtde / p_DiasUteis,
                PESO_11 = dobPESO * dobQtde,
                VLRUNIT_11 =
                     dobVlrTot
                   / ABS (CASE WHEN dobQtde = 0 THEN 1 ELSE dobQtde END),
                VLRTOT_11 = dobVlrTot,
                CUSTOVENDA_11 = dobCusGerencial,
                CUSTOVNDTOTAL_11 = dobCusGerencial * dobQtde,
                LUCRO_11 = dobLUCRO,
                PERLUCRO_11 =
                   ROUND (
                      CASE
                         WHEN dobVlrTot = 0 THEN 0
                         ELSE dobLUCRO / dobVlrTot * 100
                      END,
                      8),
                VLRGASTOVAR_11 = dobCustoVariavel,
                PARTGASVARFAT_11 =
                   ROUND (
                      CASE
                         WHEN dobVlrTot = 0 THEN 0
                         ELSE dobCustoVariavel / dobVlrTot * 100
                      END,
                      8),
                VLRMARGCONT_11 = dobMargemContrib,
                PARTMARGCONTFAT_11 =
                   ROUND (
                      CASE
                         WHEN dobVlrTot = 0 THEN 0
                         ELSE dobMargemContrib / dobVlrTot * 100
                      END,
                      8),
                POPULARIDADE_11 = dobPOPULARIDADE,
                QTDTOTAL = QTDTOTAL + dobQtde,
                QTDMINIMA =
                   CASE
                      WHEN dobQtde < QTDMINIMA THEN dobQtde
                      ELSE QTDMINIMA
                   END,
                QTDMAXIMA =
                   CASE
                      WHEN dobQtde > QTDMAXIMA THEN dobQtde
                      ELSE QTDMAXIMA
                   END,
                QTDMEDIA = (QTDTOTAL + dobQtde) / p_Periodos,
                POPTOTAL = POPTOTAL + dobPOPULARIDADE,
                ESTMENMEDVEND =
                   CASE
                      WHEN (QTDTOTAL + dobQtde) / p_Periodos < ESTOQUE
                      THEN
                         'S'
                      ELSE
                         'N'
                   END,
                DIASUTEIS = DIASUTEIS + p_DiasUteis
          WHERE     CODEMP = intCODEMP
                AND CODLOCAL = intCODLOCAL
                AND CODPROD = intCODPROD
                AND CONTROLE = strCONTROLE
                AND CODREL = p_CODREL;
      ELSIF p_Numero = 12
      THEN
         UPDATE TGFGIR
            SET VLRVENDA_12 = dobQTDE,
                VLRVENDIAUTIL_12 = dobQtde / p_DiasUteis,
                PESO_12 = dobPESO * dobQtde,
                VLRUNIT_12 =
                     dobVlrTot
                   / ABS (CASE WHEN dobQtde = 0 THEN 1 ELSE dobQtde END),
                VLRTOT_12 = dobVlrTot,
                CUSTOVENDA_12 = dobCusGerencial,
                CUSTOVNDTOTAL_12 = dobCusGerencial * dobQtde,
                LUCRO_12 = dobLUCRO,
                PERLUCRO_12 =
                   ROUND (
                      CASE
                         WHEN dobVlrTot = 0 THEN 0
                         ELSE dobLUCRO / dobVlrTot * 100
                      END,
                      8),
                VLRGASTOVAR_12 = dobCustoVariavel,
                PARTGASVARFAT_12 =
                   ROUND (
                      CASE
                         WHEN dobVlrTot = 0 THEN 0
                         ELSE dobCustoVariavel / dobVlrTot * 100
                      END,
                      8),
                VLRMARGCONT_12 = dobMargemContrib,
                PARTMARGCONTFAT_12 =
                   ROUND (
                      CASE
                         WHEN dobVlrTot = 0 THEN 0
                         ELSE dobMargemContrib / dobVlrTot * 100
                      END,
                      8),
                POPULARIDADE_12 = dobPOPULARIDADE,
                QTDTOTAL = QTDTOTAL + dobQtde,
                QTDMINIMA =
                   CASE
                      WHEN dobQtde < QTDMINIMA THEN dobQtde
                      ELSE QTDMINIMA
                   END,
                QTDMAXIMA =
                   CASE
                      WHEN dobQtde > QTDMAXIMA THEN dobQtde
                      ELSE QTDMAXIMA
                   END,
                QTDMEDIA = (QTDTOTAL + dobQtde) / p_Periodos,
                POPTOTAL = POPTOTAL + dobPOPULARIDADE,
                ESTMENMEDVEND =
                   CASE
                      WHEN (QTDTOTAL + dobQtde) / p_Periodos < ESTOQUE
                      THEN
                         'S'
                      ELSE
                         'N'
                   END,
                DIASUTEIS = DIASUTEIS + p_DiasUteis
          WHERE     CODEMP = intCODEMP
                AND CODLOCAL = intCODLOCAL
                AND CODPROD = intCODPROD
                AND CONTROLE = strCONTROLE
                AND CODREL = p_CODREL;
      END IF;
   END LOOP;

   CLOSE c;
END;
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 21/05/2018 11:14:03
Num.Script: 49159-0-1000
Nro. O.S. : 1121615
Nome      : INSERE - THOOBJ - 4915800
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_MATGIRCALCGIRO
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210003
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_MATGIRCALCGIRO' NOMEOBJ, 49158 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, '192d136b4cf40dfc852f215971828402' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_MATGIRCALCGIRO' and THO.hashcode = '192d136b4cf40dfc852f215971828402')
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 09/03/2018 12:50:41
Num.Script: 49403-0-0
Nro. O.S. : 1135429
Nome      : Alterar - STP_CONFIRMANOTA2
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - STP_CONFIRMANOTA2
NomeObjeto: STP_CONFIRMANOTA2
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210003
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE Stp_Confirmanota2 (P_NUNOTA      INTEGER,
                                               P_PROVISAO    VARCHAR2,
                                               P_RECDESP     SMALLINT)
AS
BEGIN
   DECLARE
      P_CODEMP                     SMALLINT;
      P_NUMNOTA                    INT;
      P_SERIENOTA                  VARCHAR2 (3);
      P_DTNEG                      DATE;
      P_DTMOV                      DATE;
      P_DTFATUR                    DATE;
      P_CODPARC                    INT;
      P_CODTIPOPER                 SMALLINT;
      P_DHTIPOPER                  DATE;
      P_VENCFRETE                  DATE;
      P_CODVEND                    SMALLINT;
      P_CODMOEDA                   SMALLINT;
      P_COUNT                      DECIMAL (5, 0);
      P_VLRDESDOB                  FLOAT;
      P_VLRNOTA                    FLOAT;
      P_QTDVOL                     INT;
      P_VLROUTROS                  FLOAT;
      P_VLRFRETE                   FLOAT;
      P_VLRDESCTOT                 FLOAT;
      P_TIPFRETE                   CHAR (1);
      P_TIPMOV                     CHAR (1);
      P_TIPCHEQ                    CHAR (1);
      P_CODPARCTRANSP              INT;
      P_SOMAFIN                    FLOAT;
      P_SOMA                       FLOAT;
      P_GNREST                     INT;
      P_TOPCUPOMFISCAL             CHAR (1);
      P_IMPRIME_CUPOM_CONFIRMADO   CHAR (1);
      P_TIPTITGNRESTRB             INT;
      P_PERMFINMENORVLRNOTA        CHAR (1);
      P_SEQCONFIRMA                INT;
      P_BASENUMERACAO              TGFTOP.BASENUMERACAO%TYPE;
      P_NUNOTAPEDFRET           int;

      PROCEDURE LOCAL_STP_SEQ_CONFIRMA (P_ULTCOD OUT NUMBER)
      AS
         PRAGMA AUTONOMOUS_TRANSACTION;
      BEGIN
         BEGIN
                SELECT (ULTCOD + 1)
                  INTO P_ULTCOD
                  FROM TGFNUM
                 WHERE ARQUIVO = 'SEQCONFIRMA'
            FOR UPDATE ;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               BEGIN
                  INSERT INTO TGFNUM (ARQUIVO,
                                      CODEMP,
                                      ULTCOD,
                                      ULTNOTATALAO)
                      VALUES ('SEQCONFIRMA',
                              1,
                              0,
                              999999999);

                  P_ULTCOD := 1;
               END;
         END;

         UPDATE TGFNUM
            SET ULTCOD = P_ULTCOD
          WHERE ARQUIVO = 'SEQCONFIRMA';

         COMMIT;
      EXCEPTION
         WHEN OTHERS
         THEN
            ROLLBACK;
            RAISE;
      END;
   BEGIN
      /*    Stp_Valida_Dentroestado(P_NUNOTA);  no sqlserver nao tem */
      SELECT CODEMP,
             NUMNOTA,
             SERIENOTA,
             DTNEG,
             DTMOV,
             CODPARC,
             CODTIPOPER,
             DHTIPOPER,
             CODVEND,
             CODMOEDA,
             NVL (QTDVOL, 0),
             DTFATUR,
             VLRNOTA,
             VLROUTROS,
             VLRFRETE,
             TIPFRETE,
             TIPMOV,
             CODPARCTRANSP,
             VLRDESCTOT,
             VENCFRETE,
             NUNOTAPEDFRET
        INTO P_CODEMP,
             P_NUMNOTA,
             P_SERIENOTA,
             P_DTNEG,
             P_DTMOV,
             P_CODPARC,
             P_CODTIPOPER,
             P_DHTIPOPER,
             P_CODVEND,
             P_CODMOEDA,
             P_QTDVOL,
             P_DTFATUR,
             P_VLRNOTA,
             P_VLROUTROS,
             P_VLRFRETE,
             P_TIPFRETE,
             P_TIPMOV,
             P_CODPARCTRANSP,
             P_VLRDESCTOT,
             P_VENCFRETE,
             P_NUNOTAPEDFRET 
        FROM TGFCAB
       WHERE NUNOTA = P_NUNOTA;

      SELECT NVL (CUPOMFISCAL, 'N'), PERMFINMENORVLRNOTA, BASENUMERACAO
        INTO P_TOPCUPOMFISCAL, P_PERMFINMENORVLRNOTA, P_BASENUMERACAO
        FROM TGFTOP
       WHERE CODTIPOPER = P_CODTIPOPER AND DHALTER = P_DHTIPOPER;

      -- 861493
      BEGIN
         SELECT COUNT ( * )
           INTO P_COUNT
           FROM TSDPAR
          WHERE CHAVE = 'DATASYNCNOMENO';
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            P_COUNT := 0;
      END;

      IF P_COUNT > 0
      THEN
         LOCAL_STP_SEQ_CONFIRMA (P_SEQCONFIRMA);

         UPDATE TGFCAB
            SET SEQCONFIRMA = P_SEQCONFIRMA
          WHERE NUNOTA = P_NUNOTA;
      END IF;

      -- 861493

      P_GNREST := Get_Tsipar_Inteiro ('TIPTITGNREST');

      P_TIPTITGNRESTRB := Get_Tsipar_Inteiro ('TIPTITGNRESTRB');

      IF (P_RECDESP = 0)
      THEN
         SELECT COUNT (1)
           INTO P_COUNT
           FROM TGFFIN
          WHERE     NUNOTA = P_NUNOTA
                AND DESDOBDUPL <> 'F'
                AND DESDOBDUPL <> 'K'
                AND DESDOBDUPL <> 'T';

         IF (P_COUNT <> 0)
         THEN
            DELETE FROM TGFFIN
                  WHERE     NUNOTA = P_NUNOTA
                        AND DESDOBDUPL <> 'F'
                        AND DESDOBDUPL <> 'K'
                        AND DESDOBDUPL <> 'T';
         END IF;
      ELSE
         IF (P_RECDESP = -1) AND (P_TIPMOV <> 'D')
         THEN
            P_TIPCHEQ := 'A';
         ELSE
            P_TIPCHEQ := 'I';
         END IF;

         UPDATE TGFFIN
            SET NUMNOTA = P_NUMNOTA,
                SERIENOTA = P_SERIENOTA,
                DTNEG = P_DTNEG,
                DHMOV =
                   TO_DATE (
                      TO_CHAR (P_DTMOV, 'mon dd yyyy')
                      || TO_CHAR (TGFFIN.DHMOV, 'hh24:mi:ss'),
                      'mm dd yyyy hh24:mi:ss'),                   /*P_DTMOV,*/
                CODTIPOPER = P_CODTIPOPER,
                DHTIPOPER = P_DHTIPOPER,
                CODVEND = P_CODVEND,
                CODMOEDA = P_CODMOEDA,
                PROVISAO = P_PROVISAO,
                RECDESP =
                   CASE
                      WHEN (P_GNREST <> 0 AND CODTIPTIT = P_GNREST)
                      THEN
                         -1
                      WHEN (P_TIPTITGNRESTRB <> 0
                            AND CODTIPTIT = P_TIPTITGNRESTRB)
                      THEN
                         1
                      WHEN VLRDESDOB < 0
                      THEN
                         P_RECDESP * -1
                      ELSE
                         P_RECDESP
                   END,
                VLRDESDOB = ABS (VLRDESDOB),
                TIPMARCCHEQ = P_TIPCHEQ,
                DTALTER = SYSDATE,
                CARTA = NULL
          WHERE NUNOTA = P_NUNOTA
                AND (DESDOBDUPL IS NULL
                     OR (    DESDOBDUPL <> 'K'
                         AND DESDOBDUPL <> 'F'
                         AND DESDOBDUPL <> 'T'));

         SELECT COUNT ( * )
           INTO P_COUNT
           FROM TGFFIN
          WHERE NUNOTA = P_NUNOTA AND DESDOBDUPL = 'T' AND RECDESP = 0;

         IF P_COUNT > 0
         THEN
            UPDATE TGFFIN
               SET NUMNOTA = P_NUMNOTA,
                   SERIENOTA = P_SERIENOTA,
                   DTNEG = P_DTNEG,
                   CODTIPOPER = P_CODTIPOPER,
                   DHTIPOPER = P_DHTIPOPER,
                   CODVEND = P_CODVEND,
                   CODMOEDA = P_CODMOEDA,
                   VLRDESDOB = ABS (VLRDESDOB),
                   DTALTER = SYSDATE,
                   RECDESP =
                      CASE
                         WHEN (P_GNREST <> 0 AND CODTIPTIT = P_GNREST)
                         THEN
                            -1
                         WHEN (P_TIPTITGNRESTRB <> 0
                               AND CODTIPTIT = P_TIPTITGNRESTRB)
                         THEN
                            1
                         WHEN VLRDESDOB < 0
                         THEN
                            P_RECDESP * -1
                         ELSE
                            P_RECDESP
                      END
             WHERE NUNOTA = P_NUNOTA AND DESDOBDUPL = 'T' AND RECDESP = 0;
         END IF;
      END IF;

      IF (P_QTDVOL = 0)
      THEN
         SELECT SUM (QTDNEG)
           INTO P_QTDVOL
           FROM TGFITE
          WHERE     NUNOTA = P_NUNOTA
                AND USOPROD <> 'D'
                AND USOPROD <> 'S'
                AND SEQUENCIA > 0;

         IF (P_QTDVOL IS NOT NULL)
         THEN
            UPDATE TGFCAB
               SET QTDVOL = P_QTDVOL
             WHERE NUNOTA = P_NUNOTA AND (QTDVOL IS NULL OR QTDVOL = 0);
         END IF;
      END IF;

      IF P_DTFATUR IS NULL
      THEN
         P_DTFATUR := SYSDATE;
      END IF;

      UPDATE TGFCAB
         SET STATUSNOTA = 'L',
             DTFATUR = P_DTFATUR,
             DTALTER = SYSDATE,
             CODUSU = Tsiusu_Log_Pkg.V_CODUSULOG,
             HRENTSAI =
                CASE
                   WHEN TIPMOV IN ('V', 'D', 'E', 'T')
                        OR P_BASENUMERACAO IN ('V', 'D')
                   THEN
                      CASE
                         WHEN EXISTS
                                 (SELECT 1
                                    FROM TSIPAR
                                   WHERE CHAVE = 'SUBSTHRENTSAI'
                                         AND LOGICO = 'S')
                         THEN
                            TO_DATE (
                               TO_CHAR (NVL (DTENTSAI, DTNEG), 'dd/mm/yyyy')
                               || TO_CHAR (SYSDATE, 'hh24:mi:ss'),
                               'dd-mm-yyyy hh24:mi:ss')
                         ELSE
                            NVL (HRENTSAI, SYSDATE)
                      END
                   ELSE
                      HRENTSAI
                END
       WHERE NUNOTA = P_NUNOTA;

      SELECT COUNT (1)
        INTO P_COUNT
        FROM TGFVAR
       WHERE NUNOTA = P_NUNOTA AND STATUSNOTA <> 'L';

      IF P_COUNT <> 0
      THEN
         UPDATE TGFVAR
            SET STATUSNOTA = 'L'
          WHERE NUNOTA = P_NUNOTA;
      END IF;

      UPDATE TGFITE
         SET STATUSNOTA = 'L'
       WHERE NUNOTA = P_NUNOTA;

      /* Verifica se o financeiro é da geração do conhecimento de transporte*/
      IF (P_RECDESP <> 0)
      THEN
         SELECT ABS (SUM (VLRDESDOB * RECDESP))
           INTO P_VLRDESDOB
           FROM TGFFIN
          WHERE NUNOTA = P_NUNOTA
                AND (DESDOBDUPL IS NULL
                     OR DESDOBDUPL NOT IN ('M', 'V', 'K', 'F', 'T'))
                AND ( (CODTIPTIT <> P_GNREST) OR (P_GNREST = 0))
                AND ( (CODTIPTIT <> P_TIPTITGNRESTRB)
                     OR (P_TIPTITGNRESTRB = 0));


         IF (P_VLRDESDOB < P_VLRNOTA)
         THEN
            BEGIN
               SELECT SUM (VLRTOT + VLRIPI - VLRDESC - VLRREPRED)
                 INTO P_SOMA
                 FROM TGFITE
                WHERE NUNOTA = P_NUNOTA AND SEQUENCIA > 0 AND TERCEIROS = 'S';
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  P_SOMA := 0;
            END;

            IF ( (P_VLRDESDOB < (P_VLRNOTA - P_SOMA))
                AND (P_PERMFINMENORVLRNOTA <> 'S'))
            THEN
               RAISE_APPLICATION_ERROR (
                  -20101,
                  'Impossível confirmar a nota. Soma do financeiro, não corresponde ao valor total da nota.');
            END IF;
         END IF;

         P_IMPRIME_CUPOM_CONFIRMADO := 'N';

         IF P_TOPCUPOMFISCAL = 'S'
         THEN
            BEGIN
               SELECT LOGICO
                 INTO P_IMPRIME_CUPOM_CONFIRMADO
                 FROM TSIPAR
                WHERE CHAVE = 'IMPCUPOMCONF';
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  P_IMPRIME_CUPOM_CONFIRMADO := 'N';
            END;
         END IF;

         IF NOT (P_TOPCUPOMFISCAL = 'S' AND P_IMPRIME_CUPOM_CONFIRMADO = 'S')
         THEN
            SELECT COUNT (1)
              INTO P_COUNT
              FROM TGFFIN FIN
             WHERE FIN.NUNOTA = P_NUNOTA
                   AND ( (RECDESP = 0) OR (NUMNOTA = 0));

            IF (P_COUNT > 0)
            THEN
               /*Se não for NFE continua validando*/
               SELECT COUNT (1)
                 INTO P_COUNT
                 FROM TGFEMP EMP, TGFTOP TPO
                WHERE     EMP.CODEMP = P_CODEMP
                      AND TPO.CODTIPOPER = P_CODTIPOPER
                      AND TPO.DHALTER = P_DHTIPOPER
                      AND TPO.NFE IS NOT NULL
                      AND TPO.NFE <> 'M'
                      AND EMP.NFE IS NOT NULL
                      AND EMP.NFE <> '0';

               IF (P_COUNT = 0)
               THEN
                  RAISE_APPLICATION_ERROR (
                     -20101,
                     'Impossivel confirmar a nota. Financeiro com o Numero de nota igual a zero.');
               END IF;
            END IF;
         END IF;
      END IF;

      IF     (P_TIPMOV <> 'V' OR P_VENCFRETE IS NOT NULL)
         AND (NVL (P_NUNOTAPEDFRET, 0) = 0)
         AND (P_TIPFRETE = 'N')
         AND (P_VLRFRETE > 0)
         AND (P_CODPARCTRANSP <> 0)
      THEN
         SELECT SUM (VLRDESDOB)
           INTO P_SOMAFIN
           FROM TGFFIN
          WHERE NUNOTA = P_NUNOTA AND DESDOBDUPL = 'F';

         --Se ORIGEM em estoque e @SOMAFIN eh nulo e @VLRFRETE não eh nulo logo eh frete de Multiplas Notas
         IF P_SOMAFIN IS NULL
         THEN
            SELECT SUM (FNF.VLRFRETE)
              INTO P_SOMAFIN
              FROM TGFFNF FNF
             WHERE FNF.NUNOTA = P_NUNOTA
                   AND EXISTS(SELECT 1 FROM TGFFIN FIN 
                              WHERE FIN.ORIGEM = 'E' AND FIN.NUNOTA = FNF.NUNOTA);
         END IF;


         IF (NVL(P_SOMAFIN, 0) > 0 OR P_TIPMOV IN ('V','C','D','T')) AND (P_SOMAFIN <> P_VLRFRETE)
         THEN
            RAISE_APPLICATION_ERROR (
               -20101,
               'Nota nao confirmada. Lancamento do Frete no Financeiro, diferente do frete na nota.');
         END IF;
      END IF;
   END;
END;
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 09/03/2018 12:50:41
Num.Script: 49404-0-1000
Nro. O.S. : 1135429
Nome      : INSERE - THOOBJ - 4940300
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE STP_CONFIRMANOTA2
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210003
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'STP_CONFIRMANOTA2' NOMEOBJ, 49403 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, 'c3268436f1c610a04fd2a491d78152f4' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'STP_CONFIRMANOTA2' and THO.hashcode = 'c3268436f1c610a04fd2a491d78152f4')
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 16/04/2018 10:14:43
Num.Script: 49425-0-0
Nro. O.S. : 1134466
Nome      : Alterar - SNK_GET_CTACTB_CADASTROS_EFD
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - SNK_GET_CTACTB_CADASTROS_EFD
NomeObjeto: SNK_GET_CTACTB_CADASTROS_EFD
TipoObjeto: FUNCTION
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210003
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE FUNCTION SNK_GET_CTACTB_CADASTROS_EFD (
   P_REGISTRO      VARCHAR2,
   P_CODEMP        NUMBER,
   P_CODPROD       NUMBER,
   P_CODNAT        NUMBER,
   P_CODTIPOPER    NUMBER,
   P_DHTIPOPER     DATE,
   P_USOPROD       VARCHAR2)
   RETURN VARCHAR2
AS
   P_CODCTACTB        TCBPLA.CODCTACTB%TYPE := NULL;
   P_RESULT           TCBPLA.CTACTB%TYPE := NULL;
   P_GRUPO_NATUREZA   VARCHAR2 (100) := ' ';
BEGIN
   IF P_REGISTRO IN
            ('A170',
             'C170',
             'C191',
             'C195',
             'C396',
             'C481',
             'C485',
             'C501',
             'C505',
             'F100_NOTA',
             'F100_FINANCEIRO')
   THEN
      P_GRUPO_NATUREZA := ',1,2,3,4,6,7,8,9,';
   ELSIF P_REGISTRO IN
               ('C175',
                'C181',
                'C185',
                'C381',
                'C385',
                'C491',
                'C495',
                'C810',
                'C870')
   THEN
      P_GRUPO_NATUREZA := ',1,2,';
   ELSIF P_REGISTRO IN ('D100', 'D101', 'D105')
   THEN
      P_GRUPO_NATUREZA := ',3,5,6,7,8,9,11,';
   ELSIF P_REGISTRO IN ('D201', 'D205', 'D601', 'D605')
   THEN
      P_GRUPO_NATUREZA := ',3,';
   ELSIF P_REGISTRO IN ('D501', 'D505')
   THEN
      P_GRUPO_NATUREZA := ',6,7,';
   ELSIF P_REGISTRO IN ('F500', 'F510', 'F525', 'F550', 'F560', '1900')
   THEN
      P_GRUPO_NATUREZA := ',1,2,3,';
   ELSIF P_REGISTRO IN ('F100_MULTA', 'F100_JURO', 'F100_DESCONTO')
   THEN
      P_GRUPO_NATUREZA := ',1,2,6,7,12,13,';
   ELSIF P_REGISTRO = 'F120'
   THEN 
      P_GRUPO_NATUREZA := ',10,';
   ELSIF P_REGISTRO = 'F130'
   THEN
      P_GRUPO_NATUREZA := ',11,';
   ELSE
      P_GRUPO_NATUREZA := ' ';
   END IF;

   IF NVL (P_CODPROD, 0) <> 0
   THEN
      IF NVL (P_USOPROD, 'R') = 'S'
      THEN
         BEGIN
            SELECT CODCTACTBEFD
              INTO P_CODCTACTB
              FROM TGFSEM PEM
             WHERE CODPROD = P_CODPROD AND CODEMP = P_CODEMP
                   AND EXISTS
                         (SELECT 1
                            FROM TCBPLA PLA
                           WHERE PLA.CODCTACTB = CODCTACTBEFD
                                 AND INSTR (P_GRUPO_NATUREZA,
                                            ',' || PLA.NATUREZAEFD || ',') >
                                       0);
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               P_CODCTACTB := NULL;
         END;
      ELSE
         BEGIN
            SELECT CODCTACTBEFD
              INTO P_CODCTACTB
              FROM TGFPEM PEM
             WHERE CODPROD = P_CODPROD AND CODEMP = P_CODEMP
                   AND EXISTS
                         (SELECT 1
                            FROM TCBPLA PLA
                           WHERE PLA.CODCTACTB = CODCTACTBEFD
                                 AND INSTR (P_GRUPO_NATUREZA,
                                            ',' || PLA.NATUREZAEFD || ',') >
                                       0);
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               P_CODCTACTB := NULL;
         END;
      END IF;

      IF P_CODCTACTB IS NULL
      THEN
         BEGIN
            SELECT CODCTACTBEFD
              INTO P_CODCTACTB
              FROM TGFPRO
             WHERE CODPROD = P_CODPROD
                   AND EXISTS
                         (SELECT 1
                            FROM TCBPLA PLA
                           WHERE PLA.CODCTACTB = CODCTACTBEFD
                                 AND INSTR (P_GRUPO_NATUREZA,
                                            ',' || PLA.NATUREZAEFD || ',') >
                                       0);
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               P_CODCTACTB := NULL;
         END;
      END IF;

      IF P_CODCTACTB IS NULL
      THEN
         BEGIN
            SELECT GEM.CODCTACTBEFD
              INTO P_CODCTACTB
              FROM TGFPRO PRO INNER JOIN TGFGEM GEM
                      ON GEM.CODGRUPOPROD = PRO.CODGRUPOPROD
             WHERE PRO.CODPROD = P_CODPROD AND GEM.CODEMP = P_CODEMP
                   AND EXISTS
                         (SELECT 1
                            FROM TCBPLA PLA
                           WHERE PLA.CODCTACTB = GEM.CODCTACTBEFD
                                 AND INSTR (P_GRUPO_NATUREZA,
                                            ',' || PLA.NATUREZAEFD || ',') >
                                       0);
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               P_CODCTACTB := NULL;
         END;
      END IF;

      IF P_CODCTACTB IS NULL
      THEN
         BEGIN
            SELECT GRU.CODCTACTBEFD
              INTO P_CODCTACTB
              FROM TGFPRO PRO INNER JOIN TGFGRU GRU
                      ON GRU.CODGRUPOPROD = PRO.CODGRUPOPROD
             WHERE PRO.CODPROD = P_CODPROD
                   AND EXISTS
                         (SELECT 1
                            FROM TCBPLA PLA
                           WHERE PLA.CODCTACTB = GRU.CODCTACTBEFD
                                 AND INSTR (P_GRUPO_NATUREZA,
                                            ',' || PLA.NATUREZAEFD || ',') >
                                       0);
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               P_CODCTACTB := NULL;
         END;
      END IF;
   END IF;


   IF P_CODCTACTB IS NULL AND NVL (P_CODNAT, 0) <> 0
   THEN
      BEGIN
         SELECT CODCTACTBEFD
           INTO P_CODCTACTB
           FROM TGFNAT
          WHERE CODNAT = P_CODNAT
                AND EXISTS
                      (SELECT 1
                         FROM TCBPLA PLA
                        WHERE PLA.CODCTACTB = CODCTACTBEFD
                              AND INSTR (P_GRUPO_NATUREZA,
                                         ',' || PLA.NATUREZAEFD || ',') > 0);
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            P_CODCTACTB := NULL;
      END;
   END IF;

   IF P_CODCTACTB IS NULL AND NVL (P_CODTIPOPER, 0) <> 0
   THEN
      BEGIN
         SELECT CODCTACTBEFD
           INTO P_CODCTACTB
           FROM TGFTOP
          WHERE CODTIPOPER = P_CODTIPOPER AND DHALTER = P_DHTIPOPER
                AND EXISTS
                      (SELECT 1
                         FROM TCBPLA PLA
                        WHERE PLA.CODCTACTB = CODCTACTBEFD
                              AND INSTR (P_GRUPO_NATUREZA,
                                         ',' || PLA.NATUREZAEFD || ',') > 0);
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            P_CODCTACTB := NULL;
      END;
   END IF;

   IF P_CODCTACTB IS NOT NULL
   THEN
      BEGIN
         SELECT CTACTB
           INTO P_RESULT
           FROM TCBPLA
          WHERE CODCTACTB = P_CODCTACTB;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            P_RESULT := NULL;
      END;
   END IF;

   RETURN P_RESULT;
END;
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 16/04/2018 10:14:43
Num.Script: 49426-0-1000
Nro. O.S. : 1134466
Nome      : INSERE - THOOBJ - 4942500
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_GET_CTACTB_CADASTROS_EFD
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210003
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_GET_CTACTB_CADASTROS_EFD' NOMEOBJ, 49425 NUMSCRIPT, SYSDATE DTALTER, 'FUNCTION' TIPO, '1d209372f9b92715b3054b32ebb2faa8' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_GET_CTACTB_CADASTROS_EFD' and THO.hashcode = '1d209372f9b92715b3054b32ebb2faa8')
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 08/03/2018 16:45:57
Num.Script: 50456-0-0
Nro. O.S. : 1133882
Nome      : Cria - TPRPRC PERCDESVIOSUP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: PERCDESVIOSUP
TipoObjeto: COLUMN
NomeTabela: TPRPRC
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210003
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TPRPRC ADD PERCDESVIOSUP FLOAT
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 08/03/2018 16:45:57
Num.Script: 50457-0-0
Nro. O.S. : 1133882
Nome      : Cria - TPRPRC PERCDESVIOINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: PERCDESVIOINF
TipoObjeto: COLUMN
NomeTabela: TPRPRC
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210003
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TPRPRC ADD PERCDESVIOINF FLOAT
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 16/04/2018 17:17:44
Num.Script: 50876-0-0
Nro. O.S. : 1041624
Nome      : Cria - TSICID MAXNOTALOTENFSE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: MAXNOTALOTENFSE
TipoObjeto: COLUMN
NomeTabela: TSICID
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210003
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TSICID ADD MAXNOTALOTENFSE DECIMAL(5, 0)
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 13/03/2018 15:12:30
Num.Script: 50913-0-0
Nro. O.S. : 1048729
Nome      : Cria - TGFUSE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TGFUSE
NomeObjeto: TGFUSE
TipoObjeto: TABLE
NomeTabela: TGFUSE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210003
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TGFUSE(
   CODTIPOPER             NUMBER(5) NOT NULL,
   CODEMP                   NUMBER(5) NOT NULL,
   CODTIPOPERSEP        NUMBER(5) NOT NULL,
   USOSEPARACAO         VARCHAR2(1) NOT NULL,
   SERIESEPARACAO       VARCHAR2(3),
   CONSTRAINT PK_TGFUSE PRIMARY KEY(CODTIPOPER, CODEMP),
   CONSTRAINT FK_TGFUSE_TSIEMP FOREIGN KEY(CODEMP) REFERENCES TSIEMP(CODEMP),
   CONSTRAINT CKC_USOSEPARACAO_TGFUSE CHECK (USOSEPARACAO IN ('M','C','R','S','T','V', 'F', 'B', 'D', 'I', ' '))
)
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 13/03/2018 15:12:30
Num.Script: 50913-0-1
Nro. O.S. : 1048729
Nome      : Cria - TGFUSE CODTIPOPERPRINC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TGFUSE CODTIPOPERPRINC
NomeObjeto: CODTIPOPERPRINC
TipoObjeto: COLUMN
NomeTabela: TGFUSE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210003
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFUSE ADD CODTIPOPERPRINC NUMBER(5)
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 13/03/2018 15:12:30
Num.Script: 50914-0-0
Nro. O.S. : 1048729
Nome      : Cria - TGFUSE SERIEPRINC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TGFUSE SERIEPRINC
NomeObjeto: SERIEPRINC
TipoObjeto: COLUMN
NomeTabela: TGFUSE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210003
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFUSE ADD SERIEPRINC VARCHAR2(3)
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 13/03/2018 15:12:30
Num.Script: 50915-0-0
Nro. O.S. : 1048729
Nome      : Cria - TGFUSE AGRUPFINNOTAS
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TGFUSE AGRUPFINNOTAS
NomeObjeto: AGRUPFINNOTAS
TipoObjeto: COLUMN
NomeTabela: TGFUSE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210003
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFUSE ADD AGRUPFINNOTAS VARCHAR2(1)
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 13/03/2018 15:12:30
Num.Script: 50916-0-0
Nro. O.S. : 1048729
Nome      : Cria - TGFCAB AGRUPFINNOTA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TGFCAB AGRUPFINNOTA
NomeObjeto: AGRUPFINNOTA
TipoObjeto: COLUMN
NomeTabela: TGFCAB
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210003
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFCAB ADD AGRUPFINNOTA VARCHAR2(1)
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 20/04/2018 15:39:33
Num.Script: 51450-0-0
Nro. O.S. : 987783
Nome      : Cria - TSIRMU DTINIPERIODO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo 
NomeObjeto: DTINIPERIODO
TipoObjeto: COLUMN
NomeTabela: TSIRMU
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210003
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TSIRMU ADD DTINIPERIODO DATE NOT NULL
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 09/03/2018 12:02:13
Num.Script: 51461-0-0
Nro. O.S. : 1149326
Nome      : Cria - TPRMPE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TPRMPE
NomeObjeto: TPRMPE
TipoObjeto: TABLE
NomeTabela: TPRMPE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210003
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TPRMPE(
    CODMPE         NUMBER(10)               NOT NULL
    ,DESCRICAO     VARCHAR2(500)            NOT NULL
    ,ATIVO         VARCHAR2(1)  DEFAULT 'S' NOT NULL
    ,CONSTRAINT CKC_ATIVO_TPRMPE CHECK (ATIVO IN('N', 'S'))
    ,CONSTRAINT PK_TPRMPE PRIMARY KEY (CODMPE)
)
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 09/03/2018 12:02:13
Num.Script: 51462-0-0
Nro. O.S. : 1149326
Nome      : Cria - TPRAPA CODMPE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: CODMPE
TipoObjeto: COLUMN
NomeTabela: TPRAPA
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210003
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TPRAPA ADD CODMPE NUMBER(10)
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 07/03/2018 10:26:56
Num.Script: 51512-0-0
Nro. O.S. : 1151287
Nome      : Cria - TSICID METARREDVLRISS
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: METARREDVLRISS
TipoObjeto: COLUMN
NomeTabela: TSICID
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210003
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TSICID ADD METARREDVLRISS VARCHAR2(1)';
   EXECUTE IMMEDIATE 'ALTER TABLE TSICID ADD  CONSTRAINT CKC_METARREDVLRISS_TSICID CHECK (METARREDVLRISS IN (NULL,''A'',''C'') OR METARREDVLRISS IS NULL )';
END;
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 07/03/2018 10:26:56
Num.Script: 51513-0-0
Nro. O.S. : 1151287
Nome      : Script - TSICID
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - TSICID
NomeObjeto: TSICID
TipoObjeto: TABLE
NomeTabela: TSICID
Executar  : SE_EXISTIR
Ocorrencia: 4210003
Autor     : RHAMON
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
    P_COUNT     NUMBER(05);
BEGIN

   SELECT COUNT(*)
   INTO P_COUNT
   FROM TSISCR
   WHERE NME_SCRIPT = '1151287';
    
    IF P_COUNT = 0 THEN
        BEGIN
            EXECUTE IMMEDIATE 'INSERT INTO TSISCR VALUES (''1151287'', ''UPDATE CAMPO METARREDVLRISS'')';
        
            EXECUTE IMMEDIATE 'UPDATE TSICID SET METARREDVLRISS = ''A'' WHERE CODMUNFIS = 5201405';

        EXCEPTION
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001,SQLERRM);
        END;
    END IF;

END;
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 10/03/2018 18:33:46
Num.Script: 51618-0-0
Nro. O.S. : 1090992
Nome      : Drop - CKC_REGIMEESPTRIBISS_TGFEMP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - CKC_REGIMEESPTRIBISS_TGFEMP
NomeObjeto: CKC_REGIMEESPTRIBISS_TGFEMP
TipoObjeto: CONSTRAINT
NomeTabela: TGFEMP
Executar  : SE_EXISTIR
Ocorrencia: 4210003
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFEMP DROP CONSTRAINT CKC_REGIMEESPTRIBISS_TGFEMP
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 10/03/2018 18:33:46
Num.Script: 51619-0-0
Nro. O.S. : 1090992
Nome      : Cria - CKC_REGIMEESPTRIBISS_TGFEMP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - CKC_REGIMEESPTRIBISS_TGFEMP
NomeObjeto: CKC_REGIMEESPTRIBISS_TGFEMP
TipoObjeto: CONSTRAINT
NomeTabela: TGFEMP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210003
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFEMP ADD CONSTRAINT CKC_REGIMEESPTRIBISS_TGFEMP CHECK ( REGIMEESPTRIBISS IN (NULL,'0','1','2','3','4','5','6','7','''8'', ''9'',''A'',''C','E','F','K','N','T','G','H'))
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 05/03/2018 10:58:13
Num.Script: 51622-0-0
Nro. O.S. : 1050801
Nome      : Script - TGWTTR
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - TGWTTR
NomeObjeto: TGWTTR
TipoObjeto: TABLE
NomeTabela: Script - TGWTTR
Executar  : SE_EXISTIR
Ocorrencia: 4210003
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
    P_COUNT     NUMBER(05);
BEGIN
    BEGIN
        SELECT COUNT(*) INTO P_COUNT
        FROM TGWTTR
        WHERE CODTAREFA = 29;
    EXCEPTION
        WHEN OTHERS THEN
            P_COUNT := 0;
    END;
    
    IF P_COUNT = 0 THEN
        EXECUTE IMMEDIATE 'Insert into TGWTTR  (CODTAREFA, DESCRTAREFA) Values  (29, ''Registro de Conferência'')';
    END IF;
    
END;
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 05/03/2018 10:58:13
Num.Script: 51623-0-0
Nro. O.S. : 1050801
Nome      : Cria - TGFEMP USARECPARCIAL
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: USARECPARCIAL
TipoObjeto: COLUMN
NomeTabela: TGFEMP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210003
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFEMP ADD USARECPARCIAL VARCHAR2(1) DEFAULT 'N'
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 05/03/2018 10:58:13
Num.Script: 51624-0-0
Nro. O.S. : 1050801
Nome      : Cria - TGFTOP USARECPARCIAL
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: USARECPARCIAL
TipoObjeto: COLUMN
NomeTabela: TGFTOP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210003
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFTOP ADD USARECPARCIAL VARCHAR2(1) DEFAULT 'N'
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 05/03/2018 10:58:13
Num.Script: 51625-0-0
Nro. O.S. : 1050801
Nome      : Cria - TGWRCON
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TGWRCON
NomeObjeto: TGWRCON
TipoObjeto: TABLE
NomeTabela: TGWRCON
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210003
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TGWRCON
(
  UMA                                       VARCHAR2(30)                     NOT NULL,
  CODPROD                             NUMBER(10)                        NOT NULL,
  CODBARRA                            VARCHAR2(25)                      NOT NULL,
  CONTROLE                            VARCHAR2(11)                  DEFAULT ' '                   NOT NULL,
  NURECEBIMENTO                  NUMBER(10)                     NOT NULL,
  QTDRECEBIDAVOLPAD         NUMBER(13,4),
  QTDAVARIAVOLPAD              NUMBER(13,4),
  DHINI                                    DATE                           DEFAULT SYSDATE               NOT NULL,
  DHFIM                                   DATE,
  CODUSUCONF                      NUMBER(5),
  RECONTAGEM                      VARCHAR2(1)              DEFAULT 'N' NOT NULL,
  NUTAREFA                            NUMBER(10),
  FECHADO                             VARCHAR2(1)              DEFAULT 'N' NOT NULL,
  CONSTRAINT PK_TGWRCON PRIMARY KEY (UMA, CODPROD, CODBARRA, CONTROLE, NURECEBIMENTO),
  CONSTRAINT FK_TGWRCON_CODUSUCONF_TSIUSU FOREIGN KEY (CODUSUCONF) REFERENCES TSIUSU (CODUSU),
  CONSTRAINT FK_TGWRCON_CODPROD_TGFPRO  FOREIGN KEY (CODPROD)  REFERENCES TGFPRO (CODPROD),
  CONSTRAINT FK_TGWRCON_NUREC_TGWREC  FOREIGN KEY (NURECEBIMENTO)  REFERENCES TGWREC (NURECEBIMENTO)
)
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 21/03/2018 11:12:40
Num.Script: 51643-0-0
Nro. O.S. : 1098532
Nome      : Ajusta - TFPFOR CODFORM 9002
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Ajusta - TFPFOR CODFORM 9002
NomeObjeto: CODFORM
TipoObjeto: COLUMN
NomeTabela: TFPFOR
Executar  : SE_EXISTIR
Ocorrencia: 4210003
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
  P_CODFORMULA      TFPFOR.CODFORM%TYPE;
  P_DESCRFORMULA    TFPFOR.DESCRFORM%TYPE;
  P_DESCRFORMNOVO   TFPFOR.DESCRFORM%TYPE;
  P_FORMULA         VARCHAR2(4000);
  P_FORMULANOVO     VARCHAR2(4000);
  P_CODFORMIND      VARCHAR2(4000);
  P_CODFORMINDNOVO  VARCHAR2(4000);
  P_SANKHYA         TFPFOR.SANKHYA%TYPE;
BEGIN
  
  P_CODFORMULA := 9002;
  
  BEGIN
    SELECT FORMULA, DESCRFORM, CODFORMIND, SANKHYA
    INTO P_FORMULA, P_DESCRFORMULA, P_CODFORMIND, P_SANKHYA
    FROM TFPFOR
    WHERE CODFORM = P_CODFORMULA;
  EXCEPTION WHEN NO_DATA_FOUND THEN
    P_FORMULA := 'A';
    P_CODFORMIND := NULL;
    P_DESCRFORMULA := NULL;
    P_SANKHYA := 'S'; 
  END;
  
  IF P_SANKHYA = 'N' THEN
    RETURN;
  END IF;
  
  P_DESCRFORMNOVO := 'BASE 1904 DATA DE PAGAMENTO';
  P_FORMULANOVO := 'IF((&FOLHACPL = ''S'') AND (&TIPFOL <> ''O''),0,IF((&DataPagamento >= &REFERE) AND(&DataPagamento <= (FSOMAMES(&REFERE,1) -1)) AND ((MES(DTOC(&DataPagamento)) =MES(DTOC(&REFERE))) AND (&TIPFOL = ''N'')), IF(&TIPFOL = ''A'',&E1916, &E1904 + &E1907+ &E510 + FBEDTPAG(queFuncionario.CODEMP, queFuncionario.CODFUNC,&DataPagamento, ''650,1904'') + MemSetVar(''varTransfIRRF'',FBEDTPAG(QueFuncionario.CODEMPORIG, QueFuncionario.CODFUNCORIG, &DataPagamento, ''1904'')+ FBEDTPAG(QueFuncionario.CODEMPORIG, QueFuncionario.CODFUNCORIG,&DataPagamento, ''1907''))), IF(&TIPFOL = ''A'', IF((FBE(QueFuncionario.CODEMP,QueFuncionario.CODFUNC,Fsomames(&Refere,-1),''A'',''650'') <= 0)AND (FBE(QueFuncionario.CODEMPORIG,QueFuncionario.CODFUNCORIG,Fsomames(&Refere,-1),''A'',''650'') <= 0),FBEDTPAG(queFuncionario.CODEMP,queFuncionario.CODFUNC, &DataPagamento, ''1904''), FBEDTPAG(queFuncionario.CODEMP, queFuncionario.CODFUNC, &DataPagamento, ''1904'') +FBEDTPAG(queFuncionario.CODEMP, queFuncionario.CODFUNC, &DataPagamento, ''650'')+FBEDTPAG(QueFuncionario.CODEMPORIG, QueFuncionario.CODFUNCORIG,&DataPagamento, ''1904'')) + &E1916, &E1904 + &E1907 + &E510 +MemGetVar(''varTransfIRRF'') + FBEDTPAG(queFuncionario.CODEMP, queFuncionario.CODFUNC,&DataPagamento, ''1916''))))';
  P_CODFORMINDNOVO := '';
  
  IF P_FORMULA = 'A' THEN
    INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
      VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
             'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO);
    
    IF P_CODFORMINDNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO);
    END IF;
    
    IF P_DESCRFORMNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO);
    END IF;
    
    INSERT INTO TFPFOR (CODFORM, DESCRFORM, SANKHYA, FORMULA, CODFORMIND)
      VALUES(P_CODFORMULA, P_DESCRFORMNOVO, 'S', P_FORMULANOVO, P_CODFORMINDNOVO);
    
  ELSIF (P_FORMULANOVO <> P_FORMULA OR 
         NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') OR 
         NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z')) 
  THEN
    
    IF P_FORMULANOVO <> P_FORMULA THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO, P_FORMULA);
    END IF;
    
    IF NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO, P_CODFORMIND);
    END IF;
    
    IF NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO, P_DESCRFORMULA);
    END IF;
    
    UPDATE TFPFOR
    SET FORMULA = P_FORMULANOVO
    , DESCRFORM = P_DESCRFORMNOVO
    , CODFORMIND = P_CODFORMINDNOVO
    , FORMULANTERIOR = CASE WHEN FORMULA <> P_FORMULANOVO THEN P_FORMULA ELSE FORMULANTERIOR END
    , DTALTER = SYSDATE
    , CODUSU = 0
    WHERE CODFORM = P_CODFORMULA
    AND SANKHYA = 'S';
    
  END IF;
  
END;
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 08/03/2018 16:45:57
Num.Script: 51647-0-0
Nro. O.S. : 1133882
Nome      : Cria - TPRESR ESTOQUEPERDA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: ESTOQUEPERDA
TipoObjeto: COLUMN
NomeTabela: TPRESR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210003
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TPRESR ADD ESTOQUEPERDA FLOAT DEFAULT 0
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 08/03/2018 16:45:57
Num.Script: 51650-0-0
Nro. O.S. : 1133882
Nome      : Cria - TPRMER QTDPERDA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: QTDPERDA
TipoObjeto: COLUMN
NomeTabela: TPRMER
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210003
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TPRMER ADD QTDPERDA FLOAT DEFAULT 0
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 08/03/2018 16:45:57
Num.Script: 51655-0-0
Nro. O.S. : 1133882
Nome      : Alterar - TRG_INC_UPD_TPRMER
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - TRG_INC_UPD_TPRMER
NomeObjeto: TRG_INC_UPD_TPRMER
TipoObjeto: TRIGGER
NomeTabela: TPRMER
Executar  : SE_EXISTIR
Ocorrencia: 4210003
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_INC_UPD_TPRMER
BEFORE INSERT OR UPDATE
ON TPRMER
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
  P_COUNT              NUMBER(5);
  ERROR                EXCEPTION;
  ERRMSG               VARCHAR2(255);
BEGIN
    --validar se os campos de PK ou o sinal est?o sendo modificados
 IF (UPDATING AND 
       ((:OLD.IDRPA <> :NEW.IDRPA) OR 
       (:OLD.IDIPROC <> :NEW.IDIPROC) OR 
       (:OLD.CODPRODPA <> :NEW.CODPRODPA) OR 
       (:OLD.CONTROLEPA <> :NEW.CONTROLEPA) OR 
       (:OLD.CODCPM <> :NEW.CODCPM) OR 
       (:OLD.STATUSEXEC <> :NEW.STATUSEXEC) OR 
       (:OLD.SINAL <> :NEW.SINAL))) THEN
  ERRMSG := 'Alterac?o n?o permitida, o saldo do estoque ficara inconsistente no repositorio.';
  RAISE ERROR;
 END IF; 

 IF INSERTING OR (UPDATING AND (NVL(:NEW.QTD, 0) <> NVL(:OLD.QTD, 0))) THEN
  SELECT COUNT(1)
  INTO P_COUNT
  FROM TPRESR
  WHERE IDRPA = :NEW.IDRPA
   AND IDIPROC = :NEW.IDIPROC
   AND CODPRODPA = :NEW.CODPRODPA
   AND CONTROLEPA = :NEW.CONTROLEPA
   AND CODCPM = :NEW.CODCPM
   AND STATUSEXEC = :NEW.STATUSEXEC;

  IF (P_COUNT = 0) OR (P_COUNT IS NULL) THEN
   INSERT INTO TPRESR(IDRPA, IDIPROC, CODPRODPA, CONTROLEPA, CODCPM, STATUSEXEC, ESTOQUE, ESTOQUEPERDA)
   VALUES (:NEW.IDRPA, :NEW.IDIPROC, :NEW.CODPRODPA, :NEW.CONTROLEPA, :NEW.CODCPM, :NEW.STATUSEXEC, :NEW.QTD * :NEW.SINAL, :NEW.QTDPERDA);
  ELSE
   UPDATE TPRESR SET
   ESTOQUE = ESTOQUE + (((NVL(:NEW.QTD, 0) + NVL(:NEW.QTDPERDA, 0)) - (NVL(:OLD.QTD, 0) + NVL(:OLD.QTDPERDA, 0))) * :NEW.SINAL),
   ESTOQUEPERDA = NVL(ESTOQUEPERDA, 0) + NVL(:NEW.QTDPERDA, 0)
   WHERE IDRPA = :NEW.IDRPA
    AND IDIPROC = :NEW.IDIPROC
    AND CODPRODPA = :NEW.CODPRODPA
    AND CONTROLEPA = :NEW.CONTROLEPA
    AND CODCPM = :NEW.CODCPM
    AND STATUSEXEC = :NEW.STATUSEXEC;
    
   SELECT COUNT(1)
   INTO P_COUNT
   FROM TPRESR
   WHERE IDRPA = :NEW.IDRPA
    AND IDIPROC = :NEW.IDIPROC
    AND CODPRODPA = :NEW.CODPRODPA
    AND CONTROLEPA = :NEW.CONTROLEPA
    AND CODCPM = :NEW.CODCPM
    AND STATUSEXEC = :NEW.STATUSEXEC
    AND ESTOQUE = 0
    AND ESTOQUEPERDA = 0;

   IF (P_COUNT > 0) THEN 
    DELETE FROM TPRESR
    WHERE IDRPA = :NEW.IDRPA
     AND IDIPROC = :NEW.IDIPROC
     AND CODPRODPA = :NEW.CODPRODPA
     AND CONTROLEPA = :NEW.CONTROLEPA
     AND CODCPM = :NEW.CODCPM
     AND STATUSEXEC = :NEW.STATUSEXEC;
   END IF;       
  END IF;
 END IF; 
EXCEPTION WHEN ERROR THEN
   RAISE_APPLICATION_ERROR(-20101, ERRMSG); 
END;
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 08/03/2018 16:45:57
Num.Script: 51656-0-1000
Nro. O.S. : 1133882
Nome      : INSERE - THOOBJ - 5165500
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_INC_UPD_TPRMER
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210003
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_INC_UPD_TPRMER' NOMEOBJ, 51655 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, 'a79db2dcab205ae42d8d48f790f804a3' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_INC_UPD_TPRMER' and THO.hashcode = 'a79db2dcab205ae42d8d48f790f804a3')
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 06/03/2018 12:29:04
Num.Script: 51663-0-0
Nro. O.S. : 1149902
Nome      : Alterar - SNK_FIX_IMP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - SNK_FIX_IMP
NomeObjeto: SNK_FIX_IMP
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210003
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_FIX_IMP(P_NUNOTA NUMBER)
AS
    P_DIF_ICMS         FLOAT;
    P_AJUSTE_ICMS      FLOAT;
    P_DIF_FCP          FLOAT;
    P_AJUSTE_FCP       FLOAT;
    P_DIF_VLRDIFALDEST FLOAT;
    P_AJUSTE_DIFALDEST FLOAT;
    P_DIF_VLRDIFALREM  FLOAT;
    P_AJUSTE_DIFALREM  FLOAT;
    P_DIFERIMENTO      NUMBER(10) := 51;
    P_ESTVALFCPITEM    VARCHAR2(100);
    P_AJUSTARFCP       VARCHAR2(1);
    P_INDEX_UF         NUMBER(5);
    P_ESTVALDIFALITEM    VARCHAR2(100);
    P_AJUSTARDIFAL       VARCHAR2(1);
    P_UF_EMP           VARCHAR2(2);
BEGIN

    SELECT UFE.UF INTO P_UF_EMP
    FROM TGFCAB CAB
    INNER JOIN TSIEMP EMP ON EMP.CODEMP = CAB.CODEMP
    INNER JOIN TSICID CIDE ON CIDE.CODCID = EMP.CODCID
    INNER JOIN TSIUFS UFE ON UFE.CODUF = CIDE.UF
    WHERE NUNOTA = P_NUNOTA;

    P_AJUSTARFCP := 'S';
    
    BEGIN
        SELECT TEXTO INTO P_ESTVALFCPITEM
        FROM TSIPAR WHERE CHAVE = 'ESTVALFCPITEM';
        
        P_INDEX_UF := INSTR(P_ESTVALFCPITEM, P_UF_EMP);
        
        IF P_INDEX_UF > 0 THEN
            P_AJUSTARFCP := 'N';
        END IF;    
    EXCEPTION WHEN NO_DATA_FOUND THEN
        P_AJUSTARFCP := 'S';
    END;
    
    P_AJUSTARDIFAL := 'S';
    
    BEGIN
        SELECT TEXTO INTO P_ESTVALDIFALITEM
        FROM TSIPAR WHERE CHAVE = 'ESTVALDIFALITEM';
        
        P_INDEX_UF := INSTR(P_ESTVALDIFALITEM, P_UF_EMP);
        
        IF P_INDEX_UF > 0 THEN
            P_AJUSTARDIFAL := 'N';
        END IF;    
    EXCEPTION WHEN NO_DATA_FOUND THEN
        P_AJUSTARDIFAL := 'S';
    END;
    
    FOR CUR_TOTAIS IN (SELECT SEQUENCIA
                               , SUM(NVL(VALOR, 0)) AS VALOR
                               , ROUND(SUM(NVL(BASERED, 0)) * MIN(NVL(ALIQUOTA, 0)) / 100, 2) AS CALC_VALOR
                               , SUM(NVL(VLRFCP, 0)) AS VLRFCP
                               , ROUND(SUM(CASE WHEN TIPCALCDIFAL IS NULL THEN NVL(BASE, 0) ELSE NVL(BASEFCP, BASE) END) * MIN(NVL(PERCFCP, 0)) / 100, 2) AS CALC_VLRFCP
                               , CASE WHEN MIN(NVL(ALIQPARADIFAL, 0)) > 0 THEN SUM(NVL(VLRDIFALDEST, 0)) ELSE 0 END AS VLRDIFALDEST
                               , ROUND(SUM(CASE WHEN TIPCALCDIFAL IS NULL THEN NVL(BASE, 0) ELSE NVL(BASEDIFAL, BASE) END) * 
                                      (CASE WHEN MIN(NVL(ALIQPARADIFAL, 0)) > 0 THEN MIN(NVL(ALIQPARADIFAL, 0)) ELSE 0 END / 100) *
                                      (MIN(NVL(PERCPARTDIFAL, 0)) / 100), 2) AS CALC_VLRDIFALDEST
                               , CASE WHEN MIN(NVL(ALIQPARADIFAL, 0)) > 0 THEN SUM(NVL(VLRDIFALREM, 0)) ELSE 0 END AS VLRDIFALREM
                               , ROUND(SUM(CASE WHEN TIPCALCDIFAL IS NULL THEN NVL(BASE, 0) ELSE NVL(BASEDIFAL, BASE) END) * 
                                      (CASE WHEN MIN(NVL(ALIQPARADIFAL, 0)) > 0 THEN MIN(NVL(ALIQPARADIFAL, 0)) ELSE 0 END / 100) * 
                                      (MIN(NVL(100 - PERCPARTDIFAL, 0)) / 100), 2) AS CALC_VLRDIFALREM
                          FROM TGFDIN
                          WHERE NUNOTA = P_NUNOTA
                            AND CODIMP = 1
                            AND NVL(ALIQUOTA, 0) > 0
                            AND NVL(VALOR, 0) > 0
                            AND NOT EXISTS(SELECT 1
                                           FROM TGFITE 
                                           WHERE NUNOTA = TGFDIN.NUNOTA
                                             AND SEQUENCIA = TGFDIN.SEQUENCIA
                                             AND CODTRIB = P_DIFERIMENTO)
                          GROUP BY SEQUENCIA
                          HAVING COUNT(1) > 1 
                             AND (SUM(NVL(VALOR, 0)) <> ROUND(SUM(NVL(BASERED, 0)) * MIN(NVL(ALIQUOTA, 0)) / 100, 2) OR 
                                  SUM(NVL(VLRFCP, 0)) <> ROUND(SUM(CASE WHEN TIPCALCDIFAL IS NULL THEN NVL(BASE, 0) ELSE NVL(BASEDIFAL, BASE) END) * MIN(NVL(PERCFCP, 0)) / 100, 2) OR
                                  CASE WHEN MIN(NVL(ALIQPARADIFAL, 0)) > 0 THEN SUM(NVL(VLRDIFALDEST, 0)) ELSE 0 END <> ROUND(SUM(CASE WHEN TIPCALCDIFAL IS NULL THEN NVL(BASE, 0) ELSE NVL(BASEDIFAL, BASE) END) * 
                                                                                                                        (CASE WHEN MIN(NVL(ALIQPARADIFAL, 0)) > 0 THEN MIN(NVL(ALIQPARADIFAL, 0)) ELSE 0 END) *
                                                                                                                        (MIN(NVL(PERCPARTDIFAL, 0)) / 100), 2) OR
                                  CASE WHEN MIN(NVL(ALIQPARADIFAL, 0)) > 0 THEN SUM(NVL(VLRDIFALREM, 0)) ELSE 0 END <> ROUND(SUM(CASE WHEN TIPCALCDIFAL IS NULL THEN NVL(BASE, 0) ELSE NVL(BASEDIFAL, BASE) END) * 
                                                                                                                        (CASE WHEN MIN(NVL(ALIQPARADIFAL, 0)) > 0 THEN MIN(NVL(ALIQPARADIFAL, 0)) ELSE 0 END) * 
                                                                                                                        (MIN(NVL(100 - PERCPARTDIFAL, 0)) / 100), 2))
                          ) LOOP
        P_DIF_ICMS := CUR_TOTAIS.CALC_VALOR - CUR_TOTAIS.VALOR;
        
        IF P_AJUSTARFCP = 'N' THEN
            P_DIF_FCP := 0;
        ELSE
            P_DIF_FCP := CUR_TOTAIS.CALC_VLRFCP - CUR_TOTAIS.VLRFCP;
        END IF;

        IF P_AJUSTARDIFAL = 'N' THEN
            P_DIF_VLRDIFALDEST := 0;
            P_DIF_VLRDIFALREM := 0;
        ELSE
            P_DIF_VLRDIFALDEST := CUR_TOTAIS.CALC_VLRDIFALDEST - CUR_TOTAIS.VLRDIFALDEST;
            P_DIF_VLRDIFALREM := CUR_TOTAIS.CALC_VLRDIFALREM - CUR_TOTAIS.VLRDIFALREM;
        END IF;

        IF P_DIF_ICMS < 0 THEN
            P_AJUSTE_ICMS := -0.01;
        ELSIF P_DIF_ICMS > 0 THEN 
            P_AJUSTE_ICMS := 0.01;
        ELSE
            P_AJUSTE_ICMS := 0;
        END IF;

        IF P_DIF_FCP < 0 THEN
            P_AJUSTE_FCP := -0.01;
        ELSIF P_DIF_FCP > 0 THEN 
            P_AJUSTE_FCP := 0.01;
        ELSE 
            P_AJUSTE_FCP := 0; 
        END IF;

        IF P_DIF_VLRDIFALDEST < 0 THEN
            P_AJUSTE_DIFALDEST := -0.01;
        ELSIF P_DIF_VLRDIFALDEST > 0 THEN 
            P_AJUSTE_DIFALDEST := 0.01;
        ELSE 
            P_AJUSTE_DIFALDEST := 0; 
        END IF;

        IF P_DIF_VLRDIFALREM < 0 THEN
            P_AJUSTE_DIFALREM := -0.01;
        ELSIF P_DIF_VLRDIFALREM > 0 THEN 
            P_AJUSTE_DIFALREM := 0.01;
        ELSE 
            P_AJUSTE_DIFALREM := 0; 
        END IF;

        FOR CUR_UPD IN (SELECT CODINC
                           FROM TGFDIN
                           WHERE CODIMP = 1
                             AND SEQUENCIA = CUR_TOTAIS.SEQUENCIA
                             AND NUNOTA = P_NUNOTA
                           ORDER BY VALOR DESC) LOOP

            UPDATE TGFDIN SET VALOR = NVL(VALOR, 0) + P_AJUSTE_ICMS
                            , VLRFCP = NVL(VLRFCP, 0) + P_AJUSTE_FCP
                            , VLRDIFALDEST = NVL(VLRDIFALDEST, 0) + P_AJUSTE_DIFALDEST
                            , VLRDIFALREM = NVL(VLRDIFALREM, 0) + P_AJUSTE_DIFALREM
            WHERE NUNOTA = P_NUNOTA
              AND SEQUENCIA = CUR_TOTAIS.SEQUENCIA
              AND CODINC = CUR_UPD.CODINC
              AND CODIMP = 1;

            P_DIF_ICMS := P_DIF_ICMS - P_AJUSTE_ICMS;
            P_DIF_FCP := P_DIF_FCP - P_AJUSTE_FCP;
            P_DIF_VLRDIFALDEST := P_DIF_VLRDIFALDEST - P_AJUSTE_DIFALDEST;
            P_DIF_VLRDIFALREM := P_DIF_VLRDIFALREM - P_AJUSTE_DIFALREM;
            EXIT WHEN (P_DIF_ICMS = 0 AND P_DIF_FCP = 0 AND P_DIF_VLRDIFALDEST = 0 AND P_DIF_VLRDIFALREM = 0); 
        END LOOP;

    END LOOP;
END;
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 06/03/2018 12:29:04
Num.Script: 51664-0-1000
Nro. O.S. : 1149902
Nome      : INSERE - THOOBJ - 5166300
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_FIX_IMP
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210003
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_FIX_IMP' NOMEOBJ, 51663 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, '511e1c3a34b71b7b1930e5324ec520ae' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_FIX_IMP' and THO.hashcode = '511e1c3a34b71b7b1930e5324ec520ae')
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 08/03/2018 16:45:57
Num.Script: 51672-0-0
Nro. O.S. : 1133882
Nome      : Alterar - TRG_DLT_TPRMER 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - TRG_DLT_TPRMER 
NomeObjeto: TRG_DLT_TPRMER 
TipoObjeto: TRIGGER
NomeTabela: TPRMER
Executar  : SE_EXISTIR
Ocorrencia: 4210003
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_DLT_TPRMER
BEFORE DELETE
ON TPRMER
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
  P_COUNT              NUMBER(5);
BEGIN
 SELECT COUNT(1)
 INTO P_COUNT
 FROM TPRESR
 WHERE IDRPA = :OLD.IDRPA
  AND IDIPROC = :OLD.IDIPROC
  AND CODPRODPA = :OLD.CODPRODPA
  AND CONTROLEPA = :OLD.CONTROLEPA
  AND CODCPM = :OLD.CODCPM
  AND STATUSEXEC = :OLD.STATUSEXEC;

 IF (P_COUNT > 0) THEN
  UPDATE TPRESR SET
  ESTOQUE = ESTOQUE - ((NVL(:OLD.QTD, 0) + NVL(:OLD.QTDPERDA, 0)) * :OLD.SINAL),
  ESTOQUEPERDA = ESTOQUEPERDA - (NVL(:OLD.QTDPERDA, 0) * :OLD.SINAL)
  WHERE IDRPA = :OLD.IDRPA
   AND IDIPROC = :OLD.IDIPROC
   AND CODPRODPA = :OLD.CODPRODPA
   AND CONTROLEPA = :OLD.CONTROLEPA
   AND CODCPM = :OLD.CODCPM
   AND STATUSEXEC = :OLD.STATUSEXEC;

  SELECT COUNT(1)
  INTO P_COUNT
  FROM TPRESR
  WHERE IDRPA = :OLD.IDRPA
   AND IDIPROC = :OLD.IDIPROC
   AND CODPRODPA = :OLD.CODPRODPA
   AND CONTROLEPA = :OLD.CONTROLEPA
   AND CODCPM = :OLD.CODCPM
   AND STATUSEXEC = :OLD.STATUSEXEC
   AND ESTOQUE = 0;

  IF (P_COUNT > 0) THEN 
   DELETE FROM TPRESR
   WHERE IDRPA = :OLD.IDRPA
    AND IDIPROC = :OLD.IDIPROC
    AND CODPRODPA = :OLD.CODPRODPA
    AND CONTROLEPA = :OLD.CONTROLEPA
    AND CODCPM = :OLD.CODCPM
    AND STATUSEXEC = :OLD.STATUSEXEC;
  END IF;
 END IF; 
END;
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 08/03/2018 16:45:57
Num.Script: 51673-0-1000
Nro. O.S. : 1133882
Nome      : INSERE - THOOBJ - 5167200
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_DLT_TPRMER
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210003
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_DLT_TPRMER' NOMEOBJ, 51672 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, 'eb0dfa8244f6189373755e897edc1381' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_DLT_TPRMER' and THO.hashcode = 'eb0dfa8244f6189373755e897edc1381')
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 07/03/2018 12:53:57
Num.Script: 51680-0-0
Nro. O.S. : 1145114
Nome      : Alterar - TRG_UPD_TGFITE_FLEX 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - TRG_UPD_TGFITE_FLEX 
NomeObjeto: TRG_UPD_TGFITE_FLEX 
TipoObjeto: TRIGGER
NomeTabela: TGFITE
Executar  : SE_EXISTIR
Ocorrencia: 4210003
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_UPD_TGFITE_FLEX 
AFTER UPDATE ON TGFITE FOR EACH ROW
WHEN (((NEW.VLRACRESCDESC <> 0) OR (OLD.VLRACRESCDESC <> 0)) AND
     (OLD.QTDNEG <> NEW.QTDNEG OR
      OLD.QTDENTREGUE <> NEW.QTDENTREGUE OR
      OLD.PENDENTE <> NEW.PENDENTE OR
      OLD.VLRACRESCDESC <> NEW.VLRACRESCDESC OR
      OLD.VLRRETENCAO <> NEW.VLRRETENCAO OR
      OLD.STATUSNOTA <> NEW.STATUSNOTA))
DECLARE
  P_CODPARC          TGFCAB.CODPARC%TYPE;
  P_CODVEND          TGFCAB.CODVEND%TYPE;
  P_CODVENDRETEN     TGFCAB.CODVEND%TYPE;
  P_GRUPORETENCAO    TGFVEN.GRUPORETENCAO%TYPE;
  P_ATUALACDC        TGFTOP.ATUALACDC%TYPE;
  P_TIPMOV           TGFCAB.TIPMOV%TYPE;
  P_VLRACRESCDESC    TGFITE.VLRUNIT%TYPE;
  P_VLRRETENCAO      TGFITE.VLRUNIT%TYPE;
  P_SALDO            TGFVEN.SALDODISP%TYPE;
  P_PROV             TGFVEN.PROVACRESC%TYPE;
  P_RETENCAO         TGFVEN.SALDODISP%TYPE;  
  P_RETDESCDEV       CHAR(1) := 'S';
  P_ACRESCSEMCONF    CHAR(1) := 'N';
  P_COUNT            NUMBER(05);
  ERROR              EXCEPTION;
  ERRMSG             VARCHAR2(255);
BEGIN

  IF STP_GET_ATUALIZANDO THEN
    RETURN;
  END IF;

  SELECT CAB.CODVEND, TOP.ATUALACDC, CAB.TIPMOV, CAB.CODPARC
  INTO  P_CODVEND, P_ATUALACDC, P_TIPMOV, P_CODPARC
  FROM TGFCAB CAB, TGFTOP TOP
  WHERE CAB.NUNOTA = :NEW.NUNOTA
  AND CAB.CODTIPOPER = TOP.CODTIPOPER
  AND CAB.DHTIPOPER = TOP.DHALTER;
  IF P_ATUALACDC = 'N' AND :NEW.VLRACRESCDESC <> 0 THEN 
    ERRMSG := 'A TOP não atualiza saldo FLEX e o acréscimo/decréscimo está calculado. Nota de Nro Único: '|| TO_CHAR(:NEW.NUNOTA) ||'.';
    RAISE ERROR;
  END IF;

  SELECT GRUPORETENCAO
  INTO P_GRUPORETENCAO
  FROM TGFVEN
  WHERE CODVEND = P_CODVEND;
  IF P_GRUPORETENCAO IS NULL THEN
    ERRMSG := 'O vendedor não pertence a nenhum grupo de retenção FLEX e o acréscimo/decréscimo está calculado. Nota de Nro Único: '|| TO_CHAR(:NEW.NUNOTA) ||'.';
    RAISE ERROR;
  END IF;
  
  IF P_TIPMOV = 'D' THEN 
    IF (P_GRUPORETENCAO <> 'PARCEIRO' OR (:NEW.VLRACRESCDESC >= 0 AND :OLD.VLRACRESCDESC >= 0)) THEN
      RETURN;
    END IF;

    BEGIN
      SELECT LOGICO 
      INTO P_RETDESCDEV
      FROM TSIPAR 
      WHERE CHAVE = 'RETDESCDEV';
    EXCEPTION WHEN NO_DATA_FOUND THEN
      P_RETDESCDEV := 'S';
    END;
    
    IF P_RETDESCDEV = 'S' THEN
      RETURN;
    END IF;
  END IF;

  IF (:NEW.VLRACRESCDESC > 0 OR :OLD.VLRACRESCDESC > 0) THEN
    BEGIN
      SELECT LOGICO 
      INTO P_ACRESCSEMCONF
      FROM TSIPAR
      WHERE CHAVE = 'ACRESCSEMCONF';
    EXCEPTION WHEN NO_DATA_FOUND THEN
      P_ACRESCSEMCONF := 'N';
    END;
  END IF;
  
  P_SALDO := 0;
  P_PROV := 0;
  P_RETENCAO := 0;
  
  IF :NEW.QTDNEG > :NEW.QTDENTREGUE AND (P_TIPMOV <> 'P' OR :NEW.PENDENTE = 'S' OR (:NEW.PENDENTE = :OLD.PENDENTE AND :NEW.QTDENTREGUE < :OLD.QTDENTREGUE)) THEN
    
    P_VLRRETENCAO := NVL(:NEW.VLRRETENCAO,0);
    P_VLRACRESCDESC := NVL(:NEW.VLRACRESCDESC,0);
    IF P_VLRACRESCDESC < 0 THEN
      P_VLRACRESCDESC := P_VLRACRESCDESC / :NEW.QTDNEG * (:NEW.QTDNEG - :NEW.QTDENTREGUE);
      
      IF (P_ATUALACDC = 'S' OR P_TIPMOV <> 'D') THEN
        IF P_GRUPORETENCAO = 'PARCEIRO' THEN
          IF (P_TIPMOV <> 'D' OR P_RETDESCDEV = 'N') THEN
            P_SALDO := P_VLRACRESCDESC;
          END IF;
        ELSE
          P_SALDO := P_VLRACRESCDESC;
        END IF;
      END IF;
    ELSIF P_VLRACRESCDESC > 0 AND P_TIPMOV <> 'D' THEN
      P_VLRACRESCDESC := (P_VLRACRESCDESC - P_VLRRETENCAO) / :NEW.QTDNEG * (:NEW.QTDNEG - :NEW.QTDENTREGUE);
      
      IF P_ATUALACDC = 'S' THEN
        IF (:NEW.STATUSNOTA = 'L' OR P_ACRESCSEMCONF = 'S') THEN
          P_VLRRETENCAO := P_VLRRETENCAO / :NEW.QTDNEG * (:NEW.QTDNEG - :NEW.QTDENTREGUE);
          
          IF P_VLRRETENCAO <> 0 THEN
            P_RETENCAO := P_VLRRETENCAO;
          END IF;
          P_SALDO := P_VLRACRESCDESC;
        ELSE
          P_PROV := P_VLRACRESCDESC;
        END IF;
      ELSIF P_ATUALACDC = 'P' AND :NEW.STATUSNOTA = 'L' THEN
        P_PROV := P_VLRACRESCDESC;
      END IF;
    END IF;
  END IF;
  
  IF :OLD.QTDNEG > :OLD.QTDENTREGUE AND (P_TIPMOV <> 'P' OR :OLD.PENDENTE = 'S') THEN
    P_VLRRETENCAO := NVL(:OLD.VLRRETENCAO,0);
    P_VLRACRESCDESC := NVL(:OLD.VLRACRESCDESC,0);
    
    IF P_VLRACRESCDESC < 0 THEN
      P_VLRACRESCDESC := P_VLRACRESCDESC / :OLD.QTDNEG * (:OLD.QTDNEG - :OLD.QTDENTREGUE);
      
      IF (P_ATUALACDC = 'S' OR P_TIPMOV <> 'D') THEN
        IF (P_GRUPORETENCAO <> 'PARCEIRO' OR P_TIPMOV <> 'D' OR P_RETDESCDEV = 'N') THEN
          P_SALDO := P_SALDO - P_VLRACRESCDESC;
        END IF;
      END IF;
    ELSIF P_VLRACRESCDESC > 0 AND P_TIPMOV <> 'D' THEN
      P_VLRACRESCDESC := (P_VLRACRESCDESC - P_VLRRETENCAO) / :OLD.QTDNEG * (:OLD.QTDNEG - :OLD.QTDENTREGUE);

      IF P_ATUALACDC = 'S' THEN
        IF (:OLD.STATUSNOTA = 'L' OR P_ACRESCSEMCONF = 'S') THEN
          P_VLRRETENCAO := P_VLRRETENCAO / :OLD.QTDNEG * (:OLD.QTDNEG - :OLD.QTDENTREGUE);
          
          IF P_VLRRETENCAO <> 0 THEN
            P_RETENCAO := P_RETENCAO - P_VLRRETENCAO;
          END IF;
          P_SALDO := P_SALDO - P_VLRACRESCDESC;
        ELSE
          P_PROV := P_PROV - P_VLRACRESCDESC;
        END IF;
      ELSIF P_ATUALACDC = 'P' AND :OLD.STATUSNOTA = 'L' THEN
        P_PROV := P_PROV - P_VLRACRESCDESC;
      END IF;
    END IF;
  END IF; 
  
  IF (P_SALDO <> 0 OR P_PROV <> 0) THEN 
    IF P_GRUPORETENCAO = 'PARCEIRO' THEN
      UPDATE TGFPAR
      SET SALDODISP = NVL(SALDODISP, 0) + P_SALDO
      , PROVACRESC = NVL(PROVACRESC, 0) + P_PROV
      WHERE CODPARC = P_CODPARC;
    ELSE
      UPDATE TGFVEN
      SET SALDODISP = NVL(SALDODISP, 0) + P_SALDO
      , PROVACRESC = NVL(PROVACRESC, 0) + P_PROV
      WHERE CODVEND = P_CODVEND;
    END IF;
  END IF;
  
  IF P_RETENCAO <> 0 THEN
    BEGIN
      SELECT INTEIRO
      INTO P_CODVENDRETEN
      FROM TSIPAR
      WHERE CHAVE = 'CODVENDACUVLRRE';
    EXCEPTION WHEN NO_DATA_FOUND THEN
      P_CODVENDRETEN := 0;
    END;
    
    IF P_CODVENDRETEN > 0 THEN
      UPDATE TGFVEN
      SET SALDODISP = NVL(SALDODISP, 0) + P_RETENCAO
      WHERE CODVEND = P_CODVENDRETEN;
    END IF;
  END IF;
  
EXCEPTION WHEN ERROR THEN
  
  IF Fpodevalidar('TGFCAB') THEN
    RAISE_APPLICATION_ERROR(-20101, ERRMSG);
  END IF;
   
END;
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 07/03/2018 12:53:57
Num.Script: 51681-0-1000
Nro. O.S. : 1145114
Nome      : INSERE - THOOBJ - 5168000
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_UPD_TGFITE_FLEX
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210003
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_UPD_TGFITE_FLEX' NOMEOBJ, 51680 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '0c016e14b7e9148e532b9ac652e84e47' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_UPD_TGFITE_FLEX' and THO.hashcode = '0c016e14b7e9148e532b9ac652e84e47')
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 11/04/2018 10:52:22
Num.Script: 51834-0-0
Nro. O.S. : 1151805
Nome      : Dropar - CKC_IPINAOINCID_TGFEMP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - CKC_IPINAOINCID_TGFEMP
NomeObjeto: CKC_IPINAOINCID_TGFEMP
TipoObjeto: CONSTRAINT
NomeTabela: TGFEMP
Executar  : SE_EXISTIR
Ocorrencia: 4210003
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFEMP DROP CONSTRAINT CKC_IPINAOINCID_TGFEMP
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 11/04/2018 10:52:22
Num.Script: 51835-0-0
Nro. O.S. : 1151805
Nome      : Criar - CKC_IPINAOINCID_TGFEMP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - CKC_IPINAOINCID_TGFEMP
NomeObjeto: CKC_IPINAOINCID_TGFEMP
TipoObjeto: CONSTRAINT
NomeTabela: TGFEMP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210003
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFEMP ADD CONSTRAINT CKC_IPINAOINCID_TGFEMP CHECK (IPINAOINCID IN ('O','I','N')) ENABLE VALIDATE
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 11/04/2018 10:52:22
Num.Script: 51836-0-0
Nro. O.S. : 1151805
Nome      : Dropar - CKC_STINCLUSA_TGFEMP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - CKC_STINCLUSA_TGFEMP
NomeObjeto: CKC_STINCLUSA_TGFEMP
TipoObjeto: CONSTRAINT
NomeTabela: TGFEMP
Executar  : SE_EXISTIR
Ocorrencia: 4210003
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFEMP DROP CONSTRAINT CKC_STINCLUSA_TGFEMP
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 11/04/2018 10:52:22
Num.Script: 51837-0-0
Nro. O.S. : 1151805
Nome      : Criar - CKC_STINCLUSA_TGFEMP 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - CKC_STINCLUSA_TGFEMP 
NomeObjeto: CKC_STINCLUSA_TGFEMP 
TipoObjeto: CONSTRAINT
NomeTabela: TGFEMP 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210003
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFEMP ADD CONSTRAINT CKC_STINCLUSA_TGFEMP CHECK (STINCLUSA IN ('O','I','N')) ENABLE VALIDATE
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 21/03/2018 11:12:27
Num.Script: 51843-0-0
Nro. O.S. : 1152612
Nome      : Ajusta - TFPFOR CODFORM 5009
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Ajusta - TFPFOR CODFORM 5009
NomeObjeto: CODFORM
TipoObjeto: COLUMN
NomeTabela: TFPFOR
Executar  : SE_EXISTIR
Ocorrencia: 4210003
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
  P_CODFORMULA      TFPFOR.CODFORM%TYPE;
  P_DESCRFORMULA    TFPFOR.DESCRFORM%TYPE;
  P_DESCRFORMNOVO   TFPFOR.DESCRFORM%TYPE;
  P_FORMULA         VARCHAR2(4000);
  P_FORMULANOVO     VARCHAR2(4000);
  P_CODFORMIND      VARCHAR2(4000);
  P_CODFORMINDNOVO  VARCHAR2(4000);
  P_SANKHYA         TFPFOR.SANKHYA%TYPE;
BEGIN
  
  P_CODFORMULA := 5009;
  
  BEGIN
    SELECT FORMULA, DESCRFORM, CODFORMIND, SANKHYA
    INTO P_FORMULA, P_DESCRFORMULA, P_CODFORMIND, P_SANKHYA
    FROM TFPFOR
    WHERE CODFORM = P_CODFORMULA;
  EXCEPTION WHEN NO_DATA_FOUND THEN
    P_FORMULA := 'A';
    P_CODFORMIND := NULL;
    P_DESCRFORMULA := NULL;
    P_SANKHYA := 'S'; 
  END;
  
  IF P_SANKHYA = 'N' THEN
    RETURN;
  END IF;
  
  P_DESCRFORMNOVO := 'INSS RETIDO FCOMPL/NORMAL/FERIAS';
  P_FORMULANOVO := 'IF((&TIPFOL = ''O'') AND (BuscaTSIPAR(''FPINSSMESAMES'')=''N''), &E900 + &E902 + &E921, &E506 + ABS(IF(&FOLHACPL = ''S'', FBECPL(QueFuncionario.CODEMP,QueFuncionario.CODFUNC,&Refere,''F'',''902'') + &E921, IF((&RecompoeCompl = ''N''), FBE(QueFuncionario.CODEMP,QueFuncionario.CODFUNC,&Refere,''F'',''902''),0)) + FBE(QueFuncionario.CODEMP,QueFuncionario.CODFUNC,&Refere,''F'',''506''))) + IF((&RecompoeCompl = ''S''),ABS(FBE(QueFuncionario.CODEMP,QueFuncionario.CODFUNC,&Refere,''F,N,O'',''901,902,921'')),0) + IF(&FOLHACPL = ''N'',ABS(&E921),0)';
  P_CODFORMINDNOVO := '';
  
  IF P_FORMULA = 'A' THEN
    INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
      VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
             'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO);
    
    IF P_CODFORMINDNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO);
    END IF;
    
    IF P_DESCRFORMNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO);
    END IF;
    
    INSERT INTO TFPFOR (CODFORM, DESCRFORM, SANKHYA, FORMULA, CODFORMIND)
      VALUES(P_CODFORMULA, P_DESCRFORMNOVO, 'S', P_FORMULANOVO, P_CODFORMINDNOVO);
    
  ELSIF (P_FORMULANOVO <> P_FORMULA OR 
         NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') OR 
         NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z')) 
  THEN
    
    IF P_FORMULANOVO <> P_FORMULA THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO, P_FORMULA);
    END IF;
    
    IF NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO, P_CODFORMIND);
    END IF;
    
    IF NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO, P_DESCRFORMULA);
    END IF;
    
    UPDATE TFPFOR
    SET FORMULA = P_FORMULANOVO
    , DESCRFORM = P_DESCRFORMNOVO
    , CODFORMIND = P_CODFORMINDNOVO
    , FORMULANTERIOR = CASE WHEN FORMULA <> P_FORMULANOVO THEN P_FORMULA ELSE FORMULANTERIOR END
    , DTALTER = SYSDATE
    , CODUSU = 0
    WHERE CODFORM = P_CODFORMULA
    AND SANKHYA = 'S';
    
  END IF;
  
END;
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 21/03/2018 11:12:24
Num.Script: 51849-0-0
Nro. O.S. : 1065991
Nome      : Cria - TFPBAS BLOQUEIAPORTALPTO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: BLOQUEIAPORTALPTO
TipoObjeto: COLUMN
NomeTabela: TFPBAS
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210003
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TFPBAS ADD BLOQUEIAPORTALPTO CHAR(1)';
   EXECUTE IMMEDIATE 'UPDATE TFPBAS SET BLOQUEIAPORTALPTO = ''N''';
   EXECUTE IMMEDIATE 'ALTER TABLE TFPBAS ADD  CONSTRAINT CKC_BLOQUEIAPORTALPTO_TFPBAS CHECK (BLOQUEIAPORTALPTO IN (''S'',''N''))';
   EXECUTE IMMEDIATE 'ALTER TABLE TFPBAS MODIFY BLOQUEIAPORTALPTO DEFAULT ''N'' NOT NULL';
END;
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 21/03/2018 11:12:18
Num.Script: 51850-0-0
Nro. O.S. : 1065991
Nome      : Insere - FPBLOQPORTALPTO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Inserir o parametro
NomeObjeto: FPBLOQPORTALPTO
TipoObjeto: PARAMETRO
NomeTabela: TSIPAR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210003
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO TSIPAR ( CHAVE, DESCRICAO, CODUSU, MODULO, CLASSE, ABA, TIPO,  LOGICO)  VALUES ( 'FPBLOQPORTALPTO', 'Bloqueia consulta de Extrato de Ponto no Portal RH', 0,'F', 'Diversas', 'Ponto',  'L', 'N') 
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 21/03/2018 11:12:15
Num.Script: 51851-0-0
Nro. O.S. : 1065991
Nome      : Alterar - TRG_INC_TFPBAS 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - TRG_INC_TFPBAS 
NomeObjeto: TRG_INC_TFPBAS 
TipoObjeto: TRIGGER
NomeTabela: TFPBAS 
Executar  : SE_EXISTIR
Ocorrencia: 4210003
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_INC_TFPBAS 
BEFORE INSERT ON TFPBAS FOR EACH ROW
DECLARE
  P_LOGICO       CHAR(1);
BEGIN

  IF STP_GET_ATUALIZANDO THEN
    RETURN;
  END IF;
  
  SELECT NVL(LOGICO,'N') INTO P_LOGICO FROM TSIPAR WHERE CHAVE = 'FPBLOQPORTALRH';
  
  :NEW.BLOQUEIAPORTALRH := P_LOGICO;  
 
  SELECT NVL(LOGICO,'N') INTO P_LOGICO FROM TSIPAR WHERE CHAVE = 'FPBLOQPORTALPTO'; 

  :NEW.BLOQUEIAPORTALPTO := P_LOGICO; 
  
END;
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 09/03/2018 12:02:13
Num.Script: 51852-0-0
Nro. O.S. : 1149326
Nome      : Alterar - TPRMPE DESCRICAO 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - TPRMPE DESCRICAO 
NomeObjeto: DESCRICAO 
TipoObjeto: COLUMN
NomeTabela: TPRMPE
Executar  : SE_EXISTIR
Ocorrencia: 4210003
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TPRMPE MODIFY DESCRICAO VARCHAR2(50)
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 21/03/2018 11:13:04
Num.Script: 51856-0-0
Nro. O.S. : 1145390
Nome      : Ajusta - TFPFOR CODFORM 7
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Ajusta - TFPFOR CODFORM 7
NomeObjeto: CODFORM
TipoObjeto: COLUMN
NomeTabela: TFPFOR
Executar  : SE_EXISTIR
Ocorrencia: 4210003
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
  P_CODFORMULA      TFPFOR.CODFORM%TYPE;
  P_DESCRFORMULA    TFPFOR.DESCRFORM%TYPE;
  P_DESCRFORMNOVO   TFPFOR.DESCRFORM%TYPE;
  P_FORMULA         VARCHAR2(4000);
  P_FORMULANOVO     VARCHAR2(4000);
  P_CODFORMIND      VARCHAR2(4000);
  P_CODFORMINDNOVO  VARCHAR2(4000);
  P_SANKHYA         TFPFOR.SANKHYA%TYPE;
BEGIN
  
  P_CODFORMULA := 7;
  
  BEGIN
    SELECT FORMULA, DESCRFORM, CODFORMIND, SANKHYA
    INTO P_FORMULA, P_DESCRFORMULA, P_CODFORMIND, P_SANKHYA
    FROM TFPFOR
    WHERE CODFORM = P_CODFORMULA;
  EXCEPTION WHEN NO_DATA_FOUND THEN
    P_FORMULA := 'A';
    P_CODFORMIND := NULL;
    P_DESCRFORMULA := NULL;
    P_SANKHYA := 'S'; 
  END;
  
  IF P_SANKHYA = 'N' THEN
    RETURN;
  END IF;
  
  P_DESCRFORMNOVO := 'SALARIO FAMILIA';
  P_FORMULANOVO := 'IF((&Folqui <> 1),IF(((QueFuncionario.SITUACAO = 1) AND (CTOI(PDESPARAM(''1'', ''TFPOCO O, TFPHIS H'', '' O.CODHISTOCOR = H.CODHISTOCOR AND O.CODEMP = :INT_CODEMP AND O.CODFUNC = :INT_CODFUNC AND O.DTFINALOCOR >= :DAT_DTINI AND O.DTFINALOCOR <= :DAT_DTFIM AND H.AFASTAMENTO IN (''A'', ''D'') AND O.DTFINALOCOR IS NOT NULL'',STR(queFuncionario.CODEMP), STR(queFuncionario.CODFUNC), DTOC(&REFERE * 1.0), DTOC((FSOMAMES(&REFERE, 1) - 1) * 1.0))) <> 1)) OR (((QueFuncionario.SITUACAO = 3) OR (QueFuncionario.SITUACAO = 6) OR (QueFuncionario.SITUACAO = 5)) AND ((&DIASTRA + &F5020) > 0)),(FQD(queFuncionario.codemp,queFuncionario.codfunc,''S'',&Refere) * FTF(3,1,(IF(&TIPFOL = ''N'',(QueFuncionario.SALBASE + &E1901 + (&E102 + &E103 + &E104 + &E107)) - ((&E1+ &E415 + &E416) + ((QueFuncionario.SALBASE / 30) * &F5020)),(QueFuncionario.SALBASE + (&E1900 - &E201) + &E105 + (&E102 + &E103 + &E104 + &E107)) - (&E200 - ((QueFuncionario.SALBASE / 30) * &F5020)))),&Refere,queFuncionario.TIPTAB)),0) / IF(((&TIPFOL = ''N'') AND (MES(queFuncionario.DTADM) = &MESATU) AND (ANO(queFuncionario.DTADM) = &ANOATU)) OR (&TIPFOL = ''R''), IF(QueFuncionario.TIPSAL = 5,QueFuncionario.HORASSEM * 5,30), 1) * IF(((&TIPFOL = ''N'') AND (MES(queFuncionario.DTADM) = &MESATU) AND (ANO(queFuncionario.DTADM) = &ANOATU)) OR (&TIPFOL = ''R''),IF(&DIASTRA > 0,&DIASTRA,30), 1),0)';
  P_CODFORMINDNOVO := 'FQD(queFuncionario.codemp, queFuncionario.codfunc,''N'', &Refere)';
  
  IF P_FORMULA = 'A' THEN
    INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
      VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
             'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO);
    
    IF P_CODFORMINDNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO);
    END IF;
    
    IF P_DESCRFORMNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO);
    END IF;
    
    INSERT INTO TFPFOR (CODFORM, DESCRFORM, SANKHYA, FORMULA, CODFORMIND)
      VALUES(P_CODFORMULA, P_DESCRFORMNOVO, 'S', P_FORMULANOVO, P_CODFORMINDNOVO);
    
  ELSIF (P_FORMULANOVO <> P_FORMULA OR 
         NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') OR 
         NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z')) 
  THEN
    
    IF P_FORMULANOVO <> P_FORMULA THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO, P_FORMULA);
    END IF;
    
    IF NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO, P_CODFORMIND);
    END IF;
    
    IF NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO, P_DESCRFORMULA);
    END IF;
    
    UPDATE TFPFOR
    SET FORMULA = P_FORMULANOVO
    , DESCRFORM = P_DESCRFORMNOVO
    , CODFORMIND = P_CODFORMINDNOVO
    , FORMULANTERIOR = CASE WHEN FORMULA <> P_FORMULANOVO THEN P_FORMULA ELSE FORMULANTERIOR END
    , DTALTER = SYSDATE
    , CODUSU = 0
    WHERE CODFORM = P_CODFORMULA
    AND SANKHYA = 'S';
    
  END IF;
  
END;
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 14/03/2018 10:13:57
Num.Script: 51911-0-0
Nro. O.S. : 1140657
Nome      : Cria - TGFTOP IGNORARAGRUPMINDEV
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: IGNORARAGRUPMINDEV
TipoObjeto: COLUMN
NomeTabela: TGFTOP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210003
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TGFTOP ADD IGNORARAGRUPMINDEV CHAR(1)';
   EXECUTE IMMEDIATE 'ALTER TABLE TGFTOP ADD  CONSTRAINT CKC_IGNORARAGRUPMINDEV_TGFTOP CHECK (IGNORARAGRUPMINDEV IN (''S'',''N'') OR IGNORARAGRUPMINDEV IS NULL )';
END;
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 21/03/2018 11:12:11
Num.Script: 51916-0-0
Nro. O.S. : 1141060
Nome      : Ajusta - TFPFOR CODFORM 208
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Ajusta - TFPFOR CODFORM 208
NomeObjeto: CODFORM
TipoObjeto: COLUMN
NomeTabela: TFPFOR
Executar  : SE_EXISTIR
Ocorrencia: 4210003
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
  P_CODFORMULA      TFPFOR.CODFORM%TYPE;
  P_DESCRFORMULA    TFPFOR.DESCRFORM%TYPE;
  P_DESCRFORMNOVO   TFPFOR.DESCRFORM%TYPE;
  P_FORMULA         VARCHAR2(4000);
  P_FORMULANOVO     VARCHAR2(4000);
  P_CODFORMIND      VARCHAR2(4000);
  P_CODFORMINDNOVO  VARCHAR2(4000);
  P_SANKHYA         TFPFOR.SANKHYA%TYPE;
BEGIN
  
  P_CODFORMULA := 208;
  
  BEGIN
    SELECT FORMULA, DESCRFORM, CODFORMIND, SANKHYA
    INTO P_FORMULA, P_DESCRFORMULA, P_CODFORMIND, P_SANKHYA
    FROM TFPFOR
    WHERE CODFORM = P_CODFORMULA;
  EXCEPTION WHEN NO_DATA_FOUND THEN
    P_FORMULA := 'A';
    P_CODFORMIND := NULL;
    P_DESCRFORMULA := NULL;
    P_SANKHYA := 'S'; 
  END;
  
  IF P_SANKHYA = 'N' THEN
    RETURN;
  END IF;
  
  P_DESCRFORMNOVO := 'MEDIAS A.P.I.';
  P_FORMULANOVO := 'IF(&TIPOAVISO=1,0,IF((((&TIPOAVISO=2) OR (&TIPOAVISO=3)) And ((QuelTFPAfaC.CODAFAST = 61) Or (QuelTFPAfaC.CODAFAST = 69) Or (QuelTFPAfaC.CODAFAST = 63) Or (QuelTFPAfaC.CODAFAST = 65) Or (QuelTFPAfaC.CODAFAST = 75))),0,((FMedEve(QueFuncionario.CODEMP, QueFuncionario.CODFUNC, &F1000, &Refere,''R'')/30) * &DIAAVI)))';
  P_CODFORMINDNOVO := '&DIAAVI';
  
  IF P_FORMULA = 'A' THEN
    INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
      VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
             'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO);
    
    IF P_CODFORMINDNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO);
    END IF;
    
    IF P_DESCRFORMNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO);
    END IF;
    
    INSERT INTO TFPFOR (CODFORM, DESCRFORM, SANKHYA, FORMULA, CODFORMIND)
      VALUES(P_CODFORMULA, P_DESCRFORMNOVO, 'S', P_FORMULANOVO, P_CODFORMINDNOVO);
    
  ELSIF (P_FORMULANOVO <> P_FORMULA OR 
         NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') OR 
         NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z')) 
  THEN
    
    IF P_FORMULANOVO <> P_FORMULA THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO, P_FORMULA);
    END IF;
    
    IF NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO, P_CODFORMIND);
    END IF;
    
    IF NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO, P_DESCRFORMULA);
    END IF;
    
    UPDATE TFPFOR
    SET FORMULA = P_FORMULANOVO
    , DESCRFORM = P_DESCRFORMNOVO
    , CODFORMIND = P_CODFORMINDNOVO
    , FORMULANTERIOR = CASE WHEN FORMULA <> P_FORMULANOVO THEN P_FORMULA ELSE FORMULANTERIOR END
    , DTALTER = SYSDATE
    , CODUSU = 0
    WHERE CODFORM = P_CODFORMULA
    AND SANKHYA = 'S';
    
  END IF;
  
END;
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 23/03/2018 10:47:06
Num.Script: 51918-0-0
Nro. O.S. : 1149147
Nome      : Criar - FC_ROWS_TO_CLOB 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - FC_ROWS_TO_CLOB 
NomeObjeto: FC_ROWS_TO_CLOB 
TipoObjeto: FUNCTION
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210003
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE FUNCTION FC_ROWS_TO_CLOB (
   P_COLUMNNAME   IN VARCHAR2,
   P_FROM         IN VARCHAR2,
   P_WHERE        IN VARCHAR2)
   RETURN CLOB
IS
   TYPE CURTYP IS REF CURSOR;

   V_SQL_STMT   VARCHAR2 (200);
   REC          VARCHAR2 (4000);
   V_CLOB       CLOB;
   V_TMP_CLOB   CLOB;
   CUR          CURTYP;
BEGIN
   V_SQL_STMT :=
      'SELECT ' || P_COLUMNNAME || ' AS TEXT ' || P_FROM || ' ' || P_WHERE;

   OPEN CUR FOR V_SQL_STMT;

   LOOP
      FETCH CUR INTO REC;

      EXIT WHEN CUR%NOTFOUND;

      IF (V_CLOB IS NULL)
      THEN                                                       -- FIRST ITEM
         V_CLOB := REC;
      ELSE                                                  -- SUBSEQUENT ITEM
         V_TMP_CLOB := REC;
         V_CLOB := V_CLOB || V_TMP_CLOB;                    -- PREPEND NEWLINE
      END IF;
   END LOOP;

   CLOSE CUR;

   RETURN (V_CLOB);
END;
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 23/03/2018 10:47:07
Num.Script: 51919-0-1000
Nro. O.S. : 1149147
Nome      : INSERE - THOOBJ - 5191800
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE FC_ROWS_TO_CLOB
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210003
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'FC_ROWS_TO_CLOB' NOMEOBJ, 51918 NUMSCRIPT, SYSDATE DTALTER, 'FUNCTION' TIPO, '4c2eb7dd209ab95692378de30882df23' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'FC_ROWS_TO_CLOB' and THO.hashcode = '4c2eb7dd209ab95692378de30882df23')
/
 
 
 
/*
Requer    : 4210002
Conexao   : ORCL
Data      : 21/03/2018 11:11:53
Num.Script: 51931-0-0
Nro. O.S. : 1139806
Nome      : Ajusta - TFPFOR CODFORM 504
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Ajusta - TFPFOR CODFORM 504
NomeObjeto: CODFORM
TipoObjeto: COLUMN
NomeTabela: TFPFOR
Executar  : SE_EXISTIR
Ocorrencia: 4210003
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
  P_CODFORMULA      TFPFOR.CODFORM%TYPE;
  P_DESCRFORMULA    TFPFOR.DESCRFORM%TYPE;
  P_DESCRFORMNOVO   TFPFOR.DESCRFORM%TYPE;
  P_FORMULA         VARCHAR2(4000);
  P_FORMULANOVO     VARCHAR2(4000);
  P_CODFORMIND      VARCHAR2(4000);
  P_CODFORMINDNOVO  VARCHAR2(4000);
  P_SANKHYA         TFPFOR.SANKHYA%TYPE;
BEGIN
  
  P_CODFORMULA := 504;
  
  BEGIN
    SELECT FORMULA, DESCRFORM, CODFORMIND, SANKHYA
    INTO P_FORMULA, P_DESCRFORMULA, P_CODFORMIND, P_SANKHYA
    FROM TFPFOR
    WHERE CODFORM = P_CODFORMULA;
  EXCEPTION WHEN NO_DATA_FOUND THEN
    P_FORMULA := 'A';
    P_CODFORMIND := NULL;
    P_DESCRFORMULA := NULL;
    P_SANKHYA := 'S'; 
  END;
  
  IF P_SANKHYA = 'N' THEN
    RETURN;
  END IF;
  
  P_DESCRFORMNOVO := 'CONTRIBUICAO SINDICAL';
  P_FORMULANOVO := 'IF((&DIASTRA = 0) OR (&MESATU = 2) OR (&MESATU = 1) OR (QueFuncionario.VINCULO = 02) OR (QueFuncionario.VINCULO = 80) OR (QueFuncionario.VINCULO = 90) OR (QueFuncionario.VINCULO = 99) OR ((QueFuncionario.SITSIND = ''P'') AND (QueFuncionario.TEMCONTRIBSINDICAL=''N'')) OR ((((FSomAcu(QueFuncionario.CODEMP,QueFuncionario.CODFUNC,&ANOATU,0,''504'', ''V'') <> 0) AND (FMesAcum(QueFuncionario.CODEMP, QueFuncionario.CODFUNC, &ANOATU, 504, ''U'') <> 1)) OR (FBE(QueFuncionario.CODEMP,QueFuncionario.CODFUNC,FSOMAMES(&REFERE, (-1)),''N'',''504'') <> 0)) AND (&FOLHACPL = ''N'')) OR ((&MesAtu > 3) AND ((Ano(queFuncionario.DTADM) = &AnoAtu) AND (Mes(queFuncionario.DTADM) + 1 <> &MesAtu))) OR ((&TIPFOL=''F'') AND (&DIAFERREF< 30)),0,IF((QueFuncionario.COMPSALARIO = 2),FBE(QueFuncionario.CODEMP,QueFuncionario.CODFUNC,FSOMAMES(&REFERE, (-1)),''N,F'',''1999''),((QueFuncionario.SALBASE*(IF(QueFuncionario.TIPSAL=5,QueFuncionario.HORASSEM*5,1))) + (&E1999))))/30';
  P_CODFORMINDNOVO := 'IF((QueFuncionario.COMPSALARIO = 2),FBE(QueFuncionario.CODEMP,QueFuncionario.CODFUNC,FSOMAMES(&REFERE, (-1)),''N,F'',''1999''),((QueFuncionario.SALBASE*(IF(QueFuncionario.TIPSAL=5,QueFuncionario.HORASSEM*5,1))) + (&E1999)))';
  
  IF P_FORMULA = 'A' THEN
    INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
      VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
             'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO);
    
    IF P_CODFORMINDNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO);
    END IF;
    
    IF P_DESCRFORMNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO);
    END IF;
    
    INSERT INTO TFPFOR (CODFORM, DESCRFORM, SANKHYA, FORMULA, CODFORMIND)
      VALUES(P_CODFORMULA, P_DESCRFORMNOVO, 'S', P_FORMULANOVO, P_CODFORMINDNOVO);
    
  ELSIF (P_FORMULANOVO <> P_FORMULA OR 
         NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') OR 
         NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z')) 
  THEN
    
    IF P_FORMULANOVO <> P_FORMULA THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO, P_FORMULA);
    END IF;
    
    IF NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO, P_CODFORMIND);
    END IF;
    
    IF NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO, P_DESCRFORMULA);
    END IF;
    
    UPDATE TFPFOR
    SET FORMULA = P_FORMULANOVO
    , DESCRFORM = P_DESCRFORMNOVO
    , CODFORMIND = P_CODFORMINDNOVO
    , FORMULANTERIOR = CASE WHEN FORMULA <> P_FORMULANOVO THEN P_FORMULA ELSE FORMULANTERIOR END
    , DTALTER = SYSDATE
    , CODUSU = 0
    WHERE CODFORM = P_CODFORMULA
    AND SANKHYA = 'S';
    
  END IF;
  
END;
/
 
 
 
/*
Conexao   : ORCL
NomeObjeto: UPDATE TSIPAR INTEIRO
TipoObjeto: TABLE
NomeTabela: 
Executar  : SEMPRE
Ocorrencia: 4210004
FullVersao: Sim
*/
 
 
UPDATE TSIPAR SET INTEIRO = 4210003 WHERE CHAVE = 'VERSAOATUALDB'
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 12/03/2018 18:37:07
Num.Script: 51948-0-0
Nro. O.S. : 1101812
Nome      : Criar - TGWQTR
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TGWQTR
NomeObjeto: TGWQTR
TipoObjeto: TABLE
NomeTabela: TGWQTR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210004
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
  CREATE TABLE TGWQTR
(
  NUTAREFA                             NUMBER(10)                        NOT NULL,
  SEQUENCIA                            NUMBER(10)                        NOT NULL,
  QTDRECONTAGEM                        NUMBER(10)                        NOT NULL,
  CONSTRAINT PK_TGWQTR PRIMARY KEY (NUTAREFA, SEQUENCIA)
)
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 13/03/2018 16:54:02
Num.Script: 51950-0-0
Nro. O.S. : 1098772
Nome      : Cria - TGFITE ORIGEMBUSCA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: ORIGEMBUSCA
TipoObjeto: COLUMN
NomeTabela: TGFITE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210004
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFITE ADD ORIGEMBUSCA VARCHAR2(18)
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 13/03/2018 16:54:02
Num.Script: 51951-0-0
Nro. O.S. : 1098772
Nome      : Cria - TGFITE PRODUTOPESQUISADO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: PRODUTOPESQUISADO
TipoObjeto: COLUMN
NomeTabela: TGFITE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210004
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFITE ADD PRODUTOPESQUISADO DECIMAL(10, 0)
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 23/03/2018 11:45:54
Num.Script: 51955-0-0
Nro. O.S. : 1158713
Nome      : Ajusta - TFPFOR CODFORM 218
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Ajusta - TFPFOR CODFORM 218
NomeObjeto: CODFORM
TipoObjeto: COLUMN
NomeTabela: TFPFOR
Executar  : SE_EXISTIR
Ocorrencia: 4210004
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
  P_CODFORMULA      TFPFOR.CODFORM%TYPE;
  P_DESCRFORMULA    TFPFOR.DESCRFORM%TYPE;
  P_DESCRFORMNOVO   TFPFOR.DESCRFORM%TYPE;
  P_FORMULA         VARCHAR2(4000);
  P_FORMULANOVO     VARCHAR2(4000);
  P_CODFORMIND      VARCHAR2(4000);
  P_CODFORMINDNOVO  VARCHAR2(4000);
  P_SANKHYA         TFPFOR.SANKHYA%TYPE;
BEGIN
  
  P_CODFORMULA := 218;
  
  BEGIN
    SELECT FORMULA, DESCRFORM, CODFORMIND, SANKHYA
    INTO P_FORMULA, P_DESCRFORMULA, P_CODFORMIND, P_SANKHYA
    FROM TFPFOR
    WHERE CODFORM = P_CODFORMULA;
  EXCEPTION WHEN NO_DATA_FOUND THEN
    P_FORMULA := 'A';
    P_CODFORMIND := NULL;
    P_DESCRFORMULA := NULL;
    P_SANKHYA := 'S'; 
  END;
  
  IF P_SANKHYA = 'N' THEN
    RETURN;
  END IF;
  
  P_DESCRFORMNOVO := 'MULTA LEI 7238/84 - ART 9.º';
  P_FORMULANOVO := 'IF((&CAUAFA = 60) AND (QuelTFPafaF.CODGOVERNO <> ''I5''),IF(MES(DTOC(IF(&TIPOAVISO = 2,&DTDEMISSAO + &DIAAVI,IF(&TIPOAVISO = 1,&DTDEMISSAO + &DIAAVIEMPREGADOR,0)))) = IF((quePrefSindicato.MESDATABASE - 1) = 0, 12, quePrefSindicato.MESDATABASE - 1), (queFuncionario.SALBASE + &VLRINCORPORA), 0),0)';
  P_CODFORMINDNOVO := '&DIAAVI';
  
  IF P_FORMULA = 'A' THEN
    INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
      VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
             'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO);
    
    IF P_CODFORMINDNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO);
    END IF;
    
    IF P_DESCRFORMNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO);
    END IF;
    
    INSERT INTO TFPFOR (CODFORM, DESCRFORM, SANKHYA, FORMULA, CODFORMIND)
      VALUES(P_CODFORMULA, P_DESCRFORMNOVO, 'S', P_FORMULANOVO, P_CODFORMINDNOVO);
    
  ELSIF (P_FORMULANOVO <> P_FORMULA OR 
         NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') OR 
         NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z')) 
  THEN
    
    IF P_FORMULANOVO <> P_FORMULA THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO, P_FORMULA);
    END IF;
    
    IF NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO, P_CODFORMIND);
    END IF;
    
    IF NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO, P_DESCRFORMULA);
    END IF;
    
    UPDATE TFPFOR
    SET FORMULA = P_FORMULANOVO
    , DESCRFORM = P_DESCRFORMNOVO
    , CODFORMIND = P_CODFORMINDNOVO
    , FORMULANTERIOR = CASE WHEN FORMULA <> P_FORMULANOVO THEN P_FORMULA ELSE FORMULANTERIOR END
    , DTALTER = SYSDATE
    , CODUSU = 0
    WHERE CODFORM = P_CODFORMULA
    AND SANKHYA = 'S';
    
  END IF;
  
END;
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 23/03/2018 11:45:50
Num.Script: 51958-0-0
Nro. O.S. : 1139806
Nome      : Ajusta - TFPFOR CODFORM 504
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Ajusta - TFPFOR CODFORM 504
NomeObjeto: CODFORM
TipoObjeto: COLUMN
NomeTabela: TFPFOR
Executar  : SE_EXISTIR
Ocorrencia: 4210004
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
  P_CODFORMULA      TFPFOR.CODFORM%TYPE;
  P_DESCRFORMULA    TFPFOR.DESCRFORM%TYPE;
  P_DESCRFORMNOVO   TFPFOR.DESCRFORM%TYPE;
  P_FORMULA         VARCHAR2(4000);
  P_FORMULANOVO     VARCHAR2(4000);
  P_CODFORMIND      VARCHAR2(4000);
  P_CODFORMINDNOVO  VARCHAR2(4000);
  P_SANKHYA         TFPFOR.SANKHYA%TYPE;
BEGIN
  
  P_CODFORMULA := 504;
  
  BEGIN
    SELECT FORMULA, DESCRFORM, CODFORMIND, SANKHYA
    INTO P_FORMULA, P_DESCRFORMULA, P_CODFORMIND, P_SANKHYA
    FROM TFPFOR
    WHERE CODFORM = P_CODFORMULA;
  EXCEPTION WHEN NO_DATA_FOUND THEN
    P_FORMULA := 'A';
    P_CODFORMIND := NULL;
    P_DESCRFORMULA := NULL;
    P_SANKHYA := 'S'; 
  END;
  
  IF P_SANKHYA = 'N' THEN
    RETURN;
  END IF;
  
  P_DESCRFORMNOVO := 'CONTRIBUICAO SINDICAL';
  P_FORMULANOVO := 'IF((&DIASTRA = 0) OR (&MESATU = 2) OR (&MESATU = 1) OR (QueFuncionario.VINCULO = 02) OR (QueFuncionario.VINCULO = 80) OR (QueFuncionario.VINCULO = 90) OR (QueFuncionario.VINCULO = 99) OR ((QueFuncionario.SITSIND = ''P'') OR (QueFuncionario.TEMCONTRIBSINDICAL=''N'')) OR ((((FSomAcu(QueFuncionario.CODEMP,QueFuncionario.CODFUNC,&ANOATU,0,''504'', ''V'') <> 0) AND (FMesAcum(QueFuncionario.CODEMP, QueFuncionario.CODFUNC, &ANOATU, 504, ''U'') <> 1)) OR (FBE(QueFuncionario.CODEMP,QueFuncionario.CODFUNC,FSOMAMES(&REFERE, (-1)),''N'',''504'') <> 0)) AND (&FOLHACPL = ''N'')) OR ((&MesAtu > 3) AND ((Ano(queFuncionario.DTADM) = &AnoAtu) AND (Mes(queFuncionario.DTADM) + 1 <> &MesAtu))) OR ((&TIPFOL=''F'') AND (&DIAFERREF< 30)),0,IF((QueFuncionario.COMPSALARIO = 2),FBE(QueFuncionario.CODEMP,QueFuncionario.CODFUNC,FSOMAMES(&REFERE, (-1)),''N,F'',''1999''),((QueFuncionario.SALBASE*(IF(QueFuncionario.TIPSAL=5,QueFuncionario.HORASSEM*5,1))) + (&E1999))))/30';
  P_CODFORMINDNOVO := 'IF((QueFuncionario.COMPSALARIO = 2),FBE(QueFuncionario.CODEMP,QueFuncionario.CODFUNC,FSOMAMES(&REFERE, (-1)),''N,F'',''1999''),((QueFuncionario.SALBASE*(IF(QueFuncionario.TIPSAL=5,QueFuncionario.HORASSEM*5,1))) + (&E1999)))';
  
  IF P_FORMULA = 'A' THEN
    INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
      VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
             'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO);
    
    IF P_CODFORMINDNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO);
    END IF;
    
    IF P_DESCRFORMNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO);
    END IF;
    
    INSERT INTO TFPFOR (CODFORM, DESCRFORM, SANKHYA, FORMULA, CODFORMIND)
      VALUES(P_CODFORMULA, P_DESCRFORMNOVO, 'S', P_FORMULANOVO, P_CODFORMINDNOVO);
    
  ELSIF (P_FORMULANOVO <> P_FORMULA OR 
         NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') OR 
         NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z')) 
  THEN
    
    IF P_FORMULANOVO <> P_FORMULA THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO, P_FORMULA);
    END IF;
    
    IF NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO, P_CODFORMIND);
    END IF;
    
    IF NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO, P_DESCRFORMULA);
    END IF;
    
    UPDATE TFPFOR
    SET FORMULA = P_FORMULANOVO
    , DESCRFORM = P_DESCRFORMNOVO
    , CODFORMIND = P_CODFORMINDNOVO
    , FORMULANTERIOR = CASE WHEN FORMULA <> P_FORMULANOVO THEN P_FORMULA ELSE FORMULANTERIOR END
    , DTALTER = SYSDATE
    , CODUSU = 0
    WHERE CODFORM = P_CODFORMULA
    AND SANKHYA = 'S';
    
  END IF;
  
END;
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 23/03/2018 11:45:46
Num.Script: 51977-0-0
Nro. O.S. : 1158901
Nome      : Drop - CHK_TMPPARC_TFPS2206
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - CHK_TMPPARC_TFPS2206
NomeObjeto: CHK_TMPPARC_TFPS2206
TipoObjeto: CONSTRAINT
NomeTabela: TFPS2206
Executar  : SE_EXISTIR
Ocorrencia: 4210004
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPS2206 DROP CONSTRAINT CHK_TMPPARC_TFPS2206
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 23/03/2018 11:45:42
Num.Script: 51978-0-0
Nro. O.S. : 1158901
Nome      : Altera - SNK_PROCESSA_DADOS_ESOCIAL
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - SNK_PROCESSA_DADOS_ESOCIAL
NomeObjeto: SNK_PROCESSA_DADOS_ESOCIAL
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210004
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_PROCESSA_DADOS_ESOCIAL (
   P_CODEMPMATRIZ          NUMBER,
   P_DTREF                 DATE,
   P_TPAMB                 CHAR,                       /*P= PRODUCAO T=TESTE*/
   P_TIPDADOS              CHAR, /*P_TIPDADOS T= TODOS C=CADOSTRO M=MOVIMENTO*/
   P_EVENTO                VARCHAR2 := 'TODOS',
   P_SEQUENCIA_ATUAL       NUMBER,
   P_NOMETAB               VARCHAR2 := NULL,    /*UTILIZADO NA RECURSIVIDADE*/
   P_SEQUENCIA_PAI         VARCHAR2 := NULL,    /*UTILIZADO NA RECURSIVIDADE*/
   P_RESULT            OUT NUMBER)
AS
   P_SEQUENCIA_OLD          NUMBER (10);
   P_SEQUENCIA_NEW          NUMBER (10);
   P_DTREF_OLD              DATE;
   P_COLUNAS_PADRAO         VARCHAR2 (4000)
      := 'CODEMP, DTREF, STATUS, ACAO, NRORECIBO, NRORECIBO_ANT, SEQUENCIA, DTALTERACAO, DTEF, DSCALT, JUSTPRORR, MTVALTER, CONTROLE, TPAMB';
   queSql                   VARCHAR2 (8000);
   P_SEQUENCIA_DEL          NUMBER (10);
   P_COLUMNS                VARCHAR2 (4000);
   P_INSERT_COLUMNS         VARCHAR2 (4000);
   P_INSERT_VALUES          VARCHAR2 (4000);
   P_COLUMNS_PARAMETER      VARCHAR2 (4000)
      := 'CODEMP, DTREF, SEQUENCIA, STATUS, ACAO,NRORECIBO, NRORECIBO_ANT, ';
   P_COLUMNS_TO_PARAMETER   VARCHAR2 (4000)
      := 'CODEMP;, :DTREF, :SEQUENCIA, :STATUS, :ACAO,:NRORECIBO, :NRORECIBO_ANT, ';
   P_COL_PAD_FILHOS         VARCHAR2 (4000) := 'CODEMP, DTREF, SEQUENCIA, ';
   P_COL_PAD_FILHOS_PARAM   VARCHAR2 (4000) := 'CODEMP, :DTREF, :SEQUENCIA, ';
   P_TABLE_PAI              VARCHAR2 (100);
   P_VALID_ALTER            BOOLEAN := FALSE;
   P_COUNT                  NUMBER (10);
   P_DTLOG                  DATE;
   P_SEQLOG                 NUMBER (10);
   P_MSG                    VARCHAR2 (4000) := ' ';
BEGIN

   IF P_NOMETAB IS NULL
   THEN
      FOR EVE
         IN (  SELECT NOMETAB,
                      NOMEEVENTO,
                      NOMEVIEW,
                      NOMEEVEVENTOPAI
                 FROM TFPMON
                WHERE     TIPO = 'C'
                      AND (P_EVENTO = 'TODOS' OR NOMEEVENTO = P_EVENTO)
                      AND NOMEEVEVENTOPAI IS NULL
                      AND (   (P_TPAMB = 'P' AND AMBPRODUCAO = 'L')
                           OR (P_TPAMB = 'T' AND AMBTESTE = 'L'))
             ORDER BY NOMETAB--GROUP BY NOMETAB, NOMEEVENTO, NOMEVIEW, NOMEEVEVENTOPAI
            )
      LOOP
         queSql :=
               ' SELECT COUNT(1)  
                        FROM '
            || EVE.NOMETAB
            || '
                        WHERE CODEMP = :CODEMP
                          AND DTREF = :DTREF
                          AND TPAMB = :TPAMB
                          AND STATUS = ''I''';

         EXECUTE IMMEDIATE queSql
            INTO P_COUNT
            USING P_CODEMPMATRIZ, P_DTREF, P_TPAMB;

         IF P_COUNT > 0
         THEN
            RAISE_APPLICATION_ERROR (
               -20101,
               'Não é possivel gerar dados do e-social se existir eventos em processo de envio.');
         END IF;

         queSql :=
               ' SELECT MAX(SEQUENCIA)  
                        FROM '
            || EVE.NOMETAB
            || '
                        WHERE CODEMP = :CODEMP
                          AND DTREF = :DTREF
                          AND TPAMB = :TPAMB
                          AND STATUS = ''P''';

         EXECUTE IMMEDIATE queSql
            INTO P_SEQUENCIA_DEL
            USING P_CODEMPMATRIZ, P_DTREF, P_TPAMB;

         IF P_SEQUENCIA_DEL > 0 THEN /* SE EXISTE STATUS IGUAL A 'P' PODEMOS DELETAR, JA QUE MANDAMOS TODAS AS INFORMACOES DE UMA SO VEZ! */
            FOR CUR_DEL IN (SELECT NOMETAB
                              FROM TFPMON
                             WHERE NOMEEVEVENTOPAI IS NULL AND TIPO = 'C')
            LOOP
               queSql :=
                     ' DELETE FROM '
                  || CUR_DEL.NOMETAB
                  || '
                                WHERE CODEMP = :CODEMP
                                  AND DTREF = :DTREF
                                  AND TPAMB = :TPAMB
                                  AND SEQUENCIA = :SEQUENCIA';

               EXECUTE IMMEDIATE queSql
                  USING P_CODEMPMATRIZ,
                        P_DTREF,
                        P_TPAMB,
                        P_SEQUENCIA_DEL;
            END LOOP;

            P_SEQUENCIA_NEW := P_SEQUENCIA_ATUAL;
            EXIT;
         END IF;
      END LOOP;
   ELSE
      P_SEQUENCIA_NEW := P_SEQUENCIA_PAI;
   END IF;

   IF P_SEQUENCIA_NEW IS NULL THEN /*SE P_SEQUENCIA_NEW ESTA NULL, E PORQUE NAO DELETOU DAGOS, LOGO TEMOS QUE GERAR UMA SEQUENCIA NOVA.*/
      P_SEQUENCIA_NEW := P_SEQUENCIA_ATUAL + 1;
   END IF;
   
   IF P_NOMETAB IS NULL THEN
    SNK_SET_ESOCIAL_PKG(P_TPAMB, P_DTREF, CASE WHEN NVL(P_SEQUENCIA_DEL, 0) > 0 THEN P_SEQUENCIA_ATUAL - 1 ELSE P_SEQUENCIA_ATUAL END);
   END IF;

   FOR EVE
      IN (  SELECT MON.NOMETAB,
                   MON.NOMEEVENTO,
                   MON.NOMEVIEW,
                   MON.NOMEEVEVENTOPAI,
                   MON.TIPO
              FROM TFPMON MON
             WHERE    (P_NOMETAB IS NOT NULL AND MON.NOMETAB = P_NOMETAB)
                   OR     (    P_NOMETAB IS NULL
                           AND NOMEEVEVENTOPAI IS NULL
                           AND (P_EVENTO = 'TODOS' OR MON.NOMEEVENTO = P_EVENTO)
                           AND (P_TIPDADOS = 'T' OR MON.TIPO = P_TIPDADOS))
                      AND TIPO = 'C'
                      AND (   (P_TPAMB = 'P' AND MON.AMBPRODUCAO = 'L')
                           OR (P_TPAMB = 'T' AND MON.AMBTESTE = 'L'))
          GROUP BY MON.NOMETAB,
                   MON.NOMEEVENTO,
                   MON.NOMEVIEW,
                   MON.NOMEEVEVENTOPAI,
                   MON.TIPO
          ORDER BY MON.NOMETAB)
   LOOP
      P_MSG := 'EVENTO: ' || EVE.NOMEEVENTO;

      IF EVE.TIPO IN ('T', 'C')
      THEN
         P_INSERT_COLUMNS := SNK_GET_COLUMNS_TABLE (EVE.NOMETAB);
         P_INSERT_VALUES := P_INSERT_COLUMNS;
         P_INSERT_VALUES :=
            REPLACE (P_INSERT_VALUES, 'SEQUENCIA', TO_CHAR (P_SEQUENCIA_NEW));
         P_INSERT_VALUES :=
            REPLACE (
               P_INSERT_VALUES,
               'DTREF',
                  'TO_DATE('''
               || SNK_FORMAT_DATE (P_DTREF, 'DD/MM/YYYY HH24:MI:SS')
               || ''', ''DD/MM/YYYY HH24:MI:SS'')');
         P_INSERT_VALUES :=
            REPLACE (P_INSERT_VALUES, 'TPAMB', '''' || P_TPAMB || '''');

         IF EVE.NOMEEVEVENTOPAI IS NULL
         THEN
            P_TABLE_PAI := EVE.NOMETAB;

            IF P_SEQUENCIA_NEW > 1
            THEN
               --P_SEQUENCIA_OLD := P_SEQUENCIA_NEW - 1; --Nao pode ser assim, pois na primeira geracao, pode nao ter gerado algum evento.
               queSql :=
                     ' SELECT NVL(MAX(SEQUENCIA),0)  
                                FROM '
                  || EVE.NOMETAB
                  || '
                                WHERE CODEMP = :CODEMP
                                  AND DTREF = :DTREF
                                  AND TPAMB = :TPAMB
                                  AND SEQUENCIA < :SEQUENCIA_NEW';

               EXECUTE IMMEDIATE queSql
                  INTO P_SEQUENCIA_OLD
                  USING P_CODEMPMATRIZ,
                        P_DTREF,
                        P_TPAMB,
                        P_SEQUENCIA_NEW;

               P_DTREF_OLD := P_DTREF;
            ELSE
               queSql :=
                     ' SELECT NVL(MAX(DTREF), :DTMOV)
                                FROM '
                  || EVE.NOMETAB
                  || '
                                WHERE CODEMP = :CODEMP
                                  AND DTREF < :DTREF
                                  AND TPAMB = :TPAMB';

               EXECUTE IMMEDIATE queSql
                  INTO P_DTREF_OLD
                  USING P_DTREF,
                        P_CODEMPMATRIZ,
                        P_DTREF,
                        P_TPAMB;

               P_DTREF_OLD := NVL (P_DTREF_OLD, P_DTREF);

               IF P_DTREF_OLD <> P_DTREF
               THEN
                  queSql :=
                        ' SELECT NVL(MAX(SEQUENCIA),0)
                                    FROM '
                     || EVE.NOMETAB
                     || '
                                    WHERE CODEMP = :CODEMP
                                      AND DTREF = :DTREF
                                      AND TPAMB = :TPAMB';

                  EXECUTE IMMEDIATE queSql
                     INTO P_SEQUENCIA_OLD
                     USING P_CODEMPMATRIZ, P_DTREF_OLD, P_TPAMB;
               ELSE
                  P_SEQUENCIA_OLD := P_SEQUENCIA_NEW;
               END IF;
            END IF;

            IF P_DTREF_OLD <> P_DTREF OR P_SEQUENCIA_OLD <> P_SEQUENCIA_NEW
            THEN
               queSql := NULL;
               SNK_GET_VALID_ALTER_ESOCIAL (P_EVENTO,
                                            P_COLUNAS_PADRAO,
                                            P_CODEMPMATRIZ,
                                            P_DTREF_OLD,
                                            P_SEQUENCIA_OLD,
                                            P_TPAMB,
                                            NULL                /*NOMETABPAI*/
                                                ,
                                            EVE.NOMETAB,
                                            EVE.NOMEVIEW);
            END IF;

            P_INSERT_VALUES :=
               REPLACE (P_INSERT_VALUES, 'CONTROLE', '''I'' AS CONTROLE');
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'CHAVE', 'V.CHAVE');
            P_INSERT_VALUES :=
               REPLACE (
                  P_INSERT_VALUES,
                  'NRORECIBO,',
                  'CASE WHEN ANT.CHAVE IS NULL OR ANT.CONTROLE = ''I'' THEN ANT.NRORECIBO ELSE NULL END,');
            P_INSERT_VALUES :=
               REPLACE (
                  P_INSERT_VALUES,
                  'NRORECIBO_ANT,',
                  'CASE WHEN ANT.CHAVE IS NULL OR ANT.CONTROLE = ''I'' THEN ANT.NRORECIBO_ANT ELSE ANT.NRORECIBO END,'); /* TEM QUE SER PRIMEIRO POR QUE EXISTE NRORECIBO E O NRORECIBO_ANT */
            P_INSERT_VALUES :=
               REPLACE (
                  P_INSERT_VALUES,
                  'STATUS',
                  'CASE WHEN NVL(ANT.CONTROLE, '' '') = ''I'' AND NVL(ANT.STATUS, '' '') = ''F'' THEN ''F'' ELSE ''P'' END');
            P_INSERT_VALUES :=
               REPLACE (
                  P_INSERT_VALUES,
                  ' ACAO',
                  'CASE WHEN EXISTS(SELECT 1 FROM TFPEVT WHERE GRUPOESOCIAL = 1 AND TIPOEVENTO = '''||EVE.NOMEEVENTO||''') THEN ''I'' WHEN ANT.NRORECIBO IS NULL AND ANT.NRORECIBO_ANT IS NULL THEN ''I'' WHEN ANT.STATUS = ''F'' THEN NVL(ANT.CONTROLE, ''I'') ELSE NVL(ANT.ACAO, ''I'') END');

            queSql :=
                  'INSERT INTO '
               || EVE.NOMETAB
               || ' 
                               SELECT '
               || P_INSERT_VALUES
               || '
                               FROM '
               || EVE.NOMEVIEW
               || ' V
                                    LEFT JOIN (SELECT CHAVE
                                                    , STATUS
                                                    , NRORECIBO
                                                    , NRORECIBO_ANT
                                                    , ACAO
                                                    , CONTROLE
                                               FROM '
               || EVE.NOMETAB
               || ' OLD
                                               WHERE OLD.CODEMP = '
               || TO_CHAR (P_CODEMPMATRIZ)
               || '
                                     AND OLD.DTREF = TO_DATE('''
               || SNK_FORMAT_DATE (P_DTREF_OLD, 'DD/MM/YYYY HH24:MI:SS')
               || ''', ''DD/MM/YYYY HH24:MI:SS'')
                                                 AND OLD.SEQUENCIA = '
               || TO_CHAR (P_SEQUENCIA_OLD)
               || '
                                                 AND OLD.TPAMB = '''
               || P_TPAMB
               || ''') ANT ON ANT.CHAVE = V.CHAVE
                               WHERE CODEMP = '
               || TO_CHAR (P_CODEMPMATRIZ);

            EXECUTE IMMEDIATE queSql;
         ELSE                                 /*SO ENTRA AQUI PARA OS FILHOS*/
            queSql :=
                  '
                          INSERT INTO '
               || EVE.NOMETAB
               || ' 
                              SELECT '
               || P_INSERT_VALUES
               || '
                              FROM '
               || EVE.NOMEVIEW
               || '
                              WHERE CODEMP = :CODEMPMATRIZ';
            
            EXECUTE IMMEDIATE queSql USING P_CODEMPMATRIZ;
         END IF;
      END IF;

      -- IF P_TIPDADOS IN ('T', 'M') THEN

      --END IF;

      /* INCLUSAO DAS LINHAS DE EXCLUSAO */
      IF     (P_DTREF_OLD <> P_DTREF OR P_SEQUENCIA_OLD <> P_SEQUENCIA_NEW)
         AND (P_DTREF_OLD IS NOT NULL AND P_SEQUENCIA_OLD IS NOT NULL)
      THEN
         P_INSERT_COLUMNS := SNK_GET_COLUMNS_TABLE (EVE.NOMETAB);
         P_INSERT_VALUES := P_INSERT_COLUMNS;
         P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' ', '');
         P_INSERT_VALUES := 'O.' || REPLACE (P_INSERT_VALUES, ',', ',O.');
         P_INSERT_VALUES :=
            REPLACE (P_INSERT_VALUES,
                     'O.SEQUENCIA',
                     TO_CHAR (P_SEQUENCIA_NEW));
         P_INSERT_VALUES :=
            REPLACE (P_INSERT_VALUES, 'O.TPAMB', '''' || P_TPAMB || '''');
         P_INSERT_VALUES :=
            REPLACE (
               P_INSERT_VALUES,
               'O.DTREF',
                  'TO_DATE('''
               || SNK_FORMAT_DATE (P_DTREF, 'DD/MM/YYYY HH24:MI:SS')
               || ''', ''DD/MM/YYYY HH24:MI:SS'')');

         IF EVE.NOMEEVEVENTOPAI IS NULL
         THEN
            P_INSERT_VALUES :=
               REPLACE (P_INSERT_VALUES, 'O.CONTROLE', '''E''');
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.CHAVE', 'O.CHAVE');
            P_INSERT_VALUES :=
               REPLACE (P_INSERT_VALUES, 'O.NRORECIBO,', 'NULL,');
            P_INSERT_VALUES :=
               REPLACE (P_INSERT_VALUES, 'O.NRORECIBO_ANT,', 'O.NRORECIBO,'); /* TEM QUE SER PRIMEIRO POR QUE EXISTE NRORECIBO E O NRORECIBO_ANT */
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.STATUS', '''P''');
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.ACAO', '''E''');

            queSql :=
                  ' MERGE INTO '
               || EVE.NOMETAB
               || ' N
                                USING (SELECT '
               || P_INSERT_COLUMNS
               || ' 
                                       FROM '
               || EVE.NOMETAB
               || ' 
                                       WHERE CODEMP = '
               || TO_CHAR (P_CODEMPMATRIZ)
               || '
                                         AND DTREF = TO_DATE('''
               || SNK_FORMAT_DATE (P_DTREF_OLD, 'DD/MM/YYYY HH24:MI:SS')
               || ''', ''DD/MM/YYYY HH24:MI:SS'')
                                         AND SEQUENCIA = '
               || TO_CHAR (P_SEQUENCIA_OLD)
               || '
                                         AND TPAMB = '''|| P_TPAMB || '''
                                         AND (('''|| EVE.NOMEEVENTO|| ''' NOT IN (''S-2205'', ''S-2206'', ''S-2306'')) OR
                                              ('''|| EVE.NOMEEVENTO|| ''' = ''S-2205'' AND EXISTS(SELECT 1 FROM TFPFUN WHERE CODEMP||'':''||CODFUNC = CHAVE AND SITESOCIAL IN (''5'', ''T'') )) OR 
                                              ('''|| EVE.NOMEEVENTO|| ''' IN (''S-2206'', ''S-2306'') AND EXISTS(SELECT 1 FROM TFPFUN WHERE CODEMP||'':''||CODFUNC = CHAVE AND SITESOCIAL IN (''6'', ''T'') ))
                                             )
                                         AND ((STATUS = ''F'' AND NRORECIBO IS NOT NULL) OR (STATUS <> ''F'' AND ACAO = ''E'' AND NRORECIBO IS NULL) OR (STATUS <> ''F'' AND ACAO <> ''E'' AND NRORECIBO_ANT IS NOT NULL) )
                                          ) O 
                                ON (N.CODEMP = O.CODEMP AND
                                    N.DTREF = TO_DATE('''
               || SNK_FORMAT_DATE (P_DTREF, 'DD/MM/YYYY HH24:MI:SS')
               || ''', ''DD/MM/YYYY HH24:MI:SS'') AND
                                    N.SEQUENCIA = '
               || TO_CHAR (P_SEQUENCIA_NEW)
               || ' AND 
                                    N.TPAMB = '''
               || P_TPAMB
               || ''' AND 
                                    N.CHAVE = O.CHAVE 
                                    )
                                WHEN NOT MATCHED THEN INSERT ('
               || P_INSERT_COLUMNS
               || ')
                                       VALUES ('
               || P_INSERT_VALUES
               || ' ) ';

            EXECUTE IMMEDIATE queSql;
         ELSE                                 /*SO ENTRA AQUI PARA OS FILHOS*/
            queSql :=
                  ' MERGE INTO '
               || EVE.NOMETAB
               || ' N
                                USING (SELECT '
               || P_INSERT_COLUMNS
               || ' 
                                       FROM '
               || EVE.NOMETAB
               || ' 
                                       WHERE CODEMP = '
               || TO_CHAR (P_CODEMPMATRIZ)
               || '
                                         AND DTREF = TO_DATE('''
               || SNK_FORMAT_DATE (P_DTREF_OLD, 'DD/MM/YYYY HH24:MI:SS')
               || ''', ''DD/MM/YYYY HH24:MI:SS'')
                                         AND SEQUENCIA = '
               || TO_CHAR (P_SEQUENCIA_OLD)
               || '
                                         AND TPAMB = '''
               || P_TPAMB
               || '''
                                          ) O 
                                ON (N.CODEMP = O.CODEMP AND
                                    N.DTREF = TO_DATE('''
               || SNK_FORMAT_DATE (P_DTREF, 'DD/MM/YYYY HH24:MI:SS')
               || ''', ''DD/MM/YYYY HH24:MI:SS'') AND
                                    N.SEQUENCIA = '
               || TO_CHAR (P_SEQUENCIA_NEW)
               || ' AND
                                    N.TPAMB = O.TPAMB AND
                                    N.CHAVE = O.CHAVE)
                                WHEN NOT MATCHED THEN INSERT ('
               || P_INSERT_COLUMNS
               || ')
                                    VALUES ('
               || P_INSERT_VALUES
               || ' ) ';

            EXECUTE IMMEDIATE queSql;
         END IF;
      END IF;

      FOR EVEF
         IN (  SELECT NOMETAB,
                      NOMEEVENTO,
                      NOMEVIEW,
                      NOMEEVEVENTOPAI
                 FROM TFPMON
                WHERE     TIPO = 'C'
                      AND NOMEEVEVENTOPAI = EVE.NOMETAB
                      AND (   (P_TPAMB = 'P' AND AMBPRODUCAO = 'L')
                           OR (P_TPAMB = 'T' AND AMBTESTE = 'L'))
             ORDER BY NOMETAB)
      LOOP
         queSql := NULL;

         SNK_PROCESSA_DADOS_ESOCIAL (P_CODEMPMATRIZ,
                                     P_DTREF,
                                     P_TPAMB,
                                     P_TIPDADOS,
                                     EVEF.NOMEEVENTO,
                                     P_SEQUENCIA_NEW,
                                     EVEF.NOMETAB,
                                     P_SEQUENCIA_NEW,
                                     P_RESULT);
      END LOOP;

      P_RESULT := P_SEQUENCIA_NEW;
   END LOOP;
EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK;

      IF queSql IS NOT NULL
      THEN
         P_DTLOG := SYSDATE;

         SELECT COUNT (1) + 1
           INTO P_SEQLOG
           FROM LOGESOCIAL
          WHERE DTLOG = P_DTLOG;

         INSERT INTO LOGESOCIAL (DTLOG, SEQUENCIA, COMANDO)
            SELECT P_DTLOG, P_SEQLOG, SUBSTR (queSql, 1, 4000) FROM DUAL;

         IF LENGTH (queSql) > 4000
         THEN
            INSERT INTO LOGESOCIAL (DTLOG, SEQUENCIA, COMANDO)
               SELECT P_DTLOG, P_SEQLOG + 1, SUBSTR (queSql, 4001) FROM DUAL;
         END IF;

         COMMIT;
      END IF;

      P_MSG := P_MSG || SUBSTR (SQLERRM, 1, 3950);
      RAISE_APPLICATION_ERROR (-20101, P_MSG);
END;
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 23/03/2018 11:45:36
Num.Script: 51979-0-0
Nro. O.S. : 1158901
Nome      : Altera - TRG_INC_UPD_TFPS2200
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - TRG_INC_UPD_TFPS2200
NomeObjeto: TRG_INC_UPD_TFPS2200
TipoObjeto: TRIGGER
NomeTabela: TFPS2200
Executar  : SE_EXISTIR
Ocorrencia: 4210004
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_INC_UPD_TFPS2200
BEFORE INSERT OR UPDATE ON TFPS2200
FOR EACH ROW
DECLARE P_COUNT     NUMBER(10);

BEGIN

IF (INSERTING AND (:NEW.STATUS = 'F')) OR 
   (UPDATING AND (:NEW.STATUS = 'F') AND (:OLD.STATUS <> :NEW.STATUS)) THEN
    SELECT COUNT(1) INTO P_COUNT
    FROM TFPS2205
    WHERE CODEMP = :NEW.CODEMP 
      AND CHAVE = :NEW.CHAVE
      AND TPAMB = SNK_GET_TPAMB_ESOCIAL
      AND EXISTS(SELECT 1   /* SE O FUNCIONÁRIO NÃO FOI LIBERADO PARA O EVENTO 2205 TEM QUE CONTINUAR GERANDO O 2205 COMO UMA CÓPIA DO 2200*/
                 FROM TFPFUN
                 WHERE CODEMP||':'||CODFUNC = TFPS2205.CHAVE
                   AND SITESOCIAL IN ('5', 'T'));
      
    IF P_COUNT = 0 THEN
        INSERT INTO TFPS2205(UFCTPS, UFCNH, UFBRASIL, TRABAPOSENT, TPLOGRADBRASIL, 
                             TPINSCEMPREGADOR, STATUS, SEXO, SERIECTPS, SEQUENCIA, 
                             REABREADAP, RACACOR, PAISRESID, ORGAOEMISSORRNE, 
                             ORGAOEMISSORRIC, ORGAOEMISSORRG, ORGAOEMISSOROC, 
                             OBSERVACAO, NRRNE, NRRIC, NRRG, NRREGCNH, 
                             NRORECIBO_ANT, NRORECIBO, NROC, NRLOGRADEXTERIOR, 
                             NRLOGRADBRASIL, NRINSCEMPREGADOR, NRCTPS, NMTRAB, 
                             NMSOC, NMCIDEXTERIOR, NISTRAB, INFOCOTA, FONEPRINC, 
                             FONEALTERNAT, FILHOSBR, ESTCIV, EMAILPRINC, DTVALIDOC, 
                             DTVALIDCNH, DTREF, DTPRIHAB, DTEXPEDRNE, DTEXPEDRIC, 
                             DTEXPEDRG, DTEXPEDOC, DTEXPEDCNH, DTCHEGADA, 
                             DTALTERACAO, DSCLOGRADEXTERIOR, DSCLOGRADBRASIL, 
                             DEFVISUAL, DEFMENTAL, DEFINTELECTUAL, DEFFISICA, 
                             DEFAUDITIVA, CPFTRAB, COMPLEMENTOEXTERIOR, 
                             COMPLEMENTOBRASIL, CODPOSTALEXTERIOR, CODMUNICBRASIL, 
                             CODEMP, CLASSTRABESTRANG, CHAVE, CEPBRASIL, 
                             CATEGORIACNH, CASADOBR, BAIRROEXTERIOR, BAIRROBRASIL, 
                             ACAO, TPAMB)
            VALUES(:NEW.UFCTPS, :NEW.UFCNH, :NEW.UFBRASIL, :NEW.TRABAPOSENT, :NEW.TPLOGRADBRASIL, 
                   :NEW.TPINSCEMPREGADOR, :NEW.STATUS, :NEW.SEXO, :NEW.SERIECTPS, :NEW.SEQUENCIA, 
                   :NEW.REABREADAP, :NEW.RACACOR, :NEW.PAISRESID, :NEW.ORGAOEMISSORRNE, 
                   :NEW.ORGAOEMISSORRIC, :NEW.ORGAOEMISSORRG, :NEW.ORGAOEMISSOROC, 
                   :NEW.OBSERVACAO, :NEW.NRRNE, :NEW.NRRIC, :NEW.NRRG, :NEW.NRREGCNH, 
                   :NEW.NRORECIBO_ANT, :NEW.NRORECIBO, :NEW.NROC, :NEW.NRLOGRADEXTERIOR, 
                   :NEW.NRLOGRADBRASIL, :NEW.NRINSCEMPREGADOR, :NEW.NRCTPS, :NEW.NMTRAB, 
                   :NEW.NMSOC, :NEW.NMCIDEXTERIOR, :NEW.NISTRAB, :NEW.INFOCOTA, :NEW.FONEPRINC, 
                   :NEW.FONEALTERNAT, :NEW.FILHOSBR, :NEW.ESTCIV, :NEW.EMAILPRINC, :NEW.DTVALIDOC, 
                   :NEW.DTVALIDCNH, :NEW.DTREF, :NEW.DTPRIHAB, :NEW.DTEXPEDRNE, :NEW.DTEXPEDRIC, 
                   :NEW.DTEXPEDRG, :NEW.DTEXPEDOC, :NEW.DTEXPEDCNH, :NEW.DTCHEGADA, 
                    NULL /*DTALTERACAO*/, :NEW.DSCLOGRADEXTERIOR, :NEW.DSCLOGRADBRASIL, 
                   :NEW.DEFVISUAL, :NEW.DEFMENTAL, :NEW.DEFINTELECTUAL, :NEW.DEFFISICA, 
                   :NEW.DEFAUDITIVA, :NEW.CPFTRAB, :NEW.COMPLEMENTOEXTERIOR, 
                   :NEW.COMPLEMENTOBRASIL, :NEW.CODPOSTALEXTERIOR, :NEW.CODMUNICBRASIL, 
                   :NEW.CODEMP, :NEW.CLASSTRABESTRANG, :NEW.CHAVE, :NEW.CEPBRASIL, 
                   :NEW.CATEGORIACNH, :NEW.CASADOBR, :NEW.BAIRROEXTERIOR, :NEW.BAIRROBRASIL, 
                   :NEW.ACAO, :NEW.TPAMB);

  --          INSERT INTO TFPS2205_DEPENDENTE (CODEMP, DTREF, SEQUENCIA, TPDEP, NMDEP, DTNASCTO, CPFDEP, DEPIRRF, DEPSF, INCTRAB, CHAVEPAI, CHAVE, TPAMB)
  --          SELECT CODEMP, :NEW.DTREF, :NEW.SEQUENCIA, TPDEP, NMDEP, DTNASCTO, CPFDEP, DEPIRRF, DEPSF, INCTRAB, CHAVEPAI, CHAVE, SNK_GET_TPAMB_ESOCIAL
  --            FROM VGF_EVENTO_S2200_DEPENDENTE
  --          WHERE CODEMP = :NEW.CODEMP;

    END IF;

    SELECT COUNT(1) INTO P_COUNT
    FROM TFPS2206
    WHERE CODEMP = :NEW.CODEMP 
      AND CHAVE = :NEW.CHAVE
      AND EXISTS(SELECT 1   /* SE O FUNCIONÁRIO NÃO FOI LIBERADO PARA O EVENTO 2205 TEM QUE CONTINUAR GERANDO O 2205 COMO UMA CÓPIA DO 2200*/
                 FROM TFPFUN
                 WHERE CODEMP||':'||CODFUNC = TFPS2206.CHAVE
                   AND SITESOCIAL IN ('6', 'T'));
    IF P_COUNT = 0 THEN 
        INSERT INTO TFPS2206(CODEMP, DTREF, SEQUENCIA, TPINSCEMPREGADOR, 
                             NRINSCEMPREGADOR, CPFTRAB, NISTRAB, MATRICULA, 
                             DTALTERACAO, DTEF, DSCALT, TPREGTRAB, TPREGPREV, 
                             TPREGJOR, NATATIVIDADE, DTBASE, CNPJSINDCATEGPROF, 
                             JUSTPRORR, TPPLANRP, CODCARGO, CODFUNCAO, CODCATEG, 
                             CODCATEG2, CODCARREIRA, DTINGRCARR, VRSALFX, 
                             UNDSALFIXO, DSCSALVAR, TPCONTR, DTTERM, 
                             TPINSCLOCALTRABGERAL, NRINSCLOCALTRABGERAL, 
                             TPLOGRADLOCALTRABDOM, DSCLOGRADLOCALTRABDOM, 
                             NRLOGRADLOCALTRABDOM, COMPLEMENTOLOCALTRABDOM, 
                             BAIRROLOCALTRABDOM, CEPLOCALTRABDOM, CODMUNICLOCALTRABDOM, 
                             UFLOCALTRABDOM, QTDHRSSEM, TPJORNADA, DSCTPJORN, TMPPARC, 
                             CNPJSINDTRAB, NRPROCJUDALVARAJUDICIAL, MTVALTER, STATUS, 
                             NRORECIBO, NRORECIBO_ANT, ACAO, CHAVE, TPAMB)
            VALUES(:NEW.CODEMP, :NEW.DTREF, :NEW.SEQUENCIA, :NEW.TPINSCEMPREGADOR, 
                   :NEW.NRINSCEMPREGADOR, :NEW.CPFTRAB, :NEW.NISTRAB, :NEW.MATRICULA, 
                    NULL /*:NEW.DTALTERACAO*/, NULL/*:NEW.DTEF*/, NULL /*:NEW.DSCALT*/, :NEW.TPREGTRAB, :NEW.TPREGPREV, 
                   :NEW.TPREGJOR, :NEW.NATATIVIDADE, :NEW.DTBASE, :NEW.CNPJSINDCATEGPROF, 
                    NULL /*:NEW.JUSTPRORR*/, :NEW.TPPLANRP, :NEW.CODCARGO, :NEW.CODFUNCAO, :NEW.CODCATEG, 
                   :NEW.CODCATEG2, :NEW.CODCARREIRA, :NEW.DTINGRCARR, :NEW.VRSALFX, 
                   :NEW.UNDSALFIXO, :NEW.DSCSALVAR, :NEW.TPCONTR, :NEW.DTTERM, 
                   :NEW.TPINSCLOCALTRABGERAL, :NEW.NRINSCLOCALTRABGERAL, 
                   :NEW.TPLOGRADLOCALTRABDOM, :NEW.DSCLOGRADLOCALTRABDOM, 
                   :NEW.NRLOGRADLOCALTRABDOM, :NEW.COMPLEMENTOLOCALTRABDOM, 
                   :NEW.BAIRROLOCALTRABDOM, :NEW.CEPLOCALTRABDOM, :NEW.CODMUNICLOCALTRABDOM, 
                   :NEW.UFLOCALTRABDOM, :NEW.QTDHRSSEM, :NEW.TPJORNADA, :NEW.DSCTPJORN, :NEW.TMPPARC, 
                   :NEW.CNPJSINDTRAB, :NEW.NRPROCJUDALVARAJUDICIAL, NULL /*:NEW.MTVALTE*/, :NEW.STATUS, 
                   :NEW.NRORECIBO, :NEW.NRORECIBO_ANT, :NEW.ACAO, :NEW.CHAVE, :NEW.TPAMB);

 
         --   INSERT INTO TFPS2206_HORARIO (CODEMP, DTREF, SEQUENCIA, DIA, CODHORCONTRAT, CHAVEPAI, CHAVE, TPAMB)
         --   SELECT CODEMP, :NEW.DTREF, :NEW.SEQUENCIA, DIA, CODHORCONTRAT, CHAVEPAI, CHAVE, SNK_GET_TPAMB_ESOCIAL
         --     FROM VGF_EVENTO_S2200_HORARIO
         --   WHERE CODEMP = :NEW.CODEMP;

   END IF;

END IF;

--COMMIT;

END;
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 23/03/2018 11:45:31
Num.Script: 51980-0-0
Nro. O.S. : 1158901
Nome      : Altera - VGF_EVENTO_S1050_INTERVALO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VGF_EVENTO_S1050_INTERVALO
NomeObjeto: VGF_EVENTO_S1050_INTERVALO
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210004
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1050_INTERVALO
AS
   SELECT CHAVE,
          CODEMP,
          SUM (DURINTERV) AS DURINTERV,
          CASE WHEN COUNT (1) > 1 THEN NULL ELSE MIN (INIINTERV) END
             AS INIINTERV,
          CASE WHEN COUNT (1) > 1 THEN NULL ELSE MAX (TERMINTERV) END
             AS TERMINTERV,
          CODCARGAHORESOCIAL
   FROM (SELECT PAI.CHAVE,
                  PAI.CODEMP,
                  CASE
                     WHEN INTE.CODCARGAHORESOCIAL IS NOT NULL
                     THEN
                        ROUND (
                             (  (  HR2DEC (
                                      CAST (INTE.TERMINTERV AS INTEGER))
                                 + HR2DEC (
                                      CASE
                                         WHEN   CAST (
                                                   INTE.TERMINTERV AS INTEGER)
                                              - CAST (
                                                   INTE.INIINTERV AS INTEGER) <
                                                 0
                                         THEN
                                            2400
                                         ELSE
                                            0
                                      END))
                              - HR2DEC (
                                   CAST (INTE.INIINTERV AS INTEGER)))
                           * 60,
                           2)
                     ELSE
                        PAI.DURINTERV
                  END
                     AS DURINTERV,
                  CASE
                     WHEN INTE.CODCARGAHORESOCIAL IS NOT NULL
                     THEN
                          LPAD(INTE.INIINTERV,4,'0')
                     ELSE
                          LPAD(PAI.INIINTERV,4,'0')
                  END
                     AS INIINTERV,
                  CASE
                     WHEN INTE.CODCARGAHORESOCIAL IS NOT NULL
                     THEN
                          LPAD(INTE.TERMINTERV,4,'0')
                     ELSE
                          LPAD(PAI.TERMINTERV,4,'0')
                  END
                     AS TERMINTERV,
                  PAI.CHAVE AS CODCARGAHORESOCIAL
             FROM VGF_EVENTO_S1050 PAI   LEFT JOIN VGF_EVENTO_S1050_DADOS_INTERV INTE ON PAI.CODEMP = INTE.CODEMP AND PAI.CHAVE = INTE.CODCARGAHORESOCIAL AND PAI.TPINTERV <> 2) RESULT
             GROUP BY CHAVE, CODEMP, CODCARGAHORESOCIAL
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 16/03/2018 11:04:50
Num.Script: 51994-0-0
Nro. O.S. : 1159814
Nome      : Alterar - TRG_UPD_TFPTPR
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - TRG_UPD_TFPTPR
NomeObjeto: TRG_UPD_TFPTPR
TipoObjeto: TRIGGER
NomeTabela: TFPTPR
Executar  : SE_EXISTIR
Ocorrencia: 4210004
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_UPD_TFPTPR
BEFORE UPDATE ON TFPTPR
FOR EACH ROW
DECLARE P_COUNT             NUMBER(5);
BEGIN
    SELECT COUNT(1) INTO P_COUNT
    FROM TFPFUN
    WHERE CODTPR = :NEW.CODTPR;

    IF  P_COUNT > 0 THEN
        IF ((:OLD.CODMOTDESLIGESOCIAL <> :NEW.CODMOTDESLIGESOCIAL) AND (:OLD.CODMOTDESLIGESOCIAL IS NOT NULL))  OR 
           (:OLD.CODAFASTRAIS  <> :NEW.CODAFASTRAIS) OR
           (:OLD.CODAFASTCAGED <> :NEW.CODAFASTCAGED) OR
           (:OLD.CODSAQUEFGTS  <> :NEW.CODSAQUEFGTS) OR
           (:OLD.CODAFASTFGTS  <> :NEW.CODAFASTFGTS) OR
           (:OLD.GERAPREVISAO  <> :NEW.GERAPREVISAO) THEN
          RAISE_APPLICATION_ERROR(-20101, 'PROIBIDO ALTERAR TIPO DE RESCISÃO JÁ UTILIZADO !!!');
        END IF;
    END IF;
END;
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 16/03/2018 11:05:01
Num.Script: 51995-0-0
Nro. O.S. : 1159814
Nome      : Cria - TFPFUN IDCONSIG
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: IDCONSIG
TipoObjeto: COLUMN
NomeTabela: TFPFUN
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210004
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TFPFUN ADD IDCONSIG CHAR(1)';
   EXECUTE IMMEDIATE 'UPDATE TFPFUN SET IDCONSIG = ''N''';
   EXECUTE IMMEDIATE 'ALTER TABLE TFPFUN ADD  CONSTRAINT CKC_IDCONSIG_TFPFUN CHECK (IDCONSIG IN (''S'',''N''))';
   EXECUTE IMMEDIATE 'ALTER TABLE TFPFUN MODIFY IDCONSIG DEFAULT ''N'' NOT NULL';
END;
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 16/03/2018 11:05:05
Num.Script: 51996-0-0
Nro. O.S. : 1159814
Nome      : Cria - TFPFUN INSCONSIG
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: INSCONSIG
TipoObjeto: COLUMN
NomeTabela: TFPFUN
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210004
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPFUN ADD INSCONSIG VARCHAR2(5)
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 16/03/2018 11:05:08
Num.Script: 51997-0-0
Nro. O.S. : 1159814
Nome      : Cria - TFPFUN NRCONTR
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: NRCONTR
TipoObjeto: COLUMN
NomeTabela: TFPFUN
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210004
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPFUN ADD NRCONTR VARCHAR2(15)
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 16/03/2018 11:05:11
Num.Script: 51998-0-0
Nro. O.S. : 1159814
Nome      : Cria - TFPFUN NRCERTOBITO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: NRCERTOBITO
TipoObjeto: COLUMN
NomeTabela: TFPFUN
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210004
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPFUN ADD NRCERTOBITO VARCHAR2(32)
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 16/03/2018 11:05:15
Num.Script: 51999-0-0
Nro. O.S. : 1159814
Nome      : Cria - TFPFUN NUPROCESSOTRAB
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: NUPROCESSOTRAB
TipoObjeto: COLUMN
NomeTabela: TFPFUN
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210004
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPFUN ADD NUPROCESSOTRAB NUMBER(10)
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 16/03/2018 11:05:18
Num.Script: 52000-0-0
Nro. O.S. : 1159814
Nome      : Criar - FK_TFPFUN_NUPROCTRAB_TFPPSS 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - FK_TFPFUN_NUPROCTRAB_TFPPSS 
NomeObjeto: FK_TFPFUN_NUPROCTRAB_TFPPSS 
TipoObjeto: FOREIGN KEY
NomeTabela: TFPFUN
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210004
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPFUN ADD CONSTRAINT FK_TFPFUN_NUPROCTRAB_TFPPSS FOREIGN KEY (NUPROCESSOTRAB) REFERENCES TFPPSS (NUPROCESSO)
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 16/03/2018 11:05:36
Num.Script: 52001-0-0
Nro. O.S. : 1159814
Nome      : Cria - TFPAVI INDCUMPRPARC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: INDCUMPRPARC
TipoObjeto: COLUMN
NomeTabela: TFPAVI
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210004
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TFPAVI ADD INDCUMPRPARC NUMBER(5)';
   EXECUTE IMMEDIATE 'ALTER TABLE TFPAVI ADD  CONSTRAINT CKC_INDCUMPRPARC_TFPAVI CHECK (INDCUMPRPARC IN (0,1,2,3,4) OR INDCUMPRPARC IS NULL )';
END;
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 16/03/2018 18:20:46
Num.Script: 52003-0-0
Nro. O.S. : 1159814
Nome      : Criar - TFPS2299
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS2299
NomeObjeto: TFPS2299
TipoObjeto: TABLE
NomeTabela: TFPS2299
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210004
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS2299(
    CODEMP                  NUMBER(5)   NOT NULL,
    DTREF                   DATE        NOT NULL,
    SEQUENCIA               NUMBER(5)   NOT NULL,
    TPINSCEMPREGADOR        NUMBER(5),
    NRINSCEMPREGADOR        VARCHAR2(15),
    CPFTRAB                 VARCHAR2(11),
    NISTRAB                 VARCHAR2(11),
    MATRICULA               VARCHAR2(30),
    MTVDESLIG               VARCHAR2(2),
    DTDESLIG                DATE,
    INDPAGTO                CHAR(1),
    DTPROJFIMAPI            DATE,
    PENSALIM                CHAR(1),
    PERCALIM                FLOAT,
    VRALIM                  FLOAT,
    NRCERTOBITO             VARCHAR2(32),
    PRPROCTRAB              VARCHAR2(20),
    INDCUMPRPARC            CHAR(1),
    OBSERVACAO              VARCHAR2(255), 
    CNPJSUCESSORA           VARCHAR2(14),
    CPFSUBSTITUTO           VARCHAR2(11),
    DTNASCTOSUBSTITUTO      DATE,
    IDCONSIG                CHAR(1) DEFAULT 'N' NOT NULL CONSTRAINT CHK_IDCONSIG_TFPS2299 CHECK (IDCONSIG IN ('S', 'N')),
    INSCONSIG               VARCHAR2(5),
    NRCONTR                 VARCHAR2(15),
    DTFIMQUAR               DATE, 
    STATUS                  CHAR(1)         NOT NULL,
    NRORECIBO               VARCHAR2(50), 
    NRORECIBO_ANT           VARCHAR2(50),
    ACAO                    CHAR(1),
    CHAVE                   VARCHAR2(100)   NOT NULL,
    CONTROLE                CHAR(1)         DEFAULT 'I' NOT NULL,
    TPAMB                   CHAR(1)         DEFAULT 'T' NOT NULL,
    CONSTRAINT PK_TFPS2299 PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE),
    CONSTRAINT CHK_STATUS_TFPS2299 CHECK (STATUS IN ('P','I', 'E', 'F', 'X')), /*'P'= PENDENTE 'I'=INCLUÍDO 'E=ENVIADO 'F=FINALIZADO, 'X-FINALIZADO COM ERRO */ 
    CONSTRAINT CHK_ACAO_TFPS2299 CHECK (ACAO IN ('I', 'A', 'E')), /*'I'=INCLUÍR 'A=ALTERAR 'E=EXCLUIR */
    CONSTRAINT CHK_CONTROLE_TFPS2299 CHECK (CONTROLE IN ('I', 'A', 'E')),
    CONSTRAINT CHK_TPAMB_TFPS2299 CHECK (TPAMB IN ('P', 'T')) /* P = PRODUCAO T = TESTE */
)
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 16/03/2018 11:05:47
Num.Script: 52004-0-0
Nro. O.S. : 1159814
Nome      : Criar - VGF_EVENTO_S2299
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S2299
NomeObjeto: VGF_EVENTO_S2299
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210004
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2299
AS
SELECT VEMP.TPINSCEMPREGADOR,
       VEMP.NRINSCEMPREGADOR,
       FUN.CPF AS "CPFTRAB",
       FUN.PIS AS "NISTRAB",
       CAST (FUN.MATRICULA AS VARCHAR (30)) AS "MATRICULA",
       (SELECT CODMOTDESLIGESOCIAL FROM TFPTPR TPR WHERE TPR.CODTPR = FUN.CODTPR) AS MTVDESLIG,
       FUN.DTDEM AS "DTDESLIG",
       CASE WHEN AVI.TIPAVISO = 2 THEN 'S' ELSE 'N' END AS INDPAGTO,
       AVI.DTFIMAVISO AS DTPROJFIMAPI,
       CASE WHEN NVL(RESFOL.VALOR,0) = 0  THEN '0' ELSE '2' END AS PENSALIM, 
       0 AS PERCALIM,
       NVL(RESFOL.VALOR,0) AS VRALIM,
       FUN.NRCERTOBITO AS NRCERTOBITO,
       NULL AS PRPROCTRAB,
       AVI.INDCUMPRPARC,
       NULL AS OBSERVACAO,
       FUN.CNPJEMPANT AS CNPJSUCESSORA,
       /* TAG transftit - conforme discutido com Leandro, não temos caso de uso para essa situação */
       NULL AS CPFSUBSTITUTO,
       NULL AS DTNASCTOSUBSTITUTO,
       FUN.DTFIMQUARENTENA AS DTFIMQUAR,
       FUN.IDCONSIG,
       FUN.INSCONSIG,
       FUN.NRCONTR,
       VEMP.CODEMPMATRIZ AS CODEMP,
       CAST(FUN.CODEMP || ':' || FUN.CODFUNC AS VARCHAR2(100)) AS "CHAVE"
   FROM TFPFUN FUN LEFT JOIN TFPAVI AVI
     ON AVI.CODFUNC = FUN.CODFUNC AND AVI.CODEMP = FUN.CODEMP
     LEFT JOIN (SELECT NVL(SUM(FOL.VLREVENTO), 0) AS VALOR, BAS.CODFUNC, BAS.CODEMP
                  FROM TFPBAS BAS, TFPFOL FOL, TFPEVE EVE
                 WHERE BAS.TIPFOLHA = 'R'
                   AND FOL.CODEMP = BAS.CODEMP
                   AND FOL.CODFUNC = BAS.CODFUNC
                   AND FOL.REFERENCIA = BAS.REFERENCIA
                   AND FOL.TIPFOLHA = BAS.TIPFOLHA
                   AND EVE.CODEVENTO = FOL.CODEVENTO
                   AND EVE.IDENTIFICACAO IN (148, 149, 150, 158, 166, 167, 168, 173) 
                 GROUP BY BAS.CODFUNC, BAS.CODEMP) RESFOL ON RESFOL.CODFUNC = FUN.CODFUNC AND RESFOL.CODEMP = FUN.CODEMP          
     , VGF_EVENTO_EMPREGADOR VEMP
  WHERE FUN.CODEMP = VEMP.CODEMP
    AND FUN.CODCATEGESOCIAL NOT IN (701,711,712,721,722,723,731,734,738,741,751,761,771,781) 
    AND FUN.SITESOCIAL IN ('O','5','6','T')
    AND FUN.SITUACAO = 0
    AND VEMP.DTCARGAINICIAL IS NOT NULL
    AND FUN.DTDEM >= VEMP.DTCARGAINICIAL
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 16/03/2018 10:47:34
Num.Script: 52022-0-0
Nro. O.S. : 1148088
Nome      : Criar - VGF_EVENTO_S2250
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S2250
NomeObjeto: VGF_EVENTO_S2250
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210004
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2250
AS
SELECT 
  VEMP.TPINSCEMPREGADOR
, VEMP.NRINSCEMPREGADOR
, CAST(FUN.CPF AS VARCHAR2(11)) AS cpfTrab
, CAST(FUN.PIS AS VARCHAR2(11)) AS nisTrab
, CAST(FUN.MATRICULA AS VARCHAR2(30))  AS matricula
, NVL(AVI.DTNOTIFICACAO, DTAVISO) AS dtAvPrv
, AVI.DTFIMAVISO AS dtPrevDeslig
,AVI.TIPAVISO
, CASE WHEN AVI.INICIATIVA = 'E' AND AVI.TIPREDUCAO = 'J' THEN 1
       WHEN AVI.INICIATIVA = 'E' AND AVI.TIPREDUCAO = 'A' AND VEMP.CLASSTRIB <> '07' THEN 2
       WHEN AVI.INICIATIVA = 'E' AND AVI.TIPREDUCAO = 'A' AND VEMP.CLASSTRIB = '07' THEN 5 
       WHEN AVI.INICIATIVA = 'F' AND AVI.TIPAVISO = 3 THEN 3 
       WHEN AVI.INICIATIVA = 'F' AND AVI.TIPAVISO = 1 THEN 4 ELSE
       CASE WHEN AVI.TIPAVISO = 1 AND AVI.TIPREDUCAO = 'J' THEN 1
            WHEN AVI.TIPAVISO = 1 AND AVI.TIPREDUCAO = 'A' THEN 2
            WHEN AVI.TIPAVISO = 2 THEN 3
            WHEN AVI.TIPAVISO = 3 THEN 4
       ELSE NULL END END AS tpAvPrevio
, AVI.OBSERVACAODET AS observacaoDet
, AVI.DTCANCEL AS dtCancAvPrv
, AVI.OBSERVACAOCANC AS OBSERVACAOCANC
, AVI.MOTIVOCANCEL AS MTVCANCAVPREVIO
, VEMP.CODEMPMATRIZ AS CODEMP
, CAST(FUN.CODEMP || ':' || FUN.CODFUNC AS VARCHAR2(100)) AS CHAVE
FROM TFPFUN FUN
, TFPAVI AVI
, VGF_EVENTO_EMPREGADOR VEMP
WHERE AVI.CODEMP = FUN.CODEMP
AND AVI.CODFUNC = FUN.CODFUNC
AND VEMP.CODEMP = FUN.CODEMP
AND FUN.CODCATEGESOCIAL IN (101,102,103,104,105,106)
AND NVL(AVI.DTNOTIFICACAO, AVI.DTAVISO) >= VEMP.DTCARGAINICIAL
AND VEMP.DTCARGAINICIAL IS NOT NULL
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 16/03/2018 10:46:21
Num.Script: 52023-0-0
Nro. O.S. : 1148088
Nome      : Criar - TFPS2250 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS2250 
NomeObjeto: TFPS2250 
TipoObjeto: TABLE
NomeTabela: TFPS2250 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210004
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS2250 (
  CODEMP                   NUMBER(5)            NOT NULL,
  DTREF                    DATE                 NOT NULL,
  TPAMB                    CHAR(1 BYTE)         DEFAULT 'T' NOT NULL,
  SEQUENCIA                NUMBER(5)            NOT NULL,
  CHAVE                    VARCHAR2(100 BYTE)   NOT NULL,
  NRORECIBO                VARCHAR2(50 BYTE),
  NRORECIBO_ANT            VARCHAR2(50 BYTE),
  STATUS                   CHAR(1 BYTE)         NOT NULL,
  ACAO                     CHAR(1 BYTE),
  CONTROLE                 CHAR(1 BYTE)         DEFAULT 'I' NOT NULL,
  TPINSCEMPREGADOR         NUMBER(5),
  NRINSCEMPREGADOR         VARCHAR2(15 BYTE),
  CPFTRAB                  VARCHAR2(11 BYTE),
  NISTRAB                  VARCHAR2(11 BYTE),
  MATRICULA                VARCHAR2(30 BYTE),
  DTAVPRV                  DATE                 NOT NULL,
  DTPREVDESLIG             DATE                 NOT NULL,
  TPAVPREVIO               NUMBER(5,0)          NOT NULL,
  OBSERVACAODET            VARCHAR2(255),
  DTCANCAVPRV              DATE,
  OBSERVACAOCANC           VARCHAR2(255),
  MTVCANCAVPREVIO          NUMBER(5,0),
  CONSTRAINT PK_TFPS2250 PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE),
  CONSTRAINT CHK_ACAO_TFPS2250 CHECK (ACAO IN ('I', 'A', 'E')),
  CONSTRAINT CHK_CONTROLE_TFPS2250 CHECK (CONTROLE IN ('I', 'A', 'E')),
  CONSTRAINT CHK_STATUS_TFPS2250 CHECK (STATUS IN ('P','I', 'E', 'F', 'X')),
  CONSTRAINT CHK_TPAMB_TFPS2250 CHECK (TPAMB IN ('P', 'T'))
  )
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 16/03/2018 10:46:18
Num.Script: 52023-0-1
Nro. O.S. : 1148088
Nome      : Script - TFPMON
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - TFPMON
NomeObjeto: TFPMON
TipoObjeto: TABLE
NomeTabela: TFPMON
Executar  : SE_EXISTIR
Ocorrencia: 4210004
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
    P_COUNT     NUMBER(5);
BEGIN
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-2250'
        AND NOMETAB = 'TFPS2250'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'R';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, AMBPRODUCAO)
         VALUES ('S-2250', 'TFPS2250', 'NRORECIBO', 'R', 'L');
    END IF;

    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-2250'
        AND NOMETAB = 'TFPS2250'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'C';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, AMBPRODUCAO)
         VALUES ('S-2250', 'TFPS2250', 'NRORECIBO', 'C','VGF_EVENTO_S2250', 'L');
    END IF;
END;
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 16/03/2018 10:16:43
Num.Script: 52040-0-0
Nro. O.S. : 1147426
Nome      : Criar - TFPS2230
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS2230
NomeObjeto: TFPS2230
TipoObjeto: TABLE
NomeTabela: TFPS2230
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210004
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS2230
(
  CODEMP                   NUMBER(5)            NOT NULL,
  DTREF                    DATE                 NOT NULL,
  TPAMB                    CHAR(1)              DEFAULT 'T' NOT NULL,
  SEQUENCIA                NUMBER(5)            NOT NULL,
  CHAVE                    VARCHAR2(100)        NOT NULL,
  NRORECIBO                VARCHAR2(50),
  NRORECIBO_ANT            VARCHAR2(50),
  STATUS                   CHAR(1)              NOT NULL,
  ACAO                     CHAR(1),
  CONTROLE                 CHAR(1)              DEFAULT 'I' NOT NULL,
  TPINSCEMPREGADOR         NUMBER(5),
  NRINSCEMPREGADOR         VARCHAR2(15),
  CPFTRAB                  VARCHAR2(11),
  NISTRAB                  VARCHAR2(11),
  MATRICULA                VARCHAR2(30),
  CODCATEG                 NUMBER (5)           NOT NULL,  -- max 3
  DTINIAFAST               DATE,
  CODMOTAFAST              VARCHAR2(2),
  INFOMESMOMTV             CHAR(1),
  TPACIDTRANSITO           NUMBER(5),
  OBSERVACAO               VARCHAR2(250),
  CNPJCESS                 VARCHAR2(14),
  INFONUS                  NUMBER(5), -- MAX 1
  CNPJSIND                 VARCHAR2(14),
  INFONUSREMUN             NUMBER(5), -- MAX 1
  ORIGRETIF                NUMBER(5),
  TPPROC                   CHAR(1),
  NRPROC                   VARCHAR2(20),
  TEM2300                  NUMBER(5),  
  DTTERMAFAST              DATE,
  CHAVE2200                VARCHAR2(100),
  CONSTRAINT PK_TFPS2230 PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE),
  CONSTRAINT CHK_STATUS_TFPS2230 CHECK (STATUS IN ('P','I', 'E', 'F', 'X')), 
  /*'P'= PENDENTE 'I'=INCLUÃ?DO 'E=ENVIADO 'F=FINALIZADO, 'X-FINALIZADO COM ERRO */ 
  CONSTRAINT CHK_ACAO_TFPS2230 CHECK (ACAO IN ('I', 'A', 'E')), /*'I'=INCLUÃ?R 'A=ALTERAR 'E=EXCLUIR */
  CONSTRAINT CHK_CONTROLE_TFPS2230 CHECK (CONTROLE IN ('I', 'A', 'E')),
  CONSTRAINT CHK_TPAMB_TFPS2230 CHECK (TPAMB IN ('P', 'T')) /* P = PRODUCAO T = TESTE */
)
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 28/03/2018 17:48:19
Num.Script: 52040-0-1
Nro. O.S. : 1147426
Nome      : Criar - TFPS2230_ATESTADO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS2230_ATESTADO
NomeObjeto: TFPS2230_ATESTADO
TipoObjeto: TABLE
NomeTabela: TFPS2230_ATESTADO
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210004
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS2230_ATESTADO
(
  CODEMP           NUMBER(5)            NOT NULL,
  DTREF            DATE                 NOT NULL,
  TPAMB            CHAR(1)              DEFAULT 'T' NOT NULL,
  SEQUENCIA        NUMBER(5)            NOT NULL,
  NUOCOR           VARCHAR2(100)        NOT NULL,
  CHAVE            VARCHAR2(100)        NOT NULL,
  CODCID           VARCHAR2(4),
  QTDDIASAFAST     NUMBER(5),
  NMEMIT           VARCHAR2(70),
  IDEOC            NUMBER(5),
  NROC             VARCHAR2(14),
  UFOC             VARCHAR2(2),
  CONSTRAINT PK_TFPS2230_ATESTADO PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, NUOCOR, CHAVE),
  CONSTRAINT FK_ATESTADO_TFPS2230 FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, NUOCOR) 
                          REFERENCES TFPS2230 (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE) ON DELETE CASCADE,
  CONSTRAINT CHK_TPAMB_TFPS2230_ATESTADO CHECK (TPAMB IN ('P', 'T')) /* P = PRODUCAO T = TESTE */                         
)
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 28/03/2018 17:47:57
Num.Script: 52040-0-2
Nro. O.S. : 1147426
Nome      : Script - TFPMON
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - TFPMON
NomeObjeto: TFPMON
TipoObjeto: TABLE
NomeTabela: TFPMON
Executar  : SE_EXISTIR
Ocorrencia: 4210004
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
    P_COUNT     NUMBER(5);
BEGIN
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-2230'
        AND NOMETAB = 'TFPS2230'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'R';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, AMBPRODUCAO)
         VALUES ('S-2230', 'TFPS2230', 'NRORECIBO', 'R', 'L');
    END IF;

    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-2230'
        AND NOMETAB = 'TFPS2230'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'C';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, AMBPRODUCAO)
         VALUES ('S-2230', 'TFPS2230', 'NRORECIBO', 'C','VGF_EVENTO_S2230', 'L');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-2230'
        AND NOMETAB = 'TFPS2230_ATESTADO'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'C';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI, AMBPRODUCAO)
         VALUES ('S-2230', 'TFPS2230_ATESTADO', 'NRORECIBO', 'C','VGF_EVENTO_S2230_ATESTADO', 'TFPS2230', 'L');
    END IF;
END;
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 16/03/2018 10:16:55
Num.Script: 52042-0-0
Nro. O.S. : 1147426
Nome      : Criar - VGF_EVENTO_S2230
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S2230
NomeObjeto: VGF_EVENTO_S2230
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210004
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2230
AS
SELECT DISTINCT
  VEMP.TPINSCEMPREGADOR
, VEMP.NRINSCEMPREGADOR
, CAST(FUN.CPF AS VARCHAR2(11)) AS cpfTrab
, CAST(FUN.PIS AS VARCHAR2(11)) AS nisTrab
, CAST(FUN.MATRICULA AS VARCHAR2(30))  AS matricula
, FUN.CODCATEGESOCIAL AS codCateg
, CASE WHEN FUN.CODCATEGESOCIAL IN (701,711,712,721,722,723,731,734,738,741,751,761,771,781) THEN 1 ELSE 0 END AS tem2300
, OCO.DTINICOCOR AS dtIniAfast
, HIS.CODMOTAFAST AS codMotAfast
, CASE WHEN OCO.NUREINCID <> 0 THEN 'S' ELSE 'N' END AS infoMesmoMtv
, AFT.TIPACIDTRANSITO AS tpAcidTransito
, OCO.DESCROCOR AS observacao
, CASE WHEN HIS.CODMOTAFAST = 14 THEN AFT.CNPJCESSIONARIO ELSE NULL END AS cnpjCess
, CASE WHEN HIS.CODMOTAFAST = 14 THEN AFT.INFOONUS ELSE NULL END AS infOnus
, CASE WHEN HIS.CODMOTAFAST = 24 THEN AFT.CNPJSINDICATO ELSE NULL END AS cnpjSind
, CASE WHEN HIS.CODMOTAFAST = 24 THEN AFT.INFOONUSREMUN ELSE NULL END AS infOnusRemun
, OCO.ORIGRETIF AS origRetif  
, (SELECT CASE WHEN TIPOPROCESSO IS NULL THEN NULL
               WHEN TIPOPROCESSO = 'A' THEN '1' ELSE '2' END FROM TFPPSS PSS WHERE PSS.NUPROCESSO = OCO.NUPROCESSO) AS tpProc               
, (SELECT NUMPROCESSO FROM TFPPSS PSS WHERE PSS.NUPROCESSO = OCO.NUPROCESSO) AS nrProc               
, case when OCO.DTFINALOCOR <= sysdate + 10 then OCO.DTFINALOCOR  ELSE NULL END AS dtTermAfast
, VEMP.CODEMPMATRIZ AS CODEMP
, CAST(OCO.NUOCOR AS VARCHAR2(100)) AS CHAVE
, CAST(FUN.CODEMP || ':' || FUN.CODFUNC AS VARCHAR2(100)) AS "CHAVE2200"
FROM TFPFUN FUN
, TFPOCO OCO LEFT JOIN TFPAFT AFT  ON OCO.NUOCOR = AFT.NUOCOR 
, TFPHIS HIS
, VGF_EVENTO_EMPREGADOR VEMP
WHERE OCO.CODEMP = FUN.CODEMP
AND OCO.CODFUNC = FUN.CODFUNC
AND VEMP.CODEMP = FUN.CODEMP
AND OCO.CODHISTOCOR = HIS.CODHISTOCOR
AND VEMP.DTCARGAINICIAL IS NOT NULL
AND FUN.SITESOCIAL IS NOT NULL
AND OCO.DTINICOCOR >= VEMP.DTCARGAINICIAL
AND HIS.CODMOTAFAST IS NOT NULL
AND (OCO.DTINICOCOR >= SYSDATE - 38 OR OCO.DTFINALOCOR >= SYSDATE - 38 OR OCO.DTFINALOCOR IS NULL OR 
     EXISTS (SELECT 1 FROM TFPATT ATT  WHERE ATT.NUOCOR  = OCO.NUOCOR AND ATT.DHALTER  >= SYSDATE - 38) OR
     EXISTS (SELECT 1 FROM TFPAFT AFT2 WHERE AFT2.NUOCOR = OCO.NUOCOR AND AFT2.DHALTER >= SYSDATE - 38))
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 16/03/2018 10:44:10
Num.Script: 52043-0-0
Nro. O.S. : 1147426
Nome      : Criar - VGF_EVENTO_S2230_ATESTADO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S2230_ATESTADO
NomeObjeto: VGF_EVENTO_S2230_ATESTADO
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210004
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2230_ATESTADO
AS
SELECT
 VEMP.CODEMPMATRIZ AS CODEMP
,CAST(OCO.NUOCOR AS VARCHAR2(100)) AS NUOCOR
,CAST(ATT.NUATT AS VARCHAR2(100)) AS CHAVE
,CAST(ATT.CODCID AS VARCHAR2(4)) AS codCID
,ATT.DIASAFASTAMENTO AS qtdDiasAfast
,ATT.EMITENTE AS nmEmit
,ATT.IDEOC AS ideOC
,ATT.NROC AS nrOc
,ATT.UFOC AS ufOC
FROM TFPFUN FUN
, TFPOCO OCO
, TFPHIS HIS
, VGF_EVENTO_EMPREGADOR VEMP
, TFPATT ATT
WHERE OCO.CODEMP = FUN.CODEMP
AND OCO.CODFUNC = FUN.CODFUNC
AND VEMP.CODEMP = FUN.CODEMP
AND OCO.CODHISTOCOR = HIS.CODHISTOCOR
AND VEMP.DTCARGAINICIAL IS NOT NULL
AND FUN.SITESOCIAL IS NOT NULL
AND OCO.NUOCOR = ATT.NUOCOR
AND OCO.DTINICOCOR >= VEMP.DTCARGAINICIAL
AND (OCO.DTINICOCOR >= SYSDATE - 38 OR OCO.DTFINALOCOR >= SYSDATE - 38 OR OCO.DTFINALOCOR IS NULL OR 
     EXISTS (SELECT 1 FROM TFPATT ATT WHERE ATT.NUOCOR = OCO.NUOCOR AND ATT.DHALTER >= SYSDATE - 38) OR
     EXISTS (SELECT 1 FROM TFPAFT AFT WHERE AFT.NUOCOR = OCO.NUOCOR AND AFT.DHALTER >= SYSDATE - 38))
AND EXISTS (SELECT 1 
            FROM VGF_EVENTO_S2230 P 
            WHERE P.CODEMP = VEMP.CODEMPMATRIZ 
              AND P.CHAVE = CAST(OCO.NUOCOR AS VARCHAR2(100)))
UNION
SELECT
 VEMP.CODEMPMATRIZ AS CODEMP
,CAST(OCO.NUOCOR AS VARCHAR2(100)) AS NUOCOR
,CAST(1 AS VARCHAR2(100)) AS CHAVE
,CAST(NULL AS VARCHAR2(4)) AS codCID
,OCO.DTFINALOCOR+1 - OCO.DTINICOCOR AS qtdDiasAfast
,NULL AS nmEmit
,NULL AS ideOC
,NULL AS nrOc
,NULL AS ufOC
FROM TFPFUN FUN
, TFPOCO OCO
, TFPHIS HIS
, VGF_EVENTO_EMPREGADOR VEMP
WHERE OCO.CODEMP = FUN.CODEMP
AND OCO.CODFUNC = FUN.CODFUNC
AND VEMP.CODEMP = FUN.CODEMP
AND OCO.CODHISTOCOR = HIS.CODHISTOCOR
AND HIS.CODMOTAFAST = '03'
AND OCO.DTFINALOCOR IS NOT NULL
AND VEMP.DTCARGAINICIAL IS NOT NULL
AND FUN.SITESOCIAL IS NOT NULL
AND OCO.DTINICOCOR >= VEMP.DTCARGAINICIAL
AND NOT EXISTS (SELECT 1 FROM TFPATT ATT WHERE ATT.NUOCOR = OCO.NUOCOR) 
AND (OCO.DTINICOCOR >= SYSDATE - 38 OR OCO.DTFINALOCOR >= SYSDATE - 38 OR OCO.DTFINALOCOR IS NULL OR 
     EXISTS (SELECT 1 FROM TFPAFT AFT WHERE AFT.NUOCOR = OCO.NUOCOR AND AFT.DHALTER >= SYSDATE - 38))
AND EXISTS (SELECT 1 
            FROM VGF_EVENTO_S2230 P 
            WHERE P.CODEMP = VEMP.CODEMPMATRIZ 
              AND P.CHAVE = CAST(OCO.NUOCOR AS VARCHAR2(100)))
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 23/03/2018 11:45:10
Num.Script: 52054-0-0
Nro. O.S. : 1157745
Nome      : Ajusta - TFPFOR CODFORM 238
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Ajusta - TFPFOR CODFORM 238
NomeObjeto: CODFORM
TipoObjeto: COLUMN
NomeTabela: TFPFOR
Executar  : SE_EXISTIR
Ocorrencia: 4210004
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
  P_CODFORMULA      TFPFOR.CODFORM%TYPE;
  P_DESCRFORMULA    TFPFOR.DESCRFORM%TYPE;
  P_DESCRFORMNOVO   TFPFOR.DESCRFORM%TYPE;
  P_FORMULA         VARCHAR2(4000);
  P_FORMULANOVO     VARCHAR2(4000);
  P_CODFORMIND      VARCHAR2(4000);
  P_CODFORMINDNOVO  VARCHAR2(4000);
  P_SANKHYA         TFPFOR.SANKHYA%TYPE;
BEGIN
  
  P_CODFORMULA := 238;
  
  BEGIN
    SELECT FORMULA, DESCRFORM, CODFORMIND, SANKHYA
    INTO P_FORMULA, P_DESCRFORMULA, P_CODFORMIND, P_SANKHYA
    FROM TFPFOR
    WHERE CODFORM = P_CODFORMULA;
  EXCEPTION WHEN NO_DATA_FOUND THEN
    P_FORMULA := 'A';
    P_CODFORMIND := NULL;
    P_DESCRFORMULA := NULL;
    P_SANKHYA := 'S'; 
  END;
  
  IF P_SANKHYA = 'N' THEN
    RETURN;
  END IF;
  
  P_DESCRFORMNOVO := 'MEDIAS ART 479 CONTRATO DETERM';
  P_FORMULANOVO := 'IF(QuelTFPafaC.CODAFAST = 63, IF(&DTDEMISSAO < IF(MemSetVar(''varDTCONTRATO'',CTOD(QueFuncionario.DTFIMCONTRATO)) > 0, MemGetVar(''varDTCONTRATO''), CTOD(''01/01/1900'')),(FMedEve(QueFuncionario.CODEMP, QueFuncionario.CODFUNC, &F1000, &Refere,''R'') / 30) * (MemGetVar(''varDTCONTRATO'') - &DTDEMISSAO),0),0)';
  P_CODFORMINDNOVO := '';
  
  IF P_FORMULA = 'A' THEN
    INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
      VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
             'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO);
    
    IF P_CODFORMINDNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO);
    END IF;
    
    IF P_DESCRFORMNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO);
    END IF;
    
    INSERT INTO TFPFOR (CODFORM, DESCRFORM, SANKHYA, FORMULA, CODFORMIND)
      VALUES(P_CODFORMULA, P_DESCRFORMNOVO, 'S', P_FORMULANOVO, P_CODFORMINDNOVO);
    
  ELSIF (P_FORMULANOVO <> P_FORMULA OR 
         NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') OR 
         NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z')) 
  THEN
    
    IF P_FORMULANOVO <> P_FORMULA THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO, P_FORMULA);
    END IF;
    
    IF NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO, P_CODFORMIND);
    END IF;
    
    IF NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO, P_DESCRFORMULA);
    END IF;
    
    UPDATE TFPFOR
    SET FORMULA = P_FORMULANOVO
    , DESCRFORM = P_DESCRFORMNOVO
    , CODFORMIND = P_CODFORMINDNOVO
    , FORMULANTERIOR = CASE WHEN FORMULA <> P_FORMULANOVO THEN P_FORMULA ELSE FORMULANTERIOR END
    , DTALTER = SYSDATE
    , CODUSU = 0
    WHERE CODFORM = P_CODFORMULA
    AND SANKHYA = 'S';
    
  END IF;
  
END;
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 23/03/2018 11:45:02
Num.Script: 52055-0-0
Nro. O.S. : 1157745
Nome      : Ajusta - TFPFOR CODFORM 239
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Ajusta - TFPFOR CODFORM 239
NomeObjeto: CODFORM
TipoObjeto: COLUMN
NomeTabela: TFPFOR
Executar  : SE_EXISTIR
Ocorrencia: 4210004
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
  P_CODFORMULA      TFPFOR.CODFORM%TYPE;
  P_DESCRFORMULA    TFPFOR.DESCRFORM%TYPE;
  P_DESCRFORMNOVO   TFPFOR.DESCRFORM%TYPE;
  P_FORMULA         VARCHAR2(4000);
  P_FORMULANOVO     VARCHAR2(4000);
  P_CODFORMIND      VARCHAR2(4000);
  P_CODFORMINDNOVO  VARCHAR2(4000);
  P_SANKHYA         TFPFOR.SANKHYA%TYPE;
BEGIN
  
  P_CODFORMULA := 239;
  
  BEGIN
    SELECT FORMULA, DESCRFORM, CODFORMIND, SANKHYA
    INTO P_FORMULA, P_DESCRFORMULA, P_CODFORMIND, P_SANKHYA
    FROM TFPFOR
    WHERE CODFORM = P_CODFORMULA;
  EXCEPTION WHEN NO_DATA_FOUND THEN
    P_FORMULA := 'A';
    P_CODFORMIND := NULL;
    P_DESCRFORMULA := NULL;
    P_SANKHYA := 'S'; 
  END;
  
  IF P_SANKHYA = 'N' THEN
    RETURN;
  END IF;
  
  P_DESCRFORMNOVO := 'MEDIAS ART 480 CONTRATO DETERM';
  P_FORMULANOVO := 'IF(QuelTFPafaC.CODAFAST = 78, IF(&DTDEMISSAO < IF(MemSetVar(''varDTCONTRATO'',CTOD(QueFuncionario.DTFIMCONTRATO)) > 0, MemGetVar(''varDTCONTRATO''), CTOD(''01/01/1900'')),(FMedEve(QueFuncionario.CODEMP, QueFuncionario.CODFUNC, &F1000, &Refere,''R'') / 30)* (MemGetVar(''varDTCONTRATO'')- &DTDEMISSAO),0),0)';
  P_CODFORMINDNOVO := '';
  
  IF P_FORMULA = 'A' THEN
    INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
      VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
             'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO);
    
    IF P_CODFORMINDNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO);
    END IF;
    
    IF P_DESCRFORMNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO);
    END IF;
    
    INSERT INTO TFPFOR (CODFORM, DESCRFORM, SANKHYA, FORMULA, CODFORMIND)
      VALUES(P_CODFORMULA, P_DESCRFORMNOVO, 'S', P_FORMULANOVO, P_CODFORMINDNOVO);
    
  ELSIF (P_FORMULANOVO <> P_FORMULA OR 
         NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') OR 
         NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z')) 
  THEN
    
    IF P_FORMULANOVO <> P_FORMULA THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO, P_FORMULA);
    END IF;
    
    IF NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO, P_CODFORMIND);
    END IF;
    
    IF NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO, P_DESCRFORMULA);
    END IF;
    
    UPDATE TFPFOR
    SET FORMULA = P_FORMULANOVO
    , DESCRFORM = P_DESCRFORMNOVO
    , CODFORMIND = P_CODFORMINDNOVO
    , FORMULANTERIOR = CASE WHEN FORMULA <> P_FORMULANOVO THEN P_FORMULA ELSE FORMULANTERIOR END
    , DTALTER = SYSDATE
    , CODUSU = 0
    WHERE CODFORM = P_CODFORMULA
    AND SANKHYA = 'S';
    
  END IF;
  
END;
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 15/03/2018 18:22:19
Num.Script: 52058-0-0
Nro. O.S. : 980364
Nome      : Drop - CKC_MODULO_TSIPAR
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - CKC_MODULO_TSIPAR
NomeObjeto: CKC_MODULO_TSIPAR
TipoObjeto: CONSTRAINT
NomeTabela: TSIPAR
Executar  : SE_EXISTIR
Ocorrencia: 4210004
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TSIPAR DROP
  CONSTRAINT CKC_MODULO_TSIPAR
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 15/03/2018 18:23:26
Num.Script: 52059-0-0
Nro. O.S. : 980364
Nome      : Cria - CKC_MODULO_TSIPAR
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - CKC_MODULO_TSIPAR
NomeObjeto: CKC_MODULO_TSIPAR
TipoObjeto: CONSTRAINT
NomeTabela: TSIPAR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210004
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TSIPAR ADD
  CONSTRAINT CKC_MODULO_TSIPAR CHECK  (MODULO IN ('F','G','C','E','B','I','L','T','P','O','A','R','S','D','M','N','Z','H','K','J','W'))
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 16/03/2018 18:32:48
Num.Script: 52095-0-1
Nro. O.S. : 1159814
Nome      : Script - TFPMON
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - TFPMON
NomeObjeto: TFPMON
TipoObjeto: TABLE
NomeTabela: TFPMON
Executar  : SE_EXISTIR
Ocorrencia: 4210004
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
    P_COUNT     NUMBER(5);
BEGIN
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-2299'
        AND NOMETAB = 'TFPS2299'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'R';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, AMBPRODUCAO)
         VALUES ('S-2299', 'TFPS2299', 'NRORECIBO', 'R', 'L');
    END IF;

    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-2299'
        AND NOMETAB = 'TFPS2299'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'C';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, AMBPRODUCAO)
         VALUES ('S-2299', 'TFPS2299', 'NRORECIBO', 'C','VGF_EVENTO_S2299', 'L');
    END IF;
END;
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 23/03/2018 16:22:23
Num.Script: 52127-0-0
Nro. O.S. : 1161611
Nome      : Dropar - CHK_TIPO_TFPMON 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - CHK_TIPO_TFPMON 
NomeObjeto: CHK_TIPO_TFPMON 
TipoObjeto: CONSTRAINT
NomeTabela: TFPMON
Executar  : SE_EXISTIR
Ocorrencia: 4210004
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPMON DROP CONSTRAINT CHK_TIPO_TFPMON 
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 23/03/2018 16:22:30
Num.Script: 52128-0-0
Nro. O.S. : 1161611
Nome      : Criar - CHK_TIPO_TFPMON 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - CHK_TIPO_TFPMON 
NomeObjeto: CHK_TIPO_TFPMON 
TipoObjeto: CONSTRAINT
NomeTabela: TFPMON
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210004
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPMON ADD CONSTRAINT CHK_TIPO_TFPMON CHECK (TIPO IN ('C','M', 'R', 'V')) 
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 23/03/2018 16:22:36
Num.Script: 52129-0-0
Nro. O.S. : 1161611
Nome      : Script - TFPMON
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - TFPMON
NomeObjeto: TFPMON
TipoObjeto: TABLE
NomeTabela: TFPMON
Executar  : SE_EXISTIR
Ocorrencia: 4210004
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
    P_COUNT     NUMBER(5);
BEGIN
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1005'
        AND NOMETAB = 'TFPS1005'
        AND NOMECOLUNA = 'ALIQRAT2'
        AND TIPO = 'V';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, CAMPOSCHAVE, AMBPRODUCAO, AMBTESTE)
            VALUES ('S-1005', 'TFPS1005', 'ALIQRAT2', 'V', ' ','L', 'L');
    END IF;

    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1010'
        AND NOMETAB = 'TFPS1010'
        AND NOMECOLUNA = 'REPDSR'
        AND TIPO = 'V';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, CAMPOSCHAVE, AMBPRODUCAO, AMBTESTE)
            VALUES ('S-1010', 'TFPS1010', 'REPDSR', 'V', ' ', 'L', 'L');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1010'
        AND NOMETAB = 'TFPS1010'
        AND NOMECOLUNA = 'REP13'
        AND TIPO = 'V';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, CAMPOSCHAVE, AMBPRODUCAO, AMBTESTE)
            VALUES ('S-1010', 'TFPS1010', 'REP13', 'V', ' ', 'L', 'L');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1010'
        AND NOMETAB = 'TFPS1010'
        AND NOMECOLUNA = 'REPFERIAS'
        AND TIPO = 'V';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, CAMPOSCHAVE, AMBPRODUCAO, AMBTESTE)
            VALUES ('S-1010', 'TFPS1010', 'REPFERIAS', 'V', ' ', 'L', 'L');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1010'
        AND NOMETAB = 'TFPS1010'
        AND NOMECOLUNA = 'REPAVISO'
        AND TIPO = 'V';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, CAMPOSCHAVE, AMBPRODUCAO, AMBTESTE)
            VALUES ('S-1010', 'TFPS1010', 'REPAVISO', 'V', ' ', 'L', 'L');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1010'
        AND NOMETAB = 'TFPS1010'
        AND NOMECOLUNA = 'CODEVENTO'
        AND TIPO = 'V';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, CAMPOSCHAVE, AMBPRODUCAO, AMBTESTE)
            VALUES ('S-1010', 'TFPS1010', 'CODEVENTO', 'V', ' ', 'L', 'L');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1020'
        AND NOMETAB = 'TFPS1010'
        AND NOMECOLUNA = 'TPLOTACAO_2'
        AND TIPO = 'V';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, CAMPOSCHAVE, AMBPRODUCAO, AMBTESTE)
            VALUES ('S-1020', 'TFPS1010', 'TPLOTACAO_2', 'V', ' ', 'L', 'L');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1020'
        AND NOMETAB = 'TFPS1010'
        AND NOMECOLUNA = 'CODREGFIS'
        AND TIPO = 'V';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, CAMPOSCHAVE, AMBPRODUCAO, AMBTESTE)
            VALUES ('S-1020', 'TFPS1010', 'CODREGFIS', 'V', ' ', 'L', 'L');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1020'
        AND NOMETAB = 'TFPS1010'
        AND NOMECOLUNA = 'TIPOREGISTRO'
        AND TIPO = 'V';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, CAMPOSCHAVE, AMBPRODUCAO, AMBTESTE)
            VALUES ('S-1020', 'TFPS1010', 'TIPOREGISTRO', 'V', ' ', 'L', 'L');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1020'
        AND NOMETAB = 'TFPS1010'
        AND NOMECOLUNA = 'CODIGO'
        AND TIPO = 'V';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, CAMPOSCHAVE, AMBPRODUCAO, AMBTESTE)
            VALUES ('S-1020', 'TFPS1010', 'CODIGO', 'V', ' ', 'L', 'L');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1020'
        AND NOMETAB = 'TFPS1010'
        AND NOMECOLUNA = 'DESCRLOTACAO'
        AND TIPO = 'V';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, CAMPOSCHAVE, AMBPRODUCAO, AMBTESTE)
            VALUES ('S-1020', 'TFPS1010', 'DESCRLOTACAO', 'V', ' ', 'L', 'L');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1050'
        AND NOMETAB = 'TFPS1010'
        AND NOMECOLUNA = 'CODCARGAHOR'
        AND TIPO = 'V';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, CAMPOSCHAVE, AMBPRODUCAO, AMBTESTE)
            VALUES ('S-1050', 'TFPS1010', 'CODCARGAHOR', 'V', ' ', 'L', 'L');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1050'
        AND NOMETAB = 'TFPS1010'
        AND NOMECOLUNA = 'DESCRCARGAHOR'
        AND TIPO = 'V';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, CAMPOSCHAVE, AMBPRODUCAO, AMBTESTE)
            VALUES ('S-1050', 'TFPS1010', 'DESCRCARGAHOR', 'V', ' ', 'L', 'L');
    END IF;
END;
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 23/03/2018 16:22:42
Num.Script: 52130-0-0
Nro. O.S. : 1161611
Nome      : Alterar - SNK_GET_COLUMNS_ESOCIAL 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - SNK_GET_COLUMNS_ESOCIAL 
NomeObjeto: SNK_GET_COLUMNS_ESOCIAL 
TipoObjeto: FUNCTION
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210004
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE FUNCTION SNK_GET_COLUMNS_ESOCIAL(P_TABLE VARCHAR2, P_COLUMNNS_EXCECAO VARCHAR2 DEFAULT '*')
RETURN VARCHAR2
IS  
  P_RESULT          VARCHAR2(4000);
  P_APELIDO_NEW     VARCHAR2(10) := 'N.';
  P_APELIDO_OLD     VARCHAR2(10) := 'O.';
  P_FORMAT_COLUMN   VARCHAR2(1000);  
BEGIN  
  P_RESULT := ' ';
  
  FOR CUR_COLUMNS IN (SELECT COLUMN_NAME
                             , NULLABLE
                             , CASE WHEN DATA_TYPE IN ('NUMBER', 'FLOAT') THEN '0'
                                    WHEN DATA_TYPE = 'DATE' THEN 'SYSDATE'
                                    ELSE ''' ''' END AS DATA_NVL
                        FROM USER_TAB_COLUMNS
                        WHERE UPPER(TABLE_NAME) = UPPER(P_TABLE)
                            AND INSTR(P_COLUMNNS_EXCECAO, COLUMN_NAME) = 0
                            AND NOT EXISTS(SELECT 1
                                           FROM TFPMON
                                           WHERE NOMETAB = UPPER(P_TABLE)
                                             AND NOMECOLUNA = COLUMN_NAME
                                             AND TIPO = 'V')) LOOP
    
        IF CUR_COLUMNS.NULLABLE = 'Y' THEN
            P_FORMAT_COLUMN := 'NVL('||P_APELIDO_NEW||CUR_COLUMNS.COLUMN_NAME||', '||CUR_COLUMNS.DATA_NVL||') = NVL('||P_APELIDO_OLD||CUR_COLUMNS.COLUMN_NAME||', '||CUR_COLUMNS.DATA_NVL||')';
        ELSE
            P_FORMAT_COLUMN := P_APELIDO_NEW||CUR_COLUMNS.COLUMN_NAME||' = '||P_APELIDO_OLD||CUR_COLUMNS.COLUMN_NAME; 
        END IF;
        
        IF P_RESULT = ' ' THEN
            P_RESULT := P_FORMAT_COLUMN;
        ELSE
            P_RESULT := P_RESULT ||' AND '||P_FORMAT_COLUMN;
        END IF;
    END LOOP;

  RETURN P_RESULT; 
END;
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 23/03/2018 16:11:08
Num.Script: 52242-0-0
Nro. O.S. : 1163745
Nome      : Alterar - SNK_PROCESSA_DADOS_ESOCIAL 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - SNK_PROCESSA_DADOS_ESOCIAL 
NomeObjeto: SNK_PROCESSA_DADOS_ESOCIAL 
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210004
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_PROCESSA_DADOS_ESOCIAL (
   P_CODEMPMATRIZ          NUMBER,
   P_DTREF                 DATE,
   P_TPAMB                 CHAR,                       /*P= PRODUCAO T=TESTE*/
   P_TIPDADOS              CHAR, /*P_TIPDADOS T= TODOS C=CADOSTRO M=MOVIMENTO*/
   P_EVENTO                VARCHAR2 := 'TODOS',
   P_SEQUENCIA_ATUAL       NUMBER,
   P_NOMETAB               VARCHAR2 := NULL,    /*UTILIZADO NA RECURSIVIDADE*/
   P_SEQUENCIA_PAI         VARCHAR2 := NULL,    /*UTILIZADO NA RECURSIVIDADE*/
   P_RESULT            OUT NUMBER)
AS
   P_SEQUENCIA_OLD          NUMBER (10);
   P_SEQUENCIA_NEW          NUMBER (10);
   P_DTREF_OLD              DATE;
   P_COLUNAS_PADRAO         VARCHAR2 (4000)
      := 'CODEMP, DTREF, STATUS, ACAO, NRORECIBO, NRORECIBO_ANT, SEQUENCIA, DTALTERACAO, DTEF, DSCALT, JUSTPRORR, MTVALTER, CONTROLE, TPAMB';
   queSql                   VARCHAR2 (8000);
   P_SEQUENCIA_DEL          NUMBER (10);
   P_COLUMNS                VARCHAR2 (4000);
   P_INSERT_COLUMNS         VARCHAR2 (4000);
   P_INSERT_VALUES          VARCHAR2 (4000);
   P_COLUMNS_PARAMETER      VARCHAR2 (4000)
      := 'CODEMP, DTREF, SEQUENCIA, STATUS, ACAO,NRORECIBO, NRORECIBO_ANT, ';
   P_COLUMNS_TO_PARAMETER   VARCHAR2 (4000)
      := 'CODEMP;, :DTREF, :SEQUENCIA, :STATUS, :ACAO,:NRORECIBO, :NRORECIBO_ANT, ';
   P_COL_PAD_FILHOS         VARCHAR2 (4000) := 'CODEMP, DTREF, SEQUENCIA, ';
   P_COL_PAD_FILHOS_PARAM   VARCHAR2 (4000) := 'CODEMP, :DTREF, :SEQUENCIA, ';
   P_TABLE_PAI              VARCHAR2 (100);
   P_VALID_ALTER            BOOLEAN := FALSE;
   P_COUNT                  NUMBER (10);
   P_DTLOG                  DATE;
   P_SEQLOG                 NUMBER (10);
   P_MSG                    VARCHAR2 (4000) := ' ';
BEGIN

   IF P_NOMETAB IS NULL
   THEN
      FOR EVE
         IN (  SELECT NOMETAB,
                      NOMEEVENTO,
                      NOMEVIEW,
                      NOMEEVEVENTOPAI
                 FROM TFPMON
                WHERE     TIPO = 'C'
                      AND (P_EVENTO = 'TODOS' OR NOMEEVENTO = P_EVENTO)
                      AND NOMEEVEVENTOPAI IS NULL
                      AND (   (P_TPAMB = 'P' AND AMBPRODUCAO = 'L')
                           OR (P_TPAMB = 'T' AND AMBTESTE = 'L'))
             ORDER BY NOMETAB--GROUP BY NOMETAB, NOMEEVENTO, NOMEVIEW, NOMEEVEVENTOPAI
            )
      LOOP
         queSql :=
               ' SELECT COUNT(1)  
                        FROM '
            || EVE.NOMETAB
            || '
                        WHERE CODEMP = :CODEMP
                          AND DTREF = :DTREF
                          AND TPAMB = :TPAMB
                          AND STATUS = ''I''';

         EXECUTE IMMEDIATE queSql
            INTO P_COUNT
            USING P_CODEMPMATRIZ, P_DTREF, P_TPAMB;

         IF P_COUNT > 0
         THEN
            RAISE_APPLICATION_ERROR (
               -20101,
               'Não é possivel gerar dados do e-social se existir eventos em processo de envio.');
         END IF;

         queSql :=
               ' SELECT MAX(SEQUENCIA)  
                        FROM '
            || EVE.NOMETAB
            || '
                        WHERE CODEMP = :CODEMP
                          AND DTREF = :DTREF
                          AND TPAMB = :TPAMB
                          AND STATUS = ''P''';

         EXECUTE IMMEDIATE queSql
            INTO P_SEQUENCIA_DEL
            USING P_CODEMPMATRIZ, P_DTREF, P_TPAMB;

         IF P_SEQUENCIA_DEL > 0 THEN /* SE EXISTE STATUS IGUAL A 'P' PODEMOS DELETAR, JA QUE MANDAMOS TODAS AS INFORMACOES DE UMA SO VEZ! */
            FOR CUR_DEL IN (SELECT NOMETAB
                              FROM TFPMON
                             WHERE NOMEEVEVENTOPAI IS NULL AND TIPO = 'C')
            LOOP
               queSql :=
                     ' DELETE FROM '
                  || CUR_DEL.NOMETAB
                  || '
                                WHERE CODEMP = :CODEMP
                                  AND DTREF = :DTREF
                                  AND TPAMB = :TPAMB
                                  AND SEQUENCIA = :SEQUENCIA';

               EXECUTE IMMEDIATE queSql
                  USING P_CODEMPMATRIZ,
                        P_DTREF,
                        P_TPAMB,
                        P_SEQUENCIA_DEL;
            END LOOP;

            P_SEQUENCIA_NEW := P_SEQUENCIA_ATUAL;
            EXIT;
         END IF;
      END LOOP;
   ELSE
      P_SEQUENCIA_NEW := P_SEQUENCIA_PAI;
   END IF;

   IF P_SEQUENCIA_NEW IS NULL THEN /*SE P_SEQUENCIA_NEW ESTA NULL, E PORQUE NAO DELETOU DAGOS, LOGO TEMOS QUE GERAR UMA SEQUENCIA NOVA.*/
      P_SEQUENCIA_NEW := P_SEQUENCIA_ATUAL + 1;
   END IF;
   
   IF P_NOMETAB IS NULL THEN
    SNK_SET_ESOCIAL_PKG(P_TPAMB, P_DTREF, CASE WHEN NVL(P_SEQUENCIA_DEL, 0) > 0 THEN P_SEQUENCIA_ATUAL - 1 ELSE P_SEQUENCIA_ATUAL END);
   END IF;

   FOR EVE
      IN (  SELECT MON.NOMETAB,
                   MON.NOMEEVENTO,
                   MON.NOMEVIEW,
                   MON.NOMEEVEVENTOPAI,
                   MON.TIPO
              FROM TFPMON MON
             WHERE    (P_NOMETAB IS NOT NULL AND MON.NOMETAB = P_NOMETAB)
                   OR     (    P_NOMETAB IS NULL
                           AND NOMEEVEVENTOPAI IS NULL
                           AND (P_EVENTO = 'TODOS' OR MON.NOMEEVENTO = P_EVENTO)
                           AND (P_TIPDADOS = 'T' OR MON.TIPO = P_TIPDADOS))
                      AND TIPO = 'C'
                      AND (   (P_TPAMB = 'P' AND MON.AMBPRODUCAO = 'L')
                           OR (P_TPAMB = 'T' AND MON.AMBTESTE = 'L'))
          GROUP BY MON.NOMETAB,
                   MON.NOMEEVENTO,
                   MON.NOMEVIEW,
                   MON.NOMEEVEVENTOPAI,
                   MON.TIPO
          ORDER BY MON.NOMETAB)
   LOOP
      P_MSG := 'EVENTO: ' || EVE.NOMEEVENTO;

      IF EVE.TIPO IN ('T', 'C')
      THEN
         P_INSERT_COLUMNS := SNK_GET_COLUMNS_TABLE (EVE.NOMETAB);
         P_INSERT_VALUES := P_INSERT_COLUMNS;
         P_INSERT_VALUES :=
            REPLACE (P_INSERT_VALUES, 'SEQUENCIA', TO_CHAR (P_SEQUENCIA_NEW));
         P_INSERT_VALUES :=
            REPLACE (
               P_INSERT_VALUES,
               'DTREF',
                  'TO_DATE('''
               || SNK_FORMAT_DATE (P_DTREF, 'DD/MM/YYYY HH24:MI:SS')
               || ''', ''DD/MM/YYYY HH24:MI:SS'')');
         P_INSERT_VALUES :=
            REPLACE (P_INSERT_VALUES, 'TPAMB', '''' || P_TPAMB || '''');

         IF EVE.NOMEEVEVENTOPAI IS NULL
         THEN
            P_TABLE_PAI := EVE.NOMETAB;

            IF P_SEQUENCIA_NEW > 1
            THEN
               --P_SEQUENCIA_OLD := P_SEQUENCIA_NEW - 1; --Nao pode ser assim, pois na primeira geracao, pode nao ter gerado algum evento.
               queSql :=
                     ' SELECT NVL(MAX(SEQUENCIA),0)  
                                FROM '
                  || EVE.NOMETAB
                  || '
                                WHERE CODEMP = :CODEMP
                                  AND DTREF = :DTREF
                                  AND TPAMB = :TPAMB
                                  AND SEQUENCIA < :SEQUENCIA_NEW';

               EXECUTE IMMEDIATE queSql
                  INTO P_SEQUENCIA_OLD
                  USING P_CODEMPMATRIZ,
                        P_DTREF,
                        P_TPAMB,
                        P_SEQUENCIA_NEW;

               P_DTREF_OLD := P_DTREF;
            ELSE
               queSql :=
                     ' SELECT NVL(MAX(DTREF), :DTMOV)
                                FROM '
                  || EVE.NOMETAB
                  || '
                                WHERE CODEMP = :CODEMP
                                  AND DTREF < :DTREF
                                  AND TPAMB = :TPAMB';

               EXECUTE IMMEDIATE queSql
                  INTO P_DTREF_OLD
                  USING P_DTREF,
                        P_CODEMPMATRIZ,
                        P_DTREF,
                        P_TPAMB;

               P_DTREF_OLD := NVL (P_DTREF_OLD, P_DTREF);

               IF P_DTREF_OLD <> P_DTREF
               THEN
                  queSql :=
                        ' SELECT NVL(MAX(SEQUENCIA),0)
                                    FROM '
                     || EVE.NOMETAB
                     || '
                                    WHERE CODEMP = :CODEMP
                                      AND DTREF = :DTREF
                                      AND TPAMB = :TPAMB';

                  EXECUTE IMMEDIATE queSql
                     INTO P_SEQUENCIA_OLD
                     USING P_CODEMPMATRIZ, P_DTREF_OLD, P_TPAMB;
               ELSE
                  P_SEQUENCIA_OLD := P_SEQUENCIA_NEW;
               END IF;
            END IF;

            IF P_DTREF_OLD <> P_DTREF OR P_SEQUENCIA_OLD <> P_SEQUENCIA_NEW
            THEN
               queSql := NULL;
               SNK_GET_VALID_ALTER_ESOCIAL (P_EVENTO,
                                            P_COLUNAS_PADRAO,
                                            P_CODEMPMATRIZ,
                                            P_DTREF_OLD,
                                            P_SEQUENCIA_OLD,
                                            P_TPAMB,
                                            NULL                /*NOMETABPAI*/
                                                ,
                                            EVE.NOMETAB,
                                            EVE.NOMEVIEW);
            END IF;

            P_INSERT_VALUES :=
               REPLACE (P_INSERT_VALUES, 'CONTROLE', '''I'' AS CONTROLE');
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'CHAVE', 'V.CHAVE');
            P_INSERT_VALUES :=
               REPLACE (
                  P_INSERT_VALUES,
                  'NRORECIBO,',
                  'CASE WHEN ANT.CHAVE IS NULL OR ANT.CONTROLE = ''I'' THEN ANT.NRORECIBO ELSE NULL END,');
            P_INSERT_VALUES :=
               REPLACE (
                  P_INSERT_VALUES,
                  'NRORECIBO_ANT,',
                  'CASE WHEN ANT.CHAVE IS NULL OR ANT.CONTROLE = ''I'' THEN ANT.NRORECIBO_ANT ELSE ANT.NRORECIBO END,'); /* TEM QUE SER PRIMEIRO POR QUE EXISTE NRORECIBO E O NRORECIBO_ANT */
            P_INSERT_VALUES :=
               REPLACE (
                  P_INSERT_VALUES,
                  'STATUS',
                  'CASE WHEN NVL(ANT.CONTROLE, '' '') = ''I'' AND NVL(ANT.STATUS, '' '') = ''F'' THEN ''F'' ELSE ''P'' END');
            P_INSERT_VALUES :=
               REPLACE (
                  P_INSERT_VALUES,
                  ' ACAO',
                  'CASE WHEN EXISTS(SELECT 1 FROM TFPEVT WHERE GRUPOESOCIAL = 1 AND TIPOEVENTO = '''||EVE.NOMEEVENTO||''') THEN ''I'' WHEN ANT.NRORECIBO IS NULL AND ANT.NRORECIBO_ANT IS NULL THEN ''I'' WHEN ANT.STATUS = ''F'' THEN NVL(ANT.CONTROLE, ''I'') ELSE NVL(ANT.ACAO, ''I'') END');

            queSql :=
                  'INSERT INTO '
               || EVE.NOMETAB
               || ' 
                               SELECT '
               || P_INSERT_VALUES
               || '
                               FROM '
               || EVE.NOMEVIEW
               || ' V
                                    LEFT JOIN (SELECT CHAVE
                                                    , STATUS
                                                    , NRORECIBO
                                                    , NRORECIBO_ANT
                                                    , ACAO
                                                    , CONTROLE
                                               FROM '
               || EVE.NOMETAB
               || ' OLD
                                               WHERE OLD.CODEMP = '
               || TO_CHAR (P_CODEMPMATRIZ)
               || '
                                     AND OLD.DTREF = TO_DATE('''
               || SNK_FORMAT_DATE (P_DTREF_OLD, 'DD/MM/YYYY HH24:MI:SS')
               || ''', ''DD/MM/YYYY HH24:MI:SS'')
                                                 AND OLD.SEQUENCIA = '
               || TO_CHAR (P_SEQUENCIA_OLD)
               || '
                                                 AND OLD.TPAMB = '''
               || P_TPAMB
               || ''') ANT ON ANT.CHAVE = V.CHAVE
                               WHERE CODEMP = '
               || TO_CHAR (P_CODEMPMATRIZ);

            EXECUTE IMMEDIATE queSql;
         ELSE                                 /*SO ENTRA AQUI PARA OS FILHOS*/
            queSql :=
                  '
                          INSERT INTO '
               || EVE.NOMETAB
               || ' 
                              SELECT '
               || P_INSERT_VALUES
               || '
                              FROM '
               || EVE.NOMEVIEW
               || '
                              WHERE CODEMP = :CODEMPMATRIZ';
            
            EXECUTE IMMEDIATE queSql USING P_CODEMPMATRIZ;
         END IF;
      END IF;

      -- IF P_TIPDADOS IN ('T', 'M') THEN

      --END IF;

      /* INCLUSAO DAS LINHAS DE EXCLUSAO */
      IF     (P_DTREF_OLD <> P_DTREF OR P_SEQUENCIA_OLD <> P_SEQUENCIA_NEW)
         AND (P_DTREF_OLD IS NOT NULL AND P_SEQUENCIA_OLD IS NOT NULL)
      THEN
         P_INSERT_COLUMNS := SNK_GET_COLUMNS_TABLE (EVE.NOMETAB);
         P_INSERT_VALUES := P_INSERT_COLUMNS;
         P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' ', '');
         P_INSERT_VALUES := 'O.' || REPLACE (P_INSERT_VALUES, ',', ',O.');
         P_INSERT_VALUES :=
            REPLACE (P_INSERT_VALUES,
                     'O.SEQUENCIA',
                     TO_CHAR (P_SEQUENCIA_NEW));
         P_INSERT_VALUES :=
            REPLACE (P_INSERT_VALUES, 'O.TPAMB', '''' || P_TPAMB || '''');
         P_INSERT_VALUES :=
            REPLACE (
               P_INSERT_VALUES,
               'O.DTREF',
                  'TO_DATE('''
               || SNK_FORMAT_DATE (P_DTREF, 'DD/MM/YYYY HH24:MI:SS')
               || ''', ''DD/MM/YYYY HH24:MI:SS'')');

         IF EVE.NOMEEVEVENTOPAI IS NULL
         THEN
            P_INSERT_VALUES :=
               REPLACE (P_INSERT_VALUES, 'O.CONTROLE', '''E''');
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.CHAVE', 'O.CHAVE');
            P_INSERT_VALUES :=
               REPLACE (P_INSERT_VALUES, 'O.NRORECIBO,', 'NULL,');
            P_INSERT_VALUES :=
               REPLACE (P_INSERT_VALUES, 'O.NRORECIBO_ANT,', 'O.NRORECIBO,'); /* TEM QUE SER PRIMEIRO POR QUE EXISTE NRORECIBO E O NRORECIBO_ANT */
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.STATUS', '''P''');
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.ACAO', '''E''');

            queSql :=
                  ' MERGE INTO '
               || EVE.NOMETAB
               || ' N
                                USING (SELECT '
               || P_INSERT_COLUMNS
               || ' 
                                       FROM '
               || EVE.NOMETAB
               || ' 
                                       WHERE CODEMP = '
               || TO_CHAR (P_CODEMPMATRIZ)
               || '
                                         AND DTREF = TO_DATE('''
               || SNK_FORMAT_DATE (P_DTREF_OLD, 'DD/MM/YYYY HH24:MI:SS')
               || ''', ''DD/MM/YYYY HH24:MI:SS'')
                                         AND SEQUENCIA = '
               || TO_CHAR (P_SEQUENCIA_OLD)
               || '
                                         AND TPAMB = '''|| P_TPAMB || '''
                                         AND (('''|| EVE.NOMEEVENTO|| ''' NOT IN (''S-2205'', ''S-2206'', ''S-2306'')) OR
                                              ('''|| EVE.NOMEEVENTO|| ''' = ''S-2205'' AND EXISTS(SELECT 1 FROM TFPFUN WHERE CODEMP||'':''||CODFUNC = CHAVE AND SITESOCIAL IN (''5'', ''T'') )) OR 
                                              ('''|| EVE.NOMEEVENTO|| ''' IN (''S-2206'', ''S-2306'') AND EXISTS(SELECT 1 FROM TFPFUN WHERE CODEMP||'':''||CODFUNC = CHAVE AND SITESOCIAL IN (''6'', ''T'') ))
                                             )
                                         AND ((STATUS = ''F'' AND NRORECIBO IS NOT NULL) OR (STATUS <> ''F'' AND ACAO = ''E'' AND NRORECIBO IS NULL) OR (STATUS <> ''F'' AND ACAO <> ''E'' AND NRORECIBO_ANT IS NOT NULL) )
                                          ) O 
                                ON (N.CODEMP = O.CODEMP AND
                                    N.DTREF = TO_DATE('''
               || SNK_FORMAT_DATE (P_DTREF, 'DD/MM/YYYY HH24:MI:SS')
               || ''', ''DD/MM/YYYY HH24:MI:SS'') AND
                                    N.SEQUENCIA = '
               || TO_CHAR (P_SEQUENCIA_NEW)
               || ' AND 
                                    N.TPAMB = '''
               || P_TPAMB
               || ''' AND 
                                    N.CHAVE = O.CHAVE 
                                    )
                                WHEN NOT MATCHED THEN INSERT ('
               || P_INSERT_COLUMNS
               || ')
                                       VALUES ('
               || P_INSERT_VALUES
               || ' ) ';

            EXECUTE IMMEDIATE queSql;
         ELSE                                 /*SO ENTRA AQUI PARA OS FILHOS*/
            queSql :=
                  ' MERGE INTO '
               || EVE.NOMETAB
               || ' N
                                USING (SELECT '
               || P_INSERT_COLUMNS
               || ' 
                                       FROM '
               || EVE.NOMETAB
               || ' 
                                       WHERE CODEMP = '
               || TO_CHAR (P_CODEMPMATRIZ)
               || '
                                         AND DTREF = TO_DATE('''
               || SNK_FORMAT_DATE (P_DTREF_OLD, 'DD/MM/YYYY HH24:MI:SS')
               || ''', ''DD/MM/YYYY HH24:MI:SS'')
                                         AND SEQUENCIA = '
               || TO_CHAR (P_SEQUENCIA_OLD)
               || '
                                         AND TPAMB = '''
               || P_TPAMB
               || '''
                                          ) O 
                                ON (N.CODEMP = O.CODEMP AND
                                    N.DTREF = TO_DATE('''
               || SNK_FORMAT_DATE (P_DTREF, 'DD/MM/YYYY HH24:MI:SS')
               || ''', ''DD/MM/YYYY HH24:MI:SS'') AND
                                    N.SEQUENCIA = '
               || TO_CHAR (P_SEQUENCIA_NEW)
               || ' AND
                                    N.TPAMB = O.TPAMB AND
                                    N.CHAVE = O.CHAVE
                     AND EXISTS(SELECT 1
                                FROM '||EVE.NOMEEVEVENTOPAI||' P
                                WHERE P.CODEMP = O.CODEMP
                                  AND P.DTREF = TO_DATE('''
               || SNK_FORMAT_DATE (P_DTREF, 'DD/MM/YYYY HH24:MI:SS')
               || ''', ''DD/MM/YYYY HH24:MI:SS'') 
                                  AND P.SEQUENCIA = ' || TO_CHAR (P_SEQUENCIA_NEW)|| '
                                  AND P.TPAMB = O.TPAMB
                                  AND P.CHAVE = O.CHAVE
                                  AND P.ACAO = ''E''
                                                     ) )
                                WHEN NOT MATCHED THEN INSERT ('
               || P_INSERT_COLUMNS
               || ')
                                    VALUES ('
               || P_INSERT_VALUES
               || ' ) ';

            EXECUTE IMMEDIATE queSql;
         END IF;
      END IF;

      FOR EVEF
         IN (  SELECT NOMETAB,
                      NOMEEVENTO,
                      NOMEVIEW,
                      NOMEEVEVENTOPAI
                 FROM TFPMON
                WHERE     TIPO = 'C'
                      AND NOMEEVEVENTOPAI = EVE.NOMETAB
                      AND (   (P_TPAMB = 'P' AND AMBPRODUCAO = 'L')
                           OR (P_TPAMB = 'T' AND AMBTESTE = 'L'))
             ORDER BY NOMETAB)
      LOOP
         queSql := NULL;

         SNK_PROCESSA_DADOS_ESOCIAL (P_CODEMPMATRIZ,
                                     P_DTREF,
                                     P_TPAMB,
                                     P_TIPDADOS,
                                     EVEF.NOMEEVENTO,
                                     P_SEQUENCIA_NEW,
                                     EVEF.NOMETAB,
                                     P_SEQUENCIA_NEW,
                                     P_RESULT);
      END LOOP;

      P_RESULT := P_SEQUENCIA_NEW;
   END LOOP;
EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK;

      IF queSql IS NOT NULL
      THEN
         P_DTLOG := SYSDATE;

         SELECT COUNT (1) + 1
           INTO P_SEQLOG
           FROM LOGESOCIAL
          WHERE DTLOG = P_DTLOG;

         INSERT INTO LOGESOCIAL (DTLOG, SEQUENCIA, COMANDO)
            SELECT P_DTLOG, P_SEQLOG, SUBSTR (queSql, 1, 4000) FROM DUAL;

         IF LENGTH (queSql) > 4000
         THEN
            INSERT INTO LOGESOCIAL (DTLOG, SEQUENCIA, COMANDO)
               SELECT P_DTLOG, P_SEQLOG + 1, SUBSTR (queSql, 4001) FROM DUAL;
         END IF;

         COMMIT;
      END IF;

      P_MSG := P_MSG || SUBSTR (SQLERRM, 1, 3950);
      RAISE_APPLICATION_ERROR (-20101, P_MSG);
END;
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 23/03/2018 16:11:21
Num.Script: 52244-0-0
Nro. O.S. : 1163745
Nome      : Alterar - VGF_EVENTO_S2200_BASE_DEPEND 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VGF_EVENTO_S2200_BASE_DEPEND 
NomeObjeto: VGF_EVENTO_S2200_BASE_DEPEND 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210004
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2200_BASE_DEPEND AS                  
            SELECT CAST ((CASE
                    WHEN GRAUPARENTESCO = 1
                       THEN 3
                    WHEN GRAUPARENTESCO = 2
                       THEN 1
                    WHEN GRAUPARENTESCO = 3
                       THEN 9
                    WHEN GRAUPARENTESCO = 6
                       THEN 11
                    WHEN GRAUPARENTESCO = 8
                       THEN 5
                    WHEN GRAUPARENTESCO = 9
                       THEN 6
                    WHEN GRAUPARENTESCO = 10
                       THEN 8
                    WHEN GRAUPARENTESCO = 11
                       THEN 10
                    WHEN GRAUPARENTESCO = 12
                       THEN 2
                    WHEN GRAUPARENTESCO = 13
                       THEN 4
                    WHEN GRAUPARENTESCO = 14
                       THEN 12
                 END
                ) AS VARCHAR2 (2)
               ) "TPDEP",
          DPD.NOMEDEPEND AS "NMDEP", DPD.DTNASC AS "DTNASCTO",
          DPD.CPF AS "CPFDEP", CAST (DPD.DEPENDIRF AS CHAR (1)) AS "DEPIRRF",
          CAST (DPD.SALFAM AS CHAR (1)) AS "DEPSF", DPD.INCTRAB AS "INCTRAB",
          VEMP.CODEMPMATRIZ AS CODEMP,
            CAST (DPD.CODEMP AS VARCHAR2 (10))
          || ':'
          || CAST (DPD.CODFUNC AS VARCHAR2 (10)) AS "CHAVEPAI",
          CAST (DPD.SEQUENCIA AS VARCHAR2 (100)) AS "CHAVE"
     FROM TFPDPD DPD, VGF_EVENTO_EMPREGADOR VEMP
    WHERE DPD.GRAUPARENTESCO NOT IN (4, 5, 7)
      AND DPD.CODEMP = VEMP.CODEMP
      AND (DPD.DEPENDIRF = 'S' OR DPD.SALFAM = 'S' OR DPD.INCTRAB = 'S')
      AND DPD.DTLIMIRF > SYSDATE
/
 
 
 
/*
Requer    : 4210003
Conexao   : ORCL
Data      : 23/03/2018 17:23:07
Num.Script: 52337-0-0
Nro. O.S. : 1164442
Nome      : Altera - VGF_EVENTO_S2190
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VGF_EVENTO_S2190
NomeObjeto: VGF_EVENTO_S2190
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210004
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2190
AS
   SELECT VEMP.TPINSCEMPREGADOR,
          VEMP.NRINSCEMPREGADOR,
          FUN.CPF AS "CPFTRAB",
          FUN.DTNASC AS dtNascto,
          FUN.DTADM AS dtAdm,
          VEMP.CODEMPMATRIZ AS CODEMP,
          CAST (FUN.CODEMP || ':' || FUN.CODFUNC AS VARCHAR2 (100))
             AS "CHAVE"
     FROM TFPFUN FUN, VGF_EVENTO_EMPREGADOR VEMP
    WHERE     FUN.SITUACAO = 1
          AND FUN.CODCATEGESOCIAL< 701
          AND FUN.CODEMP = VEMP.CODEMP
          AND FUN.VINCULO NOT IN (02, 40, 80, 90, 99)
          AND FUN.SITESOCIAL = 'P'
UNION
   SELECT S2190.TPINSCEMPREGADOR,
          S2190.NRINSCEMPREGADOR,
          S2190.CPFTRAB,
          S2190.DTNASCTO,
          S2190.DTADM,
          S2190.CODEMP,
          S2190.CHAVE
     FROM TFPFUN FUN, TFPS2190 S2190
    WHERE CAST (FUN.CODEMP || ':' || FUN.CODFUNC AS VARCHAR2 (100)) = S2190.CHAVE
          AND FUN.SITESOCIAL <> 'P'
/
 
 
 
/*
Conexao   : ORCL
NomeObjeto: UPDATE TSIPAR INTEIRO
TipoObjeto: TABLE
NomeTabela: 
Executar  : SEMPRE
Ocorrencia: 4210005
FullVersao: Sim
*/
 
 
UPDATE TSIPAR SET INTEIRO = 4210004 WHERE CHAVE = 'VERSAOATUALDB'
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 19/04/2018 09:08:51
Num.Script: 52154-0-0
Nro. O.S. : 1098796
Nome      : Cria - TGFTIT RECEBANTAPROV
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: RECEBANTAPROV
TipoObjeto: COLUMN
NomeTabela: TGFTIT
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210005
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFTIT ADD RECEBANTAPROV CHAR(1)
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 19/04/2018 09:08:51
Num.Script: 52155-0-0
Nro. O.S. : 1098796
Nome      : Cria - TGFTIT QTDPARCELCTF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: QTDPARCELCTF
TipoObjeto: COLUMN
NomeTabela: TGFTIT
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210005
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFTIT ADD QTDPARCELCTF DECIMAL(5, 0)
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 23/03/2018 17:58:21
Num.Script: 52200-0-0
Nro. O.S. : 1156594
Nome      : Insere - FSUSAMODEMBARCA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Inserir o parametro
NomeObjeto: FSUSAMODEMBARCA
TipoObjeto: PARAMETRO
NomeTabela: TSIPAR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210005
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO TSIPAR ( CHAVE, DESCRICAO, CODUSU, MODULO, CLASSE, ABA, TIPO,  LOGICO)  VALUES ( 'FSUSAMODEMBARCA', 'Utilizar modelo embarcado para impressão NFCe', 0,'E', 'Saídas', 'Comercial',  'L', 'N') 
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 23/03/2018 17:58:21
Num.Script: 52209-0-0
Nro. O.S. : 1162243
Nome      : Alterar - TRG_INC_UPD_TGFPRO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - TRG_INC_UPD_TGFPRO
NomeObjeto: TRG_INC_UPD_TGFPRO
TipoObjeto: TRIGGER
NomeTabela: TGFPRO
Executar  : SE_EXISTIR
Ocorrencia: 4210005
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_INC_UPD_TGFPRO
BEFORE UPDATE OR INSERT ON TGFPRO
FOR EACH ROW
DECLARE
    P_COUNT          INT;
    P_VALCTA         CHAR(1);
    P_PARCIMPFICI      INT;
BEGIN

  IF STP_GET_ATUALIZANDO THEN
    RETURN;
  END IF;
  
  -- OS 1162243
  
  IF (:NEW.USOPROD = 'S' AND NVL(:NEW.FLEX, 'N')='N') THEN
		:NEW.FLEX := 'N';
  END IF;
  
  -- FIM DA OS 1162243
  
  IF (NVL(:NEW.TIPCONTEST, 0) <> NVL(:OLD.TIPCONTEST, 0) AND (Tsiusu_Log_Pkg.V_NOMEUSULOG <> 'SUP')) THEN

    BEGIN
        SELECT COUNT(*) INTO P_COUNT
        FROM TGFEST
        WHERE CODPROD = :NEW.CODPROD
          AND ESTOQUE <> 0; 
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            P_COUNT := 0;
    END;

    IF (P_COUNT > 0) THEN
        RAISE_APPLICATION_ERROR(-20101,'Produto possui estoque. Alteração do Tipo de Controle Adicional poderá inviabilizar movimentação. Ação só permitida para usuário SUP.');
    END IF;   

  END IF;
  
  IF (NVL(:NEW.CODENQIPIENT, 0) <> NVL(:OLD.CODENQIPIENT, 0) OR NVL(:NEW.CSTIPIENT, 0) <> NVL(:OLD.CSTIPIENT, 0)) THEN
    STP_VALIDA_ENQUADRAMENTO_IPI(:NEW.CSTIPIENT, :NEW.CODENQIPIENT);
  END IF;
    
  IF (NVL(:NEW.CODENQIPISAI, 0) <> NVL(:OLD.CODENQIPISAI, 0) OR NVL(:NEW.CSTIPISAI, 0) <> NVL(:OLD.CSTIPISAI, 0)) THEN
    STP_VALIDA_ENQUADRAMENTO_IPI(:NEW.CSTIPISAI, :NEW.CODENQIPISAI);
  END IF; 

  BEGIN
    SELECT LOGICO INTO P_VALCTA
    FROM TSIPAR 
    WHERE CHAVE = 'VALCTA';
  EXCEPTION WHEN NO_DATA_FOUND THEN
    P_VALCTA := 'N';
  END;
  
  IF (UPDATING('CODGRUPOPROD') OR INSERTING) THEN
     SELECT COUNT(1) INTO P_COUNT
       FROM TGFGRU
      WHERE CODGRUPOPROD = :NEW.CODGRUPOPROD
        AND ATIVO = 'S' AND ANALITICO = 'S';
     IF (P_COUNT = 0) THEN
        RAISE_APPLICATION_ERROR(-20101,Erros_Pkg.ERRO_GRUPO_ATIV_ANALI_EXIST);
     END IF;
  END IF;
  
  IF (P_VALCTA = 'S') THEN
    IF (UPDATING('CODCTACTB') OR INSERTING) AND (:NEW.CODCTACTB IS NOT NULL) AND (:NEW.CODCTACTB <> 0) THEN
       SELECT COUNT(1) INTO P_COUNT
         FROM TCBPLA
        WHERE CODCTACTB = :NEW.CODCTACTB
          AND ATIVA = 'S' AND ANALITICA = 'S';
       IF (P_COUNT = 0) THEN
          RAISE_APPLICATION_ERROR(-20101,Erros_Pkg.ERRO_CTACTB_ATIV_ANALI_EXIST);
       END IF;
    END IF;
  
    IF (UPDATING('CODCTACTB2') OR INSERTING) AND (:NEW.CODCTACTB2 IS NOT NULL) AND (:NEW.CODCTACTB2 <> 0) THEN
       SELECT COUNT(1) INTO P_COUNT
         FROM TCBPLA
        WHERE CODCTACTB = :NEW.CODCTACTB2
          AND ATIVA = 'S' AND ANALITICA = 'S';
       IF (P_COUNT = 0) THEN
          RAISE_APPLICATION_ERROR(-20101,Erros_Pkg.ERRO_CTACTB_ATIV_ANALI_EXIST || ' Conta contábil2');
       END IF;
    END IF;
  
      IF (UPDATING('CODCTACTB3') OR INSERTING) AND (:NEW.CODCTACTB3 IS NOT NULL) AND (:NEW.CODCTACTB3 <> 0) THEN
       SELECT COUNT(1) INTO P_COUNT
         FROM TCBPLA
        WHERE CODCTACTB = :NEW.CODCTACTB3
          AND ATIVA = 'S' AND ANALITICA = 'S';
       IF (P_COUNT = 0) THEN
          RAISE_APPLICATION_ERROR(-20101,Erros_Pkg.ERRO_CTACTB_ATIV_ANALI_EXIST || ' Conta contábil3');
       END IF;
    END IF;
  
    IF (UPDATING('CODCTACTB4') OR INSERTING) AND (:NEW.CODCTACTB4 IS NOT NULL) AND (:NEW.CODCTACTB4 <> 0) THEN
       SELECT COUNT(1) INTO P_COUNT
         FROM TCBPLA
        WHERE CODCTACTB = :NEW.CODCTACTB4
          AND ATIVA = 'S' AND ANALITICA = 'S';
       IF (P_COUNT = 0) THEN
          RAISE_APPLICATION_ERROR(-20101,Erros_Pkg.ERRO_CTACTB_ATIV_ANALI_EXIST || ' Conta contábil4');
       END IF;
    END IF;
  END IF;
  
  IF (UPDATING('CODGAR') OR INSERTING) AND (:NEW.CODGAR IS NOT NULL)  THEN
     SELECT COUNT(1) INTO P_COUNT
       FROM TGFGAR
     WHERE CODGAR = :NEW.CODGAR;
     IF P_COUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20101, 'Código de garantia não cadastrado: ' || TO_CHAR(:NEW.CODGAR));
     END IF;
  END IF
  ;
  IF (UPDATING AND :NEW.RASTRESTOQUE <> :OLD.RASTRESTOQUE) AND (NOT RASTRESTOQUE_PKG.V_LIB_EXEC) THEN
    SELECT COUNT(1) INTO P_COUNT
    FROM TGFITE
    WHERE CODPROD = :NEW.CODPROD;
    IF P_COUNT > 0 THEN
      RAISE_APPLICATION_ERROR(-20101, 'Existe movimentações de estoque para este produto. A ativação do rastreamento deve ser feito pela tela de implantação.');
    END IF;
  END IF;  
    
  IF (:NEW.CODFCI IS NOT NULL)  THEN
    IF :NEW.ORIGPROD NOT IN ('3', '5', '8') THEN
      RAISE_APPLICATION_ERROR(-20101, 'Para definir o Código da FCI a origem do produto(ORIGPROD) deve ser definida entre 3, 5 ou 8. Produto: '||TO_CHAR(:NEW.CODPROD));
    END IF;
    IF (UPPER(:NEW.CODFCI) <> 'PENDENTE') AND (LENGTH(:NEW.CODFCI) <> 36) THEN
      RAISE_APPLICATION_ERROR(-20101, 'O Código da FCI deve ser PENDENTE ou ter trinta e seis dígitos. Produto: '||TO_CHAR(:NEW.CODPROD));
    END IF; 
  END IF;
  
  IF NVL(:NEW.VLRPARCIMPEXT, 0) > 0 THEN
    P_PARCIMPFICI := GET_TSIPAR_INTEIRO('PARCIMPFICI');
    IF P_PARCIMPFICI = 0 THEN
      RAISE_APPLICATION_ERROR(-20101, 'Para informar o Vlr. da parcela de importação o parâmetro PARCIMPFICI deve ter valor maior que zero.');
    END IF;
    IF NVL(:NEW.VLRCOMERC, 0) = 0 THEN
      RAISE_APPLICATION_ERROR(-20101, 'Para informar o Vlr. da parcela de importação o Vlr. comercializado deve ser informado.');
    END IF;  
    IF ((:NEW.VLRPARCIMPEXT / :NEW.VLRCOMERC) * 100) < P_PARCIMPFICI THEN
      RAISE_APPLICATION_ERROR(-20101, 'Parcela Importada deverá ser maior ou igual a '||TO_CHAR(P_PARCIMPFICI)||' %');
    END IF;
  END IF;  
END;
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 23/03/2018 17:58:21
Num.Script: 52210-0-1000
Nro. O.S. : 1162243
Nome      : INSERE - THOOBJ - 5220900
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_INC_UPD_TGFPRO
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210005
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_INC_UPD_TGFPRO' NOMEOBJ, 52209 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '6f592e7eb62fa7ad35854a7eae80e516' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_INC_UPD_TGFPRO' and THO.hashcode = '6f592e7eb62fa7ad35854a7eae80e516')
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 29/03/2018 11:30:45
Num.Script: 52219-0-0
Nro. O.S. : 1156483
Nome      : Alterar - STP_EXCLUIR_TCBLAN_EMP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - STP_EXCLUIR_TCBLAN_EMP
NomeObjeto: STP_EXCLUIR_TCBLAN_EMP
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210005
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE STP_EXCLUIR_TCBLAN_EMP
( 
   P_CODEMP  IN DECIMAL,
   P_REFINI  IN DATE,
   P_REFFIM  IN DATE
)
AS
BEGIN
   TCBLAN_PKG.V_PROCRET := 1;

   DELETE FROM TCBSAL
   WHERE CODEMP = P_CODEMP 
   AND REFERENCIA BETWEEN P_REFINI AND P_REFFIM
   AND EXISTS (SELECT 1 
              FROM TCBLAN 
              WHERE TCBSAL.CODEMP = TCBLAN.CODEMP AND
              TCBSAL.CODCENCUS  = TCBLAN.CODCENCUS AND
              TCBSAL.REFERENCIA = TCBLAN.REFERENCIA	AND
              TCBSAL.CODCTACTB  = TCBLAN.CODCTACTB AND
              TCBSAL.CODPROJ  = TCBLAN.CODPROJ);
   
   DELETE FROM TCBLAN
   WHERE CODEMP = P_CODEMP 
   AND REFERENCIA BETWEEN P_REFINI AND P_REFFIM;
   
   TCBLAN_PKG.V_PROCRET := 0;
   
   UPDATE TCIMOV SET
     NUMLOTE = NULL
   , NUMLANC = NULL
   , CODEMP = NULL
   WHERE CODEMP = P_CODEMP
   AND REFERENCIA BETWEEN P_REFINI AND P_REFFIM
   AND NUMLOTE IS NOT NULL
   AND NUMLANC IS NOT NULL;
   
   DELETE FROM TCBLOT
   WHERE CODEMP = P_CODEMP 
   AND REFERENCIA BETWEEN P_REFINI AND P_REFFIM;
   
   DELETE FROM TCBINT
   WHERE CODEMP = P_CODEMP
   AND REFERENCIA BETWEEN P_REFINI AND P_REFFIM;
   
END;

/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 29/03/2018 11:30:45
Num.Script: 52220-0-1000
Nro. O.S. : 1156483
Nome      : INSERE - THOOBJ - 5221900
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE STP_EXCLUIR_TCBLAN_EMP
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210005
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'STP_EXCLUIR_TCBLAN_EMP' NOMEOBJ, 52219 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, 'c747cc1b9b32d84555947351cdc862d6' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'STP_EXCLUIR_TCBLAN_EMP' and THO.hashcode = 'c747cc1b9b32d84555947351cdc862d6')
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 29/03/2018 11:30:45
Num.Script: 52231-0-0
Nro. O.S. : 1156483
Nome      : Alterar - SNK_CONSOLIDAR_LOTES_CONT
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - SNK_CONSOLIDAR_LOTES_CONT
NomeObjeto: SNK_CONSOLIDAR_LOTES_CONT
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210005
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_CONSOLIDAR_LOTES_CONT(P_CODEMPORIG      NUMBER,
                                                      P_CODEMPDEST      NUMBER,
                                                      P_DTBUSCA         DATE,
                                                      P_NUMLOTE_COUNT   NUMBER,
                                                      P_RESULT_LOTES    OUT NUMBER)
AS
    P_LANINI  NUMBER(10);
    P_LANFIM  NUMBER(10);
BEGIN
    P_RESULT_LOTES := NVL(P_NUMLOTE_COUNT, 0);
    
    /* DESABILITA ATUALIZAÃÃO DE SALDOS LINHA A LINHA DA TCBLAN*/
    STP_ALTERA_CTBZJAVA(1);
    
    /*mÃ©todo buscarLotesdo java */
    FOR LOT IN (SELECT CODEMP, CODUSU, COMENTARIOS, DTMOV, NUMLOTE, REFERENCIA, SITUACAO, TOTLOTE, ULTLANC
                 FROM TCBLOT
                 WHERE CODEMP = P_CODEMPORIG
                   AND REFERENCIA = P_DTBUSCA) LOOP
        P_RESULT_LOTES := P_RESULT_LOTES + 1;
        
        /*lancarLote do java*/
        INSERT INTO TCBLOT (CODEMP, CODUSU, COMENTARIOS, DTMOV, NUMLOTE, REFERENCIA, SITUACAO, TOTLOTE, ULTLANC)
                     VALUES(P_CODEMPDEST, LOT.CODUSU, 'Consolidacao Empresas', LOT.DTMOV, P_RESULT_LOTES, LOT.REFERENCIA, LOT.SITUACAO, LOT.TOTLOTE, LOT.ULTLANC);
        
        /*efetuarLancamentos do java*/
        INSERT INTO TCBLAN(CODCENCUS, CODCONPAR, CODCTACTB, CODEMP,       CODHISTCTB, CODPROJ, CODUSU, COMPLHIST, DTMOV, LIBERADO, NUMDOC, NUMLANC, NUMLOTE,        PARTLALUR_A, REFERENCIA, SEQUENCIA, TIPLANC, VENCIMENTO, VLRLANC)                     
                    SELECT CODCENCUS, CODCONPAR, CODCTACTB, P_CODEMPDEST, CODHISTCTB, CODPROJ, CODUSU, COMPLHIST, DTMOV, LIBERADO, NUMDOC, NUMLANC, P_RESULT_LOTES, PARTLALUR_A, REFERENCIA, SEQUENCIA, TIPLANC, VENCIMENTO, VLRLANC
                    FROM TCBLAN
                    WHERE CODEMP = P_CODEMPORIG
                      AND NUMLOTE = LOT.NUMLOTE 
                      AND REFERENCIA = P_DTBUSCA;
        
        /* Prepara e Atualiza o Saldo do LOTE */
        SELECT MIN(NUMLANC), MAX(NUMLANC) INTO P_LANINI, P_LANFIM
        FROM TCBLAN
        WHERE CODEMP = P_CODEMPORIG
          AND NUMLOTE = LOT.NUMLOTE 
          AND REFERENCIA = P_DTBUSCA;

        STP_ATUALIZA_SALDO_LOTE(P_CODEMPDEST,LOT.REFERENCIA,P_RESULT_LOTES,P_LANINI, P_LANFIM);

        COMMIT;
    END LOOP;
    STP_ALTERA_CTBZJAVA(0);
EXCEPTION WHEN OTHERS THEN
    STP_ALTERA_CTBZJAVA(0);
    RAISE_APPLICATION_ERROR(-20101, SUBSTR(SQLERRM, 1, 4000));
END;
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 29/03/2018 11:30:45
Num.Script: 52232-0-1000
Nro. O.S. : 1156483
Nome      : INSERE - THOOBJ - 5223100
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_CONSOLIDAR_LOTES_CONT
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210005
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_CONSOLIDAR_LOTES_CONT' NOMEOBJ, 52231 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, 'acceed9a55f2e48e51ad381567e330fa' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_CONSOLIDAR_LOTES_CONT' and THO.hashcode = 'acceed9a55f2e48e51ad381567e330fa')
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 23/03/2018 17:58:21
Num.Script: 52248-0-0
Nro. O.S. : 1161409
Nome      : Cria - TFPS2205 GRAUINSTR
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: GRAUINSTR
TipoObjeto: COLUMN
NomeTabela: TFPS2205
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210005
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPS2205 ADD GRAUINSTR VARCHAR2(2)
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 23/03/2018 17:58:21
Num.Script: 52249-0-0
Nro. O.S. : 1161409
Nome      : Cria - TFPS2205 EMAILALTERNAT
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: EMAILALTERNAT
TipoObjeto: COLUMN
NomeTabela: TFPS2205
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210005
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPS2205 ADD EMAILALTERNAT VARCHAR2(60)
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 23/03/2018 17:58:21
Num.Script: 52250-0-0
Nro. O.S. : 1161409
Nome      : Altera - NRRIC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - NRRIC
NomeObjeto: NRRIC
TipoObjeto: COLUMN
NomeTabela: TFPS2205
Executar  : SE_EXISTIR
Ocorrencia: 4210005
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPS2205 MODIFY NRRIC VARCHAR(14)
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 23/03/2018 17:58:21
Num.Script: 52251-0-0
Nro. O.S. : 1161409
Nome      : Altera - NRRG
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - NRRG
NomeObjeto: NRRG
TipoObjeto: COLUMN
NomeTabela: TFPS2205
Executar  : SE_EXISTIR
Ocorrencia: 4210005
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPS2205 MODIFY NRRG VARCHAR(14)
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 23/03/2018 17:58:21
Num.Script: 52252-0-0
Nro. O.S. : 1161409
Nome      : Altera - NRRNE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - NRRNE
NomeObjeto: NRRNE
TipoObjeto: COLUMN
NomeTabela: TFPS2205
Executar  : SE_EXISTIR
Ocorrencia: 4210005
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPS2205 MODIFY NRRNE VARCHAR(14)
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 23/03/2018 17:58:21
Num.Script: 52253-0-0
Nro. O.S. : 1161409
Nome      : Atlera - NROC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Atlera - NROC
NomeObjeto: NROC
TipoObjeto: COLUMN
NomeTabela: TFPS2205
Executar  : SE_EXISTIR
Ocorrencia: 4210005
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPS2205 MODIFY NROC VARCHAR(14)
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 23/03/2018 17:58:21
Num.Script: 52254-0-0
Nro. O.S. : 1161409
Nome      : Altera - UFCNH
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - UFCNH
NomeObjeto: UFCNH
TipoObjeto: COLUMN
NomeTabela: TFPS2205
Executar  : SE_EXISTIR
Ocorrencia: 4210005
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPS2205 MODIFY UFCNH VARCHAR(2)
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 23/03/2018 17:58:21
Num.Script: 52257-0-0
Nro. O.S. : 1161409
Nome      : Renomeia - CPFFUNC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Renomeia - CPFFUNC
NomeObjeto: CHAVEPAI
TipoObjeto: COLUMN
NomeTabela: TFPS2205_DEPENDENTE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210005
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPS2205_DEPENDENTE RENAME COLUMN CPFFUNC TO CHAVEPAI
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 23/03/2018 17:58:21
Num.Script: 52258-0-0
Nro. O.S. : 1161409
Nome      : Cria - PK_TFPS2205_DEPENDENTE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - PK_TFPS2205_DEPENDENTE
NomeObjeto: PK_TFPS2205_DEPENDENTE
TipoObjeto: PRIMARY KEY
NomeTabela: TFPS2205_DEPENDENTE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210005
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPS2205_DEPENDENTE ADD CONSTRAINT PK_TFPS2205_DEPENDENTE PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVEPAI, CHAVE)
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 23/03/2018 17:58:21
Num.Script: 52259-0-0
Nro. O.S. : 1161409
Nome      : Cria - FK_DEPENDENTE_TFPS2205
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - FK_DEPENDENTE_TFPS2205
NomeObjeto: FK_DEPENDENTE_TFPS2205
TipoObjeto: FOREIGN KEY
NomeTabela: TFPS2205_DEPENDENTE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210005
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPS2205_DEPENDENTE ADD
  CONSTRAINT FK_DEPENDENTE_TFPS2205 
  FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVEPAI) 
  REFERENCES TFPS2205 (CODEMP,DTREF,TPAMB,SEQUENCIA,CHAVE)
  ON DELETE CASCADE
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 23/03/2018 17:58:21
Num.Script: 52260-0-0
Nro. O.S. : 1161409
Nome      : Atlerar - DSCSALVAR
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Atlerar - DSCSALVAR
NomeObjeto: DSCSALVAR
TipoObjeto: COLUMN
NomeTabela: TFPS2206
Executar  : SE_EXISTIR
Ocorrencia: 4210005
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPS2206 MODIFY DSCSALVAR VARCHAR2(250)
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 23/03/2018 17:58:21
Num.Script: 52261-0-0
Nro. O.S. : 1161409
Nome      : Dropa - PK_TFPS2206_HORARIO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropa - PK_TFPS2206_HORARIO
NomeObjeto: PK_TFPS2206_HORARIO
TipoObjeto: PRIMARY KEY
NomeTabela: TFPS2206_HORARIO
Executar  : SE_EXISTIR
Ocorrencia: 4210005
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPS2206_HORARIO DROP CONSTRAINT PK_TFPS2206_HORARIO
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 23/03/2018 17:58:21
Num.Script: 52262-0-0
Nro. O.S. : 1161409
Nome      : Dropa - FK_HORARIO_TFPS2206
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropa - FK_HORARIO_TFPS2206
NomeObjeto: FK_HORARIO_TFPS2206
TipoObjeto: FOREIGN KEY
NomeTabela: TFPS2206_HORARIO
Executar  : SE_EXISTIR
Ocorrencia: 4210005
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPS2206_HORARIO DROP CONSTRAINT FK_HORARIO_TFPS2206
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 25/04/2018 17:41:59
Num.Script: 52262-0-1
Nro. O.S. : 1133146
Nome      : Dropar - PK_TFPS2206
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - PK_TFPS2206
NomeObjeto: PK_TFPS2206
TipoObjeto: PRIMARY KEY
NomeTabela: TFPS2206
Executar  : SE_EXISTIR
Ocorrencia: 4210005
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPS2206 DROP CONSTRAINT PK_TFPS2206
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 25/04/2018 17:42:14
Num.Script: 52262-0-2
Nro. O.S. : 1133146
Nome      : Criar - PK_TFPS2206
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - PK_TFPS2206
NomeObjeto: PK_TFPS2206
TipoObjeto: PRIMARY KEY
NomeTabela: TFPS2206
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210005
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPS2206 ADD CONSTRAINT PK_TFPS2206 PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE)
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 23/03/2018 17:58:21
Num.Script: 52263-0-0
Nro. O.S. : 1161409
Nome      : Renomeia - CPFFUNC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Renomeia - CPFFUNC
NomeObjeto: CHAVEPAI
TipoObjeto: COLUMN
NomeTabela: TFPS2206_HORARIO
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210005
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPS2206_HORARIO RENAME COLUMN CPFFUNC TO CHAVEPAI
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 23/03/2018 17:58:21
Num.Script: 52264-0-0
Nro. O.S. : 1161409
Nome      : Cria - PK_TFPS2206_HORARIO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - PK_TFPS2206_HORARIO
NomeObjeto: PK_TFPS2206_HORARIO
TipoObjeto: PRIMARY KEY
NomeTabela: TFPS2206_HORARIO
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210005
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPS2206_HORARIO ADD CONSTRAINT PK_TFPS2206_HORARIO PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVEPAI, CHAVE)
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 23/03/2018 17:58:21
Num.Script: 52265-0-0
Nro. O.S. : 1161409
Nome      : Cria - FK_HORARIO_TFPS2206
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - FK_HORARIO_TFPS2206
NomeObjeto: FK_HORARIO_TFPS2206
TipoObjeto: FOREIGN KEY
NomeTabela: TFPS2206_HORARIO
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210005
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPS2206_HORARIO ADD 
  CONSTRAINT FK_HORARIO_TFPS2206 
  FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVEPAI) 
  REFERENCES TFPS2206 (CODEMP,DTREF,TPAMB,SEQUENCIA,CHAVE)
  ON DELETE CASCADE
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 23/03/2018 17:58:21
Num.Script: 52266-0-0
Nro. O.S. : 1161409
Nome      : Cria - TRG_UPD_TFPS2200
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TRG_UPD_TFPS2200
NomeObjeto: TRG_UPD_TFPS2200
TipoObjeto: TRIGGER
NomeTabela: TFPS2200
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210005
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_UPD_TFPS2200
BEFORE UPDATE ON TFPS2200
FOR EACH ROW
WHEN (
NEW.STATUS = 'F' AND OLD.STATUS <> NEW.STATUS
      )
DECLARE P_COUNT     NUMBER(10);
BEGIN
    SELECT COUNT(1) INTO P_COUNT
    FROM TFPS2205
    WHERE CODEMP = :NEW.CODEMP 
      AND CHAVE = :NEW.CHAVE
      AND TPAMB = SNK_GET_TPAMB_ESOCIAL
      AND EXISTS(SELECT 1   /* SE O FUNCIONÁRIO NÃO FOI LIBERADO PARA O EVENTO 2205 TEM QUE CONTINUAR GERANDO O 2205 COMO UMA CÓPIA DO 2200*/
                 FROM TFPFUN
                 WHERE CODEMP||':'||CODFUNC = TFPS2205.CHAVE
                   AND SITESOCIAL IN ('5', 'T'));

    IF P_COUNT = 0 THEN
        INSERT INTO TFPS2205(UFCTPS, UFCNH, UFBRASIL, TRABAPOSENT, TPLOGRADBRASIL, 
                             TPINSCEMPREGADOR, STATUS, SEXO, SERIECTPS, SEQUENCIA, 
                             REABREADAP, RACACOR, PAISRESID, ORGAOEMISSORRNE, 
                             ORGAOEMISSORRIC, ORGAOEMISSORRG, ORGAOEMISSOROC, 
                             OBSERVACAO, NRRNE, NRRIC, NRRG, NRREGCNH, 
                             NRORECIBO_ANT, NRORECIBO, NROC, NRLOGRADEXTERIOR, 
                             NRLOGRADBRASIL, NRINSCEMPREGADOR, NRCTPS, NMTRAB, 
                             NMSOC, NMCIDEXTERIOR, NISTRAB, INFOCOTA, FONEPRINC, 
                             FONEALTERNAT, FILHOSBR, ESTCIV, EMAILPRINC, DTVALIDOC, 
                             DTVALIDCNH, DTREF, DTPRIHAB, DTEXPEDRNE, DTEXPEDRIC, 
                             DTEXPEDRG, DTEXPEDOC, DTEXPEDCNH, DTCHEGADA, 
                             DTALTERACAO, DSCLOGRADEXTERIOR, DSCLOGRADBRASIL, 
                             DEFVISUAL, DEFMENTAL, DEFINTELECTUAL, DEFFISICA, 
                             DEFAUDITIVA, CPFTRAB, COMPLEMENTOEXTERIOR, 
                             COMPLEMENTOBRASIL, CODPOSTALEXTERIOR, CODMUNICBRASIL, 
                             CODEMP, CLASSTRABESTRANG, CHAVE, CEPBRASIL, 
                             CATEGORIACNH, CASADOBR, BAIRROEXTERIOR, BAIRROBRASIL, GRAUINSTR, 
                             ACAO, TPAMB)
            VALUES(:NEW.UFCTPS, :NEW.UFCNH, :NEW.UFBRASIL, :NEW.TRABAPOSENT, :NEW.TPLOGRADBRASIL, 
                   :NEW.TPINSCEMPREGADOR, :NEW.STATUS, :NEW.SEXO, :NEW.SERIECTPS, :NEW.SEQUENCIA, 
                   :NEW.REABREADAP, :NEW.RACACOR, :NEW.PAISRESID, :NEW.ORGAOEMISSORRNE, 
                   :NEW.ORGAOEMISSORRIC, :NEW.ORGAOEMISSORRG, :NEW.ORGAOEMISSOROC, 
                   :NEW.OBSERVACAO, :NEW.NRRNE, :NEW.NRRIC, :NEW.NRRG, :NEW.NRREGCNH, 
                   :NEW.NRORECIBO_ANT, :NEW.NRORECIBO, :NEW.NROC, :NEW.NRLOGRADEXTERIOR, 
                   :NEW.NRLOGRADBRASIL, :NEW.NRINSCEMPREGADOR, :NEW.NRCTPS, :NEW.NMTRAB, 
                   :NEW.NMSOC, :NEW.NMCIDEXTERIOR, :NEW.NISTRAB, :NEW.INFOCOTA, :NEW.FONEPRINC, 
                   :NEW.FONEALTERNAT, :NEW.FILHOSBR, :NEW.ESTCIV, :NEW.EMAILPRINC, :NEW.DTVALIDOC, 
                   :NEW.DTVALIDCNH, :NEW.DTREF, :NEW.DTPRIHAB, :NEW.DTEXPEDRNE, :NEW.DTEXPEDRIC, 
                   :NEW.DTEXPEDRG, :NEW.DTEXPEDOC, :NEW.DTEXPEDCNH, :NEW.DTCHEGADA, 
                    NULL /*DTALTERACAO*/, :NEW.DSCLOGRADEXTERIOR, :NEW.DSCLOGRADBRASIL, 
                   :NEW.DEFVISUAL, :NEW.DEFMENTAL, :NEW.DEFINTELECTUAL, :NEW.DEFFISICA, 
                   :NEW.DEFAUDITIVA, :NEW.CPFTRAB, :NEW.COMPLEMENTOEXTERIOR, 
                   :NEW.COMPLEMENTOBRASIL, :NEW.CODPOSTALEXTERIOR, :NEW.CODMUNICBRASIL, 
                   :NEW.CODEMP, :NEW.CLASSTRABESTRANG, :NEW.CHAVE, :NEW.CEPBRASIL, 
                   :NEW.CATEGORIACNH, :NEW.CASADOBR, :NEW.BAIRROEXTERIOR, :NEW.BAIRROBRASIL, :NEW.GRAUINSTR, 
                   :NEW.ACAO, :NEW.TPAMB);
                   
            INSERT INTO TFPS2205_DEPENDENTE (CODEMP, DTREF, SEQUENCIA, TPDEP, NMDEP, DTNASCTO, CPFDEP, DEPIRRF, DEPSF, INCTRAB, CHAVEPAI, CHAVE, TPAMB)
            SELECT CODEMP, DTREF, SEQUENCIA, TPDEP, NMDEP, DTNASCTO, CPFDEP, DEPIRRF, DEPSF, INCTRAB, CHAVEPAI, CHAVE, TPAMB
              FROM TFPS2200_DEPENDENTE
            WHERE CODEMP = :NEW.CODEMP
              AND CHAVEPAI = :NEW.CHAVE
              AND DTREF = :NEW.DTREF
              AND TPAMB = :NEW.TPAMB
              AND SEQUENCIA = :NEW.SEQUENCIA;

                   
    END IF;

    SELECT COUNT(1) INTO P_COUNT
    FROM TFPS2206
    WHERE CODEMP = :NEW.CODEMP 
      AND CHAVE = :NEW.CHAVE
      AND TPAMB = SNK_GET_TPAMB_ESOCIAL
      AND EXISTS(SELECT 1   /* SE O FUNCIONÁRIO NÃO FOI LIBERADO PARA O EVENTO 2205 TEM QUE CONTINUAR GERANDO O 2205 COMO UMA CÓPIA DO 2200*/
                 FROM TFPFUN
                 WHERE CODEMP||':'||CODFUNC = TFPS2206.CHAVE
                   AND SITESOCIAL IN ('6', 'T'));
    IF P_COUNT = 0 THEN 
        INSERT INTO TFPS2206(CODEMP, DTREF, SEQUENCIA, TPINSCEMPREGADOR, 
                             NRINSCEMPREGADOR, CPFTRAB, NISTRAB, MATRICULA, 
                             DTALTERACAO, DTEF, DSCALT, TPREGTRAB, TPREGPREV, 
                             TPREGJOR, NATATIVIDADE, DTBASE, CNPJSINDCATEGPROF, 
                             JUSTPRORR, TPPLANRP, CODCARGO, CODFUNCAO, CODCATEG, 
                             CODCATEG2, CODCARREIRA, DTINGRCARR, VRSALFX, 
                             UNDSALFIXO, DSCSALVAR, TPCONTR, DTTERM, 
                             TPINSCLOCALTRABGERAL, NRINSCLOCALTRABGERAL, 
                             TPLOGRADLOCALTRABDOM, DSCLOGRADLOCALTRABDOM, 
                             NRLOGRADLOCALTRABDOM, COMPLEMENTOLOCALTRABDOM, 
                             BAIRROLOCALTRABDOM, CEPLOCALTRABDOM, CODMUNICLOCALTRABDOM, 
                             UFLOCALTRABDOM, QTDHRSSEM, TPJORNADA, DSCTPJORN, TMPPARC, 
                             CNPJSINDTRAB, NRPROCJUDALVARAJUDICIAL, MTVALTER, STATUS, 
                             NRORECIBO, NRORECIBO_ANT, ACAO, CHAVE, TPAMB)
            VALUES(:NEW.CODEMP, :NEW.DTREF, :NEW.SEQUENCIA, :NEW.TPINSCEMPREGADOR, 
                   :NEW.NRINSCEMPREGADOR, :NEW.CPFTRAB, :NEW.NISTRAB, :NEW.MATRICULA, 
                    NULL /*:NEW.DTALTERACAO*/, NULL/*:NEW.DTEF*/, NULL /*:NEW.DSCALT*/, :NEW.TPREGTRAB, :NEW.TPREGPREV, 
                   :NEW.TPREGJOR, :NEW.NATATIVIDADE, :NEW.DTBASE, :NEW.CNPJSINDCATEGPROF, 
                    NULL /*:NEW.JUSTPRORR*/, :NEW.TPPLANRP, :NEW.CODCARGO, :NEW.CODFUNCAO, :NEW.CODCATEG, 
                   :NEW.CODCATEG2, :NEW.CODCARREIRA, :NEW.DTINGRCARR, :NEW.VRSALFX, 
                   :NEW.UNDSALFIXO, :NEW.DSCSALVAR, :NEW.TPCONTR, :NEW.DTTERM, 
                   :NEW.TPINSCLOCALTRABGERAL, :NEW.NRINSCLOCALTRABGERAL, 
                   :NEW.TPLOGRADLOCALTRABDOM, :NEW.DSCLOGRADLOCALTRABDOM, 
                   :NEW.NRLOGRADLOCALTRABDOM, :NEW.COMPLEMENTOLOCALTRABDOM, 
                   :NEW.BAIRROLOCALTRABDOM, :NEW.CEPLOCALTRABDOM, :NEW.CODMUNICLOCALTRABDOM, 
                   :NEW.UFLOCALTRABDOM, :NEW.QTDHRSSEM, :NEW.TPJORNADA, :NEW.DSCTPJORN, :NEW.TMPPARC, 
                   :NEW.CNPJSINDTRAB, :NEW.NRPROCJUDALVARAJUDICIAL, NULL /*:NEW.MTVALTE*/, :NEW.STATUS, 
                   :NEW.NRORECIBO, :NEW.NRORECIBO_ANT, :NEW.ACAO, :NEW.CHAVE, :NEW.TPAMB);
    
            INSERT INTO TFPS2206_HORARIO (CODEMP, DTREF, SEQUENCIA, DIA, CODHORCONTRAT, CHAVEPAI, CHAVE, TPAMB)
            SELECT CODEMP, DTREF, SEQUENCIA, DIA, CODHORCONTRAT, CHAVEPAI, CHAVE, TPAMB
              FROM TFPS2200_HORARIO
            WHERE CODEMP = :NEW.CODEMP
              AND CHAVEPAI = :NEW.CHAVE
              AND DTREF = :NEW.DTREF
              AND TPAMB = :NEW.TPAMB
              AND SEQUENCIA = :NEW.SEQUENCIA;
    
    END IF;
END;
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 23/03/2018 17:58:22
Num.Script: 52267-0-0
Nro. O.S. : 1161409
Nome      : Drop - TRG_INC_UPD_TFPS2200
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - TRG_INC_UPD_TFPS2200
NomeObjeto: TRG_INC_UPD_TFPS2200
TipoObjeto: TRIGGER
NomeTabela: TFPS2200
Executar  : SE_EXISTIR
Ocorrencia: 4210005
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
DROP TRIGGER TRG_INC_UPD_TFPS2200
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 23/03/2018 17:58:22
Num.Script: 52268-0-0
Nro. O.S. : 1161409
Nome      : Cria - TFPS2300
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TFPS2300
NomeObjeto: TFPS2300
TipoObjeto: TABLE
NomeTabela: TFPS2300
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210005
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS2300(
    CODEMP                  NUMBER(5)   NOT NULL,
    DTREF                   DATE        NOT NULL,
    SEQUENCIA               NUMBER(5)   NOT NULL,
    TPINSCEMPREGADOR        NUMBER(5),
    NRINSCEMPREGADOR        VARCHAR2(15),
    CPFTRAB                 VARCHAR2(11),
    NISTRAB                 VARCHAR2(11),
    NMTRAB                  VARCHAR2(70),
    SEXO                    CHAR(1),
    RACACOR                 NUMBER(5),
    ESTCIV                  NUMBER(5),
    GRAUINSTR               VARCHAR2(2),
    NMSOC                   VARCHAR2(70),
    DTNASCTONASCIMENTO      DATE,
    CODMUNICNASCIMENTO      NUMBER(7),
    UFNASCIMENTO            VARCHAR2(2),
    PAISNASCTONASCIMENTO    VARCHAR2(3),
    PAISNACNASCIMENTO       VARCHAR2(3),
    NMMAENASCIMENTO         VARCHAR2(70),
    NMPAINASCIMENTO         VARCHAR2(70),
    NRCTPS                  VARCHAR2(11),
    SERIECTPS               VARCHAR2(5),
    UFCTPS                  VARCHAR2(2),
    NRRIC                   VARCHAR2(14),
    ORGAOEMISSORRIC         VARCHAR2(20),
    DTEXPEDRIC              DATE,
    NRRG                    VARCHAR2(14),
    ORGAOEMISSORRG          VARCHAR2(20),
    DTEXPEDRG               DATE,
    NRRNE                   VARCHAR2(14),
    ORGAOEMISSORRNE         VARCHAR2(20),
    DTEXPEDRNE              DATE,
    NROC                    VARCHAR2(14),
    ORGAOEMISSOROC          VARCHAR2(20),
    DTEXPEDOC               DATE,
    DTVALIDOC               DATE,
    NRREGCNH                VARCHAR2(12),
    DTEXPEDCNH              DATE,
    UFCNH                   VARCHAR2(2),
    DTVALIDCNH              DATE,
    DTPRIHAB                DATE,
    CATEGORIACNH            VARCHAR2(2),
    TPLOGRADBRASIL          VARCHAR2(4),
    DSCLOGRADBRASIL         VARCHAR2(80),
    NRLOGRADBRASIL          VARCHAR2(10),
    COMPLEMENTOBRASIL       VARCHAR2(30),
    BAIRROBRASIL            VARCHAR2(60),
    CEPBRASIL               VARCHAR2(8),
    CODMUNICBRASIL          NUMBER(7),
    UFBRASIL                VARCHAR2(2),
    PAISRESID               VARCHAR2(3),
    DSCLOGRADEXTERIOR       VARCHAR2(80),
    NRLOGRADEXTERIOR        VARCHAR2(10),
    COMPLEMENTOEXTERIOR     VARCHAR2(30),
    BAIRROEXTERIOR          VARCHAR2(60),
    NMCIDEXTERIOR           VARCHAR2(50),
    CODPOSTALEXTERIOR       VARCHAR2(12),
    DTCHEGADA               DATE,
    CLASSTRABESTRANG        NUMBER(5),
    CASADOBR                CHAR(1),
    FILHOSBR                CHAR(1),
    DEFFISICA               CHAR(1),
    DEFVISUAL               CHAR(1),
    DEFAUDITIVA             CHAR(1),
    DEFMENTAL               CHAR(1),
    DEFINTELECTUAL          CHAR(1),
    REABREADAP              CHAR(1),
    OBSERVACAO              VARCHAR2(255),
    FONEPRINC               VARCHAR2(13),
    FONEALTERNAT            VARCHAR2(13),
    EMAILPRINC              VARCHAR2(60),
    EMAILALTERNAT           VARCHAR2(60),
    CADINI                  CHAR(1),
    CODCATEG                NUMBER(5),
    DTINICIO                DATE,
    NATATIVIDADE            NUMBER(5),
    CODCARGO                VARCHAR2(30),
    CODFUNCAO               VARCHAR2(30),
    VRSALFX                 FLOAT,
    UNDSALFIXO              NUMBER(5),
    DSCSALVAR               VARCHAR2(250),
    OPCFGTS                 NUMBER(5),
    DTOPCFGTS               DATE,
    CATEGORIGDIRSIND        NUMBER(5),
    CNPJORIGDIRSIND         VARCHAR2(14),
    DTADMORIGDIRSIND        DATE,
    MATRICORIGDIRSIND       VARCHAR2(30),
    CATEGORIGCED            NUMBER(5),
    CNPJCED                 VARCHAR2(14),
    MATRICCED               VARCHAR2(30),
    DTADMCED                DATE,
    TPREGTRABCED            NUMBER(5),
    TPREGPREVCED            NUMBER(5),
    INFONUSCED              NUMBER(5),
    NATESTAGIO              CHAR(1),
    NIVESTAGIO              CHAR(1),
    AREAATUACAO             VARCHAR2(50),
    NRAPOL                  VARCHAR2(30),
    VLRBOLSA                FLOAT,
    DTPREVTERM              DATE,
    CNPJINSTENSINO          VARCHAR2(14),
    NMRAZAOINSTENS          VARCHAR2(100),
    DSCLOGRADINSTENS        VARCHAR2(80),
    NRLOGRADINSTENS         VARCHAR2(10),
    BAIRROINSTENS           VARCHAR2(60),
    CEPINSTENS              VARCHAR2(8),
    CODMUNICINSTENS         NUMBER(7),
    UFINSTENS               VARCHAR2(2),
    CNPJAGNTINTEG           VARCHAR2(14),
    NMRAZAOAGNTINTEG        VARCHAR2(100),
    DSCLOGRADAGNTINTEG      VARCHAR2(80),
    NRLOGRADAGNTINTEG       VARCHAR2(10),
    BAIRROAGNTINTEG         VARCHAR2(60),
    CEPAGNTINTEG            VARCHAR2(8),
    CODMUNICAGNTINTEG       NUMBER(7),
    UFAGNTINTEG             VARCHAR2(2),
    CPFSUPERVISOR           VARCHAR2(11),
    NMSUPERV                VARCHAR2(70),
    DTINIAFAST              DATE,
    CODMOTAFAST             VARCHAR2(2),
    DTTERM                  DATE,
    STATUS                  CHAR(1)         NOT NULL,
    NRORECIBO               VARCHAR2(50), 
    NRORECIBO_ANT           VARCHAR2(50),
    ACAO                    CHAR(1),
    CHAVE                   VARCHAR2(100)   NOT NULL,
    CONTROLE                CHAR(1)         DEFAULT 'I' NOT NULL,
    TPAMB                   CHAR(1)         DEFAULT 'T' NOT NULL,
    CONSTRAINT PK_TFPS2300 PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE),
    CONSTRAINT CHK_STATUS_TFPS2300 CHECK (STATUS IN ('P','I', 'E', 'F', 'X')), /*P=PENDENTE I=INCLUÍDO E=ENVIADO F=FINALIZADO X=FINAL.C/ERRO */ 
    CONSTRAINT CHK_ACAO_TFPS2300 CHECK (ACAO IN ('I', 'A', 'E')), /*'I'=INCLUÍR 'A=ALTERAR 'E=EXCLUIR */
    CONSTRAINT CHK_CONTROLE_TFPS2300 CHECK (CONTROLE IN ('I', 'A', 'E')),
    CONSTRAINT CHK_TPAMB_TFPS2300 CHECK (TPAMB IN ('P', 'T')) /* P = PRODUCAO T = TESTE */
)
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 23/03/2018 17:58:22
Num.Script: 52269-0-0
Nro. O.S. : 1161409
Nome      : Cria - TFPS2300_DEPENDENTE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TFPS2300_DEPENDENTE
NomeObjeto: TFPS2300_DEPENDENTE
TipoObjeto: TABLE
NomeTabela: TFPS2300_DEPENDENTE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210005
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS2300_DEPENDENTE
(
  CODEMP     NUMBER(5)                          NOT NULL,
  DTREF      DATE                               NOT NULL,
  SEQUENCIA  NUMBER(5)                          NOT NULL,
  TPDEP      VARCHAR2(2),
  NMDEP      VARCHAR2(70),
  DTNASCTO   DATE,
  CPFDEP     VARCHAR2(11),
  DEPIRRF    CHAR(1),
  DEPSF      CHAR(1),
  INCTRAB    CHAR(1),
  CHAVEPAI   VARCHAR2(100)                 NOT NULL,
  CHAVE      VARCHAR2(100)                 NOT NULL,
  TPAMB      CHAR(1)                       DEFAULT 'T'  NOT NULL,
  CONSTRAINT PK_TFPS2300_DEPENDENTE PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVEPAI, CHAVE),
  CONSTRAINT FK_DEPENDENTE_TFPS2300 FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVEPAI) REFERENCES TFPS2300 (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE) ON DELETE CASCADE,  
  CONSTRAINT CHK_TPAMB_TFPS2300_DEP CHECK (TPAMB IN ('P', 'T'))
)
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 23/03/2018 17:58:22
Num.Script: 52270-0-0
Nro. O.S. : 1161409
Nome      : Cria - TFPS2306
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TFPS2306
NomeObjeto: TFPS2306
TipoObjeto: TABLE
NomeTabela: TFPS2306
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210005
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS2306(
    CODEMP                  NUMBER(5)   NOT NULL,
    DTREF                   DATE        NOT NULL,
    SEQUENCIA               NUMBER(5)   NOT NULL,
    TPINSCEMPREGADOR        NUMBER(5),
    NRINSCEMPREGADOR        VARCHAR2(15),
    CPFTRAB                 VARCHAR2(11),
    NISTRAB                 VARCHAR2(11),     
    CODCATEG                NUMBER(5),
    DTALTERACAO             DATE,
    DTEF                    DATE,
    NATATIVIDADE            NUMBER(5),
    CODCARGO                VARCHAR2(30),
    CODFUNCAO               VARCHAR2(30),
    VRSALFX                 FLOAT,
    UNDSALFIXO              NUMBER(5),
    DSCSALVAR               VARCHAR2(90),
    NATESTAGIO              CHAR(1),
    NIVESTAGIO              CHAR(1),
    AREAATUACAO             VARCHAR2(50),
    NRAPOL                  VARCHAR2(30),
    VLRBOLSA                FLOAT,
    DTPREVTERM              DATE,
    CNPJINSTENSINO          VARCHAR2(14),
    NMRAZAOINSTENS          VARCHAR2(100),
    DSCLOGRADINSTENS        VARCHAR2(80),
    NRLOGRADINSTENS         VARCHAR2(10),
    BAIRROINSTENS           VARCHAR2(60),
    CEPINSTENS              VARCHAR2(8),
    CODMUNICINSTENS         NUMBER(7),
    UFINSTENS               VARCHAR2(2),
    CNPJAGNTINTEG           VARCHAR2(14),
    NMRAZAOAGNTINTEG        VARCHAR2(100),
    DSCLOGRADAGNTINTEG      VARCHAR2(80),
    NRLOGRADAGNTINTEG       VARCHAR2(10),
    BAIRROAGNTINTEG         VARCHAR2(60),
    CEPAGNTINTEG            VARCHAR2(8),
    CODMUNICAGNTINTEG       NUMBER(7),
    UFAGNTINTEG             VARCHAR2(2),
    CPFSUPERVISOR           VARCHAR2(11),
    NMSUPERV                VARCHAR2(70),
    STATUS                  CHAR(1)         NOT NULL,
    NRORECIBO               VARCHAR2(50), 
    NRORECIBO_ANT           VARCHAR2(50),
    ACAO                    CHAR(1),
    CHAVE                   VARCHAR2(100)   NOT NULL,
    CONTROLE                CHAR(1)         DEFAULT 'I' NOT NULL,
    TPAMB                   CHAR(1)         DEFAULT 'T' NOT NULL,
    CONSTRAINT PK_TFPS2306 PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE),
    CONSTRAINT CHK_STATUS_TFPS2306 CHECK (STATUS IN ('P','I', 'E', 'F', 'X')), /*'P'= PENDENTE 'I'=INCLUÍDO 'E=ENVIADO 'F=FINALIZADO, 'X-FINALIZADO COM ERRO */ 
    CONSTRAINT CHK_ACAO_TFPS2306 CHECK (ACAO IN ('I', 'A', 'E')), /*'I'=INCLUÍR 'A=ALTERAR 'E=EXCLUIR */
    CONSTRAINT CHK_TPAMB_TFPS2306 CHECK (TPAMB IN ('P', 'T')) /* P = PRODUCAO T = TESTE */
)
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 23/03/2018 17:58:22
Num.Script: 52271-0-0
Nro. O.S. : 1161409
Nome      : Cria - TFPS2205_I01
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TFPS2205_I01
NomeObjeto: TFPS2205_I01
TipoObjeto: INDEX
NomeTabela: TFPS2205
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210005
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
    BEGIN
       EXECUTE IMMEDIATE ' CREATE INDEX TFPS2205_I01 ON TFPS2205 (CODEMP, TPAMB, CHAVE)';
    EXCEPTION
         WHEN OTHERS THEN
            NULL;
    END;
END;
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 23/03/2018 17:58:22
Num.Script: 52272-0-0
Nro. O.S. : 1161409
Nome      : Cria - TFPS2206_I01
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TFPS2206_I01
NomeObjeto: TFPS2206_I01
TipoObjeto: INDEX
NomeTabela: TFPS2206
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210005
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
    BEGIN
        EXECUTE IMMEDIATE 'CREATE INDEX TFPS2206_I01 ON TFPS2206 (CODEMP, TPAMB, CHAVE)';
    EXCEPTION
         WHEN OTHERS THEN
            NULL;
    END;
END;
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 23/03/2018 17:58:22
Num.Script: 52273-0-0
Nro. O.S. : 1161409
Nome      : Cria - TFPS2306_I01
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TFPS2306_I01
NomeObjeto: TFPS2306_I01
TipoObjeto: INDEX
NomeTabela: TFPS2306
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210005
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
    BEGIN
        EXECUTE IMMEDIATE 'CREATE INDEX TFPS2306_I01 ON TFPS2306 (CODEMP, TPAMB, CHAVE)';
    EXCEPTION
         WHEN OTHERS THEN
            NULL;
    END;
END;
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 23/03/2018 17:58:22
Num.Script: 52274-0-0
Nro. O.S. : 1161409
Nome      : Cria - VGF_EVENTO_S2300_BASE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - VGF_EVENTO_S2300_BASE
NomeObjeto: VGF_EVENTO_S2300_BASE
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210005
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2300_BASE
AS
   SELECT VEMP.TPINSCEMPREGADOR,
          VEMP.NRINSCEMPREGADOR,
          FUN.CPF AS "CPFTRAB",
          FUN.PIS AS "NISTRAB",
          FUN.NOMEFUNC AS "NMTRAB",
          FUN.DTALTER AS DTALTERACAO,
          CAST (NULL AS DATE) AS DTEF,
          CAST (FUN.SEXO AS CHAR (1)) AS "SEXO",
          CASE
             WHEN RACAFUNCIONARIO = 2 THEN 1
             WHEN RACAFUNCIONARIO = 4 THEN 2
             WHEN RACAFUNCIONARIO = 8 THEN 3
             WHEN RACAFUNCIONARIO = 6 THEN 4
             WHEN RACAFUNCIONARIO = 0 THEN 5
             ELSE 6
          END
             AS "RACACOR",
          CASE
             WHEN FUN.ESTADOCIVIL = 3 THEN 5
             WHEN FUN.ESTADOCIVIL IN (5, 6) THEN 3
             WHEN FUN.ESTADOCIVIL = 7 THEN 2
             ELSE FUN.ESTADOCIVIL
          END
             AS "ESTCIV",
          CAST (
             CASE
                WHEN FUN.NIVESC = 10 THEN 11
                WHEN FUN.NIVESC = 11 THEN 12
                ELSE FUN.NIVESC
             END AS VARCHAR2 (2))
             AS "GRAUINSTR",
          FUN.NMSOCIAL AS "NMSOC",
          FUN.DTNASC AS "DTNASCTONASCIMENTO",
          (SELECT CODMUNFIS
             FROM TSICID
            WHERE CODCID = FUN.CIDNASC)
             AS "CODMUNICNASCIMENTO",
          (SELECT UFS.UF
             FROM TSIUFS UFS, TSICID CID
            WHERE UFS.CODUF = CID.UF AND CID.CODCID = FUN.CIDNASC)
             AS "UFNASCIMENTO",
          (SELECT SUBSTR (CAST (CODPAISFIS AS VARCHAR2(5)), 1, 3)
             FROM TSIPAI PAI, TSIUFS UFS, TSICID CID
            WHERE     UFS.CODUF = CID.UF
                  AND CID.CODCID = FUN.CIDNASC
                  AND PAI.CODPAIS = UFS.CODPAIS)
             AS "PAISNASCTONASCIMENTO",
          (SELECT SUBSTR (CAST (CODPAISFIS AS VARCHAR2(5)), 1, 3)
             FROM TSIPAI PAI
            WHERE PAI.CODPAIS = FUN.CODPAISNAC)
             AS "PAISNACNASCIMENTO",
          FUN.NOMEMAE AS "NMMAENASCIMENTO",
          FUN.NOMEPAI AS "NMPAINASCIMENTO",
          CAST (FUN.NUMCPS AS VARCHAR2 (11)) AS "NRCTPS",
          FUN.SERIECPS AS "SERIECTPS",
          (SELECT UF
             FROM TSIUFS
            WHERE CODUF = FUN.UFCPS)
             AS "UFCTPS",
          FUN.NRORIC AS "NRRIC",
          FUN.ORGAORIC AS "ORGAOEMISSORRIC",
          FUN.DTEMIRIC AS "DTEXPEDRIC",
          REPLACE (
             REPLACE (REPLACE (REPLACE (FUN.IDENTIDADE, '-', ''), '/', ''),
                      '.',
                      ''),
             ' ',
             '')
             AS "NRRG",
          FUN.ORGAORG AS "ORGAOEMISSORRG",
          FUN.DTRG AS "DTEXPEDRG",
          SUBSTR (FUN.RNE, 1, 14) AS NRRNE,
          FUN.ORGAORNE AS "ORGAOEMISSORRNE",
          FUN.DTEXPRNE AS "DTEXPEDRNE",
          FUN.NROC AS "NROC",
          FUN.ORGAOOC AS "ORGAOEMISSOROC",
          FUN.DTEXPOC AS "DTEXPEDOC",
          FUN.DTVALOC AS "DTVALIDOC",
          FUN.NROCNH AS "NRREGCNH",
          FUN.DTEXPCNH AS "DTEXPEDCNH",
          (SELECT UF
             FROM TSIUFS
            WHERE CODUF = FUN.UFCNH)
             AS "UFCNH",
          FUN.VENCIMENTOCNH AS "DTVALIDCNH",
          FUN.PRIMEIRACNH AS "DTPRIHAB",
          SUBSTR (FUN.CATEGORIACNH, 1, 2) AS "CATEGORIACNH",
          EN.CODLOGRADOURO AS "TPLOGRADBRASIL",
          EN.NOMEEND AS "DSCLOGRADBRASIL",
          FUN.NUMEND AS "NRLOGRADBRASIL",
          FUN.COMPLEMENTO AS "COMPLEMENTOBRASIL",
          BAI.NOMEBAI AS "BAIRROBRASIL",
          FUN.CEP AS "CEPBRASIL",
          CAST (CID.CODMUNFIS AS NUMBER (7)) AS "CODMUNICBRASIL",
          UFS.UF AS "UFBRASIL",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105
             THEN
                SUBSTR (PA.CODPAISFIS, 1, 3)
             ELSE
                NULL
          END
             AS "PAISRESID",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105 THEN EN.NOMEEND
             ELSE NULL
          END
             AS "DSCLOGRADEXTERIOR",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105 THEN FUN.NUMEND
             ELSE NULL
          END
             AS "NRLOGRADEXTERIOR",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105 THEN FUN.COMPLEMENTO
             ELSE NULL
          END
             AS "COMPLEMENTOEXTERIOR",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105 THEN BAI.NOMEBAI
             ELSE NULL
          END
             AS "BAIRROEXTERIOR",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105 THEN CID.NOMECID
             ELSE NULL
          END
             AS "NMCIDEXTERIOR",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105 THEN FUN.CAIXAPOSTAL
             ELSE NULL
          END
             AS "CODPOSTALEXTERIOR",
          FUN.DTCHEGPAIS AS "DTCHEGADA",
          FUN.CLASSTRABESTRANG,
          FUN.CASADOBR AS "CASADOBR",
          FUN.FILHOSBR AS "FILHOSBR",
          CASE WHEN FUN.TIPDEFICIENCIA IN (0, 5, 7) THEN 'N' ELSE 'S' END
             AS "DEFFISICA",
          CASE WHEN FUN.TIPDEFICIENCIA = 3 THEN 'S' ELSE 'N' END
             AS "DEFVISUAL",
          CASE WHEN FUN.TIPDEFICIENCIA = 2 THEN 'S' ELSE 'N' END
             AS "DEFAUDITIVA",
          CASE WHEN FUN.TIPDEFICIENCIA = 8 THEN 'S' ELSE 'N' END
             AS "DEFMENTAL",
          CASE WHEN FUN.TIPDEFICIENCIA = 4 THEN 'S' ELSE 'N' END
             AS "DEFINTELECTUAL",
          CASE WHEN FUN.TIPDEFICIENCIA = 6 THEN 'S' ELSE 'N' END
             AS "REABREADAP",
          FUN.OBSDEFICIENCIA AS "OBSERVACAO",
          CASE
             WHEN LENGTH (TRIM (FUN.TELEFONE)) < 10 THEN NULL
             ELSE REPLACE (FUN.TELEFONE, ' ', '')
          END
             AS "FONEPRINC",
          CASE
             WHEN LENGTH (TRIM (FUN.CELULAR)) < 10 THEN NULL
             ELSE REPLACE (FUN.CELULAR, ' ', '')
          END
             AS "FONEALTERNAT",
          REPLACE (FUN.EMAIL, ' ', '') AS "EMAILPRINC",
          CAST ('' AS VARCHAR2 (60)) AS EMAILALTERNAT,
          CASE WHEN FUN.DTADM < VEMP.DTCARGAINICIAL THEN 'S' ELSE 'N' END
             AS CADINI,
          FUN.CODCATEGESOCIAL AS CODCATEG,
          FUN.DTADM AS DTINICIO,
          CASE
             WHEN FUN.CODCATEGESOCIAL IN (305, 721, 722, 771, 901)
             THEN
                NULL
             ELSE
                (SELECT CASE WHEN TIPHORANOTURNA = 'U' THEN 1 ELSE 2 END
                   FROM TFPCBO CBO
                  WHERE CBO.CODCBO =
                           CASE
                              WHEN (SELECT 1
                                      FROM TSIPAR
                                     WHERE     CHAVE =
                                                  'FPUTILIZACBO'
                                           AND INTEIRO = 0) > 0
                              THEN
                                 (SELECT CODCBO
                                    FROM TFPCAR C
                                   WHERE C.CODCARGO = FUN.CODCARGO)
                              ELSE
                                 (SELECT CODCBO
                                    FROM TFPFCO F
                                   WHERE F.CODFUNCAO = FUN.CODFUNCAO)
                           END)
          END
             AS "NATATIVIDADE",
          CAST (CASE
                   WHEN (SELECT 1
                           FROM TSIPAR
                          WHERE     CHAVE = 'FPUTILIZACBO'
                                AND NVL (INTEIRO, 0) = 0) > 0
                   THEN
                      FUN.CODCARGO
                   ELSE
                      FUN.CODFUNCAO
                END AS VARCHAR2 (30))
             AS "CODCARGO",
          CAST (CASE
                   WHEN (SELECT LOGICO
                           FROM TSIPAR
                          WHERE CHAVE = 'FPTRIBUNAL') = 'S'
                   THEN
                      (SELECT CODFUNCAO
                         FROM TFPFCO
                        WHERE CODFUNCAO = FUN.CODFUNCAO)
                   ELSE
                      0
                END AS VARCHAR2 (30))
             AS "CODFUNCAO",
          CAST (
             CASE
                WHEN FUN.TIPSAL = 5 AND NVL (FUN.SALBASE, 0) = 0 THEN 0
                ELSE FUN.SALBASE
             END AS FLOAT)
             AS "VRSALFX",
          CASE
             WHEN FUN.TIPSAL = 1 THEN 5
             WHEN FUN.TIPSAL = 2 THEN 4
             WHEN FUN.TIPSAL = 3 THEN 3
             WHEN FUN.TIPSAL = 4 THEN 2
             WHEN FUN.TIPSAL = 5 AND NVL (FUN.SALBASE, 0) > 0 THEN 1
             WHEN FUN.TIPSAL = 5 AND NVL (FUN.SALBASE, 0) = 0 THEN 7
             WHEN FUN.COMPSALARIO = 2 THEN 8
             ELSE 6
          END
             AS "UNDSALFIXO",
          CASE
             WHEN FUN.TIPSAL = 5 AND NVL (FUN.SALBASE, 0) = 0
             THEN
                FUN.OBSVARIAVEL
             ELSE
                NULL
          END
             AS "DSCSALVAR",
          1 AS "OPCFGTS",          -- pensao que estagiario nao devamos mandar
          FUN.DTOPTFGTS AS "DTOPCFGTS",
          /* infoDirigenteSindical -  Não temos caso de uso no sistema */
          CAST (NULL AS NUMBER (5)) AS CATEGORIGDIRSIND,
          NULL AS CNPJORIGDIRSIND,
          CAST (NULL AS DATE) AS DTADMORIGDIRSIND,
          NULL AS MATRICORIGDIRSIND,
          FUN.CODCATEGTRABCEDIDO AS CATEGORIGCED,
          FUN.CNPJEMPCED AS CNPJCED,
          FUN.MATRICULAEMPCED AS MATRICCED,
          FUN.DTADMEMPCED AS DTADMCED,
          FUN.TPREGTRABCED,
          FUN.TPREGPREVCED,
          FUN.INFOONUS AS INFONUSCED,
          EST.NATESTAGIO AS natEstagio,
          CAST (EST.NIVESTAGIO AS CHAR (1)) AS nivEstagio,
          EST.AREAATUACAO AS areaAtuacao,
          EST.NRAPOL AS nrApol,
          EST.VLRBOLSA AS vlrBolsa,
          EST.DTPREVTERM AS dtPrevTerm,
          EST.CNPJINSTENSINO AS cnpjInstEnsino,
          SUBSTR (EST.NMRAZAOINSTENS, 1, 100) AS nmRazaoinstens,
          (SELECT NOMEEND
             FROM TSIEND
            WHERE CODEND = EST.CODENDINSTENS)
             AS dscLogradinstens,
          EST.NRLOGRADINSTENS AS nrLogradinstens,
          (SELECT NOMEBAI
             FROM TSIBAI
            WHERE CODBAI = EST.CODBAIINSTENS)
             AS bairroinstens,
          EST.CEPINSTENS AS cepinstens,
          (SELECT CODMUNFIS
             FROM TSICID
            WHERE CODCID = EST.CODCIDINSTENS)
             AS codMunicinstens,
          (SELECT UFS.UF
             FROM TSICID CID, TSIUFS UFS
            WHERE CID.UF = UFS.CODUF AND CID.CODCID = EST.CODCIDINSTENS)
             AS ufinstens,
          EST.CNPJAGTINTEG AS cnpjAgntInteg,
          SUBSTR (EST.NMRAZAOAGTINTEG, 1, 100) AS nmRazaoAgntInteg,
          (SELECT NOMEEND
             FROM TSIEND
            WHERE CODEND = EST.CODENDAGTINTEG)
             AS dscLogradAgntInteg,
          EST.NRLOGRADAGTINTEG AS nrLogradAgntInteg,
          (SELECT NOMEBAI
             FROM TSIBAI
            WHERE CODBAI = EST.CODBAIAGTINTEG)
             AS bairroAgntInteg,
          EST.CEPAGTINTEG AS cepAgntInteg,
          (SELECT CODMUNFIS
             FROM TSICID
            WHERE CODCID = EST.CODCIDAGTINTEG)
             AS codMunicAgntInteg,
          (SELECT UFS.UF
             FROM TSICID CID, TSIUFS UFS
            WHERE CID.UF = UFS.CODUF AND CID.CODCID = EST.CODCIDAGTINTEG)
             AS ufAgntInteg,
          EST.CPFSUPERVISOR AS cpfSupervisor,
          EST.NMSUPERVISOR AS nmSuperv,
          CASE
             WHEN ( (SELECT NVL (OCO.DTINICOCOR, '')
                       FROM TFPOCO OCO, TFPHIS H
                      WHERE     OCO.CODEMP = FUN.CODEMP
                            AND OCO.CODFUNC = FUN.CODFUNC
                            AND OCO.CODHISTOCOR = H.CODHISTOCOR
                            AND H.AFASTAMENTO IN ('A', 'D', 'M', 'G', 'Y')
                            AND H.CODMOTAFAST IS NOT NULL
                            AND OCO.DTFINALOCOR IS NULL) <
                      VEMP.DTCARGAINICIAL)
             THEN
                (SELECT NVL (OCO.DTINICOCOR, '')
                   FROM TFPOCO OCO, TFPHIS H
                  WHERE     OCO.CODEMP = FUN.CODEMP
                        AND OCO.CODFUNC = FUN.CODFUNC
                        AND OCO.CODHISTOCOR = H.CODHISTOCOR
                        AND H.AFASTAMENTO IN ('A', 'D', 'M', 'G', 'Y')
                        AND H.CODMOTAFAST IS NOT NULL
                        AND OCO.DTFINALOCOR IS NULL)
             ELSE
                NULL
          END
             AS "DTINIAFAST",
          CASE
             WHEN ( (SELECT NVL (OCO.DTINICOCOR, '')
                       FROM TFPOCO OCO, TFPHIS H
                      WHERE     OCO.CODEMP = FUN.CODEMP
                            AND OCO.CODFUNC = FUN.CODFUNC
                            AND OCO.CODHISTOCOR = H.CODHISTOCOR
                            AND H.AFASTAMENTO IN ('A', 'D', 'M', 'G', 'Y')
                            AND H.CODMOTAFAST IS NOT NULL
                            AND OCO.DTFINALOCOR IS NULL) <
                      VEMP.DTCARGAINICIAL)
             THEN
                (SELECT NVL (H.CODMOTAFAST, '')
                   FROM TFPOCO OCO, TFPHIS H
                  WHERE     OCO.CODEMP = FUN.CODEMP
                        AND OCO.CODFUNC = FUN.CODFUNC
                        AND OCO.CODHISTOCOR = H.CODHISTOCOR
                        AND H.AFASTAMENTO IN ('A', 'D', 'M', 'G', 'Y')
                        AND H.CODMOTAFAST IS NOT NULL
                        AND OCO.DTFINALOCOR IS NULL)
             ELSE
                NULL
          END
             AS "CODMOTAFAST",
          CASE
             WHEN (FUN.DTDEM < VEMP.DTCARGAINICIAL) THEN FUN.DTDEM
             ELSE NULL
          END
             AS "DTTERM",
          VEMP.CODEMPMATRIZ AS CODEMP,
          CAST (FUN.CODEMP || ':' || FUN.CODFUNC AS VARCHAR2 (100))
             AS "CHAVE",
          FUN.SITESOCIAL,
          SNK_GET_TPAMB_ESOCIAL AS TPAMB
     FROM TFPFUN FUN
          LEFT JOIN TFPEST EST
             ON FUN.CODEMP = EST.CODEMP AND FUN.CODFUNC = EST.CODFUNC
          LEFT JOIN TSIBAI BAI ON BAI.CODBAI = FUN.CODBAI
          LEFT JOIN TSICID CID ON CID.CODCID = FUN.CODCID
          LEFT JOIN TSIUFS UFS ON UFS.CODUF = CID.UF
          LEFT JOIN TSIPAI PA ON PA.CODPAIS = UFS.CODPAIS
          LEFT JOIN TSIEND EN ON EN.CODEND = FUN.CODEND,
          VGF_EVENTO_EMPREGADOR VEMP
    WHERE     FUN.CODEMP = VEMP.CODEMP
          AND VEMP.DTCARGAINICIAL IS NOT NULL
          AND FUN.CODCATEGESOCIAL >= 701
          AND FUN.SITESOCIAL IN ('O', '5', '6', 'T')
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 23/03/2018 17:58:22
Num.Script: 52275-0-0
Nro. O.S. : 1161409
Nome      : Cria - VGF_EVENTO_S2300
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - VGF_EVENTO_S2300
NomeObjeto: VGF_EVENTO_S2300
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210005
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2300
AS
   SELECT NOVO.TPINSCEMPREGADOR,
          NOVO.NRINSCEMPREGADOR,
          NOVO.CPFTRAB,
          NOVO.NISTRAB,
          NOVO.NMTRAB,
          NOVO.SEXO,
          NOVO.RACACOR,
          NOVO.ESTCIV,
          NOVO.GRAUINSTR,
          NOVO.NMSOC,
          NOVO.DTNASCTONASCIMENTO,
          NOVO.CODMUNICNASCIMENTO,
          NOVO.UFNASCIMENTO,
          NOVO.PAISNASCTONASCIMENTO,
          NOVO.PAISNACNASCIMENTO,
          NOVO.NMMAENASCIMENTO,
          NOVO.NMPAINASCIMENTO,
          NOVO.NRCTPS,
          NOVO.SERIECTPS,
          NOVO.UFCTPS,
          NOVO.NRRIC,
          NOVO.ORGAOEMISSORRIC,
          NOVO.DTEXPEDRIC,
          NOVO.NRRG,
          NOVO.ORGAOEMISSORRG,
          NOVO.DTEXPEDRG,
          NOVO.NRRNE,
          NOVO.ORGAOEMISSORRNE,
          NOVO.DTEXPEDRNE,
          NOVO.NROC,
          NOVO.ORGAOEMISSOROC,
          NOVO.DTEXPEDOC,
          NOVO.DTVALIDOC,
          NOVO.NRREGCNH,
          NOVO.DTEXPEDCNH,
          NOVO.UFCNH,
          NOVO.DTVALIDCNH,
          NOVO.DTPRIHAB,
          NOVO.CATEGORIACNH,
          NOVO.TPLOGRADBRASIL,
          NOVO.DSCLOGRADBRASIL,
          NOVO.NRLOGRADBRASIL,
          NOVO.COMPLEMENTOBRASIL,
          NOVO.BAIRROBRASIL,
          NOVO.CEPBRASIL,
          NOVO.CODMUNICBRASIL,
          NOVO.UFBRASIL,
          NOVO.PAISRESID,
          NOVO.DSCLOGRADEXTERIOR,
          NOVO.NRLOGRADEXTERIOR,
          NOVO.COMPLEMENTOEXTERIOR,
          NOVO.BAIRROEXTERIOR,
          NOVO.NMCIDEXTERIOR,
          NOVO.CODPOSTALEXTERIOR,
          NOVO.DTCHEGADA,
          NOVO.CLASSTRABESTRANG,
          NOVO.CASADOBR,
          NOVO.FILHOSBR,
          NOVO.DEFFISICA,
          NOVO.DEFVISUAL,
          NOVO.DEFAUDITIVA,
          NOVO.DEFMENTAL,
          NOVO.DEFINTELECTUAL,
          NOVO.REABREADAP,
          NOVO.OBSERVACAO,
          NOVO.FONEPRINC,
          NOVO.FONEALTERNAT,
          NOVO.EMAILPRINC,
          NOVO.EMAILALTERNAT,
          NOVO.CADINI,
          NOVO.CODCATEG,
          NOVO.DTINICIO,
          NOVO.NATATIVIDADE,
          NOVO.CODCARGO,
          NOVO.CODFUNCAO,
          NOVO.VRSALFX,
          NOVO.UNDSALFIXO,
          NOVO.DSCSALVAR,
          NOVO.OPCFGTS,            -- PENSAO QUE ESTAGIARIO NAO DEVAMOS MANDAR
          NOVO.DTOPCFGTS,
          NOVO.CATEGORIGDIRSIND,
          NOVO.CNPJORIGDIRSIND,
          NOVO.DTADMORIGDIRSIND,
          NOVO.MATRICORIGDIRSIND,
          NOVO.CATEGORIGCED,
          NOVO.CNPJCED,
          NOVO.MATRICCED,
          NOVO.DTADMCED,
          NOVO.TPREGTRABCED,
          NOVO.TPREGPREVCED,
          NOVO.INFONUSCED,
          NOVO.NATESTAGIO,
          NOVO.NIVESTAGIO,
          NOVO.AREAATUACAO,
          NOVO.NRAPOL,
          NOVO.VLRBOLSA,
          NOVO.DTPREVTERM,
          NOVO.CNPJINSTENSINO,
          NOVO.NMRAZAOINSTENS,
          NOVO.DSCLOGRADINSTENS,
          NOVO.NRLOGRADINSTENS,
          NOVO.BAIRROINSTENS,
          NOVO.CEPINSTENS,
          NOVO.CODMUNICINSTENS,
          NOVO.UFINSTENS,
          NOVO.CNPJAGNTINTEG,
          NOVO.NMRAZAOAGNTINTEG,
          NOVO.DSCLOGRADAGNTINTEG,
          NOVO.NRLOGRADAGNTINTEG,
          NOVO.BAIRROAGNTINTEG,
          NOVO.CEPAGNTINTEG,
          NOVO.CODMUNICAGNTINTEG,
          NOVO.UFAGNTINTEG,
          NOVO.CPFSUPERVISOR,
          NOVO.NMSUPERV,
          NOVO.DTINIAFAST,
          NOVO.CODMOTAFAST,
          NOVO.DTTERM,
          NOVO.CODEMP,
          NOVO.CHAVE
     FROM VGF_EVENTO_S2300_BASE NOVO
    WHERE    SITESOCIAL = 'O'
          OR NOT EXISTS
                    (SELECT 1
                       FROM TFPS2300 VELHO
                      WHERE     NOVO.CODEMP = VELHO.CODEMP
                            AND VELHO.TPAMB = NOVO.TPAMB
                            AND NOVO.CHAVE = VELHO.CHAVE)
   UNION
   SELECT NOVO.TPINSCEMPREGADOR,
          NOVO.NRINSCEMPREGADOR,
          NOVO.CPFTRAB,
          VELHO.NISTRAB,
          VELHO.NMTRAB,
          VELHO.SEXO,
          VELHO.RACACOR,
          VELHO.ESTCIV,
          VELHO.GRAUINSTR,
          VELHO.NMSOC,
          NOVO.DTNASCTONASCIMENTO,
          NOVO.CODMUNICNASCIMENTO,
          NOVO.UFNASCIMENTO,
          NOVO.PAISNASCTONASCIMENTO,
          NOVO.PAISNACNASCIMENTO,
          NOVO.NMMAENASCIMENTO,
          NOVO.NMPAINASCIMENTO,
          VELHO.NRCTPS,
          VELHO.SERIECTPS,
          VELHO.UFCTPS,
          VELHO.NRRIC,
          VELHO.ORGAOEMISSORRIC,
          VELHO.DTEXPEDRIC,
          VELHO.NRRG,
          VELHO.ORGAOEMISSORRG,
          VELHO.DTEXPEDRG,
          VELHO.NRRNE,
          VELHO.ORGAOEMISSORRNE,
          VELHO.DTEXPEDRNE,
          VELHO.NROC,
          VELHO.ORGAOEMISSOROC,
          VELHO.DTEXPEDOC,
          VELHO.DTVALIDOC,
          VELHO.NRREGCNH,
          VELHO.DTEXPEDCNH,
          VELHO.UFCNH,
          VELHO.DTVALIDCNH,
          VELHO.DTPRIHAB,
          VELHO.CATEGORIACNH,
          VELHO.TPLOGRADBRASIL,
          VELHO.DSCLOGRADBRASIL,
          VELHO.NRLOGRADBRASIL,
          VELHO.COMPLEMENTOBRASIL,
          VELHO.BAIRROBRASIL,
          VELHO.CEPBRASIL,
          VELHO.CODMUNICBRASIL,
          VELHO.UFBRASIL,
          VELHO.PAISRESID,
          VELHO.DSCLOGRADEXTERIOR,
          VELHO.NRLOGRADEXTERIOR,
          VELHO.COMPLEMENTOEXTERIOR,
          VELHO.BAIRROEXTERIOR,
          VELHO.NMCIDEXTERIOR,
          VELHO.CODPOSTALEXTERIOR,
          VELHO.DTCHEGADA,
          VELHO.CLASSTRABESTRANG,
          VELHO.CASADOBR,
          VELHO.FILHOSBR,
          VELHO.DEFFISICA,
          VELHO.DEFVISUAL,
          VELHO.DEFAUDITIVA,
          VELHO.DEFMENTAL,
          VELHO.DEFINTELECTUAL,
          VELHO.REABREADAP,
          VELHO.OBSERVACAO,
          NOVO.FONEPRINC,
          NOVO.FONEALTERNAT,
          NOVO.EMAILPRINC,
          NOVO.EMAILALTERNAT,
          NOVO.CADINI,
          NOVO.CODCATEG,
          NOVO.DTINICIO,
          NOVO.NATATIVIDADE,
          NOVO.CODCARGO,
          NOVO.CODFUNCAO,
          NOVO.VRSALFX,
          NOVO.UNDSALFIXO,
          NOVO.DSCSALVAR,
          NOVO.OPCFGTS,            -- PENSAO QUE ESTAGIARIO NAO DEVAMOS MANDAR
          NOVO.DTOPCFGTS,
          NOVO.CATEGORIGDIRSIND,
          NOVO.CNPJORIGDIRSIND,
          NOVO.DTADMORIGDIRSIND,
          NOVO.MATRICORIGDIRSIND,
          NOVO.CATEGORIGCED,
          NOVO.CNPJCED,
          NOVO.MATRICCED,
          NOVO.DTADMCED,
          NOVO.TPREGTRABCED,
          NOVO.TPREGPREVCED,
          NOVO.INFONUSCED,
          NOVO.NATESTAGIO,
          NOVO.NIVESTAGIO,
          NOVO.AREAATUACAO,
          NOVO.NRAPOL,
          NOVO.VLRBOLSA,
          NOVO.DTPREVTERM,
          NOVO.CNPJINSTENSINO,
          NOVO.NMRAZAOINSTENS,
          NOVO.DSCLOGRADINSTENS,
          NOVO.NRLOGRADINSTENS,
          NOVO.BAIRROINSTENS,
          NOVO.CEPINSTENS,
          NOVO.CODMUNICINSTENS,
          NOVO.UFINSTENS,
          NOVO.CNPJAGNTINTEG,
          NOVO.NMRAZAOAGNTINTEG,
          NOVO.DSCLOGRADAGNTINTEG,
          NOVO.NRLOGRADAGNTINTEG,
          NOVO.BAIRROAGNTINTEG,
          NOVO.CEPAGNTINTEG,
          NOVO.CODMUNICAGNTINTEG,
          NOVO.UFAGNTINTEG,
          NOVO.CPFSUPERVISOR,
          NOVO.NMSUPERV,
          NOVO.DTINIAFAST,
          NOVO.CODMOTAFAST,
          NOVO.DTTERM,
          NOVO.CODEMP,
          NOVO.CHAVE
     FROM VGF_EVENTO_S2300_BASE NOVO, TFPS2300 VELHO
    WHERE     NOVO.SITESOCIAL = '5'
          AND NOVO.CODEMP = VELHO.CODEMP
          AND VELHO.TPAMB = NOVO.TPAMB
          AND NOVO.CHAVE = VELHO.CHAVE
          AND VELHO.DTREF = (SELECT SNK_GET_DTREF_ESOCIAL () FROM DUAL)
          AND VELHO.SEQUENCIA =
                 (SELECT SNK_GET_SEQ_ATUAL_ESOCIAL () FROM DUAL)


UNION

   SELECT NOVO.TPINSCEMPREGADOR,
          NOVO.NRINSCEMPREGADOR,
          NOVO.CPFTRAB,
          NOVO.NISTRAB,
          NOVO.NMTRAB,
          NOVO.SEXO,
          NOVO.RACACOR,
          NOVO.ESTCIV,
          NOVO.GRAUINSTR,
          NOVO.NMSOC,
          NOVO.DTNASCTONASCIMENTO,
          NOVO.CODMUNICNASCIMENTO,
          NOVO.UFNASCIMENTO,
          NOVO.PAISNASCTONASCIMENTO,
          NOVO.PAISNACNASCIMENTO,
          NOVO.NMMAENASCIMENTO,
          NOVO.NMPAINASCIMENTO,
          NOVO.NRCTPS,
          NOVO.SERIECTPS,
          NOVO.UFCTPS,
          NOVO.NRRIC,
          NOVO.ORGAOEMISSORRIC,
          NOVO.DTEXPEDRIC,
          NOVO.NRRG,
          NOVO.ORGAOEMISSORRG,
          NOVO.DTEXPEDRG,
          NOVO.NRRNE,
          NOVO.ORGAOEMISSORRNE,
          NOVO.DTEXPEDRNE,
          NOVO.NROC,
          NOVO.ORGAOEMISSOROC,
          NOVO.DTEXPEDOC,
          NOVO.DTVALIDOC,
          NOVO.NRREGCNH,
          NOVO.DTEXPEDCNH,
          NOVO.UFCNH,
          NOVO.DTVALIDCNH,
          NOVO.DTPRIHAB,
          NOVO.CATEGORIACNH,
          NOVO.TPLOGRADBRASIL,
          NOVO.DSCLOGRADBRASIL,
          NOVO.NRLOGRADBRASIL,
          NOVO.COMPLEMENTOBRASIL,
          NOVO.BAIRROBRASIL,
          NOVO.CEPBRASIL,
          NOVO.CODMUNICBRASIL,
          NOVO.UFBRASIL,
          NOVO.PAISRESID,
          NOVO.DSCLOGRADEXTERIOR,
          NOVO.NRLOGRADEXTERIOR,
          NOVO.COMPLEMENTOEXTERIOR,
          NOVO.BAIRROEXTERIOR,
          NOVO.NMCIDEXTERIOR,
          NOVO.CODPOSTALEXTERIOR,
          NOVO.DTCHEGADA,
          NOVO.CLASSTRABESTRANG,
          NOVO.CASADOBR,
          NOVO.FILHOSBR,
          NOVO.DEFFISICA,
          NOVO.DEFVISUAL,
          NOVO.DEFAUDITIVA,
          NOVO.DEFMENTAL,
          NOVO.DEFINTELECTUAL,
          NOVO.REABREADAP,
          NOVO.OBSERVACAO,
          NOVO.FONEPRINC,
          NOVO.FONEALTERNAT,
          NOVO.EMAILPRINC,
          NOVO.EMAILALTERNAT,
          NOVO.CADINI,
          VELHO.CODCATEG,
          NOVO.DTINICIO,
          VELHO.NATATIVIDADE,
          VELHO.CODCARGO,
          VELHO.CODFUNCAO,
          VELHO.VRSALFX,
          VELHO.UNDSALFIXO,
          VELHO.DSCSALVAR,
          NOVO.OPCFGTS,            -- PENSAO QUE ESTAGIARIO NAO DEVAMOS MANDAR
          NOVO.DTOPCFGTS,
          NOVO.CATEGORIGDIRSIND,
          NOVO.CNPJORIGDIRSIND,
          NOVO.DTADMORIGDIRSIND,
          NOVO.MATRICORIGDIRSIND,
          NOVO.CATEGORIGCED,
          NOVO.CNPJCED,
          NOVO.MATRICCED,
          NOVO.DTADMCED,
          NOVO.TPREGTRABCED,
          NOVO.TPREGPREVCED,
          NOVO.INFONUSCED,
          VELHO.NATESTAGIO,
          VELHO.NIVESTAGIO,
          VELHO.AREAATUACAO,
          VELHO.NRAPOL,
          VELHO.VLRBOLSA,
          VELHO.DTPREVTERM,
          VELHO.CNPJINSTENSINO,
          VELHO.NMRAZAOINSTENS,
          VELHO.DSCLOGRADINSTENS,
          VELHO.NRLOGRADINSTENS,
          VELHO.BAIRROINSTENS,
          VELHO.CEPINSTENS,
          VELHO.CODMUNICINSTENS,
          VELHO.UFINSTENS,
          VELHO.CNPJAGNTINTEG,
          VELHO.NMRAZAOAGNTINTEG,
          VELHO.DSCLOGRADAGNTINTEG,
          VELHO.NRLOGRADAGNTINTEG,
          VELHO.BAIRROAGNTINTEG,
          VELHO.CEPAGNTINTEG,
          VELHO.CODMUNICAGNTINTEG,
          VELHO.UFAGNTINTEG,
          VELHO.CPFSUPERVISOR,
          VELHO.NMSUPERV,
          NOVO.DTINIAFAST,
          NOVO.CODMOTAFAST,
          NOVO.DTTERM,
          NOVO.CODEMP,
          NOVO.CHAVE
     FROM VGF_EVENTO_S2300_BASE NOVO, TFPS2300 VELHO
    WHERE     NOVO.SITESOCIAL = '6'
          AND NOVO.CODEMP = VELHO.CODEMP
          AND VELHO.TPAMB = NOVO.TPAMB
          AND NOVO.CHAVE = VELHO.CHAVE
          AND VELHO.DTREF = (SELECT SNK_GET_DTREF_ESOCIAL FROM DUAL)
          AND VELHO.SEQUENCIA = (SELECT SNK_GET_SEQ_ATUAL_ESOCIAL FROM DUAL)
UNION
   SELECT NOVO.TPINSCEMPREGADOR,
          NOVO.NRINSCEMPREGADOR,
          NOVO.CPFTRAB,
          VELHO.NISTRAB,
          VELHO.NMTRAB,
          VELHO.SEXO,
          VELHO.RACACOR,
          VELHO.ESTCIV,
          VELHO.GRAUINSTR,
          VELHO.NMSOC,
          NOVO.DTNASCTONASCIMENTO,
          NOVO.CODMUNICNASCIMENTO,
          NOVO.UFNASCIMENTO,
          NOVO.PAISNASCTONASCIMENTO,
          NOVO.PAISNACNASCIMENTO,
          NOVO.NMMAENASCIMENTO,
          NOVO.NMPAINASCIMENTO,
          VELHO.NRCTPS,
          VELHO.SERIECTPS,
          VELHO.UFCTPS,
          VELHO.NRRIC,
          VELHO.ORGAOEMISSORRIC,
          VELHO.DTEXPEDRIC,
          VELHO.NRRG,
          VELHO.ORGAOEMISSORRG,
          VELHO.DTEXPEDRG,
          VELHO.NRRNE,
          VELHO.ORGAOEMISSORRNE,
          VELHO.DTEXPEDRNE,
          VELHO.NROC,
          VELHO.ORGAOEMISSOROC,
          VELHO.DTEXPEDOC,
          VELHO.DTVALIDOC,
          VELHO.NRREGCNH,
          VELHO.DTEXPEDCNH,
          VELHO.UFCNH,
          VELHO.DTVALIDCNH,
          VELHO.DTPRIHAB,
          VELHO.CATEGORIACNH,
          VELHO.TPLOGRADBRASIL,
          VELHO.DSCLOGRADBRASIL,
          VELHO.NRLOGRADBRASIL,
          VELHO.COMPLEMENTOBRASIL,
          VELHO.BAIRROBRASIL,
          VELHO.CEPBRASIL,
          VELHO.CODMUNICBRASIL,
          VELHO.UFBRASIL,
          VELHO.PAISRESID,
          VELHO.DSCLOGRADEXTERIOR,
          VELHO.NRLOGRADEXTERIOR,
          VELHO.COMPLEMENTOEXTERIOR,
          VELHO.BAIRROEXTERIOR,
          VELHO.NMCIDEXTERIOR,
          VELHO.CODPOSTALEXTERIOR,
          VELHO.DTCHEGADA,
          VELHO.CLASSTRABESTRANG,
          VELHO.CASADOBR,
          VELHO.FILHOSBR,
          VELHO.DEFFISICA,
          VELHO.DEFVISUAL,
          VELHO.DEFAUDITIVA,
          VELHO.DEFMENTAL,
          VELHO.DEFINTELECTUAL,
          VELHO.REABREADAP,
          VELHO.OBSERVACAO,
          NOVO.FONEPRINC,
          NOVO.FONEALTERNAT,
          NOVO.EMAILPRINC,
          NOVO.EMAILALTERNAT,
          NOVO.CADINI,
          VELHO.CODCATEG,
          NOVO.DTINICIO,
          VELHO.NATATIVIDADE,
          VELHO.CODCARGO,
          VELHO.CODFUNCAO,
          VELHO.VRSALFX,
          VELHO.UNDSALFIXO,
          VELHO.DSCSALVAR,
          NOVO.OPCFGTS,            -- PENSAO QUE ESTAGIARIO NAO DEVAMOS MANDAR
          NOVO.DTOPCFGTS,
          NOVO.CATEGORIGDIRSIND,
          NOVO.CNPJORIGDIRSIND,
          NOVO.DTADMORIGDIRSIND,
          NOVO.MATRICORIGDIRSIND,
          NOVO.CATEGORIGCED,
          NOVO.CNPJCED,
          NOVO.MATRICCED,
          NOVO.DTADMCED,
          NOVO.TPREGTRABCED,
          NOVO.TPREGPREVCED,
          NOVO.INFONUSCED,
          VELHO.NATESTAGIO,
          VELHO.NIVESTAGIO,
          VELHO.AREAATUACAO,
          VELHO.NRAPOL,
          VELHO.VLRBOLSA,
          VELHO.DTPREVTERM,
          VELHO.CNPJINSTENSINO,
          VELHO.NMRAZAOINSTENS,
          VELHO.DSCLOGRADINSTENS,
          VELHO.NRLOGRADINSTENS,
          VELHO.BAIRROINSTENS,
          VELHO.CEPINSTENS,
          VELHO.CODMUNICINSTENS,
          VELHO.UFINSTENS,
          VELHO.CNPJAGNTINTEG,
          VELHO.NMRAZAOAGNTINTEG,
          VELHO.DSCLOGRADAGNTINTEG,
          VELHO.NRLOGRADAGNTINTEG,
          VELHO.BAIRROAGNTINTEG,
          VELHO.CEPAGNTINTEG,
          VELHO.CODMUNICAGNTINTEG,
          VELHO.UFAGNTINTEG,
          VELHO.CPFSUPERVISOR,
          VELHO.NMSUPERV,
          NOVO.DTINIAFAST,
          NOVO.CODMOTAFAST,
          NOVO.DTTERM,
          NOVO.CODEMP,
          NOVO.CHAVE
     FROM VGF_EVENTO_S2300_BASE NOVO, TFPS2300 VELHO
    WHERE     NOVO.SITESOCIAL = 'T'
          AND NOVO.CODEMP = VELHO.CODEMP
          AND VELHO.TPAMB = NOVO.TPAMB
          AND NOVO.CHAVE = VELHO.CHAVE
          AND VELHO.DTREF = (SELECT SNK_GET_DTREF_ESOCIAL FROM DUAL)
          AND VELHO.SEQUENCIA = (SELECT SNK_GET_SEQ_ATUAL_ESOCIAL FROM DUAL)
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 23/03/2018 17:58:22
Num.Script: 52276-0-0
Nro. O.S. : 1161409
Nome      : Altera - VGF_EVENTO_S2205
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VGF_EVENTO_S2205
NomeObjeto: VGF_EVENTO_S2205
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210005
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2205
AS
   SELECT NOVO.TPINSCEMPREGADOR,
          NOVO.NRINSCEMPREGADOR,
          NOVO.CPFTRAB,
          NOVO.NISTRAB,
          NOVO.DTALTERACAO,
          NOVO.EMAILALTERNAT,
          NOVO.NMTRAB,
          NOVO.SEXO,
          NOVO.RACACOR,
          NOVO.ESTCIV,
          NOVO.GRAUINSTR,
          NOVO.NMSOC,
          NOVO.NRCTPS,
          NOVO.SERIECTPS,
          NOVO.UFCTPS,
          NOVO.NRRIC,
          NOVO.ORGAOEMISSORRIC,
          NOVO.DTEXPEDRIC,
          NOVO.NRRG,
          NOVO.ORGAOEMISSORRG,
          NOVO.DTEXPEDRG,
          NOVO.NRRNE,
          NOVO.ORGAOEMISSORRNE,
          NOVO.DTEXPEDRNE,
          NOVO.NROC,
          NOVO.ORGAOEMISSOROC,
          NOVO.DTEXPEDOC,
          NOVO.DTVALIDOC,
          NOVO.NRREGCNH,
          NOVO.DTEXPEDCNH,
          NOVO.UFCNH,
          NOVO.DTVALIDCNH,
          NOVO.DTPRIHAB,
          NOVO.CATEGORIACNH,
          NOVO.TPLOGRADBRASIL,
          NOVO.DSCLOGRADBRASIL,
          NOVO.NRLOGRADBRASIL,
          NOVO.COMPLEMENTOBRASIL,
          NOVO.BAIRROBRASIL,
          NOVO.CEPBRASIL,
          CAST (NOVO.CODMUNICBRASIL AS NUMBER (7)) AS CODMUNICBRASIL,
          NOVO.UFBRASIL,
          NOVO.PAISRESID,
          NOVO.DSCLOGRADEXTERIOR,
          NOVO.NRLOGRADEXTERIOR,
          NOVO.COMPLEMENTOEXTERIOR,
          NOVO.BAIRROEXTERIOR,
          NOVO.NMCIDEXTERIOR,
          NOVO.CODPOSTALEXTERIOR,
          NOVO.DTCHEGADA,
          NOVO.CLASSTRABESTRANG,
          NOVO.CASADOBR,
          NOVO.FILHOSBR,
          NOVO.DEFFISICA,
          NOVO.DEFVISUAL,
          NOVO.DEFAUDITIVA,
          NOVO.DEFMENTAL,
          NOVO.DEFINTELECTUAL,
          NOVO.REABREADAP,
          NOVO.INFOCOTA,
          NOVO.OBSERVACAO,
          NOVO.TRABAPOSENT,
          NOVO.FONEPRINC,
          NOVO.FONEALTERNAT,
          NOVO.EMAILPRINC,
          NOVO.CODEMP,
          NOVO.CHAVE
     FROM VGF_EVENTO_S2200_BASE NOVO
    WHERE     NOVO.SITESOCIAL IN ('5', 'T')
          AND EXISTS
                 (SELECT 1
                    FROM TFPS2205 VELHO
                   WHERE     NOVO.CODEMP = VELHO.CODEMP
                         AND NOVO.TPAMB = VELHO.TPAMB
                         AND NOVO.CHAVE = VELHO.CHAVE)
   UNION
   SELECT ULTIMO.TPINSCEMPREGADOR,
          ULTIMO.NRINSCEMPREGADOR,
          ULTIMO.CPFTRAB,
          ULTIMO.NISTRAB,
          NULL AS DTALTERACAO,
          NULL AS EMAILALTERNAT,
          ULTIMO.NMTRAB,
          ULTIMO.SEXO,
          ULTIMO.RACACOR,
          ULTIMO.ESTCIV,
          ULTIMO.GRAUINSTR,
          ULTIMO.NMSOC,
          ULTIMO.NRCTPS,
          ULTIMO.SERIECTPS,
          ULTIMO.UFCTPS,
          ULTIMO.NRRIC,
          ULTIMO.ORGAOEMISSORRIC,
          ULTIMO.DTEXPEDRIC,
          ULTIMO.NRRG,
          ULTIMO.ORGAOEMISSORRG,
          ULTIMO.DTEXPEDRG,
          ULTIMO.NRRNE,
          ULTIMO.ORGAOEMISSORRNE,
          ULTIMO.DTEXPEDRNE,
          ULTIMO.NROC,
          ULTIMO.ORGAOEMISSOROC,
          ULTIMO.DTEXPEDOC,
          ULTIMO.DTVALIDOC,
          ULTIMO.NRREGCNH,
          ULTIMO.DTEXPEDCNH,
          ULTIMO.UFCNH,
          ULTIMO.DTVALIDCNH,
          ULTIMO.DTPRIHAB,
          ULTIMO.CATEGORIACNH,
          ULTIMO.TPLOGRADBRASIL,
          ULTIMO.DSCLOGRADBRASIL,
          ULTIMO.NRLOGRADBRASIL,
          ULTIMO.COMPLEMENTOBRASIL,
          ULTIMO.BAIRROBRASIL,
          ULTIMO.CEPBRASIL,
          CAST (ULTIMO.CODMUNICBRASIL AS NUMBER (7)) AS CODMUNICBRASIL,
          ULTIMO.UFBRASIL,
          ULTIMO.PAISRESID,
          ULTIMO.DSCLOGRADEXTERIOR,
          ULTIMO.NRLOGRADEXTERIOR,
          ULTIMO.COMPLEMENTOEXTERIOR,
          ULTIMO.BAIRROEXTERIOR,
          ULTIMO.NMCIDEXTERIOR,
          ULTIMO.CODPOSTALEXTERIOR,
          ULTIMO.DTCHEGADA,
          ULTIMO.CLASSTRABESTRANG,
          ULTIMO.CASADOBR,
          ULTIMO.FILHOSBR,
          ULTIMO.DEFFISICA,
          ULTIMO.DEFVISUAL,
          ULTIMO.DEFAUDITIVA,
          ULTIMO.DEFMENTAL,
          ULTIMO.DEFINTELECTUAL,
          ULTIMO.REABREADAP,
          ULTIMO.INFOCOTA,
          ULTIMO.OBSERVACAO,
          ULTIMO.TRABAPOSENT,
          ULTIMO.FONEPRINC,
          ULTIMO.FONEALTERNAT,
          ULTIMO.EMAILPRINC,
          ULTIMO.CODEMP,
          ULTIMO.CHAVE
     FROM VGF_EVENTO_S2200_BASE NOVO, TFPS2200 ULTIMO
    WHERE     NOVO.SITESOCIAL IN ('O', '6')
          AND NOVO.CODEMP = ULTIMO.CODEMP
          AND NOVO.TPAMB = ULTIMO.TPAMB
          AND NOVO.CHAVE = ULTIMO.CHAVE
          AND ULTIMO.DTREF = (SELECT SNK_GET_DTREF_ESOCIAL () FROM DUAL)
          AND ULTIMO.SEQUENCIA =
                 (SELECT SNK_GET_SEQ_ATUAL_ESOCIAL () FROM DUAL)
          AND ULTIMO.STATUS = 'F'
UNION
   SELECT NOVO.TPINSCEMPREGADOR,
          NOVO.NRINSCEMPREGADOR,
          NOVO.CPFTRAB,
          NOVO.NISTRAB,
          NOVO.DTALTERACAO,
          NOVO.EMAILALTERNAT,
          NOVO.NMTRAB,
          NOVO.SEXO,
          NOVO.RACACOR,
          NOVO.ESTCIV,
          NOVO.GRAUINSTR,
          NOVO.NMSOC,
          NOVO.NRCTPS,
          NOVO.SERIECTPS,
          NOVO.UFCTPS,
          NOVO.NRRIC,
          NOVO.ORGAOEMISSORRIC,
          NOVO.DTEXPEDRIC,
          NOVO.NRRG,
          NOVO.ORGAOEMISSORRG,
          NOVO.DTEXPEDRG,
          NOVO.NRRNE,
          NOVO.ORGAOEMISSORRNE,
          NOVO.DTEXPEDRNE,
          NOVO.NROC,
          NOVO.ORGAOEMISSOROC,
          NOVO.DTEXPEDOC,
          NOVO.DTVALIDOC,
          NOVO.NRREGCNH,
          NOVO.DTEXPEDCNH,
          NOVO.UFCNH,
          NOVO.DTVALIDCNH,
          NOVO.DTPRIHAB,
          NOVO.CATEGORIACNH,
          NOVO.TPLOGRADBRASIL,
          NOVO.DSCLOGRADBRASIL,
          NOVO.NRLOGRADBRASIL,
          NOVO.COMPLEMENTOBRASIL,
          NOVO.BAIRROBRASIL,
          NOVO.CEPBRASIL,
          CAST (NOVO.CODMUNICBRASIL AS NUMBER (7)) AS CODMUNICBRASIL,
          NOVO.UFBRASIL,
          NOVO.PAISRESID,
          NOVO.DSCLOGRADEXTERIOR,
          NOVO.NRLOGRADEXTERIOR,
          NOVO.COMPLEMENTOEXTERIOR,
          NOVO.BAIRROEXTERIOR,
          NOVO.NMCIDEXTERIOR,
          NOVO.CODPOSTALEXTERIOR,
          NOVO.DTCHEGADA,
          NOVO.CLASSTRABESTRANG,
          NOVO.CASADOBR,
          NOVO.FILHOSBR,
          NOVO.DEFFISICA,
          NOVO.DEFVISUAL,
          NOVO.DEFAUDITIVA,
          NOVO.DEFMENTAL,
          NOVO.DEFINTELECTUAL,
          NOVO.REABREADAP,
          NULL AS INFOCOTA,
          NOVO.OBSERVACAO,
          NULL AS TRABAPOSENT,
          NOVO.FONEPRINC,
          NOVO.FONEALTERNAT,
          NOVO.EMAILPRINC,
          NOVO.CODEMP,
          NOVO.CHAVE
     FROM VGF_EVENTO_S2300_BASE NOVO
    WHERE     NOVO.SITESOCIAL IN ('5', 'T')
          AND EXISTS
                 (SELECT 1
                    FROM TFPS2205 VELHO
                   WHERE     NOVO.CODEMP = VELHO.CODEMP
                         AND NOVO.TPAMB = VELHO.TPAMB
                         AND NOVO.CHAVE = VELHO.CHAVE)
   UNION
   SELECT ULTIMO.TPINSCEMPREGADOR,
          ULTIMO.NRINSCEMPREGADOR,
          ULTIMO.CPFTRAB,
          ULTIMO.NISTRAB,
          NULL AS DTALTERACAO,
          NULL AS EMAILALTERNAT,
          ULTIMO.NMTRAB,
          ULTIMO.SEXO,
          ULTIMO.RACACOR,
          ULTIMO.ESTCIV,
          ULTIMO.GRAUINSTR,
          ULTIMO.NMSOC,
          ULTIMO.NRCTPS,
          ULTIMO.SERIECTPS,
          ULTIMO.UFCTPS,
          ULTIMO.NRRIC,
          ULTIMO.ORGAOEMISSORRIC,
          ULTIMO.DTEXPEDRIC,
          ULTIMO.NRRG,
          ULTIMO.ORGAOEMISSORRG,
          ULTIMO.DTEXPEDRG,
          ULTIMO.NRRNE,
          ULTIMO.ORGAOEMISSORRNE,
          ULTIMO.DTEXPEDRNE,
          ULTIMO.NROC,
          ULTIMO.ORGAOEMISSOROC,
          ULTIMO.DTEXPEDOC,
          ULTIMO.DTVALIDOC,
          ULTIMO.NRREGCNH,
          ULTIMO.DTEXPEDCNH,
          ULTIMO.UFCNH,
          ULTIMO.DTVALIDCNH,
          ULTIMO.DTPRIHAB,
          ULTIMO.CATEGORIACNH,
          ULTIMO.TPLOGRADBRASIL,
          ULTIMO.DSCLOGRADBRASIL,
          ULTIMO.NRLOGRADBRASIL,
          ULTIMO.COMPLEMENTOBRASIL,
          ULTIMO.BAIRROBRASIL,
          ULTIMO.CEPBRASIL,
          CAST (ULTIMO.CODMUNICBRASIL AS NUMBER (7)) AS CODMUNICBRASIL,
          ULTIMO.UFBRASIL,
          ULTIMO.PAISRESID,
          ULTIMO.DSCLOGRADEXTERIOR,
          ULTIMO.NRLOGRADEXTERIOR,
          ULTIMO.COMPLEMENTOEXTERIOR,
          ULTIMO.BAIRROEXTERIOR,
          ULTIMO.NMCIDEXTERIOR,
          ULTIMO.CODPOSTALEXTERIOR,
          ULTIMO.DTCHEGADA,
          ULTIMO.CLASSTRABESTRANG,
          ULTIMO.CASADOBR,
          ULTIMO.FILHOSBR,
          ULTIMO.DEFFISICA,
          ULTIMO.DEFVISUAL,
          ULTIMO.DEFAUDITIVA,
          ULTIMO.DEFMENTAL,
          ULTIMO.DEFINTELECTUAL,
          ULTIMO.REABREADAP,
          NULL AS INFOCOTA,
          ULTIMO.OBSERVACAO,
          NULL AS TRABAPOSENT,
          ULTIMO.FONEPRINC,
          ULTIMO.FONEALTERNAT,
          ULTIMO.EMAILPRINC,
          ULTIMO.CODEMP,
          ULTIMO.CHAVE
     FROM VGF_EVENTO_S2300_BASE NOVO, TFPS2300 ULTIMO
    WHERE     NOVO.SITESOCIAL IN ('O', '6')
          AND NOVO.CODEMP = ULTIMO.CODEMP
          AND NOVO.TPAMB = ULTIMO.TPAMB
          AND NOVO.CHAVE = ULTIMO.CHAVE
          AND ULTIMO.DTREF = (SELECT SNK_GET_DTREF_ESOCIAL () FROM DUAL)
          AND ULTIMO.SEQUENCIA =
                 (SELECT SNK_GET_SEQ_ATUAL_ESOCIAL () FROM DUAL)
          AND ULTIMO.STATUS = 'F'
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 14/05/2018 09:14:58
Num.Script: 52278-0-0
Nro. O.S. : 1161409
Nome      : Cria - VGF_EVENTO_S2306
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - VGF_EVENTO_S2306
NomeObjeto: VGF_EVENTO_S2306
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210005
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2306
AS
   SELECT NOVO.TPINSCEMPREGADOR,
          NOVO.NRINSCEMPREGADOR,
          NOVO.CPFTRAB,
          NOVO.NISTRAB,
          NOVO.CODCATEG,
          NOVO.DTALTERACAO,
          NOVO.DTREF,
          NOVO.NATATIVIDADE,
          NOVO.CODCARGO,
          NOVO.CODFUNCAO,
          NOVO.VRSALFX,
          NOVO.UNDSALFIXO,
          NOVO.DSCSALVAR,
          NOVO.NATESTAGIO,
          NOVO.NIVESTAGIO,
          NOVO.AREAATUACAO,
          NOVO.NRAPOL,
          NOVO.VLRBOLSA,
          NOVO.DTPREVTERM,
          NOVO.CNPJINSTENSINO,
          SUBSTR (NOVO.NMRAZAOINSTENS, 1, 100) AS NMRAZAOINSTENS,
          NOVO.DSCLOGRADINSTENS,
          NOVO.NRLOGRADINSTENS,
          NOVO.BAIRROINSTENS,
          NOVO.CEPINSTENS,
          NOVO.CODMUNICINSTENS,
          NOVO.UFINSTENS,
          NOVO.CNPJAGNTINTEG,
          SUBSTR (NOVO.NMRAZAOAGNTINTEG, 1, 100) AS NMRAZAOAGNTINTEG,
          NOVO.DSCLOGRADAGNTINTEG,
          NOVO.NRLOGRADAGNTINTEG,
          NOVO.BAIRROAGNTINTEG,
          NOVO.CEPAGNTINTEG,
          NOVO.CODMUNICAGNTINTEG,
          NOVO.UFAGNTINTEG,
          NOVO.CPFSUPERVISOR,
          NOVO.NMSUPERV,
          NOVO.DTINIAFAST,
          NOVO.CODMOTAFAST,
          NOVO.DTTERM,
          NOVO.CODEMP,
          NOVO.CHAVE
     FROM VGF_EVENTO_S2300_BASE NOVO
    WHERE     NOVO.SITESOCIAL IN ('6', 'T')
          AND EXISTS
                 (SELECT 1
                    FROM TFPS2306 VELHO
                   WHERE     NOVO.CODEMP = VELHO.CODEMP
                         AND NOVO.TPAMB = VELHO.TPAMB
                         AND NOVO.CHAVE = VELHO.CHAVE)
   UNION
   SELECT ULTIMO.TPINSCEMPREGADOR,
          ULTIMO.NRINSCEMPREGADOR,
          ULTIMO.CPFTRAB,
          ULTIMO.NISTRAB,
          ULTIMO.CODCATEG,
          NULL AS DTALTERACAO,
          NULL AS DTREF,
          ULTIMO.NATATIVIDADE,
          ULTIMO.CODCARGO,
          ULTIMO.CODFUNCAO,
          ULTIMO.VRSALFX,
          ULTIMO.UNDSALFIXO,
          ULTIMO.DSCSALVAR,
          ULTIMO.NATESTAGIO,
          ULTIMO.NIVESTAGIO,
          ULTIMO.AREAATUACAO,
          ULTIMO.NRAPOL,
          ULTIMO.VLRBOLSA,
          ULTIMO.DTPREVTERM,
          ULTIMO.CNPJINSTENSINO,
          SUBSTR (ULTIMO.NMRAZAOINSTENS, 1, 100) AS NMRAZAOINSTENS,
          ULTIMO.DSCLOGRADINSTENS,
          ULTIMO.NRLOGRADINSTENS,
          ULTIMO.BAIRROINSTENS,
          ULTIMO.CEPINSTENS,
          ULTIMO.CODMUNICINSTENS,
          ULTIMO.UFINSTENS,
          ULTIMO.CNPJAGNTINTEG,
          SUBSTR (ULTIMO.NMRAZAOAGNTINTEG, 1, 100) AS NMRAZAOAGNTINTEG,
          ULTIMO.DSCLOGRADAGNTINTEG,
          ULTIMO.NRLOGRADAGNTINTEG,
          ULTIMO.BAIRROAGNTINTEG,
          ULTIMO.CEPAGNTINTEG,
          ULTIMO.CODMUNICAGNTINTEG,
          ULTIMO.UFAGNTINTEG,
          ULTIMO.CPFSUPERVISOR,
          ULTIMO.NMSUPERV,
          ULTIMO.DTINIAFAST,
          ULTIMO.CODMOTAFAST,
          ULTIMO.DTTERM,
          ULTIMO.CODEMP,
          ULTIMO.CHAVE
     FROM VGF_EVENTO_S2300_BASE NOVO, TFPS2300 ULTIMO
    WHERE     NOVO.SITESOCIAL IN ('O', '5')
          AND NOVO.CODEMP = ULTIMO.CODEMP
          AND NOVO.TPAMB = ULTIMO.TPAMB
          AND NOVO.CHAVE = ULTIMO.CHAVE
          AND ULTIMO.DTREF = (SELECT SNK_GET_DTREF_ESOCIAL () FROM DUAL)
          AND ULTIMO.SEQUENCIA =
                 (SELECT SNK_GET_SEQ_ATUAL_ESOCIAL () FROM DUAL)
          AND ULTIMO.STATUS = 'F'
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 23/03/2018 17:58:22
Num.Script: 52279-0-0
Nro. O.S. : 1161409
Nome      : Cria - TRG_UPD_TFPS2300
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TRG_UPD_TFPS2300
NomeObjeto: TRG_UPD_TFPS2300
TipoObjeto: TRIGGER
NomeTabela: TFPS2300
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210005
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_UPD_TFPS2300
BEFORE UPDATE ON TFPS2300
FOR EACH ROW
WHEN (
NEW.STATUS = 'F' AND OLD.STATUS <> NEW.STATUS
      )
DECLARE P_COUNT NUMBER(10);
BEGIN
    SELECT COUNT(1) INTO P_COUNT
    FROM TFPS2205
    WHERE CODEMP = :NEW.CODEMP 
      AND CHAVE = :NEW.CHAVE
      AND TPAMB = SNK_GET_TPAMB_ESOCIAL
      AND EXISTS(SELECT 1   /* SE O FUNCIONÁRIO NÃO FOI LIBERADO PARA O EVENTO 2205 TEM QUE CONTINUAR GERANDO O 2205 COMO UMA CÓPIA DO 2300*/
                 FROM TFPFUN
                 WHERE CODEMP||':'||CODFUNC = TFPS2205.CHAVE
                   AND SITESOCIAL IN ('5', 'T'));

    IF P_COUNT = 0 THEN
        INSERT INTO TFPS2205(UFCTPS, UFCNH, UFBRASIL, TRABAPOSENT, TPLOGRADBRASIL, 
                             TPINSCEMPREGADOR, STATUS, SEXO, SERIECTPS, SEQUENCIA, 
                             REABREADAP, RACACOR, PAISRESID, ORGAOEMISSORRNE, 
                             ORGAOEMISSORRIC, ORGAOEMISSORRG, ORGAOEMISSOROC, 
                             OBSERVACAO, NRRNE, NRRIC, NRRG, NRREGCNH, 
                             NRORECIBO_ANT, NRORECIBO, NROC, NRLOGRADEXTERIOR, 
                             NRLOGRADBRASIL, NRINSCEMPREGADOR, NRCTPS, NMTRAB, 
                             NMSOC, NMCIDEXTERIOR, NISTRAB, INFOCOTA, FONEPRINC, 
                             FONEALTERNAT, FILHOSBR, ESTCIV, EMAILPRINC, DTVALIDOC, 
                             DTVALIDCNH, DTREF, DTPRIHAB, DTEXPEDRNE, DTEXPEDRIC, 
                             DTEXPEDRG, DTEXPEDOC, DTEXPEDCNH, DTCHEGADA, 
                             DTALTERACAO, DSCLOGRADEXTERIOR, DSCLOGRADBRASIL, 
                             DEFVISUAL, DEFMENTAL, DEFINTELECTUAL, DEFFISICA, 
                             DEFAUDITIVA, CPFTRAB, COMPLEMENTOEXTERIOR, 
                             COMPLEMENTOBRASIL, CODPOSTALEXTERIOR, CODMUNICBRASIL, 
                             CODEMP, CLASSTRABESTRANG, CHAVE, CEPBRASIL, 
                             CATEGORIACNH, CASADOBR, BAIRROEXTERIOR, BAIRROBRASIL, 
                             ACAO, TPAMB)
            VALUES(:NEW.UFCTPS, :NEW.UFCNH, :NEW.UFBRASIL, NULL /*:NEW.TRABAPOSENT*/, :NEW.TPLOGRADBRASIL, 
                   :NEW.TPINSCEMPREGADOR, :NEW.STATUS, :NEW.SEXO, :NEW.SERIECTPS, :NEW.SEQUENCIA, 
                   :NEW.REABREADAP, :NEW.RACACOR, :NEW.PAISRESID, :NEW.ORGAOEMISSORRNE, 
                   :NEW.ORGAOEMISSORRIC, :NEW.ORGAOEMISSORRG, :NEW.ORGAOEMISSOROC, 
                   :NEW.OBSERVACAO, :NEW.NRRNE, :NEW.NRRIC, :NEW.NRRG, :NEW.NRREGCNH, 
                   :NEW.NRORECIBO_ANT, :NEW.NRORECIBO, :NEW.NROC, :NEW.NRLOGRADEXTERIOR, 
                   :NEW.NRLOGRADBRASIL, :NEW.NRINSCEMPREGADOR, :NEW.NRCTPS, :NEW.NMTRAB, 
                   :NEW.NMSOC, :NEW.NMCIDEXTERIOR, :NEW.NISTRAB, NULL /*:NEW.INFOCOTA*/, :NEW.FONEPRINC, 
                   :NEW.FONEALTERNAT, :NEW.FILHOSBR, :NEW.ESTCIV, :NEW.EMAILPRINC, :NEW.DTVALIDOC, 
                   :NEW.DTVALIDCNH, :NEW.DTREF, :NEW.DTPRIHAB, :NEW.DTEXPEDRNE, :NEW.DTEXPEDRIC, 
                   :NEW.DTEXPEDRG, :NEW.DTEXPEDOC, :NEW.DTEXPEDCNH, :NEW.DTCHEGADA, 
                    NULL /*DTALTERACAO*/, :NEW.DSCLOGRADEXTERIOR, :NEW.DSCLOGRADBRASIL, 
                   :NEW.DEFVISUAL, :NEW.DEFMENTAL, :NEW.DEFINTELECTUAL, :NEW.DEFFISICA, 
                   :NEW.DEFAUDITIVA, :NEW.CPFTRAB, :NEW.COMPLEMENTOEXTERIOR, 
                   :NEW.COMPLEMENTOBRASIL, :NEW.CODPOSTALEXTERIOR, :NEW.CODMUNICBRASIL, 
                   :NEW.CODEMP, :NEW.CLASSTRABESTRANG, :NEW.CHAVE, :NEW.CEPBRASIL, 
                   :NEW.CATEGORIACNH, :NEW.CASADOBR, :NEW.BAIRROEXTERIOR, :NEW.BAIRROBRASIL, 
                   :NEW.ACAO, :NEW.TPAMB);
                   
            INSERT INTO TFPS2205_DEPENDENTE (CODEMP, DTREF, SEQUENCIA, TPDEP, NMDEP, DTNASCTO, CPFDEP, DEPIRRF, DEPSF, INCTRAB, CHAVEPAI, CHAVE, TPAMB)
            SELECT CODEMP, DTREF, SEQUENCIA, TPDEP, NMDEP, DTNASCTO, CPFDEP, DEPIRRF, DEPSF, INCTRAB, CHAVEPAI, CHAVE, TPAMB
              FROM TFPS2300_DEPENDENTE
            WHERE CODEMP = :NEW.CODEMP
              AND CHAVEPAI = :NEW.CHAVE
              AND DTREF = :NEW.DTREF
              AND TPAMB = :NEW.TPAMB
              AND SEQUENCIA = :NEW.SEQUENCIA;

                   
    END IF;

    SELECT COUNT(1) INTO P_COUNT
    FROM TFPS2306
    WHERE CODEMP = :NEW.CODEMP 
      AND CHAVE  = :NEW.CHAVE
      AND TPAMB = SNK_GET_TPAMB_ESOCIAL
      AND EXISTS(SELECT 1   /* SE O FUNCIONÁRIO NÃO FOI LIBERADO PARA O EVENTO 2306 TEM QUE CONTINUAR GERANDO O 2306 COMO UMA CÓPIA DO 2300*/
                 FROM TFPFUN
                 WHERE CODEMP||':'||CODFUNC = TFPS2306.CHAVE
                   AND SITESOCIAL IN ('6', 'T'));
                   
    IF P_COUNT = 0 THEN 
        INSERT INTO TFPS2306(CODEMP, DTREF, SEQUENCIA, TPINSCEMPREGADOR, 
                             NRINSCEMPREGADOR, CPFTRAB, NISTRAB, CODCATEG, 
                             DTALTERACAO, DTEF, NATATIVIDADE, CODCARGO, CODFUNCAO,
                             VRSALFX, UNDSALFIXO, DSCSALVAR,
                             NATESTAGIO, NIVESTAGIO, AREAATUACAO, NRAPOL, VLRBOLSA,
                             DTPREVTERM, CNPJINSTENSINO, NMRAZAOINSTENS, DSCLOGRADINSTENS,
                             NRLOGRADINSTENS, BAIRROINSTENS, CEPINSTENS, CODMUNICINSTENS,
                             UFINSTENS, CNPJAGNTINTEG, NMRAZAOAGNTINTEG, DSCLOGRADAGNTINTEG,
                             NRLOGRADAGNTINTEG, BAIRROAGNTINTEG, CEPAGNTINTEG, CODMUNICAGNTINTEG,
                             UFAGNTINTEG, CPFSUPERVISOR, NMSUPERV,                                     
                             STATUS, NRORECIBO, NRORECIBO_ANT, ACAO, CHAVE, TPAMB)
                             
            VALUES(:NEW.CODEMP, :NEW.DTREF, :NEW.SEQUENCIA, :NEW.TPINSCEMPREGADOR, 
                   :NEW.NRINSCEMPREGADOR, :NEW.CPFTRAB, :NEW.NISTRAB, :NEW.CODCATEG, 
                    NULL /*:NEW.DTALTERACAO*/, NULL /* DTEF */, :NEW.NATATIVIDADE, :NEW.CODCARGO, :NEW.CODFUNCAO, 
                   :NEW.VRSALFX, :NEW.UNDSALFIXO, :NEW.DSCSALVAR, 
                   :NEW.NATESTAGIO, :NEW.NIVESTAGIO, :NEW.AREAATUACAO, :NEW.NRAPOL, :NEW.VLRBOLSA,
                   :NEW.DTPREVTERM, :NEW.CNPJINSTENSINO, :NEW.NMRAZAOINSTENS, :NEW.DSCLOGRADINSTENS,
                   :NEW.NRLOGRADINSTENS, :NEW.BAIRROINSTENS, :NEW.CEPINSTENS, :NEW.CODMUNICINSTENS,
                   :NEW.UFINSTENS, :NEW.CNPJAGNTINTEG, :NEW.NMRAZAOAGNTINTEG, :NEW.DSCLOGRADAGNTINTEG,
                   :NEW.NRLOGRADAGNTINTEG, :NEW.BAIRROAGNTINTEG, :NEW.CEPAGNTINTEG, :NEW.CODMUNICAGNTINTEG,
                   :NEW.UFAGNTINTEG, :NEW.CPFSUPERVISOR, :NEW.NMSUPERV,
                   :NEW.STATUS, :NEW.NRORECIBO, :NEW.NRORECIBO_ANT, :NEW.ACAO, :NEW.CHAVE, :NEW.TPAMB);

 
   END IF;


END;
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 23/03/2018 17:58:22
Num.Script: 52280-0-0
Nro. O.S. : 1161409
Nome      : Altera - SNK_GET_VALID_ALTER_ESOCIAL
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - SNK_GET_VALID_ALTER_ESOCIAL
NomeObjeto: SNK_GET_VALID_ALTER_ESOCIAL
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210005
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_GET_VALID_ALTER_ESOCIAL(P_EVENTO            VARCHAR2,
                                                        P_COLUNAS_PADRAO    VARCHAR2,
                                                        P_CODEMPMATRIZ      NUMBER,
                                                        P_DTREF             DATE,
                                                        P_SEQUENCIA         NUMBER,
                                                        P_TPAMB             CHAR,
                                                        P_NOMETAB_PAI       VARCHAR2 := NULL,
                                                        P_NOMETAB           VARCHAR2,
                                                        P_NOMEVIEW          VARCHAR2)
IS
   TYPE CURTYPE        IS REF CURSOR;
   CURVAL              CURTYPE;
   P_CONDITION         VARCHAR2(4000);
   queSql              VARCHAR2(4000);
   queUpd              VARCHAR2(4000);
   P_RESULT_QUERY      NUMBER;
   P_TABLE_PAI         VARCHAR2(100);
   P_CHAVES            VARCHAR2(4000);
   P_CHAVES_ALT        VARCHAR2(4000);
   P_CHAVE             VARCHAR2(50);
   P_VALIDACAO         VARCHAR2(50);
   P_NOMETAB_UTIL      VARCHAR2(100);
   P_COL_PAD_FILHOS    VARCHAR2(100) := 'CODEMP, DTREF, CHAVE, SEQUENCIA, TPAMB';
   P_FILTRO_FILHOS     VARCHAR2(4000);
   P_COUNT             NUMBER(10);
   P_DTLOG             DATE;
   P_SEQLOG            NUMBER(10);
   P_MSG               VARCHAR2(4000);
BEGIN
    P_CHAVES := NULL;
    P_CHAVES_ALT := NULL;

    IF P_NOMETAB = 'TFPS2200' THEN
        P_NOMETAB_UTIL := 'TFPS2200';
        FOR S2200 IN (SELECT CHAVE, VALIDACAO
                      FROM ( SELECT O.CHAVE
                                  , CASE WHEN N.CODEMP IS NULL AND O.ACAO <> 'E' THEN 'E'
                                         WHEN (N.CODEMP IS NULL AND O.ACAO = 'E') OR (NVL(N.INFOCOTA, ' ') = NVL(O.INFOCOTA, ' ') AND NVL(N.OBSERVACAO, ' ') = NVL(O.OBSERVACAO, ' ') AND NVL(N.TRABAPOSENT, ' ') = NVL(O.TRABAPOSENT, ' ') AND 
                                                                                        NVL(N.FONEPRINC, ' ') = NVL(O.FONEPRINC, ' ') AND NVL(N.FONEALTERNAT, ' ') = NVL(O.FONEALTERNAT, ' ') AND 
                                                                                        NVL(N.EMAILPRINC, ' ') = NVL(O.EMAILPRINC, ' ') AND NVL(N.MATRICULA, ' ') = NVL(O.MATRICULA, ' ') AND NVL(N.TPREGTRAB, 0) = NVL(O.TPREGTRAB, 0) AND 
                                                                                        NVL(N.TPREGPREV, 0) = NVL(O.TPREGPREV, 0) AND NVL(N.NRRECINFPRELIM, ' ') = NVL(O.NRRECINFPRELIM, ' ') AND NVL(N.CADINI, ' ') = NVL(O.CADINI, ' ') AND 
                                                                                        NVL(N.DTADM, SYSDATE) = NVL(O.DTADM, SYSDATE) AND NVL(N.TPADMISSAO, 0) = NVL(O.TPADMISSAO, 0) AND NVL(N.INDADMISSAO, 0) = NVL(O.INDADMISSAO, 0) AND 
                                                                                        NVL(N.TPREGJOR, 0) = NVL(O.TPREGJOR, 0) AND NVL(N.NATATIVIDADE, 0) = NVL(O.NATATIVIDADE, 0) AND NVL(N.DTBASE, 0) = NVL(O.DTBASE, 0) AND 
                                                                                        NVL(N.CNPJSINDCATEGPROF, ' ') = NVL(O.CNPJSINDCATEGPROF, ' ') AND NVL(N.OPCFGTS, 0) = NVL(O.OPCFGTS, 0) AND 
                                                                                        NVL(N.DTOPCFGTS, SYSDATE) = NVL(O.DTOPCFGTS, SYSDATE) AND NVL(N.HIPLEG, 0) = NVL(O.HIPLEG, 0) AND NVL(N.JUSTCONTR, ' ') = NVL(O.JUSTCONTR, ' ') AND 
                                                                                        NVL(N.TPINCLCONTR, 0) = NVL(O.TPINCLCONTR, 0) AND NVL(N.TPINSCIDETOMADORSERV, 0) = NVL(O.TPINSCIDETOMADORSERV, 0) AND 
                                                                                        NVL(N.NRINSCIDETOMADORSERV, ' ') = NVL(O.NRINSCIDETOMADORSERV, ' ') AND NVL(N.TPINSCIDEESTABVINC, 0) = NVL(O.TPINSCIDEESTABVINC, 0) AND 
                                                                                        NVL(N.NRINSCIDEESTABVINC, ' ') = NVL(O.NRINSCIDEESTABVINC, ' ') AND NVL(N.CPFTRABSUBST, ' ') = NVL(O.CPFTRABSUBST, ' ') AND 
                                                                                        NVL(N.INDPROVIM, 0) = NVL(O.INDPROVIM, 0) AND NVL(N.TPPROV, 0) = NVL(O.TPPROV, 0) AND NVL(N.DTNOMEACAO, SYSDATE) = NVL(O.DTNOMEACAO, SYSDATE) AND 
                                                                                        NVL(N.DTPOSSE, SYSDATE) = NVL(O.DTPOSSE, SYSDATE) AND NVL(N.DTEXERCICIO, SYSDATE) = NVL(O.DTEXERCICIO, SYSDATE) AND 
                                                                                        NVL(N.TPPLANRP, 0) = NVL(O.TPPLANRP, 0) AND NVL(N.NRPROCJUDINFODECJUD, ' ') = NVL(O.NRPROCJUDINFODECJUD, ' ') AND 
                                                                                        NVL(N.CODCARGO, ' ') = NVL(O.CODCARGO, ' ') AND NVL(N.CODFUNCAO, ' ') = NVL(O.CODFUNCAO, ' ') AND NVL(N.CODCATEG, 0) = NVL(O.CODCATEG, 0) AND 
                                                                                        NVL(N.CODCATEG2, 0) = NVL(O.CODCATEG2, 0) AND NVL(N.CODCARREIRA, ' ') = NVL(O.CODCARREIRA, ' ') AND 
                                                                                        NVL(N.DTINGRCARR, SYSDATE) = NVL(O.DTINGRCARR, SYSDATE) AND NVL(N.VRSALFX, 0) = NVL(O.VRSALFX, 0) AND NVL(N.UNDSALFIXO, 0) = NVL(O.UNDSALFIXO, 0) AND 
                                                                                        NVL(N.DSCSALVAR, ' ') = NVL(O.DSCSALVAR, ' ') AND NVL(N.TPCONTR, 0) = NVL(O.TPCONTR, 0) AND NVL(N.DTTERM, SYSDATE) = NVL(O.DTTERM, SYSDATE) AND 
                                                                                        NVL(N.CLAUASSEG, ' ') = NVL(O.CLAUASSEG, ' ') AND NVL(N.TPINSCLOCALTRABGERAL, 0) = NVL(O.TPINSCLOCALTRABGERAL, 0) AND 
                                                                                        NVL(N.NRINSCLOCALTRABGERAL, ' ') = NVL(O.NRINSCLOCALTRABGERAL, ' ') AND NVL(N.TPLOGRADLOCALTRABDOM, ' ') = NVL(O.TPLOGRADLOCALTRABDOM, ' ') AND 
                                                                                        NVL(N.DSCLOGRADLOCALTRABDOM, ' ') = NVL(O.DSCLOGRADLOCALTRABDOM, ' ') AND NVL(N.NRLOGRADLOCALTRABDOM, ' ') = NVL(O.NRLOGRADLOCALTRABDOM, ' ') AND 
                                                                                        NVL(N.COMPLEMENTOLOCALTRABDOM, ' ') = NVL(O.COMPLEMENTOLOCALTRABDOM, ' ') AND NVL(N.BAIRROLOCALTRABDOM, ' ') = NVL(O.BAIRROLOCALTRABDOM, ' ') AND 
                                                                                        NVL(N.CEPLOCALTRABDOM, ' ') = NVL(O.CEPLOCALTRABDOM, ' ') AND NVL(N.CODMUNICLOCALTRABDOM, 0) = NVL(O.CODMUNICLOCALTRABDOM, 0) AND 
                                                                                        NVL(N.UFLOCALTRABDOM, ' ') = NVL(O.UFLOCALTRABDOM, ' ') AND NVL(N.QTDHRSSEM, 0) = NVL(O.QTDHRSSEM, 0) AND NVL(N.TPJORNADA, 0) = 
                                                                                        NVL(O.TPJORNADA, 0) AND NVL(N.DSCTPJORN, ' ') = NVL(O.DSCTPJORN, ' ') AND NVL(N.TMPPARC, ' ') = NVL(O.TMPPARC, ' ') AND 
                                                                                        NVL(N.CNPJSINDTRAB, ' ') = NVL(O.CNPJSINDTRAB, ' ') AND NVL(N.NRPROCJUDALVARAJUDICIAL, ' ') = NVL(O.NRPROCJUDALVARAJUDICIAL, ' ') AND 
                                                                                        NVL(N.CNPJEMPREGANT, ' ') = NVL(O.CNPJEMPREGANT, ' ') AND NVL(N.MATRICANT, ' ') = NVL(O.MATRICANT, ' ') AND 
                                                                                        NVL(N.DTINIVINCULO, SYSDATE) = NVL(O.DTINIVINCULO, SYSDATE) AND NVL(N.OBSERVACAOSUCESSAOVINC, ' ') = NVL(O.OBSERVACAOSUCESSAOVINC, ' ') AND 
                                                                                        NVL(N.DTINIAFAST, SYSDATE) = NVL(O.DTINIAFAST, SYSDATE) AND NVL(N.CODMOTAFAST, ' ') = NVL(O.CODMOTAFAST, ' ') AND 
                                                                                        NVL(N.DTDESLIG, SYSDATE) = NVL(O.DTDESLIG, SYSDATE) AND N.CHAVE = O.CHAVE AND NVL(N.DTEXPEDRIC, SYSDATE) = NVL(O.DTEXPEDRIC, SYSDATE) AND 
                                                                                        NVL(N.TPINSCEMPREGADOR, 0) = NVL(O.TPINSCEMPREGADOR, 0) AND NVL(N.NRINSCEMPREGADOR, ' ') = NVL(O.NRINSCEMPREGADOR, ' ') AND 
                                                                                        NVL(N.CPFTRAB, ' ') = NVL(O.CPFTRAB, ' ') AND NVL(N.NISTRAB, ' ') = NVL(O.NISTRAB, ' ') AND NVL(N.NMTRAB, ' ') = NVL(O.NMTRAB, ' ') AND 
                                                                                        NVL(N.SEXO, ' ') = NVL(O.SEXO, ' ') AND NVL(N.RACACOR, 0) = NVL(O.RACACOR, 0) AND NVL(N.ESTCIV, 0) = NVL(O.ESTCIV, 0) AND 
                                                                                        NVL(N.GRAUINSTR, ' ') = NVL(O.GRAUINSTR, ' ') AND NVL(N.INDPRIEMPR, ' ') = NVL(O.INDPRIEMPR, ' ') AND NVL(N.NMSOC, ' ') = NVL(O.NMSOC, ' ') AND 
                                                                                        NVL(N.DTNASCTONASCIMENTO, SYSDATE) = NVL(O.DTNASCTONASCIMENTO, SYSDATE) AND NVL(N.CODMUNICNASCIMENTO, 0) = NVL(O.CODMUNICNASCIMENTO, 0) AND 
                                                                                        NVL(N.UFNASCIMENTO, ' ') = NVL(O.UFNASCIMENTO, ' ') AND NVL(N.PAISNASCTONASCIMENTO, ' ') = NVL(O.PAISNASCTONASCIMENTO, ' ') AND 
                                                                                        NVL(N.PAISNACNASCIMENTO, ' ') = NVL(O.PAISNACNASCIMENTO, ' ') AND NVL(N.NMMAENASCIMENTO, ' ') = NVL(O.NMMAENASCIMENTO, ' ') AND 
                                                                                        NVL(N.NMPAINASCIMENTO, ' ') = NVL(O.NMPAINASCIMENTO, ' ') AND NVL(N.NRCTPS, ' ') = NVL(O.NRCTPS, ' ') AND 
                                                                                        NVL(N.SERIECTPS, ' ') = NVL(O.SERIECTPS, ' ') AND NVL(N.UFCTPS, ' ') = NVL(O.UFCTPS, ' ') AND NVL(N.NRRIC, ' ') = NVL(O.NRRIC, ' ') AND 
                                                                                        NVL(N.ORGAOEMISSORRIC, ' ') = NVL(O.ORGAOEMISSORRIC, ' ') AND NVL(N.NRRG, ' ') = NVL(O.NRRG, ' ') AND 
                                                                                        NVL(N.ORGAOEMISSORRG, ' ') = NVL(O.ORGAOEMISSORRG, ' ') AND NVL(N.DTEXPEDRG, SYSDATE) = NVL(O.DTEXPEDRG, SYSDATE) AND 
                                                                                        NVL(N.NRRNE, ' ') = NVL(O.NRRNE, ' ') AND NVL(N.ORGAOEMISSORRNE, ' ') = NVL(O.ORGAOEMISSORRNE, ' ') AND 
                                                                                        NVL(N.DTEXPEDRNE, SYSDATE) = NVL(O.DTEXPEDRNE, SYSDATE) AND NVL(N.NROC, ' ') = NVL(O.NROC, ' ') AND 
                                                                                        NVL(N.ORGAOEMISSOROC, ' ') = NVL(O.ORGAOEMISSOROC, ' ') AND NVL(N.DTEXPEDOC, SYSDATE) = NVL(O.DTEXPEDOC, SYSDATE) AND 
                                                                                        NVL(N.DTVALIDOC, SYSDATE) = NVL(O.DTVALIDOC, SYSDATE) AND NVL(N.NRREGCNH, ' ') = NVL(O.NRREGCNH, ' ') AND 
                                                                                        NVL(N.DTEXPEDCNH, SYSDATE) = NVL(O.DTEXPEDCNH, SYSDATE) AND NVL(N.UFCNH, ' ') = NVL(O.UFCNH, ' ') AND 
                                                                                        NVL(N.DTVALIDCNH, SYSDATE) = NVL(O.DTVALIDCNH, SYSDATE) AND NVL(N.DTPRIHAB, SYSDATE) = NVL(O.DTPRIHAB, SYSDATE) AND 
                                                                                        NVL(N.CATEGORIACNH, ' ') = NVL(O.CATEGORIACNH, ' ') AND NVL(N.TPLOGRADBRASIL, ' ') = NVL(O.TPLOGRADBRASIL, ' ') AND 
                                                                                        NVL(N.DSCLOGRADBRASIL, ' ') = NVL(O.DSCLOGRADBRASIL, ' ') AND NVL(N.NRLOGRADBRASIL, ' ') = NVL(O.NRLOGRADBRASIL, ' ') AND 
                                                                                        NVL(N.COMPLEMENTOBRASIL, ' ') = NVL(O.COMPLEMENTOBRASIL, ' ') AND NVL(N.BAIRROBRASIL, ' ') = NVL(O.BAIRROBRASIL, ' ') AND
                                                                                         NVL(N.CEPBRASIL, ' ') = NVL(O.CEPBRASIL, ' ') AND NVL(N.CODMUNICBRASIL, ' ') = NVL(O.CODMUNICBRASIL, ' ') AND 
                                                                                         NVL(N.UFBRASIL, ' ') = NVL(O.UFBRASIL, ' ') AND NVL(N.PAISRESID, ' ') = NVL(O.PAISRESID, ' ') AND 
                                                                                         NVL(N.DSCLOGRADEXTERIOR, ' ') = NVL(O.DSCLOGRADEXTERIOR, ' ') AND NVL(N.NRLOGRADEXTERIOR, ' ') = NVL(O.NRLOGRADEXTERIOR, ' ') AND 
                                                                                         NVL(N.COMPLEMENTOEXTERIOR, ' ') = NVL(O.COMPLEMENTOEXTERIOR, ' ') AND NVL(N.BAIRROEXTERIOR, ' ') = NVL(O.BAIRROEXTERIOR, ' ') AND 
                                                                                         NVL(N.NMCIDEXTERIOR, ' ') = NVL(O.NMCIDEXTERIOR, ' ') AND NVL(N.CODPOSTALEXTERIOR, ' ') = NVL(O.CODPOSTALEXTERIOR, ' ') AND 
                                                                                        NVL(N.DTCHEGADA, SYSDATE) = NVL(O.DTCHEGADA, SYSDATE) AND NVL(N.CLASSTRABESTRANG, 0) = NVL(O.CLASSTRABESTRANG, 0) AND 
                                                                                        NVL(N.CASADOBR, ' ') = NVL(O.CASADOBR, ' ') AND NVL(N.FILHOSBR, ' ') = NVL(O.FILHOSBR, ' ') AND NVL(N.DEFFISICA, ' ') = NVL(O.DEFFISICA, ' ') AND 
                                                                                        NVL(N.DEFVISUAL, ' ') = NVL(O.DEFVISUAL, ' ') AND NVL(N.DEFAUDITIVA, ' ') = NVL(O.DEFAUDITIVA, ' ') AND NVL(N.DEFMENTAL, ' ') = NVL(O.DEFMENTAL, ' ') AND 
                                                                                        NVL(N.DEFINTELECTUAL, ' ') = NVL(O.DEFINTELECTUAL, ' ') AND NVL(N.REABREADAP, ' ') = NVL(O.REABREADAP, ' ')) THEN 'I'
                                         ELSE 'A'
                                    END AS VALIDACAO 
                             FROM TFPS2200 O
                             LEFT JOIN VGF_EVENTO_S2200 N ON O.CODEMP = N.CODEMP AND O.CHAVE = N.CHAVE
                             WHERE O.CODEMP = P_CODEMPMATRIZ
                               AND O.DTREF = P_DTREF
                               AND O.TPAMB = P_TPAMB
                               AND O.SEQUENCIA = P_SEQUENCIA
                               AND O.CONTROLE = 'I'
                          ) DTALT
                      WHERE DTALT.VALIDACAO = 'A') LOOP
            IF P_CHAVES IS NOT NULL AND LENGTH(P_CHAVES) + LENGTH(S2200.CHAVE) >= 1700 THEN
                queUpd :=               ' UPDATE TFPS2200';

                IF P_CHAVES_ALT IS NOT NULL THEN
                    queUpd := queUpd || ' SET CONTROLE = CASE WHEN CHAVE IN ('||P_CHAVES_ALT||') THEN ''A'' ELSE ''E'' END ';
                ELSE
                    queUpd := queUpd || ' SET CONTROLE = ''E'' ';
                END IF;

                queUpd := queUpd ||     ' WHERE CODEMP = :CODEMP
                                             AND DTREF = :DTREF
                                             AND SEQUENCIA = :SEQUENCIA
                                             AND TPAMB = :TPAMB
                                             AND CONTROLE = ''I''
                                             AND CHAVE IN ('||P_CHAVES||')';

                EXECUTE IMMEDIATE queUpd USING P_CODEMPMATRIZ, P_DTREF, P_SEQUENCIA, P_TPAMB;

                P_CHAVES := NULL;
                P_CHAVES_ALT := NULL;
             END IF;

            IF P_CHAVES IS NULL THEN
                P_CHAVES := ''''||S2200.CHAVE||'''';

                IF S2200.VALIDACAO = 'A' THEN
                    P_CHAVES_ALT := ''''||S2200.CHAVE||'''';
                END IF;
            ELSE 
                P_CHAVES := P_CHAVES||','''||S2200.CHAVE||'''';

                IF S2200.VALIDACAO = 'A' THEN
                    P_CHAVES_ALT := P_CHAVES_ALT||','''||S2200.CHAVE||'''';
                END IF;
             END IF;
        END LOOP;
    ELSIF P_NOMETAB = 'TFPS2300' THEN
        P_NOMETAB_UTIL := 'TFPS2300';
        FOR S2300 IN (SELECT CHAVE, VALIDACAO
                      FROM ( SELECT O.CHAVE
                                  , CASE WHEN N.CODEMP IS NULL AND O.ACAO <> 'E' THEN 'E'
                                         WHEN (N.CODEMP IS NULL AND O.ACAO = 'E') OR (NVL(N.NRLOGRADAGNTINTEG, ' ') = NVL(O.NRLOGRADAGNTINTEG, ' ') AND NVL(N.BAIRROAGNTINTEG, ' ') = NVL(O.BAIRROAGNTINTEG, ' ')
                                           AND NVL(N.CEPAGNTINTEG, ' ') = NVL(O.CEPAGNTINTEG, ' ') AND NVL(N.CODMUNICAGNTINTEG, 0) = NVL(O.CODMUNICAGNTINTEG, 0)
                                           AND NVL(N.UFAGNTINTEG, ' ') = NVL(O.UFAGNTINTEG, ' ') AND NVL(N.CPFSUPERVISOR, ' ') = NVL(O.CPFSUPERVISOR, ' ')
                                           AND NVL(N.NMSUPERV, ' ') = NVL(O.NMSUPERV, ' ') AND NVL(N.DTINIAFAST, SYSDATE) = NVL(O.DTINIAFAST, SYSDATE)
                                           AND NVL(N.CODMOTAFAST, ' ') = NVL(O.CODMOTAFAST, ' ') AND NVL(N.DTTERM, SYSDATE) = NVL(O.DTTERM, SYSDATE) AND N.CHAVE = O.CHAVE AND NVL(N.TPINSCEMPREGADOR, 0) = NVL(O.TPINSCEMPREGADOR, 0) AND NVL(N.NRINSCEMPREGADOR, ' ') = NVL(O.NRINSCEMPREGADOR, ' ') AND NVL(N.CPFTRAB, ' ') = NVL(O.CPFTRAB, ' ') AND NVL(N.NISTRAB, ' ') = NVL(O.NISTRAB, ' ') AND NVL(N.NMTRAB, ' ') = NVL(O.NMTRAB, ' ') AND NVL(N.SEXO, ' ') = NVL(O.SEXO, ' ') AND NVL(N.RACACOR, 0) = NVL(O.RACACOR, 0) AND NVL(N.ESTCIV, 0) = NVL(O.ESTCIV, 0) AND NVL(N.GRAUINSTR, ' ') = NVL(O.GRAUINSTR, ' ') AND NVL(N.NMSOC, ' ') = NVL(O.NMSOC, ' ') AND NVL(N.DTNASCTONASCIMENTO, SYSDATE) = NVL(O.DTNASCTONASCIMENTO, SYSDATE) AND NVL(N.CODMUNICNASCIMENTO, 0) = NVL(O.CODMUNICNASCIMENTO, 0) AND NVL(N.UFNASCIMENTO, ' ') = NVL(O.UFNASCIMENTO, ' ') AND NVL(N.PAISNASCTONASCIMENTO, ' ') = NVL(O.PAISNASCTONASCIMENTO, ' ') AND NVL(N.PAISNACNASCIMENTO, ' ') = NVL(O.PAISNACNASCIMENTO, ' ') AND NVL(N.NMMAENASCIMENTO, ' ') = NVL(O.NMMAENASCIMENTO, ' ') AND NVL(N.NMPAINASCIMENTO, ' ') = NVL(O.NMPAINASCIMENTO, ' ') AND NVL(N.NRCTPS, ' ') = NVL(O.NRCTPS, ' ') AND NVL(N.SERIECTPS, ' ') = NVL(O.SERIECTPS, ' ') AND NVL(N.UFCTPS, ' ') = NVL(O.UFCTPS, ' ') AND NVL(N.NRRIC, ' ') = NVL(O.NRRIC, ' ') AND NVL(N.ORGAOEMISSORRIC, ' ') = NVL(O.ORGAOEMISSORRIC, ' ') AND NVL(N.DTEXPEDRIC, SYSDATE) = NVL(O.DTEXPEDRIC, SYSDATE) AND NVL(N.NRRG, ' ') = NVL(O.NRRG, ' ') AND NVL(N.ORGAOEMISSORRG, ' ') = NVL(O.ORGAOEMISSORRG, ' ') AND NVL(N.DTEXPEDRG, SYSDATE) = NVL(O.DTEXPEDRG, SYSDATE) AND NVL(N.NRRNE, ' ') = NVL(O.NRRNE, ' ') AND NVL(N.ORGAOEMISSORRNE, ' ') = NVL(O.ORGAOEMISSORRNE, ' ') AND NVL(N.DTEXPEDRNE, SYSDATE) = NVL(O.DTEXPEDRNE, SYSDATE) AND NVL(N.NROC, ' ') = NVL(O.NROC, ' ') AND NVL(N.ORGAOEMISSOROC, ' ') = NVL(O.ORGAOEMISSOROC, ' ') AND NVL(N.DTEXPEDOC, SYSDATE) = NVL(O.DTEXPEDOC, SYSDATE) AND NVL(N.DTVALIDOC, SYSDATE) = NVL(O.DTVALIDOC, SYSDATE) AND NVL(N.NRREGCNH, ' ') = NVL(O.NRREGCNH, ' ') AND NVL(N.DTEXPEDCNH, SYSDATE) = NVL(O.DTEXPEDCNH, SYSDATE) AND NVL(N.UFCNH, ' ') = NVL(O.UFCNH, ' ') AND NVL(N.DTVALIDCNH, SYSDATE) = NVL(O.DTVALIDCNH, SYSDATE) AND NVL(N.DTPRIHAB, SYSDATE) = NVL(O.DTPRIHAB, SYSDATE) AND NVL(N.CATEGORIACNH, ' ') = NVL(O.CATEGORIACNH, ' ') AND NVL(N.TPLOGRADBRASIL, ' ') = NVL(O.TPLOGRADBRASIL, ' ') AND NVL(N.DSCLOGRADBRASIL, ' ') = NVL(O.DSCLOGRADBRASIL, ' ') AND NVL(N.NRLOGRADBRASIL, ' ') = NVL(O.NRLOGRADBRASIL, ' ') AND NVL(N.COMPLEMENTOBRASIL, ' ') = NVL(O.COMPLEMENTOBRASIL, ' ') AND NVL(N.BAIRROBRASIL, ' ') = NVL(O.BAIRROBRASIL, ' ') AND NVL(N.CEPBRASIL, ' ') = NVL(O.CEPBRASIL, ' ') AND NVL(N.CODMUNICBRASIL, 0) = NVL(O.CODMUNICBRASIL, 0) AND NVL(N.UFBRASIL, ' ') = NVL(O.UFBRASIL, ' ') AND NVL(N.PAISRESID, ' ') = NVL(O.PAISRESID, ' ') AND NVL(N.DSCLOGRADEXTERIOR, ' ') = NVL(O.DSCLOGRADEXTERIOR, ' ') AND NVL(N.NRLOGRADEXTERIOR, ' ') = NVL(O.NRLOGRADEXTERIOR, ' ') AND NVL(N.COMPLEMENTOEXTERIOR, ' ') = NVL(O.COMPLEMENTOEXTERIOR, ' ') AND NVL(N.BAIRROEXTERIOR, ' ') = NVL(O.BAIRROEXTERIOR, ' ')
                                           AND NVL(N.NMCIDEXTERIOR, ' ') = NVL(O.NMCIDEXTERIOR, ' ') AND NVL(N.CODPOSTALEXTERIOR, ' ') = NVL(O.CODPOSTALEXTERIOR, ' ') AND NVL(N.DTCHEGADA, SYSDATE) = NVL(O.DTCHEGADA, SYSDATE) AND NVL(N.CLASSTRABESTRANG, 0) = NVL(O.CLASSTRABESTRANG, 0) AND NVL(N.CASADOBR, ' ') = NVL(O.CASADOBR, ' ') AND NVL(N.FILHOSBR, ' ') = NVL(O.FILHOSBR, ' ') AND NVL(N.DEFFISICA, ' ') = NVL(O.DEFFISICA, ' ') AND NVL(N.DEFVISUAL, ' ') = NVL(O.DEFVISUAL, ' ') AND NVL(N.DEFAUDITIVA, ' ') = NVL(O.DEFAUDITIVA, ' ') AND NVL(N.DEFMENTAL, ' ') = NVL(O.DEFMENTAL, ' ') AND NVL(N.DEFINTELECTUAL, ' ') = NVL(O.DEFINTELECTUAL, ' ') AND NVL(N.REABREADAP, ' ') = NVL(O.REABREADAP, ' ') AND NVL(N.OBSERVACAO, ' ') = NVL(O.OBSERVACAO, ' ') AND NVL(N.FONEPRINC, ' ') = NVL(O.FONEPRINC, ' ') AND NVL(N.FONEALTERNAT, ' ') = NVL(O.FONEALTERNAT, ' ') AND NVL(N.EMAILPRINC, ' ') = NVL(O.EMAILPRINC, ' ') AND NVL(N.EMAILALTERNAT, ' ') = NVL(O.EMAILALTERNAT, ' ') AND NVL(N.CADINI, ' ') = NVL(O.CADINI, ' ') AND NVL(N.CODCATEG, 0) = NVL(O.CODCATEG, 0) AND NVL(N.DTINICIO, SYSDATE) = NVL(O.DTINICIO, SYSDATE) AND NVL(N.NATATIVIDADE, 0) = NVL(O.NATATIVIDADE, 0) AND NVL(N.CODCARGO, ' ') = NVL(O.CODCARGO, ' ') AND NVL(N.CODFUNCAO, ' ') = NVL(O.CODFUNCAO, ' ') AND NVL(N.VRSALFX, 0) = NVL(O.VRSALFX, 0) AND NVL(N.UNDSALFIXO, 0) = NVL(O.UNDSALFIXO, 0) AND NVL(N.DSCSALVAR, ' ') = NVL(O.DSCSALVAR, ' ') AND NVL(N.OPCFGTS, 0) = NVL(O.OPCFGTS, 0) AND NVL(N.DTOPCFGTS, SYSDATE) = NVL(O.DTOPCFGTS, SYSDATE) AND NVL(N.CATEGORIGDIRSIND, 0) = NVL(O.CATEGORIGDIRSIND, 0) AND NVL(N.CNPJORIGDIRSIND, ' ') = NVL(O.CNPJORIGDIRSIND, ' ') AND NVL(N.DTADMORIGDIRSIND, SYSDATE) = NVL(O.DTADMORIGDIRSIND, SYSDATE) AND NVL(N.MATRICORIGDIRSIND, ' ') = NVL(O.MATRICORIGDIRSIND, ' ') AND NVL(N.CATEGORIGCED, 0) = NVL(O.CATEGORIGCED, 0) AND NVL(N.CNPJCED, ' ') = NVL(O.CNPJCED, ' ') AND NVL(N.MATRICCED, ' ') = NVL(O.MATRICCED, ' ') AND NVL(N.DTADMCED, SYSDATE) = NVL(O.DTADMCED, SYSDATE) AND NVL(N.TPREGTRABCED, 0) = NVL(O.TPREGTRABCED, 0) AND NVL(N.TPREGPREVCED, 0) = NVL(O.TPREGPREVCED, 0) AND NVL(N.INFONUSCED, 0) = NVL(O.INFONUSCED, 0) AND NVL(N.NATESTAGIO, ' ') = NVL(O.NATESTAGIO, ' ') AND NVL(N.NIVESTAGIO, ' ') = NVL(O.NIVESTAGIO, ' ') AND NVL(N.AREAATUACAO, ' ') = NVL(O.AREAATUACAO, ' ') AND NVL(N.NRAPOL, ' ') = NVL(O.NRAPOL, ' ') AND NVL(N.VLRBOLSA, 0) = NVL(O.VLRBOLSA, 0) AND NVL(N.DTPREVTERM, SYSDATE) = NVL(O.DTPREVTERM, SYSDATE) AND NVL(N.CNPJINSTENSINO, ' ') = NVL(O.CNPJINSTENSINO, ' ') AND NVL(N.NMRAZAOINSTENS, ' ') = NVL(O.NMRAZAOINSTENS, ' ') AND NVL(N.DSCLOGRADINSTENS, ' ') = NVL(O.DSCLOGRADINSTENS, ' ') AND NVL(N.NRLOGRADINSTENS, ' ') = NVL(O.NRLOGRADINSTENS, ' ') AND NVL(N.BAIRROINSTENS, ' ') = NVL(O.BAIRROINSTENS, ' ') AND NVL(N.CEPINSTENS, ' ') = NVL(O.CEPINSTENS, ' ') AND NVL(N.CODMUNICINSTENS, 0) = NVL(O.CODMUNICINSTENS, 0) AND NVL(N.UFINSTENS, ' ') = NVL(O.UFINSTENS, ' ') AND NVL(N.CNPJAGNTINTEG, ' ') = NVL(O.CNPJAGNTINTEG, ' ') AND NVL(N.NMRAZAOAGNTINTEG, ' ') = NVL(O.NMRAZAOAGNTINTEG, ' ') AND NVL(N.DSCLOGRADAGNTINTEG, ' ') = NVL(O.DSCLOGRADAGNTINTEG, ' ')) THEN 'I'
                                         ELSE 'A'
                                    END AS VALIDACAO 
                             FROM TFPS2300 O
                                 LEFT JOIN VGF_EVENTO_S2300 N ON O.CODEMP = N.CODEMP AND O.CHAVE = N.CHAVE
                             WHERE O.CODEMP = P_CODEMPMATRIZ
                               AND O.DTREF = P_DTREF
                               AND O.SEQUENCIA = P_SEQUENCIA
                               AND O.TPAMB = P_TPAMB
                               AND O.CONTROLE = 'I'
                          ) DTALT
                      WHERE DTALT.VALIDACAO <> 'I') LOOP
            IF P_CHAVES IS NOT NULL AND LENGTH(P_CHAVES) + LENGTH(S2300.CHAVE) >= 1700 THEN
                queUpd :=               ' UPDATE TFPS2300';

                IF P_CHAVES_ALT IS NOT NULL THEN
                    queUpd := queUpd || ' SET CONTROLE = CASE WHEN CHAVE IN ('||P_CHAVES_ALT||') THEN ''A'' ELSE ''E'' END ';
                ELSE
                    queUpd := queUpd || ' SET CONTROLE = ''E'' ';
                END IF;

                queUpd := queUpd ||     ' WHERE CODEMP = :CODEMP
                                             AND DTREF = :DTREF
                                             AND SEQUENCIA = :SEQUENCIA
                                             AND TPAMB = :TPAMB
                                             AND CONTROLE = ''I''
                                             AND CHAVE IN ('||P_CHAVES||')';

                EXECUTE IMMEDIATE queUpd USING P_CODEMPMATRIZ, P_DTREF, P_SEQUENCIA, P_TPAMB;

                P_CHAVES := NULL;
                P_CHAVES_ALT := NULL;
             END IF;

            IF P_CHAVES IS NULL THEN
                P_CHAVES := ''''||S2300.CHAVE||'''';

                IF S2300.VALIDACAO = 'A' THEN
                    P_CHAVES_ALT := ''''||S2300.CHAVE||'''';
                END IF;
            ELSE 
                P_CHAVES := P_CHAVES||','''||S2300.CHAVE||'''';

                IF S2300.VALIDACAO = 'A' THEN
                    P_CHAVES_ALT := P_CHAVES_ALT||','''||S2300.CHAVE||'''';
                END IF;
             END IF;
        END LOOP;
    ELSIF P_NOMETAB = 'TFPS2205' THEN
        P_NOMETAB_UTIL := 'TFPS2205';
        FOR S2205 IN (SELECT CHAVE, VALIDACAO
                      FROM ( SELECT O.CHAVE
                                  , CASE WHEN N.CODEMP IS NULL AND O.ACAO <> 'E' THEN 'E'
                                         WHEN (NVL(N.TPINSCEMPREGADOR, 0) = NVL(O.TPINSCEMPREGADOR, 0) AND NVL(N.NRINSCEMPREGADOR, ' ') = NVL(O.NRINSCEMPREGADOR, ' ') AND NVL(N.CPFTRAB, ' ') = NVL(O.CPFTRAB, ' ') AND
                                               NVL(N.NISTRAB, ' ') = NVL(O.NISTRAB, ' ') AND NVL(N.NMTRAB, ' ') = NVL(O.NMTRAB, ' ') AND NVL(N.SEXO, ' ') = NVL(O.SEXO, ' ') AND NVL(N.RACACOR, 0) = NVL(O.RACACOR, 0) AND 
                                               NVL(N.ESTCIV, 0) = NVL(O.ESTCIV, 0) AND NVL(N.NMSOC, ' ') = NVL(O.NMSOC, ' ') AND NVL(N.NRCTPS, ' ') = NVL(O.NRCTPS, ' ') AND NVL(N.SERIECTPS, ' ') = NVL(O.SERIECTPS, ' ') AND 
                                               NVL(N.UFCTPS, ' ') = NVL(O.UFCTPS, ' ') AND NVL(N.NRRIC, ' ') = NVL(O.NRRIC, ' ') AND NVL(N.ORGAOEMISSORRIC, ' ') = NVL(O.ORGAOEMISSORRIC, ' ') AND 
                                               NVL(N.DTEXPEDRIC, SYSDATE) = NVL(O.DTEXPEDRIC, SYSDATE) AND NVL(N.NRRG, ' ') = NVL(O.NRRG, ' ') AND NVL(N.ORGAOEMISSORRG, ' ') = NVL(O.ORGAOEMISSORRG, ' ') AND 
                                               NVL(N.DTEXPEDRG, SYSDATE) = NVL(O.DTEXPEDRG, SYSDATE) AND NVL(N.NRRNE, ' ') = NVL(O.NRRNE, ' ') AND NVL(N.ORGAOEMISSORRNE, ' ') = NVL(O.ORGAOEMISSORRNE, ' ') AND 
                                               NVL(N.DTEXPEDRNE, SYSDATE) = NVL(O.DTEXPEDRNE, SYSDATE) AND NVL(N.NROC, ' ') = NVL(O.NROC, ' ') AND NVL(N.ORGAOEMISSOROC, ' ') = NVL(O.ORGAOEMISSOROC, ' ') AND 
                                               NVL(N.DTEXPEDOC, SYSDATE) = NVL(O.DTEXPEDOC, SYSDATE) AND NVL(N.DTVALIDOC, SYSDATE) = NVL(O.DTVALIDOC, SYSDATE) AND NVL(N.NRREGCNH, ' ') = NVL(O.NRREGCNH, ' ') AND 
                                               NVL(N.DTEXPEDCNH, SYSDATE) = NVL(O.DTEXPEDCNH, SYSDATE) AND NVL(N.UFCNH, ' ') = NVL(O.UFCNH, ' ') AND NVL(N.DTVALIDCNH, SYSDATE) = NVL(O.DTVALIDCNH, SYSDATE) AND 
                                               NVL(N.DTPRIHAB, SYSDATE) = NVL(O.DTPRIHAB, SYSDATE) AND NVL(N.CATEGORIACNH, ' ') = NVL(O.CATEGORIACNH, ' ') AND NVL(N.TPLOGRADBRASIL, ' ') = NVL(O.TPLOGRADBRASIL, ' ') AND 
                                               NVL(N.DSCLOGRADBRASIL, ' ') = NVL(O.DSCLOGRADBRASIL, ' ') AND NVL(N.NRLOGRADBRASIL, ' ') = NVL(O.NRLOGRADBRASIL, ' ') AND 
                                               NVL(N.COMPLEMENTOBRASIL, ' ') = NVL(O.COMPLEMENTOBRASIL, ' ') AND NVL(N.BAIRROBRASIL, ' ') = NVL(O.BAIRROBRASIL, ' ') AND NVL(N.CEPBRASIL, ' ') = NVL(O.CEPBRASIL, ' ') AND 
                                               NVL(N.CODMUNICBRASIL, 0) = NVL(O.CODMUNICBRASIL, 0) AND NVL(N.UFBRASIL, ' ') = NVL(O.UFBRASIL, ' ') AND NVL(N.PAISRESID, ' ') = NVL(O.PAISRESID, ' ') AND 
                                               NVL(N.DSCLOGRADEXTERIOR, ' ') = NVL(O.DSCLOGRADEXTERIOR, ' ') AND NVL(N.NRLOGRADEXTERIOR, ' ') = NVL(O.NRLOGRADEXTERIOR, ' ') AND 
                                               NVL(N.COMPLEMENTOEXTERIOR, ' ') = NVL(O.COMPLEMENTOEXTERIOR, ' ') AND NVL(N.BAIRROEXTERIOR, ' ') = NVL(O.BAIRROEXTERIOR, ' ') AND 
                                               NVL(N.NMCIDEXTERIOR, ' ') = NVL(O.NMCIDEXTERIOR, ' ') AND NVL(N.CODPOSTALEXTERIOR, ' ') = NVL(O.CODPOSTALEXTERIOR, ' ') AND 
                                               NVL(N.DTCHEGADA, SYSDATE) = NVL(O.DTCHEGADA, SYSDATE) AND NVL(N.CLASSTRABESTRANG, 0) = NVL(O.CLASSTRABESTRANG, 0) AND NVL(N.CASADOBR, ' ') = NVL(O.CASADOBR, ' ') AND 
                                               NVL(N.FILHOSBR, ' ') = NVL(O.FILHOSBR, ' ') AND NVL(N.DEFFISICA, ' ') = NVL(O.DEFFISICA, ' ') AND NVL(N.DEFVISUAL, ' ') = NVL(O.DEFVISUAL, ' ') AND 
                                               NVL(N.DEFAUDITIVA, ' ') = NVL(O.DEFAUDITIVA, ' ') AND NVL(N.DEFMENTAL, ' ') = NVL(O.DEFMENTAL, ' ') AND NVL(N.DEFINTELECTUAL, ' ') = NVL(O.DEFINTELECTUAL, ' ') AND 
                                               NVL(N.REABREADAP, ' ') = NVL(O.REABREADAP, ' ') AND NVL(N.INFOCOTA, ' ') = NVL(O.INFOCOTA, ' ') AND NVL(N.OBSERVACAO, ' ') = NVL(O.OBSERVACAO, ' ') AND 
                                               NVL(N.TRABAPOSENT, ' ') = NVL(O.TRABAPOSENT, ' ') AND NVL(N.FONEPRINC, ' ') = NVL(O.FONEPRINC, ' ') AND NVL(N.FONEALTERNAT, ' ') = NVL(O.FONEALTERNAT, ' ') AND 
                                               NVL(N.EMAILPRINC, ' ') = NVL(O.EMAILPRINC, ' ') AND N.CHAVE = O.CHAVE) THEN 'I'
                                         ELSE 'A'
                                    END AS VALIDACAO 
                             FROM TFPS2205 O
                                 LEFT JOIN VGF_EVENTO_S2205 N ON O.CODEMP = N.CODEMP AND O.CHAVE = N.CHAVE
                             WHERE O.CODEMP = P_CODEMPMATRIZ
                               AND O.DTREF = P_DTREF
                               AND O.SEQUENCIA = P_SEQUENCIA
                               AND O.TPAMB = P_TPAMB
                               AND O.CONTROLE = 'I'
                          ) DTALT
                      WHERE DTALT.VALIDACAO <> 'I') LOOP
            IF P_CHAVES IS NOT NULL AND LENGTH(P_CHAVES) + LENGTH(S2205.CHAVE) >= 1700 THEN
                queUpd :=               ' UPDATE TFPS2205';

                IF P_CHAVES_ALT IS NOT NULL THEN
                    queUpd := queUpd || ' SET CONTROLE = CASE WHEN CHAVE IN ('||P_CHAVES_ALT||') THEN ''A'' ELSE ''E'' END ';
                ELSE
                    queUpd := queUpd || ' SET CONTROLE = ''E'' ';
                END IF;

                queUpd := queUpd ||     ' WHERE CODEMP = :CODEMP
                                             AND DTREF = :DTREF
                                             AND SEQUENCIA = :SEQUENCIA
                                             AND TPAMB = :TPAMB
                                             AND CONTROLE = ''I''
                                             AND CHAVE IN ('||P_CHAVES||')';

                EXECUTE IMMEDIATE queUpd USING P_CODEMPMATRIZ, P_DTREF, P_SEQUENCIA, P_TPAMB;

                P_CHAVES := NULL;
                P_CHAVES_ALT := NULL;
             END IF;

            IF P_CHAVES IS NULL THEN
                P_CHAVES := ''''||S2205.CHAVE||'''';

                IF S2205.VALIDACAO = 'A' THEN
                    P_CHAVES_ALT := ''''||S2205.CHAVE||'''';
                END IF;
            ELSE 
                P_CHAVES := P_CHAVES||','''||S2205.CHAVE||'''';

                IF S2205.VALIDACAO = 'A' THEN
                    P_CHAVES_ALT := P_CHAVES_ALT||','''||S2205.CHAVE||'''';
                END IF;
             END IF;
        END LOOP;
    ELSE
        P_CONDITION := SNK_GET_COLUMNS_ESOCIAL(P_NOMETAB, P_COLUNAS_PADRAO);

        IF P_NOMETAB_PAI IS NULL THEN   /*TABELAS PAI*/
            P_NOMETAB_UTIL := P_NOMETAB;
            queSql :=   'SELECT CHAVE, VALIDACAO
                         FROM (  SELECT O.CHAVE
                                      , CASE WHEN N.CODEMP IS NULL AND O.ACAO <> ''E'' THEN ''E''
                                             WHEN (N.CODEMP IS NULL AND O.ACAO = ''E'') OR ('||P_CONDITION||') THEN ''I''
                                             ELSE ''A'' 
                                        END AS VALIDACAO 
                                 FROM '||P_NOMETAB||' O
                                     LEFT JOIN '||P_NOMEVIEW||' N ON O.CODEMP = N.CODEMP AND O.CHAVE = N.CHAVE
                                 WHERE O.CODEMP = :CODEMP
                                   AND O.DTREF = :DTREF
                                   AND O.SEQUENCIA = :SEQUENCIA
                                   AND O.TPAMB = :TPAMB
                                   AND O.CONTROLE = ''I''
                              ) DTALT
                         WHERE DTALT.VALIDACAO = ''A'' ';
        ELSE  /*TABELAS FILHAS*/
            P_NOMETAB_UTIL := P_NOMETAB_PAI;
            P_FILTRO_FILHOS := NVL(SNK_GET_PK_FOR_ESOCIAL(P_NOMETAB, P_COL_PAD_FILHOS), ' ');

            queSql :=   'SELECT CHAVE, VALIDACAO
                         FROM (  SELECT O.CHAVE
                                      , CASE WHEN (N.CODEMP IS NULL AND P.ACAO = ''E'') OR ('||P_CONDITION||') THEN ''I''
                                             ELSE ''A'' 
                                        END AS VALIDACAO 
                                 FROM '||P_NOMETAB||' O
                                     LEFT JOIN '||P_NOMEVIEW||' N ON O.CODEMP = N.CODEMP AND O.CHAVE = N.CHAVE '||P_FILTRO_FILHOS||'
                                     INNER JOIN '||P_NOMETAB_PAI||' P ON P.CODEMP = O.CODEMP AND P.DTREF = O.DTREF AND P.SEQUENCIA = O.SEQUENCIA AND O.CHAVE = P.CHAVE AND P.CONTROLE = ''I''
                                 WHERE O.CODEMP = :CODEMP
                                   AND O.DTREF = :DTREF
                                   AND O.SEQUENCIA = :SEQUENCIA
                                   AND O.TPAMB = :TPAMB
                              ) DTALT
                         WHERE DTALT.VALIDACAO = ''A'' ';
        END IF;
        OPEN CURVAL FOR queSql USING P_CODEMPMATRIZ, P_DTREF, P_SEQUENCIA, P_TPAMB;
        LOOP
            FETCH CURVAL INTO P_CHAVE, P_VALIDACAO;
            EXIT WHEN CURVAL%NOTFOUND;
                
            IF P_CHAVES IS NOT NULL AND LENGTH(P_CHAVES) + LENGTH(P_CHAVE) >= 1700 THEN
                queUpd :=               ' UPDATE '||P_NOMETAB_UTIL;

                IF P_CHAVES_ALT IS NOT NULL THEN
                    queUpd := queUpd || ' SET CONTROLE = CASE WHEN CHAVE IN ('||P_CHAVES_ALT||') THEN ''A'' ELSE ''E'' END ';
                ELSE
                    queUpd := queUpd || ' SET CONTROLE = ''E'' ';
                END IF;

                queUpd := queUpd ||     ' WHERE CODEMP = :CODEMP
                                             AND DTREF = :DTREF
                                             AND SEQUENCIA = :SEQUENCIA
                                             AND TPAMB = :TPAMB
                                             AND CONTROLE = ''I''
                                             AND CHAVE IN ('||P_CHAVES||')';

                EXECUTE IMMEDIATE queUpd USING P_CODEMPMATRIZ, P_DTREF, P_SEQUENCIA, P_TPAMB;

                P_CHAVES := NULL;
                P_CHAVES_ALT := NULL;
             END IF;

            IF P_CHAVES IS NULL THEN
                P_CHAVES := ''''||P_CHAVE||'''';

                IF P_VALIDACAO = 'A' THEN
                    P_CHAVES_ALT := ''''||P_CHAVE||'''';
                END IF;
            ELSE 
                P_CHAVES := P_CHAVES||','''||P_CHAVE||'''';

                IF P_VALIDACAO = 'A' THEN
                    P_CHAVES_ALT := P_CHAVES_ALT||','''||P_CHAVE||'''';
                END IF;
            END IF;
        END LOOP;
    END IF;
    
    IF P_CHAVES IS NOT NULL AND LENGTH(P_CHAVES) > 0 THEN
        queUpd :=               ' UPDATE '||P_NOMETAB_UTIL;

        IF P_CHAVES_ALT IS NOT NULL THEN
            queUpd := queUpd || ' SET CONTROLE = CASE WHEN CHAVE IN ('||P_CHAVES_ALT||') THEN ''A'' ELSE ''E'' END ';
        ELSE
            queUpd := queUpd || ' SET CONTROLE = ''E'' ';
        END IF;

        queUpd := queUpd ||     ' WHERE CODEMP = :CODEMP
                                     AND DTREF = :DTREF
                                     AND SEQUENCIA = :SEQUENCIA
                                     AND TPAMB = :TPAMB
                                     AND CONTROLE = ''I''
                                     AND CHAVE IN ('||P_CHAVES||')';

        EXECUTE IMMEDIATE queUpd USING P_CODEMPMATRIZ, P_DTREF, P_SEQUENCIA, P_TPAMB;

        P_CHAVES := NULL;
        P_CHAVES_ALT := NULL;
    END IF;
        
    FOR EVEF IN (SELECT MON.NOMETAB, MON.NOMEVIEW
             FROM TFPMON MON
             WHERE MON.NOMEEVEVENTOPAI = P_NOMETAB 
               AND ((P_TPAMB = 'P' AND MON.AMBPRODUCAO = 'L') OR
                    (P_TPAMB = 'T' AND MON.AMBTESTE = 'L')) 
             GROUP BY MON.NOMETAB, MON.NOMEVIEW
             ORDER BY MON.NOMETAB
      ) LOOP
        SNK_GET_VALID_ALTER_ESOCIAL (P_EVENTO, P_COLUNAS_PADRAO, P_CODEMPMATRIZ, P_DTREF, P_SEQUENCIA, P_TPAMB, P_NOMETAB_UTIL, EVEF.NOMETAB, EVEF.NOMEVIEW);
    END LOOP;
EXCEPTION WHEN OTHERS THEN
  ROLLBACK;
  P_DTLOG := SYSDATE;
  IF queSql IS NOT NULL THEN
    SELECT COUNT(1) + 1 INTO P_SEQLOG
    FROM LOGESOCIAL
    WHERE DTLOG = P_DTLOG; 

      INSERT INTO LOGESOCIAL(DTLOG, SEQUENCIA, COMANDO)
           SELECT P_DTLOG, P_SEQLOG, SUBSTR(queSql, 1, 4000) from dual;
      IF LENGTH(queSql) > 4000 THEN
        INSERT INTO LOGESOCIAL(DTLOG, SEQUENCIA, COMANDO)
           SELECT P_DTLOG, P_SEQLOG + 1, SUBSTR(queSql, 4001) from dual;
      END IF;
           
        COMMIT;
   END IF;
   
   IF queUpd IS NOT NULL THEN
    SELECT COUNT(1) + 1 INTO P_SEQLOG
    FROM LOGESOCIAL
    WHERE DTLOG = P_DTLOG; 

      INSERT INTO LOGESOCIAL(DTLOG, SEQUENCIA, COMANDO)
           SELECT P_DTLOG, P_SEQLOG, SUBSTR(queUpd, 1, 4000) from dual;
      IF LENGTH(queUpd) > 4000 THEN
              INSERT INTO LOGESOCIAL(DTLOG, SEQUENCIA, COMANDO)
                              SELECT P_DTLOG, P_SEQLOG + 1, SUBSTR(queUpd, 4001) from dual;
      END IF;
           
        COMMIT; 
   END IF;
   
   P_MSG := P_MSG|| SUBSTR(SQLERRM, 1, 3950);
     RAISE_APPLICATION_ERROR(-20101, P_MSG);
END;
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 26/03/2018 10:31:54
Num.Script: 52281-0-0
Nro. O.S. : 1161409
Nome      : Cria - VGF_EVENTO_S2300_DEPENDENTE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - VGF_EVENTO_S2300_DEPENDENTE
NomeObjeto: VGF_EVENTO_S2300_DEPENDENTE
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210005
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2300_DEPENDENTE
AS
   SELECT DEP."TPDEP",
          DEP."NMDEP",
          DEP."DTNASCTO",
          DEP."CPFDEP",
          DEP."DEPIRRF",
          DEP."DEPSF",
          DEP."INCTRAB",
          DEP."CODEMP",
          DEP."CHAVEPAI",
          DEP."CHAVE"
     FROM VGF_EVENTO_S2200_BASE_DEPEND DEP, VGF_EVENTO_S2300 FUN
    WHERE DEP.CODEMP = FUN.CODEMP AND DEP.CHAVEPAI = FUN.CHAVE
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 23/03/2018 17:58:22
Num.Script: 52282-0-0
Nro. O.S. : 1161409
Nome      : Script - TFPS2205
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - TFPS2205
NomeObjeto: TFPS2205
TipoObjeto: TABLE
NomeTabela: TFPS2205
Executar  : SE_EXISTIR
Ocorrencia: 4210005
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
    INSERT INTO TFPS2205(UFCTPS, UFCNH, UFBRASIL, TRABAPOSENT, TPLOGRADBRASIL, 
                         TPINSCEMPREGADOR, STATUS, SEXO, SERIECTPS, SEQUENCIA, 
                         REABREADAP, RACACOR, PAISRESID, ORGAOEMISSORRNE, 
                         ORGAOEMISSORRIC, ORGAOEMISSORRG, ORGAOEMISSOROC, 
                         OBSERVACAO, NRRNE, NRRIC, NRRG, NRREGCNH, 
                         NRORECIBO_ANT, NRORECIBO, NROC, NRLOGRADEXTERIOR, 
                         NRLOGRADBRASIL, NRINSCEMPREGADOR, NRCTPS, NMTRAB, 
                         NMSOC, NMCIDEXTERIOR, NISTRAB, INFOCOTA, FONEPRINC, 
                         FONEALTERNAT, FILHOSBR, ESTCIV, EMAILPRINC, DTVALIDOC, 
                         DTVALIDCNH, DTREF, DTPRIHAB, DTEXPEDRNE, DTEXPEDRIC, 
                         DTEXPEDRG, DTEXPEDOC, DTEXPEDCNH, DTCHEGADA, 
                         DTALTERACAO, DSCLOGRADEXTERIOR, DSCLOGRADBRASIL, 
                         DEFVISUAL, DEFMENTAL, DEFINTELECTUAL, DEFFISICA, 
                         DEFAUDITIVA, CPFTRAB, COMPLEMENTOEXTERIOR, 
                         COMPLEMENTOBRASIL, CODPOSTALEXTERIOR, CODMUNICBRASIL, 
                         CODEMP, CLASSTRABESTRANG, CHAVE, CEPBRASIL, 
                         CATEGORIACNH, CASADOBR, BAIRROEXTERIOR, BAIRROBRASIL, 
                         GRAUINSTR, ACAO, TPAMB)
    SELECT S2200.UFCTPS, S2200.UFCNH, S2200.UFBRASIL, S2200.TRABAPOSENT, S2200.TPLOGRADBRASIL, 
           S2200.TPINSCEMPREGADOR, S2200.STATUS, S2200.SEXO, S2200.SERIECTPS, S2200.SEQUENCIA, 
           S2200.REABREADAP, S2200.RACACOR, S2200.PAISRESID, S2200.ORGAOEMISSORRNE, 
           S2200.ORGAOEMISSORRIC, S2200.ORGAOEMISSORRG, S2200.ORGAOEMISSOROC, 
           S2200.OBSERVACAO, S2200.NRRNE, S2200.NRRIC, S2200.NRRG, S2200.NRREGCNH, 
           S2200.NRORECIBO_ANT, S2200.NRORECIBO, S2200.NROC, S2200.NRLOGRADEXTERIOR, 
           S2200.NRLOGRADBRASIL, S2200.NRINSCEMPREGADOR, S2200.NRCTPS, S2200.NMTRAB, 
           S2200.NMSOC, S2200.NMCIDEXTERIOR, S2200.NISTRAB, S2200.INFOCOTA, S2200.FONEPRINC, 
           S2200.FONEALTERNAT, S2200.FILHOSBR, S2200.ESTCIV, S2200.EMAILPRINC, S2200.DTVALIDOC, 
           S2200.DTVALIDCNH, S2200.DTREF, S2200.DTPRIHAB, S2200.DTEXPEDRNE, S2200.DTEXPEDRIC, 
           S2200.DTEXPEDRG, S2200.DTEXPEDOC, S2200.DTEXPEDCNH, S2200.DTCHEGADA, 
            NULL /*DTALTERACAO*/, S2200.DSCLOGRADEXTERIOR, S2200.DSCLOGRADBRASIL, 
           S2200.DEFVISUAL, S2200.DEFMENTAL, S2200.DEFINTELECTUAL, S2200.DEFFISICA, 
           S2200.DEFAUDITIVA, S2200.CPFTRAB, S2200.COMPLEMENTOEXTERIOR, 
           S2200.COMPLEMENTOBRASIL, S2200.CODPOSTALEXTERIOR, S2200.CODMUNICBRASIL, 
           S2200.CODEMP, S2200.CLASSTRABESTRANG, S2200.CHAVE, S2200.CEPBRASIL, 
           S2200.CATEGORIACNH, S2200.CASADOBR, S2200.BAIRROEXTERIOR, S2200.BAIRROBRASIL, 
           S2200.GRAUINSTR, S2200.ACAO, S2200.TPAMB
    FROM TFPS2200 S2200 
    WHERE S2200.STATUS = 'F'
      AND NOT EXISTS(SELECT 1 FROM TFPS2205 S2205
                      WHERE S2205.CODEMP = S2200.CODEMP
                        AND S2205.DTREF = S2200.DTREF
                        AND S2205.TPAMB = S2200.TPAMB
                        AND S2205.SEQUENCIA = S2200.SEQUENCIA
                        AND S2205.CHAVE = S2200.CHAVE);       
                
    INSERT INTO TFPS2205_DEPENDENTE (CODEMP, DTREF, SEQUENCIA, TPDEP, NMDEP, DTNASCTO, CPFDEP, DEPIRRF, DEPSF, INCTRAB, CHAVEPAI, CHAVE, TPAMB)
    SELECT S2200DEP.CODEMP, S2200DEP.DTREF, S2200DEP.SEQUENCIA, S2200DEP.TPDEP, S2200DEP.NMDEP, S2200DEP.DTNASCTO, S2200DEP.CPFDEP, S2200DEP.DEPIRRF, S2200DEP.DEPSF, S2200DEP.INCTRAB, S2200DEP.CHAVEPAI, S2200DEP.CHAVE, S2200DEP.TPAMB
      FROM TFPS2200_DEPENDENTE S2200DEP, TFPS2200 S2200
    WHERE S2200DEP.CODEMP = S2200.CODEMP
      AND S2200DEP.CHAVEPAI = S2200.CHAVE
      AND S2200DEP.DTREF = S2200.DTREF
      AND S2200DEP.TPAMB = S2200.TPAMB
      AND S2200DEP.SEQUENCIA = S2200.SEQUENCIA
      AND S2200.STATUS = 'F'
      AND NOT EXISTS(SELECT 1 FROM TFPS2205_DEPENDENTE S2205DEP
                      WHERE S2205DEP.CODEMP = S2200DEP.CODEMP
                        AND S2205DEP.DTREF = S2200DEP.DTREF
                        AND S2205DEP.TPAMB = S2200DEP.TPAMB
                        AND S2205DEP.SEQUENCIA = S2200DEP.SEQUENCIA
                        AND S2205DEP.CHAVEPAI = S2200DEP.CHAVEPAI       
                        AND S2205DEP.CHAVE = S2200DEP.CHAVE);       

    -- INSERT PARA POPULAR TABELA S-2206 QUE NÃO FOI GERADA

    INSERT INTO TFPS2206(CODEMP, DTREF, SEQUENCIA, TPINSCEMPREGADOR, 
                         NRINSCEMPREGADOR, CPFTRAB, NISTRAB, MATRICULA, 
                         DTALTERACAO, DTEF, DSCALT, TPREGTRAB, TPREGPREV, 
                         TPREGJOR, NATATIVIDADE, DTBASE, CNPJSINDCATEGPROF, 
                         JUSTPRORR, TPPLANRP, CODCARGO, CODFUNCAO, CODCATEG, 
                         CODCATEG2, CODCARREIRA, DTINGRCARR, VRSALFX, 
                         UNDSALFIXO, DSCSALVAR, TPCONTR, DTTERM, 
                         TPINSCLOCALTRABGERAL, NRINSCLOCALTRABGERAL, 
                         TPLOGRADLOCALTRABDOM, DSCLOGRADLOCALTRABDOM, 
                         NRLOGRADLOCALTRABDOM, COMPLEMENTOLOCALTRABDOM, 
                         BAIRROLOCALTRABDOM, CEPLOCALTRABDOM, CODMUNICLOCALTRABDOM, 
                         UFLOCALTRABDOM, QTDHRSSEM, TPJORNADA, DSCTPJORN, TMPPARC, 
                         CNPJSINDTRAB, NRPROCJUDALVARAJUDICIAL, MTVALTER, STATUS, 
                         NRORECIBO, NRORECIBO_ANT, ACAO, CHAVE, TPAMB)
    SELECT S2200.CODEMP, S2200.DTREF, S2200.SEQUENCIA, S2200.TPINSCEMPREGADOR, 
           S2200.NRINSCEMPREGADOR, S2200.CPFTRAB, S2200.NISTRAB, S2200.MATRICULA, 
            NULL /*S2200.DTALTERACAO*/, NULL/*S2200.DTEF*/, NULL /*S2200.DSCALT*/, S2200.TPREGTRAB, S2200.TPREGPREV, 
           S2200.TPREGJOR, S2200.NATATIVIDADE, S2200.DTBASE, S2200.CNPJSINDCATEGPROF, 
            NULL /*S2200.JUSTPRORR*/, S2200.TPPLANRP, S2200.CODCARGO, S2200.CODFUNCAO, S2200.CODCATEG, 
           S2200.CODCATEG2, S2200.CODCARREIRA, S2200.DTINGRCARR, S2200.VRSALFX, 
           S2200.UNDSALFIXO, S2200.DSCSALVAR, S2200.TPCONTR, S2200.DTTERM, 
           S2200.TPINSCLOCALTRABGERAL, S2200.NRINSCLOCALTRABGERAL, 
           S2200.TPLOGRADLOCALTRABDOM, S2200.DSCLOGRADLOCALTRABDOM, 
           S2200.NRLOGRADLOCALTRABDOM, S2200.COMPLEMENTOLOCALTRABDOM, 
           S2200.BAIRROLOCALTRABDOM, S2200.CEPLOCALTRABDOM, S2200.CODMUNICLOCALTRABDOM, 
           S2200.UFLOCALTRABDOM, S2200.QTDHRSSEM, S2200.TPJORNADA, S2200.DSCTPJORN, S2200.TMPPARC, 
           S2200.CNPJSINDTRAB, S2200.NRPROCJUDALVARAJUDICIAL, NULL /*S2200.MTVALTE*/, S2200.STATUS, 
           S2200.NRORECIBO, S2200.NRORECIBO_ANT, S2200.ACAO, S2200.CHAVE, S2200.TPAMB
    FROM TFPS2200 S2200 
    WHERE S2200.STATUS = 'F'
      AND NOT EXISTS(SELECT 1 FROM TFPS2206 S2206
                      WHERE S2206.CODEMP = S2200.CODEMP
                        AND S2206.DTREF = S2200.DTREF
                        AND S2206.TPAMB = S2200.TPAMB
                        AND S2206.SEQUENCIA = S2200.SEQUENCIA
                        AND S2206.CHAVE = S2200.CHAVE);       
                
        
    INSERT INTO TFPS2206_HORARIO (CODEMP, DTREF, SEQUENCIA, DIA, CODHORCONTRAT, CHAVEPAI, CHAVE, TPAMB)
    SELECT S2200HOR.CODEMP, S2200HOR.DTREF, S2200HOR.SEQUENCIA, S2200HOR.DIA, S2200HOR.CODHORCONTRAT, S2200HOR.CHAVEPAI, S2200HOR.CHAVE, S2200HOR.TPAMB
      FROM TFPS2200_HORARIO S2200HOR, TFPS2200 S2200
    WHERE S2200HOR.CODEMP = S2200.CODEMP
      AND S2200HOR.CHAVEPAI = S2200.CHAVE
      AND S2200HOR.DTREF = S2200.DTREF
      AND S2200HOR.TPAMB = S2200.TPAMB
      AND S2200HOR.SEQUENCIA = S2200.SEQUENCIA
      AND S2200.STATUS = 'F'
      AND NOT EXISTS(SELECT 1 FROM TFPS2206_HORARIO S2206HOR
                      WHERE S2206HOR.CODEMP = S2200HOR.CODEMP
                        AND S2206HOR.DTREF = S2200HOR.DTREF
                        AND S2206HOR.TPAMB = S2200HOR.TPAMB
                        AND S2206HOR.SEQUENCIA = S2200HOR.SEQUENCIA
                        AND S2206HOR.CHAVEPAI = S2200HOR.CHAVEPAI       
                        AND S2206HOR.CHAVE = S2200HOR.CHAVE);       
END;
/
 
 
 
/*
Requer    : 4210004
Conexao   : ORCL
Data      : 23/03/2018 17:58:22
Num.Script: 52283-0-0
Nro. O.S. : 1161409
Nome      : Script - TFPMON
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - TFPMON
NomeObjeto: TFPMON
TipoObjeto: TABLE
NomeTabela: TFPMON
Executar  : SE_EXISTIR
Ocorrencia: 4210005
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
    P_COUNT     NUMBER(5);
BEGIN
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-2205'
        AND NOMETAB = 'TFPS2205'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'R';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO)
        VALUES ('S-2205', 'TFPS2205', 'NRORECIBO', 'R');
    END IF;

    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-2205'
        AND NOMETAB = 'TFPS2205'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'C';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW)
         VALUES ('S-2205', 'TFPS2205', 'NRORECIBO', 'C','VGF_EVENTO_S2205');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-2206'
        AND NOMETAB = 'TFPS2206'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'R';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO)
         VALUES ('S-2206', 'TFPS2206', 'NRORECIBO', 'R');    
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-2206'
        AND NOMETAB = 'TFPS2206'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'C';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW)
         VALUES ('S-2206', 'TFPS2206', 'NRORECIBO', 'C','VGF_EVENTO_S2206');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-2205'
        AND NOMETAB = 'TFPS2205_DEPENDENTE'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'C';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
         VALUES ('S-2205', 'TFPS2205_DEPENDENTE', 'NRORECIBO', 'C','VGF_EVENTO_S2205_DEPENDENTE', 'TFPS2205');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-2206'
        AND NOMETAB = 'TFPS2206_HORARIO'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'C';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
         VALUES ('S-2206', 'TFPS2206_HORARIO', 'NRORECIBO', 'C','VGF_EVENTO_S2206_HORARIO','TFPS2206');                            
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-2300'
        AND NOMETAB = 'TFPS2300'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'R';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, AMBPRODUCAO)
         VALUES ('S-2300', 'TFPS2300', 'NRORECIBO', 'R', 'L');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-2300'
        AND NOMETAB = 'TFPS2300'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'C';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, AMBPRODUCAO)
         VALUES ('S-2300', 'TFPS2300', 'NRORECIBO', 'C','VGF_EVENTO_S2300', 'L');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-2300'
        AND NOMETAB = 'TFPS2300_DEPENDENTE'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'C';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI, AMBPRODUCAO)
         VALUES ('S-2300', 'TFPS2300_DEPENDENTE', 'NRORECIBO', 'C','VGF_EVENTO_S2300_DEPENDENTE', 'TFPS2300', 'L');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-2306'
        AND NOMETAB = 'TFPS2306'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'R';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, AMBPRODUCAO)
         VALUES ('S-2306', 'TFPS2306', 'NRORECIBO', 'R', 'L');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-2306'
        AND NOMETAB = 'TFPS2306'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'C';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, AMBPRODUCAO)
         VALUES ('S-2306', 'TFPS2306', 'NRORECIBO', 'C','VGF_EVENTO_S2306', 'L');
    END IF;
    
    UPDATE TFPMON SET AMBPRODUCAO = 'P', AMBTESTE = 'P' WHERE NOMEEVENTO = 'S-2205';

    UPDATE TFPMON SET AMBPRODUCAO = 'P', AMBTESTE = 'P' WHERE NOMEEVENTO = 'S-2206';

    UPDATE TFPMON SET AMBPRODUCAO = 'P', AMBTESTE = 'P' WHERE NOMEEVENTO = 'S-2306';
END;
/
 
 
 
/*
Conexao   : ORCL
NomeObjeto: UPDATE TSIPAR INTEIRO
TipoObjeto: TABLE
NomeTabela: 
Executar  : SEMPRE
Ocorrencia: 4210006
FullVersao: Sim
*/
 
 
UPDATE TSIPAR SET INTEIRO = 4210005 WHERE CHAVE = 'VERSAOATUALDB'
/
 
 
 
/*
Requer    : 4210005
Conexao   : ORCL
Data      : 29/03/2018 17:27:38
Num.Script: 52186-0-0
Nro. O.S. : 1144395
Nome      : Alterar - TRG_INC_UPD_TGFITE_PRODNFE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - TRG_INC_UPD_TGFITE_PRODNFE
NomeObjeto: TRG_INC_UPD_TGFITE_PRODNFE
TipoObjeto: TRIGGER
NomeTabela: TGFITE
Executar  : SE_EXISTIR
Ocorrencia: 4210006
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_INC_UPD_TGFITE_PRODNFE
   BEFORE INSERT OR UPDATE
   ON TGFITE
   REFERENCING NEW AS NEW OLD AS OLD
   FOR EACH ROW
DECLARE
   P_EMPNFE          TGFEMP.NFE%TYPE;
   P_TOPNFE          TGFTOP.NFE%TYPE;
   P_PRODUTONFE      TGFPRO.PRODUTONFE%TYPE;
   P_REFERENCIA      TGFPRO.REFERENCIA%TYPE;
   P_TIPGTINNFE      TGFPRO.TIPGTINNFE%TYPE;
   P_TIPCONTEST      TGFPRO.TIPCONTEST%TYPE;
   P_CODBARRA        TGFEST.CODBARRA%TYPE;
   P_TIPGTINNFEVOA   TGFVOA.TIPGTINNFE%TYPE;
   P_CODBARRAVOA     TGFVOA.CODBARRA%TYPE;
   P_COUNT           NUMBER( 10 );
   ERRMSG            VARCHAR2( 255 );
   ERROR EXCEPTION;
   P_VALIDAR         BOOLEAN;
   P_ORIGPROD        TGFITE.ORIGPROD%TYPE;
   P_BASENUMERACAO   CHAR( 1 );
   P_USACODVOLPARC   CHAR( 1 );
   P_CODTIPOPER      NUMBER( 10 );
   P_SERIENOTA       VARCHAR2( 3 );
   P_CODVOLPARC      VARCHAR2( 6 );
   P_CODMODDOC       NUMBER( 10 );
   P_CONTAUNTRIB     NUMBER( 5 );
   P_TOPCALCICMS TGFTOP.CALCICMS%TYPE;
BEGIN
   IF STP_GET_ATUALIZANDO THEN
      RETURN;
   END IF;

   /*
   Sincronização de dados
   */
   P_VALIDAR := FPODEVALIDAR( 'TGFITE' );

   IF NOT ( P_VALIDAR ) THEN
      RETURN;
   END IF;
      
   SELECT TPO.NFE, TPO.CALCICMS 
    INTO P_TOPNFE, P_TOPCALCICMS 
    FROM TGFTOP TPO 
    INNER JOIN TGFCAB CAB ON CAB.CODTIPOPER = TPO.CODTIPOPER AND CAB.DHTIPOPER = TPO.DHALTER 
    WHERE CAB.NUNOTA = :NEW.NUNOTA; 
    
   IF P_TOPNFE = 'E' AND P_TOPCALCICMS = 'B' THEN 
    RETURN; --NFE de Emissão Própria importada deve possuir os mesmos valores do XML, portanto, não devemos calcular nenhum campo da TGFITE. 
    END IF;
   
   IF UPDATING AND (:NEW.PENDENTE <> :OLD.PENDENTE OR :NEW.QTDENTREGUE <> :OLD.QTDENTREGUE OR :NEW.QTDCONFERIDA <> :OLD.QTDCONFERIDA) THEN 
      RETURN; 
   END IF; 

    IF UPDATING AND NVL(:OLD.STATUSNOTA, 'P') = 'L' THEN
        SELECT COUNT(1) INTO P_COUNT
        FROM TGFCAB
        WHERE NUNOTA = :OLD.NUNOTA
          AND (NVL(STATUSNFE, ' ') IN ('A','T') OR NVL(STATUSNFSE, ' ') = 'A');

        IF P_COUNT > 0 THEN
            RETURN;
        END IF;
    END IF;

   /*
   OS: 574625
   */

   -- OS 927107
   :NEW.ORIGPROD :=
      SNK_GET_ORIGEM_PRODUTO_ITE( :NEW.CODPROD
                                , :NEW.CODEMP
                                , :NEW.CODLOCALORIG
                                , :NEW.CONTROLE );

   /* QDO SUBSTITUINDO PRODUTO, NÃO VALIDAR ESTOQUE */
   SELECT COUNT( 1 )
   INTO   P_COUNT
   FROM   TSIPAR
   WHERE  CHAVE = 'SBPRODUTO';

   IF ( P_COUNT <> 0 ) THEN
      RETURN;
   END IF;

   SELECT PRODUTONFE, REFERENCIA, TIPGTINNFE, TIPCONTEST
   INTO   P_PRODUTONFE, P_REFERENCIA, P_TIPGTINNFE, P_TIPCONTEST
   FROM   TGFPRO
   WHERE  CODPROD = :NEW.CODPROD;

   IF ( P_PRODUTONFE = 1 ) AND TRIM( P_REFERENCIA ) IS NOT NULL THEN
      :NEW.PRODUTONFE := P_REFERENCIA;
   ELSE
      :NEW.PRODUTONFE := :NEW.CODPROD;
   END IF;


   -- ATUALIZA CAMPO CODVOLPARC, UTILIZANDO A TABELA TGFUNP
   IF VARIAVEIS_PKG.V_USACODVOLPARC = 'S' THEN
      BEGIN
         SELECT CODVOLPARC
         INTO   P_CODVOLPARC
         FROM   TGFUNP P INNER JOIN TGFCAB C
                   ON ( P.CODPARC = C.CODPARC
                   AND C.NUNOTA = :NEW.NUNOTA
                   AND :NEW.CODVOL = P.CODVOL );
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            P_CODVOLPARC := NULL;
      END;

      IF NVL( :NEW.CODVOLPARC, ' ' ) <> NVL( P_CODVOLPARC, ' ' ) THEN
         :NEW.CODVOLPARC := P_CODVOLPARC;
      END IF;
   END IF;

   IF ( P_TIPGTINNFE = 0 ) THEN
      :NEW.GTINNFE := NULL;
   ELSIF ( P_TIPGTINNFE = 1 ) THEN
      :NEW.GTINNFE := :NEW.CODPROD;
   ELSIF ( P_TIPGTINNFE = 3 ) THEN
      BEGIN
         SELECT CODBARRA
         INTO   P_CODBARRA
         FROM   TGFEST
         WHERE  CODEMP = :NEW.CODEMP
         AND    CODPROD = :NEW.CODPROD
         AND    CODLOCAL = :NEW.CODLOCALORIG
         AND    CONTROLE = :NEW.CONTROLE
         AND    CODPARC = 0;

         :NEW.GTINNFE := SUBSTR( P_CODBARRA, 1, 14 );
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            :NEW.GTINNFE := NULL;
      END;
   ELSIF ( P_TIPGTINNFE = 4 ) THEN
      BEGIN
         IF ( P_TIPCONTEST = 'I' OR P_TIPCONTEST = 'S') THEN --CONTROLE LIVRE OU POR LISTA
             SELECT CODBARRA
             INTO   P_CODBARRAVOA
             FROM   TGFVOA
             WHERE  CODPROD = :NEW.CODPROD
             AND    CODVOL = :NEW.CODVOL
             AND    CONTROLE = :NEW.CONTROLE;
         ELSE
             SELECT CODBARRA
             INTO   P_CODBARRAVOA
             FROM   TGFVOA
             WHERE  CODPROD = :NEW.CODPROD
             AND    CODVOL = :NEW.CODVOL;
         END IF;

         IF ( P_CODBARRAVOA IS NULL )
            OR( P_CODBARRAVOA = '' ) THEN
            :NEW.GTINNFE := SUBSTR( P_REFERENCIA, 1, 14 );
         ELSE
            :NEW.GTINNFE := SUBSTR( P_CODBARRAVOA, 1, 14 );
         END IF;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            :NEW.GTINNFE := SUBSTR( P_REFERENCIA, 1, 14 );
      END;
   ELSE
      :NEW.GTINNFE := SUBSTR( P_REFERENCIA, 1, 14 );
   END IF;

   BEGIN
      SELECT MIN(TIPGTINNFE), MIN(CODBARRA), COUNT(UNIDTRIB)
      INTO   P_TIPGTINNFEVOA, P_CODBARRAVOA, P_CONTAUNTRIB
      FROM   TGFVOA
      WHERE  CODPROD = :NEW.CODPROD
      AND    UNIDTRIB = 'S';

      IF P_CONTAUNTRIB > 1 THEN
        RAISE_APPLICATION_ERROR(-20101, 'Há mais que uma unidade alternativa marcada como unidade de tributação para o produto ' || TO_CHAR(:NEW.CODPROD));  
      END IF;

      IF (P_CONTAUNTRIB = 0) THEN
         :NEW.GTINTRIBNFE := :NEW.GTINNFE;
      ELSIF ( P_TIPGTINNFEVOA = 0 ) THEN
         :NEW.GTINTRIBNFE := NULL;
      ELSIF ( P_TIPGTINNFEVOA = 1 ) THEN
         :NEW.GTINTRIBNFE := :NEW.CODPROD;
      ELSIF ( P_TIPGTINNFEVOA = 2 ) THEN
         :NEW.GTINTRIBNFE := SUBSTR( P_REFERENCIA, 1, 14 );
      ELSE
         :NEW.GTINTRIBNFE := SUBSTR( P_CODBARRAVOA, 1, 14 );
      END IF;
   EXCEPTION
      WHEN NO_DATA_FOUND THEN
         :NEW.GTINTRIBNFE := :NEW.GTINNFE;
   END;

   RETURN;
EXCEPTION
   WHEN ERROR THEN
      /*
      Sincronização de dados não faz validações
      */
      IF ( P_VALIDAR ) THEN
         RAISE_APPLICATION_ERROR( -20101, ERRMSG );
      END IF;
END;
/
 
 
 
/*
Requer    : 4210005
Conexao   : ORCL
Data      : 29/03/2018 17:27:38
Num.Script: 52187-0-1000
Nro. O.S. : 1144395
Nome      : INSERE - THOOBJ - 5218600
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_INC_UPD_TGFITE_PRODNFE
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210006
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_INC_UPD_TGFITE_PRODNFE' NOMEOBJ, 52186 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '357a99a94e5ad7df088f13736980ee9a' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_INC_UPD_TGFITE_PRODNFE' and THO.hashcode = '357a99a94e5ad7df088f13736980ee9a')
/
 
 
 
/*
Requer    : 4210005
Conexao   : ORCL
Data      : 29/03/2018 17:27:38
Num.Script: 52364-0-0
Nro. O.S. : 1158100
Nome      : Alterar - SNK_GET_DADOS_EFD 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - SNK_GET_DADOS_EFD 
NomeObjeto: SNK_GET_DADOS_EFD 
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210006
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_GET_DADOS_EFD (P_REGISTRO        VARCHAR2,
                                               P_CODEMP          NUMBER,
                                               P_NUNICO          NUMBER,
                                               P_SEQNOTA         NUMBER,
                                               P_ORIGEM          VARCHAR2,
                                               P_CODCENCUS   OUT NUMBER,
                                               P_CTACTB      OUT VARCHAR2)
AS
   P_GRUPO_NATUREZA   VARCHAR2 (100);
   CURSOR CUR_DADOS IS
    SELECT PLA.CTACTB, LAN.CODCENCUS
    FROM TCBINT BINT
        INNER JOIN TCBLAN LAN
           ON     LAN.CODEMP = BINT.CODEMP
              AND LAN.REFERENCIA = BINT.REFERENCIA
              AND LAN.NUMLOTE = BINT.NUMLOTE
              AND LAN.NUMLANC = BINT.NUMLANC
              AND LAN.TIPLANC = BINT.TIPLANC
              AND LAN.SEQUENCIA = BINT.SEQUENCIA
        INNER JOIN TCBPLA PLA
           ON PLA.CODCTACTB = LAN.CODCTACTB
    WHERE ( (P_ORIGEM = 'F'
           AND BINT.ORIGEM IN ('F', 'B', 'M', 'R', 'J'))
         OR (P_ORIGEM = 'E' AND BINT.ORIGEM IN ('E', 'L')))
        AND BINT.NUNICO = P_NUNICO
        AND (BINT.SEQNOTA = 0 OR BINT.SEQNOTA = P_SEQNOTA)
        AND (BINT.CODEMP = P_CODEMP
             OR (P_ORIGEM = 'E'
                 AND EXISTS
                       (SELECT 1
                          FROM TGFCAB C
                         WHERE C.NUNOTA = P_NUNICO
                               AND C.CODEMP = P_CODEMP))
             OR (P_ORIGEM = 'F'
                 AND EXISTS
                       (SELECT 1
                          FROM TGFFIN F
                         WHERE F.NUFIN = P_NUNICO
                               AND F.CODEMP = P_CODEMP)))
        AND INSTR (P_GRUPO_NATUREZA, ',' || PLA.NATUREZAEFD || ',') > 0
     ORDER BY LAN.VLRLANC DESC, BINT.SEQNOTA DESC, PLA.CTACTB DESC; /* ESSA ORDENAÇÃO É MUITO IMPORTANTE, NÃO PODE SER ALTERADA */
        
BEGIN
   IF P_REGISTRO IN ('A170', 'C170', 'C191', 'C195', 'C396', 'C481', 'C485', 'C501', 'C505', 'F100_NOTA', 'F100_FINANCEIRO')
   THEN
      P_GRUPO_NATUREZA := ',1,2,3,4,6,7,8,9,';
   ELSIF P_REGISTRO IN ('C175', 'C181', 'C185', 'C381', 'C385', 'C491', 'C495', 'C810', 'C870')
   THEN
      P_GRUPO_NATUREZA := ',1,2,';
   ELSIF P_REGISTRO IN ('D100', 'D101', 'D105')
   THEN
      P_GRUPO_NATUREZA := ',3,5,6,7,8,9,11,';
   ELSIF P_REGISTRO IN ('D201', 'D205', 'D601', 'D605')
   THEN
      P_GRUPO_NATUREZA := ',3,';
   ELSIF P_REGISTRO IN ('D501', 'D505')
   THEN
      P_GRUPO_NATUREZA := ',6,7,';
   ELSIF P_REGISTRO IN ('F500', 'F510', 'F525', 'F550', 'F560', '1900')
   THEN
      P_GRUPO_NATUREZA := ',1,2,3,';
   ELSIF P_REGISTRO IN ('F100_MULTA', 'F100_JURO', 'F100_DESCONTO')
   THEN
      P_GRUPO_NATUREZA := ',1,2,6,7,12,13,';
   ELSE
      P_GRUPO_NATUREZA := ' ';
   END IF;

   IF P_GRUPO_NATUREZA <> ' ' THEN
      OPEN CUR_DADOS;
      FETCH CUR_DADOS INTO P_CTACTB, P_CODCENCUS;
      CLOSE CUR_DADOS;
   END IF;
END;
/
 
 
 
/*
Requer    : 4210005
Conexao   : ORCL
Data      : 29/03/2018 17:27:38
Num.Script: 52388-0-0
Nro. O.S. : 1133487
Nome      : Cria - TFPPRE USACOMPSEMANAL
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: USACOMPSEMANAL
TipoObjeto: COLUMN
NomeTabela: TFPPRE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210006
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TFPPRE ADD USACOMPSEMANAL CHAR(1)';
   EXECUTE IMMEDIATE 'UPDATE TFPPRE SET USACOMPSEMANAL = ''N''';
   EXECUTE IMMEDIATE 'ALTER TABLE TFPPRE ADD  CONSTRAINT CKC_USACOMPSEMANAL_TFPPRE CHECK (USACOMPSEMANAL IN (''S'',''N''))';
   EXECUTE IMMEDIATE 'ALTER TABLE TFPPRE MODIFY USACOMPSEMANAL DEFAULT ''N'' NOT NULL';
END;
/
 
 
 
/*
Requer    : 4210005
Conexao   : ORCL
Data      : 29/03/2018 17:27:38
Num.Script: 52390-0-0
Nro. O.S. : 1133487
Nome      : Cria - TFPPRE INICIOSEMANA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: INICIOSEMANA
TipoObjeto: COLUMN
NomeTabela: TFPPRE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210006
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TFPPRE ADD INICIOSEMANA NUMBER(5)';
   EXECUTE IMMEDIATE 'UPDATE TFPPRE SET INICIOSEMANA = 1';
   EXECUTE IMMEDIATE 'ALTER TABLE TFPPRE ADD  CONSTRAINT CKC_INICIOSEMANA_TFPPRE CHECK (INICIOSEMANA IN (1,2,3,4,5,6,7))';
   EXECUTE IMMEDIATE 'ALTER TABLE TFPPRE MODIFY INICIOSEMANA DEFAULT 1 NOT NULL';
END;
/
 
 
 
/*
Requer    : 4210005
Conexao   : ORCL
Data      : 29/03/2018 17:27:38
Num.Script: 52391-0-0
Nro. O.S. : 1133487
Nome      : Criar - TFPRPS
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPRPS
NomeObjeto: TFPRPS
TipoObjeto: TABLE
NomeTabela: TFPRPS
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210006
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPRPS
(
CODEMP NUMBER(5) NOT NULL,
CODFUNC NUMBER(10) NOT NULL,
DTMOV DATE NOT NULL,
FALTAS NUMBER(5),
ATRASOS NUMBER(5),
EXTRA NUMBER(5),
EXCEDENTE NUMBER(5),
DOMFER NUMBER(5),
EXTRANOT NUMBER(5),
EXCEDENTENOT NUMBER(5),
DOMFERNOT NUMBER(5),
COMPENSACAO NUMBER(5),
DTALTER DATE DEFAULT SYSDATE NOT NULL,
CONSTRAINT PK_TFPRPS PRIMARY KEY (CODEMP, CODFUNC, DTMOV),
CONSTRAINT FK_TFPRPS_TFPFUN FOREIGN KEY (CODEMP, CODFUNC) REFERENCES TFPFUN (CODEMP,CODFUNC)
)
/
 
 
 
/*
Requer    : 4210005
Conexao   : ORCL
Data      : 29/03/2018 17:27:38
Num.Script: 52392-0-0
Nro. O.S. : 1133487
Nome      : Criar - TFPRPS CODUSU
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPRPS CODUSU
NomeObjeto: CODUSU
TipoObjeto: COLUMN
NomeTabela: TFPRPS 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210006
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE P_COUNT NUMBER(5);
BEGIN
  SELECT COUNT(1) INTO P_COUNT
  FROM USER_TAB_COLUMNS
  WHERE TABLE_NAME = 'TSIUSU'
    AND COLUMN_NAME = 'CODUSU'
    AND DATA_PRECISION = 5;
  
  IF P_COUNT > 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE TFPRPS ADD CODUSU NUMBER(5)DEFAULT 0 NOT NULL';
  ELSE
    EXECUTE IMMEDIATE 'ALTER TABLE TFPRPS ADD CODUSU NUMBER(10 )DEFAULT 0 NOT NULL';
  END IF;
END;
/
 
 
 
/*
Requer    : 4210005
Conexao   : ORCL
Data      : 29/03/2018 17:27:38
Num.Script: 52393-0-0
Nro. O.S. : 1133487
Nome      : Criar - FK_TFPRPS_TSIUSU 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - FK_TFPRPS_TSIUSU 
NomeObjeto: FK_TFPRPS_TSIUSU 
TipoObjeto: FOREIGN KEY
NomeTabela: TFPRPS
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210006
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPRPS ADD CONSTRAINT FK_TFPRPS_TSIUSU FOREIGN KEY (CODUSU) REFERENCES TSIUSU (CODUSU)
/
 
 
 
/*
Requer    : 4210005
Conexao   : ORCL
Data      : 29/03/2018 17:27:39
Num.Script: 52466-0-0
Nro. O.S. : 1165287
Nome      : Alterar - TRG_UPT_TGFFIN
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - TRG_UPT_TGFFIN
NomeObjeto: TRG_UPT_TGFFIN
TipoObjeto: TRIGGER
NomeTabela: TGFFIN
Executar  : SE_EXISTIR
Ocorrencia: 4210006
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_UPT_TGFFIN
BEFORE UPDATE ON TGFFIN 
FOR EACH ROW
DECLARE
  P_COUNT            INT := 0;
  P_VLRBAIXAZERO     VARCHAR2 (1);
  P_VLRJURO          FLOAT;
  P_VLRMULTA         FLOAT;
  P_VLRISS           FLOAT;
  P_VLRIRF           FLOAT;
  P_VLRINSS          FLOAT;
  P_OUTROSIMPOSTOS   FLOAT;
  P_ORIGEM           VARCHAR2 (1);
  P_VLRMINAP         TGFTOP.VLRMINAP%TYPE;
  ERRMSG             VARCHAR2(400);
  ERROR              EXCEPTION;
  P_VALIDAR          BOOLEAN;
  P_SUBSTHISTFIN     CHAR(1);
  P_ATIVO            CHAR(1);
  P_TPAGNFCE         VARCHAR(2);
  P_APELIDO          VARCHAR2(15);       
  P_GERANDO_REMESSA  BOOLEAN;    
  P_VLRBASE          FLOAT;
BEGIN

  IF STP_GET_ATUALIZANDO THEN
    RETURN;
  END IF;

  P_GERANDO_REMESSA := VARIAVEIS_PKG.V_GERANDO_REMESSA;
  
   /* 
   sincronização de dados
   */
   P_VALIDAR := Fpodevalidar('TGFFIN');

  IF :NEW.ORIGEM <> 'E' AND NVL(:NEW.NUNOTA, 0) <> 0 THEN
    ERRMSG := 'Só é permitido preencher o NUNOTA para financeiros com origem igual a ''E''. ';
    RAISE ERROR;
  END IF;

   IF :NEW.DHBAIXA IS NOT NULL THEN
     :NEW.DHBAIXA := TRUNC(:NEW.DHBAIXA);
   END IF;
   IF  NVL(:NEW.NURENEG, 0) <> NVL (:OLD.NURENEG, 0)  AND :NEW.NURENEG IS NULL AND :NEW.RECDESP = 0 THEN
     RAISE_APPLICATION_ERROR(-20101, 'Título originado a partir de renegociação não pode ter o Nro da Renegociação alterado para NULL. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.');
   END IF;
   
   SELECT COUNT(1) INTO P_COUNT
   FROM TSIPAR
   WHERE (CHAVE = 'SBPARCEIRO' OR CHAVE ='MGE-SUBST');
   
   IF (P_COUNT > 0) OR NOT Tgffin_Pkg.V_VALIDA_FINANCEIRO THEN
      RETURN;
   END IF; 
    
   IF ((:NEW.PROVISAO <> :OLD.PROVISAO)
      OR (:NEW.CODEMP <> :OLD.CODEMP)
      OR (:NEW.NUMNOTA <> :OLD.NUMNOTA)
      OR (:NEW.DTNEG <> :OLD.DTNEG)
      OR (NVL (:NEW.CODTIPOPER, 0) <> NVL (:OLD.CODTIPOPER, 0))
      OR (:NEW.CODPARC <> :OLD.CODPARC)
      OR (:NEW.CODNAT <> :OLD.CODNAT)
      OR (NVL (:NEW.CODCENCUS, 0) <> NVL (:OLD.CODCENCUS, 0))
      OR (NVL (:NEW.HISTORICO, ' ') <> NVL (:OLD.HISTORICO, ' '))
      OR (:NEW.ISSRETIDO <> :OLD.ISSRETIDO)
      OR (:NEW.RECDESP <> :OLD.RECDESP AND NVL(:NEW.NURENEG, 0) = NVL (:OLD.NURENEG, 0))
      OR (NVL (:NEW.VLRINSS, 0) <> NVL (:OLD.VLRINSS, 0))
      OR (NVL (:NEW.VLRIRF, 0) <> NVL (:OLD.VLRIRF, 0))
      OR (NVL (:NEW.VLRISS, 0) <> NVL (:OLD.VLRISS, 0))
      OR (NVL (:NEW.VLRVENDOR, 0) <> NVL (:OLD.VLRVENDOR, 0)) 
      OR (:NEW.VLRDESDOB <> :OLD.VLRDESDOB AND (:NEW.NUFIN <> Tgffin_Pkg.V_NUFINRECOMP))
     OR (NVL(:NEW.DHBAIXA, :NEW.DTNEG - 100) <> NVL(:OLD.DHBAIXA, :NEW.DTNEG - 100))
     OR (:NEW.VLRBAIXA <> :OLD.VLRBAIXA AND :NEW.DHBAIXA IS NOT NULL)) THEN
      BEGIN 
      SELECT NVL(LOGICO, 'N') INTO P_SUBSTHISTFIN FROM TSIPAR WHERE CHAVE = 'SUBSTHISTFIN';
    EXCEPTION WHEN NO_DATA_FOUND THEN 
    P_SUBSTHISTFIN := 'N';
    END;
    
      SELECT MIN (C.ORIGEM)
      INTO P_ORIGEM
      FROM TCBINT C
      WHERE :NEW.NUFIN = C.NUNICO
      AND C.ORIGEM IN ('F', 'B')    
      AND ((:NEW.PROVISAO <> :OLD.PROVISAO)
            OR (:NEW.CODEMP <> :OLD.CODEMP)
            OR (:NEW.NUMNOTA <> :OLD.NUMNOTA)
            OR (:NEW.DTNEG <> :OLD.DTNEG)
            OR (NVL (:NEW.CODTIPOPER, 0) <> NVL (:OLD.CODTIPOPER, 0))
            OR (:NEW.CODPARC <> :OLD.CODPARC)
            OR (:NEW.CODNAT <> :OLD.CODNAT)
            OR ( (NVL(:NEW.CODCENCUS, 0) <> NVL(:OLD.CODCENCUS, 0)) AND
           EXISTS (SELECT 1 
                 FROM TCBLAN L 
             WHERE L.CODEMP = C.CODEMP 
               AND L.NUMLOTE = C.NUMLOTE 
               AND L.NUMLANC = C.NUMLANC 
               AND L.TIPLANC = C.TIPLANC 
               AND L.REFERENCIA = C.REFERENCIA 
               AND L.CODCENCUS <> 0)
         )
            OR (NVL (:NEW.HISTORICO, ' ') <> NVL (:OLD.HISTORICO, ' ') AND P_SUBSTHISTFIN = 'N')
            OR (:NEW.ISSRETIDO <> :OLD.ISSRETIDO)
            OR (:NEW.RECDESP <> :OLD.RECDESP AND NVL (:NEW.NURENEG, 0) = NVL (:OLD.NURENEG, 0))
            OR ((NVL (:NEW.VLRINSS, 0) <> NVL (:OLD.VLRINSS, 0)) AND (C.ORIGEM = 'B' OR :NEW.DHBAIXA IS NULL))
            OR ((NVL (:NEW.VLRIRF, 0) <> NVL (:OLD.VLRIRF, 0)) AND (C.ORIGEM = 'B' OR :NEW.DHBAIXA IS NULL))
            OR ((NVL (:NEW.VLRISS, 0) <> NVL (:OLD.VLRISS, 0)) AND (C.ORIGEM = 'B' OR :NEW.DHBAIXA IS NULL))
            OR ((NVL (:NEW.VLRVENDOR, 0) <> NVL (:OLD.VLRVENDOR, 0)) AND (C.ORIGEM = 'B' OR :NEW.DHBAIXA IS NULL))
            OR ((:NEW.VLRDESDOB <> :OLD.VLRDESDOB) AND (C.ORIGEM = 'B' OR :NEW.DHBAIXA IS NULL)) 
            OR (C.ORIGEM = 'B' AND NVL(:NEW.DHBAIXA,:NEW.DTNEG-100) <> NVL(:OLD.DHBAIXA,:NEW.DTNEG-100)) 
            OR (C.ORIGEM = 'B' AND :NEW.VLRBAIXA <> :OLD.VLRBAIXA AND :NEW.DHBAIXA IS NOT NULL)
        );
            
      IF (P_ORIGEM = 'F') THEN
 
         SELECT COUNT(1) INTO P_COUNT
         FROM TGFFRE
         WHERE TIPACERTO = 'C' 
         AND (NUFIN = :NEW.NUFIN OR NUFINORIG = :NEW.NUFIN);
         IF P_COUNT = 0 THEN
            ERRMSG := 'Financeiro (Provisão) já foi contabilizado, não pode ser alterado. VlrDesdob: ' || :NEW.VLRDESDOB ||' Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
            RAISE ERROR;
         END IF;
      ELSIF (P_ORIGEM = 'B') THEN
         ERRMSG := 'Baixa do financeiro já foi contabilizada, não pode ser alterada. (0). Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
         RAISE ERROR;
      END IF;
   END IF;
-- ********
 /*
    O titulo original com essas caracteristicas não pode mais sofrer alterações
    No financeiro ele não aparece, mais nas centrais pode acontecer no caso do frete.
  */
  IF (NOT P_GERANDO_REMESSA) AND ((:NEW.NURENEG IS NOT NULL) AND (:NEW.NURENEG<>0)) AND (:NEW.RECDESP=0 AND :OLD.RECDESP=0) THEN
    ERRMSG := 'Título foi renegociado, não deve ser alterado. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
    RAISE ERROR;
  END IF;

  IF UPDATING ('NUMCONTRATO') THEN
    SELECT COUNT (1)
      INTO P_COUNT
      FROM TCSCON
     WHERE NUMCONTRATO = :NEW.NUMCONTRATO
       AND ATIVO = 'S';

    IF (P_COUNT = 0) THEN
    ERRMSG := 'Contrato: '|| :NEW.NUMCONTRATO ||' não esta ativo. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
    RAISE ERROR;
    END IF;
  END IF;

  IF UPDATING ('CODPROJ')
     AND :NEW.CODPROJ IS NOT NULL THEN
    SELECT COUNT (1)
      INTO P_COUNT
      FROM TCSPRJ
     WHERE CODPROJ = :NEW.CODPROJ
       AND ATIVO = 'S'
       AND ANALITICO = 'S';

    IF (P_COUNT = 0) THEN
            ERRMSG := 'Projeto '||:NEW.CODPROJ||' não está ativo ou não é analítico. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
            RAISE ERROR;
    END IF;
  END IF;

  IF UPDATING ('CODCTABCOINT')
     AND :NEW.CODCTABCOINT IS NOT NULL THEN
    SELECT COUNT (1)
      INTO P_COUNT
      FROM TSICTA
     WHERE CODCTABCOINT = :NEW.CODCTABCOINT
       AND ATIVA = 'S';

    IF (P_COUNT = 0) THEN
    ERRMSG := 'Conta bancária '||:NEW.CODCTABCOINT||' não está ativa. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
    RAISE ERROR;
    END IF;
  END IF;

  IF UPDATING ('CODEMP') THEN
    SELECT COUNT (1)
      INTO P_COUNT
      FROM TGFEMP
     WHERE CODEMP = :NEW.CODEMP
       AND ATIVO = 'S';

    IF (P_COUNT = 0) THEN
    ERRMSG := 'Empresa '||:NEW.CODEMP||' não está ativa. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
    RAISE ERROR;
    END IF;
  END IF;

  IF UPDATING ('CODEMPBAIXA') AND (:NEW.CODEMP <> :NEW.CODEMPBAIXA) THEN
    SELECT COUNT (1)
      INTO P_COUNT
      FROM TGFEMP
     WHERE CODEMP = :NEW.CODEMPBAIXA
       AND ATIVO = 'S';

    IF (P_COUNT = 0) THEN
    ERRMSG := 'Empresa '||:NEW.CODEMPBAIXA||' da baixa não está ativa. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
    RAISE ERROR;
    END IF;
  END IF;

  IF UPDATING ('CODVEICULO') AND :NEW.CODVEICULO IS NOT NULL AND (:NEW.DHBAIXA IS NULL OR :NEW.CODVEICULO <> :OLD.CODVEICULO) THEN
    Stp_Valida_Veiculo (:NEW.CODVEICULO);
  END IF;

  IF UPDATING ('CODPARC') THEN
    SELECT COUNT (1)
      INTO P_COUNT
      FROM TGFPAR
     WHERE CODPARC = :NEW.CODPARC
       AND ATIVO = 'S';

    IF (P_COUNT = 0) THEN
    ERRMSG := 'Parceiro: '|| :NEW.CODPARC ||' não esta ativo. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
    RAISE ERROR;
    END IF;
  END IF;

  IF (UPDATING ('CODTIPOPER') OR UPDATING ('DHTIPOPER')) THEN
    SELECT COUNT (1)
      INTO P_COUNT
      FROM TGFTOP
     WHERE CODTIPOPER = :NEW.CODTIPOPER
       AND DHALTER = :NEW.DHTIPOPER
       AND ATIVO = 'S';

    IF (P_COUNT = 0) THEN
    ERRMSG := 'Tipo de operação não está ativo. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
    RAISE ERROR;
    END IF;
  END IF;

  IF (UPDATING ('CODTIPOPERBAIXA') OR UPDATING ('DHTIPOPERBAIXA')) THEN
    SELECT COUNT (1)
      INTO P_COUNT
      FROM TGFTOP T
     WHERE CODTIPOPER = :NEW.CODTIPOPERBAIXA
       AND DHALTER = :NEW.DHTIPOPERBAIXA
       AND ATIVO = 'S';

    IF (P_COUNT = 0) THEN
    ERRMSG := 'Tipo de operação de baixa não está ativo. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
    RAISE ERROR;
    END IF;
  END IF;

  IF UPDATING ('CODNAT') THEN
    SELECT COUNT (1)
      INTO P_COUNT
      FROM TGFNAT
     WHERE CODNAT = :NEW.CODNAT
       AND ATIVA = 'S'
       AND ANALITICA = 'S';

    IF (P_COUNT = 0) THEN
            ERRMSG := 'Natureza '||:NEW.CODNAT||' não está ativa ou não é analítico. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
            RAISE ERROR;
    END IF;
  END IF;

  IF UPDATING ('CODCENCUS') THEN
    SELECT COUNT (1)
      INTO P_COUNT
      FROM TSICUS
     WHERE CODCENCUS = :NEW.CODCENCUS
       AND ATIVO = 'S'
       AND ANALITICO = 'S';

    IF (P_COUNT = 0) THEN
            ERRMSG := 'Centro de Resultado '||:NEW.CODCENCUS||' não está ativa ou não é analítico. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
            RAISE ERROR;
    END IF;
  END IF;

  IF UPDATING ('CODVEND') THEN
    SELECT COUNT (1)
      INTO P_COUNT
      FROM TGFVEN
     WHERE CODVEND = :NEW.CODVEND
       AND ATIVO = 'S';

    IF (P_COUNT = 0) THEN
       SELECT APELIDO INTO P_APELIDO FROM TGFVEN WHERE CODVEND = :NEW.CODVEND;
       ERRMSG := Erros_Pkg.ERRO_VENDEDOR_NAOATIVO || 'Vendedor: '|| :NEW.CODVEND || ' - ' || P_APELIDO || ', Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
       RAISE ERROR;
    END IF;
  END IF;

  IF UPDATING ('CODTIPTIT') THEN
     SELECT ATIVO, TPAGNFCE
     INTO P_ATIVO, P_TPAGNFCE
     FROM TGFTIT
     WHERE CODTIPTIT = :NEW.CODTIPTIT;
     IF  (P_ATIVO <> 'S') THEN
       ERRMSG := 'Tipo de Título não está ativo. ';
       RAISE ERROR;
     END IF;
     :NEW.TPAGNFCE := P_TPAGNFCE;
  END IF;  
  
  IF (:NEW.NUBCO IS NOT NULL) AND (:NEW.PROVISAO = 'S') THEN
      ERRMSG := 'Provisão não pode atualizar Movimentação Bancária. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
      RAISE ERROR;
  END IF;

  IF (:NEW.NUBCO IS NOT NULL) AND UPDATING ('NUBCO') THEN
     SELECT COUNT (1)

       INTO P_COUNT
       FROM TGFMBC
      WHERE NUBCO = :NEW.NUBCO;

    IF (P_COUNT = 0) THEN --
      ERRMSG := 'Movimentação  Bancária não encontrada. NUBCO: ' || :NEW.NUBCO ||' Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
      RAISE ERROR;
    END IF;
  END IF;

  IF UPDATING('VLRBAIXA') OR UPDATING('CODTIPOPERBAIXA') OR UPDATING('DHBAIXA') OR UPDATING('PROVISAO') THEN
    IF (:NEW.PROVISAO = 'N') AND (:NEW.CODTIPOPERBAIXA = 0) AND ((:NEW.VLRBAIXA <> 0) OR (:NEW.DHBAIXA IS NOT NULL)) THEN
      ERRMSG := 'A TOP da Baixa deve ser informada. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
      RAISE ERROR;
    END IF;

    IF (:NEW.CODTIPOPERBAIXA <> 0) AND (:NEW.DHBAIXA IS NULL) THEN
      ERRMSG := 'A TOP da Baixa não pode ser informada. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
      RAISE ERROR;
    END IF;

    IF (:NEW.DHBAIXA IS NOT NULL) AND (:NEW.VLRBAIXA = 0) THEN
      SELECT COUNT (1), MIN (LOGICO)
        INTO P_COUNT, P_VLRBAIXAZERO
        FROM TSIPAR
       WHERE CHAVE = 'VLRBAIXAZERO';

      IF (P_COUNT = 0) OR (P_VLRBAIXAZERO <> 'S') THEN
        ERRMSG := 'O Valor da Baixa deve ser informado. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
        RAISE ERROR;
      END IF;
    END IF;
  END IF;

  /* TESTA SE O ANO DIGITADO é VáLIDO */
  IF UPDATING ('DTVENC')
     OR UPDATING ('DHBAIXA') THEN
    SELECT NVL (INTEIRO, 0)
      INTO P_COUNT
      FROM TSIPAR
     WHERE CHAVE = 'LIMSUPANO';

    IF (P_COUNT <> 0)
       AND (((:NEW.DTVENC IS NOT NULL)
             AND (TO_NUMBER (TO_CHAR (:NEW.DTVENC, 'YYYY')) > TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY')) + P_COUNT))
            OR (TO_NUMBER (TO_CHAR (:NEW.DTNEG, 'YYYY')) > (TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY')) + P_COUNT))
            OR (TO_NUMBER (TO_CHAR (:NEW.DHMOV, 'YYYY')) > (TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY')) + P_COUNT))
            OR ((:NEW.DHBAIXA IS NOT NULL)
                AND (TO_NUMBER (TO_CHAR (:NEW.DHBAIXA, 'YYYY')) > (TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY')) + P_COUNT)))) THEN
      ERRMSG := 'Ano superior ao limite permitido, veja o parâmetro de Limite Superior para Ano. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
      RAISE ERROR;
    END IF;

    SELECT NVL (INTEIRO, 0)
      INTO P_COUNT
      FROM TSIPAR
     WHERE CHAVE = 'LIMINFANO';

    IF (P_COUNT <> 0)
       AND (((:NEW.DTVENC IS NOT NULL)
             AND (TO_NUMBER (TO_CHAR (:NEW.DTVENC, 'YYYY')) < (TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY')) - P_COUNT)))
            OR (TO_NUMBER (TO_CHAR (:NEW.DTNEG, 'YYYY')) < (TO_NUMBER (     TO_CHAR (SYSDATE, 'YYYY')) - P_COUNT))
            OR (TO_NUMBER (TO_CHAR (:NEW.DHMOV, 'YYYY')) < (TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY')) - P_COUNT))
            OR ((:NEW.DHBAIXA IS NOT NULL) AND 
      (TO_NUMBER (TO_CHAR (:NEW.DHBAIXA, 'YYYYYYY'))) < (TO_NUMBER (TO_CHAR (SYSDATE, 'YYYYY')) - P_COUNT))) THEN
      ERRMSG := 'Ano inferior ao limite permitido, veja o parâmetro de Limite Inferior para Ano. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
      RAISE ERROR;
    END IF;
  END IF;

  /* O NUNOTA DEVE EXISTIR NA CAB, NãO ¿ FEITO VIA CHAVE ESTRANGEIRA PORQUE A DELEçãO ¿ CASCADE */
  IF :NEW.NUNOTA IS NOT NULL AND (NVL(:OLD.NUNOTA,0) <> NVL(:NEW.NUNOTA,0)) THEN
    SELECT COUNT(1) INTO P_COUNT
    FROM TGFCAB
    WHERE NUNOTA = :NEW.NUNOTA;
    IF (P_COUNT = 0 ) THEN
      ERRMSG := 'Número da Nota não cadastrado na tabela de notas. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
      RAISE ERROR;
    END IF;
  END IF;

 /* NESTE LUGAR NO SQL TEM UMA VALIDAçãO PARA VER SE PARA AQULE PARCEIRO OS TITULOS NãO
    BAIXADOS COM MARCAçãO DE CHEQUE IGUAL A B SOMAM MAIS QUE 0. NO ORACLE ISTO ESTá IMPLEMENTADO NA
    TRIGGER DE AFTER_UPD */
  IF ((:NEW.TIPMARCCHEQ <> :OLD.TIPMARCCHEQ) OR (:OLD.CODPARC <> :NEW.CODPARC)) AND
     (((:OLD.TIPMARCCHEQ = 'B') AND (:OLD.RECDESP = -1)) OR
      ((:NEW.TIPMARCCHEQ = 'B') AND (:NEW.RECDESP = 1))) THEN
    INSERT INTO TGFFIN_UPD (CODPARC, TIPMARCCHEQ, TIPMARCCHEQ_D, RECDESP_D, RECDESP)
              VALUES (:NEW.CODPARC, :OLD.TIPMARCCHEQ, :NEW.TIPMARCCHEQ, :OLD.RECDESP, :NEW.RECDESP);
  END IF;

  IF (:NEW.RECDESP <> :OLD.RECDESP) AND (:NEW.DHBAIXA IS NOT NULL) THEN
    ERRMSG := 'Esta nota já foi baixada não pode ser alterada de receita para despesa ou vice-versa. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
    RAISE ERROR;
  END IF;

  IF (:NEW.TIPJURO = '1') THEN
    P_VLRJURO := NVL (:NEW.VLRJURO, 0);
  ELSE
    P_VLRJURO := 0;
  END IF;

  IF (:NEW.TIPMULTA = '1') THEN
    P_VLRMULTA := NVL (:NEW.VLRMULTA, 0);
  ELSE
    P_VLRMULTA := 0;
  END IF;

  IF (:NEW.ISSRETIDO = 'S') THEN
    P_VLRISS := NVL (:NEW.VLRISS, 0);
  ELSE
    P_VLRISS := 0;
  END IF;

  IF (:NEW.IRFRETIDO = 'S') THEN
    P_VLRIRF := NVL (:NEW.VLRIRF, 0);
  ELSE
    P_VLRIRF := 0;
  END IF;

  IF (:NEW.INSSRETIDO = 'S') THEN
    P_VLRINSS := NVL (:NEW.VLRINSS, 0);
  ELSE
    P_VLRINSS := 0;
  END IF;

  BEGIN
    SELECT NVL (SUM (VALOR * TIPIMP), 0)
      INTO P_OUTROSIMPOSTOS
      FROM TGFIMF
     WHERE NUFIN = :NEW.NUFIN;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      P_OUTROSIMPOSTOS := 0;
  END;

    IF (UPDATING ('DHBAIXA')
      OR UPDATING ('VLRBAIXA'))
      AND (:NEW.DHBAIXA IS NOT NULL)
      AND (:NEW.PROVISAO = 'N') THEN
    
    P_VLRBASE := 
    :NEW.VLRDESDOB
    + :NEW.VLRVENDOR
    + :NEW.DESPCART
    + NVL (:NEW.VLRVARCAMBIAL, 0)
    - :NEW.VLRDESC
    - P_VLRIRF
    - P_VLRINSS
    - :NEW.CARTAODESC
    + P_VLRJURO
    + P_VLRMULTA
    - P_VLRISS
    + P_OUTROSIMPOSTOS
    + NVL(:NEW.VLRMULTANEGOC,0) 
    + NVL(:NEW.VLRJURONEGOC,0) 
    - NVL(:NEW.VLRMULTALIB,0) 
    - NVL(:NEW.VLRJUROLIB,0);
    IF P_VLRBASE <> :NEW.VLRBAIXA THEN
    ERRMSG :=
    'Valor da baixa '||TO_CHAR(:NEW.VLRBAIXA, 'FM999,999,999,999,999,990.00')||
    ' diferente do valor calculado '||TO_CHAR(P_VLRBASE,'FM999,999,999,999,999,990.00')||
    ' (VLRDESDOB'||
    CASE WHEN :NEW.VLRVENDOR <> 0 THEN ' + VLRVENDOR' END ||
    CASE WHEN P_VLRJURO <> 0 THEN ' + VLRJURO' END ||
    CASE WHEN P_VLRMULTA <> 0 THEN ' + VLRMULTA' END ||
    CASE WHEN :NEW.DESPCART <> 0 THEN ' + DESPCART' END ||
    CASE WHEN NVL (:NEW.VLRVARCAMBIAL, 0) <> 0 THEN ' + VLRVARCAMBIAL' END ||
    CASE WHEN :NEW.VLRDESC <> 0 THEN ' - VLRDESC' END ||
    CASE WHEN P_VLRISS <> 0 THEN ' - VLRISS' END ||
    CASE WHEN P_VLRIRF <> 0 THEN ' - VLRIRRF' END ||
    CASE WHEN P_VLRINSS <> 0 THEN ' - VLRINSS' END ||
    CASE WHEN :NEW.CARTAODESC <> 0 THEN ' - CARTAODESC' END ||
    CASE WHEN NVL(:NEW.VLRMULTANEGOC,0) <> 0 THEN ' + VLRMULTANEGOC' END ||
    CASE WHEN NVL(:NEW.VLRJURONEGOC,0) <> 0 THEN ' + VLRJURONEGOC' END ||
    CASE WHEN NVL(:NEW.VLRMULTALIB,0) <> 0 THEN ' - VLRMULTALIB' END ||
    CASE WHEN NVL(:NEW.VLRJUROLIB,0) <> 0 THEN ' - VLRJUROLIB' END ||
    CASE WHEN P_OUTROSIMPOSTOS <> 0 THEN ' + OUTROS IMPOSTOS' END ||
    '). Financeiro de Nro Único: ' || :NEW.NUFIN;
    RAISE ERROR;
    END IF;
    
    END IF;

  IF :NEW.DHBAIXA IS NULL AND :OLD.DHBAIXA IS NOT NULL THEN
     DELETE FROM TGFREC WHERE NUFIN = :NEW.NUFIN;
  END IF;

  /*NAO PERMITIR BAIXA DE DESPESA DE VALOR SUPERIOR AO DEFINIDO NO PARAMETRO SE NAO EXISTIR LIBERACAO DO EVENTO 24 NA TGFLIB.*/
  IF (:NEW.RECDESP = -1 AND :NEW.PROVISAO = 'N' AND :NEW.DHBAIXA IS NOT NULL) THEN
    SELECT COUNT (1)
      INTO P_COUNT
      FROM TGFTOP
     WHERE CODTIPOPER = :NEW.CODTIPOPERBAIXA
       AND DHALTER = :NEW.DHTIPOPERBAIXA
       AND VLRMINAP IS NOT NULL
       AND VLRMINAP > 0
       AND VLRMINAP < :NEW.VLRBAIXA;

    IF P_COUNT <> 0 THEN
      SELECT COUNT (1)
        INTO P_COUNT
        FROM TSILIB
       WHERE TABELA = 'TGFFIN'
         AND VLRLIBERADO >= :NEW.VLRBAIXA
         AND NUCHAVE = :NEW.NUFIN
         AND EVENTO = 24;

      IF P_COUNT = 0 THEN
        ERRMSG := 'Não pode ser baixada por não existir uma liberação ou o valor do desdobramento é superior ao definido na TOP. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
        RAISE ERROR;
      END IF;
    END IF;
  END IF;


 /*TRATAMENTO PARA ALTERAçãO DE TíTULOS COM SOLICITAçãO DE LIBERAçãO*/
  IF UPDATING ('VLRDESDOB')  AND :NEW.RECDESP = -1 AND :NEW.PROVISAO = 'N' THEN
    SELECT COUNT (1)
      INTO P_COUNT
      FROM TSILIB
     WHERE NUCHAVE = :NEW.NUFIN
       AND TABELA = 'TGFFIN'
       AND EVENTO = 24;

    IF P_COUNT <> 0 THEN
      UPDATE TSILIB
         SET VLRANTERIOR = VLRATUAL,
             VLRATUAL = :NEW.VLRDESDOB
       WHERE NUCHAVE = :NEW.NUFIN
         AND TABELA = 'TGFFIN'
         AND EVENTO = 24;
    END IF;
  END IF;  

  
  /*VERIFICA SE NãO EXISTE LIBERAçãO PARA TITULOS DIFERENTES DE DESPESA LANçADO NO EVENTO 24.*/
  IF (UPDATING ('RECDESP') OR UPDATING ('PROVISAO')) AND 
     (:NEW.RECDESP = 1 OR :NEW.PROVISAO = 'S') THEN
    DELETE FROM TSILIB
          WHERE TABELA = 'TGFFIN'
            AND NUCHAVE = :NEW.NUFIN
            AND EVENTO = 24;
  END IF;
  
  IF :NEW.DHBAIXA IS NOT NULL AND :NEW.NUCCR IS NOT NULL THEN
    ERRMSG := 'Título de autorização de venda de cartão de crédito não pode ser baixado! Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
    RAISE ERROR;
  END IF;

  RETURN;
   
EXCEPTION
  WHEN ERROR THEN
    /* 
    Sincronização de dados não faz validações
    */
    IF (P_VALIDAR) THEN 
      RAISE_APPLICATION_ERROR(-20101, ERRMSG);
    END IF; 

END;
/
 
 
 
/*
Requer    : 4210005
Conexao   : ORCL
Data      : 05/04/2018 15:36:07
Num.Script: 52598-0-0
Nro. O.S. : 1167819
Nome      : Alterar - VGF_EVENTO_S2230_ATESTADO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VGF_EVENTO_S2230_ATESTADO
NomeObjeto: VGF_EVENTO_S2230_ATESTADO
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210006
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2230_ATESTADO
AS
SELECT
 VEMP.CODEMPMATRIZ AS CODEMP
,CAST(OCO.NUOCOR AS VARCHAR2(100)) AS NUOCOR
,CAST(ATT.NUATT AS VARCHAR2(100)) AS CHAVE
,CAST(ATT.CODCID AS VARCHAR2(4)) AS codCID
,CAST(ATT.DIASAFASTAMENTO  AS NUMBER(5))AS qtdDiasAfast
,ATT.EMITENTE AS nmEmit
,ATT.IDEOC AS ideOC
,ATT.NROC AS nrOc
,ATT.UFOC AS ufOC
FROM TFPFUN FUN
, TFPOCO OCO
, TFPHIS HIS
, VGF_EVENTO_EMPREGADOR VEMP
, TFPATT ATT
WHERE OCO.CODEMP = FUN.CODEMP
AND OCO.CODFUNC = FUN.CODFUNC
AND VEMP.CODEMP = FUN.CODEMP
AND OCO.CODHISTOCOR = HIS.CODHISTOCOR
AND VEMP.DTCARGAINICIAL IS NOT NULL
AND FUN.SITESOCIAL IS NOT NULL
AND OCO.NUOCOR = ATT.NUOCOR
AND OCO.DTINICOCOR >= VEMP.DTCARGAINICIAL
AND (OCO.DTINICOCOR >= SYSDATE - 38 OR OCO.DTFINALOCOR >= SYSDATE - 38 OR OCO.DTFINALOCOR IS NULL OR 
     EXISTS (SELECT 1 FROM TFPATT ATT WHERE ATT.NUOCOR = OCO.NUOCOR AND ATT.DHALTER >= SYSDATE - 38) OR
     EXISTS (SELECT 1 FROM TFPAFT AFT WHERE AFT.NUOCOR = OCO.NUOCOR AND AFT.DHALTER >= SYSDATE - 38))
AND EXISTS (SELECT 1 
            FROM VGF_EVENTO_S2230 P 
            WHERE P.CODEMP = VEMP.CODEMPMATRIZ 
              AND P.CHAVE = CAST(OCO.NUOCOR AS VARCHAR2(100)))
UNION
SELECT
 VEMP.CODEMPMATRIZ AS CODEMP
,CAST(OCO.NUOCOR AS VARCHAR2(100)) AS NUOCOR
,CAST(1 AS VARCHAR2(100)) AS CHAVE
,CAST(NULL AS VARCHAR2(4)) AS codCID
,CAST(OCO.DTFINALOCOR+1 - OCO.DTINICOCOR AS NUMBER(5)) AS qtdDiasAfast
,NULL AS nmEmit
,NULL AS ideOC
,NULL AS nrOc
,NULL AS ufOC
FROM TFPFUN FUN
, TFPOCO OCO
, TFPHIS HIS
, VGF_EVENTO_EMPREGADOR VEMP
WHERE OCO.CODEMP = FUN.CODEMP
AND OCO.CODFUNC = FUN.CODFUNC
AND VEMP.CODEMP = FUN.CODEMP
AND OCO.CODHISTOCOR = HIS.CODHISTOCOR
AND HIS.CODMOTAFAST = '03'
AND OCO.DTFINALOCOR IS NOT NULL
AND VEMP.DTCARGAINICIAL IS NOT NULL
AND FUN.SITESOCIAL IS NOT NULL
AND OCO.DTINICOCOR >= VEMP.DTCARGAINICIAL
AND NOT EXISTS (SELECT 1 FROM TFPATT ATT WHERE ATT.NUOCOR = OCO.NUOCOR) 
AND (OCO.DTINICOCOR >= SYSDATE - 38 OR OCO.DTFINALOCOR >= SYSDATE - 38 OR OCO.DTFINALOCOR IS NULL OR 
     EXISTS (SELECT 1 FROM TFPAFT AFT WHERE AFT.NUOCOR = OCO.NUOCOR AND AFT.DHALTER >= SYSDATE - 38))
AND EXISTS (SELECT 1 
            FROM VGF_EVENTO_S2230 P 
            WHERE P.CODEMP = VEMP.CODEMPMATRIZ 
              AND P.CHAVE = CAST(OCO.NUOCOR AS VARCHAR2(100)))
/
 
 
 
/*
Requer    : 4210005
Conexao   : ORCL
Data      : 05/04/2018 15:36:26
Num.Script: 52601-0-0
Nro. O.S. : 1167819
Nome      : Alterar - VGF_EVENTO_S1070
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VGF_EVENTO_S1070
NomeObjeto: VGF_EVENTO_S1070
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210006
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1070

AS
   SELECT VEMP.TPINSCEMPREGADOR,
          VEMP.NRINSCEMPREGADOR,
          (CASE TIPOPROCESSO WHEN 'A' THEN 1 ELSE 2 END) AS "TPPROC",
          PSS.NUMPROCESSO AS "NRPROC",
          PSS.INDAUTORIA AS "INDAUTORIA",
          PSS.INDMATPROC AS "INDMATPROC",
          (SELECT UFS.UF
             FROM TSIUFS UFS, TSICID CID
            WHERE UFS.CODUF = CID.UF AND CID.CODCID = CODCIDSECAOJUD)
             AS "UFVARA",
          (SELECT CODMUNFIS
             FROM TSICID
            WHERE CODCID = CODCIDSECAOJUD)
             AS "CODMUNIC",
          CAST (PSS.IDVARA AS VARCHAR2(20)) AS "IDVARA",
          PSE.CODEMP AS "CODEMP",
          CAST (PSS.NUPROCESSO AS VARCHAR2(20)) AS "CHAVE"
     FROM TFPPSS PSS, VGF_EVENTO_EMPREGADOR VEMP, TFPPSE PSE
    WHERE PSE.NUPROCESSO = PSS.NUPROCESSO
      AND PSE.CODEMP = VEMP.CODEMP
/
 
 
 
/*
Requer    : 4210005
Conexao   : ORCL
Data      : 08/05/2018 17:06:07
Num.Script: 55118-0-0
Nro. O.S. : 1167819
Nome      : Alterar - VGF_EVENTO_S1070_INFOSUSP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VGF_EVENTO_S1070_INFOSUSP
NomeObjeto: VGF_EVENTO_S1070_INFOSUSP
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210006
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1070_INFOSUSP
AS
   SELECT CAST (SUSP.CODSUSP AS INTEGER) AS "CODSUSP",
          SUSP.INDSUSP AS "INDSUSP",
          TRUNC (SUSP.DTDESCISAO) AS "DTDECISAO",
          SUSP.INDDEPOSITO AS "INDDEPOSITO",
          CAST (SUSP.NUPROCESSO AS VARCHAR2(20)) AS "NUPROCESSO",
          CAST (SUSP.NUPROCESSO AS VARCHAR2(20)) AS "CHAVE",
          PSE.CODEMP AS "CODEMP",
          '0' AS "COLOTACAO"
     FROM TFPSUSP SUSP, TFPPSE PSE, VGF_EVENTO_S1070 S1070
    WHERE SUSP.NUPROCESSO = PSE.NUPROCESSO
      AND CAST(PSE.NUPROCESSO AS VARCHAR2(20)) = S1070.CHAVE
/
 
 
 
/*
Conexao   : ORCL
NomeObjeto: UPDATE TSIPAR INTEIRO
TipoObjeto: TABLE
NomeTabela: 
Executar  : SEMPRE
Ocorrencia: 4210007
FullVersao: Sim
*/
 
 
UPDATE TSIPAR SET INTEIRO = 4210006 WHERE CHAVE = 'VERSAOATUALDB'
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 06/04/2018 17:34:42
Num.Script: 52406-0-0
Nro. O.S. : 1155096
Nome      : Cria - TGFTOP GERADEMANDAMPS
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: GERADEMANDAMPS
TipoObjeto: COLUMN
NomeTabela: TGFTOP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TGFTOP ADD GERADEMANDAMPS VARCHAR2(1)';
   EXECUTE IMMEDIATE 'UPDATE TGFTOP SET GERADEMANDAMPS = ''N''';
   EXECUTE IMMEDIATE 'ALTER TABLE TGFTOP ADD  CONSTRAINT CKC_GERADEMANDAMPS_TGFTOP CHECK (GERADEMANDAMPS IN (''S'',''N''))';
   EXECUTE IMMEDIATE 'ALTER TABLE TGFTOP MODIFY GERADEMANDAMPS DEFAULT ''N'' NOT NULL';
END;
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 06/04/2018 17:34:42
Num.Script: 52407-0-0
Nro. O.S. : 1155096
Nome      : Script - TGFTOP GERADEMANDAMPS
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - TGFTOP GERADEMANDAMPS
NomeObjeto: GERADEMANDAMPS
TipoObjeto: COLUMN
NomeTabela: TGFTOP 
Executar  : SE_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
    P_COUNT         INT;
BEGIN
    SELECT COUNT(*)
    INTO P_COUNT
    FROM TSISCR
    WHERE NME_SCRIPT = '1155096';
    
    IF P_COUNT = 0 THEN
    
        BEGIN
        
            EXECUTE IMMEDIATE 'INSERT INTO TSISCR VALUES(''1155096'',''1155096'')';
            EXECUTE IMMEDIATE 'UPDATE TGFTOP SET GERADEMANDAMPS = ''S'' WHERE GERAPLANPROD = ''S''';
            
        EXCEPTION        
            WHEN OTHERS THEN
                RAISE_APPLICATION_ERROR(-20010,'Problema na alteração do campo GERADEMANDAMPS');                
        END;
    
    END IF;
 
END;
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 06/04/2018 17:34:42
Num.Script: 52537-0-0
Nro. O.S. : 1165285
Nome      : Alterar - TSISNL TABELA 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - TSISNL TABELA 
NomeObjeto: TABELA 
TipoObjeto: COLUMN
NomeTabela: TSISNL
Executar  : SE_EXISTIR
Ocorrencia: 4210007
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TSISNL MODIFY TABELA VARCHAR2(50)
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 06/04/2018 17:34:42
Num.Script: 52538-0-0
Nro. O.S. : 1165285
Nome      : Criar - TGFGRU FORCAEXPECONECT 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TGFGRU FORCAEXPECONECT 
NomeObjeto: FORCAEXPECONECT
TipoObjeto: COLUMN
NomeTabela: TGFGRU 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFGRU ADD FORCAEXPECONECT CHAR(1)
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 06/04/2018 17:34:42
Num.Script: 52539-0-0
Nro. O.S. : 1165285
Nome      : Criar - TGFPRO FORCAEXPECONECT 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TGFPRO FORCAEXPECONECT 
NomeObjeto: FORCAEXPECONECT
TipoObjeto: COLUMN
NomeTabela: TGFPRO
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFPRO ADD FORCAEXPECONECT CHAR(1)
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 06/04/2018 17:34:42
Num.Script: 52540-0-0
Nro. O.S. : 1165285
Nome      : Criar - TGFICP DESCONTOECONECT 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TGFICP DESCONTOECONECT
NomeObjeto: DESCONTOECONECT
TipoObjeto: COLUMN
NomeTabela: TGFICP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFICP ADD DESCONTOECONECT FLOAT
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 06/04/2018 17:34:42
Num.Script: 52569-0-0
Nro. O.S. : 1148247
Nome      : Cria - TGFCAB ENQART227
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: ENQART227
TipoObjeto: COLUMN
NomeTabela: TGFCAB
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210007
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFCAB ADD ENQART227 VARCHAR2(1)
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 06/04/2018 17:34:42
Num.Script: 52570-0-0
Nro. O.S. : 1148247
Nome      : Criar - TGFAJI 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TGFAJI 
NomeObjeto: TGFAJI 
TipoObjeto: TABLE
NomeTabela: TGFAJI 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210007
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TGFAJI (
  CODEMP        NUMBER(5),
  CODPARC       NUMBER(10),
  NUNOTA        NUMBER(10),
  SERIENOTA     VARCHAR2(5 BYTE),
  NUMNOTA       NUMBER(10),
  CHAVENFE      VARCHAR2(44 BYTE),
  DTDOC         DATE                            NOT NULL,
  CODMODDOC     NUMBER(10)                      DEFAULT 1                     NOT NULL,
  DIGITADO      VARCHAR2(1 BYTE)                DEFAULT 'S',
  VLRAJUSTE     FLOAT                      DEFAULT 0                     NOT NULL,
  OBSERVACAO    VARCHAR2(200 BYTE),
  TIPIMPOSTO    VARCHAR2(1 BYTE)                DEFAULT 'P'                   NOT NULL,
  CODAJUSTE     NUMBER(10)                      DEFAULT 99                    NOT NULL,
  ORIGPROCESSO  NUMBER(10)                      DEFAULT 3                     NOT NULL,
  CODUSU        NUMBER(5)                       NOT NULL,
  DTALTER       DATE                            NOT NULL,
  CONSTRAINT PK_TGFAJI PRIMARY KEY (NUNOTA)
  )
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 06/04/2018 17:34:42
Num.Script: 52571-0-0
Nro. O.S. : 1148247
Nome      : Criar - TGFIJI 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TGFIJI 
NomeObjeto: TGFIJI 
TipoObjeto: TABLE
NomeTabela: TGFIJI 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210007
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TGFIJI (
  NUNOTA     NUMBER(10),
  CODPROD    NUMBER(10),
  SEQUENCIA  NUMBER(5),
  CODUSU     NUMBER(5)                          NOT NULL,
  VLRAJUSTE  FLOAT                         DEFAULT 0                     NOT NULL,
  DTALTER    DATE                               NOT NULL,
  CONSTRAINT PK_TGFIJI PRIMARY KEY (NUNOTA, SEQUENCIA)
  )
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 06/04/2018 17:34:42
Num.Script: 52572-0-0
Nro. O.S. : 1148247
Nome      : Criar - TRG_DLT_TGFAJI
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TRG_DLT_TGFAJI
NomeObjeto: TRG_DLT_TGFAJI
TipoObjeto: TRIGGER
NomeTabela: TGFAJI
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210007
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_DLT_TGFAJI
BEFORE DELETE ON TGFAJI FOR EACH ROW
DECLARE P_COUNT NUMBER(10);
BEGIN
    SELECT COUNT(1) INTO P_COUNT
    FROM TGFIJI
    WHERE NUNOTA = :OLD.NUNOTA;
    IF P_COUNT > 0 THEN
        DELETE FROM TGFIJI    WHERE NUNOTA = :OLD.NUNOTA;
    END IF;
END;
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 06/04/2018 17:34:42
Num.Script: 52573-0-1000
Nro. O.S. : 1148247
Nome      : INSERE - THOOBJ - 5257200
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_DLT_TGFAJI
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210007
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_DLT_TGFAJI' NOMEOBJ, 52572 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, 'f059d42398b67537e2288211599965d6' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_DLT_TGFAJI' and THO.hashcode = 'f059d42398b67537e2288211599965d6')
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 06/04/2018 17:34:42
Num.Script: 52574-0-0
Nro. O.S. : 1148247
Nome      : Dropar - TGFCAB ENQART227 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - TGFCAB ENQART227 
NomeObjeto: ENQART227 
TipoObjeto: COLUMN
NomeTabela: TGFCAB
Executar  : SE_EXISTIR
Ocorrencia: 4210007
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFCAB DROP COLUMN ENQART227 
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 06/04/2018 17:34:42
Num.Script: 52575-0-0
Nro. O.S. : 1148247
Nome      : Cria - TGFPAR ENQART227
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: ENQART227
TipoObjeto: COLUMN
NomeTabela: TGFPAR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210007
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFPAR ADD ENQART227 VARCHAR2(1)
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 06/04/2018 17:34:42
Num.Script: 52582-0-0
Nro. O.S. : 1142442
Nome      : Ajusta - TFPFOR CODFORM 415
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Ajusta - TFPFOR CODFORM 415
NomeObjeto: CODFORM
TipoObjeto: COLUMN
NomeTabela: TFPFOR
Executar  : SE_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
  P_CODFORMULA      TFPFOR.CODFORM%TYPE;
  P_DESCRFORMULA    TFPFOR.DESCRFORM%TYPE;
  P_DESCRFORMNOVO   TFPFOR.DESCRFORM%TYPE;
  P_FORMULA         VARCHAR2(4000);
  P_FORMULANOVO     VARCHAR2(4000);
  P_CODFORMIND      VARCHAR2(4000);
  P_CODFORMINDNOVO  VARCHAR2(4000);
  P_SANKHYA         TFPFOR.SANKHYA%TYPE;
BEGIN
  
  P_CODFORMULA := 415;
  
  BEGIN
    SELECT FORMULA, DESCRFORM, CODFORMIND, SANKHYA
    INTO P_FORMULA, P_DESCRFORMULA, P_CODFORMIND, P_SANKHYA
    FROM TFPFOR
    WHERE CODFORM = P_CODFORMULA;
  EXCEPTION WHEN NO_DATA_FOUND THEN
    P_FORMULA := 'A';
    P_CODFORMIND := NULL;
    P_DESCRFORMULA := NULL;
    P_SANKHYA := 'S'; 
  END;
  
  IF P_SANKHYA = 'N' THEN
    RETURN;
  END IF;
  
  P_DESCRFORMNOVO := 'FERIAS MES COMP';
  P_FORMULANOVO := 'FBE(QueFuncionario.CODEMP,QueFuncionario.CODFUNC,FSomaMes(Refere,if(quePrefSindicato.LANCFERADIANT = ''S'',(- 1),(-2))),''F'',''410'') + FBE(QueFuncionario.CODEMP,QueFuncionario.CODFUNC,Refere,''O'',''410'')';
  P_CODFORMINDNOVO := 'FBIND(QueFuncionario.CODEMP, QueFuncionario.CODFUNC, Refere, ''F'', ''410'')';
  
  IF P_FORMULA = 'A' THEN
    INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
      VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
             'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO);
    
    IF P_CODFORMINDNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO);
    END IF;
    
    IF P_DESCRFORMNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO);
    END IF;
    
    INSERT INTO TFPFOR (CODFORM, DESCRFORM, SANKHYA, FORMULA, CODFORMIND)
      VALUES(P_CODFORMULA, P_DESCRFORMNOVO, 'S', P_FORMULANOVO, P_CODFORMINDNOVO);
    
  ELSIF (P_FORMULANOVO <> P_FORMULA OR 
         NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') OR 
         NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z')) 
  THEN
    
    IF P_FORMULANOVO <> P_FORMULA THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO, P_FORMULA);
    END IF;
    
    IF NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO, P_CODFORMIND);
    END IF;
    
    IF NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO, P_DESCRFORMULA);
    END IF;
    
    UPDATE TFPFOR
    SET FORMULA = P_FORMULANOVO
    , DESCRFORM = P_DESCRFORMNOVO
    , CODFORMIND = P_CODFORMINDNOVO
    , FORMULANTERIOR = CASE WHEN FORMULA <> P_FORMULANOVO THEN P_FORMULA ELSE FORMULANTERIOR END
    , DTALTER = SYSDATE
    , CODUSU = 0
    WHERE CODFORM = P_CODFORMULA
    AND SANKHYA = 'S';
    
  END IF;
  
END;
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 06/04/2018 17:34:42
Num.Script: 52607-0-0
Nro. O.S. : 1138059
Nome      : Cria - TGFITE_EXC BASESTEXTRANOTA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: BASESTEXTRANOTA
TipoObjeto: COLUMN
NomeTabela: TGFITE_EXC
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFITE_EXC ADD BASESTEXTRANOTA FLOAT
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 06/04/2018 17:34:42
Num.Script: 52608-0-0
Nro. O.S. : 1138059
Nome      : Cria - TGFITE_EXC ALIQSTEXTRANOTA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: ALIQSTEXTRANOTA
TipoObjeto: COLUMN
NomeTabela: TGFITE_EXC
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFITE_EXC ADD ALIQSTEXTRANOTA FLOAT
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 06/04/2018 17:34:42
Num.Script: 52609-0-0
Nro. O.S. : 1138059
Nome      : Cria - TGFITE ALIQSTEXTRANOTA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: ALIQSTEXTRANOTA
TipoObjeto: COLUMN
NomeTabela: TGFITE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFITE ADD ALIQSTEXTRANOTA FLOAT
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 06/04/2018 17:34:42
Num.Script: 52610-0-0
Nro. O.S. : 1138059
Nome      : Cria - TGFITE BASESTEXTRANOTA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: BASESTEXTRANOTA
TipoObjeto: COLUMN
NomeTabela: TGFITE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFITE ADD BASESTEXTRANOTA FLOAT
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 06/04/2018 17:44:06
Num.Script: 52610-0-1
Nro. O.S. : 1138059
Nome      : Alterar - TRG_DLT_TGFITE 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - TRG_DLT_TGFITE 
NomeObjeto: TRG_DLT_TGFITE 
TipoObjeto: TRIGGER
NomeTabela: TGFITE
Executar  : SE_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_DLT_TGFITE
AFTER DELETE ON TGFITE FOR EACH ROW
DECLARE
    P_CUSTOPOREMPRESA          CHAR;
    P_DTPATUCUST               SMALLINT;
    P_DTNEG                    DATE;
    P_TIPMOV                   CHAR(1);
    P_CODTIPOPER               INT;
    P_DHTIPOPER                DATE;
    P_DTMOV                    DATE;
    P_DTENTSAI                 DATE;
    P_DTFATUR                  DATE;
    P_PRECIFICA                CHAR(1);
    P_CODEMPCUSTO              TGFITE.CODEMP%TYPE;
    P_CODEMPNEGOC              TGFITE.CODEMP%TYPE;
    P_DTATUAL                  DATE;
    P_CODEMP                   TGFITE.CODEMP%TYPE;
    P_COUNT                    INT:= 0;
    P_INICIOCONTEST            INT;
    P_ATUALESTOQUE             TGFITE.ATUALESTOQUE%TYPE;
    P_QTDEST                   TGFITE.QTDNEG%TYPE;
    P_ATUALIZOU                VARCHAR2(1);
    P_NT_USERNAME              VARCHAR2(30);
    P_HOSTNAME                 VARCHAR2(64);
    P_USUARIO                  VARCHAR2(30);
    P_DTPDTVIGOR               INT;
    P_PROGRAMNAME              VARCHAR2(80);
    ERRMSG                     VARCHAR2(255);
    ERROR                      EXCEPTION;
    P_VALIDAR                  BOOLEAN;
    P_CODPARC                  TGFCAB.CODPARC%TYPE;
    P_SINAL                    NUMBER(5);
    P_TIPO                     CHAR(1);
    /* */
    P_NUREM                    TGFCAB.NUREM%TYPE;
    P_GERARPARCDEST            TGFTOP.GERARPARCDEST%TYPE; 
    P_CODTABCALC               TGFEMP.CODTABCALC%TYPE;
    P_CODTAB                   TGFTAB.CODTAB%TYPE;
    
    --Alteração JOEL começo OS 909403
    V_NUMCOTACAO TGFITC.NUMCOTACAO%TYPE;
    V_CODPROD TGFITC.CODPROD%TYPE;
    V_CONTROLE TGFITC.CONTROLE%TYPE;
    V_CODLOCAL TGFITC.CODLOCAL%TYPE;
    V_DIFERENCIADOR TGFITC.DIFERENCIADOR%TYPE;
    --Alteração JOEL fim OS 909403
BEGIN

  IF STP_GET_ATUALIZANDO THEN
    RETURN;
  END IF;

  /* 
  sincronização de dados
  */
  P_VALIDAR := Fpodevalidar('TGFITE');
  P_NUREM   := 0;
  SELECT COUNT(1)  INTO P_COUNT  FROM TGFCCX
  WHERE NUNOTA = :OLD.NUNOTA;
  IF P_COUNT <> 0 THEN
  ERRMSG := 'Item não pode ser deletado, existe referência na TGFCCX-Tabela de Coletor';
  RAISE ERROR;
  END IF;
  
  BEGIN
    SELECT LOGICO 
    INTO P_CUSTOPOREMPRESA 
    FROM TSIPAR 
    WHERE CHAVE = 'CUSTOPOREMP' 
      AND CODUSU = 0;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      P_CUSTOPOREMPRESA := 'N';
  END;
  
  BEGIN
    SELECT CODTABCALC 
    INTO P_CODTABCALC 
    FROM TGFEMP 
    WHERE CODEMP = :OLD.CODEMP;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      P_CODTABCALC := 0;
  END;

  /* OS 902640 */
  IF :OLD.STATUSNOTA = 'L' THEN
       SELECT COUNT(1) INTO P_COUNT FROM  TCBINT C WHERE  C.NUNICO = :OLD.NUNOTA AND C.ORIGEM = 'E';
       IF P_COUNT <> 0 THEN
          ERRMSG := 'Nota já foi contabilizada, não pode ser excluída. Nota de Nro Único: '|| TO_CHAR(:OLD.NUNOTA) ||'';
          RAISE ERROR;
       END IF;

       SELECT COUNT(1) INTO P_COUNT FROM TGFLIV WHERE NUNOTA = :OLD.NUNOTA AND ORIGEM IN ('A', 'D', 'E');
       IF P_COUNT <> 0 THEN
          ERRMSG := 'Nota já foi gerada no Livro Fiscal de ICMS/IPI, não pode ser excluída. Nota de Nro Único: '|| TO_CHAR(:OLD.NUNOTA) ||'';
          RAISE ERROR;
       END IF;

       SELECT COUNT(1) INTO P_COUNT FROM TGFLIS WHERE NUNOTA = :OLD.NUNOTA AND ORIGEM = 'E';
       IF P_COUNT <> 0 THEN
          ERRMSG := 'Nota já foi gerada no Livro Fiscal de ISS, não pode ser excluída. Nota de Nro Único: '|| TO_CHAR(:OLD.NUNOTA) ||'';
          RAISE ERROR;
       END IF;
  END IF;

 /* VALIDAÇÃO DO PLANEJAMENTO */
  SELECT COUNT(1) INTO P_COUNT
    FROM TGFPPL
   WHERE NUNOTAORIG = :OLD.NUNOTA
     AND SEQUENCIAORIG = :OLD.SEQUENCIA
     AND NUNOTA IS NOT NULL;
  IF P_COUNT <> 0 THEN
  ERRMSG := 'Este pedido gerou uma planejamento que gerou uma produção e não pode ser excluído.: ' || TO_CHAR(:OLD.CODPROD);
  RAISE ERROR;
  ELSE
    SELECT COUNT(1) INTO P_COUNT  
  FROM TGFPPL
  WHERE NUNOTAORIG = :OLD.NUNOTA
      AND SEQUENCIAORIG = :OLD.SEQUENCIA;
    IF P_COUNT <> 0 THEN
     DELETE FROM TGFPPL
      WHERE NUNOTAORIG = :OLD.NUNOTA
        AND SEQUENCIAORIG = :OLD.SEQUENCIA;
    END IF;
  END IF;

  --OS 597694
  SELECT COUNT(1) INTO P_COUNT
  FROM TGFVAR TORIG
  WHERE TORIG.NUNOTAORIG = :OLD.NUNOTA  
    AND TORIG.SEQUENCIAORIG = :OLD.SEQUENCIA
    AND TORIG.NUNOTA <> TORIG.NUNOTAORIG;
  IF P_COUNT > 0 THEN
    ERRMSG := 'Item não pode ser excluído deu origem a outro item.';  
    RAISE ERROR; 
  END IF;

  BEGIN
    SELECT C.DTNEG, C.TIPMOV,C.CODTIPOPER, C.DHTIPOPER, C.DTMOV, C.DTENTSAI, C.DTFATUR, C.CODEMPNEGOC, C.CODPARC, NVL(C.NUREM,0)
    INTO  P_DTNEG,P_TIPMOV, P_CODTIPOPER, P_DHTIPOPER, P_DTMOV, P_DTENTSAI, P_DTFATUR, P_CODEMPNEGOC, P_CODPARC, P_NUREM
    FROM TGFCAB C
    WHERE  C.NUNOTA = :OLD.NUNOTA;
  EXCEPTION WHEN NO_DATA_FOUND THEN
    BEGIN
      SELECT DISTINCT  C.DTNEG, C.TIPMOV, C.CODTIPOPER, C.DHTIPOPER, C.DTMOV, C.DTENTSAI, C.DTFATUR, C.CODEMPNEGOC, C.CODPARC
      INTO  P_DTNEG, P_TIPMOV, P_CODTIPOPER, P_DHTIPOPER, P_DTMOV, P_DTENTSAI, P_DTFATUR, P_CODEMPNEGOC, P_CODPARC
      FROM TGFCAB_DLT C
      WHERE  C.NUNOTA = :OLD.NUNOTA;
    EXCEPTION WHEN NO_DATA_FOUND THEN
   P_TIPMOV := ' ';
    END;
  END;
  IF (P_NUREM>0) THEN 
    SELECT T.GERARPARCDEST INTO P_GERARPARCDEST
    FROM TGFTOP T
    WHERE T.CODTIPOPER = P_CODTIPOPER
     AND T.DHALTER = P_DHTIPOPER;
    IF (P_GERARPARCDEST='N') THEN
     SELECT COUNT(1) INTO P_COUNT 
  FROM TGFCAB C
  WHERE C.NUNOTA = P_NUREM;
  IF NVL(P_COUNT,0)<>0 THEN 
   ERRMSG := 'Atencao ! movimento de remessa nao pode ser modificado, movimento de origem : ' || TO_CHAR(P_NUREM, '99999999');
   RAISE ERROR;
  END IF;
 END IF;
  END IF;

  SELECT COUNT(1) INTO P_COUNT
  FROM TCEVAR
  WHERE NUNOTAORIG = :OLD.NUNOTA
    AND SEQUENCIAORIG = :OLD.SEQUENCIA;
  IF P_COUNT > 0 THEN
    ERRMSG := 'Este Pedido/Nota('||TO_CHAR(:OLD.NUNOTA)||') gerou um processo de importação e não pode ser excluído.';
    RAISE ERROR;
  END IF;
  
  IF (:OLD.STATUSNOTA = 'L')  AND (P_TIPMOV <> ' ')THEN
    SELECT PRECIFICA INTO P_PRECIFICA
    FROM TGFTOP
    WHERE CODTIPOPER = P_CODTIPOPER
     AND DHALTER = P_DHTIPOPER;
    IF (P_PRECIFICA <> 'N') THEN
      /*
        Preve os registros os novos com nunota e sequencia na pk
      */
    SELECT COUNT(1) INTO P_COUNT
    FROM TGFCUS
      WHERE NUNOTA = :OLD.NUNOTA
        AND SEQUENCIA = :OLD.SEQUENCIA;
    IF P_COUNT<>0 THEN
      DELETE FROM TGFCUS
      WHERE NUNOTA = :OLD.NUNOTA
        AND SEQUENCIA = :OLD.SEQUENCIA;
      END IF;
      IF (P_TIPMOV <> 'F') OR (:OLD.USOPROD <> 'M') THEN
        SELECT INTEIRO INTO P_DTPATUCUST      FROM TSIPAR WHERE CHAVE = 'DTPATUCUST'  AND CODUSU = 0;
        IF (P_CUSTOPOREMPRESA = 'S')  THEN
           IF (P_TIPMOV = 'T') THEN
             P_CODEMPCUSTO := P_CODEMPNEGOC;
           ELSE
             P_CODEMPCUSTO := :OLD.CODEMP;
           END IF;
        ELSE
          P_CODEMPCUSTO := 1;
        END IF;
        IF (P_DTPATUCUST = 0.00) THEN
           P_DTATUAL := P_DTNEG;
        ELSIF (P_DTPATUCUST = 1) THEN
           P_DTATUAL := P_DTENTSAI;
        ELSIF (P_DTPATUCUST = 2) THEN
           P_DTATUAL := P_DTMOV;
        ELSIF (P_DTPATUCUST = 3) THEN
           P_DTATUAL := P_DTFATUR;
        ELSE
          P_DTATUAL := P_DTMOV;
        END IF;
        IF ((P_TIPMOV  = 'T') AND (:OLD.SEQUENCIA < 0)) OR
           ((P_TIPMOV <> 'T') AND (:OLD.SEQUENCIA > 0)) THEN
           /*
             Preve os registros os antigos com nunota e sequencia zero
           */
       SELECT COUNT(1) INTO P_COUNT
       FROM TGFCUS
           WHERE CODEMP  = P_CODEMPCUSTO
             AND CODPROD = :OLD.CODPROD
             AND DTATUAL = P_DTATUAL
             AND NUNOTA = 0
             AND SEQUENCIA = 0;
           IF(P_COUNT<>0) THEN
             DELETE FROM TGFCUS
             WHERE CODEMP  = P_CODEMPCUSTO
               AND CODPROD = :OLD.CODPROD
               AND DTATUAL = P_DTATUAL
               AND NUNOTA = 0
               AND SEQUENCIA = 0;
           END IF;
        END IF;
        IF (P_PRECIFICA = 'S') AND (P_TIPMOV IN ('C', 'O')) THEN
            SELECT INTEIRO INTO P_DTPDTVIGOR  FROM TSIPAR WHERE CHAVE = 'DTPDTVIGOR' AND CODUSU = 0;
            P_DTATUAL := TRUNC(SYSDATE);
            IF P_DTENTSAI IS NOT NULL THEN
             P_DTATUAL := P_DTENTSAI;
            ELSIF P_DTPDTVIGOR = 0 THEN
             P_DTATUAL := P_DTNEG;
            ELSIF P_DTPDTVIGOR = 1 THEN
             P_DTATUAL := P_DTENTSAI;
            ELSIF P_DTPDTVIGOR = 2 THEN
             P_DTATUAL := P_DTMOV;
            ELSIF P_DTPDTVIGOR = 3 THEN
             P_DTATUAL := P_DTFATUR;
            END IF;
                   
            P_CODTAB := 0;
            IF (P_CUSTOPOREMPRESA = 'S' AND P_CODTABCALC <> 0) THEN
            P_CODTAB := P_CODTABCALC;
            END IF;

            SELECT COUNT(1) INTO P_COUNT 
            FROM TGFEXC E
            WHERE E.CODPROD = :OLD.CODPROD 
            AND EXISTS (SELECT T.NUTAB  
                      FROM TGFTAB T 
                      WHERE T.NUTAB = E.NUTAB 
                        AND T.DTVIGOR = P_DTATUAL 
                        AND T.CODTAB = P_CODTAB);

            IF (P_COUNT <> 0) THEN
             DELETE FROM TGFEXC E
             WHERE E.CODPROD = :OLD.CODPROD 
               AND EXISTS (SELECT T.NUTAB  
                           FROM TGFTAB T 
                           WHERE T.NUTAB = E.NUTAB 
                             AND T.DTVIGOR = P_DTATUAL 
                             AND T.CODTAB = P_CODTAB);
        END IF;
        END IF;
      END IF;
    END IF;
  END IF;

  SELECT COUNT(1) INTO P_COUNT 
  FROM TSILIB 
  WHERE NUCHAVE = :OLD.NUNOTA
                       AND TABELA    IN ('TGFCAB', 'TGFITE')
                       AND SEQUENCIA = :OLD.SEQUENCIA;
  IF(P_COUNT <> 0) THEN 
    DELETE FROM TSILIB 
  WHERE NUCHAVE = :OLD.NUNOTA
      AND TABELA IN ('TGFCAB', 'TGFITE')
      AND SEQUENCIA = :OLD.SEQUENCIA;
  END IF;

  IF (:OLD.ATUALESTOQUE <> 0) AND ((:OLD.RESERVA='N') OR (:OLD.PENDENTE = 'S')) THEN
    BEGIN
      SELECT INTEIRO INTO P_INICIOCONTEST FROM TSIPAR WHERE CHAVE = 'INICIOCONTEST';
    EXCEPTION WHEN NO_DATA_FOUND THEN
      INSERT INTO TSIPAR (CHAVE, DESCRICAO, CODUSU, TIPO, MODULO, CLASSE, ABA, LOGICO, INTEIRO)
      VALUES ('INICIOCONTEST', 'Num. Início(TGFNum) do controle de estoque', 0, 'I', 'E', 'Diversas', 'Produto', 'N', 0);
      P_INICIOCONTEST := 0;
    END;
    IF (:OLD.NUNOTA >= P_INICIOCONTEST) THEN
        IF (:OLD.RESERVA = 'S') THEN
          IF (:OLD.PENDENTE = 'S') THEN
            P_QTDEST := :OLD.QTDNEG - :OLD.QTDENTREGUE;
          ELSE
            P_QTDEST := 0;
          END IF;
        ELSE
          P_QTDEST := :OLD.QTDNEG;
        END IF;
        IF P_QTDEST <> 0 THEN
          P_ATUALESTOQUE := :OLD.ATUALESTOQUE * -1;
          Stp_Atualiza_Tgfest(:OLD.RESERVA, P_ATUALESTOQUE, :OLD.CODEMP, :OLD.CODPROD, :OLD.CONTROLE, :OLD.CODLOCALORIG, P_QTDEST, :OLD.STATUSLOTE, P_ATUALIZOU);
          IF (P_ATUALIZOU = 'N') THEN
   ERRMSG := 'Falha na atualização do estoque do produto: ' || TO_CHAR(:OLD.CODPROD, '9999999999');
   RAISE ERROR;
          END IF;
        END IF;
    END IF;
  END IF;

  IF (P_TIPMOV <> 'P' AND P_TIPMOV <> 'V') THEN
      SELECT COUNT(1) INTO P_COUNT
      FROM TGFRAM
      WHERE NUNOTA = :OLD.NUNOTA
        AND SEQUENCIA = :OLD.SEQUENCIA
        AND STATUS <> 'P';
      IF P_COUNT > 0 THEN
        ERRMSG := 'Nota/Item não pode ser excluído. '||
                  'Motivo: Já existem AMOSTRAS para este item em análise. '||
                  'Exclua as amostras antes de excluir a Nota/Item';
        RAISE ERROR;
      END IF;
  END IF;

  SELECT COUNT(1) INTO P_COUNT
  FROM TGFRAM
  WHERE NUNOTA = :OLD.NUNOTA
    AND SEQUENCIA = :OLD.SEQUENCIA
    AND STATUS = 'P';
  IF P_COUNT > 0 THEN
    DELETE FROM TGFRAM
    WHERE NUNOTA = :OLD.NUNOTA
      AND SEQUENCIA = :OLD.SEQUENCIA
      AND STATUS = 'P';
  END IF;

  INSERT INTO TGFITE_DLT (NUNOTA, SEQUENCIA, PENDENTE, TIPMOV, RESERVA, ATUALESTOQUE,
                          CODEMP, CODPROD, CONTROLE, QTDNEG, QTDENTREGUE, CODLOCAL, PERCPUREZA, PERCGERMIN)
                  VALUES (:OLD.NUNOTA, :OLD.SEQUENCIA, :OLD.PENDENTE, P_TIPMOV, :OLD.RESERVA, :OLD.ATUALESTOQUE,
                          :OLD.CODEMP, :OLD.CODPROD, :OLD.CONTROLE, :OLD.QTDNEG, :OLD.QTDENTREGUE, :OLD.CODLOCALORIG, :OLD.PERCPUREZA, :OLD.PERCGERMIN);

  IF (:OLD.STATUSNOTA = 'L') THEN
     SELECT  SUBSTR(OSUSER,1,30), SUBSTR(MACHINE,1,64), PROGRAM  
     INTO P_NT_USERNAME, P_HOSTNAME, P_PROGRAMNAME    
     FROM V$SESSION
     WHERE AUDSID = USERENV('SESSIONID')
       AND ROWNUM = 1;    

     INSERT INTO TGFITE_EXC (NUTAB, NUNOTA, SEQUENCIA, CODEMP, CODPROD, CODLOCALORIG,
                             CONTROLE, USOPROD, CODCFO, QTDNEG, QTDENTREGUE, QTDCONFERIDA, VLRUNIT,
                             VLRTOT, VLRCUS, BASEIPI, VLRIPI, BASEICMS, VLRICMS, VLRDESC, BASESUBSTIT,
                             VLRSUBST, ALIQICMS, ALIQIPI, PENDENTE, CODVOL, CODTRIB, ATUALESTOQUE,
                             OBSERVACAO, RESERVA, STATUSNOTA, CODOBSPADRAO, CODVEND, CODEXEC, FATURAR,
                             NT_USERNAME,HOSTNAME, DHEXCLUSAO, USUARIO, VLRREPRED, VLRDESCBONIF, PERCDESC, PROGRAMA, PERCPUREZA, PERCGERMIN, CODUSU,
                             BASEISS, VLRISS, CODTPA, ORIGPROD,VLRUNITLOC, SEQUENCIAFISCAL, CODCFPS, CODENQIPI,
                             CODESPECST, VLRDESCRAT, CODAGREGACAO, INDESCALA, CNPJFABRICANTE, CODBENEFNAUF, BASESTFCPINTANT, PERCSTFCPINTANT, VLRSTFCPINTANT, 
                             BASESTEXTRANOTA, ALIQSTEXTRANOTA)
    SELECT 
      :OLD.NUTAB, :OLD.NUNOTA, :OLD.SEQUENCIA, :OLD.CODEMP, :OLD.CODPROD, :OLD.CODLOCALORIG,
      :OLD.CONTROLE, :OLD.USOPROD, :OLD.CODCFO, :OLD.QTDNEG, :OLD.QTDENTREGUE, :OLD.QTDCONFERIDA, :OLD.VLRUNIT,
      :OLD.VLRTOT, :OLD.VLRCUS, :OLD.BASEIPI, :OLD.VLRIPI, :OLD.BASEICMS, :OLD.VLRICMS, :OLD.VLRDESC, :OLD.BASESUBSTIT,
      :OLD.VLRSUBST, :OLD.ALIQICMS, :OLD.ALIQIPI, :OLD.PENDENTE, :OLD.CODVOL, :OLD.CODTRIB, :OLD.ATUALESTOQUE,
      :OLD.OBSERVACAO, :OLD.RESERVA, :OLD.STATUSNOTA, :OLD.CODOBSPADRAO, :OLD.CODVEND, :OLD.CODEXEC, :OLD.FATURAR,
      P_NT_USERNAME, P_HOSTNAME, SYSDATE, P_USUARIO,:OLD.VLRREPRED,:OLD.VLRDESCBONIF,:OLD.PERCDESC, P_PROGRAMNAME,:OLD.PERCPUREZA, 
      :OLD.PERCGERMIN, Tsiusu_Log_Pkg.V_CODUSULOG, :OLD.BASEISS, :OLD.VLRISS, :OLD.CODTPA, :OLD.ORIGPROD, :OLD.VLRUNITLOC, :OLD.SEQUENCIAFISCAL, 
      :OLD.CODCFPS, :OLD.CODENQIPI, :OLD.CODESPECST, :OLD.VLRDESCRAT, :OLD.CODAGREGACAO, :OLD.INDESCALA, :OLD.CNPJFABRICANTE, :OLD.CODBENEFNAUF, 
      :OLD.BASESTFCPINTANT, :OLD.PERCSTFCPINTANT, :OLD.VLRSTFCPINTANT, :OLD.BASESTEXTRANOTA, :OLD.ALIQSTEXTRANOTA 
    FROM DUAL
    WHERE NOT EXISTS (SELECT 1 FROM TGFITE_EXC I WHERE I.NUNOTA = :OLD.NUNOTA AND I.SEQUENCIA = :OLD.SEQUENCIA AND I.DHEXCLUSAO = SYSDATE);
  END IF;
  
  --Alteração JOEL começo OS 909403
    BEGIN
        SELECT
                NUMCOTACAO, CODPROD, CONTROLE, CODLOCAL, DIFERENCIADOR
                INTO V_NUMCOTACAO, V_CODPROD, V_CONTROLE, V_CODLOCAL, V_DIFERENCIADOR 
        FROM
                TGFITC
        WHERE
                NUNOTACPA = :OLD.NUNOTA AND
                SEQNOTACPA = :OLD.SEQUENCIA; 
                
     EXCEPTION WHEN NO_DATA_FOUND THEN
        V_NUMCOTACAO := NULL;
     END;  
    
    IF (V_NUMCOTACAO IS NOT NULL) THEN
        UPDATE
                TGFITC
        SET
                STATUSPRODCOT = 'A'
        WHERE
                NUMCOTACAO = V_NUMCOTACAO AND
                CODPROD = V_CODPROD AND
                CONTROLE = V_CONTROLE AND 
                CODLOCAL = V_CODLOCAL AND
                DIFERENCIADOR = V_DIFERENCIADOR AND
                CODPARC = 0 AND
                STATUSPRODCOT = 'F';
    END IF;
    --Alteração JOEL fim OS 909403
    
  RETURN;   
EXCEPTION
  WHEN ERROR THEN
    /* 
    Sincronização de dados não faz validações
    */
    IF (P_VALIDAR) THEN 
      RAISE_APPLICATION_ERROR(-20101, ERRMSG);
    END IF; 
END;
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 06/04/2018 17:34:42
Num.Script: 52611-0-0
Nro. O.S. : 1138059
Nome      : Cria - TGFEMP USASTEXTNOTARESTST
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: USASTEXTNOTARESTST
TipoObjeto: COLUMN
NomeTabela: TGFEMP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TGFEMP ADD USASTEXTNOTARESTST CHAR(1)';
   EXECUTE IMMEDIATE 'UPDATE TGFEMP SET USASTEXTNOTARESTST = ''N''';
   EXECUTE IMMEDIATE 'ALTER TABLE TGFEMP ADD  CONSTRAINT CKC_USASTEXTNOTARESTST_TGFEMP CHECK (USASTEXTNOTARESTST IN (''S'',''N''))';
   EXECUTE IMMEDIATE 'ALTER TABLE TGFEMP MODIFY USASTEXTNOTARESTST DEFAULT ''N'' NOT NULL';
END;
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 06/04/2018 17:34:42
Num.Script: 52646-0-0
Nro. O.S. : 1168486
Nome      : Cria - TGFPAR LIMCHEQECONECT
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: LIMCHEQECONECT
TipoObjeto: COLUMN
NomeTabela: TGFPAR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFPAR ADD LIMCHEQECONECT FLOAT
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 06/04/2018 17:34:42
Num.Script: 52719-0-0
Nro. O.S. : 1168677
Nome      : Ajusta - TFPFOR CODFORM 902
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Ajusta - TFPFOR CODFORM 902
NomeObjeto: CODFORM
TipoObjeto: COLUMN
NomeTabela: TFPFOR
Executar  : SE_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
  P_CODFORMULA      TFPFOR.CODFORM%TYPE;
  P_DESCRFORMULA    TFPFOR.DESCRFORM%TYPE;
  P_DESCRFORMNOVO   TFPFOR.DESCRFORM%TYPE;
  P_FORMULA         VARCHAR2(4000);
  P_FORMULANOVO     VARCHAR2(4000);
  P_CODFORMIND      VARCHAR2(4000);
  P_CODFORMINDNOVO  VARCHAR2(4000);
  P_SANKHYA         TFPFOR.SANKHYA%TYPE;
BEGIN
  
  P_CODFORMULA := 902;
  
  BEGIN
    SELECT FORMULA, DESCRFORM, CODFORMIND, SANKHYA
    INTO P_FORMULA, P_DESCRFORMULA, P_CODFORMIND, P_SANKHYA
    FROM TFPFOR
    WHERE CODFORM = P_CODFORMULA;
  EXCEPTION WHEN NO_DATA_FOUND THEN
    P_FORMULA := 'A';
    P_CODFORMIND := NULL;
    P_DESCRFORMULA := NULL;
    P_SANKHYA := 'S'; 
  END;
  
  IF P_SANKHYA = 'N' THEN
    RETURN;
  END IF;
  
  P_DESCRFORMNOVO := 'INSS - FERIAS';
  P_FORMULANOVO := 'IF(QueFuncionario.VINCULO = 2,0,TRUNCFOL(IF(&INSSMESAMES = ''S'',0,IF(&F5011 > FTF(1,3,&F5011,&Refere,QueFuncionario.TIPTAB), FTF(1,4,&F5011,&Refere,QueFuncionario.TIPTAB),((((&F5011 * FTF(1,1,&F5011,&Refere,QueFuncionario.TIPTAB)) / 100) * IF(&F5011 > 0,(&E1902 / &F5011),0)) + IF(&F5011 <= FTF(1,3,&F5011,&Refere,QueFuncionario.TIPTAB),((&E505 + FBE(QueFuncionario.CODEMP,QueFuncionario.CODFUNC,&Refere,''F,1,2,3'',''1902'') * FTF(1,1,&F5011,&Refere,QueFuncionario.TIPTAB)) / 100),0)))),2)) - (&E506 + ABS(FBE(QueFuncionario.CODEMP,QueFuncionario.CODFUNC,&Refere,''F,1,2,3'',''902'') + ABS(&E922)))';
  P_CODFORMINDNOVO := 'FTF(1,1,&F5011 ,&Refere,QueFuncionario.TIPTAB)';
  
  IF P_FORMULA = 'A' THEN
    INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
      VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
             'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO);
    
    IF P_CODFORMINDNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO);
    END IF;
    
    IF P_DESCRFORMNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO);
    END IF;
    
    INSERT INTO TFPFOR (CODFORM, DESCRFORM, SANKHYA, FORMULA, CODFORMIND)
      VALUES(P_CODFORMULA, P_DESCRFORMNOVO, 'S', P_FORMULANOVO, P_CODFORMINDNOVO);
    
  ELSIF (P_FORMULANOVO <> P_FORMULA OR 
         NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') OR 
         NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z')) 
  THEN
    
    IF P_FORMULANOVO <> P_FORMULA THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO, P_FORMULA);
    END IF;
    
    IF NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO, P_CODFORMIND);
    END IF;
    
    IF NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO, P_DESCRFORMULA);
    END IF;
    
    UPDATE TFPFOR
    SET FORMULA = P_FORMULANOVO
    , DESCRFORM = P_DESCRFORMNOVO
    , CODFORMIND = P_CODFORMINDNOVO
    , FORMULANTERIOR = CASE WHEN FORMULA <> P_FORMULANOVO THEN P_FORMULA ELSE FORMULANTERIOR END
    , DTALTER = SYSDATE
    , CODUSU = 0
    WHERE CODFORM = P_CODFORMULA
    AND SANKHYA = 'S';
    
  END IF;
  
END;
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 06/04/2018 17:34:42
Num.Script: 52730-0-0
Nro. O.S. : 1162449
Nome      : Ajusta - TFPFOR CODFORM 7
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Ajusta - TFPFOR CODFORM 7
NomeObjeto: CODFORM
TipoObjeto: COLUMN
NomeTabela: TFPFOR
Executar  : SE_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
  P_CODFORMULA      TFPFOR.CODFORM%TYPE;
  P_DESCRFORMULA    TFPFOR.DESCRFORM%TYPE;
  P_DESCRFORMNOVO   TFPFOR.DESCRFORM%TYPE;
  P_FORMULA         VARCHAR2(4000);
  P_FORMULANOVO     VARCHAR2(4000);
  P_CODFORMIND      VARCHAR2(4000);
  P_CODFORMINDNOVO  VARCHAR2(4000);
  P_SANKHYA         TFPFOR.SANKHYA%TYPE;
BEGIN
  
  P_CODFORMULA := 7;
  
  BEGIN
    SELECT FORMULA, DESCRFORM, CODFORMIND, SANKHYA
    INTO P_FORMULA, P_DESCRFORMULA, P_CODFORMIND, P_SANKHYA
    FROM TFPFOR
    WHERE CODFORM = P_CODFORMULA;
  EXCEPTION WHEN NO_DATA_FOUND THEN
    P_FORMULA := 'A';
    P_CODFORMIND := NULL;
    P_DESCRFORMULA := NULL;
    P_SANKHYA := 'S'; 
  END;
  
  IF P_SANKHYA = 'N' THEN
    RETURN;
  END IF;
  
  P_DESCRFORMNOVO := 'salario familia';
  P_FORMULANOVO := 'IF((&Folqui <> 1),IF(((QueFuncionario.SITUACAO = 1) AND (CTOI(PDESPARAM(''1'', ''TFPOCO O, TFPHIS H'', '' O.CODHISTOCOR = H.CODHISTOCOR AND O.CODEMP = :INT_CODEMP AND O.CODFUNC = :INT_CODFUNC AND O.DTFINALOCOR >= :DAT_DTINI AND O.DTFINALOCOR <= :DAT_DTFIM AND H.AFASTAMENTO IN (''A'', ''D'') AND O.DTFINALOCOR IS NOT NULL'',STR(queFuncionario.CODEMP), STR(queFuncionario.CODFUNC), DTOC(&REFERE * 1.0), DTOC((FSOMAMES(&REFERE, 1) - 1) * 1.0))) <> 1)) OR (((QueFuncionario.SITUACAO = 3) OR (QueFuncionario.SITUACAO = 6) OR (QueFuncionario.SITUACAO = 5)) AND ((&DIASTRA + &F5020) > 0)),(FQD(queFuncionario.codemp,queFuncionario.codfunc,''S'',&Refere) * FTF(3,1,(IF(&TIPFOL = ''N'',(QueFuncionario.SALBASE + &E1901 + (&E102 + &E103 + &E104 + &E107)) - (&E1 + ((QueFuncionario.SALBASE / 30) * &F5020)),(QueFuncionario.SALBASE + (&E1900 - &E201) + &E105 + (&E102 + &E103 + &E104 + &E107)) - (&E200 - ((QueFuncionario.SALBASE / 30) * &F5020)))),&Refere,queFuncionario.TIPTAB)),0) / IF(((&TIPFOL = ''N'') AND (MES(queFuncionario.DTADM) = &MESATU) AND (ANO(queFuncionario.DTADM) = &ANOATU)) OR (&TIPFOL = ''R''), IF(QueFuncionario.TIPSAL = 5,QueFuncionario.HORASSEM * 5,30), 1) * IF(((&TIPFOL = ''N'') AND (MES(queFuncionario.DTADM) = &MESATU) AND (ANO(queFuncionario.DTADM) = &ANOATU)) OR (&TIPFOL = ''R''),IF(&DIASTRA > 0,&DIASTRA,30), 1),0)';
  P_CODFORMINDNOVO := 'FQD(queFuncionario.codemp, queFuncionario.codfunc,''N'', &Refere)';
  
  IF P_FORMULA = 'A' THEN
    INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
      VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
             'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO);
    
    IF P_CODFORMINDNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO);
    END IF;
    
    IF P_DESCRFORMNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO);
    END IF;
    
    INSERT INTO TFPFOR (CODFORM, DESCRFORM, SANKHYA, FORMULA, CODFORMIND)
      VALUES(P_CODFORMULA, P_DESCRFORMNOVO, 'S', P_FORMULANOVO, P_CODFORMINDNOVO);
    
  ELSIF (P_FORMULANOVO <> P_FORMULA OR 
         NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') OR 
         NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z')) 
  THEN
    
    IF P_FORMULANOVO <> P_FORMULA THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO, P_FORMULA);
    END IF;
    
    IF NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO, P_CODFORMIND);
    END IF;
    
    IF NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO, P_DESCRFORMULA);
    END IF;
    
    UPDATE TFPFOR
    SET FORMULA = P_FORMULANOVO
    , DESCRFORM = P_DESCRFORMNOVO
    , CODFORMIND = P_CODFORMINDNOVO
    , FORMULANTERIOR = CASE WHEN FORMULA <> P_FORMULANOVO THEN P_FORMULA ELSE FORMULANTERIOR END
    , DTALTER = SYSDATE
    , CODUSU = 0
    WHERE CODFORM = P_CODFORMULA
    AND SANKHYA = 'S';
    
  END IF;
  
END;
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 06/04/2018 17:34:42
Num.Script: 52733-0-0
Nro. O.S. : 1168787
Nome      : Ajusta - TFPFOR CODFORM 5001
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Ajusta - TFPFOR CODFORM 5001
NomeObjeto: CODFORM
TipoObjeto: COLUMN
NomeTabela: TFPFOR
Executar  : SE_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
  P_CODFORMULA      TFPFOR.CODFORM%TYPE;
  P_DESCRFORMULA    TFPFOR.DESCRFORM%TYPE;
  P_DESCRFORMNOVO   TFPFOR.DESCRFORM%TYPE;
  P_FORMULA         VARCHAR2(4000);
  P_FORMULANOVO     VARCHAR2(4000);
  P_CODFORMIND      VARCHAR2(4000);
  P_CODFORMINDNOVO  VARCHAR2(4000);
  P_SANKHYA         TFPFOR.SANKHYA%TYPE;
BEGIN
  
  P_CODFORMULA := 5001;
  
  BEGIN
    SELECT FORMULA, DESCRFORM, CODFORMIND, SANKHYA
    INTO P_FORMULA, P_DESCRFORMULA, P_CODFORMIND, P_SANKHYA
    FROM TFPFOR
    WHERE CODFORM = P_CODFORMULA;
  EXCEPTION WHEN NO_DATA_FOUND THEN
    P_FORMULA := 'A';
    P_CODFORMIND := NULL;
    P_DESCRFORMULA := NULL;
    P_SANKHYA := 'S'; 
  END;
  
  IF P_SANKHYA = 'N' THEN
    RETURN;
  END IF;
  
  P_DESCRFORMNOVO := 'BASE INSS COMPL/RESCISAO/FERIAS';
  P_FORMULANOVO := '&E1900 + &E505 + IF(&FOLHACPL = ''S'', FBECPL(QueFuncionario.CODEMP,QueFuncionario.CODFUNC,&Refere,''F'',''1902'') + FBECPL(QueFuncionario.CODEMP,QueFuncionario.CODFUNC,&Refere,''F'',''1921''), FBE(QueFuncionario.CODEMP,QueFuncionario.CODFUNC,&Refere,''F'',''1902'') + FBE(QueFuncionario.CODEMP,QueFuncionario.CODFUNC,&Refere,''F'',''1921'') + FBE(QueFuncionario.CODEMP,QueFuncionario.CODFUNC,&Refere,''R'',''1900'') + &E1921) + IF(&RecompoeCompl = ''S'',FBE(QueFuncionario.CODEMP,QueFuncionario.CODFUNC,&Refere,''O'',''1901,1902,1921''),0)';
  P_CODFORMINDNOVO := '';
  
  IF P_FORMULA = 'A' THEN
    INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
      VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
             'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO);
    
    IF P_CODFORMINDNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO);
    END IF;
    
    IF P_DESCRFORMNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO);
    END IF;
    
    INSERT INTO TFPFOR (CODFORM, DESCRFORM, SANKHYA, FORMULA, CODFORMIND)
      VALUES(P_CODFORMULA, P_DESCRFORMNOVO, 'S', P_FORMULANOVO, P_CODFORMINDNOVO);
    
  ELSIF (P_FORMULANOVO <> P_FORMULA OR 
         NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') OR 
         NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z')) 
  THEN
    
    IF P_FORMULANOVO <> P_FORMULA THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO, P_FORMULA);
    END IF;
    
    IF NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO, P_CODFORMIND);
    END IF;
    
    IF NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO, P_DESCRFORMULA);
    END IF;
    
    UPDATE TFPFOR
    SET FORMULA = P_FORMULANOVO
    , DESCRFORM = P_DESCRFORMNOVO
    , CODFORMIND = P_CODFORMINDNOVO
    , FORMULANTERIOR = CASE WHEN FORMULA <> P_FORMULANOVO THEN P_FORMULA ELSE FORMULANTERIOR END
    , DTALTER = SYSDATE
    , CODUSU = 0
    WHERE CODFORM = P_CODFORMULA
    AND SANKHYA = 'S';
    
  END IF;
  
END;
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 09/04/2018 11:55:54
Num.Script: 52771-0-0
Nro. O.S. : 1169859
Nome      : Cria - TFPEVE CODINCCP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: CODINCCP
TipoObjeto: COLUMN
NomeTabela: TFPEVE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPEVE ADD CODINCCP CHAR(2)
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 09/04/2018 11:55:54
Num.Script: 52772-0-0
Nro. O.S. : 1169859
Nome      : Cria - TFPEVE CODINCIRRF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: CODINCIRRF
TipoObjeto: COLUMN
NomeTabela: TFPEVE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPEVE ADD CODINCIRRF CHAR(2)
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 09/04/2018 11:55:54
Num.Script: 52773-0-0
Nro. O.S. : 1169859
Nome      : Cria - TFPEVE CODINCFGTS
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: CODINCFGTS
TipoObjeto: COLUMN
NomeTabela: TFPEVE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPEVE ADD CODINCFGTS CHAR(2)
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 09/04/2018 11:55:54
Num.Script: 52774-0-0
Nro. O.S. : 1169859
Nome      : Cria - TFPEVE CODINCSIND
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: CODINCSIND
TipoObjeto: COLUMN
NomeTabela: TFPEVE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPEVE ADD CODINCSIND CHAR(2)
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 09/04/2018 11:55:54
Num.Script: 52775-0-0
Nro. O.S. : 1169859
Nome      : Criar - TFPINCCP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPINCCP
NomeObjeto: TFPINCCP
TipoObjeto: TABLE
NomeTabela: TFPINCCP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPINCCP
(
  CODIGO             CHAR(2)           NOT NULL,
  DESCRICAO         VARCHAR2(255)     NOT NULL,
  DHALTER            DATE DEFAULT SYSDATE NOT NULL,
  CONSTRAINT PK_TFPINCCP PRIMARY KEY (CODIGO)
)
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 09/04/2018 11:55:54
Num.Script: 52776-0-0
Nro. O.S. : 1169859
Nome      : Criar - CODUSU TFPINCCP 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - CODUSU TFPINCCP 
NomeObjeto: CODUSU
TipoObjeto: COLUMN
NomeTabela: TFPINCCP 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE P_COUNT NUMBER(5);
BEGIN
  SELECT COUNT(1) INTO P_COUNT
  FROM USER_TAB_COLUMNS
  WHERE TABLE_NAME = 'TSIUSU'
    AND COLUMN_NAME = 'CODUSU'
    AND DATA_PRECISION = 5;
  
  IF P_COUNT > 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE TFPINCCP ADD CODUSU NUMBER(5)';
  ELSE
    EXECUTE IMMEDIATE 'ALTER TABLE TFPINCCP ADD CODUSU NUMBER(10)';
  END IF;
END;
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 09/04/2018 11:55:54
Num.Script: 52777-0-0
Nro. O.S. : 1169859
Nome      : Criar - FK_TFPINCCP_TSIUSU 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - FK_TFPINCCP_TSIUSU 
NomeObjeto: FK_TFPINCCP_TSIUSU 
TipoObjeto: FOREIGN KEY
NomeTabela: TFPINCCP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPINCCP ADD CONSTRAINT FK_TFPINCCP_TSIUSU FOREIGN KEY (CODUSU) REFERENCES TSIUSU (CODUSU)
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 07/05/2018 09:11:42
Num.Script: 52778-0-0
Nro. O.S. : 1169859
Nome      : Criar - TFPINCIRRF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPINCIRRF
NomeObjeto: TFPINCIRRF
TipoObjeto: TABLE
NomeTabela: TFPINCIRRF
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPINCIRRF
(
  CODIGO             CHAR(2)           NOT NULL,
  DESCRICAO          VARCHAR2(255)     NOT NULL,
  DHALTER            DATE DEFAULT SYSDATE NOT NULL,
  CONSTRAINT PK_TFPINCIRRF PRIMARY KEY (CODIGO)
  )
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 09/04/2018 15:39:56
Num.Script: 52779-0-0
Nro. O.S. : 1169859
Nome      : Criar - CODUSU TFPINCIRRF 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - CODUSU TFPINCIRRF 
NomeObjeto: CODUSU
TipoObjeto: COLUMN
NomeTabela: TFPINCIRRF 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210007
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE P_COUNT NUMBER(5);
BEGIN
  SELECT COUNT(1) INTO P_COUNT
  FROM USER_TAB_COLUMNS
  WHERE TABLE_NAME = 'TSIUSU'
    AND COLUMN_NAME = 'CODUSU'
    AND DATA_PRECISION = 5;
  
  IF P_COUNT > 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE TFPINCIRRF ADD CODUSU NUMBER(5)';
  ELSE
    EXECUTE IMMEDIATE 'ALTER TABLE TFPINCIRRF ADD CODUSU NUMBER(10)';
  END IF;
END;
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 09/04/2018 11:55:54
Num.Script: 52780-0-0
Nro. O.S. : 1169859
Nome      : Criar - FK_TFPINCIRRF_TSIUSU 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - FK_TFPINCIRRF_TSIUSU 
NomeObjeto: FK_TFPINCIRRF_TSIUSU 
TipoObjeto: FOREIGN KEY
NomeTabela: TFPINCIRRF
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPINCIRRF ADD CONSTRAINT FK_TFPINCIRRF_TSIUSU FOREIGN KEY (CODUSU) REFERENCES TSIUSU (CODUSU)
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 07/05/2018 09:12:58
Num.Script: 52781-0-0
Nro. O.S. : 1169859
Nome      : Criar - TFPINCFGTS
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPINCFGTS
NomeObjeto: TFPINCFGTS
TipoObjeto: TABLE
NomeTabela: TFPINCFGTS
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPINCFGTS
(
  CODIGO             CHAR(2)           NOT NULL,
  DESCRICAO         VARCHAR2(255)     NOT NULL,
  DHALTER            DATE DEFAULT SYSDATE NOT NULL,
  CONSTRAINT PK_TFPINCFGTS PRIMARY KEY (CODIGO)
  )
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 09/04/2018 11:55:54
Num.Script: 52782-0-0
Nro. O.S. : 1169859
Nome      : Criar - CODUSU TFPINCFGTS 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - CODUSU TFPINCFGTS 
NomeObjeto: CODUSU
TipoObjeto: COLUMN
NomeTabela: TFPINCFGTS 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE P_COUNT NUMBER(5);
BEGIN
  SELECT COUNT(1) INTO P_COUNT
  FROM USER_TAB_COLUMNS
  WHERE TABLE_NAME = 'TSIUSU'
    AND COLUMN_NAME = 'CODUSU'
    AND DATA_PRECISION = 5;
  
  IF P_COUNT > 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE TFPINCFGTS ADD CODUSU NUMBER(5)';
  ELSE
    EXECUTE IMMEDIATE 'ALTER TABLE TFPINCFGTS ADD CODUSU NUMBER(10)';
  END IF;
END;
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 09/04/2018 11:55:54
Num.Script: 52783-0-0
Nro. O.S. : 1169859
Nome      : Criar - FK_TFPINCFGTS_TSIUSU 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - FK_TFPINCFGTS_TSIUSU 
NomeObjeto: FK_TFPINCFGTS_TSIUSU 
TipoObjeto: FOREIGN KEY
NomeTabela: TFPINCFGTS
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPINCFGTS ADD CONSTRAINT FK_TFPINCFGTS_TSIUSU FOREIGN KEY (CODUSU) REFERENCES TSIUSU (CODUSU)
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 07/05/2018 09:13:36
Num.Script: 52784-0-0
Nro. O.S. : 1169859
Nome      : Criar - TFPINCSIND
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPINCSIND
NomeObjeto: TFPINCSIND
TipoObjeto: TABLE
NomeTabela: TFPINCSIND
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPINCSIND
(
  CODIGO             CHAR(2)           NOT NULL,
  DESCRICAO         VARCHAR2(255)     NOT NULL,
  DHALTER            DATE DEFAULT SYSDATE NOT NULL,
  CONSTRAINT PK_TFPINCSIND PRIMARY KEY (CODIGO)
)
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 09/04/2018 11:55:54
Num.Script: 52785-0-0
Nro. O.S. : 1169859
Nome      : Criar - CODUSU TFPINCSIND 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - CODUSU TFPINCSIND 
NomeObjeto: CODUSU
TipoObjeto: COLUMN
NomeTabela: TFPINCSIND 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE P_COUNT NUMBER(5);
BEGIN
  SELECT COUNT(1) INTO P_COUNT
  FROM USER_TAB_COLUMNS
  WHERE TABLE_NAME = 'TSIUSU'
    AND COLUMN_NAME = 'CODUSU'
    AND DATA_PRECISION = 5;
  
  IF P_COUNT > 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE TFPINCSIND ADD CODUSU NUMBER(5)';
  ELSE
    EXECUTE IMMEDIATE 'ALTER TABLE TFPINCSIND ADD CODUSU NUMBER(10)';
  END IF;
END;
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 09/04/2018 11:55:54
Num.Script: 52786-0-0
Nro. O.S. : 1169859
Nome      : Criar - FK_TFPINCSIND_TSIUSU 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - FK_TFPINCSIND_TSIUSU 
NomeObjeto: FK_TFPINCSIND_TSIUSU 
TipoObjeto: FOREIGN KEY
NomeTabela: TFPINCSIND
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPINCSIND ADD CONSTRAINT FK_TFPINCSIND_TSIUSU FOREIGN KEY (CODUSU) REFERENCES TSIUSU (CODUSU)
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 09/04/2018 11:55:54
Num.Script: 52787-0-0
Nro. O.S. : 1169859
Nome      : Script - INSERT TFPINCCP TFPINCFGTS TFPINCIRRF TFPINCSIND
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - INSERT TFPINCCP TFPINCFGTS TFPINCIRRF TFPINCSIND
NomeObjeto: TFPINCCP
TipoObjeto: PROCEDURE
NomeTabela: TFPINCCP 
Executar  : SE_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
    P_COUNT     NUMBER(05);
BEGIN

   SELECT COUNT(*)
   INTO P_COUNT
   FROM TSISCR
   WHERE NME_SCRIPT = '1169859';
    
    IF P_COUNT = 0 THEN
        BEGIN
            EXECUTE IMMEDIATE 'INSERT INTO TSISCR VALUES (''1169859'', ''1169859'')';
                    
            EXECUTE IMMEDIATE 'Insert into TFPINCCP (CODIGO, DESCRICAO, CODUSU) Values (''00'', ''NÃO É BASE DE CÁLCULO'', 0)';
            
            EXECUTE IMMEDIATE 'Insert into TFPINCCP (CODIGO, DESCRICAO, CODUSU) Values (''01'', ''NÃO É BASE DE CÁLCULO EM FUNÇÃO DE ACORDOS INTERNACIONAIS DE PREVIDÊNCIA SOCIAL'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCCP (CODIGO, DESCRICAO, CODUSU) Values (''11'', ''MENSAL'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCCP (CODIGO, DESCRICAO, CODUSU) Values (''12'', ''13º SALÁRIO'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCCP (CODIGO, DESCRICAO, CODUSU) Values (''13'', ''EXCLUSIVA DO EMPREGADOR - MENSAL'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCCP (CODIGO, DESCRICAO, CODUSU) Values (''14'', ''EXCLUSIVA DO EMPREGADOR - 13° SALÁRIO'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCCP (CODIGO, DESCRICAO, CODUSU) Values (''15'', ''EXCLUSIVA DO SEGURADO - MENSAL'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCCP (CODIGO, DESCRICAO, CODUSU) Values (''16'', ''EXCLUSIVA DO SEGURADO - 13° SALÁRIO'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCCP (CODIGO, DESCRICAO, CODUSU) Values (''21'', ''SALÁRIO MATERNIDADE MENSAL PAGO PELO EMPREGADOR'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCCP (CODIGO, DESCRICAO, CODUSU) Values (''22'', ''SALÁRIO MATERNIDADE - 13º SALÁRIO, PAGO PELO EMPREGADOR'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCCP (CODIGO, DESCRICAO, CODUSU) Values (''23'', ''AUXILIO DOENÇA MENSAL - REGIME PRÓPRIO DE PREVIDÊNCIA SOCIAL'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCCP (CODIGO, DESCRICAO, CODUSU) Values (''24'', ''AUXILIO DOENÇA 13º SALÁRIO DOENÇA - REGIME PRÓPRIO DE PREVIDÊNCIA SOCIAL'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCCP (CODIGO, DESCRICAO, CODUSU) Values (''25'', ''SALÁRIO MATERNIDADE MENSAL PAGO PELO INSS'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCCP (CODIGO, DESCRICAO, CODUSU) Values (''26'', ''SALÁRIO MATERNIDADE - 13° SALÁRIO, PAGO PELO INSS'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCCP (CODIGO, DESCRICAO, CODUSU) Values (''31'', ''CONTRIBUIÇÃO MENSAL'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCCP (CODIGO, DESCRICAO, CODUSU) Values (''32'', ''CONTRIBUIÇÃO 13º SALÁRIO'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCCP (CODIGO, DESCRICAO, CODUSU) Values (''34'', ''CONTRIBUIÇÃO SEST'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCCP (CODIGO, DESCRICAO, CODUSU) Values (''35'', ''CONTRIBUIÇÃO SENAT'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCCP (CODIGO, DESCRICAO, CODUSU) Values (''51'', ''SALÁRIO-FAMÍLIA'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCCP (CODIGO, DESCRICAO, CODUSU) Values (''61'', ''COMPLEMENTO DE SALÁRIO-MÍNIMO - REGIME PRÓPRIO DE PREVIDÊNCIA SOCIAL'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCCP (CODIGO, DESCRICAO, CODUSU) Values (''91'', ''SUSPENSÃO DE INCIDÊNCIA MENSAL'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCCP (CODIGO, DESCRICAO, CODUSU) Values (''92'', ''SUSPENSÃO DE INCIDÊNCIA 13º SALÁRIO'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCCP (CODIGO, DESCRICAO, CODUSU) Values (''93'', ''SUSPENSÃO DE INCIDÊNCIA SALÁRIO MATERNIDADE'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCCP (CODIGO, DESCRICAO, CODUSU) Values (''94'', ''SUSPENSÃO DE INCIDÊNCIA SALÁRIO MATERNIDADE 13º SALÁRIO'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCCP (CODIGO, DESCRICAO, CODUSU) Values (''95'', ''SUSPENSÃO DE INCIDÊNCIA EXCLUSIVA DO EMPREGADOR - MENSAL'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCCP (CODIGO, DESCRICAO, CODUSU) Values (''96'', ''SUSPENSÃO DE INCIDÊNCIA EXCLUSIVA DO EMPREGADOR - 13º SALÁRIO'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCCP (CODIGO, DESCRICAO, CODUSU) Values (''97'', ''SUSPENSÃO DE INCIDÊNCIA EXCLUSIVA DO EMPREGADOR - SALÁRIO MATERNIDADE'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCCP (CODIGO, DESCRICAO, CODUSU) Values (''98'', ''SUSPENSÃO DE INCIDÊNCIA EXCLUSIVA DO EMPREGADOR - SALÁRIO MATERNIDADE 13º SALÁRIO'', 0)';
                        
            EXECUTE IMMEDIATE 'Insert into TFPINCFGTS (CODIGO, DESCRICAO, CODUSU) Values (''00'', ''NÃO É BASE DE CÁLCULO DO FGTS'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCFGTS (CODIGO, DESCRICAO, CODUSU) Values (''11'', ''REMUNERAÇÃO MENSAL DO FGTS'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCFGTS (CODIGO, DESCRICAO, CODUSU) Values (''12'', ''REMUNERAÇÃO 13° SALÁRIO'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCFGTS (CODIGO, DESCRICAO, CODUSU) Values (''21'', ''REMUNERAÇÃO DO FGTS RESCISÓRIO (AVISO PRÉVIO)'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCFGTS (CODIGO, DESCRICAO, CODUSU) Values (''91'', ''INCIDÊNCIA SUSPENSA EM DECORRÊNCIA DE DECISÃO JUDICIAL'', 0)';
                        
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''00'', ''RENDIMENTO NÃO TRIBUTÁVEL'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''01'', ''RENDIMENTO NÃO TRIBUTÁVEL EM FUNÇÃO DE ACORDOS INTERNACIONAIS DE BITRIBUTAÇÃO'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''09'', ''OUTRAS VERBAS NÃO CONSIDERADAS COMO BASE DE CÁLCULO OU RENDIMENTO'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''11'', ''REMUNERAÇÃO MENSAL'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''12'', ''13º SALÁRIO'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''13'', ''FÉRIAS'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''14'', ''PLR'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''15'', ''RENDIMENTOS RECEBIDOS ACUMULADAMENTE - RRA'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''31'', ''RETENÇÕES REMUNERAÇÃO MENSAL'', 0)';
            
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''32'', ''RETENÇÕES 13º SALÁRIO'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''33'', ''RETENÇÕES FÉRIAS'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''34'', ''RETENÇÕES PLR'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''35'', ''RETENÇÕES RRA'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''41'', ''DEDUÇÕES PREVIDÊNCIA SOCIAL OFICIAL - REMUNER MENSAL'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''42'', ''DEDUÇÕES PREVIDÊNCIA SOCIAL OFICIAL - 13° SALÁRIO'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''43'', ''DEDUÇÕES PREVIDÊNCIA SOCIAL OFICIAL - FÉRIAS'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''44'', ''DEDUÇÕES PREVIDÊNCIA SOCIAL OFICIAL - RRA'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''46'', ''DEDUÇÕES PREVIDÊNCIA PRIVADA - SALÁRIO MENSAL'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''47'', ''DEDUÇÕES PREVIDÊNCIA PRIVADA - 13° SALÁRIO'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''51'', ''DEDUÇÕES PENSÃO ALIMENTÍCIA - REMUNERAÇÃO MENSAL'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''52'', ''DEDUÇÕES PENSÃO ALIMENTÍCIA - 13° SALÁRIO'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''53'', ''DEDUÇÕES PENSÃO ALIMENTÍCIA - FÉRIAS'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''54'', ''DEDUÇÕES PENSÃO ALIMENTÍCIA - PLR'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''55'', ''DEDUÇÕES PENSÃO ALIMENTÍCIA - RRA'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''61'', ''DEDUÇÕES FUNDO DE APOSENTADORIA PROGRAMADA INDIVIDUAL - REMUNERAÇÃO MENSAL'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''62'', ''DEDUÇÕES FUNDO DE APOSENTADORIA PROGRAMADA INDIVIDUAL - 13° SALÁRIO'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''63'', ''DEDUÇÕES FUNPRESP - REMUNERAÇÃO MENSAL'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''64'', ''DEDUÇÕES FUNPRESP - 13° SALÁRIO'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''70'', ''ISENÇÕES - PARCELA ISENTA 65 ANOS - REMUNERAÇÃO MENSAL'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''71'', ''ISENÇÕES - PARCELA ISENTA 65 ANOS - 13° SALÁRIO'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''72'', ''ISENÇÕES - DIÁRIAS'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''73'', ''ISENÇÕES - AJUDA DE CUSTO'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''74'', ''ISENÇÕES - INDENIZAÇÃO E RESCISÃO DE CONTRATO, INCLUSIVE A TÍTULO DE PDV E ACIDENTES DE TRABALHO'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''75'', ''ISENÇÕES - ABONO PECUNIÁRIO'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''76'', ''ISENÇÕES - PENSÃO, APOSENTADORIA OU REFORMA POR MOLÉSTIA GRAVE OU ACIDENTE EM SERVIÇO - REMUNERAÇÃO MENSAL'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''77'', ''ISENÇÕES - PENSÃO, APOSENTADORIA OU REFORMA POR MOLÉSTIA GRAVE OU ACIDENTE EM SERVIÇO - 13° SALÁRIO'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''78'', ''ISENÇÕES - VALORES PAGOS A TITULAR OU SÓCIO DE MICROEMPRESA OU EMPRESA DE PEQUENO PORTE, EXCETO PRÓ-LABORE E ALUGUEIS'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''79'', ''ISENÇÕES - OUTRAS ISENÇÕES (O NOME DA RUBRICA DEVE SER CLARO PARA IDENTIFICAÇÃO DA NATUREZA DOS VALORES)'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''81'', ''DEPÓSITO JUDICIAL'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''82'', ''COMPENSAÇÃO JUDICIAL DO ANO CALENDÁRIO'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''83'', ''COMPENSAÇÃO JUDICIAL DE ANOS ANTERIORES'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''91'', ''INCIDÊNCIA SUSPENSA DECORRENTE DE DECISÃO JUDICIAL - REMUNERAÇÃO MENSAL'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''92'', ''INCIDÊNCIA SUSPENSA DECORRENTE DE DECISÃO JUDICIAL - 13º SALÁRIO'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''93'', ''INCIDÊNCIA SUSPENSA DECORRENTE DE DECISÃO JUDICIAL - FÉRIAS'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''94'', ''INCIDÊNCIA SUSPENSA DECORRENTE DE DECISÃO JUDICIAL - PLR'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCIRRF (CODIGO, DESCRICAO, CODUSU) Values (''95'', ''INCIDÊNCIA SUSPENSA DECORRENTE DE DECISÃO JUDICIAL - RRA'', 0)';
                                  
            EXECUTE IMMEDIATE 'Insert into TFPINCSIND (CODIGO, DESCRICAO, CODUSU) Values (''00'', ''NÃO É BASE DE CÁLCULO'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCSIND (CODIGO, DESCRICAO, CODUSU) Values (''11'', ''BASE DE CÁLCULO'', 0)';
               
            EXECUTE IMMEDIATE 'Insert into TFPINCSIND (CODIGO, DESCRICAO, CODUSU) Values (''31'', ''VALOR DA CONTRIBUIÇÃO SINDICAL LABORAL DESCONTADA'', 0)';
            
            EXECUTE IMMEDIATE 'Insert into TFPINCSIND (CODIGO, DESCRICAO, CODUSU) Values (''91'', ''INCIDÊNCIA SUSPENSA EM DECORRÊNCIA DE DECISÃO JUDICIAL'', 0)';


        EXCEPTION
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001,SQLERRM);
        END;
    END IF;

END;
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 10/04/2018 11:24:10
Num.Script: 52870-0-0
Nro. O.S. : 1169840
Nome      : Criar - TFPVAES
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPVAES
NomeObjeto: TFPVAES
TipoObjeto: TABLE
NomeTabela: TFPVAES
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE GLOBAL TEMPORARY TABLE TFPVAES(
    CHAVE           VARCHAR2(100), 
    VALIDACAO       CHAR(1),         
    DTREF           DATE,      
    SEQUENCIA       NUMBER(5), 
    CONTROLE        CHAR(1),
    CONSTRAINT PK_TFPVAES PRIMARY KEY (CHAVE)      
)
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 10/04/2018 11:24:10
Num.Script: 52871-0-0
Nro. O.S. : 1169840
Nome      : Criar - SNK_CLEAR_ROW_PENDENTE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - SNK_CLEAR_ROW_PENDENTE
NomeObjeto: SNK_CLEAR_ROW_PENDENTE
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_CLEAR_ROW_PENDENTE(P_NOMETAB               VARCHAR2,
                                                   P_CODEMPMATRIZ          NUMBER,
                                                   P_DTREF                 DATE,
                                                   P_TPAMB                 CHAR,
                                                   P_SEQUENCIA OUT         NUMBER)
AS
    queSql      VARCHAR2(4000) := ' ';
BEGIN
    queSql := ' SELECT NVL(MAX(SEQUENCIA), 0) '||  
              ' FROM ' || P_NOMETAB || 
              ' WHERE CODEMP = :CODEMP '||
              '  AND DTREF = :DTREF '||
              '  AND TPAMB = :TPAMB '||
              '  AND STATUS = ''P''';

     EXECUTE IMMEDIATE queSql INTO P_SEQUENCIA USING P_CODEMPMATRIZ, P_DTREF, P_TPAMB;

     IF P_SEQUENCIA > 0 THEN /* SE EXISTE STATUS IGUAL A 'P' PODEMOS DELETAR, JA QUE MANDAMOS TODAS AS INFORMACOES DE UMA SO VEZ! */
        FOR CUR_DEL IN (SELECT NOMETAB
                        FROM TFPMON
                        WHERE NOMEEVEVENTOPAI IS NULL 
                          AND TIPO IN ('C', 'M')) LOOP
           queSql := ' DELETE FROM ' || CUR_DEL.NOMETAB || '
                       WHERE CODEMP = :CODEMP
                       AND DTREF = :DTREF
                       AND TPAMB = :TPAMB
                       AND SEQUENCIA = :SEQUENCIA';

           EXECUTE IMMEDIATE queSql USING P_CODEMPMATRIZ, P_DTREF, P_TPAMB, P_SEQUENCIA;
        END LOOP;
     END IF;
END;
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 10/04/2018 11:24:10
Num.Script: 52872-0-1000
Nro. O.S. : 1169840
Nome      : INSERE - THOOBJ - 5287100
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_CLEAR_ROW_PENDENTE
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210007
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_CLEAR_ROW_PENDENTE' NOMEOBJ, 52871 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, '65501d3b3643a68b3a024af30aa20e29' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_CLEAR_ROW_PENDENTE' and THO.hashcode = '65501d3b3643a68b3a024af30aa20e29')
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 10/04/2018 11:24:10
Num.Script: 52873-0-0
Nro. O.S. : 1169840
Nome      : Alterar - SNK_GET_VALID_ALTER_ESOCIAL
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - SNK_GET_VALID_ALTER_ESOCIAL
NomeObjeto: SNK_GET_VALID_ALTER_ESOCIAL
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_GET_VALID_ALTER_ESOCIAL(P_EVENTO            VARCHAR2,
                                                        P_COLUNAS_PADRAO    VARCHAR2,
                                                        P_CODEMPMATRIZ      NUMBER,
                                                        P_DTREF             DATE,
                                                        P_SEQUENCIA         NUMBER,
                                                        P_TPAMB             CHAR,
                                                        P_NOMETAB_PAI       VARCHAR2 := NULL,
                                                        P_NOMETAB           VARCHAR2,
                                                        P_NOMEVIEW          VARCHAR2,
                                                        P_TIPO              CHAR)
IS
   TYPE CURTYPE        IS REF CURSOR;
   CURVAL              CURTYPE;
   P_CONDITION         VARCHAR2(4000);
   queSql              VARCHAR2(4000);
   queUpd              VARCHAR2(4000);
   P_RESULT_QUERY      NUMBER;
   P_TABLE_PAI         VARCHAR2(100);
   P_CHAVES            VARCHAR2(4000);
   P_CHAVES_ALT        VARCHAR2(4000);
   P_CHAVE             VARCHAR2(50);
   P_VALIDACAO         VARCHAR2(50);
   P_NOMETAB_UTIL      VARCHAR2(100);
   P_COL_PAD_FILHOS    VARCHAR2(100) := 'CODEMP, DTREF, CHAVE, SEQUENCIA, TPAMB';
   P_FILTRO_FILHOS     VARCHAR2(4000);
   P_COUNT             NUMBER(10);
   P_DTLOG             DATE;
   P_SEQLOG            NUMBER(10);
   P_MSG               VARCHAR2(4000);
BEGIN
   
    P_CHAVES := NULL;
    P_CHAVES_ALT := NULL;

    IF P_NOMETAB = 'TFPS2200' THEN
        P_NOMETAB_UTIL := 'TFPS2200';
        INSERT INTO TFPVAES (CHAVE, VALIDACAO, DTREF, SEQUENCIA, CONTROLE)
        SELECT CHAVE, VALIDACAO, DTREF, SEQUENCIA, CONTROLE
                      FROM ( SELECT O.CHAVE
                                  , CASE WHEN N.CODEMP IS NULL AND O.ACAO <> 'E' THEN 'E'
                                         WHEN (N.CODEMP IS NULL AND O.ACAO = 'E') OR (NVL(N.INFOCOTA, ' ') = NVL(O.INFOCOTA, ' ') AND NVL(N.OBSERVACAO, ' ') = NVL(O.OBSERVACAO, ' ') AND NVL(N.TRABAPOSENT, ' ') = NVL(O.TRABAPOSENT, ' ') AND 
                                                                                        NVL(N.FONEPRINC, ' ') = NVL(O.FONEPRINC, ' ') AND NVL(N.FONEALTERNAT, ' ') = NVL(O.FONEALTERNAT, ' ') AND 
                                                                                        NVL(N.EMAILPRINC, ' ') = NVL(O.EMAILPRINC, ' ') AND NVL(N.MATRICULA, ' ') = NVL(O.MATRICULA, ' ') AND NVL(N.TPREGTRAB, 0) = NVL(O.TPREGTRAB, 0) AND 
                                                                                        NVL(N.TPREGPREV, 0) = NVL(O.TPREGPREV, 0) AND NVL(N.NRRECINFPRELIM, ' ') = NVL(O.NRRECINFPRELIM, ' ') AND NVL(N.CADINI, ' ') = NVL(O.CADINI, ' ') AND 
                                                                                        NVL(N.DTADM, SYSDATE) = NVL(O.DTADM, SYSDATE) AND NVL(N.TPADMISSAO, 0) = NVL(O.TPADMISSAO, 0) AND NVL(N.INDADMISSAO, 0) = NVL(O.INDADMISSAO, 0) AND 
                                                                                        NVL(N.TPREGJOR, 0) = NVL(O.TPREGJOR, 0) AND NVL(N.NATATIVIDADE, 0) = NVL(O.NATATIVIDADE, 0) AND NVL(N.DTBASE, 0) = NVL(O.DTBASE, 0) AND 
                                                                                        NVL(N.CNPJSINDCATEGPROF, ' ') = NVL(O.CNPJSINDCATEGPROF, ' ') AND NVL(N.OPCFGTS, 0) = NVL(O.OPCFGTS, 0) AND 
                                                                                        NVL(N.DTOPCFGTS, SYSDATE) = NVL(O.DTOPCFGTS, SYSDATE) AND NVL(N.HIPLEG, 0) = NVL(O.HIPLEG, 0) AND NVL(N.JUSTCONTR, ' ') = NVL(O.JUSTCONTR, ' ') AND 
                                                                                        NVL(N.TPINCLCONTR, 0) = NVL(O.TPINCLCONTR, 0) AND NVL(N.TPINSCIDETOMADORSERV, 0) = NVL(O.TPINSCIDETOMADORSERV, 0) AND 
                                                                                        NVL(N.NRINSCIDETOMADORSERV, ' ') = NVL(O.NRINSCIDETOMADORSERV, ' ') AND NVL(N.TPINSCIDEESTABVINC, 0) = NVL(O.TPINSCIDEESTABVINC, 0) AND 
                                                                                        NVL(N.NRINSCIDEESTABVINC, ' ') = NVL(O.NRINSCIDEESTABVINC, ' ') AND NVL(N.CPFTRABSUBST, ' ') = NVL(O.CPFTRABSUBST, ' ') AND 
                                                                                        NVL(N.INDPROVIM, 0) = NVL(O.INDPROVIM, 0) AND NVL(N.TPPROV, 0) = NVL(O.TPPROV, 0) AND NVL(N.DTNOMEACAO, SYSDATE) = NVL(O.DTNOMEACAO, SYSDATE) AND 
                                                                                        NVL(N.DTPOSSE, SYSDATE) = NVL(O.DTPOSSE, SYSDATE) AND NVL(N.DTEXERCICIO, SYSDATE) = NVL(O.DTEXERCICIO, SYSDATE) AND 
                                                                                        NVL(N.TPPLANRP, 0) = NVL(O.TPPLANRP, 0) AND NVL(N.NRPROCJUDINFODECJUD, ' ') = NVL(O.NRPROCJUDINFODECJUD, ' ') AND 
                                                                                        NVL(N.CODCARGO, ' ') = NVL(O.CODCARGO, ' ') AND NVL(N.CODFUNCAO, ' ') = NVL(O.CODFUNCAO, ' ') AND NVL(N.CODCATEG, 0) = NVL(O.CODCATEG, 0) AND 
                                                                                        NVL(N.CODCATEG2, 0) = NVL(O.CODCATEG2, 0) AND NVL(N.CODCARREIRA, ' ') = NVL(O.CODCARREIRA, ' ') AND 
                                                                                        NVL(N.DTINGRCARR, SYSDATE) = NVL(O.DTINGRCARR, SYSDATE) AND NVL(N.VRSALFX, 0) = NVL(O.VRSALFX, 0) AND NVL(N.UNDSALFIXO, 0) = NVL(O.UNDSALFIXO, 0) AND 
                                                                                        NVL(N.DSCSALVAR, ' ') = NVL(O.DSCSALVAR, ' ') AND NVL(N.TPCONTR, 0) = NVL(O.TPCONTR, 0) AND NVL(N.DTTERM, SYSDATE) = NVL(O.DTTERM, SYSDATE) AND 
                                                                                        NVL(N.CLAUASSEG, ' ') = NVL(O.CLAUASSEG, ' ') AND NVL(N.TPINSCLOCALTRABGERAL, 0) = NVL(O.TPINSCLOCALTRABGERAL, 0) AND 
                                                                                        NVL(N.NRINSCLOCALTRABGERAL, ' ') = NVL(O.NRINSCLOCALTRABGERAL, ' ') AND NVL(N.TPLOGRADLOCALTRABDOM, ' ') = NVL(O.TPLOGRADLOCALTRABDOM, ' ') AND 
                                                                                        NVL(N.DSCLOGRADLOCALTRABDOM, ' ') = NVL(O.DSCLOGRADLOCALTRABDOM, ' ') AND NVL(N.NRLOGRADLOCALTRABDOM, ' ') = NVL(O.NRLOGRADLOCALTRABDOM, ' ') AND 
                                                                                        NVL(N.COMPLEMENTOLOCALTRABDOM, ' ') = NVL(O.COMPLEMENTOLOCALTRABDOM, ' ') AND NVL(N.BAIRROLOCALTRABDOM, ' ') = NVL(O.BAIRROLOCALTRABDOM, ' ') AND 
                                                                                        NVL(N.CEPLOCALTRABDOM, ' ') = NVL(O.CEPLOCALTRABDOM, ' ') AND NVL(N.CODMUNICLOCALTRABDOM, 0) = NVL(O.CODMUNICLOCALTRABDOM, 0) AND 
                                                                                        NVL(N.UFLOCALTRABDOM, ' ') = NVL(O.UFLOCALTRABDOM, ' ') AND NVL(N.QTDHRSSEM, 0) = NVL(O.QTDHRSSEM, 0) AND NVL(N.TPJORNADA, 0) = 
                                                                                        NVL(O.TPJORNADA, 0) AND NVL(N.DSCTPJORN, ' ') = NVL(O.DSCTPJORN, ' ') AND NVL(N.TMPPARC, ' ') = NVL(O.TMPPARC, ' ') AND 
                                                                                        NVL(N.CNPJSINDTRAB, ' ') = NVL(O.CNPJSINDTRAB, ' ') AND NVL(N.NRPROCJUDALVARAJUDICIAL, ' ') = NVL(O.NRPROCJUDALVARAJUDICIAL, ' ') AND 
                                                                                        NVL(N.CNPJEMPREGANT, ' ') = NVL(O.CNPJEMPREGANT, ' ') AND NVL(N.MATRICANT, ' ') = NVL(O.MATRICANT, ' ') AND 
                                                                                        NVL(N.DTINIVINCULO, SYSDATE) = NVL(O.DTINIVINCULO, SYSDATE) AND NVL(N.OBSERVACAOSUCESSAOVINC, ' ') = NVL(O.OBSERVACAOSUCESSAOVINC, ' ') AND 
                                                                                        NVL(N.DTINIAFAST, SYSDATE) = NVL(O.DTINIAFAST, SYSDATE) AND NVL(N.CODMOTAFAST, ' ') = NVL(O.CODMOTAFAST, ' ') AND 
                                                                                        NVL(N.DTDESLIG, SYSDATE) = NVL(O.DTDESLIG, SYSDATE) AND N.CHAVE = O.CHAVE AND NVL(N.DTEXPEDRIC, SYSDATE) = NVL(O.DTEXPEDRIC, SYSDATE) AND 
                                                                                        NVL(N.TPINSCEMPREGADOR, 0) = NVL(O.TPINSCEMPREGADOR, 0) AND NVL(N.NRINSCEMPREGADOR, ' ') = NVL(O.NRINSCEMPREGADOR, ' ') AND 
                                                                                        NVL(N.CPFTRAB, ' ') = NVL(O.CPFTRAB, ' ') AND NVL(N.NISTRAB, ' ') = NVL(O.NISTRAB, ' ') AND NVL(N.NMTRAB, ' ') = NVL(O.NMTRAB, ' ') AND 
                                                                                        NVL(N.SEXO, ' ') = NVL(O.SEXO, ' ') AND NVL(N.RACACOR, 0) = NVL(O.RACACOR, 0) AND NVL(N.ESTCIV, 0) = NVL(O.ESTCIV, 0) AND 
                                                                                        NVL(N.GRAUINSTR, ' ') = NVL(O.GRAUINSTR, ' ') AND NVL(N.INDPRIEMPR, ' ') = NVL(O.INDPRIEMPR, ' ') AND NVL(N.NMSOC, ' ') = NVL(O.NMSOC, ' ') AND 
                                                                                        NVL(N.DTNASCTONASCIMENTO, SYSDATE) = NVL(O.DTNASCTONASCIMENTO, SYSDATE) AND NVL(N.CODMUNICNASCIMENTO, 0) = NVL(O.CODMUNICNASCIMENTO, 0) AND 
                                                                                        NVL(N.UFNASCIMENTO, ' ') = NVL(O.UFNASCIMENTO, ' ') AND NVL(N.PAISNASCTONASCIMENTO, ' ') = NVL(O.PAISNASCTONASCIMENTO, ' ') AND 
                                                                                        NVL(N.PAISNACNASCIMENTO, ' ') = NVL(O.PAISNACNASCIMENTO, ' ') AND NVL(N.NMMAENASCIMENTO, ' ') = NVL(O.NMMAENASCIMENTO, ' ') AND 
                                                                                        NVL(N.NMPAINASCIMENTO, ' ') = NVL(O.NMPAINASCIMENTO, ' ') AND NVL(N.NRCTPS, ' ') = NVL(O.NRCTPS, ' ') AND 
                                                                                        NVL(N.SERIECTPS, ' ') = NVL(O.SERIECTPS, ' ') AND NVL(N.UFCTPS, ' ') = NVL(O.UFCTPS, ' ') AND NVL(N.NRRIC, ' ') = NVL(O.NRRIC, ' ') AND 
                                                                                        NVL(N.ORGAOEMISSORRIC, ' ') = NVL(O.ORGAOEMISSORRIC, ' ') AND NVL(N.NRRG, ' ') = NVL(O.NRRG, ' ') AND 
                                                                                        NVL(N.ORGAOEMISSORRG, ' ') = NVL(O.ORGAOEMISSORRG, ' ') AND NVL(N.DTEXPEDRG, SYSDATE) = NVL(O.DTEXPEDRG, SYSDATE) AND 
                                                                                        NVL(N.NRRNE, ' ') = NVL(O.NRRNE, ' ') AND NVL(N.ORGAOEMISSORRNE, ' ') = NVL(O.ORGAOEMISSORRNE, ' ') AND 
                                                                                        NVL(N.DTEXPEDRNE, SYSDATE) = NVL(O.DTEXPEDRNE, SYSDATE) AND NVL(N.NROC, ' ') = NVL(O.NROC, ' ') AND 
                                                                                        NVL(N.ORGAOEMISSOROC, ' ') = NVL(O.ORGAOEMISSOROC, ' ') AND NVL(N.DTEXPEDOC, SYSDATE) = NVL(O.DTEXPEDOC, SYSDATE) AND 
                                                                                        NVL(N.DTVALIDOC, SYSDATE) = NVL(O.DTVALIDOC, SYSDATE) AND NVL(N.NRREGCNH, ' ') = NVL(O.NRREGCNH, ' ') AND 
                                                                                        NVL(N.DTEXPEDCNH, SYSDATE) = NVL(O.DTEXPEDCNH, SYSDATE) AND NVL(N.UFCNH, ' ') = NVL(O.UFCNH, ' ') AND 
                                                                                        NVL(N.DTVALIDCNH, SYSDATE) = NVL(O.DTVALIDCNH, SYSDATE) AND NVL(N.DTPRIHAB, SYSDATE) = NVL(O.DTPRIHAB, SYSDATE) AND 
                                                                                        NVL(N.CATEGORIACNH, ' ') = NVL(O.CATEGORIACNH, ' ') AND NVL(N.TPLOGRADBRASIL, ' ') = NVL(O.TPLOGRADBRASIL, ' ') AND 
                                                                                        NVL(N.DSCLOGRADBRASIL, ' ') = NVL(O.DSCLOGRADBRASIL, ' ') AND NVL(N.NRLOGRADBRASIL, ' ') = NVL(O.NRLOGRADBRASIL, ' ') AND 
                                                                                        NVL(N.COMPLEMENTOBRASIL, ' ') = NVL(O.COMPLEMENTOBRASIL, ' ') AND NVL(N.BAIRROBRASIL, ' ') = NVL(O.BAIRROBRASIL, ' ') AND
                                                                                         NVL(N.CEPBRASIL, ' ') = NVL(O.CEPBRASIL, ' ') AND NVL(N.CODMUNICBRASIL, ' ') = NVL(O.CODMUNICBRASIL, ' ') AND 
                                                                                         NVL(N.UFBRASIL, ' ') = NVL(O.UFBRASIL, ' ') AND NVL(N.PAISRESID, ' ') = NVL(O.PAISRESID, ' ') AND 
                                                                                         NVL(N.DSCLOGRADEXTERIOR, ' ') = NVL(O.DSCLOGRADEXTERIOR, ' ') AND NVL(N.NRLOGRADEXTERIOR, ' ') = NVL(O.NRLOGRADEXTERIOR, ' ') AND 
                                                                                         NVL(N.COMPLEMENTOEXTERIOR, ' ') = NVL(O.COMPLEMENTOEXTERIOR, ' ') AND NVL(N.BAIRROEXTERIOR, ' ') = NVL(O.BAIRROEXTERIOR, ' ') AND 
                                                                                         NVL(N.NMCIDEXTERIOR, ' ') = NVL(O.NMCIDEXTERIOR, ' ') AND NVL(N.CODPOSTALEXTERIOR, ' ') = NVL(O.CODPOSTALEXTERIOR, ' ') AND 
                                                                                        NVL(N.DTCHEGADA, SYSDATE) = NVL(O.DTCHEGADA, SYSDATE) AND NVL(N.CLASSTRABESTRANG, 0) = NVL(O.CLASSTRABESTRANG, 0) AND 
                                                                                        NVL(N.CASADOBR, ' ') = NVL(O.CASADOBR, ' ') AND NVL(N.FILHOSBR, ' ') = NVL(O.FILHOSBR, ' ') AND NVL(N.DEFFISICA, ' ') = NVL(O.DEFFISICA, ' ') AND 
                                                                                        NVL(N.DEFVISUAL, ' ') = NVL(O.DEFVISUAL, ' ') AND NVL(N.DEFAUDITIVA, ' ') = NVL(O.DEFAUDITIVA, ' ') AND NVL(N.DEFMENTAL, ' ') = NVL(O.DEFMENTAL, ' ') AND 
                                                                                        NVL(N.DEFINTELECTUAL, ' ') = NVL(O.DEFINTELECTUAL, ' ') AND NVL(N.REABREADAP, ' ') = NVL(O.REABREADAP, ' ')) THEN 'I'
                                         ELSE 'A'
                                    END AS VALIDACAO
                                  , O.DTREF
                                  , O.SEQUENCIA
                                  , O.CONTROLE
                             FROM TFPS2200 O
                                  LEFT JOIN VGF_EVENTO_S2200 N ON O.CODEMP = N.CODEMP AND O.CHAVE = N.CHAVE
                             WHERE O.CODEMP = P_CODEMPMATRIZ
                               AND O.DTREF = (SELECT MAX(DTREF)
                                              FROM TFPS2200 D
                                              WHERE D.CODEMP = O.CODEMP
                                                AND D.TPAMB = O.TPAMB
                                                AND D.CHAVE = O.CHAVE
                                                AND D.STATUS = 'F'
                                                AND D.NRORECIBO IS NOT NULL
                                                AND D.ACAO <> 'E'
                                              )
                               AND O.TPAMB = P_TPAMB
                               AND O.SEQUENCIA = (SELECT MAX(SEQUENCIA)
                                                  FROM TFPS2200 S
                                                  WHERE S.CODEMP = O.CODEMP
                                                    AND S.TPAMB = O.TPAMB
                                                    AND S.CHAVE = O.CHAVE
                                                    AND S.DTREF = (SELECT MAX(DTREF)
                                                                   FROM TFPS2200 D
                                                                   WHERE D.CODEMP = O.CODEMP
                                                                     AND D.TPAMB = O.TPAMB
                                                                     AND D.CHAVE = O.CHAVE
                                                                     AND D.STATUS = 'F'
                                                                     AND D.NRORECIBO IS NOT NULL
                                                                     AND D.ACAO <> 'E'
                                                                  )
                                                    AND S.STATUS = 'F'
                                                    AND S.NRORECIBO IS NOT NULL
                                                    AND S.ACAO <> 'E'
                                                  )
                               AND NOT EXISTS(SELECT 1
                                              FROM TFPS2200 R
                                              WHERE R.CODEMP = O.CODEMP
                                                AND R.TPAMB = O.TPAMB
                                                AND R.CHAVE = O.CHAVE
                                                AND R.STATUS = 'F'
                                                AND R.NRORECIBO IS NOT NULL
                                                AND R.ACAO = 'E'
                                                AND (R.DTREF > O.DTREF OR (R.DTREF = O.DTREF AND R.SEQUENCIA > O.SEQUENCIA)))
                               
                          ) DTALT
                      WHERE (DTALT.VALIDACAO = 'A' AND DTALT.CONTROLE = 'I') OR 
                            (DTALT.VALIDACAO = 'I' AND DTALT.CONTROLE <> 'I');

    ELSIF P_NOMETAB = 'TFPS2300' THEN
        P_NOMETAB_UTIL := 'TFPS2300';

        INSERT INTO TFPVAES (CHAVE, VALIDACAO, DTREF, SEQUENCIA, CONTROLE)
            SELECT CHAVE, VALIDACAO, DTREF, SEQUENCIA, CONTROLE
                      FROM ( SELECT O.CHAVE
                                  , CASE WHEN N.CODEMP IS NULL AND O.ACAO <> 'E' THEN 'E'
                                         WHEN (N.CODEMP IS NULL AND O.ACAO = 'E') OR (NVL(N.NRLOGRADAGNTINTEG, ' ') = NVL(O.NRLOGRADAGNTINTEG, ' ') AND NVL(N.BAIRROAGNTINTEG, ' ') = NVL(O.BAIRROAGNTINTEG, ' ')
                                           AND NVL(N.CEPAGNTINTEG, ' ') = NVL(O.CEPAGNTINTEG, ' ') AND NVL(N.CODMUNICAGNTINTEG, 0) = NVL(O.CODMUNICAGNTINTEG, 0)
                                           AND NVL(N.UFAGNTINTEG, ' ') = NVL(O.UFAGNTINTEG, ' ') AND NVL(N.CPFSUPERVISOR, ' ') = NVL(O.CPFSUPERVISOR, ' ')
                                           AND NVL(N.NMSUPERV, ' ') = NVL(O.NMSUPERV, ' ') AND NVL(N.DTINIAFAST, SYSDATE) = NVL(O.DTINIAFAST, SYSDATE)
                                           AND NVL(N.CODMOTAFAST, ' ') = NVL(O.CODMOTAFAST, ' ') AND NVL(N.DTTERM, SYSDATE) = NVL(O.DTTERM, SYSDATE) AND N.CHAVE = O.CHAVE AND NVL(N.TPINSCEMPREGADOR, 0) = NVL(O.TPINSCEMPREGADOR, 0) AND NVL(N.NRINSCEMPREGADOR, ' ') = NVL(O.NRINSCEMPREGADOR, ' ') AND NVL(N.CPFTRAB, ' ') = NVL(O.CPFTRAB, ' ') AND NVL(N.NISTRAB, ' ') = NVL(O.NISTRAB, ' ') AND NVL(N.NMTRAB, ' ') = NVL(O.NMTRAB, ' ') AND NVL(N.SEXO, ' ') = NVL(O.SEXO, ' ') AND NVL(N.RACACOR, 0) = NVL(O.RACACOR, 0) AND NVL(N.ESTCIV, 0) = NVL(O.ESTCIV, 0) AND NVL(N.GRAUINSTR, ' ') = NVL(O.GRAUINSTR, ' ') AND NVL(N.NMSOC, ' ') = NVL(O.NMSOC, ' ') AND NVL(N.DTNASCTONASCIMENTO, SYSDATE) = NVL(O.DTNASCTONASCIMENTO, SYSDATE) AND NVL(N.CODMUNICNASCIMENTO, 0) = NVL(O.CODMUNICNASCIMENTO, 0) AND NVL(N.UFNASCIMENTO, ' ') = NVL(O.UFNASCIMENTO, ' ') AND NVL(N.PAISNASCTONASCIMENTO, ' ') = NVL(O.PAISNASCTONASCIMENTO, ' ') AND NVL(N.PAISNACNASCIMENTO, ' ') = NVL(O.PAISNACNASCIMENTO, ' ') AND NVL(N.NMMAENASCIMENTO, ' ') = NVL(O.NMMAENASCIMENTO, ' ') AND NVL(N.NMPAINASCIMENTO, ' ') = NVL(O.NMPAINASCIMENTO, ' ') AND NVL(N.NRCTPS, ' ') = NVL(O.NRCTPS, ' ') AND NVL(N.SERIECTPS, ' ') = NVL(O.SERIECTPS, ' ') AND NVL(N.UFCTPS, ' ') = NVL(O.UFCTPS, ' ') AND NVL(N.NRRIC, ' ') = NVL(O.NRRIC, ' ') AND NVL(N.ORGAOEMISSORRIC, ' ') = NVL(O.ORGAOEMISSORRIC, ' ') AND NVL(N.DTEXPEDRIC, SYSDATE) = NVL(O.DTEXPEDRIC, SYSDATE) AND NVL(N.NRRG, ' ') = NVL(O.NRRG, ' ') AND NVL(N.ORGAOEMISSORRG, ' ') = NVL(O.ORGAOEMISSORRG, ' ') AND NVL(N.DTEXPEDRG, SYSDATE) = NVL(O.DTEXPEDRG, SYSDATE) AND NVL(N.NRRNE, ' ') = NVL(O.NRRNE, ' ') AND NVL(N.ORGAOEMISSORRNE, ' ') = NVL(O.ORGAOEMISSORRNE, ' ') AND NVL(N.DTEXPEDRNE, SYSDATE) = NVL(O.DTEXPEDRNE, SYSDATE) AND NVL(N.NROC, ' ') = NVL(O.NROC, ' ') AND NVL(N.ORGAOEMISSOROC, ' ') = NVL(O.ORGAOEMISSOROC, ' ') AND NVL(N.DTEXPEDOC, SYSDATE) = NVL(O.DTEXPEDOC, SYSDATE) AND NVL(N.DTVALIDOC, SYSDATE) = NVL(O.DTVALIDOC, SYSDATE) AND NVL(N.NRREGCNH, ' ') = NVL(O.NRREGCNH, ' ') AND NVL(N.DTEXPEDCNH, SYSDATE) = NVL(O.DTEXPEDCNH, SYSDATE) AND NVL(N.UFCNH, ' ') = NVL(O.UFCNH, ' ') AND NVL(N.DTVALIDCNH, SYSDATE) = NVL(O.DTVALIDCNH, SYSDATE) AND NVL(N.DTPRIHAB, SYSDATE) = NVL(O.DTPRIHAB, SYSDATE) AND NVL(N.CATEGORIACNH, ' ') = NVL(O.CATEGORIACNH, ' ') AND NVL(N.TPLOGRADBRASIL, ' ') = NVL(O.TPLOGRADBRASIL, ' ') AND NVL(N.DSCLOGRADBRASIL, ' ') = NVL(O.DSCLOGRADBRASIL, ' ') AND NVL(N.NRLOGRADBRASIL, ' ') = NVL(O.NRLOGRADBRASIL, ' ') AND NVL(N.COMPLEMENTOBRASIL, ' ') = NVL(O.COMPLEMENTOBRASIL, ' ') AND NVL(N.BAIRROBRASIL, ' ') = NVL(O.BAIRROBRASIL, ' ') AND NVL(N.CEPBRASIL, ' ') = NVL(O.CEPBRASIL, ' ') AND NVL(N.CODMUNICBRASIL, 0) = NVL(O.CODMUNICBRASIL, 0) AND NVL(N.UFBRASIL, ' ') = NVL(O.UFBRASIL, ' ') AND NVL(N.PAISRESID, ' ') = NVL(O.PAISRESID, ' ') AND NVL(N.DSCLOGRADEXTERIOR, ' ') = NVL(O.DSCLOGRADEXTERIOR, ' ') AND NVL(N.NRLOGRADEXTERIOR, ' ') = NVL(O.NRLOGRADEXTERIOR, ' ') AND NVL(N.COMPLEMENTOEXTERIOR, ' ') = NVL(O.COMPLEMENTOEXTERIOR, ' ') AND NVL(N.BAIRROEXTERIOR, ' ') = NVL(O.BAIRROEXTERIOR, ' ')
                                           AND NVL(N.NMCIDEXTERIOR, ' ') = NVL(O.NMCIDEXTERIOR, ' ') AND NVL(N.CODPOSTALEXTERIOR, ' ') = NVL(O.CODPOSTALEXTERIOR, ' ') AND NVL(N.DTCHEGADA, SYSDATE) = NVL(O.DTCHEGADA, SYSDATE) AND NVL(N.CLASSTRABESTRANG, 0) = NVL(O.CLASSTRABESTRANG, 0) AND NVL(N.CASADOBR, ' ') = NVL(O.CASADOBR, ' ') AND NVL(N.FILHOSBR, ' ') = NVL(O.FILHOSBR, ' ') AND NVL(N.DEFFISICA, ' ') = NVL(O.DEFFISICA, ' ') AND NVL(N.DEFVISUAL, ' ') = NVL(O.DEFVISUAL, ' ') AND NVL(N.DEFAUDITIVA, ' ') = NVL(O.DEFAUDITIVA, ' ') AND NVL(N.DEFMENTAL, ' ') = NVL(O.DEFMENTAL, ' ') AND NVL(N.DEFINTELECTUAL, ' ') = NVL(O.DEFINTELECTUAL, ' ') AND NVL(N.REABREADAP, ' ') = NVL(O.REABREADAP, ' ') AND NVL(N.OBSERVACAO, ' ') = NVL(O.OBSERVACAO, ' ') AND NVL(N.FONEPRINC, ' ') = NVL(O.FONEPRINC, ' ') AND NVL(N.FONEALTERNAT, ' ') = NVL(O.FONEALTERNAT, ' ') AND NVL(N.EMAILPRINC, ' ') = NVL(O.EMAILPRINC, ' ') AND NVL(N.EMAILALTERNAT, ' ') = NVL(O.EMAILALTERNAT, ' ') AND NVL(N.CADINI, ' ') = NVL(O.CADINI, ' ') AND NVL(N.CODCATEG, 0) = NVL(O.CODCATEG, 0) AND NVL(N.DTINICIO, SYSDATE) = NVL(O.DTINICIO, SYSDATE) AND NVL(N.NATATIVIDADE, 0) = NVL(O.NATATIVIDADE, 0) AND NVL(N.CODCARGO, ' ') = NVL(O.CODCARGO, ' ') AND NVL(N.CODFUNCAO, ' ') = NVL(O.CODFUNCAO, ' ') AND NVL(N.VRSALFX, 0) = NVL(O.VRSALFX, 0) AND NVL(N.UNDSALFIXO, 0) = NVL(O.UNDSALFIXO, 0) AND NVL(N.DSCSALVAR, ' ') = NVL(O.DSCSALVAR, ' ') AND NVL(N.OPCFGTS, 0) = NVL(O.OPCFGTS, 0) AND NVL(N.DTOPCFGTS, SYSDATE) = NVL(O.DTOPCFGTS, SYSDATE) AND NVL(N.CATEGORIGDIRSIND, 0) = NVL(O.CATEGORIGDIRSIND, 0) AND NVL(N.CNPJORIGDIRSIND, ' ') = NVL(O.CNPJORIGDIRSIND, ' ') AND NVL(N.DTADMORIGDIRSIND, SYSDATE) = NVL(O.DTADMORIGDIRSIND, SYSDATE) AND NVL(N.MATRICORIGDIRSIND, ' ') = NVL(O.MATRICORIGDIRSIND, ' ') AND NVL(N.CATEGORIGCED, 0) = NVL(O.CATEGORIGCED, 0) AND NVL(N.CNPJCED, ' ') = NVL(O.CNPJCED, ' ') AND NVL(N.MATRICCED, ' ') = NVL(O.MATRICCED, ' ') AND NVL(N.DTADMCED, SYSDATE) = NVL(O.DTADMCED, SYSDATE) AND NVL(N.TPREGTRABCED, 0) = NVL(O.TPREGTRABCED, 0) AND NVL(N.TPREGPREVCED, 0) = NVL(O.TPREGPREVCED, 0) AND NVL(N.INFONUSCED, 0) = NVL(O.INFONUSCED, 0) AND NVL(N.NATESTAGIO, ' ') = NVL(O.NATESTAGIO, ' ') AND NVL(N.NIVESTAGIO, ' ') = NVL(O.NIVESTAGIO, ' ') AND NVL(N.AREAATUACAO, ' ') = NVL(O.AREAATUACAO, ' ') AND NVL(N.NRAPOL, ' ') = NVL(O.NRAPOL, ' ') AND NVL(N.VLRBOLSA, 0) = NVL(O.VLRBOLSA, 0) AND NVL(N.DTPREVTERM, SYSDATE) = NVL(O.DTPREVTERM, SYSDATE) AND NVL(N.CNPJINSTENSINO, ' ') = NVL(O.CNPJINSTENSINO, ' ') AND NVL(N.NMRAZAOINSTENS, ' ') = NVL(O.NMRAZAOINSTENS, ' ') AND NVL(N.DSCLOGRADINSTENS, ' ') = NVL(O.DSCLOGRADINSTENS, ' ') AND NVL(N.NRLOGRADINSTENS, ' ') = NVL(O.NRLOGRADINSTENS, ' ') AND NVL(N.BAIRROINSTENS, ' ') = NVL(O.BAIRROINSTENS, ' ') AND NVL(N.CEPINSTENS, ' ') = NVL(O.CEPINSTENS, ' ') AND NVL(N.CODMUNICINSTENS, 0) = NVL(O.CODMUNICINSTENS, 0) AND NVL(N.UFINSTENS, ' ') = NVL(O.UFINSTENS, ' ') AND NVL(N.CNPJAGNTINTEG, ' ') = NVL(O.CNPJAGNTINTEG, ' ') AND NVL(N.NMRAZAOAGNTINTEG, ' ') = NVL(O.NMRAZAOAGNTINTEG, ' ') AND NVL(N.DSCLOGRADAGNTINTEG, ' ') = NVL(O.DSCLOGRADAGNTINTEG, ' ')) THEN 'I'
                                         ELSE 'A'
                                    END AS VALIDACAO 
                                  , O.DTREF
                                  , O.SEQUENCIA
                                  , O.CONTROLE
                             FROM TFPS2300 O
                                 LEFT JOIN VGF_EVENTO_S2300 N ON O.CODEMP = N.CODEMP AND O.CHAVE = N.CHAVE
                             WHERE O.CODEMP = P_CODEMPMATRIZ
                               AND O.DTREF = (SELECT MAX(DTREF)
                                              FROM TFPS2300 D
                                              WHERE D.CODEMP = O.CODEMP
                                                AND D.TPAMB = O.TPAMB
                                                AND D.CHAVE = O.CHAVE
                                                AND D.STATUS = 'F'
                                                AND D.NRORECIBO IS NOT NULL
                                                AND D.ACAO <> 'E'
                                              )
                               AND O.SEQUENCIA = (SELECT MAX(SEQUENCIA)
                                                  FROM TFPS2300 S
                                                  WHERE S.CODEMP = O.CODEMP
                                                    AND S.TPAMB = O.TPAMB
                                                    AND S.CHAVE = O.CHAVE
                                                    AND S.DTREF = (SELECT MAX(DTREF)
                                                                   FROM TFPS2300 D
                                                                   WHERE D.CODEMP = O.CODEMP
                                                                     AND D.TPAMB = O.TPAMB
                                                                     AND D.CHAVE = O.CHAVE
                                                                     AND D.STATUS = 'F'
                                                                     AND D.NRORECIBO IS NOT NULL
                                                                     AND D.ACAO <> 'E'
                                                                  )
                                                    AND S.STATUS = 'F'
                                                    AND S.NRORECIBO IS NOT NULL
                                                    AND S.ACAO <> 'E'
                                                  )
                               AND NOT EXISTS(SELECT 1
                                              FROM TFPS2300 R
                                              WHERE R.CODEMP = O.CODEMP
                                                AND R.TPAMB = O.TPAMB
                                                AND R.CHAVE = O.CHAVE
                                                AND R.STATUS = 'F'
                                                AND R.NRORECIBO IS NOT NULL
                                                AND R.ACAO = 'E'
                                                AND (R.DTREF > O.DTREF OR (R.DTREF = O.DTREF AND R.SEQUENCIA > O.SEQUENCIA)))
                               AND O.TPAMB = P_TPAMB

                          ) DTALT
                      WHERE (DTALT.VALIDACAO = 'A' AND DTALT.CONTROLE = 'I') OR 
                            (DTALT.VALIDACAO = 'I' AND DTALT.CONTROLE <> 'I');
    ELSIF P_NOMETAB = 'TFPS2205' THEN
        P_NOMETAB_UTIL := 'TFPS2205';
        INSERT INTO TFPVAES (CHAVE, VALIDACAO, DTREF, SEQUENCIA, CONTROLE)
            SELECT CHAVE, VALIDACAO, DTREF, SEQUENCIA, CONTROLE
            FROM ( SELECT O.CHAVE
                                  , CASE WHEN N.CODEMP IS NULL AND O.ACAO <> 'E' THEN 'E'
                                         WHEN (NVL(N.TPINSCEMPREGADOR, 0) = NVL(O.TPINSCEMPREGADOR, 0) AND NVL(N.NRINSCEMPREGADOR, ' ') = NVL(O.NRINSCEMPREGADOR, ' ') AND NVL(N.CPFTRAB, ' ') = NVL(O.CPFTRAB, ' ') AND
                                               NVL(N.NISTRAB, ' ') = NVL(O.NISTRAB, ' ') AND NVL(N.NMTRAB, ' ') = NVL(O.NMTRAB, ' ') AND NVL(N.SEXO, ' ') = NVL(O.SEXO, ' ') AND NVL(N.RACACOR, 0) = NVL(O.RACACOR, 0) AND 
                                               NVL(N.ESTCIV, 0) = NVL(O.ESTCIV, 0) AND NVL(N.NMSOC, ' ') = NVL(O.NMSOC, ' ') AND NVL(N.NRCTPS, ' ') = NVL(O.NRCTPS, ' ') AND NVL(N.SERIECTPS, ' ') = NVL(O.SERIECTPS, ' ') AND 
                                               NVL(N.UFCTPS, ' ') = NVL(O.UFCTPS, ' ') AND NVL(N.NRRIC, ' ') = NVL(O.NRRIC, ' ') AND NVL(N.ORGAOEMISSORRIC, ' ') = NVL(O.ORGAOEMISSORRIC, ' ') AND 
                                               NVL(N.DTEXPEDRIC, SYSDATE) = NVL(O.DTEXPEDRIC, SYSDATE) AND NVL(N.NRRG, ' ') = NVL(O.NRRG, ' ') AND NVL(N.ORGAOEMISSORRG, ' ') = NVL(O.ORGAOEMISSORRG, ' ') AND 
                                               NVL(N.DTEXPEDRG, SYSDATE) = NVL(O.DTEXPEDRG, SYSDATE) AND NVL(N.NRRNE, ' ') = NVL(O.NRRNE, ' ') AND NVL(N.ORGAOEMISSORRNE, ' ') = NVL(O.ORGAOEMISSORRNE, ' ') AND 
                                               NVL(N.DTEXPEDRNE, SYSDATE) = NVL(O.DTEXPEDRNE, SYSDATE) AND NVL(N.NROC, ' ') = NVL(O.NROC, ' ') AND NVL(N.ORGAOEMISSOROC, ' ') = NVL(O.ORGAOEMISSOROC, ' ') AND 
                                               NVL(N.DTEXPEDOC, SYSDATE) = NVL(O.DTEXPEDOC, SYSDATE) AND NVL(N.DTVALIDOC, SYSDATE) = NVL(O.DTVALIDOC, SYSDATE) AND NVL(N.NRREGCNH, ' ') = NVL(O.NRREGCNH, ' ') AND 
                                               NVL(N.DTEXPEDCNH, SYSDATE) = NVL(O.DTEXPEDCNH, SYSDATE) AND NVL(N.UFCNH, ' ') = NVL(O.UFCNH, ' ') AND NVL(N.DTVALIDCNH, SYSDATE) = NVL(O.DTVALIDCNH, SYSDATE) AND 
                                               NVL(N.DTPRIHAB, SYSDATE) = NVL(O.DTPRIHAB, SYSDATE) AND NVL(N.CATEGORIACNH, ' ') = NVL(O.CATEGORIACNH, ' ') AND NVL(N.TPLOGRADBRASIL, ' ') = NVL(O.TPLOGRADBRASIL, ' ') AND 
                                               NVL(N.DSCLOGRADBRASIL, ' ') = NVL(O.DSCLOGRADBRASIL, ' ') AND NVL(N.NRLOGRADBRASIL, ' ') = NVL(O.NRLOGRADBRASIL, ' ') AND 
                                               NVL(N.COMPLEMENTOBRASIL, ' ') = NVL(O.COMPLEMENTOBRASIL, ' ') AND NVL(N.BAIRROBRASIL, ' ') = NVL(O.BAIRROBRASIL, ' ') AND NVL(N.CEPBRASIL, ' ') = NVL(O.CEPBRASIL, ' ') AND 
                                               NVL(N.CODMUNICBRASIL, 0) = NVL(O.CODMUNICBRASIL, 0) AND NVL(N.UFBRASIL, ' ') = NVL(O.UFBRASIL, ' ') AND NVL(N.PAISRESID, ' ') = NVL(O.PAISRESID, ' ') AND 
                                               NVL(N.DSCLOGRADEXTERIOR, ' ') = NVL(O.DSCLOGRADEXTERIOR, ' ') AND NVL(N.NRLOGRADEXTERIOR, ' ') = NVL(O.NRLOGRADEXTERIOR, ' ') AND 
                                               NVL(N.COMPLEMENTOEXTERIOR, ' ') = NVL(O.COMPLEMENTOEXTERIOR, ' ') AND NVL(N.BAIRROEXTERIOR, ' ') = NVL(O.BAIRROEXTERIOR, ' ') AND 
                                               NVL(N.NMCIDEXTERIOR, ' ') = NVL(O.NMCIDEXTERIOR, ' ') AND NVL(N.CODPOSTALEXTERIOR, ' ') = NVL(O.CODPOSTALEXTERIOR, ' ') AND 
                                               NVL(N.DTCHEGADA, SYSDATE) = NVL(O.DTCHEGADA, SYSDATE) AND NVL(N.CLASSTRABESTRANG, 0) = NVL(O.CLASSTRABESTRANG, 0) AND NVL(N.CASADOBR, ' ') = NVL(O.CASADOBR, ' ') AND 
                                               NVL(N.FILHOSBR, ' ') = NVL(O.FILHOSBR, ' ') AND NVL(N.DEFFISICA, ' ') = NVL(O.DEFFISICA, ' ') AND NVL(N.DEFVISUAL, ' ') = NVL(O.DEFVISUAL, ' ') AND 
                                               NVL(N.DEFAUDITIVA, ' ') = NVL(O.DEFAUDITIVA, ' ') AND NVL(N.DEFMENTAL, ' ') = NVL(O.DEFMENTAL, ' ') AND NVL(N.DEFINTELECTUAL, ' ') = NVL(O.DEFINTELECTUAL, ' ') AND 
                                               NVL(N.REABREADAP, ' ') = NVL(O.REABREADAP, ' ') AND NVL(N.INFOCOTA, ' ') = NVL(O.INFOCOTA, ' ') AND NVL(N.OBSERVACAO, ' ') = NVL(O.OBSERVACAO, ' ') AND 
                                               NVL(N.TRABAPOSENT, ' ') = NVL(O.TRABAPOSENT, ' ') AND NVL(N.FONEPRINC, ' ') = NVL(O.FONEPRINC, ' ') AND NVL(N.FONEALTERNAT, ' ') = NVL(O.FONEALTERNAT, ' ') AND 
                                               NVL(N.EMAILPRINC, ' ') = NVL(O.EMAILPRINC, ' ') AND N.CHAVE = O.CHAVE) THEN 'I'
                                         ELSE 'A'
                                    END AS VALIDACAO 
                                  , O.DTREF
                                  , O.SEQUENCIA
                                  , O.CONTROLE
                             FROM TFPS2205 O
                                 LEFT JOIN VGF_EVENTO_S2205 N ON O.CODEMP = N.CODEMP AND O.CHAVE = N.CHAVE
                             WHERE O.CODEMP = P_CODEMPMATRIZ
                               AND O.DTREF = (SELECT MAX(DTREF)
                                              FROM TFPS2205 D
                                              WHERE D.CODEMP = O.CODEMP
                                                AND D.TPAMB = O.TPAMB
                                                AND D.CHAVE = O.CHAVE
                                                AND D.STATUS = 'F'
                                                AND D.NRORECIBO IS NOT NULL
                                                AND D.ACAO <> 'E'
                                              )
                               AND O.SEQUENCIA = (SELECT MAX(SEQUENCIA)
                                                  FROM TFPS2205 S
                                                  WHERE S.CODEMP = O.CODEMP
                                                    AND S.TPAMB = O.TPAMB
                                                    AND S.CHAVE = O.CHAVE
                                                    AND S.DTREF = (SELECT MAX(DTREF)
                                                                   FROM TFPS2205 D
                                                                   WHERE D.CODEMP = O.CODEMP
                                                                     AND D.TPAMB = O.TPAMB
                                                                     AND D.CHAVE = O.CHAVE
                                                                     AND D.STATUS = 'F'
                                                                     AND D.NRORECIBO IS NOT NULL
                                                                     AND D.ACAO <> 'E'
                                                                  )
                                                    AND S.STATUS = 'F'
                                                    AND S.NRORECIBO IS NOT NULL
                                                    AND S.ACAO <> 'E'
                                                  )
                               AND NOT EXISTS(SELECT 1
                                              FROM TFPS2205 R
                                              WHERE R.CODEMP = O.CODEMP
                                                AND R.TPAMB = O.TPAMB
                                                AND R.CHAVE = O.CHAVE
                                                AND R.STATUS = 'F'
                                                AND R.NRORECIBO IS NOT NULL
                                                AND R.ACAO = 'E'
                                                AND (R.DTREF > O.DTREF OR (R.DTREF = O.DTREF AND R.SEQUENCIA > O.SEQUENCIA)))
                               AND O.TPAMB = P_TPAMB
                          ) DTALT
                      WHERE (DTALT.VALIDACAO = 'A' AND DTALT.CONTROLE = 'I') OR 
                            (DTALT.VALIDACAO = 'I' AND DTALT.CONTROLE <> 'I');
    ELSE
        P_CONDITION := SNK_GET_COLUMNS_ESOCIAL(P_NOMETAB, P_COLUNAS_PADRAO);

        IF P_NOMETAB_PAI IS NULL THEN   /*TABELAS PAI*/
            P_NOMETAB_UTIL := P_NOMETAB;
            queSql :=   'INSERT INTO TFPVAES (CHAVE, VALIDACAO, DTREF, SEQUENCIA, CONTROLE) '||
                        'SELECT CHAVE, VALIDACAO, DTREF, SEQUENCIA, CONTROLE '||
                        'FROM (  SELECT O.CHAVE '||
                                '     , CASE WHEN N.CODEMP IS NULL AND O.ACAO <> ''E'' THEN ''E'' '||
                                '            WHEN (N.CODEMP IS NULL AND O.ACAO = ''E'') OR ('||P_CONDITION||') THEN ''I'' '||
                                '            ELSE ''A''  '||
                                '       END AS VALIDACAO '||
                                '     , O.DTREF '||
                                '     , O.SEQUENCIA '||
                                '     , O.CONTROLE  '||
                                'FROM '||P_NOMETAB||' O '||
                                '    LEFT JOIN '||P_NOMEVIEW||' N ON O.CODEMP = N.CODEMP AND O.CHAVE = N.CHAVE '||
                                CASE WHEN P_TIPO = 'M' THEN ' AND N.DTREF = :DTREF ' ELSE ' ' END||
                                'WHERE O.CODEMP = :CODEMP '||
                                '  AND O.TPAMB = :TPAMB '||
                                '  AND O.DTREF = (SELECT MAX(DTREF) '||
                                                 'FROM '||P_NOMETAB||' D '||
                                                 'WHERE D.CODEMP = O.CODEMP '||
                                                   'AND D.TPAMB = O.TPAMB '||
                                                   'AND D.CHAVE = O.CHAVE '||
                                                   'AND D.STATUS = ''F'' '||
                                                   'AND D.NRORECIBO IS NOT NULL '||
                                                   'AND D.ACAO <> ''E'' '||
                                                 ') '||
                                '  AND O.SEQUENCIA = (SELECT MAX(SEQUENCIA) '||
                                                     'FROM '||P_NOMETAB||' S '||
                                                     'WHERE S.CODEMP = O.CODEMP '||
                                                       'AND S.TPAMB = O.TPAMB '||
                                                       'AND S.CHAVE = O.CHAVE '||
                                                       'AND S.DTREF = (SELECT MAX(DTREF) '||
                                                                      'FROM '||P_NOMETAB||' D '||
                                                                      'WHERE D.CODEMP = O.CODEMP '||
                                                                        'AND D.TPAMB = O.TPAMB '||
                                                                        'AND D.CHAVE = O.CHAVE '||
                                                                        'AND D.STATUS = ''F'' '||
                                                                        'AND D.NRORECIBO IS NOT NULL '||
                                                                        'AND D.ACAO <> ''E'' '||
                                                                     ') '||
                                                       'AND S.STATUS = ''F'' '||
                                                       'AND S.NRORECIBO IS NOT NULL '||
                                                       'AND S.ACAO <> ''E'' '||
                                                     ') '||
                                  'AND NOT EXISTS(SELECT 1 '||
                                                 'FROM '||P_NOMETAB||' R '||
                                                 'WHERE R.CODEMP = O.CODEMP '||
                                                   'AND R.TPAMB = O.TPAMB '||
                                                   'AND R.CHAVE = O.CHAVE '||
                                                   'AND R.STATUS = ''F'' '||
                                                   'AND R.NRORECIBO IS NOT NULL '||
                                                   'AND R.ACAO = ''E'' '||
                                                   'AND (R.DTREF > O.DTREF OR (R.DTREF = O.DTREF AND R.SEQUENCIA > O.SEQUENCIA))) '||
                             ') DTALT '||
                        'WHERE (DTALT.VALIDACAO = ''A'' AND DTALT.CONTROLE = ''I'') OR  '||
                              '(DTALT.VALIDACAO = ''I'' AND DTALT.CONTROLE <> ''I'') ';
            IF P_TIPO = 'M' THEN
                EXECUTE IMMEDIATE queSql USING P_DTREF, P_CODEMPMATRIZ, P_TPAMB;
            ELSE
                EXECUTE IMMEDIATE queSql USING P_CODEMPMATRIZ, P_TPAMB;
            END IF;
        ELSE  /*TABELAS FILHAS*/
            P_NOMETAB_UTIL := P_NOMETAB_PAI;
            P_FILTRO_FILHOS := NVL(SNK_GET_PK_FOR_ESOCIAL(P_NOMETAB, P_COL_PAD_FILHOS), ' ');

            queSql :=   'INSERT INTO TFPVAES (CHAVE, VALIDACAO, DTREF, SEQUENCIA, CONTROLE)'||
                        'SELECT CHAVE, VALIDACAO, DTREF, SEQUENCIA, CONTROLE '||
                        'FROM (  SELECT O.CHAVE '||
                                    ' , CASE WHEN (N.CODEMP IS NULL AND P.ACAO = ''E'') OR ('||P_CONDITION||') THEN ''I'' '||
                                            'ELSE ''A''  '||
                                      ' END AS VALIDACAO  '||
                                    ' , O.DTREF '||
                                    ' , O.SEQUENCIA '||
                                    ' , P.CONTROLE '||
                                'FROM '||P_NOMETAB||' O '||
                                    'LEFT JOIN '||P_NOMEVIEW||' N ON O.CODEMP = N.CODEMP AND O.CHAVE = N.CHAVE '||P_FILTRO_FILHOS||' '||
                                     CASE WHEN P_TIPO = 'M' THEN ' AND N.DTREF = :DTREF ' ELSE ' ' END||
                                    'INNER JOIN '||P_NOMETAB_PAI||' P ON P.CODEMP = O.CODEMP AND P.DTREF = O.DTREF AND P.SEQUENCIA = O.SEQUENCIA AND O.CHAVE = P.CHAVE AND P.TPAMB = O.TPAMB '||
                                'WHERE O.CODEMP = :CODEMP '||
                                  'AND O.DTREF = (SELECT MAX(DTREF) '||
                                                 'FROM '||P_NOMETAB_PAI||' D '||
                                                 'WHERE D.CODEMP = O.CODEMP '||
                                                   'AND D.TPAMB = O.TPAMB '||
                                                   'AND D.CHAVE = O.CHAVE '||
                                                   'AND D.STATUS = ''F'' '||
                                                   'AND D.NRORECIBO IS NOT NULL '||
                                                   'AND D.ACAO <> ''E'' '||
                                                 ') '||
                                  'AND O.SEQUENCIA = (SELECT MAX(SEQUENCIA) '||
                                                     'FROM '||P_NOMETAB_PAI||' S '||
                                                     'WHERE S.CODEMP = O.CODEMP '||
                                                       'AND S.TPAMB = O.TPAMB '||
                                                       'AND S.CHAVE = O.CHAVE '||
                                                       'AND S.DTREF = (SELECT MAX(DTREF) '||
                                                                      'FROM '||P_NOMETAB_PAI||' D '||
                                                                      'WHERE D.CODEMP = O.CODEMP '||
                                                                        'AND D.TPAMB = O.TPAMB '||
                                                                        'AND D.CHAVE = O.CHAVE '||
                                                                        'AND D.STATUS = ''F'' '||
                                                                        'AND D.NRORECIBO IS NOT NULL '||
                                                                        'AND D.ACAO <> ''E'' '||
                                                                     ') '||
                                                       'AND S.STATUS = ''F'' '||
                                                       'AND S.NRORECIBO IS NOT NULL '||
                                                       'AND S.ACAO <> ''E'' '||
                                                     ') '||
                                  'AND NOT EXISTS(SELECT 1 '||
                                                 'FROM '||P_NOMETAB_PAI||' R '||
                                                 'WHERE R.CODEMP = O.CODEMP '||
                                                   'AND R.TPAMB = O.TPAMB '||
                                                   'AND R.CHAVE = O.CHAVE '||
                                                   'AND R.STATUS = ''F'' '||
                                                   'AND R.NRORECIBO IS NOT NULL '||
                                                   'AND R.ACAO = ''E'' '||
                                                   'AND (R.DTREF > O.DTREF OR (R.DTREF = O.DTREF AND R.SEQUENCIA > O.SEQUENCIA))) '||
                                'AND O.TPAMB = :TPAMB '||
                                   'AND NOT EXISTS(SELECT 1 '||
                                                  'FROM TFPVAES '||
                                                  'WHERE CHAVE = O.CHAVE) '||
                             ' ) DTALT '||
                         'WHERE (DTALT.VALIDACAO = ''A'' AND DTALT.CONTROLE = ''I'') OR  '||
                              ' (DTALT.VALIDACAO = ''I'' AND DTALT.CONTROLE <> ''I'') ';
            
            IF P_TIPO = 'M' THEN
                EXECUTE IMMEDIATE queSql USING P_DTREF, P_CODEMPMATRIZ, P_TPAMB;
            ELSE 
                EXECUTE IMMEDIATE queSql USING P_CODEMPMATRIZ, P_TPAMB;
            END IF;
        END IF;
    END IF;

    FOR EVEF IN (SELECT MON.NOMETAB, MON.NOMEVIEW
             FROM TFPMON MON
             WHERE MON.NOMEEVEVENTOPAI = P_NOMETAB 
               AND ((P_TPAMB = 'P' AND MON.AMBPRODUCAO = 'L') OR
                    (P_TPAMB = 'T' AND MON.AMBTESTE = 'L')) 
             GROUP BY MON.NOMETAB, MON.NOMEVIEW
             ORDER BY MON.NOMETAB
      ) LOOP
        SNK_GET_VALID_ALTER_ESOCIAL (P_EVENTO, P_COLUNAS_PADRAO, P_CODEMPMATRIZ, P_DTREF, P_SEQUENCIA, P_TPAMB, P_NOMETAB_UTIL, EVEF.NOMETAB, EVEF.NOMEVIEW, P_TIPO);
    END LOOP;
    
    SELECT COUNT(1) INTO P_COUNT
    FROM TFPVAES;
    
    IF P_NOMETAB_PAI IS NULL AND P_COUNT > 0 THEN
        queUpd := ' UPDATE '||P_NOMETAB||
                  ' SET CONTROLE = CASE WHEN EXISTS (SELECT 1 '||
                                                    'FROM TFPVAES '||
                                                    'WHERE DTREF = '||P_NOMETAB||'.DTREF '||
                                                     'AND SEQUENCIA = '||P_NOMETAB||'.SEQUENCIA '||
                                                     'AND CHAVE = '||P_NOMETAB||'.CHAVE '||
                                                     'AND VALIDACAO = ''A'' '||
                                                     'AND CONTROLE = ''I'') THEN ''A'' '|| 
                                       'ELSE ''I'' END '||
                  ' WHERE EXISTS (SELECT 1 '||
                                 'FROM TFPVAES '||
                                 'WHERE DTREF = '||P_NOMETAB||'.DTREF '||
                                   'AND SEQUENCIA = '||P_NOMETAB||'.SEQUENCIA '||
                                   'AND CHAVE = '||P_NOMETAB||'.CHAVE) '||
                     'AND CODEMP = :CODEMP '||
                     'AND TPAMB = :TPAMB ';
        EXECUTE IMMEDIATE queUpd USING P_CODEMPMATRIZ, P_TPAMB;
        --DELETE FROM TFPVAES;
    END IF;
    
EXCEPTION WHEN OTHERS THEN
  ROLLBACK;
  P_DTLOG := SYSDATE;
  IF queSql IS NOT NULL THEN
    SELECT COUNT(1) + 1 INTO P_SEQLOG
    FROM LOGESOCIAL
    WHERE DTLOG = P_DTLOG; 

      INSERT INTO LOGESOCIAL(DTLOG, SEQUENCIA, COMANDO)
           SELECT P_DTLOG, P_SEQLOG, SUBSTR(queSql, 1, 4000) from dual;
      IF LENGTH(queSql) > 4000 THEN
        INSERT INTO LOGESOCIAL(DTLOG, SEQUENCIA, COMANDO)
           SELECT P_DTLOG, P_SEQLOG + 1, SUBSTR(queSql, 4001) from dual;
      END IF;
           
        COMMIT;
   END IF;
   
   IF queUpd IS NOT NULL THEN
    SELECT COUNT(1) + 1 INTO P_SEQLOG
    FROM LOGESOCIAL
    WHERE DTLOG = P_DTLOG; 

      INSERT INTO LOGESOCIAL(DTLOG, SEQUENCIA, COMANDO)
           SELECT P_DTLOG, P_SEQLOG, SUBSTR(queUpd, 1, 4000) from dual;
      IF LENGTH(queUpd) > 4000 THEN
              INSERT INTO LOGESOCIAL(DTLOG, SEQUENCIA, COMANDO)
                              SELECT P_DTLOG, P_SEQLOG + 1, SUBSTR(queUpd, 4001) from dual;
      END IF;
           
        COMMIT; 
   END IF;
   
   P_MSG := P_MSG|| SUBSTR(SQLERRM, 1, 3950);
   RAISE_APPLICATION_ERROR(-20101, P_MSG);
END;
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 10/04/2018 11:24:10
Num.Script: 52874-0-1000
Nro. O.S. : 1169840
Nome      : INSERE - THOOBJ - 5287300
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_GET_VALID_ALTER_ESOCIAL
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210007
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_GET_VALID_ALTER_ESOCIAL' NOMEOBJ, 52873 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, 'b0f3ee746c5ee256353ac76fbaa06be6' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_GET_VALID_ALTER_ESOCIAL' and THO.hashcode = 'b0f3ee746c5ee256353ac76fbaa06be6')
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 07/05/2018 09:31:37
Num.Script: 52875-0-0
Nro. O.S. : 1169840
Nome      : Alterar - SNK_PROCESSA_DADOS_ESOCIAL 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - SNK_PROCESSA_DADOS_ESOCIAL 
NomeObjeto: SNK_PROCESSA_DADOS_ESOCIAL 
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_PROCESSA_DADOS_ESOCIAL (
   P_CODEMPMATRIZ          NUMBER,
   P_DTREF                 DATE,
   P_TPAMB                 CHAR,                       /*P= PRODUCAO T=TESTE*/
   P_TIPDADOS              CHAR, /*P_TIPDADOS T= TODOS C=CADOSTRO M=MOVIMENTO*/
   P_EVENTO                VARCHAR2 := 'TODOS',
   P_SEQUENCIA_ATUAL       NUMBER,
   P_NOMETAB               VARCHAR2 := NULL,    /*UTILIZADO NA RECURSIVIDADE*/
   P_SEQUENCIA_PAI         VARCHAR2 := NULL,    /*UTILIZADO NA RECURSIVIDADE*/
   P_RESULT            OUT NUMBER)
AS
   P_SEQUENCIA_OLD          NUMBER (10);
   P_SEQUENCIA_NEW          NUMBER (10);
   P_DTREF_NEXT_MONTH       DATE;
   P_DTREF_OLD_MONTH        DATE;
   P_DTREF_OLD              DATE;
   P_COLUNAS_PADRAO         VARCHAR2 (4000) := 'CODEMP, DTREF, STATUS, ACAO, NRORECIBO, NRORECIBO_ANT, SEQUENCIA, DTALTERACAO, DTEF, DSCALT, JUSTPRORR, MTVALTER, CONTROLE, TPAMB';
   queSql                   VARCHAR2 (8000);
   P_SEQUENCIA_DEL          NUMBER (10) := 0;
   P_SEQ_OLD_MONTH          NUMBER (10) := 0;
   P_COLUMNS                VARCHAR2 (4000);
   P_INSERT_COLUMNS         VARCHAR2 (4000);
   P_INSERT_VALUES          VARCHAR2 (4000);
   P_COLUMNS_PARAMETER      VARCHAR2 (4000)  := 'CODEMP, DTREF, SEQUENCIA, STATUS, ACAO,NRORECIBO, NRORECIBO_ANT, ';
   P_COLUMNS_TO_PARAMETER   VARCHAR2 (4000) := 'CODEMP;, :DTREF, :SEQUENCIA, :STATUS, :ACAO,:NRORECIBO, :NRORECIBO_ANT, ';
   P_COL_PAD_FILHOS         VARCHAR2 (4000) := 'CODEMP, DTREF, SEQUENCIA, ';
   P_COL_PAD_FILHOS_PARAM   VARCHAR2 (4000) := 'CODEMP, :DTREF, :SEQUENCIA, ';
   P_TABLE_PAI              VARCHAR2 (100);
   P_VALID_ALTER            BOOLEAN := FALSE;
   P_COUNT                  NUMBER (10);
   P_DTLOG                  DATE;
   P_SEQLOG                 NUMBER (10);
   P_MSG                    VARCHAR2 (4000) := ' ';
   P_ERRMSG                 VARCHAR2 (4000) := ' ';
BEGIN
   IF P_NOMETAB IS NULL THEN
      SELECT MAX(DTREF) INTO P_DTREF_NEXT_MONTH
      FROM TFPS1000
      WHERE CODEMP = P_CODEMPMATRIZ
        AND DTREF > P_DTREF
        AND TPAMB = P_TPAMB;

      IF P_DTREF_NEXT_MONTH IS NOT NULL THEN
        P_ERRMSG := 'Existe movimento para referência '||TO_CHAR(P_DTREF_NEXT_MONTH, 'DD/MM/YYYY')||'. A referência atual não pode ser gerada.';
        RAISE_APPLICATION_ERROR ( -20101, P_ERRMSG);
      END IF;

      FOR EVE IN (SELECT NOMETAB,
                      NOMEEVENTO,
                      NOMEVIEW,
                      NOMEEVEVENTOPAI
                  FROM TFPMON
                  WHERE TIPO IN ('C', 'M')
                    AND (P_EVENTO = 'TODOS' OR NOMEEVENTO = P_EVENTO)
                    AND NOMEEVEVENTOPAI IS NULL
                    AND ((P_TPAMB = 'P' AND AMBPRODUCAO = 'L') OR (P_TPAMB = 'T' AND AMBTESTE = 'L'))
                  ORDER BY NOMETAB--GROUP BY NOMETAB, NOMEEVENTO, NOMEVIEW, NOMEEVEVENTOPAI
            ) LOOP
         queSql := ' SELECT COUNT(1) '||  
                   ' FROM ' || EVE.NOMETAB ||
                   ' WHERE CODEMP = :CODEMP '||
                   ' AND DTREF = :DTREF '||
                   ' AND TPAMB = :TPAMB '||
                   ' AND STATUS = ''I'' ';

         EXECUTE IMMEDIATE queSql INTO P_COUNT USING P_CODEMPMATRIZ, P_DTREF, P_TPAMB;

         IF P_COUNT > 0 THEN
            RAISE_APPLICATION_ERROR ( -20101, 'Não é possivel gerar dados do e-social se existir eventos em processo de envio.');
         END IF;
        
        IF P_SEQUENCIA_DEL = 0 THEN
            SNK_CLEAR_ROW_PENDENTE(EVE.NOMETAB, P_CODEMPMATRIZ, P_DTREF, P_TPAMB, P_SEQUENCIA_DEL);
            IF P_SEQUENCIA_DEL > 0 THEN
                P_SEQUENCIA_NEW := P_SEQUENCIA_ATUAL;
            END IF;
        END IF;
        
        LOOP
            queSql := ' SELECT MAX(DTREF) '||  
                      ' FROM ' || EVE.NOMETAB || 
                      ' WHERE CODEMP = :CODEMP '||
                      '  AND DTREF < :DTREF '||
                      '  AND TPAMB = :TPAMB '||
                      '  AND STATUS = ''P''';
            EXECUTE IMMEDIATE queSql INTO P_DTREF_OLD_MONTH USING P_CODEMPMATRIZ, P_DTREF, P_TPAMB;
                
            EXIT WHEN P_DTREF_OLD_MONTH IS NULL;
            SNK_CLEAR_ROW_PENDENTE(EVE.NOMETAB, P_CODEMPMATRIZ, P_DTREF_OLD_MONTH, P_TPAMB, P_SEQ_OLD_MONTH);
        END LOOP;

      END LOOP;
   ELSE
      P_SEQUENCIA_NEW := P_SEQUENCIA_PAI;
   END IF;

   IF P_SEQUENCIA_NEW IS NULL THEN /*SE P_SEQUENCIA_NEW ESTA NULL, E PORQUE NAO DELETOU DAGOS, LOGO TEMOS QUE GERAR UMA SEQUENCIA NOVA.*/
      P_SEQUENCIA_NEW := P_SEQUENCIA_ATUAL + 1;
   END IF;
   
   IF P_NOMETAB IS NULL THEN
    SNK_SET_ESOCIAL_PKG(P_TPAMB, P_DTREF, CASE WHEN NVL(P_SEQUENCIA_DEL, 0) > 0 THEN P_SEQUENCIA_ATUAL - 1 ELSE P_SEQUENCIA_ATUAL END);
   END IF;

   FOR EVE
      IN (  SELECT MON.NOMETAB,
                   MON.NOMEEVENTO,
                   MON.NOMEVIEW,
                   MON.NOMEEVEVENTOPAI,
                   MON.TIPO
              FROM TFPMON MON
             WHERE (P_NOMETAB IS NOT NULL AND MON.NOMETAB = P_NOMETAB) OR     
                   (P_NOMETAB IS NULL AND NOMEEVEVENTOPAI IS NULL AND 
                    (P_EVENTO = 'TODOS' OR MON.NOMEEVENTO = P_EVENTO) AND 
                    (P_TIPDADOS = 'T' OR MON.TIPO = P_TIPDADOS)) 
               AND TIPO IN ('C', 'M')
               AND ((P_TPAMB = 'P' AND MON.AMBPRODUCAO = 'L') OR
                    (P_TPAMB = 'T' AND MON.AMBTESTE = 'L'))
          GROUP BY MON.NOMETAB,
                   MON.NOMEEVENTO,
                   MON.NOMEVIEW,
                   MON.NOMEEVEVENTOPAI,
                   MON.TIPO
          ORDER BY MON.NOMETAB)
   LOOP
      DELETE FROM TFPVAES;
      P_MSG := 'EVENTO: ' || EVE.NOMEEVENTO;
      IF EVE.TIPO IN ('T', 'C', 'M') THEN
         P_INSERT_COLUMNS := SNK_GET_COLUMNS_TABLE (EVE.NOMETAB);
         P_INSERT_VALUES := P_INSERT_COLUMNS;
         P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'SEQUENCIA', TO_CHAR (P_SEQUENCIA_NEW));
         P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'DTREF', 'TO_DATE(''' || SNK_FORMAT_DATE (P_DTREF, 'DD/MM/YYYY HH24:MI:SS') || ''', ''DD/MM/YYYY HH24:MI:SS'')');
         P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'TPAMB', '''' || P_TPAMB || '''');

         IF EVE.NOMEEVEVENTOPAI IS NULL THEN
            P_TABLE_PAI := EVE.NOMETAB;

            IF P_SEQUENCIA_NEW > 1 THEN
               --P_SEQUENCIA_OLD := P_SEQUENCIA_NEW - 1; --Nao pode ser assim, pois na primeira geracao, pode nao ter gerado algum evento.
               queSql := ' SELECT NVL(MAX(SEQUENCIA),0) '||  
                         ' FROM ' || EVE.NOMETAB ||
                         ' WHERE CODEMP = :CODEMP '||
                         '   AND DTREF = :DTREF '||
                         '   AND TPAMB = :TPAMB '||
                         '   AND SEQUENCIA < :SEQUENCIA_NEW';

               EXECUTE IMMEDIATE queSql INTO P_SEQUENCIA_OLD USING P_CODEMPMATRIZ, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW;
               P_DTREF_OLD := P_DTREF;
            ELSE
               queSql := ' SELECT NVL(MAX(DTREF), :DTMOV) '||
                         ' FROM ' || EVE.NOMETAB ||
                         ' WHERE CODEMP = :CODEMP '||
                         '   AND DTREF < :DTREF '||
                         '   AND TPAMB = :TPAMB';

               EXECUTE IMMEDIATE queSql INTO P_DTREF_OLD USING P_DTREF, P_CODEMPMATRIZ, P_DTREF, P_TPAMB;
               P_DTREF_OLD := NVL (P_DTREF_OLD, P_DTREF);

               IF P_DTREF_OLD <> P_DTREF THEN
                  queSql := ' SELECT NVL(MAX(SEQUENCIA),0) '||
                            ' FROM ' || EVE.NOMETAB ||
                            ' WHERE CODEMP = :CODEMP '||
                            '   AND DTREF = :DTREF '||
                            '   AND TPAMB = :TPAMB';

                  EXECUTE IMMEDIATE queSql INTO P_SEQUENCIA_OLD USING P_CODEMPMATRIZ, P_DTREF_OLD, P_TPAMB;
               ELSE
                  P_SEQUENCIA_OLD := P_SEQUENCIA_NEW;
               END IF;
            END IF;

            IF P_DTREF_OLD <> P_DTREF OR P_SEQUENCIA_OLD <> P_SEQUENCIA_NEW THEN
               queSql := NULL;
               SNK_GET_VALID_ALTER_ESOCIAL (P_EVENTO, P_COLUNAS_PADRAO, P_CODEMPMATRIZ, P_DTREF_OLD, P_SEQUENCIA_OLD, P_TPAMB, NULL/*NOMETABPAI*/, EVE.NOMETAB, EVE.NOMEVIEW, EVE.TIPO);
            END IF;

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'CONTROLE', '''I'' AS CONTROLE');
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'CHAVE', 'V.CHAVE');
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES,'NRORECIBO,','CASE WHEN ANT.CHAVE IS NULL OR ANT.CONTROLE = ''I'' THEN ANT.NRORECIBO ELSE NULL END,');
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES,'NRORECIBO_ANT,','CASE WHEN ANT.CHAVE IS NULL OR ANT.CONTROLE = ''I'' THEN ANT.NRORECIBO_ANT ELSE ANT.NRORECIBO END,'); /* TEM QUE SER PRIMEIRO POR QUE EXISTE NRORECIBO E O NRORECIBO_ANT */
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES,'STATUS','CASE WHEN NVL(ANT.CONTROLE, '' '') = ''I'' AND NVL(ANT.STATUS, '' '') = ''F'' THEN ''F'' ELSE ''P'' END');
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES,' ACAO','CASE WHEN EXISTS(SELECT 1 FROM TFPEVT WHERE GRUPOESOCIAL = 1 AND TIPOEVENTO = '''||EVE.NOMEEVENTO||''') THEN ''I'' WHEN ANT.NRORECIBO IS NULL AND ANT.NRORECIBO_ANT IS NULL THEN ''I'' WHEN ANT.STATUS = ''F'' THEN NVL(ANT.CONTROLE, ''I'') ELSE NVL(ANT.ACAO, ''I'') END');

            queSql := 'INSERT INTO ' || EVE.NOMETAB || ' 
                               SELECT ' || P_INSERT_VALUES || '
                               FROM ' || EVE.NOMEVIEW || ' V '||
                                   ' LEFT JOIN (SELECT OLD.CHAVE '||
                                                    ', STATUS '||
                                                    ', NRORECIBO '||
                                                    ', NRORECIBO_ANT '||
                                                    ', ACAO '||
                                                    ', OLD.CONTROLE '||
                                               'FROM ' || EVE.NOMETAB || ' OLD '||
                                               '     LEFT JOIN TFPVAES VAES ON VAES.CHAVE = OLD.CHAVE AND OLD.DTREF = VAES.DTREF AND VAES.SEQUENCIA = OLD.SEQUENCIA '||
                                               'WHERE OLD.CODEMP = ' || TO_CHAR (P_CODEMPMATRIZ) ||
                                               '  AND OLD.TPAMB = ''' || P_TPAMB || ''' '||
                                               '  AND (VAES.CHAVE IS NOT NULL OR '||
                                               '       (NOT EXISTS(SELECT 1 '||
                                                                  'FROM TFPVAES V '|| 
                                                                  'WHERE CHAVE = OLD.CHAVE) AND OLD.DTREF = :DTREF AND OLD.SEQUENCIA = :SEQUENCIA)) '||
                                                 ') ANT ON ANT.CHAVE = V.CHAVE '||
                               'WHERE CODEMP = ' || TO_CHAR (P_CODEMPMATRIZ);
            IF EVE.TIPO = 'M' THEN
                queSql := queSql || ' AND V.DTREF = :DTREF';
                EXECUTE IMMEDIATE queSql USING P_DTREF_OLD, P_SEQUENCIA_OLD, P_DTREF;
            ELSE
                EXECUTE IMMEDIATE queSql USING P_DTREF_OLD, P_SEQUENCIA_OLD;
            END IF;

            
         ELSE                                 /*SO ENTRA AQUI PARA OS FILHOS*/
            queSql := ' INSERT INTO ' || EVE.NOMETAB || ' 
                              SELECT ' || P_INSERT_VALUES || '
                              FROM ' || EVE.NOMEVIEW || '
                              WHERE CODEMP = :CODEMPMATRIZ';
            IF EVE.TIPO = 'M' THEN
                queSql := queSql || ' AND DTREF = :DTREF';
                EXECUTE IMMEDIATE queSql USING P_CODEMPMATRIZ, P_DTREF;
            ELSE
                EXECUTE IMMEDIATE queSql USING P_CODEMPMATRIZ;
            END IF;
         END IF;
      END IF;

      -- IF P_TIPDADOS IN ('T', 'M') THEN

      --END IF;

      /* INCLUSAO DAS LINHAS DE EXCLUSAO */
      IF     (P_DTREF_OLD <> P_DTREF OR P_SEQUENCIA_OLD <> P_SEQUENCIA_NEW)
         AND (P_DTREF_OLD IS NOT NULL AND P_SEQUENCIA_OLD IS NOT NULL) THEN
         P_INSERT_COLUMNS := SNK_GET_COLUMNS_TABLE (EVE.NOMETAB);
         P_INSERT_VALUES := P_INSERT_COLUMNS;
         P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' ', '');
         P_INSERT_VALUES := 'O.' || REPLACE (P_INSERT_VALUES, ',', ',O.');
         P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.SEQUENCIA', TO_CHAR (P_SEQUENCIA_NEW));
         P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.TPAMB', '''' || P_TPAMB || '''');
         P_INSERT_VALUES := REPLACE ( P_INSERT_VALUES, 'O.DTREF', 'TO_DATE(''' || SNK_FORMAT_DATE (P_DTREF, 'DD/MM/YYYY HH24:MI:SS') || ''', ''DD/MM/YYYY HH24:MI:SS'')');

         IF EVE.NOMEEVEVENTOPAI IS NULL THEN
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.CONTROLE', '''E''');
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.CHAVE', 'O.CHAVE');
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.NRORECIBO,', 'NULL,');
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.NRORECIBO_ANT,', 'O.NRORECIBO,'); /* TEM QUE SER PRIMEIRO POR QUE EXISTE NRORECIBO E O NRORECIBO_ANT */
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.STATUS', '''P''');
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.ACAO', '''E''');

            queSql := ' MERGE INTO ' || EVE.NOMETAB || ' N
                            USING (SELECT ' || P_INSERT_COLUMNS || ' 
                                   FROM ' || EVE.NOMETAB || ' 
                                   WHERE CODEMP = ' || TO_CHAR (P_CODEMPMATRIZ) || '
                                     AND DTREF = TO_DATE('''|| SNK_FORMAT_DATE (P_DTREF_OLD, 'DD/MM/YYYY HH24:MI:SS') || ''', ''DD/MM/YYYY HH24:MI:SS'')
                                     AND SEQUENCIA = ' || TO_CHAR (P_SEQUENCIA_OLD)|| '
                                     AND TPAMB = '''|| P_TPAMB || '''
                                     AND (('''|| EVE.NOMEEVENTO|| ''' NOT IN (''S-2205'', ''S-2206'', ''S-2306'')) OR
                                          ('''|| EVE.NOMEEVENTO|| ''' = ''S-2205'' AND EXISTS(SELECT 1 FROM TFPFUN WHERE CODEMP||'':''||CODFUNC = CHAVE AND SITESOCIAL IN (''5'', ''T'') )) OR 
                                          ('''|| EVE.NOMEEVENTO|| ''' IN (''S-2206'', ''S-2306'') AND EXISTS(SELECT 1 FROM TFPFUN WHERE CODEMP||'':''||CODFUNC = CHAVE AND SITESOCIAL IN (''6'', ''T'') ))
                                         )
                                      AND ((STATUS = ''F'' AND NRORECIBO IS NOT NULL AND ACAO <> ''E'') OR (STATUS <> ''F'' AND ACAO = ''E'' AND NRORECIBO IS NULL) OR (STATUS <> ''F'' AND ACAO <> ''E'' AND NRORECIBO_ANT IS NOT NULL) )
                                   ) O 
                                ON (N.CODEMP = O.CODEMP 
                                AND N.DTREF = TO_DATE(''' || SNK_FORMAT_DATE (P_DTREF, 'DD/MM/YYYY HH24:MI:SS') || ''', ''DD/MM/YYYY HH24:MI:SS'') 
                                AND N.SEQUENCIA = '|| TO_CHAR (P_SEQUENCIA_NEW) || ' 
                                AND N.TPAMB = '''|| P_TPAMB|| ''' 
                                AND N.CHAVE = O.CHAVE 
                                )
                                WHEN NOT MATCHED THEN INSERT (' || P_INSERT_COLUMNS || ')
                                       VALUES (' || P_INSERT_VALUES || ' ) ';

            EXECUTE IMMEDIATE queSql;
         ELSE                                 /*SO ENTRA AQUI PARA OS FILHOS*/
            queSql := ' MERGE INTO ' || EVE.NOMETAB || ' N
                                USING (SELECT ' || P_INSERT_COLUMNS || ' 
                                       FROM ' || EVE.NOMETAB || ' 
                                       WHERE CODEMP = ' || TO_CHAR (P_CODEMPMATRIZ) || '
                                         AND DTREF = TO_DATE(''' || SNK_FORMAT_DATE (P_DTREF_OLD, 'DD/MM/YYYY HH24:MI:SS') || ''', ''DD/MM/YYYY HH24:MI:SS'')
                                         AND SEQUENCIA = ' || TO_CHAR (P_SEQUENCIA_OLD) || '
                                         AND TPAMB = ''' || P_TPAMB|| '''
                                          ) O 
                                ON (N.CODEMP = O.CODEMP AND
                                    N.DTREF = TO_DATE(''' || SNK_FORMAT_DATE (P_DTREF, 'DD/MM/YYYY HH24:MI:SS') || ''', ''DD/MM/YYYY HH24:MI:SS'') AND
                                    N.SEQUENCIA = ' || TO_CHAR (P_SEQUENCIA_NEW) || ' AND
                                    N.TPAMB = O.TPAMB AND
                                    N.CHAVE = O.CHAVE AND 
                                    EXISTS(SELECT 1
                                            FROM '||EVE.NOMEEVEVENTOPAI||' P
                                            WHERE P.CODEMP = O.CODEMP
                                              AND P.DTREF = TO_DATE(''' || SNK_FORMAT_DATE (P_DTREF, 'DD/MM/YYYY HH24:MI:SS') || ''', ''DD/MM/YYYY HH24:MI:SS'') 
                                              AND P.SEQUENCIA = ' || TO_CHAR (P_SEQUENCIA_NEW)|| '
                                              AND P.TPAMB = O.TPAMB
                                              AND P.CHAVE = O.CHAVE
                                              AND P.ACAO = ''E'') )
                                WHEN NOT MATCHED THEN INSERT (' || P_INSERT_COLUMNS || ')
                                                      VALUES (' || P_INSERT_VALUES || ' ) ';

            EXECUTE IMMEDIATE queSql;
         END IF;
      END IF;

      FOR EVEF IN (SELECT NOMETAB,
                      NOMEEVENTO,
                      NOMEVIEW,
                      NOMEEVEVENTOPAI
                   FROM TFPMON
                   WHERE TIPO IN ('C', 'M')
                     AND NOMEEVEVENTOPAI = EVE.NOMETAB
                     AND ( (P_TPAMB = 'P' AND AMBPRODUCAO = 'L') OR 
                           (P_TPAMB = 'T' AND AMBTESTE = 'L'))
                   ORDER BY NOMETAB) LOOP
         queSql := NULL;

         SNK_PROCESSA_DADOS_ESOCIAL (P_CODEMPMATRIZ,
                                     P_DTREF,
                                     P_TPAMB,
                                     P_TIPDADOS,
                                     EVEF.NOMEEVENTO,
                                     P_SEQUENCIA_NEW,
                                     EVEF.NOMETAB,
                                     P_SEQUENCIA_NEW,
                                     P_RESULT);
      END LOOP;

      P_RESULT := P_SEQUENCIA_NEW;
   END LOOP; 
   DELETE FROM TFPVAES;
EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK;
      DELETE FROM TFPVAES;

      IF queSql IS NOT NULL
      THEN
         P_DTLOG := SYSDATE;

         SELECT COUNT (1) + 1
           INTO P_SEQLOG
           FROM LOGESOCIAL
          WHERE DTLOG = P_DTLOG;

         INSERT INTO LOGESOCIAL (DTLOG, SEQUENCIA, COMANDO)
            SELECT P_DTLOG, P_SEQLOG, SUBSTR (queSql, 1, 4000) FROM DUAL;

         IF LENGTH (queSql) > 4000
         THEN
            INSERT INTO LOGESOCIAL (DTLOG, SEQUENCIA, COMANDO)
               SELECT P_DTLOG, P_SEQLOG + 1, SUBSTR (queSql, 4001) FROM DUAL;
         END IF;

         COMMIT;
      END IF;

      P_MSG := P_MSG || SUBSTR (SQLERRM, 1, 3950);
      RAISE_APPLICATION_ERROR (-20101, P_MSG);
END;
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 10/04/2018 11:24:10
Num.Script: 52876-0-1000
Nro. O.S. : 1169840
Nome      : INSERE - THOOBJ - 5287500
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_PROCESSA_DADOS_ESOCIAL
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210007
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_PROCESSA_DADOS_ESOCIAL' NOMEOBJ, 52875 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, '520ba75d03fd6b82493a0046df6f17d9' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_PROCESSA_DADOS_ESOCIAL' and THO.hashcode = '520ba75d03fd6b82493a0046df6f17d9')
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 13/04/2018 13:25:32
Num.Script: 53580-0-0
Nro. O.S. : 1141856
Nome      : Script - INSERT TCBEFB TCBEFR 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - INSERT TCBEFB TCBEFR 
NomeObjeto: TCBEFB
TipoObjeto: TABLE
NomeTabela: TCBEFB
Executar  : SE_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE P_COUNT  NUMBER(5);
BEGIN
  SELECT COUNT(1) INTO P_COUNT
  FROM TCBEFB
  WHERE CODEMP = 1
    AND BLOCO = 'J';
  IF P_COUNT = 0 THEN
    EXECUTE IMMEDIATE 'INSERT INTO TCBEFB  (CODEMP, BLOCO, SEQUENCIA, DESCRICAO, GERARBLOCO, CODUSU, DTALTER) VALUES   (1, ''J'', 4, ''PLANO DE CONTAS E MAPEAMENTO'', ''S'', 0, TO_DATE(''12/04/2018 00:00:00'', ''MM/DD/YYYY HH24:MI:SS''))';

    EXECUTE IMMEDIATE 'INSERT INTO TCBEFR (CODEMP, BLOCO, REGISTRO, DESCRICAO, GERARREGISTRO, CODUSU, DTALTER) VALUES   (1, ''J'', ''J001'', ''ABERTURA DO BLOCO J'', ''S'', 0, TO_DATE(''12/04/2018 00:00:00'', ''MM/DD/YYYY HH24:MI:SS''))';
    EXECUTE IMMEDIATE 'INSERT INTO TCBEFR (CODEMP, BLOCO, REGISTRO, DESCRICAO, GERARREGISTRO, CODUSU, DTALTER) VALUES   (1, ''J'', ''J050'', ''PLANO DE CONTAS DO CONTRIBUINTE'', ''S'', 0, TO_DATE(''12/04/2018 00:00:00'', ''MM/DD/YYYY HH24:MI:SS''))';
    EXECUTE IMMEDIATE 'INSERT INTO TCBEFR (CODEMP, BLOCO, REGISTRO, DESCRICAO, GERARREGISTRO, CODUSU, DTALTER) VALUES   (1, ''J'', ''J051'', ''PLANO DE CONTAS REFERENCIAL'', ''S'', 0, TO_DATE(''12/04/2018 00:00:00'', ''MM/DD/YYYY HH24:MI:SS''))';
    EXECUTE IMMEDIATE 'INSERT INTO TCBEFR (CODEMP, BLOCO, REGISTRO, DESCRICAO, GERARREGISTRO, CODUSU, DTALTER) VALUES   (1, ''J'', ''J100'', ''CENTRO DE CUSTOS'', ''S'', 0, TO_DATE(''12/04/2018 00:00:00'', ''MM/DD/YYYY HH24:MI:SS''))';
    EXECUTE IMMEDIATE 'INSERT INTO TCBEFR (CODEMP, BLOCO, REGISTRO, DESCRICAO, GERARREGISTRO, CODUSU, DTALTER) VALUES   (1, ''J'', ''J990'', ''FECHAMENTO DO BLOCO J'', ''S'', 0, TO_DATE(''12/04/2018 00:00:00'', ''MM/DD/YYYY HH24:MI:SS''))';
  END IF;  
END;
/
 
 
 
/*
Requer    : 4210006
Conexao   : ORCL
Data      : 13/04/2018 13:25:32
Num.Script: 53581-0-0
Nro. O.S. : 1141856
Nome      : Script - INSERT TCBEFB TCBEFR 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - INSERT TCBEFB TCBEFR 
NomeObjeto: TCBEFB
TipoObjeto: TABLE
NomeTabela: TCBEFB
Executar  : SE_EXISTIR
Ocorrencia: 4210007
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE P_COUNT  NUMBER(5);
BEGIN
  SELECT COUNT(1) INTO P_COUNT
  FROM TCBEFB
  WHERE CODEMP = 1
    AND BLOCO = 'K';
  IF P_COUNT = 0 THEN
    EXECUTE IMMEDIATE 'INSERT INTO TCBEFB  (CODEMP, BLOCO, SEQUENCIA, DESCRICAO, GERARBLOCO, CODUSU, DTALTER) VALUES   (1, ''K'', 5, ''Saldos das Contas Contábeis e Referenciais'', ''S'', 0, TO_DATE(''12/04/2018 00:00:00'', ''MM/DD/YYYY HH24:MI:SS''))';
    
    EXECUTE IMMEDIATE 'INSERT INTO TCBEFR (CODEMP, BLOCO, REGISTRO, DESCRICAO, GERARREGISTRO, CODUSU, DTALTER) VALUES   (1, ''K'', ''K001'', ''ABERTURA DO BLOCO K'', ''S'', 0, TO_DATE(''12/04/2018 00:00:00'', ''MM/DD/YYYY HH24:MI:SS''))';
    EXECUTE IMMEDIATE 'INSERT INTO TCBEFR (CODEMP, BLOCO, REGISTRO, DESCRICAO, GERARREGISTRO, CODUSU, DTALTER) VALUES   (1, ''K'', ''K030'', ''IDENTIFICAÇÃO DO PERÍODO'', ''S'', 0, TO_DATE(''12/04/2018 00:00:00'', ''MM/DD/YYYY HH24:MI:SS''))';
    EXECUTE IMMEDIATE 'INSERT INTO TCBEFR (CODEMP, BLOCO, REGISTRO, DESCRICAO, GERARREGISTRO, CODUSU, DTALTER) VALUES   (1, ''K'', ''K155'', ''DETALHES DOS SALDOS CONTÁBEIS (DEPOIS DO ENCERRAMENTO DO RESULTADO DO PERÍODO)'', ''S'', 0, TO_DATE(''12/04/2018 00:00:00'', ''MM/DD/YYYY HH24:MI:SS''))';
    EXECUTE IMMEDIATE 'INSERT INTO TCBEFR (CODEMP, BLOCO, REGISTRO, DESCRICAO, GERARREGISTRO, CODUSU, DTALTER) VALUES   (1, ''K'', ''K156'', ''MAPEAMENTO REFERENCIAL DO SALDO FINAL'', ''S'', 0, TO_DATE(''12/04/2018 00:00:00'', ''MM/DD/YYYY HH24:MI:SS''))';
    EXECUTE IMMEDIATE 'INSERT INTO TCBEFR (CODEMP, BLOCO, REGISTRO, DESCRICAO, GERARREGISTRO, CODUSU, DTALTER) VALUES   (1, ''K'', ''K355'', ''SALDOS FINAIS DAS CONTAS CONTÁBEIS DE RESULTADO ANTES DO ENCERRAMENTO'', ''S'', 0, TO_DATE(''12/04/2018 00:00:00'', ''MM/DD/YYYY HH24:MI:SS''))';
    EXECUTE IMMEDIATE 'INSERT INTO TCBEFR (CODEMP, BLOCO, REGISTRO, DESCRICAO, GERARREGISTRO, CODUSU, DTALTER) VALUES   (1, ''K'', ''K356'', ''MAPEAMENTO REFERENCIAL DOS SALDOS FINAIS DAS CONTAS CONTÁBEIS DE RESULTADO ANTES DO ENCERRAMENTO'', ''S'', 0, TO_DATE(''12/04/2018 00:00:00'', ''MM/DD/YYYY HH24:MI:SS''))';  
    EXECUTE IMMEDIATE 'INSERT INTO TCBEFR (CODEMP, BLOCO, REGISTRO, DESCRICAO, GERARREGISTRO, CODUSU, DTALTER) VALUES   (1, ''K'', ''K990'', ''FECHAMENTO DO BLOCO K'', ''S'', 0, TO_DATE(''12/04/2018 00:00:00'', ''MM/DD/YYYY HH24:MI:SS''))';
  END IF;
  
END;
/
 
 
 
/*
Conexao   : ORCL
NomeObjeto: UPDATE TSIPAR INTEIRO
TipoObjeto: TABLE
NomeTabela: 
Executar  : SEMPRE
Ocorrencia: 4210008
FullVersao: Sim
*/
 
 
UPDATE TSIPAR SET INTEIRO = 4210007 WHERE CHAVE = 'VERSAOATUALDB'
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 27/04/2018 14:23:51
Num.Script: 50889-0-0
Nro. O.S. : 1129759
Nome      : Cria - TFPCTI
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TFPCTI
NomeObjeto: TFPCTI
TipoObjeto: TABLE
NomeTabela: TFPCTI
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPCTI (
  CODCONV         NUMBER(10)   NOT NULL,
  DESCRCONV       VARCHAR2(40) NOT NULL,
  CODEMP          NUMBER(5)    NOT NULL,
  CODEND          NUMBER(10),
  NUMEND          VARCHAR2(6),
  COMPLEMENTO     VARCHAR2(60),
  CEP             VARCHAR(8),
  CONSTRAINT PK_TFPCTI PRIMARY KEY (CODCONV),
  CONSTRAINT FK_TFPCTI_TSIEMP FOREIGN KEY (CODEMP) REFERENCES TSIEMP (CODEMP)
)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 27/04/2018 14:23:59
Num.Script: 50890-0-0
Nro. O.S. : 1129759
Nome      : Cria - CODCID
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - CODCID
NomeObjeto: CODCID
TipoObjeto: COLUMN
NomeTabela: TFPCTI
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE P_COUNT NUMBER(5);
BEGIN
  SELECT COUNT(1) INTO P_COUNT
  FROM USER_TAB_COLUMNS
  WHERE TABLE_NAME = 'TSICID'
    AND COLUMN_NAME = 'CODCID'
    AND DATA_PRECISION = 5;
  
  IF P_COUNT > 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE TFPCTI ADD CODCID NUMBER(5)';
  ELSE
    EXECUTE IMMEDIATE 'ALTER TABLE TFPCTI ADD CODCID NUMBER(10)';
  END IF;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 27/04/2018 14:24:02
Num.Script: 50891-0-0
Nro. O.S. : 1129759
Nome      : Cria - CODBAI
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - CODBAI
NomeObjeto: CODBAI
TipoObjeto: COLUMN
NomeTabela: TFPCTI
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE P_COUNT NUMBER(5);
BEGIN
  SELECT COUNT(1) INTO P_COUNT
  FROM USER_TAB_COLUMNS
  WHERE TABLE_NAME = 'TSIBAI'
    AND COLUMN_NAME = 'CODBAI'
    AND DATA_PRECISION = 5;
  
  IF P_COUNT > 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE TFPCTI ADD CODBAI NUMBER(5)';
  ELSE
    EXECUTE IMMEDIATE 'ALTER TABLE TFPCTI ADD CODBAI NUMBER(10)';
  END IF;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 27/04/2018 14:24:08
Num.Script: 50892-0-0
Nro. O.S. : 1129759
Nome      : Cria - TRG_INC_UPD_TFPCTI
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TRG_INC_UPD_TFPCTI
NomeObjeto: TRG_INC_UPD_TFPCTI
TipoObjeto: TRIGGER
NomeTabela: TFPCTI
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_INC_UPD_TFPCTI
BEFORE UPDATE ON TFPCTI
FOR EACH ROW
WHEN (
NEW.CODEMP <> OLD.CODEMP
      )
BEGIN

  IF STP_GET_ATUALIZANDO THEN
    RETURN;
  END IF;
  
  RAISE_APPLICATION_ERROR(-20101, 'A empresa da convocação não pode ser alterada!');
  
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 27/04/2018 14:24:13
Num.Script: 50893-0-0
Nro. O.S. : 1129759
Nome      : Cria - TFPFCTI
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TFPFCTI
NomeObjeto: TFPFCTI
TipoObjeto: TABLE
NomeTabela: TFPFCTI
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPFCTI (
  CODCONV           NUMBER(10)  NOT NULL,
  CODEMP            NUMBER(5)   NOT NULL,
  CODFUNC           NUMBER(10)  NOT NULL,
  DTINICIO              DATE        NOT NULL,
  DTFIM                 DATE        NOT NULL,
  COMPARECEU      CHAR(1)     DEFAULT 'N' NOT NULL,
  TIPLOCALTRAB    CHAR(1)     DEFAULT '0' NOT NULL,
  CONSTRAINT PK_TFPFCTI PRIMARY KEY (CODCONV, CODEMP, CODFUNC),
  CONSTRAINT FK_TFPFCTI_TFPCTI FOREIGN KEY (CODCONV) REFERENCES TFPCTI (CODCONV),
  CONSTRAINT FK_TFPFCTI_TFPFUN FOREIGN KEY (CODEMP, CODFUNC) REFERENCES TFPFUN (CODEMP, CODFUNC),
  CONSTRAINT CKC_TIPLOCALTRAB_TFPFCTI CHECK(TIPLOCALTRAB IN('0', '1', '2')),
  CONSTRAINT CKC_COMPARECEU_TFPFCTI CHECK(COMPARECEU IN('S', 'N'))
)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 27/04/2018 14:24:17
Num.Script: 50894-0-0
Nro. O.S. : 1129759
Nome      : Cria - TRG_INC_UPD_TFPFCTI
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TRG_INC_UPD_TFPFCTI
NomeObjeto: TRG_INC_UPD_TFPFCTI
TipoObjeto: TRIGGER
NomeTabela: TFPFCTI
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_INC_UPD_TFPFCTI
BEFORE INSERT OR UPDATE ON TFPFCTI
FOR EACH ROW
DECLARE 
  P_COUNT INTEGER;
  P_CODEMP TFPCTI.CODEMP%TYPE;
BEGIN

  IF STP_GET_ATUALIZANDO THEN
    RETURN;
  END IF;
  
  BEGIN
    SELECT CODEMP
    INTO P_CODEMP
    FROM TFPCTI
    WHERE CODCONV = :NEW.CODCONV;
  EXCEPTION WHEN NO_DATA_FOUND THEN
    P_CODEMP := NULL;
  END;
  
  IF (P_CODEMP IS NULL OR P_CODEMP <> :NEW.CODEMP) THEN
    RAISE_APPLICATION_ERROR(-20101, 'A empresa do funcionário tem que ser igual à empresa da convocação!');
  END IF;
  
  IF INSERTING THEN
    SELECT COUNT(1)
    INTO P_COUNT
    FROM TFPFUN
    WHERE CODFUNC = :NEW.CODFUNC
    AND CODEMP = :NEW.CODEMP
    AND CODCATEGESOCIAL = 111;
    
    IF P_COUNT = 0 THEN
      RAISE_APPLICATION_ERROR(-20101, 'Funcionário não configurado para trabalho intermitente!');
    END IF;
  END IF;
  
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 27/04/2018 14:24:23
Num.Script: 50895-0-0
Nro. O.S. : 1129759
Nome      : Cria - CODCONV
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - CODCONV
NomeObjeto: CODCONV
TipoObjeto: COLUMN
NomeTabela: TFPBAS
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPBAS ADD CODCONV NUMBER(10) 
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 27/04/2018 14:24:27
Num.Script: 50896-0-0
Nro. O.S. : 1129759
Nome      : Cria - FK_TFPBAS_TFPCTI
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - FK_TFPBAS_TFPCTI
NomeObjeto: FK_TFPBAS_TFPCTI
TipoObjeto: FOREIGN KEY
NomeTabela: TFPBAS
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPBAS ADD 
  CONSTRAINT FK_TFPBAS_TFPCTI FOREIGN KEY (CODCONV) REFERENCES TFPCTI (CODCONV)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 11/05/2018 10:51:34
Num.Script: 52447-0-0
Nro. O.S. : 1170347
Nome      : Cria - TFPFUN INDNIF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: INDNIF
TipoObjeto: COLUMN
NomeTabela: TFPFUN
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TFPFUN ADD INDNIF CHAR(1)';
   EXECUTE IMMEDIATE 'ALTER TABLE TFPFUN ADD  CONSTRAINT CKC_INDNIF_TFPFUN CHECK (INDNIF IN (''1'',''2'',''3'') OR INDNIF IS NULL )';
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 11/05/2018 10:52:00
Num.Script: 52447-0-1
Nro. O.S. : 1170347
Nome      : Cria - TFPFUN NIFBENEF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: NIFBENEF
TipoObjeto: COLUMN
NomeTabela: TFPFUN
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPFUN ADD NIFBENEF VARCHAR2(20)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 09/05/2018 15:54:46
Num.Script: 52448-0-0
Nro. O.S. : 1175030
Nome      : Cria - TFPBAS CODSIND
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: CODSIND
TipoObjeto: COLUMN
NomeTabela: TFPBAS
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPBAS ADD CODSIND DECIMAL(5, 0)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 09/05/2018 15:55:05
Num.Script: 52448-0-1
Nro. O.S. : 1175030
Nome      : Cria - TFPBAS PROCESSO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: PROCESSO
TipoObjeto: COLUMN
NomeTabela: TFPBAS
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPBAS ADD PROCESSO VARCHAR2(30)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 09/05/2018 15:55:17
Num.Script: 52448-0-2
Nro. O.S. : 1175030
Nome      : Cria - TFPBAS DSC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: DSC
TipoObjeto: COLUMN
NomeTabela: TFPBAS
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPBAS ADD DSC VARCHAR2(255)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 09/05/2018 15:55:28
Num.Script: 52448-0-3
Nro. O.S. : 1175030
Nome      : Cria - TFPBAS INDMV
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: INDMV
TipoObjeto: COLUMN
NomeTabela: TFPBAS
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPBAS ADD INDMV DECIMAL(5, 0)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 09/05/2018 15:55:43
Num.Script: 52448-0-4
Nro. O.S. : 1170347
Nome      : Cria - TFPBAS GERARPARESCISAO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: GERARPARESCISAO
TipoObjeto: COLUMN
NomeTabela: TFPBAS
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TFPBAS ADD GERARPARESCISAO CHAR(1)';
   EXECUTE IMMEDIATE 'UPDATE TFPBAS SET GERARPARESCISAO = ''N''';
   EXECUTE IMMEDIATE 'ALTER TABLE TFPBAS ADD  CONSTRAINT CKC_GERARPARESCISAO_TFPBAS CHECK (GERARPARESCISAO IN (''S'',''N''))';
   EXECUTE IMMEDIATE 'ALTER TABLE TFPBAS MODIFY GERARPARESCISAO DEFAULT ''N'' NOT NULL';
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 09/05/2018 15:54:06
Num.Script: 52448-0-5
Nro. O.S. : 1175749
Nome      : Cria - TFPBAS CODSIND
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: CODSIND
TipoObjeto: COLUMN
NomeTabela: TFPBAS
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPBAS ADD CODSIND DECIMAL(5, 0)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 09/05/2018 15:54:00
Num.Script: 52448-0-6
Nro. O.S. : 1175749
Nome      : Cria - TFPBAS PROCESSO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: PROCESSO
TipoObjeto: COLUMN
NomeTabela: TFPBAS
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPBAS ADD PROCESSO VARCHAR2(30)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 09/05/2018 15:53:53
Num.Script: 52448-0-7
Nro. O.S. : 1175749
Nome      : Cria - TFPBAS DSC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: DSC
TipoObjeto: COLUMN
NomeTabela: TFPBAS
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPBAS ADD DSC VARCHAR2(255)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 09/05/2018 15:53:47
Num.Script: 52448-0-8
Nro. O.S. : 1175749
Nome      : Cria - TFPBAS INDMV
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: INDMV
TipoObjeto: COLUMN
NomeTabela: TFPBAS
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPBAS ADD INDMV DECIMAL(5, 0)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 09/05/2018 15:53:42
Num.Script: 52448-0-9
Nro. O.S. : 1175749
Nome      : Cria - TFPFOL CODEMPORIG
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: CODEMPORIG
TipoObjeto: COLUMN
NomeTabela: TFPFOL
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPFOL ADD CODEMPORIG DECIMAL(5, 0)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 09/05/2018 15:53:35
Num.Script: 52448-0-10
Nro. O.S. : 1175749
Nome      : Cria - TFPFOL CODFUNCORIG
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: CODFUNCORIG
TipoObjeto: COLUMN
NomeTabela: TFPFOL
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPFOL ADD CODFUNCORIG DECIMAL(10, 0)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 09/05/2018 15:53:30
Num.Script: 52448-0-11
Nro. O.S. : 1175749
Nome      : Cria - TFPFOL SEQROE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: SEQROE
TipoObjeto: COLUMN
NomeTabela: TFPFOL
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPFOL ADD SEQROE DECIMAL(5, 0)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 09/05/2018 15:53:24
Num.Script: 52448-0-12
Nro. O.S. : 1175749
Nome      : Cria - TFPCNV DTEFACCONV
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: DTEFACCONV
TipoObjeto: COLUMN
NomeTabela: TFPCNV
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPCNV ADD DTEFACCONV DATE
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 09/05/2018 15:53:19
Num.Script: 52448-0-13
Nro. O.S. : 1175749
Nome      : Criar - TFPTVPS
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPTVPS
NomeObjeto: TFPTVPS
TipoObjeto: TABLE
NomeTabela: TFPTVPS
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPTVPS
(
  CODEMP       NUMBER(5)                        NOT NULL,
  CODFUNC      NUMBER(10)                       NOT NULL,
  REFERENCIA   DATE                             NOT NULL,
  SEQUENCIA    NUMBER(5)                        NOT NULL,
  CODCONVENIO  NUMBER(10)                       NOT NULL,
  TIPFOLHA     VARCHAR2(1 BYTE)                 NOT NULL,
  CODPARC      NUMBER(10)                       DEFAULT 0                     NOT NULL,
  VALOR        FLOAT(126),
  INDTOMADOR   FLOAT(126),
  DTALTER      DATE                             DEFAULT SYSDATE               NOT NULL,
  QTDDIASAV    NUMBER(5)
)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 09/05/2018 15:53:13
Num.Script: 52448-0-14
Nro. O.S. : 1175749
Nome      : Criar - CODUSU TFPTVPS 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - CODUSU TFPTVPS 
NomeObjeto: CODUSU
TipoObjeto: COLUMN
NomeTabela: TFPTVPS 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE P_COUNT NUMBER(5);
BEGIN
  SELECT COUNT(1) INTO P_COUNT
  FROM USER_TAB_COLUMNS
  WHERE TABLE_NAME = 'TSIUSU'
    AND COLUMN_NAME = 'CODUSU'
    AND DATA_PRECISION = 5;
  
  IF P_COUNT > 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE TFPTVPS ADD CODUSU NUMBER(5)';
  ELSE
    EXECUTE IMMEDIATE 'ALTER TABLE TFPTVPS ADD CODUSU NUMBER(10)';
  END IF;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 09/05/2018 15:53:08
Num.Script: 52448-0-15
Nro. O.S. : 1175749
Nome      : Criar - PK_TFPTVPS 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - PK_TFPTVPS 
NomeObjeto: PK_TFPTVPS 
TipoObjeto: PRIMARY KEY
NomeTabela: TFPTVPS 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPTVPS ADD CONSTRAINT PK_TFPTVPS PRIMARY KEY (CODEMP, CODFUNC, REFERENCIA, SEQUENCIA, CODCONVENIO, TIPFOLHA, CODPARC)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 09/05/2018 15:53:01
Num.Script: 52448-0-16
Nro. O.S. : 1175749
Nome      : Criar - TFPTFOL
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPTFOL
NomeObjeto: TFPTFOL
TipoObjeto: TABLE
NomeTabela: TFPTFOL
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPTFOL
(
  REFERENCIA      DATE                          NOT NULL,
  CODEMP          NUMBER(5)                     NOT NULL,
  CODFUNC         NUMBER(10)                    NOT NULL,
  TIPFOLHA        VARCHAR2(1 BYTE)              DEFAULT 'N'                   NOT NULL,
  CODEVENTO       NUMBER(5)                     NOT NULL,
  TIPEVENTO       NUMBER(5)                     DEFAULT -1                    NOT NULL,
  SEQUENCIA       NUMBER(5)                     NOT NULL,
  CODPARC         NUMBER(10)                    NOT NULL,
  VLREVENTO       FLOAT(126)                    NOT NULL,
  INDICE          FLOAT(126),
  UNIDADE         VARCHAR2(1 BYTE)              DEFAULT 'V'                   NOT NULL,
  REFERENCIAORIG  DATE,
  TIPFOLHAORIG    VARCHAR2(1 BYTE),
  SEQUENCIAORIG   NUMBER(5),
  CODEVENTOORIG   NUMBER(5),
  CODEMPORIG      NUMBER(5),
  CODFUNCORIG     NUMBER(10),
  SEQROE          NUMBER(5),
  INDTOMADOR      FLOAT(126),
  QTDDIASAV       NUMBER(5),
  DTALTER         DATE                          DEFAULT SYSDATE               NOT NULL
)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 09/05/2018 15:52:56
Num.Script: 52448-0-17
Nro. O.S. : 1175749
Nome      : Criar - CODUSU TFPTFOL 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - CODUSU TFPTFOL 
NomeObjeto: CODUSU
TipoObjeto: COLUMN
NomeTabela: TFPTFOL 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE P_COUNT NUMBER(5);
BEGIN
  SELECT COUNT(1) INTO P_COUNT
  FROM USER_TAB_COLUMNS
  WHERE TABLE_NAME = 'TSIUSU'
    AND COLUMN_NAME = 'CODUSU'
    AND DATA_PRECISION = 5;
  
  IF P_COUNT > 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE TFPTFOL ADD CODUSU NUMBER(5)';
  ELSE
    EXECUTE IMMEDIATE 'ALTER TABLE TFPTFOL ADD CODUSU NUMBER(10)';
  END IF;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 09/05/2018 15:52:49
Num.Script: 52448-0-18
Nro. O.S. : 1175749
Nome      : Criar - PK_TFPTFOL 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - PK_TFPTFOL 
NomeObjeto: PK_TFPTFOL 
TipoObjeto: PRIMARY KEY
NomeTabela: TFPTFOL 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPTFOL ADD CONSTRAINT PK_TFPTFOL PRIMARY KEY (REFERENCIA, CODEMP, CODFUNC, TIPFOLHA, CODEVENTO, SEQUENCIA, TIPEVENTO, CODPARC)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 09/05/2018 15:52:44
Num.Script: 52448-0-19
Nro. O.S. : 1175749
Nome      : Alterar - TRG_DLT_TFPBAS 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - TRG_DLT_TFPBAS 
NomeObjeto: TRG_DLT_TFPBAS 
TipoObjeto: TRIGGER
NomeTabela: TFPBAS 
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_DLT_TFPBAS 
BEFORE DELETE ON TFPBAS 
FOR EACH ROW
BEGIN

  IF STP_GET_ATUALIZANDO THEN
    RETURN;
  END IF;
 
  IF (:OLD.NUFIN IS NOT NULL) THEN
    RAISE_APPLICATION_ERROR(-20101, 'Este cálculo não pode ser excluído ou recalculado porque seu valor já foi gerado no Financeiro. Exclua primeiramente o lançamento correspondente no Financeiro. Número único do título (' || :OLD.NUFIN || ')');  
  END IF; 
  
  DELETE 
  FROM TFPRTT
  WHERE CODEMP = :OLD.CODEMP
  AND CODFUNC = :OLD.CODFUNC
  AND REFERENCIA = :OLD.REFERENCIA
  AND TIPFOLHA = :OLD.TIPFOLHA;
  
  DELETE 
  FROM TFPMED
  WHERE CODEMP = :OLD.CODEMP
  AND CODFUNC = :OLD.CODFUNC
  AND REFERENCIA = :OLD.REFERENCIA
  AND ORIGEM = :OLD.TIPFOLHA;

  DELETE 
  FROM TFPTFOL
  WHERE CODEMP = :OLD.CODEMP
  AND CODFUNC = :OLD.CODFUNC
  AND REFERENCIA = :OLD.REFERENCIA
  AND TIPFOLHA = :OLD.TIPFOLHA;
  
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 09/05/2018 15:52:38
Num.Script: 52448-0-20
Nro. O.S. : 1175749
Nome      : Criar - TRG_DLT_TFPVPS 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TRG_DLT_TFPVPS 
NomeObjeto: TRG_DLT_TFPVPS 
TipoObjeto: TRIGGER
NomeTabela: TFPVPS 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_DLT_TFPVPS 
BEFORE DELETE ON TFPVPS 
FOR EACH ROW
BEGIN

  IF STP_GET_ATUALIZANDO THEN
    RETURN;
  END IF;
 
  DELETE 
  FROM TFPTVPS
  WHERE CODEMP = :OLD.CODEMP
  AND CODFUNC = :OLD.CODFUNC
  AND SEQUENCIA = :OLD.SEQUENCIA
  AND CODCONVENIO = :OLD.CODCONVENIO
  AND REFERENCIA = :OLD.REFERENCIA;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 13/04/2018 17:55:11
Num.Script: 52618-0-0
Nro. O.S. : 1167274
Nome      : Alterar - TRG_DLT_TGFITE 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - TRG_DLT_TGFITE 
NomeObjeto: TRG_DLT_TGFITE 
TipoObjeto: TRIGGER
NomeTabela: TGFITE
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_DLT_TGFITE
AFTER DELETE ON TGFITE FOR EACH ROW
DECLARE
    P_CUSTOPOREMPRESA          CHAR;
    P_DTPATUCUST               SMALLINT;
    P_DTNEG                    DATE;
    P_TIPMOV                   CHAR(1);
    P_CODTIPOPER               INT;
    P_DHTIPOPER                DATE;
    P_DTMOV                    DATE;
    P_DTENTSAI                 DATE;
    P_DTFATUR                  DATE;
    P_PRECIFICA                CHAR(1);
    P_CODEMPCUSTO              TGFITE.CODEMP%TYPE;
    P_CODEMPNEGOC              TGFITE.CODEMP%TYPE;
    P_DTATUAL                  DATE;
    P_CODEMP                   TGFITE.CODEMP%TYPE;
    P_COUNT                    INT:= 0;
    P_INICIOCONTEST            INT;
    P_ATUALESTOQUE             TGFITE.ATUALESTOQUE%TYPE;
    P_QTDEST                   TGFITE.QTDNEG%TYPE;
    P_ATUALIZOU                VARCHAR2(1);
    P_NT_USERNAME              VARCHAR2(30);
    P_HOSTNAME                 VARCHAR2(64);
    P_USUARIO                  VARCHAR2(30);
    P_DTPDTVIGOR               INT;
    P_PROGRAMNAME              VARCHAR2(80);
    ERRMSG                     VARCHAR2(255);
    ERROR                      EXCEPTION;
    P_VALIDAR                  BOOLEAN;
    P_CODPARC                  TGFCAB.CODPARC%TYPE;
    P_SINAL                    NUMBER(5);
    P_TIPO                     CHAR(1);
    /* */
    P_NUREM                    TGFCAB.NUREM%TYPE;
    P_GERARPARCDEST            TGFTOP.GERARPARCDEST%TYPE; 
    P_CODTABCALC               TGFEMP.CODTABCALC%TYPE;
    P_CODTAB                   TGFTAB.CODTAB%TYPE;
    
    --Alteração JOEL começo OS 909403
    V_NUMCOTACAO TGFITC.NUMCOTACAO%TYPE;
    V_CODPROD TGFITC.CODPROD%TYPE;
    V_CONTROLE TGFITC.CONTROLE%TYPE;
    V_CODLOCAL TGFITC.CODLOCAL%TYPE;
    V_DIFERENCIADOR TGFITC.DIFERENCIADOR%TYPE;
    --Alteração JOEL fim OS 909403
BEGIN

  IF STP_GET_ATUALIZANDO THEN
    RETURN;
  END IF;

  /* 
  sincronização de dados
  */
  P_VALIDAR := Fpodevalidar('TGFITE');
  P_NUREM   := 0;
  SELECT COUNT(1)  INTO P_COUNT  FROM TGFCCX
  WHERE NUNOTA = :OLD.NUNOTA;
  IF P_COUNT <> 0 THEN
  ERRMSG := 'Item não pode ser deletado, existe referência na TGFCCX-Tabela de Coletor';
  RAISE ERROR;
  END IF;
  
  BEGIN
    SELECT LOGICO 
    INTO P_CUSTOPOREMPRESA 
    FROM TSIPAR 
    WHERE CHAVE = 'CUSTOPOREMP' 
      AND CODUSU = 0;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      P_CUSTOPOREMPRESA := 'N';
  END;
  
  BEGIN
    SELECT CODTABCALC 
    INTO P_CODTABCALC 
    FROM TGFEMP 
    WHERE CODEMP = :OLD.CODEMP;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      P_CODTABCALC := 0;
  END;

  /* OS 902640 */
  IF :OLD.STATUSNOTA = 'L' THEN
       SELECT COUNT(1) INTO P_COUNT FROM  TCBINT C WHERE  C.NUNICO = :OLD.NUNOTA AND C.ORIGEM = 'E';
       IF P_COUNT <> 0 THEN
          ERRMSG := 'Nota já foi contabilizada, não pode ser excluída. Nota de Nro Único: '|| TO_CHAR(:OLD.NUNOTA) ||'';
          RAISE ERROR;
       END IF;

       SELECT COUNT(1) INTO P_COUNT FROM TGFLIV WHERE NUNOTA = :OLD.NUNOTA AND ORIGEM IN ('A', 'D', 'E');
       IF P_COUNT <> 0 THEN
          ERRMSG := 'Nota já foi gerada no Livro Fiscal de ICMS/IPI, não pode ser excluída. Nota de Nro Único: '|| TO_CHAR(:OLD.NUNOTA) ||'';
          RAISE ERROR;
       END IF;

       SELECT COUNT(1) INTO P_COUNT FROM TGFLIS WHERE NUNOTA = :OLD.NUNOTA AND ORIGEM = 'E';
       IF P_COUNT <> 0 THEN
          ERRMSG := 'Nota já foi gerada no Livro Fiscal de ISS, não pode ser excluída. Nota de Nro Único: '|| TO_CHAR(:OLD.NUNOTA) ||'';
          RAISE ERROR;
       END IF;
  END IF;

 /* VALIDAÇÃO DO PLANEJAMENTO */
  SELECT COUNT(1) INTO P_COUNT
    FROM TGFPPL
   WHERE NUNOTAORIG = :OLD.NUNOTA
     AND SEQUENCIAORIG = :OLD.SEQUENCIA
     AND NUNOTA IS NOT NULL;
  IF P_COUNT <> 0 THEN
  ERRMSG := 'Este pedido gerou uma planejamento que gerou uma produção e não pode ser excluído.: ' || TO_CHAR(:OLD.CODPROD);
  RAISE ERROR;
  ELSE
    SELECT COUNT(1) INTO P_COUNT  
  FROM TGFPPL
  WHERE NUNOTAORIG = :OLD.NUNOTA
      AND SEQUENCIAORIG = :OLD.SEQUENCIA;
    IF P_COUNT <> 0 THEN
     DELETE FROM TGFPPL
      WHERE NUNOTAORIG = :OLD.NUNOTA
        AND SEQUENCIAORIG = :OLD.SEQUENCIA;
    END IF;
  END IF;

  --OS 597694
  SELECT COUNT(1) INTO P_COUNT
  FROM TGFVAR TORIG
  WHERE TORIG.NUNOTAORIG = :OLD.NUNOTA  
    AND TORIG.SEQUENCIAORIG = :OLD.SEQUENCIA
    AND TORIG.NUNOTA <> TORIG.NUNOTAORIG;
  IF P_COUNT > 0 THEN
    ERRMSG := 'Item não pode ser excluído deu origem a outro item.';  
    RAISE ERROR; 
  END IF;

  BEGIN
    SELECT C.DTNEG, C.TIPMOV,C.CODTIPOPER, C.DHTIPOPER, C.DTMOV, C.DTENTSAI, C.DTFATUR, C.CODEMPNEGOC, C.CODPARC, NVL(C.NUREM,0)
    INTO  P_DTNEG,P_TIPMOV, P_CODTIPOPER, P_DHTIPOPER, P_DTMOV, P_DTENTSAI, P_DTFATUR, P_CODEMPNEGOC, P_CODPARC, P_NUREM
    FROM TGFCAB C
    WHERE  C.NUNOTA = :OLD.NUNOTA;
  EXCEPTION WHEN NO_DATA_FOUND THEN
    BEGIN
      SELECT DISTINCT  C.DTNEG, C.TIPMOV, C.CODTIPOPER, C.DHTIPOPER, C.DTMOV, C.DTENTSAI, C.DTFATUR, C.CODEMPNEGOC, C.CODPARC
      INTO  P_DTNEG, P_TIPMOV, P_CODTIPOPER, P_DHTIPOPER, P_DTMOV, P_DTENTSAI, P_DTFATUR, P_CODEMPNEGOC, P_CODPARC
      FROM TGFCAB_DLT C
      WHERE  C.NUNOTA = :OLD.NUNOTA;
    EXCEPTION WHEN NO_DATA_FOUND THEN
   P_TIPMOV := ' ';
    END;
  END;
  IF (P_NUREM>0) THEN 
    SELECT T.GERARPARCDEST INTO P_GERARPARCDEST
    FROM TGFTOP T
    WHERE T.CODTIPOPER = P_CODTIPOPER
     AND T.DHALTER = P_DHTIPOPER;
    IF (P_GERARPARCDEST='N') THEN
     SELECT COUNT(1) INTO P_COUNT 
  FROM TGFCAB C
  WHERE C.NUNOTA = P_NUREM;
  IF NVL(P_COUNT,0)<>0 THEN 
   ERRMSG := 'Atencao ! movimento de remessa nao pode ser modificado, movimento de origem : ' || TO_CHAR(P_NUREM, '99999999');
   RAISE ERROR;
  END IF;
 END IF;
  END IF;

  SELECT COUNT(1) INTO P_COUNT
  FROM TCEVAR
  WHERE NUNOTAORIG = :OLD.NUNOTA
    AND SEQUENCIAORIG = :OLD.SEQUENCIA;
  IF P_COUNT > 0 THEN
    ERRMSG := 'Este Pedido/Nota('||TO_CHAR(:OLD.NUNOTA)||') gerou um processo de importação e não pode ser excluído.';
    RAISE ERROR;
  END IF;
  
  IF (:OLD.STATUSNOTA = 'L')  AND (P_TIPMOV <> ' ')THEN
    SELECT PRECIFICA INTO P_PRECIFICA
    FROM TGFTOP
    WHERE CODTIPOPER = P_CODTIPOPER
     AND DHALTER = P_DHTIPOPER;
    IF (P_PRECIFICA <> 'N') THEN
      /*
        Preve os registros os novos com nunota e sequencia na pk
      */
    SELECT COUNT(1) INTO P_COUNT
    FROM TGFCUS
      WHERE NUNOTA = :OLD.NUNOTA
        AND SEQUENCIA = :OLD.SEQUENCIA;
    IF P_COUNT<>0 THEN
      DELETE FROM TGFCUS
      WHERE NUNOTA = :OLD.NUNOTA
        AND SEQUENCIA = :OLD.SEQUENCIA;
      END IF;
      IF (P_TIPMOV <> 'F') OR (:OLD.USOPROD <> 'M') THEN
        SELECT INTEIRO INTO P_DTPATUCUST      FROM TSIPAR WHERE CHAVE = 'DTPATUCUST'  AND CODUSU = 0;
        IF (P_CUSTOPOREMPRESA = 'S')  THEN
           IF (P_TIPMOV = 'T') THEN
             P_CODEMPCUSTO := P_CODEMPNEGOC;
           ELSE
             P_CODEMPCUSTO := :OLD.CODEMP;
           END IF;
        ELSE
          P_CODEMPCUSTO := 1;
        END IF;
        IF (P_DTPATUCUST = 0.00) THEN
           P_DTATUAL := P_DTNEG;
        ELSIF (P_DTPATUCUST = 1) THEN
           P_DTATUAL := P_DTENTSAI;
        ELSIF (P_DTPATUCUST = 2) THEN
           P_DTATUAL := P_DTMOV;
        ELSIF (P_DTPATUCUST = 3) THEN
           P_DTATUAL := P_DTFATUR;
        ELSE
          P_DTATUAL := P_DTMOV;
        END IF;
        IF ((P_TIPMOV  = 'T') AND (:OLD.SEQUENCIA < 0)) OR
           ((P_TIPMOV <> 'T') AND (:OLD.SEQUENCIA > 0)) THEN
           /*
             Preve os registros os antigos com nunota e sequencia zero
           */
       SELECT COUNT(1) INTO P_COUNT
       FROM TGFCUS
           WHERE CODEMP  = P_CODEMPCUSTO
             AND CODPROD = :OLD.CODPROD
             AND DTATUAL = P_DTATUAL
             AND NUNOTA = 0
             AND SEQUENCIA = 0;
           IF(P_COUNT<>0) THEN
             DELETE FROM TGFCUS
             WHERE CODEMP  = P_CODEMPCUSTO
               AND CODPROD = :OLD.CODPROD
               AND DTATUAL = P_DTATUAL
               AND NUNOTA = 0
               AND SEQUENCIA = 0;
           END IF;
        END IF;
        IF (P_PRECIFICA = 'S') AND (P_TIPMOV IN ('C', 'O')) THEN
            SELECT INTEIRO INTO P_DTPDTVIGOR  FROM TSIPAR WHERE CHAVE = 'DTPDTVIGOR' AND CODUSU = 0;
            P_DTATUAL := TRUNC(SYSDATE);
            IF P_DTENTSAI IS NOT NULL THEN
             P_DTATUAL := P_DTENTSAI;
            ELSIF P_DTPDTVIGOR = 0 THEN
             P_DTATUAL := P_DTNEG;
            ELSIF P_DTPDTVIGOR = 1 THEN
             P_DTATUAL := P_DTENTSAI;
            ELSIF P_DTPDTVIGOR = 2 THEN
             P_DTATUAL := P_DTMOV;
            ELSIF P_DTPDTVIGOR = 3 THEN
             P_DTATUAL := P_DTFATUR;
            END IF;
                   
            P_CODTAB := 0;
            IF (P_CUSTOPOREMPRESA = 'S' AND P_CODTABCALC <> 0) THEN
            P_CODTAB := P_CODTABCALC;
            END IF;

            SELECT COUNT(1) INTO P_COUNT 
            FROM TGFEXC E
            WHERE E.CODPROD = :OLD.CODPROD 
            AND EXISTS (SELECT T.NUTAB  
                      FROM TGFTAB T 
                      WHERE T.NUTAB = E.NUTAB 
                        AND T.DTVIGOR = P_DTATUAL 
                        AND T.CODTAB = P_CODTAB);

            IF (P_COUNT <> 0) THEN
             DELETE FROM TGFEXC E
             WHERE E.CODPROD = :OLD.CODPROD 
               AND EXISTS (SELECT T.NUTAB  
                           FROM TGFTAB T 
                           WHERE T.NUTAB = E.NUTAB 
                             AND T.DTVIGOR = P_DTATUAL 
                             AND T.CODTAB = P_CODTAB);
        END IF;
        END IF;
      END IF;
    END IF;
  END IF;

  SELECT COUNT(1) INTO P_COUNT 
  FROM TSILIB 
  WHERE NUCHAVE = :OLD.NUNOTA
                       AND TABELA    IN ('TGFCAB', 'TGFITE')
                       AND SEQUENCIA = :OLD.SEQUENCIA;
  IF(P_COUNT <> 0) THEN 
    DELETE FROM TSILIB 
  WHERE NUCHAVE = :OLD.NUNOTA
      AND TABELA IN ('TGFCAB', 'TGFITE')
      AND SEQUENCIA = :OLD.SEQUENCIA;
  END IF;

  IF (:OLD.ATUALESTOQUE <> 0) AND ((:OLD.RESERVA='N') OR (:OLD.PENDENTE = 'S')) THEN
    BEGIN
      SELECT INTEIRO INTO P_INICIOCONTEST FROM TSIPAR WHERE CHAVE = 'INICIOCONTEST';
    EXCEPTION WHEN NO_DATA_FOUND THEN
      INSERT INTO TSIPAR (CHAVE, DESCRICAO, CODUSU, TIPO, MODULO, CLASSE, ABA, LOGICO, INTEIRO)
      VALUES ('INICIOCONTEST', 'Num. Início(TGFNum) do controle de estoque', 0, 'I', 'E', 'Diversas', 'Produto', 'N', 0);
      P_INICIOCONTEST := 0;
    END;
    IF (:OLD.NUNOTA >= P_INICIOCONTEST) THEN
        IF (:OLD.RESERVA = 'S') THEN
          IF (:OLD.PENDENTE = 'S') THEN
            P_QTDEST := :OLD.QTDNEG - :OLD.QTDENTREGUE;
          ELSE
            P_QTDEST := 0;
          END IF;
        ELSE
          P_QTDEST := :OLD.QTDNEG;
        END IF;
        IF P_QTDEST <> 0 THEN
          P_ATUALESTOQUE := :OLD.ATUALESTOQUE * -1;
          Stp_Atualiza_Tgfest(:OLD.RESERVA, P_ATUALESTOQUE, :OLD.CODEMP, :OLD.CODPROD, :OLD.CONTROLE, :OLD.CODLOCALORIG, P_QTDEST, :OLD.STATUSLOTE, P_ATUALIZOU);
          IF (P_ATUALIZOU = 'N') THEN
   ERRMSG := 'Falha na atualização do estoque do produto: ' || TO_CHAR(:OLD.CODPROD, '9999999999');
   RAISE ERROR;
          END IF;
        END IF;
    END IF;
  END IF;

  IF (P_TIPMOV <> 'P' AND P_TIPMOV <> 'V') THEN
      SELECT COUNT(1) INTO P_COUNT
      FROM TGFRAM
      WHERE NUNOTA = :OLD.NUNOTA
        AND SEQUENCIA = :OLD.SEQUENCIA
        AND STATUS <> 'P';
      IF P_COUNT > 0 THEN
        ERRMSG := 'Nota/Item não pode ser excluído. '||
                  'Motivo: Já existem AMOSTRAS para este item em análise. '||
                  'Exclua as amostras antes de excluir a Nota/Item';
        RAISE ERROR;
      END IF;
  END IF;

  SELECT COUNT(1) INTO P_COUNT
  FROM TGFRAM
  WHERE NUNOTA = :OLD.NUNOTA
    AND SEQUENCIA = :OLD.SEQUENCIA
    AND STATUS = 'P';
  IF P_COUNT > 0 THEN
    DELETE FROM TGFRAM
    WHERE NUNOTA = :OLD.NUNOTA
      AND SEQUENCIA = :OLD.SEQUENCIA
      AND STATUS = 'P';
  END IF;

  INSERT INTO TGFITE_DLT (NUNOTA, SEQUENCIA, PENDENTE, TIPMOV, RESERVA, ATUALESTOQUE,
                          CODEMP, CODPROD, CONTROLE, QTDNEG, QTDENTREGUE, CODLOCAL, PERCPUREZA, PERCGERMIN)
                  VALUES (:OLD.NUNOTA, :OLD.SEQUENCIA, :OLD.PENDENTE, P_TIPMOV, :OLD.RESERVA, :OLD.ATUALESTOQUE,
                          :OLD.CODEMP, :OLD.CODPROD, :OLD.CONTROLE, :OLD.QTDNEG, :OLD.QTDENTREGUE, :OLD.CODLOCALORIG, :OLD.PERCPUREZA, :OLD.PERCGERMIN);

  IF (:OLD.STATUSNOTA = 'L') THEN
     SELECT  SUBSTR(OSUSER,1,30), SUBSTR(MACHINE,1,64), PROGRAM  
     INTO P_NT_USERNAME, P_HOSTNAME, P_PROGRAMNAME    
     FROM V$SESSION
     WHERE AUDSID = USERENV('SESSIONID')
       AND ROWNUM = 1;    

     INSERT INTO TGFITE_EXC (NUTAB, NUNOTA, SEQUENCIA, CODEMP, CODPROD, CODLOCALORIG,
                             CONTROLE, USOPROD, CODCFO, QTDNEG, QTDENTREGUE, QTDCONFERIDA, VLRUNIT,
                             VLRTOT, VLRCUS, BASEIPI, VLRIPI, BASEICMS, VLRICMS, VLRDESC, BASESUBSTIT,
                             VLRSUBST, ALIQICMS, ALIQIPI, PENDENTE, CODVOL, CODTRIB, ATUALESTOQUE,
                             OBSERVACAO, RESERVA, STATUSNOTA, CODOBSPADRAO, CODVEND, CODEXEC, FATURAR,
                             NT_USERNAME,HOSTNAME, DHEXCLUSAO, USUARIO, VLRREPRED, VLRDESCBONIF, PERCDESC, PROGRAMA, PERCPUREZA, PERCGERMIN, CODUSU,
                             BASEISS, VLRISS, CODTPA, ORIGPROD,VLRUNITLOC, SEQUENCIAFISCAL, CODCFPS, CODENQIPI,
                             CODESPECST, VLRDESCRAT, CODAGREGACAO, INDESCALA, CNPJFABRICANTE, CODBENEFNAUF, BASESTFCPINTANT, PERCSTFCPINTANT, VLRSTFCPINTANT, 
                             BASESTEXTRANOTA, ALIQSTEXTRANOTA)
    SELECT 
      :OLD.NUTAB, :OLD.NUNOTA, :OLD.SEQUENCIA, :OLD.CODEMP, :OLD.CODPROD, :OLD.CODLOCALORIG,
      :OLD.CONTROLE, :OLD.USOPROD, :OLD.CODCFO, :OLD.QTDNEG, :OLD.QTDENTREGUE, :OLD.QTDCONFERIDA, :OLD.VLRUNIT,
      :OLD.VLRTOT, :OLD.VLRCUS, :OLD.BASEIPI, :OLD.VLRIPI, :OLD.BASEICMS, :OLD.VLRICMS, :OLD.VLRDESC, :OLD.BASESUBSTIT,
      :OLD.VLRSUBST, :OLD.ALIQICMS, :OLD.ALIQIPI, :OLD.PENDENTE, :OLD.CODVOL, :OLD.CODTRIB, :OLD.ATUALESTOQUE,
      :OLD.OBSERVACAO, :OLD.RESERVA, :OLD.STATUSNOTA, :OLD.CODOBSPADRAO, :OLD.CODVEND, :OLD.CODEXEC, :OLD.FATURAR,
      P_NT_USERNAME, P_HOSTNAME, SYSDATE, P_USUARIO,:OLD.VLRREPRED,:OLD.VLRDESCBONIF,:OLD.PERCDESC, P_PROGRAMNAME,:OLD.PERCPUREZA, 
      :OLD.PERCGERMIN, Tsiusu_Log_Pkg.V_CODUSULOG, :OLD.BASEISS, :OLD.VLRISS, :OLD.CODTPA, :OLD.ORIGPROD, :OLD.VLRUNITLOC, :OLD.SEQUENCIAFISCAL, 
      :OLD.CODCFPS, :OLD.CODENQIPI, :OLD.CODESPECST, :OLD.VLRDESCRAT, :OLD.CODAGREGACAO, :OLD.INDESCALA, :OLD.CNPJFABRICANTE, :OLD.CODBENEFNAUF, 
      :OLD.BASESTFCPINTANT, :OLD.PERCSTFCPINTANT, :OLD.VLRSTFCPINTANT, :OLD.BASESTEXTRANOTA, :OLD.ALIQSTEXTRANOTA 
    FROM DUAL
    WHERE NOT EXISTS (SELECT 1 FROM TGFITE_EXC I WHERE I.NUNOTA = :OLD.NUNOTA AND I.SEQUENCIA = :OLD.SEQUENCIA AND I.DHEXCLUSAO = SYSDATE);
  END IF;
  
  --Alteração JOEL começo OS 909403
    BEGIN
        SELECT
                NUMCOTACAO, CODPROD, CONTROLE, CODLOCAL, DIFERENCIADOR
                INTO V_NUMCOTACAO, V_CODPROD, V_CONTROLE, V_CODLOCAL, V_DIFERENCIADOR 
        FROM
                TGFITC
        WHERE
                NUNOTACPA = :OLD.NUNOTA AND
                SEQNOTACPA = :OLD.SEQUENCIA; 
                
     EXCEPTION WHEN NO_DATA_FOUND THEN
        V_NUMCOTACAO := NULL;
     END;  
    
    IF (V_NUMCOTACAO IS NOT NULL) THEN
        UPDATE
                TGFITC
        SET
                STATUSPRODCOT = 'A'
        WHERE
                NUMCOTACAO = V_NUMCOTACAO AND
                CODPROD = V_CODPROD AND
                CONTROLE = V_CONTROLE AND 
                CODLOCAL = V_CODLOCAL AND
                DIFERENCIADOR = V_DIFERENCIADOR AND
                CODPARC = 0 AND
                STATUSPRODCOT = 'F';
    END IF;
    --Alteração JOEL fim OS 909403
    
  RETURN;   
EXCEPTION
  WHEN ERROR THEN
    /* 
    Sincronização de dados não faz validações
    */
    IF (P_VALIDAR) THEN 
      RAISE_APPLICATION_ERROR(-20101, ERRMSG);
    END IF; 
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 13/04/2018 17:55:11
Num.Script: 52619-0-1000
Nro. O.S. : 1167274
Nome      : INSERE - THOOBJ - 5261800
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_DLT_TGFITE
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210008
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_DLT_TGFITE' NOMEOBJ, 52618 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '2ce71847f813d2b817dad3e73fc8733f' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_DLT_TGFITE' and THO.hashcode = '2ce71847f813d2b817dad3e73fc8733f')
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 13/04/2018 17:55:11
Num.Script: 52620-0-0
Nro. O.S. : 1167274
Nome      : Cria - TGFITE_EXC BASESTEXTRANOTA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: BASESTEXTRANOTA
TipoObjeto: COLUMN
NomeTabela: TGFITE_EXC
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFITE_EXC ADD BASESTEXTRANOTA FLOAT
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 13/04/2018 17:55:11
Num.Script: 52621-0-0
Nro. O.S. : 1167274
Nome      : Cria - TGFITE_EXC ALIQSTEXTRANOTA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: ALIQSTEXTRANOTA
TipoObjeto: COLUMN
NomeTabela: TGFITE_EXC
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFITE_EXC ADD ALIQSTEXTRANOTA FLOAT
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 13/04/2018 17:55:11
Num.Script: 52622-0-0
Nro. O.S. : 1167274
Nome      : Cria - TGFITE ALIQSTEXTRANOTA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: ALIQSTEXTRANOTA
TipoObjeto: COLUMN
NomeTabela: TGFITE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFITE ADD ALIQSTEXTRANOTA FLOAT
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 13/04/2018 17:55:11
Num.Script: 52623-0-0
Nro. O.S. : 1167274
Nome      : Cria - TGFITE BASESTEXTRANOTA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: BASESTEXTRANOTA
TipoObjeto: COLUMN
NomeTabela: TGFITE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFITE ADD BASESTEXTRANOTA FLOAT
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 13/04/2018 17:55:11
Num.Script: 52624-0-0
Nro. O.S. : 1167274
Nome      : Cria - TGFEMP USASTEXTNOTARESTST
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: USASTEXTNOTARESTST
TipoObjeto: COLUMN
NomeTabela: TGFEMP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TGFEMP ADD USASTEXTNOTARESTST CHAR(1)';
   EXECUTE IMMEDIATE 'UPDATE TGFEMP SET USASTEXTNOTARESTST = ''N''';
   EXECUTE IMMEDIATE 'ALTER TABLE TGFEMP ADD  CONSTRAINT CKC_USASTEXTNOTARESTST_TGFEMP CHECK (USASTEXTNOTARESTST IN (''S'',''N''))';
   EXECUTE IMMEDIATE 'ALTER TABLE TGFEMP MODIFY USASTEXTNOTARESTST DEFAULT ''N'' NOT NULL';
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 16/04/2018 18:26:42
Num.Script: 52736-0-0
Nro. O.S. : 1165080
Nome      : Dropar - PK_TPRWLOP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - PK_TPRWLOP
NomeObjeto: PK_TPRWLOP
TipoObjeto: PRIMARY KEY
NomeTabela: TPRWLOP
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TPRWLOP DROP CONSTRAINT PK_TPRWLOP
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 16/04/2018 18:26:47
Num.Script: 52737-0-0
Nro. O.S. : 1165080
Nome      : Dropar - PK_TPRWLOP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - PK_TPRWLOP
NomeObjeto: PK_TPRWLOP
TipoObjeto: INDEX
NomeTabela: TPRWLOP
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
    BEGIN
        EXECUTE IMMEDIATE 'DROP INDEX PK_TPRWLOP';
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 16/04/2018 18:26:51
Num.Script: 52738-0-0
Nro. O.S. : 1165080
Nome      : Criar - PK_TPRWLOP 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - PK_TPRWLOP 
NomeObjeto: PK_TPRWLOP 
TipoObjeto: PRIMARY KEY
NomeTabela: TPRWLOP 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TPRWLOP ADD CONSTRAINT PK_TPRWLOP PRIMARY KEY ( NULOP, SEQOP, IDAWC, IDPROC ) 
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 16/04/2018 18:26:55
Num.Script: 52739-0-0
Nro. O.S. : 1165080
Nome      : Alterar - CODWCP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - CODWCP
NomeObjeto: CODWCP
TipoObjeto: COLUMN
NomeTabela: TPRWLOP
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
  L_NULLABLE VARCHAR2(1);
BEGIN
  SELECT NULLABLE INTO L_NULLABLE
  FROM USER_TAB_COLUMNS
  WHERE TABLE_NAME = 'TPRWLOP'
  AND   COLUMN_NAME = 'CODWCP';

  IF L_NULLABLE = 'N' THEN
    EXECUTE IMMEDIATE 'ALTER TABLE TPRWLOP MODIFY CODWCP NULL';
  END IF;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 13/04/2018 17:55:11
Num.Script: 52806-0-0
Nro. O.S. : 1142442
Nome      : Ajusta - TFPFOR CODFORM 416
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Ajusta - TFPFOR CODFORM 416
NomeObjeto: CODFORM
TipoObjeto: COLUMN
NomeTabela: TFPFOR
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
  P_CODFORMULA      TFPFOR.CODFORM%TYPE;
  P_DESCRFORMULA    TFPFOR.DESCRFORM%TYPE;
  P_DESCRFORMNOVO   TFPFOR.DESCRFORM%TYPE;
  P_FORMULA         VARCHAR2(4000);
  P_FORMULANOVO     VARCHAR2(4000);
  P_CODFORMIND      VARCHAR2(4000);
  P_CODFORMINDNOVO  VARCHAR2(4000);
  P_SANKHYA         TFPFOR.SANKHYA%TYPE;
BEGIN
  
  P_CODFORMULA := 416;
  
  BEGIN
    SELECT FORMULA, DESCRFORM, CODFORMIND, SANKHYA
    INTO P_FORMULA, P_DESCRFORMULA, P_CODFORMIND, P_SANKHYA
    FROM TFPFOR
    WHERE CODFORM = P_CODFORMULA;
  EXCEPTION WHEN NO_DATA_FOUND THEN
    P_FORMULA := 'A';
    P_CODFORMIND := NULL;
    P_DESCRFORMULA := NULL;
    P_SANKHYA := 'S'; 
  END;
  
  IF P_SANKHYA = 'N' THEN
    RETURN;
  END IF;
  
  P_DESCRFORMNOVO := '1/3 FERIAS MES COMP';
  P_FORMULANOVO := 'FBE(QueFuncionario.CODEMP,QueFuncionario.CODFUNC,FSomaMes(Refere,IF(quePrefSindicato.LANCFERADIANT = ''S'',(- 1),(-2))),''F'',''414'') + FBE(QueFuncionario.CODEMP,QueFuncionario.CODFUNC,Refere,''O'',''414'')';
  P_CODFORMINDNOVO := '';
  
  IF P_FORMULA = 'A' THEN
    INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
      VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
             'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO);
    
    IF P_CODFORMINDNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO);
    END IF;
    
    IF P_DESCRFORMNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO);
    END IF;
    
    INSERT INTO TFPFOR (CODFORM, DESCRFORM, SANKHYA, FORMULA, CODFORMIND)
      VALUES(P_CODFORMULA, P_DESCRFORMNOVO, 'S', P_FORMULANOVO, P_CODFORMINDNOVO);
    
  ELSIF (P_FORMULANOVO <> P_FORMULA OR 
         NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') OR 
         NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z')) 
  THEN
    
    IF P_FORMULANOVO <> P_FORMULA THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO, P_FORMULA);
    END IF;
    
    IF NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO, P_CODFORMIND);
    END IF;
    
    IF NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO, P_DESCRFORMULA);
    END IF;
    
    UPDATE TFPFOR
    SET FORMULA = P_FORMULANOVO
    , DESCRFORM = P_DESCRFORMNOVO
    , CODFORMIND = P_CODFORMINDNOVO
    , FORMULANTERIOR = CASE WHEN FORMULA <> P_FORMULANOVO THEN P_FORMULA ELSE FORMULANTERIOR END
    , DTALTER = SYSDATE
    , CODUSU = 0
    WHERE CODFORM = P_CODFORMULA
    AND SANKHYA = 'S';
    
  END IF;
  
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 07/05/2018 09:34:57
Num.Script: 52825-0-0
Nro. O.S. : 1164308
Nome      : Criar - GET_VALEST_BLOQWMS_FAT 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - GET_VALEST_BLOQWMS_FAT 
NomeObjeto: GET_VALEST_BLOQWMS_FAT 
TipoObjeto: FUNCTION
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE FUNCTION GET_VALEST_BLOQWMS_FAT RETURN VARCHAR2 AS 
BEGIN     
   RETURN VARIAVEIS_PKG.V_VALEST_BLOQWMS_FAT;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 13/04/2018 17:55:11
Num.Script: 52826-0-1000
Nro. O.S. : 1164308
Nome      : INSERE - THOOBJ - 5282500
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE GET_VALEST_BLOQWMS_FAT
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210008
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'GET_VALEST_BLOQWMS_FAT' NOMEOBJ, 52825 NUMSCRIPT, SYSDATE DTALTER, 'FUNCTION' TIPO, '6e773c587357ab06fd81a4334bcdd9a1' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'GET_VALEST_BLOQWMS_FAT' and THO.hashcode = '6e773c587357ab06fd81a4334bcdd9a1')
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 13/04/2018 17:55:11
Num.Script: 53014-0-0
Nro. O.S. : 1167015
Nome      : Dropar - PK_TPRHWXA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - PK_TPRHWXA
NomeObjeto: PK_TPRHWXA
TipoObjeto: PRIMARY KEY
NomeTabela: TPRHWXA
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TPRHWXA DROP CONSTRAINT PK_TPRHWXA
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 13/04/2018 17:55:11
Num.Script: 53015-0-0
Nro. O.S. : 1167015
Nome      : Dropar - INDEX PK_TPRHWXA 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - INDEX PK_TPRHWXA 
NomeObjeto: PK_TPRHWXA 
TipoObjeto: INDEX
NomeTabela: TPRHWXA 
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DROP INDEX PK_TPRHWXA 
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 13/04/2018 17:55:11
Num.Script: 53016-0-0
Nro. O.S. : 1167015
Nome      : Criar - PK_TPRHWXA 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - PK_TPRHWXA 
NomeObjeto: PK_TPRHWXA 
TipoObjeto: PRIMARY KEY
NomeTabela: TPRHWXA
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TPRHWXA ADD CONSTRAINT PK_TPRHWXA PRIMARY KEY ( CODWCP, IDIPROC, IDIATV, DHALOC )
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 13/04/2018 17:55:11
Num.Script: 53021-0-0
Nro. O.S. : 1168307
Nome      : Alterar - TRG_INC_UPD_TGFITE_PRODNFE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - TRG_INC_UPD_TGFITE_PRODNFE
NomeObjeto: TRG_INC_UPD_TGFITE_PRODNFE
TipoObjeto: TRIGGER
NomeTabela: TGFITE
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_INC_UPD_TGFITE_PRODNFE
   BEFORE INSERT OR UPDATE
   ON TGFITE
   REFERENCING NEW AS NEW OLD AS OLD
   FOR EACH ROW
DECLARE
   P_EMPNFE          TGFEMP.NFE%TYPE;
   P_TOPNFE          TGFTOP.NFE%TYPE;
   P_PRODUTONFE      TGFPRO.PRODUTONFE%TYPE;
   P_REFERENCIA      TGFPRO.REFERENCIA%TYPE;
   P_TIPGTINNFE      TGFPRO.TIPGTINNFE%TYPE;
   P_TIPCONTEST      TGFPRO.TIPCONTEST%TYPE;
   P_CODBARRA        TGFEST.CODBARRA%TYPE;
   P_TIPGTINNFEVOA   TGFVOA.TIPGTINNFE%TYPE;
   P_CODBARRAVOA     TGFVOA.CODBARRA%TYPE;
   P_COUNT           NUMBER( 10 );
   ERRMSG            VARCHAR2( 255 );
   ERROR EXCEPTION;
   P_VALIDAR         BOOLEAN;
   P_ORIGPROD        TGFITE.ORIGPROD%TYPE;
   P_BASENUMERACAO   CHAR( 1 );
   P_USACODVOLPARC   CHAR( 1 );
   P_CODTIPOPER      NUMBER( 10 );
   P_SERIENOTA       VARCHAR2( 3 );
   P_CODVOLPARC      VARCHAR2( 6 );
   P_CODMODDOC       NUMBER( 10 );
   P_CONTAUNTRIB     NUMBER( 5 );
   P_TOPCALCICMS TGFTOP.CALCICMS%TYPE;
   P_TIPMOV      TGFTOP.TIPMOV%TYPE;
BEGIN
   IF STP_GET_ATUALIZANDO THEN
      RETURN;
   END IF;

   /*
   Sincronização de dados
   */
   P_VALIDAR := FPODEVALIDAR( 'TGFITE' );

   IF NOT ( P_VALIDAR ) THEN
      RETURN;
   END IF;
      
   SELECT TPO.NFE, TPO.CALCICMS , TPO.TIPMOV
    INTO P_TOPNFE, P_TOPCALCICMS, P_TIPMOV
    FROM TGFTOP TPO 
    INNER JOIN TGFCAB CAB ON CAB.CODTIPOPER = TPO.CODTIPOPER AND CAB.DHTIPOPER = TPO.DHALTER 
    WHERE CAB.NUNOTA = :NEW.NUNOTA; 
    
   IF P_TOPNFE = 'E' AND P_TOPCALCICMS = 'B' THEN 
    RETURN; --NFE de Emissão Própria importada deve possuir os mesmos valores do XML, portanto, não devemos calcular nenhum campo da TGFITE. 
    END IF;
   
   IF UPDATING AND (:NEW.PENDENTE <> :OLD.PENDENTE OR :NEW.QTDENTREGUE <> :OLD.QTDENTREGUE OR :NEW.QTDCONFERIDA <> :OLD.QTDCONFERIDA) THEN 
      RETURN; 
   END IF; 

    IF UPDATING AND NVL(:OLD.STATUSNOTA, 'P') = 'L' THEN
        SELECT COUNT(1) INTO P_COUNT
        FROM TGFCAB
        WHERE NUNOTA = :OLD.NUNOTA
          AND (NVL(STATUSNFE, ' ') IN ('A','T') OR NVL(STATUSNFSE, ' ') = 'A');

        IF P_COUNT > 0 THEN
            RETURN;
        END IF;
    END IF;

   /*
   OS: 574625
   */

    /*
    OS: 1168307
   */
    SELECT COUNT(1) INTO P_COUNT
    FROM TSIPAR
    WHERE CHAVE = 'ORIGPRODDEV'
    AND LOGICO = 'S';

    IF (P_COUNT = 0 
        OR :NEW.ORIGPROD IS NULL
        OR (UPDATING AND :OLD.CODPROD <> :NEW.CODPROD) 
        OR (P_TIPMOV NOT IN ('D', 'E'))) THEN

           -- OS 927107
       :NEW.ORIGPROD := SNK_GET_ORIGEM_PRODUTO_ITE( :NEW.CODPROD
                                                    , :NEW.CODEMP
                                                    , :NEW.CODLOCALORIG
                                                    , :NEW.CONTROLE );    
    END IF;

   /* QDO SUBSTITUINDO PRODUTO, NÃO VALIDAR ESTOQUE */
   SELECT COUNT( 1 )
   INTO   P_COUNT
   FROM   TSIPAR
   WHERE  CHAVE = 'SBPRODUTO';

   IF ( P_COUNT <> 0 ) THEN
      RETURN;
   END IF;

   SELECT PRODUTONFE, REFERENCIA, TIPGTINNFE, TIPCONTEST
   INTO   P_PRODUTONFE, P_REFERENCIA, P_TIPGTINNFE, P_TIPCONTEST
   FROM   TGFPRO
   WHERE  CODPROD = :NEW.CODPROD;

   IF ( P_PRODUTONFE = 1 ) AND TRIM( P_REFERENCIA ) IS NOT NULL THEN
      :NEW.PRODUTONFE := P_REFERENCIA;
   ELSE
      :NEW.PRODUTONFE := :NEW.CODPROD;
   END IF;


   -- ATUALIZA CAMPO CODVOLPARC, UTILIZANDO A TABELA TGFUNP
   IF VARIAVEIS_PKG.V_USACODVOLPARC = 'S' THEN
      BEGIN
         SELECT CODVOLPARC
         INTO   P_CODVOLPARC
         FROM   TGFUNP P INNER JOIN TGFCAB C
                   ON ( P.CODPARC = C.CODPARC
                   AND C.NUNOTA = :NEW.NUNOTA
                   AND :NEW.CODVOL = P.CODVOL );
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            P_CODVOLPARC := NULL;
      END;

      IF NVL( :NEW.CODVOLPARC, ' ' ) <> NVL( P_CODVOLPARC, ' ' ) THEN
         :NEW.CODVOLPARC := P_CODVOLPARC;
      END IF;
   END IF;

   IF ( P_TIPGTINNFE = 0 ) THEN
      :NEW.GTINNFE := NULL;
   ELSIF ( P_TIPGTINNFE = 1 ) THEN
      :NEW.GTINNFE := :NEW.CODPROD;
   ELSIF ( P_TIPGTINNFE = 3 ) THEN
      BEGIN
         SELECT CODBARRA
         INTO   P_CODBARRA
         FROM   TGFEST
         WHERE  CODEMP = :NEW.CODEMP
         AND    CODPROD = :NEW.CODPROD
         AND    CODLOCAL = :NEW.CODLOCALORIG
         AND    CONTROLE = :NEW.CONTROLE
         AND    CODPARC = 0;

         :NEW.GTINNFE := SUBSTR( P_CODBARRA, 1, 14 );
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            :NEW.GTINNFE := NULL;
      END;
   ELSIF ( P_TIPGTINNFE = 4 ) THEN
      BEGIN
         IF ( P_TIPCONTEST = 'I' OR P_TIPCONTEST = 'S') THEN --CONTROLE LIVRE OU POR LISTA
             SELECT CODBARRA
             INTO   P_CODBARRAVOA
             FROM   TGFVOA
             WHERE  CODPROD = :NEW.CODPROD
             AND    CODVOL = :NEW.CODVOL
             AND    CONTROLE = :NEW.CONTROLE;
         ELSE
             SELECT CODBARRA
             INTO   P_CODBARRAVOA
             FROM   TGFVOA
             WHERE  CODPROD = :NEW.CODPROD
             AND    CODVOL = :NEW.CODVOL;
         END IF;

         IF ( P_CODBARRAVOA IS NULL )
            OR( P_CODBARRAVOA = '' ) THEN
            :NEW.GTINNFE := SUBSTR( P_REFERENCIA, 1, 14 );
         ELSE
            :NEW.GTINNFE := SUBSTR( P_CODBARRAVOA, 1, 14 );
         END IF;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            :NEW.GTINNFE := SUBSTR( P_REFERENCIA, 1, 14 );
      END;
   ELSE
      :NEW.GTINNFE := SUBSTR( P_REFERENCIA, 1, 14 );
   END IF;

   BEGIN
      SELECT MIN(TIPGTINNFE), MIN(CODBARRA), COUNT(UNIDTRIB)
      INTO   P_TIPGTINNFEVOA, P_CODBARRAVOA, P_CONTAUNTRIB
      FROM   TGFVOA
      WHERE  CODPROD = :NEW.CODPROD
      AND    UNIDTRIB = 'S';

      IF P_CONTAUNTRIB > 1 THEN
        RAISE_APPLICATION_ERROR(-20101, 'Há mais que uma unidade alternativa marcada como unidade de tributação para o produto ' || TO_CHAR(:NEW.CODPROD));  
      END IF;

      IF (P_CONTAUNTRIB = 0) THEN
         :NEW.GTINTRIBNFE := :NEW.GTINNFE;
      ELSIF ( P_TIPGTINNFEVOA = 0 ) THEN
         :NEW.GTINTRIBNFE := NULL;
      ELSIF ( P_TIPGTINNFEVOA = 1 ) THEN
         :NEW.GTINTRIBNFE := :NEW.CODPROD;
      ELSIF ( P_TIPGTINNFEVOA = 2 ) THEN
         :NEW.GTINTRIBNFE := SUBSTR( P_REFERENCIA, 1, 14 );
      ELSE
         :NEW.GTINTRIBNFE := SUBSTR( P_CODBARRAVOA, 1, 14 );
      END IF;
   EXCEPTION
      WHEN NO_DATA_FOUND THEN
         :NEW.GTINTRIBNFE := :NEW.GTINNFE;
   END;

   RETURN;
EXCEPTION
   WHEN ERROR THEN
      /*
      Sincronização de dados não faz validações
      */
      IF ( P_VALIDAR ) THEN
         RAISE_APPLICATION_ERROR( -20101, ERRMSG );
      END IF;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 13/04/2018 17:55:11
Num.Script: 53022-0-1000
Nro. O.S. : 1168307
Nome      : INSERE - THOOBJ - 5302100
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_INC_UPD_TGFITE_PRODNFE
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210008
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_INC_UPD_TGFITE_PRODNFE' NOMEOBJ, 53021 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, 'd1e4b95febbbc737181bf7dc8bbea565' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_INC_UPD_TGFITE_PRODNFE' and THO.hashcode = 'd1e4b95febbbc737181bf7dc8bbea565')
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53340-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIIPFC INDCOM
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: INDCOM
TipoObjeto: COLUMN
NomeTabela: TRIIPFC
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIIPFC ADD INDCOM DECIMAL(5, 0)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53341-0-0
Nro. O.S. : 1148508
Nome      : Script - TRIIPFC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - TRIIPFC
NomeObjeto: TRIIPFC
TipoObjeto: TABLE
NomeTabela: TRIIPFC
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
    UPDATE TRIIPFC IPFC
    SET INDCOM = CASE WHEN EXISTS ( SELECT 1
                                    FROM TRITPCO TPCO
                                    WHERE TPCO.CODEMP = IPFC.CODEMP 
                                        AND TPCO.DTREF = IPFC.DTREF
                                        AND TPCO.TPAMB = IPFC.TPAMB 
                                        AND TPCO.SEQUENCIA = IPFC.SEQUENCIA
                                        AND TPCO.CHAVE = IPFC.CHAVE
                                        AND TPCO.INDCOM = 1) THEN 1
                       WHEN EXISTS ( SELECT 1
                                    FROM TRITPCO TPCO
                                    WHERE TPCO.CODEMP = IPFC.CODEMP 
                                        AND TPCO.DTREF = IPFC.DTREF
                                        AND TPCO.TPAMB = IPFC.TPAMB 
                                        AND TPCO.SEQUENCIA = IPFC.SEQUENCIA
                                        AND TPCO.CHAVE = IPFC.CHAVE
                                        AND TPCO.INDCOM = 8) THEN 8
                 ELSE 9 END;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53342-0-0
Nro. O.S. : 1148508
Nome      : Altera - INDCOM
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - INDCOM
NomeObjeto: INDCOM
TipoObjeto: COLUMN
NomeTabela: TRIIPFC
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
   L_NULL USER_TAB_COLUMNS.NULLABLE%TYPE;
BEGIN
   SELECT NULLABLE INTO L_NULL
     FROM USER_TAB_COLUMNS
    WHERE TABLE_NAME = 'TRIIPFC'
      AND COLUMN_NAME = 'INDCOM';

   IF L_NULL = 'S' THEN
      EXECUTE IMMEDIATE 'ALTER TABLE TRIIPFC MODIFY INDCOM NOT NULL';
   END IF;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53343-0-0
Nro. O.S. : 1148508
Nome      : Drop - PK_TRIIPFC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - PK_TRIIPFC
NomeObjeto: PK_TRIIPFC
TipoObjeto: PRIMARY KEY
NomeTabela: TRIIPFC
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
    BEGIN
        EXECUTE IMMEDIATE 'DROP INDEX PK_TRIIPFC ';
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END;
    
    EXECUTE IMMEDIATE 'ALTER TABLE TRIIPFC DROP CONSTRAINT PK_TRIIPFC';
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53344-0-0
Nro. O.S. : 1148508
Nome      : Cria - PK_TRIIPFC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - PK_TRIIPFC
NomeObjeto: PK_TRIIPFC
TipoObjeto: PRIMARY KEY
NomeTabela: TRIIPFC
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
    BEGIN
        EXECUTE IMMEDIATE 'DROP INDEX PK_TRIIPFC ';
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END;

    EXECUTE IMMEDIATE 'ALTER TABLE TRIIPFC ADD CONSTRAINT PK_TRIIPFC PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE, INDCOM, CHAVEPROCESSO, NUPROCESSO, SEQPROCESSO)';

END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53345-0-0
Nro. O.S. : 1148508
Nome      : Script - TRINFRB
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - TRINFRB
NomeObjeto: Script - TRINFRB
TipoObjeto: TABLE
NomeTabela: TRINFRB
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
    EXECUTE IMMEDIATE 'ALTER TABLE TRINFRB DROP CONSTRAINT PK_TRINFRB';
    EXECUTE IMMEDIATE 'ALTER TABLE TRINFRB ADD CODATIVECON_TEMP VARCHAR2(8)';
    EXECUTE IMMEDIATE 'ALTER TABLE TRINFRB MODIFY CODATIVECON NULL';
    EXECUTE IMMEDIATE 'UPDATE TRINFRB SET CODATIVECON_TEMP = CASE WHEN LENGTH(CAST(CODATIVECON AS VARCHAR(10))) > 8 THEN SUBSTR(CAST(CODATIVECON AS VARCHAR(10)), 1, 8)
                                        ELSE CAST(CODATIVECON AS VARCHAR(10))
                                       END,
                                        CODATIVECON = NULL';
    EXECUTE IMMEDIATE 'ALTER TABLE TRINFRB MODIFY CODATIVECON VARCHAR(8)';
    EXECUTE IMMEDIATE 'UPDATE TRINFRB SET CODATIVECON = CODATIVECON_TEMP';
    EXECUTE IMMEDIATE 'ALTER TABLE TRINFRB DROP COLUMN CODATIVECON_TEMP';
    EXECUTE IMMEDIATE 'ALTER TABLE TRINFRB MODIFY CODATIVECON NOT NULL';
    EXECUTE IMMEDIATE 'ALTER TABLE TRINFRB ADD CONSTRAINT PK_TRINFRB PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE, CODATIVECON, NUNOTA)';
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53346-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRINFRB VLREXCRECBRUTA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLREXCRECBRUTA
TipoObjeto: COLUMN
NomeTabela: TRINFRB
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRINFRB ADD VLREXCRECBRUTA FLOAT
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53347-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRINFRB VLRBCCPRB
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRBCCPRB
TipoObjeto: COLUMN
NomeTabela: TRINFRB
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRINFRB ADD VLRBCCPRB FLOAT
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53348-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRINFRB VLRCPRBSUSP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRCPRBSUSP
TipoObjeto: COLUMN
NomeTabela: TRINFRB
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRINFRB ADD VLRCPRBSUSP FLOAT
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53349-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRINFRB CODRECOLHIMENTO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: CODRECOLHIMENTO
TipoObjeto: COLUMN
NomeTabela: TRINFRB
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRINFRB ADD CODRECOLHIMENTO VARCHAR2(6)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53350-0-0
Nro. O.S. : 1148508
Nome      : Script - TRITCAE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - TRITCAE
NomeObjeto: TRITCAE
TipoObjeto: TABLE
NomeTabela: TRITCAE
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN 
    EXECUTE IMMEDIATE 'ALTER TABLE TRITCAE DROP CONSTRAINT PK_TRITCAE';
    EXECUTE IMMEDIATE 'ALTER TABLE TRITCAE ADD CODATIVECON_TEMP VARCHAR2(8)';
    EXECUTE IMMEDIATE 'ALTER TABLE TRITCAE MODIFY CODATIVECON NULL';
    EXECUTE IMMEDIATE 'UPDATE TRITCAE SET CODATIVECON_TEMP = CASE WHEN LENGTH(CAST(CODATIVECON AS VARCHAR(10))) > 8 THEN SUBSTR(CAST(CODATIVECON AS VARCHAR(10)), 1, 8)
                                        ELSE CAST(CODATIVECON AS VARCHAR(10))
                                                           END,
                                        CODATIVECON = NULL';
    EXECUTE IMMEDIATE 'ALTER TABLE TRITCAE MODIFY CODATIVECON VARCHAR(8)';
    EXECUTE IMMEDIATE 'UPDATE TRITCAE SET CODATIVECON = CODATIVECON_TEMP';
    EXECUTE IMMEDIATE 'ALTER TABLE TRITCAE DROP COLUMN CODATIVECON_TEMP';
    EXECUTE IMMEDIATE 'ALTER TABLE TRITCAE MODIFY CODATIVECON NOT NULL';
    EXECUTE IMMEDIATE 'ALTER TABLE TRITCAE ADD CONSTRAINT PK_TRITCAE PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE, CODATIVECON)';
END;    
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53351-0-0
Nro. O.S. : 1148508
Nome      : Cria - CODATIVECON
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - CODATIVECON
NomeObjeto: CODATIVECON
TipoObjeto: COLUMN
NomeTabela: TRIIPSC
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
    EXECUTE IMMEDIATE 'ALTER TABLE TRIIPSC ADD CODATIVECON VARCHAR2(8)';
    EXECUTE IMMEDIATE 'UPDATE TRIIPSC IPFC
                                        SET CODATIVECON = ( SELECT MAX(CODATIVECON)
                                    FROM TRITCAE TCAE
                                    WHERE TCAE.CODEMP = IPFC.CODEMP
                                        AND TCAE.DTREF = IPFC.DTREF
                                        AND TCAE.TPAMB = IPFC.TPAMB
                                        AND TCAE.SEQUENCIA = IPFC.SEQUENCIA
                                        AND TCAE.CHAVE = IPFC.CHAVE)';
    EXECUTE IMMEDIATE 'ALTER TABLE TRIIPSC MODIFY CODATIVECON NOT NULL';
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53352-0-0
Nro. O.S. : 1148508
Nome      : Drop - PK_TRIIPSC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - PK_TRIIPSC
NomeObjeto: PK_TRIIPSC
TipoObjeto: PRIMARY KEY
NomeTabela: TRIIPSC
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
    BEGIN
        EXECUTE IMMEDIATE 'DROP INDEX PK_TRIIPSC ';
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END;
    
    EXECUTE IMMEDIATE 'ALTER TABLE TRIIPSC DROP CONSTRAINT PK_TRIIPSC';
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53353-0-0
Nro. O.S. : 1148508
Nome      : Cria - PK_TRIIPSC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - PK_TRIIPSC
NomeObjeto: PK_TRIIPSC
TipoObjeto: PRIMARY KEY
NomeTabela: TRIIPSC
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
    BEGIN
        EXECUTE IMMEDIATE 'DROP INDEX PK_TRIIPSC ';
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END;
    
    EXECUTE IMMEDIATE 'ALTER TABLE TRIIPSC ADD CONSTRAINT PK_TRIIPSC PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE, CODATIVECON, CHAVEPROCESSO, NUPROCESSO, SEQPROCESSO)';
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53354-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRCST CNPJPRESTADORRET
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: CNPJPRESTADORRET
TipoObjeto: COLUMN
NomeTabela: TRIRCST
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCST ADD CNPJPRESTADORRET VARCHAR2(14)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53355-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRCST VLRTOTALBASERETRET
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRTOTALBASERETRET
TipoObjeto: COLUMN
NomeTabela: TRIRCST
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCST ADD VLRTOTALBASERETRET FLOAT
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53356-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRCST VLRTOTALRETPRINCRET
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRTOTALRETPRINCRET
TipoObjeto: COLUMN
NomeTabela: TRIRCST
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCST ADD VLRTOTALRETPRINCRET FLOAT
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53357-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRCST VLRTOTALRETADICRET
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRTOTALRETADICRET
TipoObjeto: COLUMN
NomeTabela: TRIRCST
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCST ADD VLRTOTALRETADICRET FLOAT
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53358-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRCST VLRTOTALNRETPRINCRET
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRTOTALNRETPRINCRET
TipoObjeto: COLUMN
NomeTabela: TRIRCST
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCST ADD VLRTOTALNRETPRINCRET FLOAT
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53359-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRCST VLRTOTALNRETADICRET
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRTOTALNRETADICRET
TipoObjeto: COLUMN
NomeTabela: TRIRCST
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCST ADD VLRTOTALNRETADICRET FLOAT
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53360-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRCST MSG
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: MSG
TipoObjeto: COLUMN
NomeTabela: TRIRCST
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCST ADD MSG CLOB
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53361-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRCST XMLEVENTO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: XMLEVENTO
TipoObjeto: COLUMN
NomeTabela: TRIRCST
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCST ADD XMLEVENTO CLOB
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53362-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRCST XMLRETORNO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: XMLRETORNO
TipoObjeto: COLUMN
NomeTabela: TRIRCST
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCST ADD XMLRETORNO CLOB
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53363-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRCSP TPINSCTOMADORRET
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: TPINSCTOMADORRET
TipoObjeto: COLUMN
NomeTabela: TRIRCSP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCSP ADD TPINSCTOMADORRET DECIMAL(5, 0)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53364-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRCSP NRINSCTOMADORRET
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: NRINSCTOMADORRET
TipoObjeto: COLUMN
NomeTabela: TRIRCSP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCSP ADD NRINSCTOMADORRET VARCHAR2(14)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53365-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRCSP VLRTOTALBASERETRET
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRTOTALBASERETRET
TipoObjeto: COLUMN
NomeTabela: TRIRCSP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCSP ADD VLRTOTALBASERETRET FLOAT
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53366-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRCSP VLRTOTALRETPRINCRET
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRTOTALRETPRINCRET
TipoObjeto: COLUMN
NomeTabela: TRIRCSP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCSP ADD VLRTOTALRETPRINCRET FLOAT
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53367-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRCSP VLRTOTALRETADICRET
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRTOTALRETADICRET
TipoObjeto: COLUMN
NomeTabela: TRIRCSP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCSP ADD VLRTOTALRETADICRET FLOAT
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53368-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRCSP VLRTOTALNRETPRINCRET
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRTOTALNRETPRINCRET
TipoObjeto: COLUMN
NomeTabela: TRIRCSP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCSP ADD VLRTOTALNRETPRINCRET FLOAT
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53369-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRCSP VLRTOTALNRETADICRET
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRTOTALNRETADICRET
TipoObjeto: COLUMN
NomeTabela: TRIRCSP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCSP ADD VLRTOTALNRETADICRET FLOAT
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53370-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRCSP MSG
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: MSG
TipoObjeto: COLUMN
NomeTabela: TRIRCSP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCSP ADD MSG CLOB
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53371-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRCSP XMLEVENTO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: XMLEVENTO
TipoObjeto: COLUMN
NomeTabela: TRIRCSP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCSP ADD XMLEVENTO CLOB
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53372-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRCSP XMLRETORNO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: XMLRETORNO
TipoObjeto: COLUMN
NomeTabela: TRIRCSP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCSP ADD XMLRETORNO CLOB
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53373-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRICPPR VLRCPAPURRET
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRCPAPURRET
TipoObjeto: COLUMN
NomeTabela: TRICPPR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRICPPR ADD VLRCPAPURRET FLOAT
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53374-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRICPPR VLRRATAPURRET
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRRATAPURRET
TipoObjeto: COLUMN
NomeTabela: TRICPPR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRICPPR ADD VLRRATAPURRET FLOAT
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53375-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRICPPR VLRSENARAPURRET
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRSENARAPURRET
TipoObjeto: COLUMN
NomeTabela: TRICPPR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRICPPR ADD VLRSENARAPURRET FLOAT
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53376-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRICPPR VLRCPSUSPTOTALRET
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRCPSUSPTOTALRET
TipoObjeto: COLUMN
NomeTabela: TRICPPR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRICPPR ADD VLRCPSUSPTOTALRET FLOAT
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53377-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRICPPR VLRRATSUSPTOTALRET
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRRATSUSPTOTALRET
TipoObjeto: COLUMN
NomeTabela: TRICPPR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRICPPR ADD VLRRATSUSPTOTALRET FLOAT
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53378-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRICPPR VLRSENARSUSPTOTALRET
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRSENARSUSPTOTALRET
TipoObjeto: COLUMN
NomeTabela: TRICPPR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRICPPR ADD VLRSENARSUSPTOTALRET FLOAT
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53379-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRICPPR MSG
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: MSG
TipoObjeto: COLUMN
NomeTabela: TRICPPR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRICPPR ADD MSG CLOB
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53380-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRICPPR XMLEVENTO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: XMLEVENTO
TipoObjeto: COLUMN
NomeTabela: TRICPPR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRICPPR ADD XMLEVENTO CLOB
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53381-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRICPPR XMLRETORNO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: XMLRETORNO
TipoObjeto: COLUMN
NomeTabela: TRICPPR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRICPPR ADD XMLRETORNO CLOB
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53382-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRICPRB CODRECEITA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: CODRECEITA
TipoObjeto: COLUMN
NomeTabela: TRICPRB
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRICPRB ADD CODRECEITA VARCHAR2(6)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53383-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRICPRB VLRCPAPURTOTALRET
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRCPAPURTOTALRET
TipoObjeto: COLUMN
NomeTabela: TRICPRB
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRICPRB ADD VLRCPAPURTOTALRET FLOAT
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53384-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRICPRB VLRCPRBSUSPTOTALRET
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRCPRBSUSPTOTALRET
TipoObjeto: COLUMN
NomeTabela: TRICPRB
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRICPRB ADD VLRCPRBSUSPTOTALRET FLOAT
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53385-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRICPRB MSG
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: MSG
TipoObjeto: COLUMN
NomeTabela: TRICPRB
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRICPRB ADD MSG CLOB
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53386-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRICPRB XMLEVENTO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: XMLEVENTO
TipoObjeto: COLUMN
NomeTabela: TRICPRB
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRICPRB ADD XMLEVENTO CLOB
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53387-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRICPRB XMLRETORNO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: XMLRETORNO
TipoObjeto: COLUMN
NomeTabela: TRICPRB
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRICPRB ADD XMLRETORNO CLOB
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53388-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRICAB STATUS
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: STATUS
TipoObjeto: COLUMN
NomeTabela: TRICAB
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TRICAB ADD STATUS DECIMAL(5, 0)';
   EXECUTE IMMEDIATE 'UPDATE TRICAB SET STATUS = 0';
   EXECUTE IMMEDIATE 'ALTER TABLE TRICAB ADD  CONSTRAINT CKC_STATUS_TRICAB CHECK (STATUS IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 10))';
   EXECUTE IMMEDIATE 'ALTER TABLE TRICAB MODIFY STATUS DEFAULT 0 NOT NULL';
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53389-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIINFST VLRNRETADIC15
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRNRETADIC15
TipoObjeto: COLUMN
NomeTabela: TRIINFST
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIINFST ADD VLRNRETADIC15 FLOAT
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53390-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIINFST VLRNRETADIC20
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRNRETADIC20
TipoObjeto: COLUMN
NomeTabela: TRIINFST
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIINFST ADD VLRNRETADIC20 FLOAT
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53391-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIINFST VLRNRETADIC25
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRNRETADIC25
TipoObjeto: COLUMN
NomeTabela: TRIINFST
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIINFST ADD VLRNRETADIC25 FLOAT
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53392-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIINFSP VLRNRETADIC15
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRNRETADIC15
TipoObjeto: COLUMN
NomeTabela: TRIINFSP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIINFSP ADD VLRNRETADIC15 FLOAT
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53393-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIINFSP VLRNRETADIC20
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRNRETADIC20
TipoObjeto: COLUMN
NomeTabela: TRIINFSP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIINFSP ADD VLRNRETADIC20 FLOAT
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53394-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIINFSP VLRNRETADIC25
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRNRETADIC25
TipoObjeto: COLUMN
NomeTabela: TRIINFSP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIINFSP ADD VLRNRETADIC25 FLOAT
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53395-0-0
Nro. O.S. : 1148508
Nome      : Script - TRIMON
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - TRIMON
NomeObjeto: TRIMON
TipoObjeto: TABLE
NomeTabela: TRIMON
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
    EXECUTE IMMEDIATE 'UPDATE TRIMON SET NOMETABPAI = ''TRITPCO'' WHERE NOMETAB = ''TRIIPFC'' ';

    EXECUTE IMMEDIATE 'UPDATE TRIMON SET NOMETABPAI = ''TRITCAE'' WHERE NOMETAB = ''TRIIPSC'' ';

END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53396-0-0
Nro. O.S. : 1148508
Nome      : Cria - TBTEMP_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TBTEMP_REINF
NomeObjeto: TBTEMP_REINF
TipoObjeto: TABLE
NomeTabela: TBTEMP_REINF
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TBTEMP_REINF (
    NUNOTA          NUMBER(10),
    CODEMP          NUMBER(10),
    DTREF           DATE,
    CONSTRAINT PK_TBTEMP_REINF PRIMARY KEY (NUNOTA)
)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53397-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRINFPR VLRCPSUSP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRCPSUSP
TipoObjeto: COLUMN
NomeTabela: TRINFPR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRINFPR ADD VLRCPSUSP FLOAT
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53398-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRINFPR VLRSENARSUSP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRSENARSUSP
TipoObjeto: COLUMN
NomeTabela: TRINFPR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRINFPR ADD VLRSENARSUSP FLOAT
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53399-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRINFPR VLRRATSUSP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRRATSUSP
TipoObjeto: COLUMN
NomeTabela: TRINFPR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRINFPR ADD VLRRATSUSP FLOAT
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53400-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIICR INIVALIDNOVO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: INIVALIDNOVO
TipoObjeto: COLUMN
NomeTabela: TRIICR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIICR ADD INIVALIDNOVO DATE
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53401-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIICR FIMVALIDNOVO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: FIMVALIDNOVO
TipoObjeto: COLUMN
NomeTabela: TRIICR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIICR ADD FIMVALIDNOVO DATE
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53402-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIICR MSG
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: MSG
TipoObjeto: COLUMN
NomeTabela: TRIICR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIICR ADD MSG CLOB
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53403-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIICR XMLEVENTO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: XMLEVENTO
TipoObjeto: COLUMN
NomeTabela: TRIICR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIICR ADD XMLEVENTO CLOB
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53404-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIICR XMLRETORNO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: XMLRETORNO
TipoObjeto: COLUMN
NomeTabela: TRIICR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIICR ADD XMLRETORNO CLOB
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53405-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIPAJR INIVALIDNOVO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: INIVALIDNOVO
TipoObjeto: COLUMN
NomeTabela: TRIPAJR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIPAJR ADD INIVALIDNOVO DATE
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53406-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIPAJR FIMVALIDNOVO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: FIMVALIDNOVO
TipoObjeto: COLUMN
NomeTabela: TRIPAJR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIPAJR ADD FIMVALIDNOVO DATE
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53407-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIPAJR MSG
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: MSG
TipoObjeto: COLUMN
NomeTabela: TRIPAJR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIPAJR ADD MSG CLOB
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53408-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIPAJR XMLEVENTO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: XMLEVENTO
TipoObjeto: COLUMN
NomeTabela: TRIPAJR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIPAJR ADD XMLEVENTO CLOB
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53409-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIPAJR XMLRETORNO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: XMLRETORNO
TipoObjeto: COLUMN
NomeTabela: TRIPAJR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIPAJR ADD XMLRETORNO CLOB
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53410-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIFEP MSG
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: MSG
TipoObjeto: COLUMN
NomeTabela: TRIFEP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIFEP ADD MSG CLOB
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53411-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIFEP XMLEVENTO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: XMLEVENTO
TipoObjeto: COLUMN
NomeTabela: TRIFEP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIFEP ADD XMLEVENTO CLOB
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53412-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIFEP XMLRETORNO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: XMLRETORNO
TipoObjeto: COLUMN
NomeTabela: TRIFEP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIFEP ADD XMLRETORNO CLOB
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53413-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIFEP XMLCONSULTA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: XMLCONSULTA
TipoObjeto: COLUMN
NomeTabela: TRIFEP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIFEP ADD XMLCONSULTA CLOB
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53414-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIFEP XMLRETORNOCONSULTA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: XMLRETORNOCONSULTA
TipoObjeto: COLUMN
NomeTabela: TRIFEP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIFEP ADD XMLRETORNOCONSULTA CLOB
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53415-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIREP MSG
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: MSG
TipoObjeto: COLUMN
NomeTabela: TRIREP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIREP ADD MSG CLOB
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53416-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIREP XMLEVENTO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: XMLEVENTO
TipoObjeto: COLUMN
NomeTabela: TRIREP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIREP ADD XMLEVENTO CLOB
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53417-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIREP XMLRETORNO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: XMLRETORNO
TipoObjeto: COLUMN
NomeTabela: TRIREP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIREP ADD XMLRETORNO CLOB
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53418-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRINFST TIPODOCUMENTO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: TIPODOCUMENTO
TipoObjeto: COLUMN
NomeTabela: TRINFST
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRINFST ADD TIPODOCUMENTO CHAR(1)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53419-0-0
Nro. O.S. : 1148508
Nome      : Drop - CHK_STATUS_EVTLOTEREINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - CHK_STATUS_EVTLOTEREINF
NomeObjeto: CHK_STATUS_EVTLOTEREINF
TipoObjeto: CONSTRAINT
NomeTabela: EVTLOTEREINF
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE EVTLOTEREINF DROP CONSTRAINT CHK_STATUS_EVTLOTEREINF
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53420-0-0
Nro. O.S. : 1148508
Nome      : Cia - CHK_STATUS_EVTLOTEREINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cia - CHK_STATUS_EVTLOTEREINF
NomeObjeto: CHK_STATUS_EVTLOTEREINF
TipoObjeto: CONSTRAINT
NomeTabela: EVTLOTEREINF
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE EVTLOTEREINF ADD CONSTRAINT CHK_STATUS_EVTLOTEREINF CHECK (STATUS IN ('P','I','C','E','F','T','V','R','Q','X','Y','Z','D'))
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53421-0-0
Nro. O.S. : 1148508
Nome      : Cria - QTDCONSULTAREALIZADA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - QTDCONSULTAREALIZADA
NomeObjeto: QTDCONSULTAREALIZADA
TipoObjeto: COLUMN
NomeTabela: EVTLOTEREINF
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE EVTLOTEREINF ADD QTDCONSULTAREALIZADA NUMBER(5) DEFAULT 0
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53422-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRES
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TRIRES
NomeObjeto: TRIRES
TipoObjeto: TABLE
NomeTabela: TRIRES
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TRIRES (
    CODEMP                          NUMBER(10)      NOT NULL,
    DTREF                           DATE            NOT NULL,
    TPAMB                           VARCHAR2(1)     NOT NULL,
    SEQUENCIA                       NUMBER(5)       NOT NULL,
    TPINSC                          NUMBER(5),
    NRINSC                          VARCHAR2(14),
    DHPROCESS                       DATE,
    IDEV                            VARCHAR2(20),
    NRRECARQBASE                    VARCHAR2(52),
    INDEXISTINFO                    NUMBER(5),
    CONSTRAINT PK_TRIRES PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA),
    CONSTRAINT FK_TRIRES_TRICAB FOREIGN KEY (CODEMP, DTREF, TPAMB) REFERENCES TRICAB(CODEMP, DTREF, TPAMB),
    CONSTRAINT CKC_TPINSC_TRIRES CHECK (TPINSC IN (1, 2) OR TPINSC IS NULL),
    CONSTRAINT CKC_INDEXISTINFO_TRIRES CHECK (INDEXISTINFO IN (1, 2, 3) OR INDEXISTINFO IS NULL)
)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53423-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRCSTRES
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TRIRCSTRES
NomeObjeto: TRIRCSTRES
TipoObjeto: TABLE
NomeTabela: TRIRCSTRES
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TRIRCSTRES (
    CODEMP                          NUMBER(10)      NOT NULL,
    DTREF                           DATE            NOT NULL,
    TPAMB                           VARCHAR2(1)     NOT NULL,
    SEQUENCIA                       NUMBER(5)       NOT NULL,
    CNPJPRESTADOR                   VARCHAR2(14)    NOT NULL,
    VLRTOTALBASERETSIS              FLOAT,
    VLRTOTALRETPRINCSIS             FLOAT,
    VLRTOTALRETADICSIS              FLOAT,
    VLRTOTALNRETPRINCSIS            FLOAT,
    VLRTOTALNRETADICSIS             FLOAT,
    VLRTOTALBASERETRET              FLOAT,
    VLRTOTALRETPRINCRET             FLOAT,
    VLRTOTALRETADICRET              FLOAT,
    VLRTOTALNRETPRINCRET            FLOAT,
    VLRTOTALNRETADICRET             FLOAT,
    CONSTRAINT PK_TRIRCSTRES PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CNPJPRESTADOR),
    CONSTRAINT FK_TRIRCSTRES_TRIRES FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA) REFERENCES TRIRES(CODEMP, DTREF, TPAMB, SEQUENCIA) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53424-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRCSPRES
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TRIRCSPRES
NomeObjeto: TRIRCSPRES
TipoObjeto: TABLE
NomeTabela: TRIRCSPRES
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TRIRCSPRES (
    CODEMP                          NUMBER(10)      NOT NULL,
    DTREF                           DATE            NOT NULL,
    TPAMB                           VARCHAR2(1)     NOT NULL,
    SEQUENCIA                       NUMBER(5)       NOT NULL,
    TPINSCTOMADOR                   NUMBER(5)       NOT NULL,
    NRINSCTOMADOR                   VARCHAR2(14)    NOT NULL,
    VLRTOTALBASERETSIS              FLOAT,
    VLRTOTALRETPRINCSIS             FLOAT,
    VLRTOTALRETADICSIS              FLOAT,
    VLRTOTALNRETPRINCSIS            FLOAT,
    VLRTOTALNRETADICSIS             FLOAT,
    VLRTOTALBASERETRET              FLOAT,
    VLRTOTALRETPRINCRET             FLOAT,
    VLRTOTALRETADICRET              FLOAT,
    VLRTOTALNRETPRINCRET            FLOAT,
    VLRTOTALNRETADICRET             FLOAT,
    CONSTRAINT PK_TRIRCSPRES PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, TPINSCTOMADOR, NRINSCTOMADOR),
    CONSTRAINT FK_PK_TRIRCSPRES_TRIRES FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA) REFERENCES TRIRES(CODEMP, DTREF, TPAMB, SEQUENCIA) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53425-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRICPPRRES
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TRICPPRRES
NomeObjeto: TRICPPRRES
TipoObjeto: TABLE
NomeTabela: TRICPPRRES
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TRICPPRRES (
    CODEMP                          NUMBER(10)      NOT NULL,
    DTREF                           DATE            NOT NULL,
    TPAMB                           VARCHAR2(1)     NOT NULL,
    SEQUENCIA                       NUMBER(5)       NOT NULL,
    SEQEVENTO                       NUMBER(5)       NOT NULL,
    VLRCPAPURSIS                    FLOAT,
    VLRRATAPURSIS                   FLOAT,
    VLRSENARAPURSIS                 FLOAT,
    VLRCPSUSPTOTALSIS               FLOAT,
    VLRRATSUSPTOTALSIS              FLOAT,
    VLRSENARSUSPTOTALSIS            FLOAT,
    VLRCPAPURRET                    FLOAT,
    VLRRATAPURRET                   FLOAT,
    VLRSENARAPURRET                 FLOAT,
    VLRCPSUSPTOTALRET               FLOAT,
    VLRRATSUSPTOTALRET              FLOAT,
    VLRSENARSUSPTOTALRET            FLOAT,
    CONSTRAINT PK_TRICPPRRES PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, SEQEVENTO),
    CONSTRAINT FK_PK_TRICPPRRES_TRIRES FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA) REFERENCES TRIRES(CODEMP, DTREF, TPAMB, SEQUENCIA) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53426-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRICPRBRES
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TRICPRBRES
NomeObjeto: TRICPRBRES
TipoObjeto: TABLE
NomeTabela: TRICPRBRES
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TRICPRBRES (
    CODEMP                          NUMBER(10)      NOT NULL,
    DTREF                           DATE            NOT NULL,
    TPAMB                           VARCHAR2(1)     NOT NULL,
    SEQUENCIA                       NUMBER(5)       NOT NULL,
    CODRECEITA                      VARCHAR2(6)     NOT NULL,
    VLRCPAPURTOTALSIS               FLOAT,
    VLRCPRBSUSPTOTALSIS             FLOAT,
    VLRCPAPURTOTALRET               FLOAT,
    VLRCPRBSUSPTOTALRET             FLOAT,
    CONSTRAINT PK_TRICPRBRES PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CODRECEITA),
    CONSTRAINT FK_PK_TRICPRBRES_TRIRES FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA) REFERENCES TRIRES(CODEMP, DTREF, TPAMB, SEQUENCIA) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53427-0-0
Nro. O.S. : 1148508
Nome      : Altera - VRI_EVT_R1070
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VRI_EVT_R1070
NomeObjeto: VRI_EVT_R1070
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R1070
AS
SELECT DISTINCT
 PAJ.NUPROCESSO                                AS NUPROCESSO
,EMP.CODEMP                                    AS CODEMP
,SYSDATE                                       AS DTREF
,PAJ.NUPROCESSO                                AS CHAVE
,CASE WHEN LENGTH(EMPC.CGC) = 14 
      THEN '1' 
      ELSE '2' 
 END                                            AS TPINSC
,CASE WHEN LENGTH(EMPC.CGC) = 14 
      THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
                THEN EMPC.CGC
                ELSE SUBSTR(EMPC.CGC,1,8)
           END
      ELSE EMPC.CGC
 END                                            AS NRINSC
,PAJ.TIPO                                       AS TPPROC
,PAJ.NUMPROCESSO                                AS NRPROC
,PAJ.DTINIVALIDADE                              AS INIVALID
,PAJ.DTFIMVALIDADE                              AS FIMVALID
,PAJ.AUTORIA                                    AS INDAUTORIA
,UFS.UF                                         AS UFVARA
,CID.CODMUNFIS                                  AS CODMUNIC
,PAJ.CODIDENTVARA                               AS IDVARA
FROM TRIPAJ PAJ
    LEFT JOIN TGFEMP EMP ON (NOT EXISTS(SELECT 1
                                        FROM TRIPEMP PEMP                                             
                                        WHERE PEMP.NUPROCESSO = PAJ.NUPROCESSO
                             AND EXISTS(SELECT 1
                                        FROM TRIPISET ISET
                                        WHERE PEMP.NUPROCESSO = PAJ.NUPROCESSO)) OR 
                             EXISTS(SELECT 1
                                    FROM TRIPEMP PEMP
                                    WHERE PEMP.NUPROCESSO = PAJ.NUPROCESSO
                                      AND PEMP.CODEMP = EMP.CODEMP) )
    LEFT JOIN TSIEMP EMPC ON EMPC.CODEMP = EMP.CODEMP 
    LEFT JOIN TSICID CID ON PAJ.CODCID = CID.CODCID
    LEFT JOIN TSIUFS UFS ON UFS.CODUF = CID.UF
WHERE PAJ.ATIVO = 'S'
    AND EMP.ATIVO = 'S'
    AND PAJ.TIPO IS NOT NULL
    AND EXISTS(SELECT 1 
               FROM TRIPIMP PIMP 
               WHERE PIMP.NUPROCESSO = PAJ.NUPROCESSO
                   AND PIMP.TIPOIMPOSTO IN (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    AND PAJ.DTINIVALIDADE IS NOT NULL
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53428-0-0
Nro. O.S. : 1148508
Nome      : Altera - VRI_EVT_R2010
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VRI_EVT_R2010
NomeObjeto: VRI_EVT_R2010
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2010
AS
SELECT 
 INFST.CODEMP
,INFST.DTREF
,INFST.TPAMB
,INFST.SEQUENCIA
,INFST.CHAVE
,INFST.TPINSC
,INFST.NRINSC
,INFST.TPINSCESTAB
,INFST.NRINSCESTAB
,INFST.INDOBRA
,INFST.CNPJPRESTADOR
,SUM(INFST.VLRTOTALBRUTO) AS VLRTOTALBRUTO
,SUM(INFST.VLRBASERET) AS VLRTOTALBASERET
,SUM(INFST.VLRRETENCAO) AS VLRTOTALRETPRINC 
,SUM(INFST.VLRADICIONAL) AS VLRTOTALRETADIC
,SUM(INFST.VLRNRETPRINC) AS VLRTOTALNRETPRINC
,SUM(INFST.VLRNRETADIC) AS VLRTOTALNRETADIC
,INFST.INDCPRB
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.CNPJPRESTADORRET ELSE NULL END AS CNPJPRESTADORRET 
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALBASERETRET ELSE NULL END AS VLRTOTALBASERETRET
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALRETPRINCRET ELSE NULL END AS VLRTOTALRETPRINCRET
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALRETADICRET ELSE NULL END AS VLRTOTALRETADICRET
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALNRETPRINCRET ELSE NULL END AS VLRTOTALNRETPRINCRET
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALNRETADICRET ELSE NULL END AS VLRTOTALNRETADICRET
FROM TRIINFST INFST
    LEFT JOIN TRIRCST RCST ON RCST.CODEMP = INFST.CODEMP
                          AND RCST.DTREF = INFST.DTREF
                          AND RCST.TPAMB = INFST.TPAMB
                          AND RCST.SEQUENCIA = (INFST.SEQUENCIA - 1)
                          AND RCST.CHAVE = INFST.CHAVE
GROUP BY 
 INFST.CODEMP
,INFST.DTREF
,INFST.TPAMB
,INFST.SEQUENCIA
,INFST.CHAVE
,INFST.TPINSC
,INFST.NRINSC
,INFST.TPINSCESTAB
,INFST.NRINSCESTAB
,INFST.INDOBRA
,INFST.CNPJPRESTADOR
,INFST.INDCPRB
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.CNPJPRESTADORRET ELSE NULL END 
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALBASERETRET ELSE NULL END
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALRETPRINCRET ELSE NULL END
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALRETADICRET ELSE NULL END
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALNRETPRINCRET ELSE NULL END
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALNRETADICRET ELSE NULL END
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53429-0-0
Nro. O.S. : 1148508
Nome      : Altera - VRI_EVT_R2010_NFS
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VRI_EVT_R2010_NFS
NomeObjeto: VRI_EVT_R2010_NFS
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2010_NFS
AS
SELECT
 INFST.CODEMP
,INFST.DTREF
,INFST.TPAMB
,INFST.SEQUENCIA 
,INFST.CHAVE
,INFST.NUNOTA
,CAB.SERIENOTA AS SERIE
,CAB.NUMNOTA AS NUMDOCTO
,CAB.DTNEG AS DTEMISSAONF
,SUM(INFST.VLRTOTALBRUTO) AS VLRBRUTO
,CAB.OBSERVACAO AS OBS
,INFST.TIPODOCUMENTO
FROM TRIINFST INFST
    INNER JOIN TGFCAB CAB ON CAB.NUNOTA = INFST.NUNOTA
WHERE TIPODOCUMENTO = 'N'
GROUP BY
 INFST.CODEMP
,INFST.DTREF
,INFST.TPAMB
,INFST.SEQUENCIA
,INFST.CHAVE 
,INFST.NUNOTA
,CAB.SERIENOTA
,CAB.NUMNOTA
,CAB.DTNEG
,CAB.OBSERVACAO
,INFST.TIPODOCUMENTO
UNION
SELECT
 INFST.CODEMP
,INFST.DTREF
,INFST.TPAMB
,INFST.SEQUENCIA
,INFST.CHAVE 
,INFST.NUNOTA
,FIN.SERIENOTA AS SERIE
,FIN.NUMNOTA AS NUMDOCTO
,FIN.DTNEG AS DTEMISSAONF
,SUM(INFST.VLRTOTALBRUTO) AS VLRBRUTO
,'' AS OBS
,INFST.TIPODOCUMENTO
FROM TRIINFST INFST
    INNER JOIN TGFFIN FIN ON FIN.NUFIN = INFST.NUNOTA
WHERE TIPODOCUMENTO = 'F'
GROUP BY
 INFST.CODEMP
,INFST.DTREF
,INFST.TPAMB
,INFST.SEQUENCIA 
,INFST.CHAVE
,INFST.NUNOTA
,FIN.SERIENOTA
,FIN.NUMNOTA
,FIN.DTNEG
,INFST.TIPODOCUMENTO
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53430-0-0
Nro. O.S. : 1148508
Nome      : Altera - VRI_EVT_R2010_INFOPROCRETAD
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VRI_EVT_R2010_INFOPROCRETAD
NomeObjeto: VRI_EVT_R2010_INFOPROCRETAD
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2010_INFOPROCRETAD
AS
SELECT 
 INFST.CODEMP
,INFST.DTREF
,INFST.TPAMB
,INFST.SEQUENCIA
,INFST.CHAVE
,INFST.NUPROCESSO_INSS_15 AS CHAVEPROCESSO
,INFST.NUPROCESSO_INSS_15 AS NUPROCESSO
,INFST.SEQPROCESSO_INSS_15 AS SEQPROCESSO
,PAJ.TIPO AS TPPROCRETADIC
,PAJ.NUMPROCESSO AS NRPROCRETADIC
,ISET.CODSUSP AS CODSUSPADIC
,SUM(INFST.VLRNRETADIC15) AS VALORADIC
FROM TRIINFST INFST
    INNER JOIN TRIPAJ PAJ ON PAJ.NUPROCESSO = INFST.NUPROCESSO_INSS_15 
    INNER JOIN TRIPISET ISET ON ISET.NUPROCESSO = INFST.NUPROCESSO_INSS_15 AND ISET.SEQUENCIA = INFST.SEQPROCESSO_INSS_15
GROUP BY 
 INFST.CODEMP
,INFST.DTREF
,INFST.TPAMB
,INFST.SEQUENCIA
,INFST.CHAVE
,INFST.NUPROCESSO_INSS_15
,INFST.SEQPROCESSO_INSS_15
,PAJ.TIPO
,PAJ.NUMPROCESSO
,ISET.CODSUSP
UNION
SELECT 
 INFST.CODEMP
,INFST.DTREF
,INFST.TPAMB
,INFST.SEQUENCIA
,INFST.CHAVE
,INFST.NUPROCESSO_INSS_20 AS CHAVEPROCESSO
,INFST.NUPROCESSO_INSS_20 AS NUPROCESSO
,INFST.SEQPROCESSO_INSS_20 AS SEQPROCESSO
,PAJ.TIPO AS TPPROCRETADIC
,PAJ.NUMPROCESSO AS NRPROCRETADIC
,ISET.CODSUSP AS CODSUSPADIC
,SUM(INFST.VLRNRETADIC20) AS VALORADIC
FROM TRIINFST INFST
    INNER JOIN TRIPAJ PAJ ON PAJ.NUPROCESSO = INFST.NUPROCESSO_INSS_20 
    INNER JOIN TRIPISET ISET ON ISET.NUPROCESSO = INFST.NUPROCESSO_INSS_20 AND ISET.SEQUENCIA = INFST.SEQPROCESSO_INSS_20
GROUP BY 
 INFST.CODEMP
,INFST.DTREF
,INFST.TPAMB
,INFST.SEQUENCIA
,INFST.CHAVE
,INFST.NUPROCESSO_INSS_20
,INFST.SEQPROCESSO_INSS_20
,PAJ.TIPO
,PAJ.NUMPROCESSO
,ISET.CODSUSP
UNION
SELECT 
 INFST.CODEMP
,INFST.DTREF
,INFST.TPAMB
,INFST.SEQUENCIA
,INFST.CHAVE
,INFST.NUPROCESSO_INSS_25 AS CHAVEPROCESSO
,INFST.NUPROCESSO_INSS_25 AS NUPROCESSO
,INFST.SEQPROCESSO_INSS_25 AS SEQPROCESSO
,PAJ.TIPO AS TPPROCRETADIC
,PAJ.NUMPROCESSO AS NRPROCRETADIC
,ISET.CODSUSP AS CODSUSPADIC
,SUM(INFST.VLRNRETADIC25) AS VALORADIC
FROM TRIINFST INFST
    INNER JOIN TRIPAJ PAJ ON PAJ.NUPROCESSO = INFST.NUPROCESSO_INSS_25 
    INNER JOIN TRIPISET ISET ON ISET.NUPROCESSO = INFST.NUPROCESSO_INSS_25 AND ISET.SEQUENCIA = INFST.SEQPROCESSO_INSS_25
GROUP BY 
 INFST.CODEMP
,INFST.DTREF
,INFST.TPAMB
,INFST.SEQUENCIA
,INFST.CHAVE
,INFST.NUPROCESSO_INSS_25
,INFST.SEQPROCESSO_INSS_25
,PAJ.TIPO
,PAJ.NUMPROCESSO
,ISET.CODSUSP
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53431-0-0
Nro. O.S. : 1148508
Nome      : Altera - VRI_EVT_R2010_NFS_INFOTPSERV
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VRI_EVT_R2010_NFS_INFOTPSERV
NomeObjeto: VRI_EVT_R2010_NFS_INFOTPSERV
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2010_NFS_INFOTPSERV
AS
SELECT 
 TABX.CODEMP
,TABX.DTREF
,TABX.CHAVE
,TABX.NUNOTA
,TABX.TPSERVICO
,TABX.TIPODOCUMENTO
,TABX.TPINSC
,TABX.NRINSC
,TABX.TPINSCESTAB
,TABX.NRINSCESTAB
,TABX.INDOBRA
,TABX.CNPJPRESTADOR
,TABX.INDCPRB
,(TABX.VLRNRETADIC15 + TABX.VLRNRETADIC20 + TABX.VLRNRETADIC25) AS VLRNRETADIC
,TABX.VLRTOTALBRUTO 
,TABX.VLRBASERET
,TABX.VLRRETENCAO
,TABX.VLRRETSUB
,TABX.VLRNRETPRINC
,TABX.VLRSERVICOS15
,TABX.VLRSERVICOS20
,TABX.VLRSERVICOS25
,TABX.VLRADICIONAL
,TABX.NUPROCESSO_INSS_PRINC
,TABX.SEQPROCESSO_INSS_PRINC
,TABX.NUPROCESSO_INSS_15
,TABX.SEQPROCESSO_INSS_15
,TABX.VLRNRETADIC15
,TABX.NUPROCESSO_INSS_20
,TABX.SEQPROCESSO_INSS_20
,TABX.VLRNRETADIC20
,TABX.NUPROCESSO_INSS_25
,TABX.SEQPROCESSO_INSS_25
,TABX.VLRNRETADIC25
FROM (
    SELECT
     TAB.CODEMP
    ,TAB.DTREF
    ,TAB.TPINSC||','||TAB.NRINSC||','||TAB.TPINSCESTAB||','||TAB.NRINSCESTAB||','||TAB.INDOBRA||','||TAB.CNPJPRESTADOR||','||TAB.INDCPRB AS CHAVE
    ,TAB.NUDOCUMENTO AS NUNOTA
    ,TAB.TPSERVICO
    ,TAB.TIPODOCUMENTO
    ,TAB.TPINSC
    ,TAB.NRINSC
    ,TAB.TPINSCESTAB
    ,TAB.NRINSCESTAB
    ,TAB.INDOBRA
    ,TAB.CNPJPRESTADOR
    ,TAB.INDCPRB
    ,TRUNC(SUM(TAB.VLRTOTALBRUTO), 2) AS VLRTOTALBRUTO 
    ,TRUNC(SUM(TAB.VLRBASERET), 2) AS VLRBASERET
    ,TRUNC(SUM(TAB.VLRRETENCAO), 2) AS VLRRETENCAO
    ,TRUNC(SUM(TAB.VLRRETSUB), 2) AS VLRRETSUB
    ,TRUNC(SUM(TAB.VLRRETENCAO * NVL(ISET_INSS_PRINC.PERCSUSPIMP, 0) / 100), 2) AS VLRNRETPRINC
    ,TRUNC(SUM(TAB.VLRSERVICOS15), 2) AS VLRSERVICOS15
    ,TRUNC(SUM(TAB.VLRSERVICOS20), 2) AS VLRSERVICOS20
    ,TRUNC(SUM(TAB.VLRSERVICOS25), 2) AS VLRSERVICOS25
    ,TRUNC(SUM(TAB.VLRADICIONAL), 2) AS VLRADICIONAL
    ,MAX(TAB.NUPROCESSO_INSS_PRINC) AS NUPROCESSO_INSS_PRINC
    ,MAX(TAB.SEQPROCESSO_INSS_PRINC) AS SEQPROCESSO_INSS_PRINC
    ,MAX(TAB.NUPROCESSO_INSS_15) AS NUPROCESSO_INSS_15
    ,MAX(TAB.SEQPROCESSO_INSS_15) AS SEQPROCESSO_INSS_15
    ,TRUNC(SUM(CASE WHEN TAB.VLRSERVICOS15 > 0 THEN TAB.VLRADICIONAL * NVL(ISET_INSS_15.PERCSUSPIMP, 0) / 100 ELSE 0 END), 2) AS VLRNRETADIC15
    ,MAX(TAB.NUPROCESSO_INSS_20) AS NUPROCESSO_INSS_20
    ,MAX(TAB.SEQPROCESSO_INSS_20) AS SEQPROCESSO_INSS_20
    ,TRUNC(SUM(CASE WHEN TAB.VLRSERVICOS20 > 0 THEN TAB.VLRADICIONAL * NVL(ISET_INSS_20.PERCSUSPIMP, 0) / 100 ELSE 0 END), 2) AS VLRNRETADIC20
    ,MAX(TAB.NUPROCESSO_INSS_25) AS NUPROCESSO_INSS_25
    ,MAX(TAB.SEQPROCESSO_INSS_25) AS SEQPROCESSO_INSS_25
    ,TRUNC(SUM(CASE WHEN TAB.VLRSERVICOS25 > 0 THEN TAB.VLRADICIONAL * NVL(ISET_INSS_25.PERCSUSPIMP, 0) / 100 ELSE 0 END), 2) AS VLRNRETADIC25
    FROM (
        /*Busca pelas notas de serviços tomados*/
        SELECT 
         CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMP.CODEMP
              WHEN NVL(EMP.CODEMPMATRIZEFD, 0) > 0 THEN EMP.CODEMPMATRIZEFD
              ELSE EMP.CODEMP 
         END AS CODEMP
        ,TRUNC(CAB.DTNEG, 'MM') AS DTREF
        ,CASE WHEN LENGTH(EMPC.CGC) = 14 
              THEN '1' 
              ELSE '2' 
         END AS TPINSC
        ,CASE WHEN LENGTH(EMPC.CGC) = 14 
              THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
                        THEN EMPC.CGC
                        ELSE SUBSTR(EMPC.CGC,1,8)
                   END
              ELSE EMPC.CGC
         END AS NRINSC
        ,ITE.NUNOTA AS NUDOCUMENTO
        ,'N' AS TIPODOCUMENTO
        ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN 4 ELSE 1 END AS TPINSCESTAB
        ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN CAB.CODOBRA ELSE EMPC.CGC END AS NRINSCESTAB
        ,CASE WHEN PRO.OBRACONSTCIVIL IS NULL THEN 0 ELSE PRO.OBRACONSTCIVIL END AS INDOBRA
        ,PAR.CGC_CPF AS CNPJPRESTADOR
        ,CASE WHEN NVL(DIN.ALIQUOTA, IMN.ALIQUOTA) = 11 THEN 0 ELSE 1 END AS INDCPRB
        ,PRO.CLASSIFCESSAOOBRA AS TPSERVICO
        ,ITE.VLRTOT AS VLRTOTALBRUTO
        ,NVL(DIN.BASERED, IMN.BASE) AS VLRBASERET
        ,CASE WHEN DIN.NUNOTA IS NOT NULL THEN CASE WHEN NVL(DIN.TIPOINSSESPECIAL, ' ') <> ' ' THEN NVL(DIN.VALOR, 0) - NVL(DIN.VLRINSSESPECIAL, 0) ELSE NVL(DIN.VALOR, 0) END
              ELSE CASE WHEN NVL(IMN.TIPOINSSESPECIAL, ' ') <> ' ' THEN NVL(IMN.VALOR, 0) - NVL(IMN.VLRINSSESPECIAL, 0) ELSE NVL(IMN.VALOR, 0) END END AS VLRRETENCAO
        ,0 AS VLRRETSUB /*Por enquanto não vamos gerar essa tag*/
        ,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, ' ') = '1' AND NVL(DIN.VLRINSSESPECIAL, 0) > 0 OR
                   NVL(IMN.TIPOINSSESPECIAL, ' ') = '1' AND NVL(IMN.VLRINSSESPECIAL, 0) > 0 THEN ITE.VLRTOT ELSE 0 END AS VLRSERVICOS15
        ,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, ' ') = '2' AND NVL(DIN.VLRINSSESPECIAL, 0) > 0 OR
                   NVL(IMN.TIPOINSSESPECIAL, ' ') = '2' AND NVL(IMN.VLRINSSESPECIAL, 0) > 0 THEN ITE.VLRTOT ELSE 0 END AS VLRSERVICOS20
        ,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, ' ') = '3' AND NVL(DIN.VLRINSSESPECIAL, 0) > 0 OR
                   NVL(IMN.TIPOINSSESPECIAL, ' ') = '3' AND NVL(IMN.VLRINSSESPECIAL, 0) > 0 THEN ITE.VLRTOT ELSE 0 END AS VLRSERVICOS25
        ,NVL(DIN.VLRINSSESPECIAL, NVL(IMN.VLRINSSESPECIAL, 0)) AS VLRADICIONAL
        ,SNK_GET_IDPROCESSO_IMP_EFD(1, 
                                    EMP.CODEMP, 
                                    PAR.CODPARC, 
                                    ITE.CODPROD, 
                                    PRO.CODLST, 
                                    CAB.DTNEG) AS NUPROCESSO_INSS_PRINC
        ,SNK_GET_IDPROCESSO_IMP_EFD(1, 
                                    EMP.CODEMP, 
                                    PAR.CODPARC, 
                                    ITE.CODPROD, 
                                    PRO.CODLST, 
                                    CAB.DTNEG,
                                    'S') AS SEQPROCESSO_INSS_PRINC
        ,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, IMN.TIPOINSSESPECIAL) = '1' THEN SNK_GET_IDPROCESSO_IMP_EFD(9, 
                                                                                                         EMP.CODEMP, 
                                                                                                         PAR.CODPARC, 
                                                                                                         ITE.CODPROD, 
                                                                                                         PRO.CODLST, 
                                                                                                         CAB.DTNEG)
              ELSE NULL END AS NUPROCESSO_INSS_15
        ,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, IMN.TIPOINSSESPECIAL) = '1' THEN SNK_GET_IDPROCESSO_IMP_EFD(9, 
                                                                                                         EMP.CODEMP, 
                                                                                                         PAR.CODPARC, 
                                                                                                         ITE.CODPROD, 
                                                                                                         PRO.CODLST, 
                                                                                                         CAB.DTNEG,
                                                                                                         'S')
              ELSE NULL END AS SEQPROCESSO_INSS_15
        ,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, IMN.TIPOINSSESPECIAL) = '2' THEN SNK_GET_IDPROCESSO_IMP_EFD(10, 
                                                                                                         EMP.CODEMP, 
                                                                                                         PAR.CODPARC, 
                                                                                                         ITE.CODPROD, 
                                                                                                         PRO.CODLST, 
                                                                                                         CAB.DTNEG)
              ELSE NULL END AS NUPROCESSO_INSS_20
        ,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, IMN.TIPOINSSESPECIAL) = '2' THEN SNK_GET_IDPROCESSO_IMP_EFD(10, 
                                                                                                         EMP.CODEMP, 
                                                                                                         PAR.CODPARC, 
                                                                                                         ITE.CODPROD, 
                                                                                                         PRO.CODLST, 
                                                                                                         CAB.DTNEG,
                                                                                                         'S')
              ELSE NULL END AS SEQPROCESSO_INSS_20
        ,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, IMN.TIPOINSSESPECIAL) = '3' THEN SNK_GET_IDPROCESSO_IMP_EFD(11, 
                                                                                                         EMP.CODEMP, 
                                                                                                         PAR.CODPARC, 
                                                                                                         ITE.CODPROD, 
                                                                                                         PRO.CODLST, 
                                                                                                         CAB.DTNEG)
              ELSE NULL END AS NUPROCESSO_INSS_25
        ,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, IMN.TIPOINSSESPECIAL) = '3' THEN SNK_GET_IDPROCESSO_IMP_EFD(11, 
                                                                                                         EMP.CODEMP, 
                                                                                                         PAR.CODPARC, 
                                                                                                         ITE.CODPROD, 
                                                                                                         PRO.CODLST, 
                                                                                                         CAB.DTNEG,
                                                                                                         'S')
              ELSE NULL END AS SEQPROCESSO_INSS_25
        FROM TGFITE ITE
            INNER JOIN TGFCAB CAB  ON CAB.NUNOTA = ITE.NUNOTA
            INNER JOIN (SELECT CODTIPOPER, DHALTER, TIPMOV, ATUALLIVISS, DESCROPER FROM TGFTOP) TPO  ON TPO.CODTIPOPER = CAB.CODTIPOPER AND TPO.DHALTER = CAB.DHTIPOPER
            INNER JOIN (SELECT CODEMP, CODEMPMATRIZEFD, EMPADMPUBDIR, ATIVO FROM TGFEMP) EMP  ON EMP.CODEMP = CAB.CODEMP
            INNER JOIN (SELECT CODEMP, RAZAOSOCIAL, NOMEFANTASIA, CGC FROM TSIEMP) EMPC ON EMPC.CODEMP = EMP.CODEMP
            INNER JOIN (SELECT CODPARC, NOMEPARC, CGC_CPF FROM TGFPAR) PAR  ON PAR.CODPARC = CAB.CODPARC
            INNER JOIN (SELECT CODPROD, OBRACONSTCIVIL, CLASSIFCESSAOOBRA, CODLST FROM TGFPRO) PRO  ON PRO.CODPROD = ITE.CODPROD
            LEFT JOIN  TGFDIN DIN  ON DIN.NUNOTA = ITE.NUNOTA AND DIN.SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 5 AND DIN.TIPO = -1 AND ((DIN.ALIQUOTA - DIN.PERCINSSESPECIAL) IN (3.5, 11))
            LEFT JOIN  TGFIMN IMN  ON IMN.NUNOTA = ITE.NUNOTA AND IMN.SEQUENCIA = ITE.SEQUENCIA AND IMN.TIPOIMPOSTO = 5 AND IMN.TIPIMP = -1 AND ((IMN.ALIQUOTA - IMN.PERCINSSESPECIAL) IN (3.5, 11))
        WHERE EMP.ATIVO = 'S'
            AND PRO.CLASSIFCESSAOOBRA IS NOT NULL
            AND ITE.USOPROD = 'S'
            AND TPO.TIPMOV = 'C'
            AND TPO.ATUALLIVISS = 'E'
            AND CAB.STATUSNOTA = 'L'
            AND (EXISTS (SELECT 1 FROM TGFDIN DIN WHERE DIN.NUNOTA = ITE.NUNOTA AND DIN.SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 5 AND DIN.TIPO = -1 AND ((DIN.ALIQUOTA - DIN.PERCINSSESPECIAL) IN (3.5, 11))) OR 
                 EXISTS (SELECT 1 FROM TGFIMN IMN WHERE IMN.NUNOTA = ITE.NUNOTA AND IMN.SEQUENCIA = ITE.SEQUENCIA AND IMN.TIPOIMPOSTO = 5 AND IMN.TIPIMP = -1 AND ((IMN.ALIQUOTA - IMN.PERCINSSESPECIAL) IN (3.5, 11))))
        UNION
        /*Busca pelo financeiros que representam serviços tomados*/
        SELECT 
         CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMP.CODEMP
              WHEN NVL(EMP.CODEMPMATRIZEFD, 0) > 0 THEN EMP.CODEMPMATRIZEFD
              ELSE EMP.CODEMP 
         END AS CODEMP
        ,TRUNC(FIN.DTNEG, 'MM') AS DTREF
        ,CASE WHEN LENGTH(EMPC.CGC) = 14 
              THEN '1' 
              ELSE '2' 
         END AS TPINSC
        ,CASE WHEN LENGTH(EMPC.CGC) = 14 
              THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
                        THEN EMPC.CGC
                        ELSE SUBSTR(EMPC.CGC,1,8)
                   END
              ELSE EMPC.CGC
         END AS NRINSC
        ,FIN.NUFIN AS NUDOCUMENTO
        ,'F' AS TIPODOCUMENTO
        ,CASE WHEN FIN.CODOBRA IS NOT NULL THEN 4 ELSE 1 END AS TPINSCESTAB
        ,CASE WHEN FIN.CODOBRA IS NOT NULL THEN FIN.CODOBRA ELSE EMPC.CGC END AS NRINSCESTAB
        ,CASE WHEN FIN.OBRACONSTCIVIL IS NULL THEN 0 ELSE FIN.OBRACONSTCIVIL END AS INDOBRA
        ,PAR.CGC_CPF AS CNPJPRESTADOR
        ,CASE WHEN NVL(IMF.ALIQUOTA, 0) = 11 THEN 0 ELSE 1 END AS INDCPRB
        ,FIN.CLASSIFCESSAOOBRA AS TPSERVICO
        ,FIN.VLRDESDOB AS VLRTOTALBRUTO
        ,NVL(IMF.BASE, 0) AS VLRBASERET
        ,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') <> ' ' THEN NVL(IMF.VALOR, 0) - NVL(IMF.VLRINSSESPECIAL, 0) ELSE NVL(IMF.VALOR, 0) END AS VLRRETENCAO
        ,0 AS VLRRETSUB /*Por enquanto não vamos gerar essa tag*/
        ,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') = '1' AND NVL(IMF.VLRINSSESPECIAL, 0) > 0 THEN FIN.VLRDESDOB ELSE 0 END AS VLRSERVICOS15
        ,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') = '2' AND NVL(IMF.VLRINSSESPECIAL, 0) > 0 THEN FIN.VLRDESDOB ELSE 0 END AS VLRSERVICOS20
        ,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') = '3' AND NVL(IMF.VLRINSSESPECIAL, 0) > 0 THEN FIN.VLRDESDOB ELSE 0 END AS VLRSERVICOS25
        ,NVL(IMF.VLRINSSESPECIAL, 0) AS VLRADICIONAL
        ,SNK_GET_IDPROCESSO_IMP_EFD(1, 
                                    EMP.CODEMP, 
                                    PAR.CODPARC, 
                                    NULL, 
                                    FIN.CODLST, 
                                    FIN.DTNEG) AS NUPROCESSO_INSS_PRINC
        ,SNK_GET_IDPROCESSO_IMP_EFD(1, 
                                    EMP.CODEMP, 
                                    PAR.CODPARC, 
                                    NULL, 
                                    FIN.CODLST, 
                                    FIN.DTNEG,
                                    'S') AS SEQPROCESSO_INSS_PRINC
        ,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') = '1' THEN SNK_GET_IDPROCESSO_IMP_EFD(9, 
                                                                                        EMP.CODEMP, 
                                                                                        PAR.CODPARC, 
                                                                                        NULL, 
                                                                                        FIN.CODLST, 
                                                                                        FIN.DTNEG)
              ELSE NULL END AS NUPROCESSO_INSS_15
        ,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') = '1' THEN SNK_GET_IDPROCESSO_IMP_EFD(9, 
                                                                                        EMP.CODEMP, 
                                                                                        PAR.CODPARC, 
                                                                                        NULL, 
                                                                                        FIN.CODLST, 
                                                                                        FIN.DTNEG,
                                                                                        'S')
              ELSE NULL END AS SEQPROCESSO_INSS_15
        ,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') = '2' THEN SNK_GET_IDPROCESSO_IMP_EFD(10, 
                                                                                        EMP.CODEMP, 
                                                                                        PAR.CODPARC, 
                                                                                        NULL, 
                                                                                        FIN.CODLST, 
                                                                                        FIN.DTNEG)
              ELSE NULL END AS NUPROCESSO_INSS_20
        ,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') = '2' THEN SNK_GET_IDPROCESSO_IMP_EFD(10, 
                                                                                        EMP.CODEMP, 
                                                                                        PAR.CODPARC, 
                                                                                        NULL, 
                                                                                        FIN.CODLST, 
                                                                                        FIN.DTNEG,
                                                                                        'S')
              ELSE NULL END AS SEQPROCESSO_INSS_20
        ,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') = '3' THEN SNK_GET_IDPROCESSO_IMP_EFD(11, 
                                                                                        EMP.CODEMP, 
                                                                                        PAR.CODPARC, 
                                                                                        NULL, 
                                                                                        FIN.CODLST, 
                                                                                        FIN.DTNEG)
              ELSE NULL END AS NUPROCESSO_INSS_25
        ,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') = '3' THEN SNK_GET_IDPROCESSO_IMP_EFD(11, 
                                                                                        EMP.CODEMP, 
                                                                                        PAR.CODPARC, 
                                                                                        NULL, 
                                                                                        FIN.CODLST, 
                                                                                        FIN.DTNEG,
                                                                                        'S')
              ELSE NULL END AS SEQPROCESSO_INSS_25
        FROM TGFFIN FIN
            INNER JOIN (SELECT CODTIPOPER, DHALTER, TIPMOV, ATUALLIVISS, DESCROPER FROM TGFTOP)  TPO  ON TPO.CODTIPOPER = FIN.CODTIPOPER AND TPO.DHALTER = FIN.DHTIPOPER
            INNER JOIN (SELECT CODEMP, CODEMPMATRIZEFD, EMPADMPUBDIR, ATIVO FROM TGFEMP) EMP  ON EMP.CODEMP = FIN.CODEMP
            INNER JOIN (SELECT CODEMP, RAZAOSOCIAL, NOMEFANTASIA, CGC FROM TSIEMP) EMPC ON EMPC.CODEMP = EMP.CODEMP
            INNER JOIN (SELECT CODPARC, NOMEPARC, CGC_CPF FROM TGFPAR) PAR  ON PAR.CODPARC = FIN.CODPARC
            INNER JOIN TGFIMF IMF ON IMF.NUFIN = FIN.NUFIN AND IMF.TIPIMP = -1 AND ((IMF.ALIQUOTA - IMF.PERCINSSESPECIAL) IN (3.5, 11))
            INNER JOIN TGFIMC IMC ON IMC.CODIMP = IMF.CODIMP AND IMC.TIPOIMPOSTO = 5
        WHERE EMP.ATIVO = 'S'
            AND FIN.CLASSIFCESSAOOBRA IS NOT NULL
            AND TPO.TIPMOV = 'I'
            AND TPO.ATUALLIVISS = 'E'
    ) TAB
        LEFT JOIN  TRIPISET ISET_INSS_PRINC ON ISET_INSS_PRINC.NUPROCESSO = NUPROCESSO_INSS_PRINC AND ISET_INSS_PRINC.SEQUENCIA = SEQPROCESSO_INSS_PRINC 
        LEFT JOIN  TRIPISET ISET_INSS_15 ON ISET_INSS_15.NUPROCESSO = NUPROCESSO_INSS_15 AND ISET_INSS_15.SEQUENCIA = SEQPROCESSO_INSS_15
        LEFT JOIN  TRIPISET ISET_INSS_20 ON ISET_INSS_20.NUPROCESSO = NUPROCESSO_INSS_20 AND ISET_INSS_20.SEQUENCIA = SEQPROCESSO_INSS_20
        LEFT JOIN  TRIPISET ISET_INSS_25 ON ISET_INSS_25.NUPROCESSO = NUPROCESSO_INSS_25 AND ISET_INSS_25.SEQUENCIA = SEQPROCESSO_INSS_25
    GROUP BY
     TAB.CODEMP
    ,TAB.DTREF
    ,TAB.TPINSC
    ,TAB.NRINSC
    ,TAB.NUDOCUMENTO
    ,TAB.TIPODOCUMENTO
    ,TAB.TPINSCESTAB
    ,TAB.NRINSCESTAB
    ,TAB.INDOBRA
    ,TAB.CNPJPRESTADOR
    ,TAB.INDCPRB
    ,TAB.TPSERVICO
) TABX
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53432-0-0
Nro. O.S. : 1148508
Nome      : Altera - VRI_EVT_R2020
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VRI_EVT_R2020
NomeObjeto: VRI_EVT_R2020
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2020
AS
SELECT 
 INFSP.CODEMP
,INFSP.DTREF
,INFSP.TPAMB
,INFSP.SEQUENCIA
,INFSP.CHAVE
,INFSP.TPINSC
,INFSP.NRINSC
,INFSP.TPINSCESTABPREST
,INFSP.NRINSCESTABPREST
,INFSP.TPINSCTOMADOR
,INFSP.NRINSCTOMADOR
,INFSP.INDOBRA
,SUM(INFSP.VLRTOTALBRUTO) AS VLRTOTALBRUTO
,SUM(INFSP.VLRBASERET) AS VLRTOTALBASERET
,SUM(INFSP.VLRRETENCAO) AS VLRTOTALRETPRINC 
,SUM(INFSP.VLRADICIONAL) AS VLRTOTALRETADIC
,SUM(INFSP.VLRNRETPRINC) AS VLRTOTALNRETPRINC
,SUM(INFSP.VLRNRETADIC) AS VLRTOTALNRETADIC
,CASE WHEN NVL(RCSP.CONTROLE, ' ') = 'I' AND NVL(RCSP.STATUSREG, ' ') = 'F' THEN RCSP.TPINSCTOMADORRET ELSE NULL END AS TPINSCTOMADORRET
,CASE WHEN NVL(RCSP.CONTROLE, ' ') = 'I' AND NVL(RCSP.STATUSREG, ' ') = 'F' THEN RCSP.NRINSCTOMADORRET ELSE NULL END AS NRINSCTOMADORRET
,CASE WHEN NVL(RCSP.CONTROLE, ' ') = 'I' AND NVL(RCSP.STATUSREG, ' ') = 'F' THEN RCSP.VLRTOTALBASERETRET ELSE NULL END AS VLRTOTALBASERETRET
,CASE WHEN NVL(RCSP.CONTROLE, ' ') = 'I' AND NVL(RCSP.STATUSREG, ' ') = 'F' THEN RCSP.VLRTOTALRETPRINCRET ELSE NULL END AS VLRTOTALRETPRINCRET
,CASE WHEN NVL(RCSP.CONTROLE, ' ') = 'I' AND NVL(RCSP.STATUSREG, ' ') = 'F' THEN RCSP.VLRTOTALRETADICRET ELSE NULL END AS VLRTOTALRETADICRET
,CASE WHEN NVL(RCSP.CONTROLE, ' ') = 'I' AND NVL(RCSP.STATUSREG, ' ') = 'F' THEN RCSP.VLRTOTALNRETPRINCRET ELSE NULL END AS VLRTOTALNRETPRINCRET
,CASE WHEN NVL(RCSP.CONTROLE, ' ') = 'I' AND NVL(RCSP.STATUSREG, ' ') = 'F' THEN RCSP.VLRTOTALNRETADICRET ELSE NULL END AS VLRTOTALNRETADICRET
FROM TRIINFSP INFSP
    LEFT JOIN TRIRCSP RCSP ON RCSP.CODEMP = INFSP.CODEMP
                          AND RCSP.DTREF = INFSP.DTREF
                          AND RCSP.TPAMB = INFSP.TPAMB
                          AND RCSP.SEQUENCIA = (INFSP.SEQUENCIA - 1)
                          AND RCSP.CHAVE = INFSP.CHAVE
GROUP BY 
 INFSP.CODEMP
,INFSP.DTREF
,INFSP.TPAMB
,INFSP.SEQUENCIA
,INFSP.CHAVE
,INFSP.TPINSC
,INFSP.NRINSC
,INFSP.TPINSCESTABPREST
,INFSP.NRINSCESTABPREST
,INFSP.TPINSCTOMADOR
,INFSP.NRINSCTOMADOR
,INFSP.INDOBRA
,CASE WHEN NVL(RCSP.CONTROLE, ' ') = 'I' AND NVL(RCSP.STATUSREG, ' ') = 'F' THEN RCSP.TPINSCTOMADORRET ELSE NULL END
,CASE WHEN NVL(RCSP.CONTROLE, ' ') = 'I' AND NVL(RCSP.STATUSREG, ' ') = 'F' THEN RCSP.NRINSCTOMADORRET ELSE NULL END
,CASE WHEN NVL(RCSP.CONTROLE, ' ') = 'I' AND NVL(RCSP.STATUSREG, ' ') = 'F' THEN RCSP.VLRTOTALBASERETRET ELSE NULL END
,CASE WHEN NVL(RCSP.CONTROLE, ' ') = 'I' AND NVL(RCSP.STATUSREG, ' ') = 'F' THEN RCSP.VLRTOTALRETPRINCRET ELSE NULL END
,CASE WHEN NVL(RCSP.CONTROLE, ' ') = 'I' AND NVL(RCSP.STATUSREG, ' ') = 'F' THEN RCSP.VLRTOTALRETADICRET ELSE NULL END
,CASE WHEN NVL(RCSP.CONTROLE, ' ') = 'I' AND NVL(RCSP.STATUSREG, ' ') = 'F' THEN RCSP.VLRTOTALNRETPRINCRET ELSE NULL END
,CASE WHEN NVL(RCSP.CONTROLE, ' ') = 'I' AND NVL(RCSP.STATUSREG, ' ') = 'F' THEN RCSP.VLRTOTALNRETADICRET ELSE NULL END
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53433-0-0
Nro. O.S. : 1148508
Nome      : Altera - VRI_EVT_R2020_NFS
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VRI_EVT_R2020_NFS
NomeObjeto: VRI_EVT_R2020_NFS
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2020_NFS
AS 
SELECT 
 INFSP.CODEMP
,INFSP.DTREF
,INFSP.TPAMB
,INFSP.SEQUENCIA
,INFSP.CHAVE
,CAB.NUNOTA
,CAB.SERIENOTA AS SERIE
,CAB.NUMNOTA AS NUMDOCTO
,CAB.DTNEG AS DTEMISSAONF
,SUM(INFSP.VLRTOTALBRUTO) AS VLRBRUTO
,CAB.OBSERVACAO AS OBS
FROM TRIINFSP INFSP
    INNER JOIN TGFCAB CAB ON CAB.NUNOTA = INFSP.NUNOTA
GROUP BY 
 INFSP.CODEMP
,INFSP.DTREF
,INFSP.TPAMB
,INFSP.SEQUENCIA
,INFSP.CHAVE
,CAB.NUNOTA
,CAB.SERIENOTA
,CAB.NUMNOTA
,CAB.DTNEG
,CAB.OBSERVACAO
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53434-0-0
Nro. O.S. : 1148508
Nome      : Altera - VRI_EVT_R2020_INFOPROCRETAD
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VRI_EVT_R2020_INFOPROCRETAD
NomeObjeto: VRI_EVT_R2020_INFOPROCRETAD
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2020_INFOPROCRETAD
AS
SELECT 
 INFSP.CODEMP
,INFSP.DTREF
,INFSP.TPAMB
,INFSP.SEQUENCIA
,INFSP.CHAVE
,INFSP.NUPROCESSO_INSS_15 AS CHAVEPROCESSO
,INFSP.NUPROCESSO_INSS_15 AS NUPROCESSO
,INFSP.SEQPROCESSO_INSS_15 AS SEQPROCESSO
,PAJ.TIPO AS TPPROCRETADIC
,PAJ.NUMPROCESSO AS NRPROCRETADIC
,ISET.CODSUSP AS CODSUSPADIC
,SUM(INFSP.VLRNRETADIC15) AS VALORADIC
FROM TRIINFSP INFSP
    INNER JOIN TRIPAJ PAJ ON PAJ.NUPROCESSO = INFSP.NUPROCESSO_INSS_15 
    INNER JOIN TRIPISET ISET ON ISET.NUPROCESSO = INFSP.NUPROCESSO_INSS_15 AND ISET.SEQUENCIA = INFSP.SEQPROCESSO_INSS_15
GROUP BY 
 INFSP.CODEMP
,INFSP.DTREF
,INFSP.TPAMB
,INFSP.SEQUENCIA
,INFSP.CHAVE
,INFSP.NUPROCESSO_INSS_15
,INFSP.SEQPROCESSO_INSS_15
,PAJ.TIPO
,PAJ.NUMPROCESSO
,ISET.CODSUSP
UNION
SELECT 
 INFSP.CODEMP
,INFSP.DTREF
,INFSP.TPAMB
,INFSP.SEQUENCIA
,INFSP.CHAVE
,INFSP.NUPROCESSO_INSS_20 AS CHAVEPROCESSO
,INFSP.NUPROCESSO_INSS_20 AS NUPROCESSO
,INFSP.SEQPROCESSO_INSS_20 AS SEQPROCESSO
,PAJ.TIPO AS TPPROCRETADIC
,PAJ.NUMPROCESSO AS NRPROCRETADIC
,ISET.CODSUSP AS CODSUSPADIC
,SUM(INFSP.VLRNRETADIC20) AS VALORADIC
FROM TRIINFSP INFSP
    INNER JOIN TRIPAJ PAJ ON PAJ.NUPROCESSO = INFSP.NUPROCESSO_INSS_20 
    INNER JOIN TRIPISET ISET ON ISET.NUPROCESSO = INFSP.NUPROCESSO_INSS_20 AND ISET.SEQUENCIA = INFSP.SEQPROCESSO_INSS_20
GROUP BY 
 INFSP.CODEMP
,INFSP.DTREF
,INFSP.TPAMB
,INFSP.SEQUENCIA
,INFSP.CHAVE
,INFSP.NUPROCESSO_INSS_20
,INFSP.SEQPROCESSO_INSS_20
,PAJ.TIPO
,PAJ.NUMPROCESSO
,ISET.CODSUSP
UNION
SELECT 
 INFSP.CODEMP
,INFSP.DTREF
,INFSP.TPAMB
,INFSP.SEQUENCIA
,INFSP.CHAVE
,INFSP.NUPROCESSO_INSS_25 AS CHAVEPROCESSO
,INFSP.NUPROCESSO_INSS_25 AS NUPROCESSO
,INFSP.SEQPROCESSO_INSS_25 AS SEQPROCESSO
,PAJ.TIPO AS TPPROCRETADIC
,PAJ.NUMPROCESSO AS NRPROCRETADIC
,ISET.CODSUSP AS CODSUSPADIC
,SUM(INFSP.VLRNRETADIC25) AS VALORADIC
FROM TRIINFSP INFSP
    INNER JOIN TRIPAJ PAJ ON PAJ.NUPROCESSO = INFSP.NUPROCESSO_INSS_25 
    INNER JOIN TRIPISET ISET ON ISET.NUPROCESSO = INFSP.NUPROCESSO_INSS_25 AND ISET.SEQUENCIA = INFSP.SEQPROCESSO_INSS_25
GROUP BY 
 INFSP.CODEMP
,INFSP.DTREF
,INFSP.TPAMB
,INFSP.SEQUENCIA
,INFSP.CHAVE
,INFSP.NUPROCESSO_INSS_25
,INFSP.SEQPROCESSO_INSS_25
,PAJ.TIPO
,PAJ.NUMPROCESSO
,ISET.CODSUSP 
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53435-0-0
Nro. O.S. : 1148508
Nome      : Altera - VRI_EVT_R2020_NFS_INFOTPSERV
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VRI_EVT_R2020_NFS_INFOTPSERV
NomeObjeto: VRI_EVT_R2020_NFS_INFOTPSERV
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2020_NFS_INFOTPSERV
AS 
SELECT 
 TABX.CODEMP
,TABX.DTREF
,TABX.CHAVE
,TABX.NUNOTA
,TABX.TPSERVICO
,TABX.TPINSC
,TABX.NRINSC
,TABX.TPINSCESTABPREST
,TABX.NRINSCESTABPREST
,TABX.TPINSCTOMADOR
,TABX.NRINSCTOMADOR
,TABX.INDOBRA
,TABX.VLRTOTALBRUTO 
,TABX.VLRBASERET
,TABX.VLRRETENCAO
,TABX.VLRRETSUB
,TABX.VLRNRETPRINC
,TABX.VLRSERVICOS15
,TABX.VLRSERVICOS20
,TABX.VLRSERVICOS25
,TABX.VLRADICIONAL
,(TABX.VLRNRETADIC15 + TABX.VLRNRETADIC20 + TABX.VLRNRETADIC25) AS VLRNRETADIC
,TABX.NUPROCESSO_INSS_PRINC
,TABX.SEQPROCESSO_INSS_PRINC
,TABX.NUPROCESSO_INSS_15
,TABX.SEQPROCESSO_INSS_15
,TABX.VLRNRETADIC15
,TABX.NUPROCESSO_INSS_20
,TABX.SEQPROCESSO_INSS_20
,TABX.VLRNRETADIC20
,TABX.NUPROCESSO_INSS_25
,TABX.SEQPROCESSO_INSS_25
,TABX.VLRNRETADIC25
FROM (
    SELECT 
     TAB.CODEMP
    ,TAB.DTREF
    ,TAB.TPINSC||','||TAB.NRINSC||','||TAB.TPINSCESTABPREST||','||TAB.NRINSCESTABPREST||','||TAB.TPINSCTOMADOR||','||TAB.NRINSCTOMADOR||','||TAB.INDOBRA AS CHAVE
    ,TAB.NUNOTA
    ,TAB.TPSERVICO
    ,TAB.TPINSC
    ,TAB.NRINSC
    ,TAB.TPINSCESTABPREST
    ,TAB.NRINSCESTABPREST
    ,TAB.TPINSCTOMADOR
    ,TAB.NRINSCTOMADOR
    ,TAB.INDOBRA
    ,TRUNC(SUM(TAB.VLRTOTALBRUTO), 2) AS VLRTOTALBRUTO 
    ,TRUNC(SUM(TAB.VLRBASERET), 2) AS VLRBASERET
    ,TRUNC(SUM(TAB.VLRRETENCAO), 2) AS VLRRETENCAO
    ,TRUNC(SUM(TAB.VLRRETSUB), 2) AS VLRRETSUB
    ,TRUNC(SUM(TAB.VLRRETENCAO * NVL(ISET_INSS_PRINC.PERCSUSPIMP, 0) / 100), 2) AS VLRNRETPRINC
    ,TRUNC(SUM(TAB.VLRSERVICOS15), 2) AS VLRSERVICOS15
    ,TRUNC(SUM(TAB.VLRSERVICOS20), 2) AS VLRSERVICOS20
    ,TRUNC(SUM(TAB.VLRSERVICOS25), 2) AS VLRSERVICOS25
    ,TRUNC(SUM(TAB.VLRADICIONAL), 2) AS VLRADICIONAL
    ,MAX(TAB.NUPROCESSO_INSS_PRINC) AS NUPROCESSO_INSS_PRINC
    ,MAX(TAB.SEQPROCESSO_INSS_PRINC) AS SEQPROCESSO_INSS_PRINC
    ,MAX(TAB.NUPROCESSO_INSS_15) AS NUPROCESSO_INSS_15
    ,MAX(TAB.SEQPROCESSO_INSS_15) AS SEQPROCESSO_INSS_15
    ,TRUNC(SUM(CASE WHEN TAB.VLRSERVICOS15 > 0 THEN TAB.VLRADICIONAL * NVL(ISET_INSS_15.PERCSUSPIMP, 0) / 100 ELSE 0 END), 2) AS VLRNRETADIC15
    ,MAX(TAB.NUPROCESSO_INSS_20) AS NUPROCESSO_INSS_20
    ,MAX(TAB.SEQPROCESSO_INSS_20) AS SEQPROCESSO_INSS_20
    ,TRUNC(SUM(CASE WHEN TAB.VLRSERVICOS20 > 0 THEN TAB.VLRADICIONAL * NVL(ISET_INSS_20.PERCSUSPIMP, 0) / 100 ELSE 0 END), 2) AS VLRNRETADIC20
    ,MAX(TAB.NUPROCESSO_INSS_25) AS NUPROCESSO_INSS_25
    ,MAX(TAB.SEQPROCESSO_INSS_25) AS SEQPROCESSO_INSS_25
    ,TRUNC(SUM(CASE WHEN TAB.VLRSERVICOS25 > 0 THEN TAB.VLRADICIONAL * NVL(ISET_INSS_25.PERCSUSPIMP, 0) / 100 ELSE 0 END), 2) AS VLRNRETADIC25
    FROM (
        SELECT 
         CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMP.CODEMP
              WHEN NVL(EMP.CODEMPMATRIZEFD, 0) > 0 THEN EMP.CODEMPMATRIZEFD
              ELSE EMP.CODEMP 
         END AS CODEMP
        ,TRUNC(CAB.DTNEG, 'MM') AS DTREF
        ,CASE WHEN LENGTH(EMPC.CGC) = 14 
              THEN '1' 
              ELSE '2' 
         END AS TPINSC
        ,CASE WHEN LENGTH(EMPC.CGC) = 14 
              THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
                        THEN EMPC.CGC
                        ELSE SUBSTR(EMPC.CGC,1,8)
                   END
              ELSE EMPC.CGC
         END AS NRINSC
        ,1 AS TPINSCESTABPREST
        ,EMPC.CGC AS NRINSCESTABPREST
        ,ITE.NUNOTA AS NUNOTA
        ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN 4 ELSE 1 END AS TPINSCTOMADOR
        ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN CAB.CODOBRA ELSE PAR.CGC_CPF END AS NRINSCTOMADOR
        ,CASE WHEN PRO.OBRACONSTCIVIL IS NULL THEN 0 ELSE PRO.OBRACONSTCIVIL END AS INDOBRA
        ,PRO.CLASSIFCESSAOOBRA AS TPSERVICO
        ,ITE.VLRTOT AS VLRTOTALBRUTO
        ,NVL(DIN.BASERED, IMN.BASE) AS VLRBASERET
        ,CASE WHEN DIN.NUNOTA IS NOT NULL THEN CASE WHEN NVL(DIN.TIPOINSSESPECIAL, ' ') <> ' ' THEN NVL(DIN.VALOR, 0) - NVL(DIN.VLRINSSESPECIAL, 0) ELSE NVL(DIN.VALOR, 0) END
              ELSE CASE WHEN NVL(IMN.TIPOINSSESPECIAL, ' ') <> ' ' THEN NVL(IMN.VALOR, 0) - NVL(IMN.VLRINSSESPECIAL, 0) ELSE NVL(IMN.VALOR, 0) END END AS VLRRETENCAO
        ,0 AS VLRRETSUB /*Por enquanto não vamos gerar essa tag*/
        ,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, ' ') = '1' AND NVL(DIN.VLRINSSESPECIAL, 0) > 0 OR
                   NVL(IMN.TIPOINSSESPECIAL, ' ') = '1' AND NVL(IMN.VLRINSSESPECIAL, 0) > 0 THEN ITE.VLRTOT ELSE 0 END AS VLRSERVICOS15
        ,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, ' ') = '2' AND NVL(DIN.VLRINSSESPECIAL, 0) > 0 OR
                   NVL(IMN.TIPOINSSESPECIAL, ' ') = '2' AND NVL(IMN.VLRINSSESPECIAL, 0) > 0 THEN ITE.VLRTOT ELSE 0 END AS VLRSERVICOS20
        ,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, ' ') = '3' AND NVL(DIN.VLRINSSESPECIAL, 0) > 0 OR
                   NVL(IMN.TIPOINSSESPECIAL, ' ') = '3' AND NVL(IMN.VLRINSSESPECIAL, 0) > 0 THEN ITE.VLRTOT ELSE 0 END AS VLRSERVICOS25
        ,NVL(DIN.VLRINSSESPECIAL, NVL(IMN.VLRINSSESPECIAL, 0)) AS VLRADICIONAL
        ,SNK_GET_IDPROCESSO_IMP_EFD(1, 
                                    EMP.CODEMP, 
                                    PAR.CODPARC, 
                                    ITE.CODPROD, 
                                    PRO.CODLST, 
                                    CAB.DTNEG) AS NUPROCESSO_INSS_PRINC
        ,SNK_GET_IDPROCESSO_IMP_EFD(1, 
                                    EMP.CODEMP, 
                                    PAR.CODPARC, 
                                    ITE.CODPROD, 
                                    PRO.CODLST, 
                                    CAB.DTNEG,
                                    'S') AS SEQPROCESSO_INSS_PRINC
        ,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, IMN.TIPOINSSESPECIAL) = '1' THEN SNK_GET_IDPROCESSO_IMP_EFD(9, 
                                                                                                         EMP.CODEMP, 
                                                                                                         PAR.CODPARC, 
                                                                                                         ITE.CODPROD, 
                                                                                                         PRO.CODLST, 
                                                                                                         CAB.DTNEG) 
              ELSE NULL END AS NUPROCESSO_INSS_15
        ,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, IMN.TIPOINSSESPECIAL) = '1' THEN SNK_GET_IDPROCESSO_IMP_EFD(9, 
                                                                                                         EMP.CODEMP, 
                                                                                                         PAR.CODPARC, 
                                                                                                         ITE.CODPROD, 
                                                                                                         PRO.CODLST, 
                                                                                                         CAB.DTNEG,
                                                                                                         'S')
              ELSE NULL END AS SEQPROCESSO_INSS_15
        ,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, IMN.TIPOINSSESPECIAL) = '2' THEN SNK_GET_IDPROCESSO_IMP_EFD(10, 
                                                                                                         EMP.CODEMP, 
                                                                                                         PAR.CODPARC, 
                                                                                                         ITE.CODPROD, 
                                                                                                         PRO.CODLST, 
                                                                                                         CAB.DTNEG)
              ELSE NULL END AS NUPROCESSO_INSS_20
        ,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, IMN.TIPOINSSESPECIAL) = '2' THEN SNK_GET_IDPROCESSO_IMP_EFD(10, 
                                                                                                         EMP.CODEMP, 
                                                                                                         PAR.CODPARC, 
                                                                                                         ITE.CODPROD, 
                                                                                                         PRO.CODLST, 
                                                                                                         CAB.DTNEG,
                                                                                                         'S')
              ELSE NULL END AS SEQPROCESSO_INSS_20
        ,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, IMN.TIPOINSSESPECIAL) = '3' THEN SNK_GET_IDPROCESSO_IMP_EFD(11, 
                                                                                                         EMP.CODEMP, 
                                                                                                         PAR.CODPARC, 
                                                                                                         ITE.CODPROD, 
                                                                                                         PRO.CODLST, 
                                                                                                         CAB.DTNEG)
              ELSE NULL END AS NUPROCESSO_INSS_25
        ,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, IMN.TIPOINSSESPECIAL) = '3' THEN SNK_GET_IDPROCESSO_IMP_EFD(11, 
                                                                                                         EMP.CODEMP, 
                                                                                                         PAR.CODPARC, 
                                                                                                         ITE.CODPROD, 
                                                                                                          PRO.CODLST, 
                                                                                                          CAB.DTNEG,
                                                                                                         'S')
              ELSE NULL END AS SEQPROCESSO_INSS_25
        FROM TGFITE ITE
            INNER JOIN TGFCAB CAB  ON CAB.NUNOTA = ITE.NUNOTA
            INNER JOIN (SELECT CODTIPOPER, DHALTER, TIPMOV, ATUALLIVISS, DESCROPER FROM TGFTOP) TPO  ON TPO.CODTIPOPER = CAB.CODTIPOPER AND TPO.DHALTER = CAB.DHTIPOPER
            INNER JOIN (SELECT CODEMP, CODEMPMATRIZEFD, EMPADMPUBDIR, ATIVO FROM TGFEMP) EMP  ON EMP.CODEMP = CAB.CODEMP
            INNER JOIN (SELECT CODEMP, RAZAOSOCIAL, NOMEFANTASIA, CGC FROM TSIEMP) EMPC ON EMPC.CODEMP = EMP.CODEMP
            INNER JOIN (SELECT CODPARC, NOMEPARC, CGC_CPF FROM TGFPAR) PAR  ON PAR.CODPARC = CAB.CODPARC
            INNER JOIN (SELECT CODPROD, OBRACONSTCIVIL, CLASSIFCESSAOOBRA, CODLST FROM TGFPRO) PRO  ON PRO.CODPROD = ITE.CODPROD
            LEFT JOIN  TGFDIN DIN  ON DIN.NUNOTA = ITE.NUNOTA AND DIN.SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 5 AND DIN.TIPO = -1 AND ((DIN.ALIQUOTA - DIN.PERCINSSESPECIAL) IN (3.5, 11))
            LEFT JOIN  TGFIMN IMN  ON IMN.NUNOTA = ITE.NUNOTA AND IMN.SEQUENCIA = ITE.SEQUENCIA AND IMN.TIPOIMPOSTO = 5 AND IMN.TIPIMP = -1 AND ((IMN.ALIQUOTA - IMN.PERCINSSESPECIAL) IN (3.5, 11))
        WHERE EMP.ATIVO = 'S'
            AND PRO.CLASSIFCESSAOOBRA IS NOT NULL
            AND ITE.USOPROD = 'S'
            AND TPO.TIPMOV = 'V'
            AND TPO.ATUALLIVISS = 'S'
            AND CAB.STATUSNOTA = 'L'
            AND (EXISTS (SELECT 1 FROM TGFDIN WHERE NUNOTA = ITE.NUNOTA AND SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 5 AND DIN.TIPO = -1 AND ((DIN.ALIQUOTA - DIN.PERCINSSESPECIAL) IN (3.5, 11))) OR 
                 EXISTS (SELECT 1 FROM TGFIMN WHERE NUNOTA = ITE.NUNOTA AND SEQUENCIA = ITE.SEQUENCIA AND IMN.TIPOIMPOSTO = 5 AND IMN.TIPIMP = -1 AND ((IMN.ALIQUOTA - IMN.PERCINSSESPECIAL) IN (3.5, 11))))
    ) TAB
        LEFT JOIN  TRIPISET ISET_INSS_PRINC ON ISET_INSS_PRINC.NUPROCESSO = NUPROCESSO_INSS_PRINC AND ISET_INSS_PRINC.SEQUENCIA = SEQPROCESSO_INSS_PRINC
        LEFT JOIN  TRIPISET ISET_INSS_15 ON ISET_INSS_15.NUPROCESSO = NUPROCESSO_INSS_15 AND ISET_INSS_15.SEQUENCIA = SEQPROCESSO_INSS_15
        LEFT JOIN  TRIPISET ISET_INSS_20 ON ISET_INSS_20.NUPROCESSO = NUPROCESSO_INSS_20 AND ISET_INSS_20.SEQUENCIA = SEQPROCESSO_INSS_20
        LEFT JOIN  TRIPISET ISET_INSS_25 ON ISET_INSS_25.NUPROCESSO = NUPROCESSO_INSS_25 AND ISET_INSS_25.SEQUENCIA = SEQPROCESSO_INSS_25
    GROUP BY
     TAB.CODEMP
    ,TAB.DTREF
    ,TAB.TPINSC
    ,TAB.NRINSC
    ,TAB.TPINSCESTABPREST
    ,TAB.NRINSCESTABPREST
    ,TAB.NUNOTA
    ,TAB.TPINSCTOMADOR
    ,TAB.NRINSCTOMADOR
    ,TAB.INDOBRA
    ,TAB.TPSERVICO
) TABX
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53436-0-0
Nro. O.S. : 1148508
Nome      : Altera - VRI_EVT_R2050
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VRI_EVT_R2050
NomeObjeto: VRI_EVT_R2050
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2050
AS
SELECT 
 TPCO.CODEMP
,TPCO.DTREF
,TPCO.TPAMB
,TPCO.SEQUENCIA
,TPCO.CHAVE
,TPCO.TPINSC
,TPCO.NRINSC
,TPCO.TPINSCESTAB
,TPCO.NRINSCESTAB
,SUM(TPCO.VLRRECBRUTA) AS VLRRECBRUTATOTAL
,SUM(TPCO.VLRCPAPUR) AS VLRCPAPUR
,SUM(TPCO.VLRRATAPUR) AS VLRRATAPUR 
,SUM(TPCO.VLRSENARAPUR) AS VLRSENARAPUR
,SUM(TPCO.VLRCPSUSP) AS VLRCPSUSPTOTAL
,SUM(TPCO.VLRRATSUSP) AS VLRRATSUSPTOTAL
,SUM(TPCO.VLRSENARSUSP) AS VLRSENARSUSPTOTAL
,CASE WHEN NVL(CPPR.CONTROLE, ' ') = 'I' AND NVL(CPPR.STATUSREG, ' ') = 'F' THEN CPPR.VLRCPAPURRET ELSE NULL END AS VLRCPAPURRET
,CASE WHEN NVL(CPPR.CONTROLE, ' ') = 'I' AND NVL(CPPR.STATUSREG, ' ') = 'F' THEN CPPR.VLRRATAPURRET ELSE NULL END AS VLRRATAPURRET
,CASE WHEN NVL(CPPR.CONTROLE, ' ') = 'I' AND NVL(CPPR.STATUSREG, ' ') = 'F' THEN CPPR.VLRSENARAPURRET ELSE NULL END AS VLRSENARAPURRET
,CASE WHEN NVL(CPPR.CONTROLE, ' ') = 'I' AND NVL(CPPR.STATUSREG, ' ') = 'F' THEN CPPR.VLRCPSUSPTOTALRET ELSE NULL END AS VLRCPSUSPTOTALRET
,CASE WHEN NVL(CPPR.CONTROLE, ' ') = 'I' AND NVL(CPPR.STATUSREG, ' ') = 'F' THEN CPPR.VLRRATSUSPTOTALRET ELSE NULL END AS VLRRATSUSPTOTALRET
,CASE WHEN NVL(CPPR.CONTROLE, ' ') = 'I' AND NVL(CPPR.STATUSREG, ' ') = 'F' THEN CPPR.VLRSENARSUSPTOTALRET ELSE NULL END AS VLRSENARSUSPTOTALRET
FROM TRITPCO TPCO
    LEFT JOIN TRICPPR CPPR ON CPPR.CODEMP = TPCO.CODEMP
                          AND CPPR.DTREF = TPCO.DTREF
                          AND CPPR.TPAMB = TPCO.TPAMB
                          AND CPPR.SEQUENCIA = (TPCO.SEQUENCIA - 1)
                          AND CPPR.CHAVE = TPCO.CHAVE
GROUP BY 
 TPCO.CODEMP
,TPCO.DTREF
,TPCO.TPAMB
,TPCO.SEQUENCIA
,TPCO.CHAVE
,TPCO.TPINSC
,TPCO.NRINSC
,TPCO.TPINSCESTAB
,TPCO.NRINSCESTAB
,CASE WHEN NVL(CPPR.CONTROLE, ' ') = 'I' AND NVL(CPPR.STATUSREG, ' ') = 'F' THEN CPPR.VLRCPAPURRET ELSE NULL END
,CASE WHEN NVL(CPPR.CONTROLE, ' ') = 'I' AND NVL(CPPR.STATUSREG, ' ') = 'F' THEN CPPR.VLRRATAPURRET ELSE NULL END
,CASE WHEN NVL(CPPR.CONTROLE, ' ') = 'I' AND NVL(CPPR.STATUSREG, ' ') = 'F' THEN CPPR.VLRSENARAPURRET ELSE NULL END
,CASE WHEN NVL(CPPR.CONTROLE, ' ') = 'I' AND NVL(CPPR.STATUSREG, ' ') = 'F' THEN CPPR.VLRCPSUSPTOTALRET ELSE NULL END
,CASE WHEN NVL(CPPR.CONTROLE, ' ') = 'I' AND NVL(CPPR.STATUSREG, ' ') = 'F' THEN CPPR.VLRRATSUSPTOTALRET ELSE NULL END
,CASE WHEN NVL(CPPR.CONTROLE, ' ') = 'I' AND NVL(CPPR.STATUSREG, ' ') = 'F' THEN CPPR.VLRSENARSUSPTOTALRET ELSE NULL END
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53437-0-0
Nro. O.S. : 1148508
Nome      : Altera - VRI_EVT_R2050_INFOPROC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VRI_EVT_R2050_INFOPROC
NomeObjeto: VRI_EVT_R2050_INFOPROC
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2050_INFOPROC
AS
SELECT
 TAB.CODEMP
,TAB.DTREF
,TAB.TPAMB
,TAB.SEQUENCIA
,TAB.CHAVE
,TAB.INDCOM
,TAB.NUPROCESSO AS CHAVEPROCESSO
,TAB.NUPROCESSO
,TAB.SEQPROCESSO
,PAJ.TIPO AS TPPROC
,PAJ.NUMPROCESSO AS NRPROC
,TAB.CODSUSP
,SUM(CASE WHEN TAB.TIPIMPOSTO = 1 THEN TAB.VALOR ELSE 0 END) AS VLRCPSUSP
,SUM(CASE WHEN TAB.TIPIMPOSTO = 3 THEN TAB.VALOR ELSE 0 END) AS VLRSENARSUSP
,SUM(CASE WHEN TAB.TIPIMPOSTO = 4 THEN TAB.VALOR ELSE 0 END) AS VLRRATSUSP
FROM (
    SELECT
     NFPR.CODEMP
    ,NFPR.DTREF
    ,NFPR.TPAMB
    ,NFPR.SEQUENCIA
    ,NFPR.CHAVE
    ,NFPR.INDCOM
    ,ISET_INSS.NUPROCESSO
    ,ISET_INSS.SEQUENCIA AS SEQPROCESSO
    ,1 AS TIPIMPOSTO
    ,ISET_INSS.CODSUSP
    ,NFPR.VLRCPSUSP AS VALOR
    FROM TRINFPR NFPR
        INNER JOIN TRIPISET ISET_INSS ON ISET_INSS.NUPROCESSO = NFPR.NUPROCESSO_INSS AND ISET_INSS.SEQUENCIA = NFPR.SEQPROCESSO_INSS
    UNION
    SELECT
     NFPR.CODEMP
    ,NFPR.DTREF
    ,NFPR.TPAMB
    ,NFPR.SEQUENCIA
    ,NFPR.CHAVE
    ,NFPR.INDCOM    
    ,ISET_SENAR.NUPROCESSO
    ,ISET_SENAR.SEQUENCIA AS SEQPROCESSO
    ,3 AS TIPIMPOSTO
    ,ISET_SENAR.CODSUSP
    ,NFPR.VLRSENARSUSP AS VALOR
    FROM TRINFPR NFPR
        INNER JOIN TRIPISET ISET_SENAR ON ISET_SENAR.NUPROCESSO = NFPR.NUPROCESSO_SENAR AND ISET_SENAR.SEQUENCIA = NFPR.SEQPROCESSO_SENAR
    UNION
    SELECT  
     NFPR.CODEMP
    ,NFPR.DTREF
    ,NFPR.TPAMB
    ,NFPR.SEQUENCIA
    ,NFPR.CHAVE
    ,NFPR.INDCOM    
    ,ISET_GILRAT.NUPROCESSO
    ,ISET_GILRAT.SEQUENCIA AS SEQPROCESSO
    ,4 AS TIPIMPOSTO
    ,ISET_GILRAT.CODSUSP 
    ,NFPR.VLRRATSUSP AS VALOR
    FROM TRINFPR NFPR
        INNER JOIN TRIPISET ISET_GILRAT ON ISET_GILRAT.NUPROCESSO = NFPR.NUPROCESSO_GILRAT AND ISET_GILRAT.SEQUENCIA = NFPR.SEQPROCESSO_GILRAT
) TAB
    INNER JOIN TRIPAJ PAJ ON PAJ.NUPROCESSO = TAB.NUPROCESSO
GROUP BY 
 TAB.CODEMP
,TAB.DTREF
,TAB.TPAMB
,TAB.SEQUENCIA
,TAB.CHAVE
,TAB.INDCOM
,TAB.NUPROCESSO
,TAB.SEQPROCESSO
,PAJ.TIPO
,PAJ.NUMPROCESSO
,TAB.CODSUSP
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53438-0-0
Nro. O.S. : 1148508
Nome      : Altera - VRI_EVT_R2050_TIPOCOM
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VRI_EVT_R2050_TIPOCOM
NomeObjeto: VRI_EVT_R2050_TIPOCOM
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2050_TIPOCOM
AS 
SELECT 
 NFPR.CODEMP
,NFPR.DTREF
,NFPR.TPAMB
,NFPR.SEQUENCIA
,NFPR.CHAVE
,NFPR.TPINSC
,NFPR.NRINSC
,NFPR.TPINSCESTAB
,NFPR.NRINSCESTAB
,NFPR.INDCOM
,SUM(NFPR.VLRRECBRUTA) AS VLRRECBRUTA
,SUM(NFPR.VLRCPAPUR) AS VLRCPAPUR
,SUM(NFPR.VLRRATAPUR) AS VLRRATAPUR
,SUM(NFPR.VLRSENARAPUR) AS VLRSENARAPUR
,SUM(NFPR.VLRCPSUSP) AS VLRCPSUSP
,SUM(NFPR.VLRRATSUSP) AS VLRRATSUSP
,SUM(NFPR.VLRSENARSUSP) AS VLRSENARSUSP    
FROM TRINFPR NFPR
GROUP BY 
 NFPR.CODEMP
,NFPR.DTREF
,NFPR.TPAMB
,NFPR.SEQUENCIA
,NFPR.CHAVE
,NFPR.TPINSC
,NFPR.NRINSC
,NFPR.TPINSCESTAB
,NFPR.NRINSCESTAB
,NFPR.INDCOM
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53439-0-0
Nro. O.S. : 1148508
Nome      : Altera - VRI_EVT_R2050_NFS
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VRI_EVT_R2050_NFS
NomeObjeto: VRI_EVT_R2050_NFS
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2050_NFS 
AS
SELECT 
 TAB.CODEMP
,TAB.DTREF
,TAB.TPINSC||','||TAB.NRINSC||','||TAB.TPINSCESTAB||','||TAB.NRINSCESTAB AS CHAVE
,TAB.TPINSC
,TAB.NRINSC
,TAB.TPINSCESTAB
,TAB.NRINSCESTAB
,TAB.INDCOM
,TAB.NUNOTA
,TRUNC(SUM(TAB.VLRRECBRUTA), 2) AS VLRRECBRUTA
,TRUNC(SUM(TAB.VLRCPAPUR), 2) AS VLRCPAPUR
,TRUNC(SUM(TAB.VLRRATAPUR), 2) AS VLRRATAPUR
,TRUNC(SUM(TAB.VLRSENARAPUR), 2) AS VLRSENARAPUR    
,MAX(TAB.NUPROCESSO_INSS) AS NUPROCESSO_INSS
,MAX(TAB.SEQPROCESSO_INSS) AS SEQPROCESSO_INSS
,TRUNC(SUM(TAB.VLRCPAPUR * NVL(ISET_INSS.PERCSUSPIMP, 0) / 100), 2) AS VLRCPSUSP
,MAX(TAB.NUPROCESSO_SENAR) AS NUPROCESSO_SENAR
,MAX(TAB.SEQPROCESSO_SENAR) AS SEQPROCESSO_SENAR
,TRUNC(SUM(TAB.VLRSENARAPUR * NVL(ISET_SENAR.PERCSUSPIMP, 0) / 100), 2) AS VLRSENARSUSP
,MAX(TAB.NUPROCESSO_GILRAT) AS NUPROCESSO_GILRAT
,MAX(TAB.SEQPROCESSO_GILRAT) AS SEQPROCESSO_GILRAT 
,TRUNC(SUM(TAB.VLRRATAPUR * NVL(ISET_GILRAT.PERCSUSPIMP, 0) / 100), 2) AS VLRRATSUSP
FROM (    
    SELECT 
     CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMP.CODEMP
          WHEN NVL(EMP.CODEMPMATRIZEFD, 0) > 0 THEN EMP.CODEMPMATRIZEFD
          ELSE EMP.CODEMP 
     END AS CODEMP
    ,TRUNC(CAB.DTNEG, 'MM') AS DTREF
    ,CASE WHEN LENGTH(EMPC.CGC) = 14 
          THEN '1' 
          ELSE '2' 
     END AS TPINSC
    ,CASE WHEN LENGTH(EMPC.CGC) = 14 
          THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
                    THEN EMPC.CGC
                    ELSE SUBSTR(EMPC.CGC,1,8)
               END
          ELSE EMPC.CGC
     END AS NRINSC
    ,1 AS TPINSCESTAB
    ,EMPC.CGC AS NRINSCESTAB
    ,PAR.INDCOMERCIALIZACAO AS INDCOM
    ,CAB.NUNOTA
    ,ITE.VLRTOT AS VLRRECBRUTA
    ,NVL(DIN.VALOR, NVL(IMN.VALOR, 0)) AS VLRCPAPUR
    ,0 AS VLRRATAPUR /*Posteriormente iremos atrás dessas regras*/
    ,0 AS VLRSENARAPUR /*Posteriormente iremos atrás dessas regras*/
    ,SNK_GET_IDPROCESSO_IMP_EFD(1, 
                                EMP.CODEMP, 
                                PAR.CODPARC, 
                                ITE.CODPROD, 
                                PRO.CODLST, 
                                CAB.DTNEG) AS NUPROCESSO_INSS
    ,SNK_GET_IDPROCESSO_IMP_EFD(1, 
                                EMP.CODEMP, 
                                PAR.CODPARC, 
                                ITE.CODPROD, 
                                PRO.CODLST, 
                                CAB.DTNEG,
                                'S') AS SEQPROCESSO_INSS
    ,NULL /*SNK_GET_IDPROCESSO_IMP_EFD(3, 
                                EMP.CODEMP, 
                                PAR.CODPARC, 
                                ITE.CODPROD, 
                                PRO.CODLST, 
                                CAB.DTNEG)*/ AS NUPROCESSO_SENAR
    ,NULL /*SNK_GET_IDPROCESSO_IMP_EFD(3, 
                                EMP.CODEMP, 
                                PAR.CODPARC, 
                                ITE.CODPROD, 
                                PRO.CODLST, 
                                CAB.DTNEG,
                                'S')*/ AS SEQPROCESSO_SENAR
    ,NULL /*SNK_GET_IDPROCESSO_IMP_EFD(4, 
                                EMP.CODEMP, 
                                PAR.CODPARC, 
                                ITE.CODPROD, 
                                PRO.CODLST, 
                                CAB.DTNEG)*/ AS NUPROCESSO_GILRAT
    ,NULL /*SNK_GET_IDPROCESSO_IMP_EFD(4, 
                                EMP.CODEMP, 
                                PAR.CODPARC, 
                                ITE.CODPROD, 
                                PRO.CODLST, 
                                CAB.DTNEG,
                                'S')*/ AS SEQPROCESSO_GILRAT
    FROM TGFITE ITE
        INNER JOIN TGFCAB CAB  ON CAB.NUNOTA = ITE.NUNOTA
        INNER JOIN (SELECT CODTIPOPER, DHALTER, DESCROPER, TIPMOV, CODMODDOC FROM TGFTOP) TPO  ON TPO.CODTIPOPER = CAB.CODTIPOPER AND TPO.DHALTER = CAB.DHTIPOPER
        INNER JOIN (SELECT CODEMP, CODEMPMATRIZEFD, EMPADMPUBDIR, ATIVO FROM TGFEMP) EMP  ON EMP.CODEMP = CAB.CODEMP
        INNER JOIN (SELECT CODEMP, RAZAOSOCIAL, NOMEFANTASIA, CGC FROM TSIEMP) EMPC ON EMPC.CODEMP = EMP.CODEMP
        INNER JOIN (SELECT CODPARC, NOMEPARC, INDCOMERCIALIZACAO FROM TGFPAR) PAR  ON PAR.CODPARC = CAB.CODPARC
        INNER JOIN (SELECT CODPROD, DESCRPROD, CODLST, COMERCIALIZACAOAGRI FROM TGFPRO) PRO  ON PRO.CODPROD = ITE.CODPROD
        LEFT JOIN  TGFDIN DIN  ON DIN.NUNOTA = ITE.NUNOTA AND DIN.SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 5
        LEFT JOIN  TGFIMN IMN  ON IMN.NUNOTA = ITE.NUNOTA AND IMN.SEQUENCIA = ITE.SEQUENCIA AND IMN.TIPOIMPOSTO = 5
    WHERE EMP.ATIVO = 'S'
        AND NVL(PAR.INDCOMERCIALIZACAO, '0') IN ('1', '8', '9')
        AND NVL(PRO.COMERCIALIZACAOAGRI, 'N') = 'S'
        AND TPO.TIPMOV = 'V'
        AND CAB.STATUSNOTA = 'L' 
        AND TPO.CODMODDOC = 55
        AND CAB.STATUSNFE = 'A'
        AND (EXISTS (SELECT 1 FROM TGFDIN WHERE NUNOTA = ITE.NUNOTA AND SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 5) OR 
             EXISTS (SELECT 1 FROM TGFIMN WHERE NUNOTA = ITE.NUNOTA AND SEQUENCIA = ITE.SEQUENCIA AND IMN.TIPOIMPOSTO = 5))
) TAB
    LEFT JOIN TRIPISET ISET_INSS ON ISET_INSS.NUPROCESSO = NUPROCESSO_INSS AND ISET_INSS.SEQUENCIA = SEQPROCESSO_INSS
    LEFT JOIN TRIPISET ISET_SENAR ON ISET_SENAR.NUPROCESSO = NUPROCESSO_SENAR AND ISET_SENAR.SEQUENCIA = SEQPROCESSO_SENAR
    LEFT JOIN TRIPISET ISET_GILRAT ON ISET_GILRAT.NUPROCESSO = NUPROCESSO_GILRAT AND ISET_GILRAT.SEQUENCIA = SEQPROCESSO_GILRAT
GROUP BY  
 TAB.CODEMP
,TAB.DTREF
,TAB.TPINSC
,TAB.NRINSC
,TAB.TPINSCESTAB
,TAB.NRINSCESTAB
,TAB.INDCOM
,TAB.NUNOTA
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53440-0-0
Nro. O.S. : 1148508
Nome      : Altera - VRI_EVT_R2060
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VRI_EVT_R2060
NomeObjeto: VRI_EVT_R2060
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2060
AS
SELECT 
 TCAE.CODEMP
,TCAE.DTREF
,TCAE.CHAVE
,TCAE.TPAMB
,TCAE.SEQUENCIA
,TCAE.TPINSC
,TCAE.NRINSC
,TCAE.TPINSCESTAB
,TCAE.NRINSCESTAB
,SUM(TCAE.VLRRECBRUTAATIV) AS VLRRECBRUTATOTAL
,SUM(TCAE.VLRCPRBAPUR) AS VLRCPAPURTOTAL
,SUM(TCAE.VLRCPRBSUSP) AS VLRCPRBSUSPTOTAL
,CASE WHEN NVL(CPRB.CONTROLE, ' ') = 'I' AND NVL(CPRB.STATUSREG, ' ') = 'F' THEN CPRB.CODRECEITA ELSE NULL END AS CODRECEITA
,CASE WHEN NVL(CPRB.CONTROLE, ' ') = 'I' AND NVL(CPRB.STATUSREG, ' ') = 'F' THEN CPRB.VLRCPAPURTOTALRET ELSE NULL END AS VLRCPAPURTOTALRET
,CASE WHEN NVL(CPRB.CONTROLE, ' ') = 'I' AND NVL(CPRB.STATUSREG, ' ') = 'F' THEN CPRB.VLRCPRBSUSPTOTALRET ELSE NULL END AS VLRCPRBSUSPTOTALRET 
FROM TRITCAE TCAE
    LEFT JOIN TRICPRB CPRB ON CPRB.CODEMP = TCAE.CODEMP
                          AND CPRB.DTREF = TCAE.DTREF
                          AND CPRB.TPAMB = TCAE.TPAMB
                          AND CPRB.SEQUENCIA = (TCAE.SEQUENCIA - 1)
                          AND CPRB.CHAVE = TCAE.CHAVE
GROUP BY 
 TCAE.CODEMP
,TCAE.DTREF
,TCAE.TPAMB
,TCAE.SEQUENCIA
,TCAE.CHAVE
,TCAE.TPINSC
,TCAE.NRINSC
,TCAE.TPINSCESTAB
,TCAE.NRINSCESTAB
,CASE WHEN NVL(CPRB.CONTROLE, ' ') = 'I' AND NVL(CPRB.STATUSREG, ' ') = 'F' THEN CPRB.CODRECEITA ELSE NULL END
,CASE WHEN NVL(CPRB.CONTROLE, ' ') = 'I' AND NVL(CPRB.STATUSREG, ' ') = 'F' THEN CPRB.VLRCPAPURTOTALRET ELSE NULL END
,CASE WHEN NVL(CPRB.CONTROLE, ' ') = 'I' AND NVL(CPRB.STATUSREG, ' ') = 'F' THEN CPRB.VLRCPRBSUSPTOTALRET ELSE NULL END
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53441-0-0
Nro. O.S. : 1148508
Nome      : Altera - VRI_EVT_R2060_TIPOCOD
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VRI_EVT_R2060_TIPOCOD
NomeObjeto: VRI_EVT_R2060_TIPOCOD
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2060_TIPOCOD
AS
SELECT 
 NFRB.CODEMP
,NFRB.DTREF
,NFRB.TPAMB
,NFRB.SEQUENCIA
,NFRB.CHAVE
,NFRB.TPINSC
,NFRB.NRINSC
,NFRB.TPINSCESTAB
,NFRB.NRINSCESTAB
,NFRB.CODATIVECON
,SUM(NFRB.VLRRECEITABRUTAATIV) AS VLRRECBRUTAATIV
,SUM(NFRB.VLREXCRECBRUTA) AS VLREXCRECBRUTA
,0 AS VLRADICRECBRUTA /*Não iremos gerar esta tag*/
,SUM(NFRB.VLRBCCPRB) AS VLRBCCPRB
,SUM(NFRB.VLRCPRBAPUR) AS VLRCPRBAPUR
,SUM(NFRB.VLRCPRBSUSP) AS VLRCPRBSUSP
FROM TRINFRB NFRB
GROUP BY 
 NFRB.CODEMP
,NFRB.DTREF
,NFRB.TPAMB
,NFRB.SEQUENCIA
,NFRB.CHAVE
,NFRB.TPINSC
,NFRB.NRINSC
,NFRB.TPINSCESTAB
,NFRB.NRINSCESTAB
,NFRB.CODATIVECON
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53442-0-0
Nro. O.S. : 1148508
Nome      : Altera - VRI_EVT_R2060_INFOPROC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VRI_EVT_R2060_INFOPROC
NomeObjeto: VRI_EVT_R2060_INFOPROC
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2060_INFOPROC
AS
SELECT  
 NFRB.CODEMP
,NFRB.DTREF
,NFRB.TPAMB
,NFRB.SEQUENCIA
,NFRB.CHAVE
,NFRB.CODATIVECON
,ISET_INSS.NUPROCESSO AS CHAVEPROCESSO
,ISET_INSS.NUPROCESSO
,ISET_INSS.SEQUENCIA AS SEQPROCESSO
,PAJ.TIPO AS TPPROC
,PAJ.NUMPROCESSO AS NRPROC
,ISET_INSS.CODSUSP AS CODSUSP
,SUM(NFRB.VLRCPRBSUSP) AS VLRCPRBSUSP
FROM TRINFRB NFRB
    INNER JOIN TRIPAJ PAJ ON PAJ.NUPROCESSO = NFRB.NUPROCESSO_INSS
    INNER JOIN TRIPISET ISET_INSS ON ISET_INSS.NUPROCESSO = NFRB.NUPROCESSO_INSS AND ISET_INSS.SEQUENCIA = NFRB.SEQPROCESSO_INSS
GROUP BY
 NFRB.CODEMP
,NFRB.DTREF
,NFRB.TPAMB
,NFRB.SEQUENCIA
,NFRB.CHAVE
,NFRB.CODATIVECON
,ISET_INSS.NUPROCESSO
,ISET_INSS.SEQUENCIA
,PAJ.TIPO
,PAJ.NUMPROCESSO
,ISET_INSS.CODSUSP
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53443-0-0
Nro. O.S. : 1148508
Nome      : Altera - VRI_EVT_R2060_NFS
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VRI_EVT_R2060_NFS
NomeObjeto: VRI_EVT_R2060_NFS
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2060_NFS
AS
SELECT 
 TABX.CODEMP
,TABX.DTREF
,TABX.TPINSC
,TABX.NRINSC
,TABX.TPINSCESTAB
,TABX.NRINSCESTAB
,TABX.TPINSC||','||TABX.NRINSC||','||TABX.TPINSCESTAB||','||TABX.NRINSCESTAB AS CHAVE
,CASE WHEN LENGTH(CAST(TABX.CODATIVECON AS VARCHAR(10))) > 8 THEN SUBSTR(CAST(TABX.CODATIVECON AS VARCHAR(10)), 1, 8) 
      ELSE CAST(TABX.CODATIVECON AS VARCHAR(10)) 
 END AS CODATIVECON
,TABX.NUNOTA
,TABX.NUPROCESSO_INSS
,TABX.SEQPROCESSO_INSS
,MAX(TABX.CODREC) AS CODRECOLHIMENTO
,TRUNC(SUM(TABX.VLRRECEITABRUTAESTAB), 2) AS VLRRECEITABRUTAESTAB
,TRUNC(SUM(TABX.VLRRECEITABRUTAATIV), 2) AS VLRRECEITABRUTAATIV
,TRUNC(SUM(TABX.VLRABATIMENTOBRUTOATIV), 2) AS VLRABATIMENTOBRUTOATIV
,TRUNC(SUM(TABX.VLREXCLUSAOBRUTAATIV), 2) AS VLREXCLUSAOBRUTAATIV
,TRUNC(SUM(TABX.VLREXCRECBRUTA), 2) AS VLREXCRECBRUTA
,TRUNC(SUM(TABX.VLRCPRBAPUR), 2) AS VLRCPRBAPUR
,TRUNC(SUM(TABX.VLRBCCPRB), 2) AS VLRBCCPRB
,TRUNC(SUM(TABX.VLRCPRBAPUR * NVL(ISET_INSS.PERCSUSPIMP, 0) / 100), 2) AS VLRCPRBSUSP
FROM (
    SELECT 
     TAB.CODEMP
    ,TAB.DTREF
    ,TAB.TPINSC
    ,TAB.NRINSC
    ,TAB.TPINSCESTAB
    ,TAB.NRINSCESTAB
    ,CASE WHEN NVL(TAB.ENQREINTEGRA, 'N') = 'S' THEN CASE WHEN TAB.CODATIVREINTEGRA IS NOT NULL THEN TAB.CODATIVREINTEGRA 
                                                          ELSE TAB.CODATIVIDADE END
          ELSE TAB.CNAE END AS CODATIVECON
    ,TAB.NUNOTA
    ,TAB.NUPROCESSO_INSS
    ,TAB.SEQPROCESSO_INSS
    ,NVL(TAB.CODREC, '-1') AS CODREC /*SE NÃO ESTIVER INFORMADO IREMOS CRIAR UM AGRUPAMENTO NA TABELA DE RESUMO DO EVENTO R-2060 COM CODRECOLHIMENTO IGUAL A -1*/
    ,TAB.RECEITABRUTAESTAB AS VLRRECEITABRUTAESTAB
    ,TAB.RECEITABRUTAATIV AS VLRRECEITABRUTAATIV
    ,TAB.ABATIMENTOBRUTOATIV AS VLRABATIMENTOBRUTOATIV
    ,TAB.EXCLUSAOBRUTAATIV AS VLREXCLUSAOBRUTAATIV
    ,(TAB.RECEITABRUTAATIV - (TAB.ABATIMENTOBRUTOATIV + TAB.EXCLUSAOBRUTAATIV)) * ALIQDESONERACAO / 100 AS VLRCPRBAPUR
    ,TAB.ABATIMENTOBRUTOATIV + TAB.EXCLUSAOBRUTAATIV AS VLREXCRECBRUTA
    ,TAB.RECEITABRUTAATIV - (TAB.ABATIMENTOBRUTOATIV + TAB.EXCLUSAOBRUTAATIV) AS VLRBCCPRB
    FROM (
        SELECT 
         LID.CODEMP
        ,LID.DTREF
        ,LID.TPINSC
        ,LID.NRINSC
        ,LID.TPINSCESTAB
        ,LID.NRINSCESTAB
        ,LID.CODATIVIDADE
        ,LID.ENQREINTEGRA
        ,LID.CODATIVREINTEGRA
        ,LID.USOPROD
        ,LID.CNAE
        ,LID.ALIQDESONERACAO
        ,LID.CODCTA
        ,LID.CTACTB
        ,LID.DTDOC
        ,LID.NUNOTA
        ,LID.NUPROCESSO_INSS
        ,LID.SEQPROCESSO_INSS
        ,LID.CODREC
        ,SUM(LID.RECEITABRUTAESTAB) AS RECEITABRUTAESTAB
        ,SUM(LID.RECEITABRUTAATIV) AS RECEITABRUTAATIV
        ,SUM(LID.ABATIMENTOBRUTOATIV) AS ABATIMENTOBRUTOATIV
        ,SUM(LID.EXCLUSAOBRUTAATIV) AS EXCLUSAOBRUTAATIV
        FROM (
            SELECT 
             CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMP.CODEMP
                  WHEN NVL(EMP.CODEMPMATRIZEFD, 0) > 0 THEN EMP.CODEMPMATRIZEFD
                  ELSE EMP.CODEMP 
             END AS CODEMP
            ,TRUNC(LIV.DTDOC, 'MM') AS DTREF
            ,CASE WHEN LENGTH(EMPC.CGC) = 14 
                  THEN '1' 
                  ELSE '2' 
             END AS TPINSC
            ,CASE WHEN LENGTH(EMPC.CGC) = 14 
                  THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
                            THEN EMPC.CGC
                            ELSE SUBSTR(EMPC.CGC,1,8)
                       END
                  ELSE EMPC.CGC
             END AS NRINSC
            ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN 4 ELSE 1 END AS TPINSCESTAB
            ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN CAB.CODOBRA ELSE EMPC.CGC END AS NRINSCESTAB
            ,CAST(PRO.NCM AS VARCHAR(10)) AS CODATIVIDADE
            ,PRO.ENQREINTEGRA
            ,NVL(PRO.CODCPRB, PRO.CODATIVREINTEGRA) AS CODATIVREINTEGRA
            ,PRO.USOPROD
            ,RNT.CNAE
            ,CASE WHEN NVL(PRO.CODCPRB, 0) > 0 THEN CPRB.ALIQUOTA ELSE RNT.ALIQCONT END AS ALIQDESONERACAO
            ,RNT.CODCTACTB AS CODCTA
            ,(SELECT CTACTB FROM TCBPLA PLA WHERE PLA.CODCTACTB = RNT.CODCTACTB) AS CTACTB
            ,LIV.DTDOC
            ,LIV.NUNOTA
            ,SNK_GET_IDPROCESSO_IMP_EFD(8, 
                                        LIV.CODEMP, 
                                        CASE WHEN LIV.EMPPARC = 'P' THEN LIV.CODPARC ELSE NULL END, 
                                        CASE WHEN ITE.USOPROD = 'S' THEN NULL ELSE ITE.CODPROD END, 
                                        CASE WHEN ITE.USOPROD <> 'S' THEN NULL WHEN DIN.CODLST IS NULL THEN PRO.CODLST ELSE DIN.CODLST END, 
                                        LIV.DTDOC,
                                        'N') AS NUPROCESSO_INSS
            ,SNK_GET_IDPROCESSO_IMP_EFD(8, 
                                        LIV.CODEMP, 
                                        CASE WHEN LIV.EMPPARC = 'P' THEN LIV.CODPARC ELSE NULL END, 
                                        CASE WHEN ITE.USOPROD = 'S' THEN NULL ELSE ITE.CODPROD END, 
                                        CASE WHEN ITE.USOPROD <> 'S' THEN NULL WHEN DIN.CODLST IS NULL THEN PRO.CODLST ELSE DIN.CODLST END, 
                                        LIV.DTDOC,
                                        'S') AS SEQPROCESSO_INSS
            ,CASE WHEN CFO.RECBRUTAEFDBLOCOP = 'S' THEN LIV.VLRCTB ELSE 0 END AS RECEITABRUTAESTAB
            ,CASE WHEN PRO.ENQREINTEGRA = 'S' THEN
                       CASE WHEN CFO.RECBRUTAEFDBLOCOP = 'S' THEN LIV.VLRCTB ELSE 0 END
                  ELSE 0 END AS RECEITABRUTAATIV
            ,CASE WHEN PRO.ENQREINTEGRA = 'S' THEN
                       CASE WHEN CFO.RECBRUTAEFDBLOCOP = 'S' THEN 0 ELSE LIV.VLRCTB END
                  ELSE 0 END AS ABATIMENTOBRUTOATIV
            ,CASE WHEN PRO.ENQREINTEGRA = 'S' THEN
                       CASE WHEN UFS.CODPAIS = NVL((SELECT INTEIRO FROM TSIPAR WHERE CHAVE = 'CODPAISBRASIL'), 55) THEN
                                 CASE WHEN CFO.RECBRUTAEFDBLOCOP = 'S' THEN LIV.VLRIPI + LIV.ICMSRETENCAO
                                      ELSE (LIV.VLRIPI + LIV.ICMSRETENCAO) * (-1) END
                            ELSE CASE WHEN CFO.RECBRUTAEFDBLOCOP = 'S' THEN LIV.VLRCTB ELSE LIV.VLRCTB * (-1) END END
                  ELSE 0 END AS EXCLUSAOBRUTAATIV
            ,CASE WHEN NVL(PRO.CODCPRB, 0) > 0 THEN CPRB.CODRECOLHIMENTO ELSE RNT.CODREC END AS CODREC
            FROM TGFLIV LIV
                INNER JOIN (SELECT NUNOTA, CODOBRA, DTNEG, CODMAQ, NROREDZ FROM TGFCAB) CAB ON CAB.NUNOTA = LIV.NUNOTA
                INNER JOIN (SELECT NUNOTA, SEQUENCIA, CODPROD, VLRTOT, VLRDESC, USOPROD FROM TGFITE) ITE ON ITE.NUNOTA = LIV.NUNOTA AND ITE.SEQUENCIA = LIV.SEQUENCIA
                INNER JOIN (SELECT CODPROD, DESCRPROD, NCM, ENQREINTEGRA, CODCPRB, CODATIVREINTEGRA, CODLST, USOPROD, CNAE FROM TGFPRO) PRO ON PRO.CODPROD = ITE.CODPROD
                INNER JOIN TGFCFO CFO ON CFO.CODCFO = LIV.CODCFO
                INNER JOIN (SELECT CODEMP, EMPADMPUBDIR, CODEMPMATRIZEFD FROM TGFEMP) EMP ON EMP.CODEMP = LIV.CODEMP
                INNER JOIN (SELECT CODEMP, RAZAOSOCIAL, NOMEFANTASIA, CGC FROM TSIEMP) EMPC ON EMPC.CODEMP = EMP.CODEMP
                INNER JOIN (SELECT CODPARC, NOMEPARC, CODCID FROM TGFPAR) PAR ON PAR.CODPARC = LIV.CODPARC
                INNER JOIN TSICID CID ON CID.CODCID = PAR.CODCID
                INNER JOIN TSIUFS UFS ON UFS.CODUF = CID.UF
                LEFT JOIN TGFRNT RNT ON LIV.CODEMP = RNT.CODEMP AND LIV.DHMOV BETWEEN RNT.DTINI AND NVL(RNT.DTFIM, SYSDATE)
                LEFT JOIN TGFCPRB CPRB ON CPRB.CODCPRB = PRO.CODCPRB
                LEFT JOIN TGFDIN DIN ON DIN.NUNOTA = ITE.NUNOTA AND DIN.SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 4 AND DIN.CODINC = 2
            WHERE LIV.ORIGEM IN ('E','A','D') 
                AND ((PRO.USOPROD <> 'S') OR (LIV.CODMODDOC IN (7, 8, 9, 10, 11, 26, 27, 57, 67)))
                AND (CPRB.CODCPRB IS NOT NULL OR RNT.CODEMP IS NOT NULL)
                AND CFO.RECBRUTAEFDBLOCOP <> 'N'
            UNION
            SELECT 
             CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMP.CODEMP
                  WHEN NVL(EMP.CODEMPMATRIZEFD, 0) > 0 THEN EMP.CODEMPMATRIZEFD
                  ELSE EMP.CODEMP 
             END AS CODEMP
            ,TRUNC(LIS.DTDOC, 'MM') AS DTREF
            ,CASE WHEN LENGTH(EMPC.CGC) = 14 
                  THEN '1' 
                  ELSE '2' 
             END AS TPINSC
            ,CASE WHEN LENGTH(EMPC.CGC) = 14 
                  THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
                            THEN EMPC.CGC
                            ELSE SUBSTR(EMPC.CGC,1,8)
                       END
                  ELSE EMPC.CGC
             END AS NRINSC
            ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN 4 ELSE 1 END AS TPINSCESTAB
            ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN CAB.CODOBRA ELSE EMPC.CGC END AS NRINSCESTAB
            ,CASE WHEN ((PRO.CNAE = 0) OR (PRO.CNAE IS NULL)) THEN CAST(RNT.CNAE AS VARCHAR(10))
                  ELSE CAST(PRO.CNAE AS VARCHAR(10)) END AS CODATIVIDADE
            ,PRO.ENQREINTEGRA
            ,NVL(PRO.CODCPRB, PRO.CODATIVREINTEGRA) AS CODATIVREINTEGRA
            ,PRO.USOPROD
            ,RNT.CNAE
            ,CASE WHEN NVL(PRO.CODCPRB, 0) > 0 THEN CPRB.ALIQUOTA ELSE RNT.ALIQCONT END AS ALIQDESONERACAO
            ,RNT.CODCTACTB AS CODCTA
            ,(SELECT CTACTB FROM TCBPLA PLA WHERE PLA.CODCTACTB = RNT.CODCTACTB) AS CTACTB
            ,LIS.DTDOC
            ,LIS.NUNOTA
            ,SNK_GET_IDPROCESSO_IMP_EFD(8, 
                                        LIS.CODEMP, 
                                        LIS.CODPARC, 
                                        NULL, 
                                        CASE WHEN DIN.CODLST IS NULL THEN PRO.CODLST ELSE DIN.CODLST END, 
                                        LIS.DTDOC,
                                        'N') AS NUPROCESSO_INSS
            ,SNK_GET_IDPROCESSO_IMP_EFD(8, 
                                        LIS.CODEMP, 
                                        LIS.CODPARC, 
                                        NULL, 
                                        CASE WHEN DIN.CODLST IS NULL THEN PRO.CODLST ELSE DIN.CODLST END, 
                                        LIS.DTDOC,
                                        'S') AS SEQPROCESSO_INSS
            ,LIS.VLRCTB AS RECEITABRUTAESTAB
            ,CASE WHEN PRO.ENQREINTEGRA = 'S' THEN LIS.VLRCTB ELSE 0 END AS RECEITABRUTAATIV
            ,0 AS ABATIMENTOBRUTOATIV
            ,CASE WHEN ((PRO.ENQREINTEGRA = 'S') AND (UFS.CODPAIS <> NVL((SELECT INTEIRO FROM TSIPAR WHERE CHAVE = 'CODPAISBRASIL'), 55))) THEN
                            LIS.VLRCTB ELSE 0 END AS EXCLUSAOBRUTAATIV
            ,CASE WHEN NVL(PRO.CODCPRB, 0) > 0 THEN CPRB.CODRECOLHIMENTO ELSE RNT.CODREC END AS CODREC 
            FROM TGFLIS LIS
                INNER JOIN (SELECT NUNOTA, CODOBRA, DTNEG, CODMAQ, NROREDZ FROM TGFCAB) CAB ON CAB.NUNOTA = LIS.NUNOTA
                INNER JOIN (SELECT NUNOTA, SEQUENCIA, CODPROD, VLRTOT, VLRDESC, USOPROD FROM TGFITE) ITE ON ITE.NUNOTA = LIS.NUNOTA AND ITE.SEQUENCIA = LIS.SEQUENCIA
                INNER JOIN (SELECT CODPROD, DESCRPROD, NCM, ENQREINTEGRA, CODCPRB, CODATIVREINTEGRA, CODLST, USOPROD, CNAE FROM TGFPRO) PRO ON PRO.CODPROD = ITE.CODPROD
                INNER JOIN (SELECT CODEMP, EMPADMPUBDIR, CODEMPMATRIZEFD FROM TGFEMP) EMP ON EMP.CODEMP = LIS.CODEMP
                INNER JOIN (SELECT CODEMP, RAZAOSOCIAL, NOMEFANTASIA, CGC FROM TSIEMP) EMPC ON EMPC.CODEMP = EMP.CODEMP
                INNER JOIN (SELECT CODPARC, NOMEPARC, CODCID FROM TGFPAR) PAR ON PAR.CODPARC = LIS.CODPARC
                INNER JOIN TSICID CID ON CID.CODCID = PAR.CODCID
                INNER JOIN TSIUFS UFS ON UFS.CODUF = CID.UF
                LEFT JOIN TGFRNT RNT ON LIS.CODEMP = RNT.CODEMP AND LIS.DTMOV BETWEEN RNT.DTINI AND NVL(RNT.DTFIM, SYSDATE)
                LEFT JOIN TGFCPRB CPRB ON CPRB.CODCPRB = PRO.CODCPRB
                LEFT JOIN TGFDIN DIN ON DIN.NUNOTA = ITE.NUNOTA AND DIN.SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 4 AND DIN.CODINC = 2
            WHERE LIS.ORIGEM = 'E' 
                AND PRO.USOPROD = 'S'
                AND (CPRB.CODCPRB IS NOT NULL OR RNT.CODEMP IS NOT NULL)
            UNION
            SELECT 
             CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMP.CODEMP
                  WHEN NVL(EMP.CODEMPMATRIZEFD, 0) > 0 THEN EMP.CODEMPMATRIZEFD
                  ELSE EMP.CODEMP 
             END AS CODEMP
            ,TRUNC(LIVZ.DTDOC, 'MM') AS DTREF
            ,CASE WHEN LENGTH(EMPC.CGC) = 14 
                  THEN '1' 
                  ELSE '2' 
             END AS TPINSC
            ,CASE WHEN LENGTH(EMPC.CGC) = 14 
                  THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
                            THEN EMPC.CGC
                            ELSE SUBSTR(EMPC.CGC,1,8)
                       END
                  ELSE EMPC.CGC
             END AS NRINSC
            ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN 4 ELSE 1 END AS TPINSCESTAB
            ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN CAB.CODOBRA ELSE EMPC.CGC END AS NRINSCESTAB
            ,CAST(PRO.NCM AS VARCHAR(10)) AS CODATIVIDADE
            ,PRO.ENQREINTEGRA
            ,PRO.CODATIVREINTEGRA
            ,PRO.USOPROD
            ,RNT.CNAE
            ,CASE WHEN NVL(PRO.CODCPRB, 0) > 0 THEN CPRB.ALIQUOTA ELSE RNT.ALIQCONT END AS ALIQDESONERACAO
            ,RNT.CODCTACTB AS CODCTA
            ,(SELECT CTACTB FROM TCBPLA PLA WHERE RNT.CODCTACTB > 0 AND PLA.CODCTACTB = RNT.CODCTACTB) AS CTACTB
            ,LIVZ.DTDOC
            ,LIVZ.NUNOTA
            ,SNK_GET_IDPROCESSO_IMP_EFD(8, 
                                        LIVZ.CODEMP, 
                                        LIVZ.CODPARC, 
                                        CASE WHEN ITE.USOPROD = 'S' THEN NULL ELSE ITE.CODPROD END, 
                                        CASE WHEN ITE.USOPROD <> 'S' THEN NULL WHEN DIN.CODLST IS NULL THEN PRO.CODLST ELSE DIN.CODLST END, 
                                        LIVZ.DTDOC,
                                        'N') AS NUPROCESSO_INSS
            ,SNK_GET_IDPROCESSO_IMP_EFD(8, 
                                        LIVZ.CODEMP, 
                                        LIVZ.CODPARC, 
                                        CASE WHEN ITE.USOPROD = 'S' THEN NULL ELSE ITE.CODPROD END, 
                                        CASE WHEN ITE.USOPROD <> 'S' THEN NULL WHEN DIN.CODLST IS NULL THEN PRO.CODLST ELSE DIN.CODLST END, 
                                        LIVZ.DTDOC,
                                        'S') AS SEQPROCESSO_INSS
            ,CASE WHEN CFO.RECBRUTAEFDBLOCOP = 'S' THEN (ITE.VLRTOT - ITE.VLRDESC) ELSE 0 END AS RECEITABRUTAESTAB
            ,CASE WHEN PRO.ENQREINTEGRA = 'S' THEN
                       CASE WHEN CFO.RECBRUTAEFDBLOCOP = 'S' THEN (ITE.VLRTOT - ITE.VLRDESC) ELSE 0 END
                  ELSE 0 END AS RECEITABRUTAATIV
            ,CASE WHEN PRO.ENQREINTEGRA = 'S' THEN
                       CASE WHEN CFO.RECBRUTAEFDBLOCOP = 'S' THEN 0 ELSE (ITE.VLRTOT - ITE.VLRDESC) END
                  ELSE 0 END AS ABATIMENTOBRUTOATIV
            ,0 AS EXCLUSAOBRUTAATIV
            ,CASE WHEN NVL(PRO.CODCPRB, 0) > 0 THEN CPRB.CODRECOLHIMENTO ELSE RNT.CODREC END AS CODREC 
            FROM TGFLIV LIVZ
                INNER JOIN (SELECT NUNOTA, CODOBRA, DTNEG, CODMAQ, NROREDZ, CODPARC FROM TGFCAB) CAB ON CAB.DTNEG = LIVZ.DTDOC
                INNER JOIN (SELECT NUNOTA, SEQUENCIA, CODPROD, VLRTOT, VLRDESC, USOPROD FROM TGFITE) ITE ON ITE.NUNOTA = CAB.NUNOTA
                INNER JOIN TGFECF ECF ON ECF.NUECF = LIVZ.NUNOTA AND ECF.CODMAQ = CAB.CODMAQ AND ECF.CONTZ = CAB.NROREDZ
                INNER JOIN (SELECT CODPROD, DESCRPROD, NCM, ENQREINTEGRA, CODCPRB, CODATIVREINTEGRA, CODLST, USOPROD, CNAE FROM TGFPRO) PRO ON PRO.CODPROD = ITE.CODPROD
                INNER JOIN TGFCFO CFO ON CFO.CODCFO = LIVZ.CODCFO
                INNER JOIN (SELECT CODEMP, EMPADMPUBDIR, CODEMPMATRIZEFD FROM TGFEMP) EMP ON EMP.CODEMP = LIVZ.CODEMP
                INNER JOIN (SELECT CODEMP, RAZAOSOCIAL, NOMEFANTASIA, CGC FROM TSIEMP) EMPC ON EMPC.CODEMP = EMP.CODEMP
                INNER JOIN (SELECT CODPARC, NOMEPARC, CODCID FROM TGFPAR) PAR ON PAR.CODPARC = CAB.CODPARC
                INNER JOIN TSICID CID ON CID.CODCID = PAR.CODCID
                INNER JOIN TSIUFS UFS ON UFS.CODUF = CID.UF
                LEFT JOIN TGFRNT RNT ON LIVZ.CODEMP = RNT.CODEMP AND LIVZ.DHMOV BETWEEN RNT.DTINI AND NVL(RNT.DTFIM, SYSDATE)
                LEFT JOIN TGFCPRB CPRB ON CPRB.CODCPRB = PRO.CODCPRB
                LEFT JOIN TGFDIN DIN ON DIN.NUNOTA = ITE.NUNOTA AND DIN.SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 4 AND CODINC = 2
            WHERE LIVZ.ORIGEM = 'Z'
                AND LIVZ.SEQUENCIA = (SELECT MIN(LIV2.SEQUENCIA)
                                      FROM TGFLIV LIV2
                                      WHERE LIV2.CODEMP = LIVZ.CODEMP
                                          AND LIV2.DHMOV = LIVZ.DHMOV
                                          AND LIV2.ORIGEM = 'Z'
                                          AND LIV2.NUNOTA = LIVZ.NUNOTA) 
                AND PRO.USOPROD NOT IN ('S', 'D', 'M')
                AND CFO.RECBRUTAEFDBLOCOP <> 'N'
        ) LID
        GROUP BY 
         LID.CODEMP
        ,LID.DTREF
        ,LID.TPINSC
        ,LID.NRINSC
        ,LID.TPINSCESTAB
        ,LID.NRINSCESTAB
        ,LID.CODATIVIDADE
        ,LID.ENQREINTEGRA
        ,LID.CODATIVREINTEGRA
        ,LID.USOPROD
        ,LID.CNAE
        ,LID.ALIQDESONERACAO
        ,LID.CODCTA
        ,LID.CTACTB
        ,LID.DTDOC
        ,LID.NUNOTA
        ,LID.NUPROCESSO_INSS
        ,LID.SEQPROCESSO_INSS
        ,LID.CODREC
    ) TAB
)TABX
    LEFT JOIN TRIPISET ISET_INSS ON ISET_INSS.NUPROCESSO = TABX.NUPROCESSO_INSS AND ISET_INSS.SEQUENCIA = TABX.SEQPROCESSO_INSS
GROUP BY 
 TABX.CODEMP
,TABX.DTREF
,TABX.TPINSC
,TABX.NRINSC
,TABX.TPINSCESTAB
,TABX.NRINSCESTAB
,TABX.CODATIVECON
,TABX.NUNOTA
,TABX.NUPROCESSO_INSS
,TABX.SEQPROCESSO_INSS
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53444-0-0
Nro. O.S. : 1148508
Nome      : Cria - VRI_ACOMPANHAMENTO_TRANSMISSAO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - VRI_ACOMPANHAMENTO_TRANSMISSAO
NomeObjeto: VRI_ACOMPANHAMENTO_TRANSMISSAO
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_ACOMPANHAMENTO_TRANSMISSAO
AS
SELECT CODEMP
     , REFERENCIA
     , TPAMB
     , SEQUENCIA
     , EVENTO
     , SUM(AGUARDEVTPRIORITARIO) AS AGUARDEVTPRIORITARIO
     , SUM(PENDENTES) AS PENDENTES
     , SUM(ENVIADOS) AS ENVIADOS
     , SUM(AGUARDCORRECAO) AS AGUARDCORRECAO
     , SUM(ERROEVTPRIORITARIO) AS ERROEVTPRIORITARIO
     , SUM(FINALIZADO) AS FINALIZADO
     , COUNT(1) AS TOTAL
FROM (
    SELECT FILA.CODEMP
         , FILA.REFERENCIA
         , CAST(FILA.TPAMB AS VARCHAR2(1)) AS TPAMB
         , FILA.SEQUENCIA
         , FILA.TIPOEVENTO AS EVENTO
         , CASE WHEN EVT.GRUPO = 'C' OR FILA.SITUACAO <> 'P' THEN 0
                WHEN FILA.SITUACAO = 'P' AND EXISTS(SELECT 1
                                                     FROM EVTFILAREINF F
                                                         INNER JOIN TRIEVT E ON E.TIPOEVENTO = F.TIPOEVENTO
                                                     WHERE F.CODEMP = FILA.CODEMP
                                                        AND F.REFERENCIA = FILA.REFERENCIA
                                                        AND F.TPAMB = FILA.TPAMB
                                                        AND F.SEQUENCIA = FILA.SEQUENCIA
                                                        AND E.GRUPO = 'C'
                                                        AND F.SITUACAO NOT IN ('F', 'E', 'X')) THEN 1
                ELSE 0
           END AS AGUARDEVTPRIORITARIO
         , CASE WHEN (EVT.GRUPO = 'C' AND FILA.SITUACAO = 'P') OR 
                     (FILA.SITUACAO = 'P' AND NOT EXISTS(SELECT 1
                                                          FROM EVTFILAREINF F
                                                             INNER JOIN TRIEVT E ON E.TIPOEVENTO = F.TIPOEVENTO
                                                          WHERE F.CODEMP = FILA.CODEMP
                                                             AND F.REFERENCIA = FILA.REFERENCIA
                                                             AND F.TPAMB = FILA.TPAMB
                                                             AND F.SEQUENCIA = FILA.SEQUENCIA
                                                             AND E.GRUPO = 'C'
                                                             AND F.SITUACAO NOT IN ('F', 'E', 'X'))) THEN 1
                ELSE 0
           END AS PENDENTES
         , CASE WHEN FILA.SITUACAO = 'I' THEN 1 
                ELSE 0 
           END AS ENVIADOS
         , CASE WHEN FILA.SITUACAO IN ('E', 'V', 'L', 'R') THEN 1 
                ELSE 0 
           END AS AGUARDCORRECAO
         , CASE WHEN FILA.SITUACAO = 'X' THEN 1 
                ELSE 0 
           END AS ERROEVTPRIORITARIO
         , CASE WHEN FILA.SITUACAO = 'F' THEN 1 
                ELSE 0 
           END AS FINALIZADO
    FROM EVTFILAREINF FILA
        INNER JOIN TRIEVT EVT ON EVT.TIPOEVENTO = FILA.TIPOEVENTO
    WHERE EXISTS(SELECT *
                 FROM EVTFILAREINF F
                 WHERE F.CODEMP = FILA.CODEMP
                   AND F.DHINC = FILA.DHINC
                   AND F.SEQEVENTO = FILA.SEQEVENTO
                   AND ((F.TIPOEVENTO IN ('R2098', 'R2099') AND F.DHINC = (SELECT MAX(DHINC)
                                                                           FROM EVTFILAREINF MDH
                                                                           WHERE MDH.CODEMP = F.CODEMP
                                                                             AND MDH.REFERENCIA = F.REFERENCIA
                                                                             AND MDH.TPAMB = F.TPAMB
                                                                             AND MDH.SEQUENCIA = F.SEQUENCIA
                                                                             AND MDH.TIPOEVENTO = F.TIPOEVENTO  
                                                                           )) OR 
                        (F.TIPOEVENTO NOT IN ('R2098', 'R2099'))               
                       )
                 )
) TAB
GROUP BY TAB.CODEMP
       , TAB.REFERENCIA
       , TAB.TPAMB
       , TAB.SEQUENCIA
       , TAB.EVENTO
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53445-0-0
Nro. O.S. : 1148508
Nome      : Cria - VRI_ACOMP_TRANSMISSAO_ERRO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - VRI_ACOMP_TRANSMISSAO_ERRO
NomeObjeto: VRI_ACOMP_TRANSMISSAO_ERRO
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_ACOMP_TRANSMISSAO_ERRO
AS
SELECT FILA.CODEMP
     , FILA.REFERENCIA
     , CAST(FILA.TPAMB AS VARCHAR2(1)) AS TPAMB
     , FILA.SEQUENCIA
     , FILA.TIPOEVENTO AS EVENTO
     , CASE WHEN FILA.TIPOEVENTO IN ('R2098', 'R2099') THEN FILA.CHAVEEVENTO 
            ELSE FILA.CHAVE
       END AS CHAVE
     , CASE WHEN FILA.TIPOEVENTO = 'R1000' THEN 'Empresa: ' || NVL(CAST(FILA.CODEMP AS VARCHAR2(10)), '') 
            WHEN FILA.TIPOEVENTO = 'R1070' THEN 'Nro. Único do Processo: ' || NVL(CAST(PAJR.NUPROCESSO AS VARCHAR2(10)), '') || ' | Nro. do Processo: ' || NVL(CAST(PAJR.NRPROC AS VARCHAR2(21)), '')
            WHEN FILA.TIPOEVENTO = 'R2010' THEN 'Nro. Insc. Estab.: ' || NVL(CAST(RCST.NRINSCESTAB AS VARCHAR2(14)), '') || ' | Ind. Obra: ' || NVL(CAST(RCST.INDOBRA AS VARCHAR2(1)), '') || ' | CNPJ Pretador: '||NVL(CAST(RCST.CNPJPRESTADOR AS VARCHAR2(14)), '') || ' | Ind. Contrib. Rec. Bruta: ' || NVL(CAST(RCST.INDCPRB AS VARCHAR2(1)), '')
            WHEN FILA.TIPOEVENTO = 'R2020' THEN 'Nro. Insc. Tomador: ' || NVL(CAST(RCSP.NRINSCTOMADOR AS VARCHAR2(14)), '') || ' | Ind. Obra: ' || NVL(CAST(RCSP.INDOBRA AS VARCHAR2(1)), '')
            WHEN FILA.TIPOEVENTO = 'R2050' THEN 'Nro. Insc. Estabelecimento: ' || NVL(CAST(CPPR.NRINSCESTAB AS VARCHAR2(14)), '')
            WHEN FILA.TIPOEVENTO = 'R2060' THEN 'Nro. Insc. Estabelecimento: ' || NVL(CAST(CPRB.NRINSCESTAB AS VARCHAR2(14)), '')
            WHEN FILA.TIPOEVENTO = 'R2098' THEN 'Evento de Reabertura'
            WHEN FILA.TIPOEVENTO = 'R2099' THEN 'Evento de Fechamento'
            ELSE 'Evento Não Definido'
       END AS IDENTIFICADOR
     , FILA.CHAVEEVENTO AS IDEVENTO
     , FILA.SITUACAO
     , FILA.MSG
FROM EVTFILAREINF FILA
    LEFT JOIN TRIPAJR PAJR ON PAJR.CODEMP = FILA.CODEMP AND 
                              PAJR.DTREF = FILA.REFERENCIA AND 
                              PAJR.TPAMB = CAST(FILA.TPAMB AS VARCHAR2(1)) AND
                              PAJR.SEQUENCIA = FILA.SEQUENCIA AND
                              PAJR.CHAVE = FILA.CHAVE AND
                              CAST(PAJR.NUPROCESSO AS VARCHAR2(10)) = FILA.CHAVE AND --A chave da tabela TRIPAJR é o próprio NUPROCESSO
                              PAJR.IDEVENTO = FILA.CHAVEEVENTO
    LEFT JOIN TRIRCST RCST ON RCST.CODEMP = FILA.CODEMP AND 
                              RCST.DTREF = FILA.REFERENCIA AND 
                              RCST.TPAMB = CAST(FILA.TPAMB AS VARCHAR2(1)) AND
                              RCST.SEQUENCIA = FILA.SEQUENCIA AND
                              RCST.CHAVE = FILA.CHAVE AND
                              RCST.IDEVENTO = FILA.CHAVEEVENTO
    LEFT JOIN TRIRCSP RCSP ON RCSP.CODEMP = FILA.CODEMP AND 
                              RCSP.DTREF = FILA.REFERENCIA AND 
                              RCSP.TPAMB = CAST(FILA.TPAMB AS VARCHAR2(1)) AND 
                              RCSP.SEQUENCIA = FILA.SEQUENCIA AND
                              RCSP.CHAVE = FILA.CHAVE AND
                              RCSP.IDEVENTO = FILA.CHAVEEVENTO
    LEFT JOIN TRICPPR CPPR ON CPPR.CODEMP = FILA.CODEMP AND 
                              CPPR.DTREF = FILA.REFERENCIA AND 
                              CPPR.TPAMB = CAST(FILA.TPAMB AS VARCHAR2(1)) AND 
                              CPPR.SEQUENCIA = FILA.SEQUENCIA AND
                              CPPR.CHAVE = FILA.CHAVE AND
                              CPPR.IDEVENTO = FILA.CHAVEEVENTO
    LEFT JOIN TRICPRB CPRB ON CPRB.CODEMP = FILA.CODEMP AND 
                              CPRB.DTREF = FILA.REFERENCIA AND 
                              CPRB.TPAMB = CAST(FILA.TPAMB AS VARCHAR2(1)) AND 
                              CPRB.SEQUENCIA = FILA.SEQUENCIA AND
                              CPRB.CHAVE = FILA.CHAVE AND
                              CPRB.IDEVENTO = FILA.CHAVEEVENTO
WHERE EXISTS(SELECT *
             FROM EVTFILAREINF F
             WHERE F.CODEMP = FILA.CODEMP
               AND F.DHINC = FILA.DHINC
               AND F.SEQEVENTO = FILA.SEQEVENTO
               AND ((F.TIPOEVENTO IN ('R2098', 'R2099') AND F.DHINC = (SELECT MAX(DHINC)
                                                                       FROM EVTFILAREINF MDH
                                                                       WHERE MDH.CODEMP = F.CODEMP
                                                                         AND MDH.REFERENCIA = F.REFERENCIA
                                                                         AND MDH.TPAMB = F.TPAMB
                                                                         AND MDH.SEQUENCIA = F.SEQUENCIA
                                                                         AND MDH.TIPOEVENTO = F.TIPOEVENTO  
                                                                       )) OR 
                    (F.TIPOEVENTO NOT IN ('R2098', 'R2099'))               
                   )
             )
    AND FILA.SITUACAO IN ('E', 'V', 'L', 'R')
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53446-0-0
Nro. O.S. : 1148508
Nome      : Altera - VRI_EVT_R1070
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - VRI_EVT_R1070
NomeObjeto: VRI_EVT_R1070
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R1070
AS
SELECT DISTINCT
 PAJ.NUPROCESSO                                AS NUPROCESSO
,EMP.CODEMP                                    AS CODEMP
,SYSDATE                                       AS DTREF
,PAJ.NUPROCESSO                                AS CHAVE
,CASE WHEN LENGTH(EMPC.CGC) = 14 
      THEN '1' 
      ELSE '2' 
 END                                            AS TPINSC
,CASE WHEN LENGTH(EMPC.CGC) = 14 
      THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
                THEN EMPC.CGC
                ELSE SUBSTR(EMPC.CGC,1,8)
           END
      ELSE EMPC.CGC
 END                                            AS NRINSC
,PAJ.TIPO                                       AS TPPROC
,PAJ.NUMPROCESSO                                AS NRPROC
,PAJ.DTINIVALIDADE                              AS INIVALID
,PAJ.DTFIMVALIDADE                              AS FIMVALID
,PAJ.AUTORIA                                    AS INDAUTORIA
,UFS.UF                                         AS UFVARA
,CID.CODMUNFIS                                  AS CODMUNIC
,PAJ.CODIDENTVARA                               AS IDVARA
FROM TRIPAJ PAJ
    LEFT JOIN TGFEMP EMP ON (NOT EXISTS(SELECT 1
                                        FROM TRIPEMP PEMP                                             
                                        WHERE PEMP.NUPROCESSO = PAJ.NUPROCESSO
                             AND EXISTS(SELECT 1
                                        FROM TRIPISET ISET
                                        WHERE PEMP.NUPROCESSO = PAJ.NUPROCESSO)) OR 
                             EXISTS(SELECT 1
                                    FROM TRIPEMP PEMP
                                    WHERE PEMP.NUPROCESSO = PAJ.NUPROCESSO
                                      AND PEMP.CODEMP = EMP.CODEMP) )
    LEFT JOIN TSIEMP EMPC ON EMPC.CODEMP = EMP.CODEMP 
    LEFT JOIN TSICID CID ON PAJ.CODCID = CID.CODCID
    LEFT JOIN TSIUFS UFS ON UFS.CODUF = CID.UF
WHERE PAJ.ATIVO = 'S'
    AND EMP.ATIVO = 'S'
    AND PAJ.TIPO IS NOT NULL
    AND EXISTS(SELECT 1 
               FROM TRIPIMP PIMP 
               WHERE PIMP.NUPROCESSO = PAJ.NUPROCESSO
                   AND PIMP.TIPOIMPOSTO IN (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    AND PAJ.DTINIVALIDADE IS NOT NULL
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53447-0-0
Nro. O.S. : 1148508
Nome      : Cria - SNK_TOTALIZA_RESUMO_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - SNK_TOTALIZA_RESUMO_REINF
NomeObjeto: SNK_TOTALIZA_RESUMO_REINF
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_TOTALIZA_RESUMO_REINF(P_CODEMP         NUMBER,
                                                      P_DTREF          DATE,
                                                      P_TPAMB          VARCHAR2,
                                                      P_SEQUENCIA_NEW  NUMBER)     
AS
    P_COUNT                 NUMBER;
    P_TPINSC                NUMBER;
    P_NRINSC                VARCHAR2(14);
BEGIN
    /*SE EXISTIR REGISTRO PARA A NOVA SEQUÊNIA DEVEMOS DELETÁ-LO.PODE SER QUE EXISTA POR CONTA DA GERAÇÃO ANTERIOR ESTAR PENDENTE E A SEQUÊNCIA FOI 
    DELETADA PARA SER GERADA NOVAMENTE, ASSIM TAMBÉM DEVEMOS DELETAR O RESUMO PARA QUE ELE POSSA SER CALCULADO NOVAMENTE*/
    SELECT COUNT(1) INTO P_COUNT
    FROM TRIRES
    WHERE CODEMP = P_CODEMP
        AND DTREF = P_DTREF
        AND TPAMB = P_TPAMB
        AND SEQUENCIA = P_SEQUENCIA_NEW;

    IF P_COUNT > 0 THEN 
        DELETE TRIRES
        WHERE CODEMP = P_CODEMP
            AND DTREF = P_DTREF
            AND TPAMB = P_TPAMB
            AND SEQUENCIA = P_SEQUENCIA_NEW;     
    END IF;

    SELECT CASE WHEN LENGTH(EMPC.CGC) = 14 THEN '1' 
                ELSE '2' 
           END AS TPINSC,
           CASE WHEN LENGTH(EMPC.CGC) = 14 THEN CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMPC.CGC
                                                     ELSE SUBSTR(EMPC.CGC,1,8)
                                                END
                ELSE EMPC.CGC
           END AS NRINSC 
           INTO P_TPINSC, P_NRINSC
    FROM TGFEMP EMP
        INNER JOIN TSIEMP EMPC ON EMPC.CODEMP = EMP.CODEMP
    WHERE EMP.CODEMP = P_CODEMP;

    /*INSERINDO A TABELA PAI DE RESUMO, COM OS DADOS GERAIS*/
    INSERT INTO TRIRES (CODEMP, DTREF, TPAMB, SEQUENCIA, TPINSC, NRINSC)
        VALUES (P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW, P_TPINSC, P_NRINSC); 

    /*INSERT DO RESUMO DO EVENTO R-2010*/
    INSERT INTO TRIRCSTRES (CODEMP, DTREF, TPAMB, SEQUENCIA, CNPJPRESTADOR, VLRTOTALBASERETSIS, VLRTOTALRETPRINCSIS, VLRTOTALRETADICSIS, VLRTOTALNRETPRINCSIS, VLRTOTALNRETADICSIS)
    SELECT 
     CODEMP
    ,DTREF
    ,TPAMB
    ,SEQUENCIA
    ,CNPJPRESTADOR
    ,SUM(VLRTOTALBASERET) AS VLRTOTALBASERETSIS
    ,SUM(VLRTOTALRETPRINC) AS VLRTOTALRETPRINCSIS
    ,SUM(VLRTOTALRETADIC) AS VLRTOTALRETADICSIS
    ,SUM(VLRTOTALNRETPRINC) AS VLRTOTALNRETPRINCSIS
    ,SUM(VLRTOTALNRETADIC) AS VLRTOTALNRETADICSIS
    FROM TRIRCST
    WHERE CODEMP = P_CODEMP
        AND DTREF = P_DTREF 
        AND TPAMB = P_TPAMB
        AND SEQUENCIA = P_SEQUENCIA_NEW
    GROUP BY 
     CODEMP
    ,DTREF
    ,TPAMB
    ,SEQUENCIA
    ,CNPJPRESTADOR;

    /*INSERT DO RESUMO DO EVENTO R-2020*/
    INSERT INTO TRIRCSPRES (CODEMP, DTREF, TPAMB, SEQUENCIA, TPINSCTOMADOR, NRINSCTOMADOR, VLRTOTALBASERETSIS, VLRTOTALRETPRINCSIS, VLRTOTALRETADICSIS, VLRTOTALNRETPRINCSIS, VLRTOTALNRETADICSIS)
    SELECT 
     CODEMP
    ,DTREF
    ,TPAMB
    ,SEQUENCIA
    ,TPINSCTOMADOR
    ,NRINSCTOMADOR
    ,SUM(VLRTOTALBASERET) AS VLRTOTALBASERETSIS
    ,SUM(VLRTOTALRETPRINC) AS VLRTOTALRETPRINCSIS
    ,SUM(VLRTOTALRETADIC) AS VLRTOTALRETADICSIS
    ,SUM(VLRTOTALNRETPRINC) AS VLRTOTALNRETPRINCSIS
    ,SUM(VLRTOTALNRETADIC) AS VLRTOTALNRETADICSIS
    FROM TRIRCSP
    WHERE CODEMP = P_CODEMP
        AND DTREF = P_DTREF 
        AND TPAMB = P_TPAMB
        AND SEQUENCIA = P_SEQUENCIA_NEW
    GROUP BY 
     CODEMP
    ,DTREF
    ,TPAMB
    ,SEQUENCIA
    ,TPINSCTOMADOR
    ,NRINSCTOMADOR;

    /*INSERT DO RESUMO DO EVENTO R-2050*/
    INSERT INTO TRICPPRRES (CODEMP, DTREF, TPAMB, SEQUENCIA, SEQEVENTO, VLRCPAPURSIS, VLRRATAPURSIS, VLRSENARAPURSIS, VLRCPSUSPTOTALSIS, VLRRATSUSPTOTALSIS, VLRSENARSUSPTOTALSIS)
    SELECT 
     CODEMP
    ,DTREF
    ,TPAMB
    ,SEQUENCIA
    /*ESSE CARA POR ENQUANTO É PADRÃO, POIS O EVENTO R-2050 NÃO POSSUI UM AGRUPAMENTO, EM TESE SERÁ SEMPRE UM EVENTO POR REFERÊNCIA. FOI FEITO ASSIM PARA MANTER COMPATIBILIDADE COM AS OUTRAS ENTIDADES*/
    ,1 AS SEQEVENTO 
    ,SUM(VLRCPAPUR) AS VLRCPAPURSIS
    ,SUM(VLRRATAPUR) AS VLRRATAPURSIS
    ,SUM(VLRSENARAPUR) AS VLRSENARAPURSIS
    ,SUM(VLRCPSUSPTOTAL) AS VLRCPSUSPTOTALSIS
    ,SUM(VLRRATSUSPTOTAL) AS VLRRATSUSPTOTALSIS
    ,SUM(VLRSENARSUSPTOTAL) AS VLRSENARSUSPTOTALSIS
    FROM TRICPPR
    WHERE CODEMP = P_CODEMP
        AND DTREF = P_DTREF 
        AND TPAMB = P_TPAMB
        AND SEQUENCIA = P_SEQUENCIA_NEW
    GROUP BY 
     CODEMP
    ,DTREF
    ,TPAMB
    ,SEQUENCIA;

    /*INSERT DO RESUMO DO EVENTO R-2060*/
    INSERT INTO TRICPRBRES (CODEMP, DTREF, TPAMB, SEQUENCIA, CODRECEITA, VLRCPAPURTOTALSIS, VLRCPRBSUSPTOTALSIS)
    SELECT 
     CODEMP
    ,DTREF
    ,TPAMB
    ,SEQUENCIA
    ,CODRECOLHIMENTO AS CODRECEITA
    ,SUM(VLRCPRBAPUR) AS VLRCPAPURTOTALSIS
    ,SUM(VLRCPRBSUSP) AS VLRCPRBSUSPTOTALSIS
    FROM TRINFRB
    WHERE CODEMP = P_CODEMP
        AND DTREF = P_DTREF 
        AND TPAMB = P_TPAMB
        AND SEQUENCIA = P_SEQUENCIA_NEW
    GROUP BY 
     CODEMP
    ,DTREF
    ,TPAMB
    ,SEQUENCIA
    ,CODRECOLHIMENTO;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53448-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5344700
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_TOTALIZA_RESUMO_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210008
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_TOTALIZA_RESUMO_REINF' NOMEOBJ, 53447 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, 'f67108b110092ba92513ffca01808e0a' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_TOTALIZA_RESUMO_REINF' and THO.hashcode = 'f67108b110092ba92513ffca01808e0a')
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53449-0-0
Nro. O.S. : 1148508
Nome      : Altera - SNK_VERIF_ALTER_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - SNK_VERIF_ALTER_REINF
NomeObjeto: SNK_VERIF_ALTER_REINF
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_VERIF_ALTER_REINF(P_CODEMP          NUMBER, 
                                                  P_DTREF           DATE, 
                                                  P_TPAMB           VARCHAR2, 
                                                  P_SEQUENCIAATUAL  NUMBER,
                                                  P_NOMETAB_PAI     VARCHAR2 := NULL,
                                                  P_NOMETAB         VARCHAR2,
                                                  P_NOMEVIEW        VARCHAR2)
IS
    P_CONDITION         VARCHAR2(4000);
    queSql              VARCHAR2(4000);
    queUpd              VARCHAR2(4000);
    queSqlInc           VARCHAR2(4000);
    TYPE CURTYPE        IS REF CURSOR;
    CURVAL              CURTYPE;
    P_CHAVES            VARCHAR2(4000);
    P_CHAVES_ALT        VARCHAR2(4000);
    P_CHAVE             VARCHAR2(50);
    P_VALIDACAO         VARCHAR2(50);
    P_COLUNAS_PADRAO    VARCHAR2(4000) := 'CODEMP, DTREF, TPAMB, SEQUENCIA, STATUSREG, TIPO, NRORECIBO, NRORECIBOANT, IDEVENTO, CONTROLE, MSG, XMLEVENTO, XMLRETORNO, INIVALIDNOVO, FIMVALIDNOVO ';
    P_COL_PAD_FILHOS    VARCHAR2(4000) := 'CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE';
    P_NOMETAB_UTIL      VARCHAR2(100);
    P_FILTRO_FILHOS     VARCHAR2(4000);
    P_HAS_ALTER         BOOLEAN := FALSE;
    P_COUNT             NUMBER(10);
BEGIN
    P_CONDITION := SNK_GET_COLUMNS_REINF(P_NOMETAB, P_COLUNAS_PADRAO);

    IF P_NOMETAB_PAI IS NULL THEN 
        P_NOMETAB_UTIL := P_NOMETAB;

        queSql :=     'SELECT CHAVE, VALIDACAO
                       FROM (  SELECT O.CHAVE
                                    , CASE WHEN N.CODEMP IS NULL AND O.TIPO <> ''E'' THEN ''E''
                                           WHEN (N.CODEMP IS NULL AND O.TIPO = ''E'') OR ('||P_CONDITION||') THEN ''I''
                                           ELSE ''A'' 
                                      END AS VALIDACAO 
                               FROM '||P_NOMETAB||' O
                                   LEFT JOIN '||P_NOMEVIEW||' N ON O.CODEMP = N.CODEMP AND O.CHAVE = N.CHAVE
                               WHERE O.CODEMP = :CODEMP
                                  AND O.DTREF = :DTREF
                                  AND O.TPAMB = :TPAMB
                                  AND O.SEQUENCIA = :SEQUENCIA
                                  AND O.CONTROLE = ''I''
                            ) DTALT
                       WHERE DTALT.VALIDACAO <> ''I'' ';

        queSqlInc := 'SELECT COUNT(1)
                      FROM '||P_NOMEVIEW||' N
                      WHERE NOT EXISTS (SELECT 1
                                        FROM '||P_NOMETAB||' O
                                        WHERE O.CODEMP = :CODEMP
                                           AND O.DTREF = :DTREF
                                           AND O.TPAMB = :TPAMB
                                           AND O.SEQUENCIA = :SEQUENCIA 
                                        )
                        AND NOT EXISTS (SELECT 1
                                        FROM TRICAB C
                                        WHERE C.CODEMP = :CODEMP
                                           AND C.DTREF = :DTREF
                                           AND C.TPAMB = :TPAMB
                                           AND C.STATUS IN (1, 3, 5)
                                        )';
    ELSE 
        P_NOMETAB_UTIL := P_NOMETAB_PAI;
        P_FILTRO_FILHOS := NVL(SNK_GET_PK_FOR_REINF(P_NOMETAB, P_COL_PAD_FILHOS), ' ');

        /*NÃO EXISTE A POSSIBILIDADE DO FILHO SETAR O STATUS DO PAI PARA 'E - EXCLUSÃO', POIS SE CHEGOU NO PONTO DE HAVER A VALIDAÇÃO DO FILHO, É POR QUE O PAI NÃO FOI ALTERADO,
        LOGO NÃO É UMA EXCLUSÃO E SIM UMA ALTERAÇÃO*/
        queSql :=   'SELECT CHAVE, VALIDACAO
                     FROM (  SELECT O.CHAVE
                                  , CASE WHEN (N.CODEMP IS NULL AND P.TIPO = ''E'') OR ('||P_CONDITION||') THEN ''I''
                                         ELSE ''A'' 
                                    END AS VALIDACAO 
                             FROM '||P_NOMETAB||' O
                                 LEFT JOIN '||P_NOMEVIEW||' N ON O.CODEMP = N.CODEMP AND O.CHAVE = N.CHAVE '||P_FILTRO_FILHOS||'
                                 INNER JOIN '||P_NOMETAB_PAI||' P ON P.CODEMP = O.CODEMP AND P.DTREF = O.DTREF AND P.TPAMB = O.TPAMB AND P.SEQUENCIA = O.SEQUENCIA AND O.CHAVE = P.CHAVE AND P.CONTROLE = ''I''
                             WHERE O.CODEMP = :CODEMP
                                AND O.DTREF = :DTREF
                                AND O.TPAMB = :TPAMB
                                AND O.SEQUENCIA = :SEQUENCIA
                          ) DTALT
                     WHERE DTALT.VALIDACAO <> ''I'' ';

        queSqlInc := 'SELECT P.CHAVE
                      FROM '||P_NOMEVIEW||' N
                          INNER JOIN '||P_NOMETAB_PAI||' P ON P.CODEMP = :CODEMP
                                                          AND P.DTREF = :DTREF
                                                          AND P.TPAMB = :TPAMB
                                                          AND P.SEQUENCIA = :SEQUENCIA
                                                          AND P.CONTROLE = ''I''
                                                          AND P.CHAVE = N.CHAVE
                      WHERE NOT EXISTS (SELECT 1
                                        FROM '||P_NOMETAB||' O
                                        WHERE O.CODEMP = :CODEMP
                                           AND O.DTREF = :DTREF
                                           AND O.TPAMB = :TPAMB
                                           AND O.SEQUENCIA = :SEQUENCIA
                                           '||P_FILTRO_FILHOS||' 
                                        )';
    END IF;

    P_CHAVES := NULL;
    P_CHAVES_ALT := NULL;

    OPEN CURVAL FOR queSql USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIAATUAL;
    LOOP
        FETCH CURVAL INTO P_CHAVE, P_VALIDACAO;
        EXIT WHEN CURVAL%NOTFOUND;

        IF P_CHAVES IS NOT NULL AND LENGTH(P_CHAVES) + LENGTH(P_CHAVE) >= 3000 THEN
            queUpd :=               ' UPDATE '||P_NOMETAB_UTIL;

            IF P_CHAVES_ALT IS NOT NULL THEN
                queUpd := queUpd || ' SET CONTROLE = CASE WHEN CHAVE IN ('||P_CHAVES_ALT||') THEN ''A'' ELSE ''E'' END ';
            ELSE
                queUpd := queUpd || ' SET CONTROLE = ''E'' ';
            END IF;

            queUpd := queUpd ||     ' WHERE CODEMP = :CODEMP
                                         AND DTREF = :DTREF
                                         AND TPAMB = :TPAMB
                                         AND SEQUENCIA = :SEQUENCIA
                                         AND CONTROLE = ''I''
                                         AND CHAVE IN ('||P_CHAVES||')';

            EXECUTE IMMEDIATE queUpd USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIAATUAL;

            P_CHAVES := NULL;
            P_CHAVES_ALT := NULL;
            P_HAS_ALTER := TRUE;
         END IF;

        IF P_CHAVES IS NULL THEN
            P_CHAVES := ''''||P_CHAVE||'''';

            IF P_VALIDACAO = 'A' THEN
                P_CHAVES_ALT := ''''||P_CHAVE||'''';
            END IF;
        ELSE 
            P_CHAVES := P_CHAVES||','''||P_CHAVE||'''';

            IF P_VALIDACAO = 'A' THEN
                P_CHAVES_ALT := P_CHAVES_ALT||','''||P_CHAVE||'''';
            END IF;
        END IF;
    END LOOP;

    IF P_CHAVES IS NOT NULL AND LENGTH(P_CHAVES) > 0 THEN
        queUpd :=               ' UPDATE '||P_NOMETAB_UTIL;

        IF P_CHAVES_ALT IS NOT NULL THEN
            queUpd := queUpd || ' SET CONTROLE = CASE WHEN CHAVE IN ('||P_CHAVES_ALT||') THEN ''A'' ELSE ''E'' END ';
        ELSE
            queUpd := queUpd || ' SET CONTROLE = ''E'' ';
        END IF;

        queUpd := queUpd ||     ' WHERE CODEMP = :CODEMP
                                     AND DTREF = :DTREF
                                     AND TPAMB = :TPAMB
                                     AND SEQUENCIA = :SEQUENCIA
                                     AND CONTROLE = ''I''
                                     AND CHAVE IN ('||P_CHAVES||')';

        EXECUTE IMMEDIATE queUpd USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIAATUAL;

        P_CHAVES := NULL;
        P_CHAVES_ALT := NULL;
        P_HAS_ALTER := TRUE;
    END IF;

    IF NOT P_HAS_ALTER THEN
        FOR EVEF IN (SELECT MON.NOMETAB, MON.NOMEVIEW
                         FROM TRIMON MON
                         WHERE MON.NOMETABPAI = P_NOMETAB 
                         GROUP BY MON.NOMETAB, MON.NOMEVIEW
                         ORDER BY MON.NOMETAB
                  ) LOOP
            SNK_VERIF_ALTER_REINF(P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIAATUAL, P_NOMETAB, EVEF.NOMETAB, EVEF.NOMEVIEW);
        END LOOP;

        IF P_NOMETAB_PAI IS NULL THEN
            EXECUTE IMMEDIATE queSqlInc INTO P_COUNT USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIAATUAL, P_CODEMP, P_DTREF, P_TPAMB;

            IF P_COUNT > 0 THEN
                queUpd := ' UPDATE TRICAB 
                            SET STATUS = CASE WHEN STATUS = ''7'' THEN ''5'' ELSE ''1'' END 
                            WHERE CODEMP = :CODEMP
                               AND DTREF = :DTREF
                               AND TPAMB = :TPAMB';

                EXECUTE IMMEDIATE queUpd USING P_CODEMP, P_DTREF, P_TPAMB;    
            END IF;
        ELSE
            OPEN CURVAL FOR queSqlInc USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIAATUAL, P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIAATUAL;
            LOOP
                FETCH CURVAL INTO P_CHAVE;
                EXIT WHEN CURVAL%NOTFOUND;

                IF P_CHAVES IS NOT NULL AND LENGTH(P_CHAVES) + LENGTH(P_CHAVE) >= 3000 THEN
                    queUpd := ' UPDATE '||P_NOMETAB_UTIL||'
                                SET CONTROLE = ''A''
                                WHERE CODEMP = :CODEMP
                                   AND DTREF = :DTREF
                                   AND TPAMB = :TPAMB
                                   AND SEQUENCIA = :SEQUENCIA
                                   AND CONTROLE = ''I''
                                   AND CHAVE IN ('||P_CHAVES||')';

                    EXECUTE IMMEDIATE queUpd USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIAATUAL;

                    P_CHAVES := NULL;
                    P_CHAVES_ALT := NULL;
                 END IF;

                IF P_CHAVES IS NULL THEN
                    P_CHAVES := ''''||P_CHAVE||'''';
                ELSE 
                    P_CHAVES := P_CHAVES||','''||P_CHAVE||'''';
                END IF;
            END LOOP;

            IF P_CHAVES IS NOT NULL AND LENGTH(P_CHAVES) > 0 THEN
                queUpd := ' UPDATE '||P_NOMETAB_UTIL||'
                            SET CONTROLE = ''A'' 
                            WHERE CODEMP = :CODEMP
                               AND DTREF = :DTREF
                               AND TPAMB = :TPAMB
                               AND SEQUENCIA = :SEQUENCIA
                               AND CONTROLE = ''I''
                               AND CHAVE IN ('||P_CHAVES||')';

                EXECUTE IMMEDIATE queUpd USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIAATUAL;

                P_CHAVES := NULL;
                P_CHAVES_ALT := NULL;
            END IF;
        END IF;
    END IF;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53450-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5344900
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_VERIF_ALTER_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210008
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_VERIF_ALTER_REINF' NOMEOBJ, 53449 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, '5fb0eac6d68ab8d198f134534ed9a300' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_VERIF_ALTER_REINF' and THO.hashcode = '5fb0eac6d68ab8d198f134534ed9a300')
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53451-0-0
Nro. O.S. : 1148508
Nome      : Altera - SNK_VALID_ALTER_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - SNK_VALID_ALTER_REINF
NomeObjeto: SNK_VALID_ALTER_REINF
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_VALID_ALTER_REINF(P_CODEMP           NUMBER,
                                                  P_DTREF            DATE,
                                                  P_TPAMB            VARCHAR2,
                                                  P_SEQUENCIAATUAL   NUMBER)
IS
BEGIN
   FOR EVE IN (SELECT MON.NOMETAB, MON.NOMEVIEW
               FROM TRIMON MON
                   INNER JOIN TRIEVT EVT ON EVT.TIPOEVENTO = MON.NOMEEVENTO
               WHERE EVT.GRUPO = 'C'
                   AND MON.NOMETABPAI IS NULL
               GROUP BY MON.NOMETAB, MON.NOMEVIEW, MON.ORDEM
               ORDER BY MON.ORDEM
             ) LOOP
       SNK_VERIF_ALTER_REINF(P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIAATUAL, NULL /*NOME TAB PAI*/, EVE.NOMETAB, EVE.NOMEVIEW);
   END LOOP;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53452-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5345100
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_VALID_ALTER_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210008
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_VALID_ALTER_REINF' NOMEOBJ, 53451 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, 'f027a945bcf04d750d74d05490ffe7c7' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_VALID_ALTER_REINF' and THO.hashcode = 'f027a945bcf04d750d74d05490ffe7c7')
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 16:00:53
Num.Script: 53453-0-0
Nro. O.S. : 1148508
Nome      : Altera - SNK_PROCESSA_DADOS_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - SNK_PROCESSA_DADOS_REINF
NomeObjeto: SNK_PROCESSA_DADOS_REINF
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SEMPRE
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_PROCESSA_DADOS_REINF(P_CODEMP           NUMBER,
                                                     P_DTREF            DATE,
                                                     P_TPAMB            VARCHAR2,
                                                     P_SEQUENCIA_ATUAL  NUMBER, 
                                                     P_TIPDADOS         CHAR,                   /*T=TODOS, C=CADOSTRO, M=MOVIMENTO*/
                                                     P_EVENTO           VARCHAR2 := 'TODOS',    /*TODOS, NOMEEVENTO*/
                                                     P_NOMETAB          VARCHAR2 := NULL,       /*UTILIZADO NA RECURSIVIDADE*/
                                                     P_SEQUENCIA_PAI    NUMBER := NULL,         /*UTILIZADO NA RECURSIVIDADE*/
                                                     P_RESULT           OUT NUMBER)     
AS
    P_SEQUENCIA_OLD         NUMBER;
    P_SEQUENCIA_NEW         NUMBER;
    P_SEQUENCIA_DEL         NUMBER;
    P_DTREF_OLD             DATE;
    P_NRORECIBO             VARCHAR2(50);
    P_NRORECIBO_OLD         VARCHAR2(50) := NULL;
    P_INSERT_COLUMNS        VARCHAR2(4000);
    P_INSERT_VALUES         VARCHAR2(4000);
    P_COUNT                 NUMBER(10);
    P_STATUS                CHAR(1);
    P_TIPO                  CHAR(1);
    queSql                  VARCHAR2(4000);
BEGIN
    /*VERIFICA SE ALGUM DOS EVENTOS DE CADASTRO SOFREU ALTERAÇÃO: SE SIM, IRÁ ALTERAR O CAMPO CONTROLE DESSES EVENTOS*/
    SNK_VALID_ALTER_REINF(P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_ATUAL);

    IF P_NOMETAB IS NULL THEN
        FOR EVE IN (SELECT MON.NOMETAB, MON.NOMEEVENTO
                    FROM TRIMON MON
                        INNER JOIN TRIEVT EVT ON EVT.TIPOEVENTO = MON.NOMEEVENTO
                    WHERE (P_EVENTO = 'TODOS' OR MON.NOMEEVENTO = P_EVENTO)
                        AND MON.NOMETABPAI IS NULL
                        AND (P_EVENTO <> 'TODOS' OR P_TIPDADOS = 'T' OR EVT.GRUPO = P_TIPDADOS)
                        AND (EXISTS(SELECT 1
                                   FROM TGFEPS
                                   WHERE EVENTO = EVT.TIPOEVENTO
                                     AND CODEMP = P_CODEMP
                                     AND GERAREVENTO = 'S') OR 
                             EVT.GRUPO = 'C') /*EVENTOS DE CADASTRO NÃO ESTÃO NA TABELA TGFEPS*/
                    GROUP BY MON.NOMEEVENTO, MON.NOMETAB, MON.ORDEM
                    ORDER BY MON.ORDEM
                    ) 
        LOOP
            queSql := ' SELECT COUNT(1)  
                        FROM '||EVE.NOMETAB||'
                        WHERE CODEMP = :CODEMP
                          AND DTREF = :DTREF
                          AND TPAMB = :TPAMB
                          AND STATUSREG = ''E'' ';

            EXECUTE IMMEDIATE queSql INTO P_COUNT USING P_CODEMP, P_DTREF, P_TPAMB;

            IF P_COUNT > 0 THEN
                RAISE_APPLICATION_ERROR(-20101, 'Não é possivel gerar dados do REINF se existir eventos enviados para esta empresa/referência.');
            END IF;

            queSql := ' SELECT MAX(SEQUENCIA)
                        FROM '||EVE.NOMETAB||'
                        WHERE CODEMP = :CODEMP
                          AND DTREF = :DTREF
                          AND TPAMB = :TPAMB
                          AND STATUSREG = ''P''';

            EXECUTE IMMEDIATE queSql INTO P_SEQUENCIA_DEL USING P_CODEMP, P_DTREF, P_TPAMB;

            IF NVL(P_SEQUENCIA_DEL, 0) > 0 THEN
                FOR CUR_DEL IN (SELECT NOMETAB
                                FROM TRIMON
                                WHERE NOMETABPAI IS NULL
                                ORDER BY ORDEM DESC /*NÃO ALTERAR ESSA ORDEM: OS MOVIMENTOS DEVEM SER DELETADOS ANTES DOS PROCESSOS, POIS EXISTE FK ENTRE ELES*/
                                ) 
                LOOP
                    queSql := ' DELETE FROM '||CUR_DEL.NOMETAB||'
                                WHERE CODEMP = :CODEMP
                                  AND DTREF = :DTREF
                                  AND TPAMB = :TPAMB
                                  AND SEQUENCIA = :SEQUENCIA';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_DEL;
                END LOOP;
                P_SEQUENCIA_NEW := P_SEQUENCIA_ATUAL;
                EXIT; /*COMO JÁ DELETEI TODOS OS REGISTROS PARA A ULTIMA SEQUENCIA PENDENTE, POSSO SAIR DO LOOP*/
            END IF;
        END LOOP;
    ELSE
        P_SEQUENCIA_NEW := P_SEQUENCIA_PAI;
    END IF;

    IF P_SEQUENCIA_NEW IS NULL THEN /*SE A SEQUENCIA ESTÁ NULL, NENHUM REGISTRO FOI DELETADO, LOGO A SEQUENCIA SERÁ A SEQUENCIA ATUAL + 1*/
        P_SEQUENCIA_NEW := P_SEQUENCIA_ATUAL + 1;
    END IF;

    FOR EVE IN (SELECT MON.NOMETAB, MON.NOMEEVENTO, MON.NOMEVIEW, MON.NOMETABPAI, MON.VIEWDETALHE, EVT.GRUPO, MON.ORDEM
                FROM TRIMON MON
                    INNER JOIN TRIEVT EVT ON EVT.TIPOEVENTO = MON.NOMEEVENTO
                WHERE (P_NOMETAB IS NOT NULL AND MON.NOMETAB = P_NOMETAB) /*BUSCA O PRÓPRIO EVENTO*/ OR 
                         (  P_NOMETAB IS NULL
                         AND MON.NOMETABPAI IS NULL 
                         AND (P_EVENTO = 'TODOS' OR MON.NOMEEVENTO = P_EVENTO)                      
                         AND (P_EVENTO <> 'TODOS' OR P_TIPDADOS = 'T' OR EVT.GRUPO = P_TIPDADOS)
                         AND (EXISTS(SELECT 1
                                       FROM TGFEPS
                                     WHERE EVENTO = EVT.TIPOEVENTO
                                        AND CODEMP = P_CODEMP
                                        AND GERAREVENTO = 'S') OR
                              EVT.GRUPO = 'C') /*EVENTOS DE CADASTRO NÃO ESTÃO NA TABELA TGFEPS*/
                      )
                GROUP BY MON.NOMETAB, MON.NOMEEVENTO, MON.NOMEVIEW, MON.NOMETABPAI, MON.VIEWDETALHE, EVT.GRUPO, MON.ORDEM
                ORDER BY MON.ORDEM  
               )
    LOOP
        P_NRORECIBO := NULL;
        P_NRORECIBO_OLD := NULL;
        P_STATUS := 'P';
        P_TIPO := 'I';

        IF P_SEQUENCIA_NEW > 1 THEN
            queSql := ' SELECT MAX(SEQUENCIA)
                        FROM '||EVE.NOMETAB||'
                        WHERE CODEMP = :CODEMP
                          AND DTREF = :DTREF
                          AND TPAMB = :TPAMB
                          AND SEQUENCIA < :SEQUENCIA_NEW';

            EXECUTE IMMEDIATE queSql INTO P_SEQUENCIA_OLD USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW;

            P_DTREF_OLD := P_DTREF;
        ELSIF EVE.GRUPO <> 'M' THEN
            queSql := ' SELECT NVL(MAX(DTREF), :DTREF)
                        FROM '||EVE.NOMETAB||'
                        WHERE CODEMP = :CODEMP
                          AND DTREF < :DTREF
                          AND TPAMB = :TPAMB';
            EXECUTE IMMEDIATE queSql INTO P_DTREF_OLD USING P_DTREF, P_CODEMP, P_DTREF, P_TPAMB;

            IF P_DTREF_OLD <> P_DTREF THEN
                queSql := ' SELECT NVL(MAX(SEQUENCIA),0)
                            FROM '||EVE.NOMETAB||'
                            WHERE CODEMP = :CODEMP
                              AND DTREF = :DTREF
                              AND TPAMB = :TPAMB';

                EXECUTE IMMEDIATE queSql INTO P_SEQUENCIA_OLD USING P_CODEMP, P_DTREF_OLD, P_TPAMB;
            ELSE
                P_SEQUENCIA_OLD := P_SEQUENCIA_NEW;
            END IF;
        ELSE
            P_SEQUENCIA_OLD := P_SEQUENCIA_NEW;
            P_DTREF_OLD := P_DTREF;
        END IF;

        IF EVE.GRUPO = 'M' THEN  /*MOVIMENTOS GRAVAM OS EVENTOS FILHOS PRIMEIRO*/     
            FOR EVEF IN (SELECT NOMEEVENTO, NOMETAB
                         FROM TRIMON
                         WHERE NOMETABPAI = EVE.NOMETAB
                         GROUP BY NOMEEVENTO, NOMETAB
                         ORDER BY NOMEEVENTO 
                        ) 
            LOOP
                SNK_PROCESSA_DADOS_REINF(P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_ATUAL, P_TIPDADOS, EVEF.NOMEEVENTO, EVEF.NOMETAB, P_SEQUENCIA_NEW, P_RESULT);
            END LOOP;
        END IF;

        P_INSERT_COLUMNS := SNK_GET_COLUMNS_TABLE(EVE.NOMETAB, ' ');
        P_INSERT_VALUES  := P_INSERT_COLUMNS;

        P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'CODEMP,', TO_CHAR (P_CODEMP)|| ' AS CODEMP,');

        P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'DTREF,', 'TO_DATE(SNK_FORMAT_DATE('''||P_DTREF||''', ''DD/MM/YYYY''), ''DD/MM/YYYY'') AS DTREF,');

        P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'TPAMB,', ''''||P_TPAMB||''' AS TPAMB,');

        P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'SEQUENCIA,', TO_CHAR (P_SEQUENCIA_NEW)|| ' AS SEQUENCIA,');

        IF EVE.NOMETABPAI IS NULL THEN
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'STATUSREG,', 'CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND STATUSREG_OLD = ''F'' THEN ''F'' ' 
                                                              ||            'ELSE ''P'' ' 
                                                              ||        'END AS STATUSREG,');

            IF EVE.GRUPO = 'C' THEN
                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'TIPO,', 'CASE WHEN ((DADOS.CONTROLE_OLD = ''I'' OR DADOS.NRORECIBO_OLD IS NULL) AND DADOS.TIPO_OLD = ''I'') OR DADOS.TIPO_OLD IS NULL THEN ''I'' ' 
                                                              ||           'WHEN DADOS.CONTROLE_OLD = ''E'' THEN ''E'' ' 
                                                              ||           'ELSE ''A'' ' 
                                                              ||  'END AS TIPO,');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'INIVALIDNOVO,', 'CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND STATUSREG_OLD = ''F'' THEN DADOS.INIVALIDNOVO_OLD '
                                                              ||                   'ELSE NULL '
                                                              ||               'END AS INIVALIDNOVO,');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'FIMVALIDNOVO,', 'CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND STATUSREG_OLD = ''F'' THEN DADOS.FIMVALIDNOVO_OLD '
                                                              ||                  'ELSE NULL '
                                                              ||             'END AS FIMVALIDNOVO,');
            END IF;

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'NRORECIBO,', 'CASE WHEN DADOS.CONTROLE_OLD <> ''I'' OR STATUSREG_OLD <> ''F'' THEN NULL '
                                                              ||            'WHEN DADOS.CONTROLE_OLD = ''A'' AND STATUSREG_OLD = ''F'' THEN DADOS.NRORECIBOANT_OLD '
                                                              ||            'ELSE DADOS.NRORECIBO_OLD ' 
                                                              ||        'END AS NRORECIBO,');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'NRORECIBOANT,', 'CASE WHEN DADOS.CONTROLE_OLD = ''A'' AND STATUSREG_OLD = ''F'' THEN DADOS.NRORECIBO_OLD ' 
                                                              ||               'ELSE DADOS.NRORECIBOANT_OLD '
                                                              ||           'END AS NRORECIBOANT,');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'IDEVENTO,', 'CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND STATUSREG_OLD = ''F'' THEN IDEVENTO_OLD ' 
                                                              ||           'ELSE NULL '
                                                              ||      'END AS IDEEVENTO,');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'CONTROLE,', '''I'' AS CONTROLE,');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'MSG,', 'CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND STATUSREG_OLD = ''F'' THEN DADOS.MSG_OLD '
                                                              ||       'ELSE NULL '
                                                              ||  'END AS MSG,');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'XMLEVENTO,', 'CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND STATUSREG_OLD = ''F'' THEN DADOS.XMLEVENTO_OLD '
                                                              ||             'ELSE NULL '
                                                              ||        'END AS XMLEVENTO,');

            /*IMPORTANTE: POR SER O ÚLTIMO CAMPO, NÃO É NECESSÁRIO FAZER O REPLACE DO CAMPO COM A VÍRGULA DEPOIS NO NOME*/
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'XMLRETORNO', 'CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND STATUSREG_OLD = ''F'' THEN DADOS.XMLRETORNO_OLD '
                                                              ||             'ELSE NULL '
                                                              ||        'END AS XMLRETORNO');

            queSql :=                    'INSERT INTO '||EVE.NOMETAB||' ' 
                                      || 'SELECT '||P_INSERT_VALUES||' '     
                                      || 'FROM (SELECT '
                                      ||          'NVL(ANT.CONTROLE, '' '') AS CONTROLE_OLD ' 
                                      ||        ', ANT.NRORECIBO AS NRORECIBO_OLD '
                                      ||        ', ANT.NRORECIBOANT AS NRORECIBOANT_OLD ';

            IF EVE.GRUPO = 'C' THEN  
                queSql := queSql      ||        ', ANT.TIPO AS TIPO_OLD '
                                      ||        ', ANT.INIVALIDNOVO AS INIVALIDNOVO_OLD '
                                      ||        ', ANT.FIMVALIDNOVO AS FIMVALIDNOVO_OLD ';
            END IF;

            queSql := queSql          ||        ', ANT.STATUSREG AS STATUSREG_OLD '
                                      ||        ', ANT.IDEVENTO AS IDEVENTO_OLD '
                                      ||        ', ANT.MSG AS MSG_OLD '
                                      ||        ', ANT.XMLEVENTO AS XMLEVENTO_OLD '
                                      ||        ', ANT.XMLRETORNO AS XMLRETORNO_OLD '
                                      ||        ', V.* '
                                      ||       'FROM '||EVE.NOMEVIEW||' V '
                                      ||           'LEFT JOIN (SELECT '
                                      ||                         'CHAVE '
                                      ||                       ', CONTROLE '
                                      ||                       ', NRORECIBO '
                                      ||                       ', NRORECIBOANT ';

            IF EVE.GRUPO = 'C' THEN
                queSql := queSql      ||                       ', TIPO '
                                      ||                       ', INIVALIDNOVO '
                                      ||                       ', FIMVALIDNOVO ';
            END IF;

            queSql := queSql          ||                       ', STATUSREG '
                                      ||                       ', IDEVENTO '
                                      ||                       ', MSG '
                                      ||                       ', XMLEVENTO '
                                      ||                       ', XMLRETORNO '
                                      ||                      'FROM '||EVE.NOMETAB||' OLD '
                                      ||                      'WHERE OLD.CODEMP = :CODEMP '
                                      ||                         'AND OLD.DTREF = :DTREF_OLD '
                                      ||                         'AND OLD.TPAMB = :TPAMB '
                                      ||                         'AND OLD.SEQUENCIA = :SEQUENCIA_OLD) ANT ON ANT.CHAVE = V.CHAVE '
                                      ||       'WHERE V.CODEMP = :CODEMP ';

            IF EVE.GRUPO = 'C' THEN
                queSql := queSql      ||          'AND :GRUPO = ''C'' ' 
                                      ||          'AND :DTREF BETWEEN V.INIVALID AND NVL(V.FIMVALID, :DTREF) '
                                      ||       ') DADOS ';

                EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF_OLD, P_TPAMB, P_SEQUENCIA_OLD, P_CODEMP, EVE.GRUPO, P_DTREF, P_DTREF;
            ELSE
                IF EVE.VIEWDETALHE = 'S' THEN /*A VIEW QUE É DETALHADA NÃO PRECISA PASSAR OS DADOS 'TPAMB' E 'SEQUENCIA' COMO PARAMETROS*/
                    queSql := queSql  ||          'AND DTREF = :DTREF ' 
                                      ||       ') DADOS';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF_OLD, P_TPAMB, P_SEQUENCIA_OLD, P_CODEMP, P_DTREF;
                ELSE
                    queSql := queSql  ||          'AND DTREF = :DTREF ' 
                                      ||          'AND TPAMB = :TPAMB '
                                      ||          'AND SEQUENCIA = :SEQUENCIA '
                                      ||       ') DADOS';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF_OLD, P_TPAMB, P_SEQUENCIA_OLD, P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW;
                END IF; 
            END IF;
        ELSE
            /*SÓ ENTRA AQUI PARA OS FILHOS*/
            queSql :=                    'INSERT INTO '||EVE.NOMETAB||' '
                                      || 'SELECT '||P_INSERT_VALUES||' '
                                      || 'FROM '||EVE.NOMEVIEW||' '
                                      || 'WHERE CODEMP = :CODEMP ';

            IF EVE.GRUPO = 'C' THEN
                queSql :=  queSql     ||    'AND DTREF = :DTREF '
                                      ||    'AND :GRUPO = ''C'' ';

                EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF, EVE.GRUPO;
            ELSE
                IF EVE.VIEWDETALHE = 'S' THEN /*A VIEW QUE É DETALHADA NÃO PRECISA PASSAR OS DADOS 'TPAMB' E 'SEQUENCIA' COMO PARAMETROS*/
                    queSql :=  queSql ||    'AND DTREF = :DTREF ';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF;
                ELSE
                    queSql :=  queSql ||    'AND DTREF = :DTREF ' 
                                      ||    'AND TPAMB = :TPAMB '
                                      ||    'AND SEQUENCIA = :SEQUENCIA ';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW;
                END IF; 
            END IF;
        END IF;

        IF EVE.GRUPO = 'C' THEN  /*CADASTROS GRAVAM O EVENTO PAI PRIMEIRO*/

            /*UTILIZADO QUANDO O INSERT NÃO FOI FEITO POR CONTA DE EXCLUSÃO, ASSIM PRECISAMOS CRIAR UMA NOVA LINHA PARA SE FAZER A EXCLUSÃO*/
            IF P_DTREF <> P_DTREF_OLD  OR P_SEQUENCIA_NEW <> P_SEQUENCIA_OLD THEN
                P_INSERT_COLUMNS := SNK_GET_COLUMNS_TABLE(EVE.NOMETAB, ' ');
                P_INSERT_VALUES := P_INSERT_COLUMNS; 

                P_INSERT_VALUES := REPLACE(P_INSERT_VALUES, ' ', '');
                P_INSERT_VALUES := 'O.'||REPLACE(P_INSERT_VALUES, ',', ',O.');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.CODEMP,', 'O.CODEMP,');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.DTREF,', ':DTREF,');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.TPAMB,', 'O.TPAMB,');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.SEQUENCIA,', ':SEQUENCIA,');

                IF EVE.NOMETABPAI IS NULL THEN
                    P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.STATUSREG,', 'CASE WHEN O.CONTROLE = ''E'' OR O.STATUSREG <> ''F'' THEN ''P'' '
                                                                       ||             'ELSE ''F'' '
                                                                       ||        'END,');

                    IF EVE.GRUPO = 'C' THEN
                        P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.TIPO,', 'CASE WHEN O.CONTROLE = ''E'' OR O.STATUSREG <> ''F'' THEN ''E'' '
                                                                       ||            'ELSE O.TIPO '
                                                                       ||       'END,');

                        P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.INIVALIDNOVO,', 'CASE WHEN O.CONTROLE = ''E'' OR O.STATUSREG <> ''F'' THEN NULL '
                                                                       ||                    'ELSE O.INIVALIDNOVO '
                                                                       ||               'END,');

                        P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.FIMVALIDNOVO,', 'CASE WHEN O.CONTROLE = ''E'' OR O.STATUSREG <> ''F'' THEN NULL '
                                                                       ||                    'ELSE O.FIMVALIDNOVO '
                                                                       ||               'END,');

                    END IF;

                    P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.NRORECIBO,', 'CASE WHEN O.CONTROLE = ''E'' OR O.STATUSREG <> ''F'' THEN NULL ' 
                                                                       ||             'ELSE O.NRORECIBO '
                                                                       ||        'END,');

                    P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.NRORECIBOANT,', 'CASE WHEN O.CONTROLE = ''E'' THEN O.NRORECIBO ' 
                                                                       ||                'ELSE O.NRORECIBOANT ' 
                                                                       ||           'END,');

                    P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.IDEVENTO,', 'CASE WHEN O.CONTROLE = ''E'' OR O.STATUSREG <> ''F'' THEN NULL '
                                                                       ||            'ELSE O.IDEVENTO '
                                                                       ||       'END,');

                    P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.CONTROLE,', 'CASE WHEN O.CONTROLE = ''E'' OR O.STATUSREG <> ''F'' THEN ''I'' '
                                                                       ||            'ELSE O.CONTROLE '
                                                                       ||       'END,');

                    P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.MSG,', 'CASE WHEN O.CONTROLE = ''E'' OR O.STATUSREG <> ''F'' THEN NULL '
                                                                       ||       'ELSE O.MSG '
                                                                       ||  'END,');

                    P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.XMLEVENTO,', 'CASE WHEN O.CONTROLE = ''E'' OR O.STATUSREG <> ''F'' THEN NULL '
                                                                       ||             'ELSE O.XMLEVENTO '
                                                                       ||        'END,');

                    /*IMPORTANTE: POR SER O ÚLTIMO CAMPO, NÃO É NECESSÁRIO FAZER O REPLACE DO CAMPO COM A VÍRGULA DEPOIS NO NOME*/
                    P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.XMLRETORNO', 'CASE WHEN O.CONTROLE = ''E'' OR O.STATUSREG <> ''F'' THEN NULL '
                                                                       ||              'ELSE O.XMLRETORNO '
                                                                       ||         'END');

                END IF; 

                queSql :=      'MERGE INTO '||EVE.NOMETAB||' N '
                            || 'USING (SELECT '||P_INSERT_COLUMNS||' '
                            ||        'FROM '||EVE.NOMETAB||' ' 
                            ||        'WHERE CODEMP = :CODEMP '
                            ||          'AND DTREF = :DTREF_OLD '
                            ||          'AND TPAMB = :TPAMB '
                            ||          'AND SEQUENCIA = :SEQUENCIA_OLD '
                            ||        ') O ' 
                            || 'ON (N.CODEMP = O.CODEMP AND '
                            ||     'N.DTREF = :DTREF AND '
                            ||     'N.TPAMB = O.TPAMB AND '
                            ||     'N.SEQUENCIA = :SEQUENCIA AND ' 
                            ||     'N.CHAVE = O.CHAVE) '
                            || 'WHEN NOT MATCHED THEN INSERT ('||P_INSERT_COLUMNS||') '
                            || 'VALUES ('||P_INSERT_VALUES||')';

                EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF_OLD, P_TPAMB, P_SEQUENCIA_OLD, P_DTREF, P_SEQUENCIA_NEW, P_DTREF, P_SEQUENCIA_NEW;                                    
            END IF;

            FOR EVEF IN (SELECT NOMEEVENTO, NOMETAB
                         FROM TRIMON
                         WHERE NOMETABPAI = EVE.NOMETAB
                         GROUP BY NOMEEVENTO, NOMETAB
                         ORDER BY NOMEEVENTO 
                        ) 
            LOOP
                SNK_PROCESSA_DADOS_REINF(P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_ATUAL, P_TIPDADOS, EVEF.NOMEEVENTO, EVEF.NOMETAB, P_SEQUENCIA_NEW, P_RESULT);
            END LOOP;
        END IF;

        P_RESULT := P_SEQUENCIA_NEW;
    END LOOP;

    /*CHAMANDO A TOTALIZAÇÃO DO RESUMO PARA A SEQUÊNCIA GERADA*/
    IF P_NOMETAB IS NULL THEN
        SNK_TOTALIZA_RESUMO_REINF(P_CODEMP, P_DTREF, P_TPAMB, P_RESULT);
    END IF;    
EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    IF queSql IS NOT NULL THEN
        SELECT COUNT(1) INTO P_COUNT
        FROM LOGREINF
        WHERE DTOCOR = SYSDATE
         AND CODUSU = STP_GET_CODUSULOGADO();
        IF P_COUNT = 0 THEN
            INSERT INTO LOGREINF(DTOCOR, CODUSU, SQLERR)
                SELECT SYSDATE, STP_GET_CODUSULOGADO(), queSql FROM DUAL; 
        END IF;
    END IF;
    COMMIT;
    RAISE_APPLICATION_ERROR(-20101, SQLERRM);
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53454-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5345300
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_PROCESSA_DADOS_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210008
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_PROCESSA_DADOS_REINF' NOMEOBJ, 53453 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, '8a2f7928b9083fa51a120a172d0b2ba7' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_PROCESSA_DADOS_REINF' and THO.hashcode = '8a2f7928b9083fa51a120a172d0b2ba7')
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53455-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRG_UPD_DLT_TGFCAB_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TRG_UPD_DLT_TGFCAB_REINF
NomeObjeto: TRG_UPD_DLT_TGFCAB_REINF
TipoObjeto: TRIGGER
NomeTabela: TGFCAB
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_UPD_DLT_TGFCAB_REINF
BEFORE UPDATE OR DELETE ON TGFCAB
FOR EACH ROW
WHEN (
NVL(OLD.TIPMOV, ' ') IN ('C', 'V') AND OLD.STATUSNOTA = 'L'
      )
DECLARE 
    P_REG_2010      NUMBER(10);
    P_REG_2020      NUMBER(10);
    P_REG_2050      NUMBER(10);
    P_REG_2060      NUMBER(10);
    P_VALIDOU       BOOLEAN := FALSE;
    P_COUNT         NUMBER(10) := 0;
    P_DTREF_OLD        DATE;
    P_DTREF_NEW        DATE;
BEGIN
    P_DTREF_OLD := TRUNC(:OLD.DTNEG, 'MM');
    P_DTREF_NEW := TRUNC(:NEW.DTNEG, 'MM');

    /*VERIFICANDO SE EXISTE A EMPRESA DESTA NOTA CONFIGURADA NO REINF CONSIDERANDO O DTNEG COMO REFERÊNCIA*/
    /*SE HOUVE ALTERAÇÃO DA EMPRESA, NÃO POSSO SIMPLESMENTE VALIDAR A REGRA ABAIXO, POIS PODE SER QUE A EMPRESA NOVA NÃO EXISTA NO REINF, MAS A EMPRESA ANTIGA EXISTA,
    O MESMO É VÁLIDO PARA O DTREF*/
    IF :OLD.CODEMP = :NEW.CODEMP AND P_DTREF_OLD  <> P_DTREF_NEW THEN
        SELECT COUNT(1) INTO P_COUNT 
        FROM TRICAB
        WHERE CODEMP = :NEW.CODEMP
            AND DTREF = P_DTREF_NEW;

        IF P_COUNT = 0 THEN
            RETURN;
        END IF;
    END IF;

    /*SE ESTIVER NO DELETE OU SE ALGUM DOS CAMPOS ABAIXO FOREM ALTERADOS, TODOS OS EVENTOS DEVEM SER ANALISADOS: R-2010, R-2020, R-2050 E R-2060*/
    IF DELETING OR
       (
        :OLD.CODEMP <> :NEW.CODEMP OR 
        :OLD.CODPARC <> :NEW.CODPARC OR 
        :OLD.CODTIPOPER <> :NEW.CODTIPOPER OR 
         P_DTREF_OLD  <> P_DTREF_NEW OR 
         NVL(:OLD.CODOBRA, -1) <> NVL(:NEW.CODOBRA, -1)
        )  THEN

        P_VALIDOU := TRUE;

        SELECT COUNT(1) INTO P_REG_2010
        FROM TRIINFST INFST
        WHERE INFST.CODEMP = :OLD.CODEMP
            AND INFST.DTREF = P_DTREF_OLD
            AND INFST.NUNOTA = :OLD.NUNOTA
            AND EXISTS (SELECT 1
                        FROM TRIRCST RCST
                        WHERE RCST.CODEMP = INFST.CODEMP
                            AND RCST.DTREF = INFST.DTREF
                            AND RCST.TPAMB = INFST.TPAMB  
                            AND RCST.SEQUENCIA = INFST.SEQUENCIA
                            AND RCST.CHAVE = INFST.CHAVE
                            AND RCST.CONTROLE = 'I')
            AND EXISTS (SELECT 1
                        FROM TRICAB CAB
                        WHERE CAB.CODEMP = INFST.CODEMP
                          AND CAB.DTREF = INFST.DTREF
                          AND CAB.TPAMB = INFST.TPAMB
                          AND CAB.SEQUENCIAATUAL = INFST.SEQUENCIA);

        SELECT COUNT(1) INTO P_REG_2020
        FROM TRIINFSP INFSP
        WHERE INFSP.CODEMP = :OLD.CODEMP
            AND INFSP.DTREF = P_DTREF_OLD
            AND INFSP.NUNOTA = :OLD.NUNOTA
            AND EXISTS (SELECT 1
                        FROM TRIRCSP RCSP
                        WHERE RCSP.CODEMP = INFSP.CODEMP
                            AND RCSP.DTREF = INFSP.DTREF
                            AND RCSP.TPAMB = INFSP.TPAMB  
                            AND RCSP.SEQUENCIA = INFSP.SEQUENCIA
                            AND RCSP.CHAVE = INFSP.CHAVE
                            AND RCSP.CONTROLE = 'I')
            AND EXISTS (SELECT 1
                        FROM TRICAB CAB
                        WHERE CAB.CODEMP = INFSP.CODEMP
                          AND CAB.DTREF = INFSP.DTREF
                          AND CAB.TPAMB = INFSP.TPAMB
                          AND CAB.SEQUENCIAATUAL = INFSP.SEQUENCIA);

        SELECT COUNT(1) INTO P_REG_2050
        FROM TRINFPR NFPR
        WHERE NFPR.CODEMP = :OLD.CODEMP
            AND NFPR.DTREF = P_DTREF_OLD
            AND NFPR.NUNOTA = :OLD.NUNOTA
            AND EXISTS (SELECT 1
                        FROM TRICPPR CPPR
                        WHERE CPPR.CODEMP = NFPR.CODEMP
                            AND CPPR.DTREF = NFPR.DTREF
                            AND CPPR.TPAMB = NFPR.TPAMB  
                            AND CPPR.SEQUENCIA = NFPR.SEQUENCIA
                            AND CPPR.CHAVE = NFPR.CHAVE
                            AND CPPR.CONTROLE = 'I')
            AND EXISTS (SELECT 1
                        FROM TRICAB CAB
                        WHERE CAB.CODEMP = NFPR.CODEMP
                          AND CAB.DTREF = NFPR.DTREF
                          AND CAB.TPAMB = NFPR.TPAMB
                          AND CAB.SEQUENCIAATUAL = NFPR.SEQUENCIA);

        SELECT COUNT(1) INTO P_REG_2060
        FROM TRINFRB NFRB
        WHERE NFRB.CODEMP = :OLD.CODEMP
            AND NFRB.DTREF = P_DTREF_OLD
            AND NFRB.NUNOTA = :OLD.NUNOTA
            AND EXISTS (SELECT 1
                        FROM TRICPRB CPRB
                        WHERE CPRB.CODEMP = NFRB.CODEMP
                            AND CPRB.DTREF = NFRB.DTREF
                            AND CPRB.TPAMB = NFRB.TPAMB  
                            AND CPRB.SEQUENCIA = NFRB.SEQUENCIA
                            AND CPRB.CHAVE = NFRB.CHAVE
                            AND CPRB.CONTROLE = 'I')
            AND EXISTS (SELECT 1
                        FROM TRICAB CAB
                        WHERE CAB.CODEMP = NFRB.CODEMP
                          AND CAB.DTREF = NFRB.DTREF
                          AND CAB.TPAMB = NFRB.TPAMB
                          AND CAB.SEQUENCIAATUAL = NFRB.SEQUENCIA);

        IF P_REG_2010 > 0 THEN
            UPDATE TRIRCST 
            SET CONTROLE = 'A'
            WHERE CONTROLE = 'I'
                AND CODEMP = :OLD.CODEMP
                AND DTREF = P_DTREF_OLD
                AND EXISTS (SELECT 1
                            FROM TRIINFST INFST
                            WHERE INFST.NUNOTA = :OLD.NUNOTA
                                AND INFST.CODEMP = TRIRCST.CODEMP
                                AND INFST.DTREF = TRIRCST.DTREF
                                AND INFST.TPAMB = TRIRCST.TPAMB
                                AND INFST.SEQUENCIA = TRIRCST.SEQUENCIA
                                AND INFST.CHAVE = TRIRCST.CHAVE)
                AND EXISTS (SELECT 1
                            FROM TRICAB CAB 
                            WHERE CAB.CODEMP = TRIRCST.CODEMP
                                AND CAB.DTREF = TRIRCST.DTREF
                                AND CAB.TPAMB = TRIRCST.TPAMB
                                AND CAB.SEQUENCIAATUAL = TRIRCST.SEQUENCIA);
        END IF;

        IF P_REG_2020 > 0 THEN
            UPDATE TRIRCSP 
            SET CONTROLE = 'A'
            WHERE CONTROLE = 'I'
                AND CODEMP = :OLD.CODEMP
                AND DTREF = P_DTREF_OLD
                AND EXISTS (SELECT 1
                            FROM TRIINFSP INFSP
                            WHERE INFSP.NUNOTA = :OLD.NUNOTA
                                AND INFSP.CODEMP = TRIRCSP.CODEMP
                                AND INFSP.DTREF = TRIRCSP.DTREF
                                AND INFSP.TPAMB = TRIRCSP.TPAMB
                                AND INFSP.SEQUENCIA = TRIRCSP.SEQUENCIA
                                AND INFSP.CHAVE = TRIRCSP.CHAVE)
                AND EXISTS (SELECT 1
                            FROM TRICAB CAB 
                            WHERE CAB.CODEMP = TRIRCSP.CODEMP
                                AND CAB.DTREF = TRIRCSP.DTREF
                                AND CAB.TPAMB = TRIRCSP.TPAMB
                                AND CAB.SEQUENCIAATUAL = TRIRCSP.SEQUENCIA);
        END IF;

        IF P_REG_2050 > 0 THEN
            UPDATE TRICPPR 
            SET CONTROLE = 'A'
            WHERE CONTROLE = 'I'
                AND CODEMP = :OLD.CODEMP
                AND DTREF = P_DTREF_OLD
                AND EXISTS (SELECT 1
                            FROM TRINFPR NFPR
                            WHERE NFPR.NUNOTA = :OLD.NUNOTA
                                AND NFPR.CODEMP = TRICPPR.CODEMP
                                AND NFPR.DTREF = TRICPPR.DTREF
                                AND NFPR.TPAMB = TRICPPR.TPAMB
                                AND NFPR.SEQUENCIA = TRICPPR.SEQUENCIA
                                AND NFPR.CHAVE = TRICPPR.CHAVE)
                AND EXISTS (SELECT 1
                            FROM TRICAB CAB 
                            WHERE CAB.CODEMP = TRICPPR.CODEMP
                                AND CAB.DTREF = TRICPPR.DTREF
                                AND CAB.TPAMB = TRICPPR.TPAMB
                                AND CAB.SEQUENCIAATUAL = TRICPPR.SEQUENCIA);
        END IF;

        IF P_REG_2060 > 0 THEN
            UPDATE TRICPRB 
            SET CONTROLE = 'A'
            WHERE CONTROLE = 'I'
                AND CODEMP = :OLD.CODEMP
                AND DTREF = P_DTREF_OLD
                AND EXISTS (SELECT 1
                            FROM TRINFRB NFRB
                            WHERE NFRB.NUNOTA = :OLD.NUNOTA
                                AND NFRB.CODEMP = TRICPRB.CODEMP
                                AND NFRB.DTREF = TRICPRB.DTREF
                                AND NFRB.TPAMB = TRICPRB.TPAMB
                                AND NFRB.SEQUENCIA = TRICPRB.SEQUENCIA
                                AND NFRB.CHAVE = TRICPRB.CHAVE)
                AND EXISTS (SELECT 1
                            FROM TRICAB CAB 
                            WHERE CAB.CODEMP = TRICPRB.CODEMP
                                AND CAB.DTREF = TRICPRB.DTREF
                                AND CAB.TPAMB = TRICPRB.TPAMB
                                AND CAB.SEQUENCIAATUAL = TRICPRB.SEQUENCIA);
        END IF;
    END IF;

    /*A VALIDAÇÃO DA ALTERAÇÃO PARA OS CAMPOS ABAIXO É VÁLIDA SOMENTE PARA OS EVENTOS R-2010 E R-2020, MAS SE A CONDIÇÃO REALIZADA ACIMA JÁ FOI SUFICIENTE PARA VALIDAR
      A ALTERAÇÃO, NÃO PRECISAMOS VALIDAR AQUI NOVAMENTE*/
    IF P_VALIDOU = FALSE AND
       (
         NVL(:OLD.SERIENOTA, ' ') <> NVL(:NEW.SERIENOTA, ' ') OR
         NVL(:OLD.NUMNOTA, -1) <> NVL(:NEW.NUMNOTA, -1) OR
         NVL(:OLD.OBSERVACAO, ' ') <> NVL(:NEW.OBSERVACAO, ' ')
        )  THEN

        SELECT COUNT(1) INTO P_REG_2010
        FROM TRIINFST INFST
        WHERE INFST.CODEMP = :OLD.CODEMP
            AND INFST.DTREF = P_DTREF_OLD
            AND INFST.NUNOTA = :OLD.NUNOTA
            AND EXISTS (SELECT 1
                        FROM TRIRCST RCST
                        WHERE RCST.CODEMP = INFST.CODEMP
                            AND RCST.DTREF = INFST.DTREF
                            AND RCST.TPAMB = INFST.TPAMB  
                            AND RCST.SEQUENCIA = INFST.SEQUENCIA
                            AND RCST.CHAVE = INFST.CHAVE
                            AND RCST.CONTROLE = 'I')
            AND EXISTS (SELECT 1
                        FROM TRICAB CAB
                        WHERE CAB.CODEMP = INFST.CODEMP
                          AND CAB.DTREF = INFST.DTREF
                          AND CAB.TPAMB = INFST.TPAMB
                          AND CAB.SEQUENCIAATUAL = INFST.SEQUENCIA);

        SELECT COUNT(1) INTO P_REG_2020
        FROM TRIINFSP INFSP
        WHERE INFSP.CODEMP = :OLD.CODEMP
            AND INFSP.DTREF = P_DTREF_OLD
            AND INFSP.NUNOTA = :OLD.NUNOTA
            AND EXISTS (SELECT 1
                        FROM TRIRCSP RCSP
                        WHERE RCSP.CODEMP = INFSP.CODEMP
                            AND RCSP.DTREF = INFSP.DTREF
                            AND RCSP.TPAMB = INFSP.TPAMB  
                            AND RCSP.SEQUENCIA = INFSP.SEQUENCIA
                            AND RCSP.CHAVE = INFSP.CHAVE
                            AND RCSP.CONTROLE = 'I')
            AND EXISTS (SELECT 1
                        FROM TRICAB CAB
                        WHERE CAB.CODEMP = INFSP.CODEMP
                          AND CAB.DTREF = INFSP.DTREF
                          AND CAB.TPAMB = INFSP.TPAMB
                          AND CAB.SEQUENCIAATUAL = INFSP.SEQUENCIA);

        IF P_REG_2010 > 0 THEN
            UPDATE TRIRCST 
            SET CONTROLE = 'A'
            WHERE CONTROLE = 'I'
                AND CODEMP = :OLD.CODEMP
                AND DTREF = P_DTREF_OLD
                AND EXISTS (SELECT 1
                            FROM TRIINFST INFST
                            WHERE INFST.NUNOTA = :OLD.NUNOTA
                                AND INFST.CODEMP = TRIRCST.CODEMP
                                AND INFST.DTREF = TRIRCST.DTREF
                                AND INFST.TPAMB = TRIRCST.TPAMB
                                AND INFST.SEQUENCIA = TRIRCST.SEQUENCIA
                                AND INFST.CHAVE = TRIRCST.CHAVE)
                AND EXISTS (SELECT 1
                            FROM TRICAB CAB 
                            WHERE CAB.CODEMP = TRIRCST.CODEMP
                                AND CAB.DTREF = TRIRCST.DTREF
                                AND CAB.TPAMB = TRIRCST.TPAMB
                                AND CAB.SEQUENCIAATUAL = TRIRCST.SEQUENCIA);
        END IF;

        IF P_REG_2020 > 0 THEN
            UPDATE TRIRCSP 
            SET CONTROLE = 'A'
            WHERE CONTROLE = 'I'
                AND CODEMP = :OLD.CODEMP
                AND DTREF = P_DTREF_OLD
                AND EXISTS (SELECT 1
                            FROM TRIINFSP INFSP
                            WHERE INFSP.NUNOTA = :OLD.NUNOTA
                                AND INFSP.CODEMP = TRIRCSP.CODEMP
                                AND INFSP.DTREF = TRIRCSP.DTREF
                                AND INFSP.TPAMB = TRIRCSP.TPAMB
                                AND INFSP.SEQUENCIA = TRIRCSP.SEQUENCIA
                                AND INFSP.CHAVE = TRIRCSP.CHAVE)
                AND EXISTS (SELECT 1
                            FROM TRICAB CAB 
                            WHERE CAB.CODEMP = TRIRCSP.CODEMP
                                AND CAB.DTREF = TRIRCSP.DTREF
                                AND CAB.TPAMB = TRIRCSP.TPAMB
                                AND CAB.SEQUENCIAATUAL = TRIRCSP.SEQUENCIA);
        END IF;
    END IF;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53456-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5345500
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_UPD_DLT_TGFCAB_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210008
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_UPD_DLT_TGFCAB_REINF' NOMEOBJ, 53455 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, 'e237949eaf7abb519812d1506bdf0b98' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_UPD_DLT_TGFCAB_REINF' and THO.hashcode = 'e237949eaf7abb519812d1506bdf0b98')
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53457-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRG_UPD_DLT_TGFITE_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TRG_UPD_DLT_TGFITE_REINF
NomeObjeto: TRG_UPD_DLT_TGFITE_REINF
TipoObjeto: TRIGGER
NomeTabela: TGFITE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_UPD_DLT_TGFITE_REINF
BEFORE UPDATE OR DELETE ON TGFITE
FOR EACH ROW
DECLARE 
    P_REG_2010     NUMBER(10);
    P_REG_2020     NUMBER(10);
    P_REG_2050     NUMBER(10);
    P_REG_2060     NUMBER(10);
    P_COUNT        NUMBER(10) := 0;
    P_DTNEG        DATE;
BEGIN
    /*A TRIGGER TRG_DLT_TGFCAB_AFTER PODE ESTAR CHAMANDO O DELETE DA TGFITE, LOGO AQUI NÃO TEREMOS MAIS TGFCAB, POR ISSO DEVEMOS TRATA NO EXCEPTION ABAIXO*/
    BEGIN
        SELECT TRUNC(DTNEG, 'MM') INTO P_DTNEG
        FROM TGFCAB
        WHERE NUNOTA = :OLD.NUNOTA;
    EXCEPTION WHEN NO_DATA_FOUND THEN
        P_DTNEG := NULL;
    END;

    IF P_DTNEG IS NULL THEN
        RETURN;
    END IF;

    /*VERIFICANDO SE EXISTE A EMPRESA DESTA NOTA CONFIGURADA NO REINF CONSIDERANDO O DTNEG COMO REFERÊNCIA*/
    SELECT COUNT(1) INTO P_COUNT 
    FROM TRICAB
    WHERE CODEMP = :OLD.CODEMP
        AND DTREF = P_DTNEG;

    IF P_COUNT = 0 THEN
        RETURN;
    END IF;

    /*AQUI VERIFICO DIRETO NAS TABELAS DO REINF SE O NUNOTA ESTA LÁ PARA NÃO PRECISAR VERIFICAR A TGFCAB NOVAMENTE*/
    SELECT COUNT(1) INTO P_REG_2010
    FROM TRIINFST INFST
    WHERE INFST.CODEMP = :OLD.CODEMP
        AND INFST.DTREF = P_DTNEG
        AND INFST.NUNOTA = :OLD.NUNOTA
        AND EXISTS (SELECT 1
                    FROM TRIRCST RCST
                    WHERE RCST.CODEMP = INFST.CODEMP
                        AND RCST.DTREF = INFST.DTREF
                        AND RCST.TPAMB = INFST.TPAMB  
                        AND RCST.SEQUENCIA = INFST.SEQUENCIA
                        AND RCST.CHAVE = INFST.CHAVE
                        AND RCST.CONTROLE = 'I')
        AND EXISTS (SELECT 1
                    FROM TRICAB CAB
                    WHERE CAB.CODEMP = INFST.CODEMP
                      AND CAB.DTREF = INFST.DTREF
                      AND CAB.TPAMB = INFST.TPAMB
                      AND CAB.SEQUENCIAATUAL = INFST.SEQUENCIA);

    SELECT COUNT(1) INTO P_REG_2020
    FROM TRIINFSP INFSP
    WHERE INFSP.CODEMP = :OLD.CODEMP
        AND INFSP.DTREF = P_DTNEG
        AND INFSP.NUNOTA = :OLD.NUNOTA
        AND EXISTS (SELECT 1
                    FROM TRIRCSP RCSP
                    WHERE RCSP.CODEMP = INFSP.CODEMP
                        AND RCSP.DTREF = INFSP.DTREF
                        AND RCSP.TPAMB = INFSP.TPAMB  
                        AND RCSP.SEQUENCIA = INFSP.SEQUENCIA
                        AND RCSP.CHAVE = INFSP.CHAVE
                        AND RCSP.CONTROLE = 'I')
        AND EXISTS (SELECT 1
                    FROM TRICAB CAB
                    WHERE CAB.CODEMP = INFSP.CODEMP
                      AND CAB.DTREF = INFSP.DTREF
                      AND CAB.TPAMB = INFSP.TPAMB
                      AND CAB.SEQUENCIAATUAL = INFSP.SEQUENCIA);

    SELECT COUNT(1) INTO P_REG_2050
    FROM TRINFPR NFPR
    WHERE NFPR.CODEMP = :OLD.CODEMP
        AND NFPR.DTREF = P_DTNEG
        AND NFPR.NUNOTA = :OLD.NUNOTA
        AND EXISTS (SELECT 1
                    FROM TRICPPR CPPR
                    WHERE CPPR.CODEMP = NFPR.CODEMP
                        AND CPPR.DTREF = NFPR.DTREF
                        AND CPPR.TPAMB = NFPR.TPAMB  
                        AND CPPR.SEQUENCIA = NFPR.SEQUENCIA
                        AND CPPR.CHAVE = NFPR.CHAVE
                        AND CPPR.CONTROLE = 'I')
        AND EXISTS (SELECT 1
                    FROM TRICAB CAB
                    WHERE CAB.CODEMP = NFPR.CODEMP
                      AND CAB.DTREF = NFPR.DTREF
                      AND CAB.TPAMB = NFPR.TPAMB
                      AND CAB.SEQUENCIAATUAL = NFPR.SEQUENCIA);

    SELECT COUNT(1) INTO P_REG_2060
    FROM TRINFRB NFRB
    WHERE NFRB.CODEMP = :OLD.CODEMP
        AND NFRB.DTREF = P_DTNEG
        AND NFRB.NUNOTA = :OLD.NUNOTA
        AND EXISTS (SELECT 1
                    FROM TRICPRB CPRB
                    WHERE CPRB.CODEMP = NFRB.CODEMP
                        AND CPRB.DTREF = NFRB.DTREF
                        AND CPRB.TPAMB = NFRB.TPAMB  
                        AND CPRB.SEQUENCIA = NFRB.SEQUENCIA
                        AND CPRB.CHAVE = NFRB.CHAVE
                        AND CPRB.CONTROLE = 'I')
        AND EXISTS (SELECT 1
                    FROM TRICAB CAB
                    WHERE CAB.CODEMP = NFRB.CODEMP
                      AND CAB.DTREF = NFRB.DTREF
                      AND CAB.TPAMB = NFRB.TPAMB
                      AND CAB.SEQUENCIAATUAL = NFRB.SEQUENCIA);

    IF (P_REG_2010 > 0 OR P_REG_2020 > 0 OR P_REG_2060 > 0) AND
         ( DELETING OR 
           (
            :OLD.CODEMP <> :NEW.CODEMP OR
            :OLD.VLRTOT <> :NEW.VLRTOT OR 
            :OLD.CODPROD <> :NEW.CODPROD OR
            :OLD.USOPROD <> :NEW.USOPROD    /*ESTE CAMPO NÃO É UTILIZADO PELA VIEW DO EVENTO R-2050, POR ISSO A VALIDAÇÃO DE ALTERAÇÃO DESSE EVENTO FICOU SEPARADA*/
            )
          )  THEN

        IF P_REG_2010 > 0 THEN
            UPDATE TRIRCST
            SET CONTROLE = 'A'
            WHERE CONTROLE = 'I'
                AND CODEMP = :OLD.CODEMP
                AND DTREF = P_DTNEG
                AND EXISTS (SELECT 1
                            FROM TRIINFST INFST
                            WHERE INFST.NUNOTA = :OLD.NUNOTA
                                AND INFST.CODEMP = TRIRCST.CODEMP
                                AND INFST.DTREF = TRIRCST.DTREF
                                AND INFST.TPAMB = TRIRCST.TPAMB
                                AND INFST.SEQUENCIA = TRIRCST.SEQUENCIA
                                AND INFST.CHAVE = TRIRCST.CHAVE)
                AND EXISTS (SELECT 1
                            FROM TRICAB CAB 
                            WHERE CAB.CODEMP = TRIRCST.CODEMP
                                AND CAB.DTREF = TRIRCST.DTREF
                                AND CAB.TPAMB = TRIRCST.TPAMB
                                AND CAB.SEQUENCIAATUAL = TRIRCST.SEQUENCIA);
        END IF;

        IF P_REG_2020 > 0 THEN
            UPDATE TRIRCSP 
            SET CONTROLE = 'A'
            WHERE CONTROLE = 'I'
                AND CODEMP = :OLD.CODEMP
                AND DTREF = P_DTNEG
                AND EXISTS (SELECT 1
                            FROM TRIINFSP INFSP
                            WHERE INFSP.NUNOTA = :OLD.NUNOTA
                                AND INFSP.CODEMP = TRIRCSP.CODEMP
                                AND INFSP.DTREF = TRIRCSP.DTREF
                                AND INFSP.TPAMB = TRIRCSP.TPAMB
                                AND INFSP.SEQUENCIA = TRIRCSP.SEQUENCIA
                                AND INFSP.CHAVE = TRIRCSP.CHAVE)
                AND EXISTS (SELECT 1
                            FROM TRICAB CAB 
                            WHERE CAB.CODEMP = TRIRCSP.CODEMP
                                AND CAB.DTREF = TRIRCSP.DTREF
                                AND CAB.TPAMB = TRIRCSP.TPAMB
                                AND CAB.SEQUENCIAATUAL = TRIRCSP.SEQUENCIA);
        END IF;

        IF P_REG_2060 > 0 THEN
            UPDATE TRICPPR 
            SET CONTROLE = 'A'
            WHERE CONTROLE = 'I'
                AND CODEMP = :OLD.CODEMP
                AND DTREF = P_DTNEG
                AND EXISTS (SELECT 1
                            FROM TRINFPR NFPR
                            WHERE NFPR.NUNOTA = :OLD.NUNOTA
                                AND NFPR.CODEMP = TRICPPR.CODEMP
                                AND NFPR.DTREF = TRICPPR.DTREF
                                AND NFPR.TPAMB = TRICPPR.TPAMB
                                AND NFPR.SEQUENCIA = TRICPPR.SEQUENCIA
                                AND NFPR.CHAVE = TRICPPR.CHAVE)
                AND EXISTS (SELECT 1
                            FROM TRICAB CAB 
                            WHERE CAB.CODEMP = TRICPPR.CODEMP
                                AND CAB.DTREF = TRICPPR.DTREF
                                AND CAB.TPAMB = TRICPPR.TPAMB
                                AND CAB.SEQUENCIAATUAL = TRICPPR.SEQUENCIA);
        END IF;
    END IF;

    IF P_REG_2050 > 0 AND
         ( DELETING OR 
           (
            :OLD.CODEMP <> :NEW.CODEMP OR
            :OLD.VLRTOT <> :NEW.VLRTOT OR 
            :OLD.CODPROD <> :NEW.CODPROD
            )
          )  THEN

        UPDATE TRICPPR 
        SET CONTROLE = 'A'
        WHERE CONTROLE = 'I'
            AND CODEMP = :OLD.CODEMP
            AND DTREF = P_DTNEG
            AND EXISTS (SELECT 1
                        FROM TRINFPR NFPR
                        WHERE NFPR.NUNOTA = :OLD.NUNOTA
                            AND NFPR.CODEMP = TRICPPR.CODEMP
                            AND NFPR.DTREF = TRICPPR.DTREF
                            AND NFPR.TPAMB = TRICPPR.TPAMB
                            AND NFPR.SEQUENCIA = TRICPPR.SEQUENCIA
                            AND NFPR.CHAVE = TRICPPR.CHAVE)
            AND EXISTS (SELECT 1
                        FROM TRICAB CAB 
                        WHERE CAB.CODEMP = TRICPPR.CODEMP
                            AND CAB.DTREF = TRICPPR.DTREF
                            AND CAB.TPAMB = TRICPPR.TPAMB
                            AND CAB.SEQUENCIAATUAL = TRICPPR.SEQUENCIA);
    END IF;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53458-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5345700
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_UPD_DLT_TGFITE_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210008
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_UPD_DLT_TGFITE_REINF' NOMEOBJ, 53457 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '32a5403011748ef7bf2b4bfe08f3fbb3' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_UPD_DLT_TGFITE_REINF' and THO.hashcode = '32a5403011748ef7bf2b4bfe08f3fbb3')
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53459-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRG_UPD_DLT_TGFDIN_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TRG_UPD_DLT_TGFDIN_REINF
NomeObjeto: TRG_UPD_DLT_TGFDIN_REINF
TipoObjeto: TRIGGER
NomeTabela: TGFDIN
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_UPD_DLT_TGFDIN_REINF
BEFORE UPDATE OR DELETE ON TGFDIN
FOR EACH ROW
WHEN (
    OLD.CODIMP = 5 OR                        /*CODIMP: 5 (UTILIZADO PELOS EVENTOS R-2010, R-2020 E R-2050)*/
    (OLD.CODIMP = 4 AND OLD.CODINC = 2)     /*CODIMP: 4 (UTILIZADO PELO EVENTO R-2060)*/
      )
DECLARE 
    P_REG_2010     NUMBER(10) := 0;
    P_REG_2020     NUMBER(10) := 0;
    P_REG_2050     NUMBER(10) := 0;
    P_REG_2060     NUMBER(10) := 0;
    P_COUNT        NUMBER(10) := 0;
    P_CODEMP       NUMBER(5);
    P_DTNEG        DATE;
BEGIN
    /*A TRIGGER TRG_DLT_TGFCAB_AFTER PODE ESTAR CHAMANDO O DELETE DA TGFITE, QUE CHAMA O DELETE DA TGFDIN, LOGO AQUI NÃO TEREMOS MAIS TGFCAB, POR ISSO DEVEMOS TRATA NO EXCEPTION ABAIXO*/
    BEGIN
        SELECT CODEMP, TRUNC(DTNEG, 'MM') INTO P_CODEMP, P_DTNEG
        FROM TGFCAB
        WHERE NUNOTA = :OLD.NUNOTA;
    EXCEPTION WHEN NO_DATA_FOUND THEN
        P_DTNEG := NULL;
    END;

    IF P_CODEMP IS NULL OR P_DTNEG IS NULL THEN
        RETURN;
    END IF;

    /*VERIFICANDO SE EXISTE A EMPRESA DESTA NOTA CONFIGURADA NO REINF CONSIDERANDO O DTNEG COMO REFERÊNCIA*/
    SELECT COUNT(1) INTO P_COUNT 
    FROM TRICAB
    WHERE CODEMP = P_CODEMP
        AND DTREF = P_DTNEG;

    IF P_COUNT = 0 THEN
        RETURN;
    END IF;

    /*AQUI VERIFICO DIRETO NAS TABELAS DO REINF SE O NUNOTA ESTA LÁ PARA NÃO PRECISAR VERIFICAR A TGFCAB NOVAMENTE*/
    IF :OLD.CODIMP = 5 THEN
        SELECT COUNT(1) INTO P_REG_2010
        FROM TRIINFST INFST
        WHERE INFST.CODEMP = P_CODEMP
            AND INFST.DTREF = P_DTNEG
            AND INFST.NUNOTA = :OLD.NUNOTA
            AND EXISTS (SELECT 1
                        FROM TRIRCST RCST
                        WHERE RCST.CODEMP = INFST.CODEMP
                            AND RCST.DTREF = INFST.DTREF
                            AND RCST.TPAMB = INFST.TPAMB  
                            AND RCST.SEQUENCIA = INFST.SEQUENCIA
                            AND RCST.CHAVE = INFST.CHAVE
                            AND RCST.CONTROLE = 'I')
            AND EXISTS (SELECT 1
                        FROM TRICAB CAB
                        WHERE CAB.CODEMP = INFST.CODEMP
                          AND CAB.DTREF = INFST.DTREF
                          AND CAB.TPAMB = INFST.TPAMB
                          AND CAB.SEQUENCIAATUAL = INFST.SEQUENCIA);

        SELECT COUNT(1) INTO P_REG_2020
        FROM TRIINFSP INFSP
        WHERE INFSP.CODEMP = P_CODEMP
            AND INFSP.DTREF = P_DTNEG
            AND INFSP.NUNOTA = :OLD.NUNOTA
            AND EXISTS (SELECT 1
                        FROM TRIRCSP RCSP
                        WHERE RCSP.CODEMP = INFSP.CODEMP
                            AND RCSP.DTREF = INFSP.DTREF
                            AND RCSP.TPAMB = INFSP.TPAMB  
                            AND RCSP.SEQUENCIA = INFSP.SEQUENCIA
                            AND RCSP.CHAVE = INFSP.CHAVE
                            AND RCSP.CONTROLE = 'I')
            AND EXISTS (SELECT 1
                        FROM TRICAB CAB
                        WHERE CAB.CODEMP = INFSP.CODEMP
                          AND CAB.DTREF = INFSP.DTREF
                          AND CAB.TPAMB = INFSP.TPAMB
                          AND CAB.SEQUENCIAATUAL = INFSP.SEQUENCIA);

        SELECT COUNT(1) INTO P_REG_2050
        FROM TRINFPR NFPR
        WHERE NFPR.CODEMP = P_CODEMP
            AND NFPR.DTREF = P_DTNEG
            AND NFPR.NUNOTA = :OLD.NUNOTA
            AND EXISTS (SELECT 1
                        FROM TRICPPR CPPR
                        WHERE CPPR.CODEMP = NFPR.CODEMP
                            AND CPPR.DTREF = NFPR.DTREF
                            AND CPPR.TPAMB = NFPR.TPAMB  
                            AND CPPR.SEQUENCIA = NFPR.SEQUENCIA
                            AND CPPR.CHAVE = NFPR.CHAVE
                            AND CPPR.CONTROLE = 'I')
            AND EXISTS (SELECT 1
                        FROM TRICAB CAB
                        WHERE CAB.CODEMP = NFPR.CODEMP
                          AND CAB.DTREF = NFPR.DTREF
                          AND CAB.TPAMB = NFPR.TPAMB
                          AND CAB.SEQUENCIAATUAL = NFPR.SEQUENCIA);
    ELSE
        SELECT COUNT(1) INTO P_REG_2060
        FROM TRINFRB NFRB
        WHERE NFRB.CODEMP = P_CODEMP
            AND NFRB.DTREF = P_DTNEG
            AND NFRB.NUNOTA = :OLD.NUNOTA
            AND EXISTS (SELECT 1
                        FROM TRICPRB CPRB
                        WHERE CPRB.CODEMP = NFRB.CODEMP
                            AND CPRB.DTREF = NFRB.DTREF
                            AND CPRB.TPAMB = NFRB.TPAMB  
                            AND CPRB.SEQUENCIA = NFRB.SEQUENCIA
                            AND CPRB.CHAVE = NFRB.CHAVE
                            AND CPRB.CONTROLE = 'I')
            AND EXISTS (SELECT 1
                        FROM TRICAB CAB
                        WHERE CAB.CODEMP = NFRB.CODEMP
                          AND CAB.DTREF = NFRB.DTREF
                          AND CAB.TPAMB = NFRB.TPAMB
                          AND CAB.SEQUENCIAATUAL = NFRB.SEQUENCIA);
    END IF;

    IF (P_REG_2010 > 0 OR P_REG_2020 > 0) AND
         ( DELETING OR 
           (
            :OLD.CODIMP <> :NEW.CODIMP OR
            :OLD.TIPO <> :NEW.TIPO OR 
            :OLD.ALIQUOTA <> :NEW.ALIQUOTA OR
            :OLD.BASERED <> :NEW.BASERED OR
            :OLD.VALOR <> :NEW.VALOR OR
            :OLD.TIPOINSSESPECIAL <> :NEW.TIPOINSSESPECIAL OR
            :OLD.PERCINSSESPECIAL <> :NEW.PERCINSSESPECIAL OR
            :OLD.VLRINSSESPECIAL <> :NEW.VLRINSSESPECIAL
            )
          )  THEN

        IF P_REG_2010 > 0 THEN
            UPDATE TRIRCST
            SET CONTROLE = 'A'
            WHERE CONTROLE = 'I'
                AND CODEMP = P_CODEMP
                AND DTREF = P_DTNEG
                AND EXISTS (SELECT 1
                            FROM TRIINFST INFST
                            WHERE INFST.NUNOTA = :OLD.NUNOTA
                                AND INFST.CODEMP = TRIRCST.CODEMP
                                AND INFST.DTREF = TRIRCST.DTREF
                                AND INFST.TPAMB = TRIRCST.TPAMB
                                AND INFST.SEQUENCIA = TRIRCST.SEQUENCIA
                                AND INFST.CHAVE = TRIRCST.CHAVE)
                AND EXISTS (SELECT 1
                            FROM TRICAB CAB 
                            WHERE CAB.CODEMP = TRIRCST.CODEMP
                                AND CAB.DTREF = TRIRCST.DTREF
                                AND CAB.TPAMB = TRIRCST.TPAMB
                                AND CAB.SEQUENCIAATUAL = TRIRCST.SEQUENCIA);
        END IF;

        IF P_REG_2020 > 0 THEN
            UPDATE TRIRCSP 
            SET CONTROLE = 'A'
            WHERE CONTROLE = 'I'
                AND CODEMP = P_CODEMP
                AND DTREF = P_DTNEG
                AND EXISTS (SELECT 1
                            FROM TRIINFSP INFSP
                            WHERE INFSP.NUNOTA = :OLD.NUNOTA
                                AND INFSP.CODEMP = TRIRCSP.CODEMP
                                AND INFSP.DTREF = TRIRCSP.DTREF
                                AND INFSP.TPAMB = TRIRCSP.TPAMB
                                AND INFSP.SEQUENCIA = TRIRCSP.SEQUENCIA
                                AND INFSP.CHAVE = TRIRCSP.CHAVE)
                AND EXISTS (SELECT 1
                            FROM TRICAB CAB 
                            WHERE CAB.CODEMP = TRIRCSP.CODEMP
                                AND CAB.DTREF = TRIRCSP.DTREF
                                AND CAB.TPAMB = TRIRCSP.TPAMB
                                AND CAB.SEQUENCIAATUAL = TRIRCSP.SEQUENCIA);
        END IF;
    END IF;

    IF P_REG_2050 > 0 AND
         ( DELETING OR 
           (
            :OLD.CODIMP <> :NEW.CODIMP OR
            :OLD.VALOR <> :NEW.VALOR
            )
          )  THEN

        UPDATE TRICPPR 
        SET CONTROLE = 'A'
        WHERE CONTROLE = 'I'
            AND CODEMP = P_CODEMP
            AND DTREF = P_DTNEG
            AND EXISTS (SELECT 1
                        FROM TRINFPR NFPR
                        WHERE NFPR.NUNOTA = :OLD.NUNOTA
                            AND NFPR.CODEMP = TRICPPR.CODEMP
                            AND NFPR.DTREF = TRICPPR.DTREF
                            AND NFPR.TPAMB = TRICPPR.TPAMB
                            AND NFPR.SEQUENCIA = TRICPPR.SEQUENCIA
                            AND NFPR.CHAVE = TRICPPR.CHAVE)
            AND EXISTS (SELECT 1
                        FROM TRICAB CAB 
                        WHERE CAB.CODEMP = TRICPPR.CODEMP
                            AND CAB.DTREF = TRICPPR.DTREF
                            AND CAB.TPAMB = TRICPPR.TPAMB
                            AND CAB.SEQUENCIAATUAL = TRICPPR.SEQUENCIA);
    END IF;

    IF P_REG_2060 > 0 AND
         ( DELETING OR 
           (
            :OLD.CODIMP <> :NEW.CODIMP OR
            :OLD.CODINC <> :NEW.CODINC OR 
            :OLD.CODLST <> :NEW.CODLST
            )
          )  THEN

        UPDATE TRICPRB 
        SET CONTROLE = 'A'
        WHERE CONTROLE = 'I'
            AND CODEMP = P_CODEMP
            AND DTREF = P_DTNEG
            AND EXISTS (SELECT 1
                        FROM TRINFRB NFRB
                        WHERE NFRB.NUNOTA = :OLD.NUNOTA
                            AND NFRB.CODEMP = TRICPRB.CODEMP
                            AND NFRB.DTREF = TRICPRB.DTREF
                            AND NFRB.TPAMB = TRICPRB.TPAMB
                            AND NFRB.SEQUENCIA = TRICPRB.SEQUENCIA
                            AND NFRB.CHAVE = TRICPRB.CHAVE)
            AND EXISTS (SELECT 1
                        FROM TRICAB CAB 
                        WHERE CAB.CODEMP = TRICPRB.CODEMP
                            AND CAB.DTREF = TRICPRB.DTREF
                            AND CAB.TPAMB = TRICPRB.TPAMB
                            AND CAB.SEQUENCIAATUAL = TRICPRB.SEQUENCIA);
    END IF;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53460-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5345900
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_UPD_DLT_TGFDIN_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210008
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_UPD_DLT_TGFDIN_REINF' NOMEOBJ, 53459 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '39bd59889f684d0bfce926bc24a1cec2' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_UPD_DLT_TGFDIN_REINF' and THO.hashcode = '39bd59889f684d0bfce926bc24a1cec2')
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53461-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRG_UPD_DLT_TGFIMN_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TRG_UPD_DLT_TGFIMN_REINF
NomeObjeto: TRG_UPD_DLT_TGFIMN_REINF
TipoObjeto: TRIGGER
NomeTabela: TGFIMN
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_UPD_DLT_TGFIMN_REINF
BEFORE UPDATE OR DELETE ON TGFIMN
FOR EACH ROW
WHEN (
    OLD.TIPOIMPOSTO = 5     /*UTILIZADO APENAS PELOS EVENTOS R-2010, R-2020 E R-2050*/
      )
DECLARE 
    P_REG_2010     NUMBER(10);
    P_REG_2020     NUMBER(10);
    P_REG_2050     NUMBER(10);
    P_COUNT        NUMBER(10) := 0;
    P_CODEMP       NUMBER(5);
    P_DTNEG        DATE;
BEGIN
    /*A TRIGGER TRG_DLT_TGFCAB_AFTER PODE ESTAR CHAMANDO O DELETE DA TGFITE, QUE CHAMA O DELETE DA TGFDIN, LOGO AQUI NÃO TEREMOS MAIS TGFCAB, POR ISSO DEVEMOS TRATA NO EXCEPTION ABAIXO*/
    BEGIN
        SELECT CODEMP, TRUNC(DTNEG, 'MM') INTO P_CODEMP, P_DTNEG
        FROM TGFCAB
        WHERE NUNOTA = :OLD.NUNOTA;
    EXCEPTION WHEN NO_DATA_FOUND THEN
        P_DTNEG := NULL;
    END;

    IF P_CODEMP IS NULL OR P_DTNEG IS NULL THEN
        RETURN;
    END IF;

    /*VERIFICANDO SE EXISTE A EMPRESA DESTA NOTA CONFIGURADA NO REINF CONSIDERANDO O DTNEG COMO REFERÊNCIA*/
    SELECT COUNT(1) INTO P_COUNT 
    FROM TRICAB
    WHERE CODEMP = P_CODEMP
        AND DTREF = P_DTNEG;

    IF P_COUNT = 0 THEN
        RETURN;
    END IF;

    /*AQUI VERIFICO DIRETO NAS TABELAS DO REINF SE O NUNOTA ESTA LÁ PARA NÃO PRECISAR VERIFICAR A TGFCAB NOVAMENTE*/
    SELECT COUNT(1) INTO P_REG_2010
    FROM TRIINFST INFST
    WHERE INFST.CODEMP = P_CODEMP
        AND INFST.DTREF = P_DTNEG
        AND INFST.NUNOTA = :OLD.NUNOTA
        AND EXISTS (SELECT 1
                    FROM TRIRCST RCST
                    WHERE RCST.CODEMP = INFST.CODEMP
                        AND RCST.DTREF = INFST.DTREF
                        AND RCST.TPAMB = INFST.TPAMB  
                        AND RCST.SEQUENCIA = INFST.SEQUENCIA
                        AND RCST.CHAVE = INFST.CHAVE
                        AND RCST.CONTROLE = 'I')
        AND EXISTS (SELECT 1
                    FROM TRICAB CAB
                    WHERE CAB.CODEMP = INFST.CODEMP
                      AND CAB.DTREF = INFST.DTREF
                      AND CAB.TPAMB = INFST.TPAMB
                      AND CAB.SEQUENCIAATUAL = INFST.SEQUENCIA);

    SELECT COUNT(1) INTO P_REG_2020
    FROM TRIINFSP INFSP
    WHERE INFSP.CODEMP = P_CODEMP
        AND INFSP.DTREF = P_DTNEG
        AND INFSP.NUNOTA = :OLD.NUNOTA
        AND EXISTS (SELECT 1
                    FROM TRIRCSP RCSP
                    WHERE RCSP.CODEMP = INFSP.CODEMP
                        AND RCSP.DTREF = INFSP.DTREF
                        AND RCSP.TPAMB = INFSP.TPAMB  
                        AND RCSP.SEQUENCIA = INFSP.SEQUENCIA
                        AND RCSP.CHAVE = INFSP.CHAVE
                        AND RCSP.CONTROLE = 'I')
        AND EXISTS (SELECT 1
                    FROM TRICAB CAB
                    WHERE CAB.CODEMP = INFSP.CODEMP
                      AND CAB.DTREF = INFSP.DTREF
                      AND CAB.TPAMB = INFSP.TPAMB
                      AND CAB.SEQUENCIAATUAL = INFSP.SEQUENCIA);

    SELECT COUNT(1) INTO P_REG_2050
    FROM TRINFPR NFPR
    WHERE NFPR.CODEMP = P_CODEMP
        AND NFPR.DTREF = P_DTNEG
        AND NFPR.NUNOTA = :OLD.NUNOTA
        AND EXISTS (SELECT 1
                    FROM TRICPPR CPPR
                    WHERE CPPR.CODEMP = NFPR.CODEMP
                        AND CPPR.DTREF = NFPR.DTREF
                        AND CPPR.TPAMB = NFPR.TPAMB  
                        AND CPPR.SEQUENCIA = NFPR.SEQUENCIA
                        AND CPPR.CHAVE = NFPR.CHAVE
                        AND CPPR.CONTROLE = 'I')
        AND EXISTS (SELECT 1
                    FROM TRICAB CAB
                    WHERE CAB.CODEMP = NFPR.CODEMP
                      AND CAB.DTREF = NFPR.DTREF
                      AND CAB.TPAMB = NFPR.TPAMB
                      AND CAB.SEQUENCIAATUAL = NFPR.SEQUENCIA);

    IF (P_REG_2010 > 0 OR P_REG_2020 > 0) AND
         ( DELETING OR 
           (
            :OLD.TIPOIMPOSTO <> :NEW.TIPOIMPOSTO OR 
            :OLD.ALIQUOTA <> :NEW.ALIQUOTA OR
            NVL(:OLD.BASE, -1) <> NVL(:NEW.BASE, -1) OR
            NVL(:OLD.VALOR, -1) <> NVL(:NEW.VALOR, -1) OR
            NVL(:OLD.TIPOINSSESPECIAL, -1) <> NVL(:NEW.TIPOINSSESPECIAL, -1) OR
            NVL(:OLD.PERCINSSESPECIAL, -1) <> NVL(:NEW.PERCINSSESPECIAL, -1) OR
            NVL(:OLD.VLRINSSESPECIAL, -1) <> NVL(:NEW.VLRINSSESPECIAL, -1)
            )
          )  THEN

        IF P_REG_2010 > 0 THEN 
            UPDATE TRIRCST
            SET CONTROLE = 'A'
            WHERE CONTROLE = 'I'
                AND CODEMP = P_CODEMP
                AND DTREF = P_DTNEG
                AND EXISTS (SELECT 1
                            FROM TRIINFST INFST
                            WHERE INFST.NUNOTA = :OLD.NUNOTA
                                AND INFST.CODEMP = TRIRCST.CODEMP
                                AND INFST.DTREF = TRIRCST.DTREF
                                AND INFST.TPAMB = TRIRCST.TPAMB
                                AND INFST.SEQUENCIA = TRIRCST.SEQUENCIA
                                AND INFST.CHAVE = TRIRCST.CHAVE)
                AND EXISTS (SELECT 1
                            FROM TRICAB CAB 
                            WHERE CAB.CODEMP = TRIRCST.CODEMP
                                AND CAB.DTREF = TRIRCST.DTREF
                                AND CAB.TPAMB = TRIRCST.TPAMB
                                AND CAB.SEQUENCIAATUAL = TRIRCST.SEQUENCIA);
        END IF;

        IF P_REG_2020 > 0 THEN
            UPDATE TRIRCSP 
            SET CONTROLE = 'A'
            WHERE CONTROLE = 'I'
                AND CODEMP = P_CODEMP
                AND DTREF = P_DTNEG
                AND EXISTS (SELECT 1
                            FROM TRIINFSP INFSP
                            WHERE INFSP.NUNOTA = :OLD.NUNOTA
                                AND INFSP.CODEMP = TRIRCSP.CODEMP
                                AND INFSP.DTREF = TRIRCSP.DTREF
                                AND INFSP.TPAMB = TRIRCSP.TPAMB
                                AND INFSP.SEQUENCIA = TRIRCSP.SEQUENCIA
                                AND INFSP.CHAVE = TRIRCSP.CHAVE)
                AND EXISTS (SELECT 1
                            FROM TRICAB CAB 
                            WHERE CAB.CODEMP = TRIRCSP.CODEMP
                                AND CAB.DTREF = TRIRCSP.DTREF
                                AND CAB.TPAMB = TRIRCSP.TPAMB
                                AND CAB.SEQUENCIAATUAL = TRIRCSP.SEQUENCIA);
        END IF;
    END IF;

    IF P_REG_2050 > 0 AND 
        ( DELETING OR 
           (
            :OLD.TIPOIMPOSTO <> :NEW.TIPOIMPOSTO OR 
            NVL(:OLD.VALOR, -1) <> NVL(:NEW.VALOR, -1)
            )
          )  THEN

        UPDATE TRICPPR 
        SET CONTROLE = 'A'
        WHERE CONTROLE = 'I'
            AND CODEMP = P_CODEMP
            AND DTREF = P_DTNEG
            AND EXISTS (SELECT 1
                        FROM TRINFPR NFPR
                        WHERE NFPR.NUNOTA = :OLD.NUNOTA
                            AND NFPR.CODEMP = TRICPPR.CODEMP
                            AND NFPR.DTREF = TRICPPR.DTREF
                            AND NFPR.TPAMB = TRICPPR.TPAMB
                            AND NFPR.SEQUENCIA = TRICPPR.SEQUENCIA
                            AND NFPR.CHAVE = TRICPPR.CHAVE)
            AND EXISTS (SELECT 1
                        FROM TRICAB CAB 
                        WHERE CAB.CODEMP = TRICPPR.CODEMP
                            AND CAB.DTREF = TRICPPR.DTREF
                            AND CAB.TPAMB = TRICPPR.TPAMB
                            AND CAB.SEQUENCIAATUAL = TRICPPR.SEQUENCIA);
    END IF;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53462-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5346100
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_UPD_DLT_TGFIMN_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210008
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_UPD_DLT_TGFIMN_REINF' NOMEOBJ, 53461 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '0e86bf7763c76cb779cb90144b15e36c' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_UPD_DLT_TGFIMN_REINF' and THO.hashcode = '0e86bf7763c76cb779cb90144b15e36c')
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53463-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRG_UPD_DLT_TGFFIN_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TRG_UPD_DLT_TGFFIN_REINF
NomeObjeto: TRG_UPD_DLT_TGFFIN_REINF
TipoObjeto: TRIGGER
NomeTabela: TGFFIN
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_UPD_DLT_TGFFIN_REINF
BEFORE UPDATE OR DELETE ON TGFFIN
FOR EACH ROW
DECLARE 
    P_REG_2010     NUMBER(10);
BEGIN
    IF DELETING OR
       (
        :OLD.CODEMP <> :NEW.CODEMP OR 
        :OLD.CODPARC <> :NEW.CODPARC OR 
        :OLD.CODTIPOPER <> :NEW.CODTIPOPER OR 
         TRUNC(:OLD.DTNEG, 'MM')  <> TRUNC(:NEW.DTNEG, 'MM') OR 
         NVL(:OLD.CODOBRA, -1) <> NVL(:NEW.CODOBRA, -1) OR 
         NVL(:OLD.OBRACONSTCIVIL, -1) <> NVL(:NEW.OBRACONSTCIVIL, -1) OR
         NVL(:OLD.CLASSIFCESSAOOBRA, -1) <> NVL(:NEW.CLASSIFCESSAOOBRA, -1) OR
         :OLD.VLRDESDOB <> :NEW.VLRDESDOB OR
         :OLD.CODLST <> :NEW.CODLST OR
         NVL(:OLD.SERIENOTA, ' ') <> NVL(:NEW.SERIENOTA, ' ') OR
         NVL(:OLD.NUMNOTA, -1) <> NVL(:NEW.NUMNOTA, -1)
        )  THEN

        SELECT COUNT(1) INTO P_REG_2010
        FROM TRIINFST INFST
        WHERE INFST.CODEMP = :OLD.CODEMP
            AND INFST.DTREF = TRUNC(:OLD.DTNEG, 'MM')
            AND INFST.NUNOTA = :OLD.NUFIN
            AND EXISTS (SELECT 1
                        FROM TRIRCST RCST
                        WHERE RCST.CODEMP = INFST.CODEMP
                            AND RCST.DTREF = INFST.DTREF
                            AND RCST.TPAMB = INFST.TPAMB  
                            AND RCST.SEQUENCIA = INFST.SEQUENCIA
                            AND RCST.CHAVE = INFST.CHAVE
                            AND RCST.CONTROLE = 'I')
            AND EXISTS (SELECT 1
                        FROM TRICAB CAB
                        WHERE CAB.CODEMP = INFST.CODEMP
                          AND CAB.DTREF = INFST.DTREF
                          AND CAB.TPAMB = INFST.TPAMB
                          AND CAB.SEQUENCIAATUAL = INFST.SEQUENCIA);

        IF P_REG_2010 > 0 THEN
            UPDATE TRIRCST
            SET CONTROLE = 'A'
            WHERE CONTROLE = 'I'
                AND CODEMP = :OLD.CODEMP
                AND DTREF = TRUNC(:OLD.DTNEG, 'MM')
                AND EXISTS (SELECT 1
                            FROM TRIINFST INFST
                            WHERE INFST.NUNOTA = :OLD.NUFIN
                                AND INFST.CODEMP = TRIRCST.CODEMP
                                AND INFST.DTREF = TRIRCST.DTREF
                                AND INFST.TPAMB = TRIRCST.TPAMB
                                AND INFST.SEQUENCIA = TRIRCST.SEQUENCIA
                                AND INFST.CHAVE = TRIRCST.CHAVE)
                AND EXISTS (SELECT 1
                            FROM TRICAB CAB 
                            WHERE CAB.CODEMP = TRIRCST.CODEMP
                                AND CAB.DTREF = TRIRCST.DTREF
                                AND CAB.TPAMB = TRIRCST.TPAMB
                                AND CAB.SEQUENCIAATUAL = TRIRCST.SEQUENCIA);
        END IF;
    END IF;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53464-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5346300
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_UPD_DLT_TGFFIN_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210008
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_UPD_DLT_TGFFIN_REINF' NOMEOBJ, 53463 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, 'f409fcd63613a1c9c2441fea487be118' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_UPD_DLT_TGFFIN_REINF' and THO.hashcode = 'f409fcd63613a1c9c2441fea487be118')
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53465-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRG_UPD_DLT_TGFIMF_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TRG_UPD_DLT_TGFIMF_REINF
NomeObjeto: TRG_UPD_DLT_TGFIMF_REINF
TipoObjeto: TRIGGER
NomeTabela: TGFIMF
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_UPD_DLT_TGFIMF_REINF
BEFORE UPDATE OR DELETE ON TGFIMF
FOR EACH ROW
WHEN (
    OLD.TIPIMP = -1 AND (NVL(OLD.ALIQUOTA, 0) - NVL(OLD.PERCINSSESPECIAL, 0)) IN (3.5, 11)
      )
DECLARE 
    P_REG_2010     NUMBER(10);
    P_COUNT        NUMBER(10);
    P_CODEMP       NUMBER(5);
    P_DTNEG        DATE;
BEGIN
    SELECT COUNT(1) INTO P_COUNT
    FROM TGFIMC
    WHERE CODIMP = :OLD.CODIMP
        AND TIPOIMPOSTO = 5; /*INSS*/

    IF P_COUNT > 0 THEN
        SELECT CODEMP, TRUNC(DTNEG, 'MM') INTO P_CODEMP, P_DTNEG
        FROM TGFFIN
        WHERE NUFIN = :OLD.NUFIN;

        /*AQUI VERIFICO DIRETO NAS TABELAS DO REINF SE O NUFIN ESTA LÁ PARA NÃO PRECISAR VERIFICAR A TGFFIN NOVAMENTE*/
        SELECT COUNT(1) INTO P_REG_2010
        FROM TRIINFST INFST
        WHERE INFST.CODEMP = P_CODEMP
            AND INFST.DTREF = P_DTNEG
            AND INFST.NUNOTA = :OLD.NUFIN
            AND EXISTS (SELECT 1
                        FROM TRIRCST RCST
                        WHERE RCST.CODEMP = INFST.CODEMP
                            AND RCST.DTREF = INFST.DTREF
                            AND RCST.TPAMB = INFST.TPAMB  
                            AND RCST.SEQUENCIA = INFST.SEQUENCIA
                            AND RCST.CHAVE = INFST.CHAVE
                            AND RCST.CONTROLE = 'I')
            AND EXISTS (SELECT 1
                        FROM TRICAB CAB
                        WHERE CAB.CODEMP = INFST.CODEMP
                          AND CAB.DTREF = INFST.DTREF
                          AND CAB.TPAMB = INFST.TPAMB
                          AND CAB.SEQUENCIAATUAL = INFST.SEQUENCIA);

        IF P_REG_2010 > 0 AND
             ( DELETING OR 
               (
                :OLD.CODIMP <> :NEW.CODIMP OR
                :OLD.TIPIMP <> :NEW.TIPIMP OR 
                :OLD.ALIQUOTA <> :NEW.ALIQUOTA OR
                NVL(:OLD.BASE, -1) <> NVL(:NEW.BASE, -1) OR
                NVL(:OLD.VALOR, -1) <> NVL(:NEW.VALOR, -1) OR
                NVL(:OLD.TIPOINSSESPECIAL, -1) <> NVL(:NEW.TIPOINSSESPECIAL, -1) OR
                NVL(:OLD.PERCINSSESPECIAL, -1) <> NVL(:NEW.PERCINSSESPECIAL, -1) OR
                NVL(:OLD.VLRINSSESPECIAL, -1) <> NVL(:NEW.VLRINSSESPECIAL, -1)
                )
              )  THEN

            UPDATE TRIRCST
            SET CONTROLE = 'A'
            WHERE CONTROLE = 'I'
                AND CODEMP = P_CODEMP
                AND DTREF = P_DTNEG
                AND EXISTS (SELECT 1
                            FROM TRIINFST INFST
                            WHERE INFST.NUNOTA = :OLD.NUFIN
                                AND INFST.CODEMP = TRIRCST.CODEMP
                                AND INFST.DTREF = TRIRCST.DTREF
                                AND INFST.TPAMB = TRIRCST.TPAMB
                                AND INFST.SEQUENCIA = TRIRCST.SEQUENCIA
                                AND INFST.CHAVE = TRIRCST.CHAVE)
                AND EXISTS (SELECT 1
                            FROM TRICAB CAB 
                            WHERE CAB.CODEMP = TRIRCST.CODEMP
                                AND CAB.DTREF = TRIRCST.DTREF
                                AND CAB.TPAMB = TRIRCST.TPAMB
                                AND CAB.SEQUENCIAATUAL = TRIRCST.SEQUENCIA);
        END IF;
    END IF;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53466-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5346500
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_UPD_DLT_TGFIMF_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210008
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_UPD_DLT_TGFIMF_REINF' NOMEOBJ, 53465 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '927e697bf9d220c019c9a6878a0715a2' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_UPD_DLT_TGFIMF_REINF' and THO.hashcode = '927e697bf9d220c019c9a6878a0715a2')
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53467-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRG_UPD_TGFCAB_REINF 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TRG_UPD_TGFCAB_REINF 
NomeObjeto: TRG_UPD_TGFCAB_REINF 
TipoObjeto: TRIGGER
NomeTabela: TGFCAB
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_UPD_TGFCAB_REINF 
AFTER UPDATE ON TGFCAB
FOR EACH ROW
WHEN (
    NVL(OLD.TIPMOV, ' ') IN ('C', 'V') AND OLD.STATUSNOTA <> 'L' AND NEW.STATUSNOTA = 'L'  /*QUANDO A NOTA ESTIVER SENDO CONFIRMADA*/
    )
DECLARE P_COUNT         NUMBER(10) := 0;
        P_DTREF         DATE;
BEGIN
    P_DTREF := TRUNC(:NEW.DTNEG, 'MM');

    /*VERIFICANDO SE EXISTE A EMPRESA DESTA NOTA CONFIGURADA NO REINF CONSIDERANDO O DTNEG COMO REFERÊNCIA PARA ALGUM TIPO DE AMBIENTE*/
    SELECT COUNT(1) INTO P_COUNT 
    FROM TRICAB
    WHERE CODEMP = :NEW.CODEMP
        AND DTREF = P_DTREF;

    IF P_COUNT = 0 THEN
        RETURN;
    END IF;

    /*INSERINDO ESTA NOTA NA TABELA TEMPORÁRIA PARA QUE A TRIGGER DE AFTER UPDATE SEM FOR EACH ROW VERIFIQUE AS TABELAS DO REINF */
    INSERT INTO TBTEMP_REINF(NUNOTA, CODEMP, DTREF)
    VALUES (:NEW.NUNOTA, :NEW.CODEMP, P_DTREF);

END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53468-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5346700
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_UPD_TGFCAB_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210008
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_UPD_TGFCAB_REINF' NOMEOBJ, 53467 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '47a1f6e53f87e3e70de0f5e52051b5ad' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_UPD_TGFCAB_REINF' and THO.hashcode = '47a1f6e53f87e3e70de0f5e52051b5ad')
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53469-0-0
Nro. O.S. : 1148508
Nome      : Altera - TRG_UPD_TRICAB
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - TRG_UPD_TRICAB
NomeObjeto: TRG_UPD_TRICAB
TipoObjeto: TRIGGER
NomeTabela: TRICAB
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_UPD_TRICAB
BEFORE UPDATE ON TRICAB
FOR EACH ROW
BEGIN
    IF NVL(:OLD.EVTPENDENTE, 0) <> NVL(:NEW.EVTPENDENTE, 0) OR
       NVL(:OLD.EVTENVIADO, 0) <> NVL(:NEW.EVTENVIADO, 0) OR
       NVL(:OLD.EVTAGUARCORRECAO, 0) <> NVL(:NEW.EVTAGUARCORRECAO, 0) OR
       NVL(:OLD.EVTERROEVTPRIOR, 0) <> NVL(:NEW.EVTERROEVTPRIOR, 0) OR
       NVL(:OLD.EVTFINALIZADO, 0) <> NVL(:NEW.EVTFINALIZADO, 0) THEN
        :NEW.EVTTOTAIS := NVL(:NEW.EVTPENDENTE, 0) + NVL(:NEW.EVTENVIADO, 0) + NVL(:NEW.EVTAGUARCORRECAO, 0) + NVL(:NEW.EVTERROEVTPRIOR, 0) + NVL(:NEW.EVTFINALIZADO, 0);

        /*ESSES STATUS REFEREM-SE AO PROCESSO DE FECHAMENTO OU DE REABERTURA, LOGO ELE FOI RESOLVIDO NAS TABELAS DE ORIGEM*/
        /*6 - Em processo de fechamento*/
        /*7 - Referência fechada com sucesso*/
        /*8 - Em processo de reabertura*/
        /*9 - Referência reaberta com sucesso*/
        IF :NEW.STATUS NOT IN (6, 7, 8, 9) THEN
        :NEW.STATUS :=  CASE WHEN NVL(:NEW.EVTPENDENTE, 0) > 0 THEN 1                          /*1 - Eventos pendentes para o envio*/
                             WHEN NVL(:NEW.EVTENVIADO, 0) > 0 THEN 2                           /*2 - Eventos enviados com sucesso - Pendentes de finalização*/
                             WHEN NVL(:NEW.EVTAGUARCORRECAO, 0) > 0 OR 
                                  NVL(:NEW.EVTERROEVTPRIOR, 0) > 0 THEN 3                      /*3 - Eventos aguardando correção*/
                             WHEN NVL(:NEW.EVTTOTAIS, 0) = NVL(:NEW.EVTFINALIZADO, 0) THEN 4   /*4 - Eventos finalizados com sucesso - Pendentes de fechamento*/
                             ELSE 0 END;                                                       /*0 - Referência não iniciada*/
        END IF;
    END IF;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53470-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5346900
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_UPD_TRICAB
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210008
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_UPD_TRICAB' NOMEOBJ, 53469 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, 'e1223ec8f3dc2f63757defbf33420162' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_UPD_TRICAB' and THO.hashcode = 'e1223ec8f3dc2f63757defbf33420162')
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53471-0-0
Nro. O.S. : 1148508
Nome      : Altera - TRG_DLT_TRICPPR 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - TRG_DLT_TRICPPR 
NomeObjeto: TRG_DLT_TRICPPR 
TipoObjeto: TRIGGER
NomeTabela: TRICPPR
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_DLT_TRICPPR
BEFORE DELETE ON TRICPPR
FOR EACH ROW
BEGIN
    DELETE TRITPCO
    WHERE CODEMP = :OLD.CODEMP
        AND DTREF = :OLD.DTREF
        AND TPAMB = :OLD.TPAMB
        AND SEQUENCIA = :OLD.SEQUENCIA
        AND CHAVE = :OLD.CHAVE;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53472-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5347100
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_DLT_TRICPPR
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210008
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_DLT_TRICPPR' NOMEOBJ, 53471 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '494c200c959dfffdc3708916d79721c8' HASHCODE, 'Indefinida' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_DLT_TRICPPR' and THO.hashcode = '494c200c959dfffdc3708916d79721c8')
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53473-0-0
Nro. O.S. : 1148508
Nome      : Altera - TRG_DLT_TRITCAE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - TRG_DLT_TRITCAE
NomeObjeto: TRG_DLT_TRITCAE
TipoObjeto: TRIGGER
NomeTabela: TRITCAE
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_DLT_TRITCAE
BEFORE DELETE ON TRITCAE
FOR EACH ROW
BEGIN
    DELETE TRINFRB
    WHERE CODEMP = :OLD.CODEMP
        AND DTREF = :OLD.DTREF
        AND TPAMB = :OLD.TPAMB
        AND SEQUENCIA = :OLD.SEQUENCIA
        AND CHAVE = :OLD.CHAVE
        AND CODATIVECON = :OLD.CODATIVECON;

    DELETE TRIIPSC
    WHERE CODEMP = :OLD.CODEMP
        AND DTREF = :OLD.DTREF
        AND TPAMB = :OLD.TPAMB
        AND SEQUENCIA = :OLD.SEQUENCIA
        AND CHAVE = :OLD.CHAVE
        AND CODATIVECON = :OLD.CODATIVECON;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53474-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5347300
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_DLT_TRITCAE
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210008
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_DLT_TRITCAE' NOMEOBJ, 53473 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, 'eeca3cd7032ec93f5477ec6cfc053815' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_DLT_TRITCAE' and THO.hashcode = 'eeca3cd7032ec93f5477ec6cfc053815')
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53475-0-0
Nro. O.S. : 1148508
Nome      : Altera - TRG_UPD_DLT_TRIFEP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - TRG_UPD_DLT_TRIFEP
NomeObjeto: TRG_UPD_DLT_TRIFEP
TipoObjeto: TRIGGER
NomeTabela: TRIFEP
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_UPD_DLT_TRIFEP
BEFORE UPDATE OR DELETE ON TRIFEP
FOR EACH ROW
WHEN (
NEW.CODEMP IS NULL OR OLD.STATUSREG <> NVL(NEW.STATUSREG, ' ')
      )
DECLARE
    P_SEQUENCIA_ATUAL    NUMBER(5);
BEGIN
    SELECT NVL(SEQUENCIAATUAL, 0) INTO P_SEQUENCIA_ATUAL
    FROM TRICAB
    WHERE CODEMP = :OLD.CODEMP
    AND DTREF = :OLD.DTREF
    AND TPAMB = :OLD.TPAMB;

    /*O UPDATE da quantidade de eventos no cabeçalho quando estou incluindo um registro é feito pela aplicação*/
    IF P_SEQUENCIA_ATUAL = :OLD.SEQUENCIA THEN
        UPDATE TRICAB
        SET EVTPENDENTE = CASE WHEN :OLD.STATUSREG = 'P' THEN NVL(EVTPENDENTE, 0) - 1
                               WHEN NVL(:NEW.STATUSREG, ' ') = 'P' THEN NVL(EVTPENDENTE, 0) + 1
                               ELSE EVTPENDENTE 
                          END,
            EVTENVIADO = CASE WHEN :OLD.STATUSREG = 'E' THEN NVL(EVTENVIADO, 0) - 1
                              WHEN :NEW.STATUSREG = 'E' THEN NVL(EVTENVIADO, 0) + 1
                              ELSE EVTENVIADO 
                         END,
            EVTAGUARCORRECAO = CASE WHEN :OLD.STATUSREG = 'A' THEN NVL(EVTAGUARCORRECAO, 0) - 1
                                    WHEN NVL(:NEW.STATUSREG, ' ') = 'A' THEN NVL(EVTAGUARCORRECAO, 0) + 1
                                    ELSE EVTAGUARCORRECAO 
                               END,
            EVTERROEVTPRIOR = CASE WHEN :OLD.STATUSREG = 'X' THEN NVL(EVTERROEVTPRIOR, 0) - 1
                                    WHEN NVL(:NEW.STATUSREG, ' ') = 'X' THEN NVL(EVTERROEVTPRIOR, 0) + 1
                                    ELSE EVTERROEVTPRIOR 
                               END,
            EVTFINALIZADO = CASE WHEN :OLD.STATUSREG = 'F' THEN NVL(EVTFINALIZADO, 0) - 1
                                 WHEN NVL(:NEW.STATUSREG, ' ') = 'F' THEN NVL(EVTFINALIZADO, 0) + 1
                                 ELSE EVTFINALIZADO 
                            END,
            STATUS = CASE WHEN :NEW.STATUSREG IS NULL THEN 4
                          WHEN NVL(:NEW.STATUSREG, ' ') = 'E' THEN 6
                          WHEN NVL(:NEW.STATUSREG, ' ') = 'F' THEN 7
                          WHEN NVL(:NEW.STATUSREG, ' ') = 'A' THEN 3
                          ELSE STATUS
                     END 
        WHERE CODEMP = :OLD.CODEMP
            AND DTREF = :OLD.DTREF
            AND TPAMB = :OLD.TPAMB;
    END IF;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53476-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5347500
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_UPD_DLT_TRIFEP
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210008
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_UPD_DLT_TRIFEP' NOMEOBJ, 53475 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '9d28255a0714e93c094bcfecd0b73921' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_UPD_DLT_TRIFEP' and THO.hashcode = '9d28255a0714e93c094bcfecd0b73921')
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53477-0-0
Nro. O.S. : 1148508
Nome      : Altera - TRG_UPD_DLT_TRIREP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - TRG_UPD_DLT_TRIREP
NomeObjeto: TRG_UPD_DLT_TRIREP
TipoObjeto: TRIGGER
NomeTabela: TRIREP
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_UPD_DLT_TRIREP
BEFORE UPDATE OR DELETE ON TRIREP
FOR EACH ROW
WHEN(
    NEW.CODEMP IS NULL OR OLD.STATUSREG <> NVL(NEW.STATUSREG, ' ')
)
DECLARE
    P_SEQUENCIA_ATUAL    NUMBER(5);
BEGIN
    SELECT NVL(SEQUENCIAATUAL, 0) INTO P_SEQUENCIA_ATUAL
    FROM TRICAB
    WHERE CODEMP = :OLD.CODEMP
    AND DTREF = :OLD.DTREF
    AND TPAMB = :OLD.TPAMB;

    /*O UPDATE da quantidade de eventos no cabeçalho quando estou incluindo um registro é feito pela aplicação*/
    IF P_SEQUENCIA_ATUAL = :OLD.SEQUENCIA THEN
        UPDATE TRICAB
        SET EVTPENDENTE = CASE WHEN :OLD.STATUSREG = 'P' THEN NVL(EVTPENDENTE, 0) - 1
                               WHEN NVL(:NEW.STATUSREG, ' ') = 'P' THEN NVL(EVTPENDENTE, 0) + 1
                               ELSE EVTPENDENTE 
                          END,
            EVTENVIADO = CASE WHEN :OLD.STATUSREG = 'E' THEN NVL(EVTENVIADO, 0) - 1
                              WHEN :NEW.STATUSREG = 'E' THEN NVL(EVTENVIADO, 0) + 1
                              ELSE EVTENVIADO 
                         END,
            EVTAGUARCORRECAO = CASE WHEN :OLD.STATUSREG = 'A' THEN NVL(EVTAGUARCORRECAO, 0) - 1
                                    WHEN NVL(:NEW.STATUSREG, ' ') = 'A' THEN NVL(EVTAGUARCORRECAO, 0) + 1
                                    ELSE EVTAGUARCORRECAO 
                               END,
            EVTERROEVTPRIOR = CASE WHEN :OLD.STATUSREG = 'X' THEN NVL(EVTERROEVTPRIOR, 0) - 1
                                    WHEN NVL(:NEW.STATUSREG, ' ') = 'X' THEN NVL(EVTERROEVTPRIOR, 0) + 1
                                    ELSE EVTERROEVTPRIOR 
                               END,
            EVTFINALIZADO = CASE WHEN :OLD.STATUSREG = 'F' THEN NVL(EVTFINALIZADO, 0) - 1
                                 WHEN NVL(:NEW.STATUSREG, ' ') = 'F' THEN NVL(EVTFINALIZADO, 0) + 1
                                 ELSE EVTFINALIZADO 
                            END,
            STATUS = CASE WHEN :NEW.STATUSREG IS NULL THEN 4
                          WHEN NVL(:NEW.STATUSREG, ' ') = 'E' THEN 8
                          WHEN NVL(:NEW.STATUSREG, ' ') = 'F' THEN 9
                          WHEN NVL(:NEW.STATUSREG, ' ') = 'A' THEN 3
                          ELSE STATUS
                     END
        WHERE CODEMP = :OLD.CODEMP
            AND DTREF = :OLD.DTREF
            AND TPAMB = :OLD.TPAMB;
    END IF;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53478-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5347700
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_UPD_DLT_TRIREP
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210008
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_UPD_DLT_TRIREP' NOMEOBJ, 53477 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '96c5479e2e17e75b8953dc317d21a408' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_UPD_DLT_TRIREP' and THO.hashcode = '96c5479e2e17e75b8953dc317d21a408')
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53542-0-0
Nro. O.S. : 1148508
Nome      : Dropa - TBTEMP_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropa - TBTEMP_REINF - Johnata garantiu que pode dropar por ser apenas temporária
NomeObjeto: TBTEMP_REINF
TipoObjeto: TABLE
NomeTabela: TBTEMP_REINF
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
DROP TABLE TBTEMP_REINF
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53543-0-0
Nro. O.S. : 1148508
Nome      : Cria - TBTEMP_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TBTEMP_REINF
NomeObjeto: TBTEMP_REINF
TipoObjeto: TABLE
NomeTabela: TBTEMP_REINF
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE GLOBAL TEMPORARY TABLE TBTEMP_REINF (
    NUNOTA          NUMBER(10),
    CODEMP          NUMBER(10),
    DTREF           DATE,
    CONSTRAINT PK_TBTEMP_REINF PRIMARY KEY (NUNOTA)
)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53544-0-0
Nro. O.S. : 1148508
Nome      : Cria - SNK_GET_DADOS_TGFCAB
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - SNK_GET_DADOS_TGFCAB
NomeObjeto: SNK_GET_DADOS_TGFCAB
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_GET_DADOS_TGFCAB(P_NUNOTA NUMBER, P_CODEMP OUT NUMBER, P_DTNEG  OUT DATE)
AS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    COMMIT;
    BEGIN
        SELECT CODEMP, TRUNC(DTNEG, 'MM') INTO P_CODEMP, P_DTNEG
        FROM TGFCAB
        WHERE NUNOTA = P_NUNOTA;
    EXCEPTION WHEN NO_DATA_FOUND THEN
        P_CODEMP := NULL;
        P_DTNEG := NULL;
    END;
EXCEPTION WHEN OTHERS THEN
    COMMIT;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53545-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5354400
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_GET_DADOS_TGFCAB
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210008
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_GET_DADOS_TGFCAB' NOMEOBJ, 53544 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, '38f235466d17b8123fb12b36fd52087a' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_GET_DADOS_TGFCAB' and THO.hashcode = '38f235466d17b8123fb12b36fd52087a')
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53546-0-0
Nro. O.S. : 1148508
Nome      : Cria - SNK_GET_DADOS_TGFFIN
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - SNK_GET_DADOS_TGFFIN
NomeObjeto: SNK_GET_DADOS_TGFFIN
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_GET_DADOS_TGFFIN(P_NUFIN NUMBER, P_CODEMP OUT NUMBER, P_DTNEG  OUT DATE)
AS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    COMMIT;
    BEGIN
        SELECT CODEMP, TRUNC(DTNEG, 'MM') INTO P_CODEMP, P_DTNEG
        FROM TGFFIN
        WHERE NUFIN = P_NUFIN;
    EXCEPTION WHEN NO_DATA_FOUND THEN
        P_CODEMP := NULL;
        P_DTNEG := NULL;
    END;
EXCEPTION WHEN OTHERS THEN
    COMMIT;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53547-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5354600
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_GET_DADOS_TGFFIN
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210008
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_GET_DADOS_TGFFIN' NOMEOBJ, 53546 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, '73ddd25841d7b7973dff1abaf266f3b1' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_GET_DADOS_TGFFIN' and THO.hashcode = '73ddd25841d7b7973dff1abaf266f3b1')
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53548-0-0
Nro. O.S. : 1148508
Nome      : Altera - TRG_UPD_DLT_TGFDIN_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - TRG_UPD_DLT_TGFDIN_REINF
NomeObjeto: TRG_UPD_DLT_TGFDIN_REINF
TipoObjeto: TRIGGER
NomeTabela: TGFDIN
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_UPD_DLT_TGFDIN_REINF
BEFORE UPDATE OR DELETE ON TGFDIN
FOR EACH ROW
WHEN (
    OLD.CODIMP = 5 OR                        /*CODIMP: 5 (UTILIZADO PELOS EVENTOS R-2010, R-2020 E R-2050)*/
    (OLD.CODIMP = 4 AND OLD.CODINC = 2)     /*CODIMP: 4 (UTILIZADO PELO EVENTO R-2060)*/
      )
DECLARE 
    P_REG_2010     NUMBER(10) := 0;
    P_REG_2020     NUMBER(10) := 0;
    P_REG_2050     NUMBER(10) := 0;
    P_REG_2060     NUMBER(10) := 0;
    P_COUNT        NUMBER(10) := 0;
    P_CODEMP       NUMBER(5);
    P_DTNEG        DATE;
BEGIN
    /*A TRIGGER TRG_DLT_TGFCAB_AFTER PODE ESTAR CHAMANDO O DELETE DA TGFITE, QUE CHAMA O DELETE DA TGFDIN, LOGO AQUI NÃO TEREMOS MAIS TGFCAB, POR ISSO DEVEMOS TRATA NO EXCEPTION ABAIXO*/
    SNK_GET_DADOS_TGFCAB(:OLD.NUNOTA, P_CODEMP, P_DTNEG);

    IF P_CODEMP IS NULL OR P_DTNEG IS NULL THEN
        RETURN;
    END IF;

    /*VERIFICANDO SE EXISTE A EMPRESA DESTA NOTA CONFIGURADA NO REINF CONSIDERANDO O DTNEG COMO REFERÊNCIA*/
    SELECT COUNT(1) INTO P_COUNT 
    FROM TRICAB
    WHERE CODEMP = P_CODEMP
        AND DTREF = P_DTNEG;

    IF P_COUNT = 0 THEN
        RETURN;
    END IF;

    /*AQUI VERIFICO DIRETO NAS TABELAS DO REINF SE O NUNOTA ESTA LÁ PARA NÃO PRECISAR VERIFICAR A TGFCAB NOVAMENTE*/
    IF :OLD.CODIMP = 5 THEN
        SELECT COUNT(1) INTO P_REG_2010
        FROM TRIINFST INFST
        WHERE INFST.CODEMP = P_CODEMP
            AND INFST.DTREF = P_DTNEG
            AND INFST.NUNOTA = :OLD.NUNOTA
            AND EXISTS (SELECT 1
                        FROM TRIRCST RCST
                        WHERE RCST.CODEMP = INFST.CODEMP
                            AND RCST.DTREF = INFST.DTREF
                            AND RCST.TPAMB = INFST.TPAMB  
                            AND RCST.SEQUENCIA = INFST.SEQUENCIA
                            AND RCST.CHAVE = INFST.CHAVE
                            AND RCST.CONTROLE = 'I')
            AND EXISTS (SELECT 1
                        FROM TRICAB CAB
                        WHERE CAB.CODEMP = INFST.CODEMP
                          AND CAB.DTREF = INFST.DTREF
                          AND CAB.TPAMB = INFST.TPAMB
                          AND CAB.SEQUENCIAATUAL = INFST.SEQUENCIA);

        SELECT COUNT(1) INTO P_REG_2020
        FROM TRIINFSP INFSP
        WHERE INFSP.CODEMP = P_CODEMP
            AND INFSP.DTREF = P_DTNEG
            AND INFSP.NUNOTA = :OLD.NUNOTA
            AND EXISTS (SELECT 1
                        FROM TRIRCSP RCSP
                        WHERE RCSP.CODEMP = INFSP.CODEMP
                            AND RCSP.DTREF = INFSP.DTREF
                            AND RCSP.TPAMB = INFSP.TPAMB  
                            AND RCSP.SEQUENCIA = INFSP.SEQUENCIA
                            AND RCSP.CHAVE = INFSP.CHAVE
                            AND RCSP.CONTROLE = 'I')
            AND EXISTS (SELECT 1
                        FROM TRICAB CAB
                        WHERE CAB.CODEMP = INFSP.CODEMP
                          AND CAB.DTREF = INFSP.DTREF
                          AND CAB.TPAMB = INFSP.TPAMB
                          AND CAB.SEQUENCIAATUAL = INFSP.SEQUENCIA);

        SELECT COUNT(1) INTO P_REG_2050
        FROM TRINFPR NFPR
        WHERE NFPR.CODEMP = P_CODEMP
            AND NFPR.DTREF = P_DTNEG
            AND NFPR.NUNOTA = :OLD.NUNOTA
            AND EXISTS (SELECT 1
                        FROM TRICPPR CPPR
                        WHERE CPPR.CODEMP = NFPR.CODEMP
                            AND CPPR.DTREF = NFPR.DTREF
                            AND CPPR.TPAMB = NFPR.TPAMB  
                            AND CPPR.SEQUENCIA = NFPR.SEQUENCIA
                            AND CPPR.CHAVE = NFPR.CHAVE
                            AND CPPR.CONTROLE = 'I')
            AND EXISTS (SELECT 1
                        FROM TRICAB CAB
                        WHERE CAB.CODEMP = NFPR.CODEMP
                          AND CAB.DTREF = NFPR.DTREF
                          AND CAB.TPAMB = NFPR.TPAMB
                          AND CAB.SEQUENCIAATUAL = NFPR.SEQUENCIA);
    ELSE
        SELECT COUNT(1) INTO P_REG_2060
        FROM TRINFRB NFRB
        WHERE NFRB.CODEMP = P_CODEMP
            AND NFRB.DTREF = P_DTNEG
            AND NFRB.NUNOTA = :OLD.NUNOTA
            AND EXISTS (SELECT 1
                        FROM TRICPRB CPRB
                        WHERE CPRB.CODEMP = NFRB.CODEMP
                            AND CPRB.DTREF = NFRB.DTREF
                            AND CPRB.TPAMB = NFRB.TPAMB  
                            AND CPRB.SEQUENCIA = NFRB.SEQUENCIA
                            AND CPRB.CHAVE = NFRB.CHAVE
                            AND CPRB.CONTROLE = 'I')
            AND EXISTS (SELECT 1
                        FROM TRICAB CAB
                        WHERE CAB.CODEMP = NFRB.CODEMP
                          AND CAB.DTREF = NFRB.DTREF
                          AND CAB.TPAMB = NFRB.TPAMB
                          AND CAB.SEQUENCIAATUAL = NFRB.SEQUENCIA);
    END IF;

    IF (P_REG_2010 > 0 OR P_REG_2020 > 0) AND
         ( DELETING OR 
           (
            :OLD.CODIMP <> :NEW.CODIMP OR
            :OLD.TIPO <> :NEW.TIPO OR 
            :OLD.ALIQUOTA <> :NEW.ALIQUOTA OR
            :OLD.BASERED <> :NEW.BASERED OR
            :OLD.VALOR <> :NEW.VALOR OR
            :OLD.TIPOINSSESPECIAL <> :NEW.TIPOINSSESPECIAL OR
            :OLD.PERCINSSESPECIAL <> :NEW.PERCINSSESPECIAL OR
            :OLD.VLRINSSESPECIAL <> :NEW.VLRINSSESPECIAL
            )
          )  THEN

        IF P_REG_2010 > 0 THEN
            UPDATE TRIRCST
            SET CONTROLE = 'A'
            WHERE CONTROLE = 'I'
                AND CODEMP = P_CODEMP
                AND DTREF = P_DTNEG
                AND EXISTS (SELECT 1
                            FROM TRIINFST INFST
                            WHERE INFST.NUNOTA = :OLD.NUNOTA
                                AND INFST.CODEMP = TRIRCST.CODEMP
                                AND INFST.DTREF = TRIRCST.DTREF
                                AND INFST.TPAMB = TRIRCST.TPAMB
                                AND INFST.SEQUENCIA = TRIRCST.SEQUENCIA
                                AND INFST.CHAVE = TRIRCST.CHAVE)
                AND EXISTS (SELECT 1
                            FROM TRICAB CAB 
                            WHERE CAB.CODEMP = TRIRCST.CODEMP
                                AND CAB.DTREF = TRIRCST.DTREF
                                AND CAB.TPAMB = TRIRCST.TPAMB
                                AND CAB.SEQUENCIAATUAL = TRIRCST.SEQUENCIA);
        END IF;

        IF P_REG_2020 > 0 THEN
            UPDATE TRIRCSP 
            SET CONTROLE = 'A'
            WHERE CONTROLE = 'I'
                AND CODEMP = P_CODEMP
                AND DTREF = P_DTNEG
                AND EXISTS (SELECT 1
                            FROM TRIINFSP INFSP
                            WHERE INFSP.NUNOTA = :OLD.NUNOTA
                                AND INFSP.CODEMP = TRIRCSP.CODEMP
                                AND INFSP.DTREF = TRIRCSP.DTREF
                                AND INFSP.TPAMB = TRIRCSP.TPAMB
                                AND INFSP.SEQUENCIA = TRIRCSP.SEQUENCIA
                                AND INFSP.CHAVE = TRIRCSP.CHAVE)
                AND EXISTS (SELECT 1
                            FROM TRICAB CAB 
                            WHERE CAB.CODEMP = TRIRCSP.CODEMP
                                AND CAB.DTREF = TRIRCSP.DTREF
                                AND CAB.TPAMB = TRIRCSP.TPAMB
                                AND CAB.SEQUENCIAATUAL = TRIRCSP.SEQUENCIA);
        END IF;
    END IF;

    IF P_REG_2050 > 0 AND
         ( DELETING OR 
           (
            :OLD.CODIMP <> :NEW.CODIMP OR
            :OLD.VALOR <> :NEW.VALOR
            )
          )  THEN

        UPDATE TRICPPR 
        SET CONTROLE = 'A'
        WHERE CONTROLE = 'I'
            AND CODEMP = P_CODEMP
            AND DTREF = P_DTNEG
            AND EXISTS (SELECT 1
                        FROM TRINFPR NFPR
                        WHERE NFPR.NUNOTA = :OLD.NUNOTA
                            AND NFPR.CODEMP = TRICPPR.CODEMP
                            AND NFPR.DTREF = TRICPPR.DTREF
                            AND NFPR.TPAMB = TRICPPR.TPAMB
                            AND NFPR.SEQUENCIA = TRICPPR.SEQUENCIA
                            AND NFPR.CHAVE = TRICPPR.CHAVE)
            AND EXISTS (SELECT 1
                        FROM TRICAB CAB 
                        WHERE CAB.CODEMP = TRICPPR.CODEMP
                            AND CAB.DTREF = TRICPPR.DTREF
                            AND CAB.TPAMB = TRICPPR.TPAMB
                            AND CAB.SEQUENCIAATUAL = TRICPPR.SEQUENCIA);
    END IF;

    IF P_REG_2060 > 0 AND
         ( DELETING OR 
           (
            :OLD.CODIMP <> :NEW.CODIMP OR
            :OLD.CODINC <> :NEW.CODINC OR 
            :OLD.CODLST <> :NEW.CODLST
            )
          )  THEN

        UPDATE TRICPRB 
        SET CONTROLE = 'A'
        WHERE CONTROLE = 'I'
            AND CODEMP = P_CODEMP
            AND DTREF = P_DTNEG
            AND EXISTS (SELECT 1
                        FROM TRINFRB NFRB
                        WHERE NFRB.NUNOTA = :OLD.NUNOTA
                            AND NFRB.CODEMP = TRICPRB.CODEMP
                            AND NFRB.DTREF = TRICPRB.DTREF
                            AND NFRB.TPAMB = TRICPRB.TPAMB
                            AND NFRB.SEQUENCIA = TRICPRB.SEQUENCIA
                            AND NFRB.CHAVE = TRICPRB.CHAVE)
            AND EXISTS (SELECT 1
                        FROM TRICAB CAB 
                        WHERE CAB.CODEMP = TRICPRB.CODEMP
                            AND CAB.DTREF = TRICPRB.DTREF
                            AND CAB.TPAMB = TRICPRB.TPAMB
                            AND CAB.SEQUENCIAATUAL = TRICPRB.SEQUENCIA);
    END IF;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53549-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5354800
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_UPD_DLT_TGFDIN_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210008
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_UPD_DLT_TGFDIN_REINF' NOMEOBJ, 53548 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '2035e28051f875dc1e45992a5e59d91f' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_UPD_DLT_TGFDIN_REINF' and THO.hashcode = '2035e28051f875dc1e45992a5e59d91f')
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53550-0-0
Nro. O.S. : 1148508
Nome      : Altera - TRG_UPD_DLT_TGFIMF_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - TRG_UPD_DLT_TGFIMF_REINF
NomeObjeto: TRG_UPD_DLT_TGFIMF_REINF
TipoObjeto: TRIGGER
NomeTabela: TGFIMF
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_UPD_DLT_TGFIMF_REINF
BEFORE UPDATE OR DELETE ON TGFIMF
FOR EACH ROW
WHEN (
    OLD.TIPIMP = -1 AND (NVL(OLD.ALIQUOTA, 0) - NVL(OLD.PERCINSSESPECIAL, 0)) IN (3.5, 11)
      )
DECLARE 
    P_REG_2010     NUMBER(10);
    P_COUNT        NUMBER(10);
    P_CODEMP       NUMBER(5);
    P_DTNEG        DATE;
BEGIN
    SELECT COUNT(1) INTO P_COUNT
    FROM TGFIMC
    WHERE CODIMP = :OLD.CODIMP
        AND TIPOIMPOSTO = 5; /*INSS*/

    IF P_COUNT > 0 THEN
        SNK_GET_DADOS_TGFCAB(:OLD.NUFIN, P_CODEMP, P_DTNEG);

        /*AQUI VERIFICO DIRETO NAS TABELAS DO REINF SE O NUFIN ESTA LÁ PARA NÃO PRECISAR VERIFICAR A TGFFIN NOVAMENTE*/
        SELECT COUNT(1) INTO P_REG_2010
        FROM TRIINFST INFST
        WHERE INFST.CODEMP = P_CODEMP
            AND INFST.DTREF = P_DTNEG
            AND INFST.NUNOTA = :OLD.NUFIN
            AND EXISTS (SELECT 1
                        FROM TRIRCST RCST
                        WHERE RCST.CODEMP = INFST.CODEMP
                            AND RCST.DTREF = INFST.DTREF
                            AND RCST.TPAMB = INFST.TPAMB  
                            AND RCST.SEQUENCIA = INFST.SEQUENCIA
                            AND RCST.CHAVE = INFST.CHAVE
                            AND RCST.CONTROLE = 'I')
            AND EXISTS (SELECT 1
                        FROM TRICAB CAB
                        WHERE CAB.CODEMP = INFST.CODEMP
                          AND CAB.DTREF = INFST.DTREF
                          AND CAB.TPAMB = INFST.TPAMB
                          AND CAB.SEQUENCIAATUAL = INFST.SEQUENCIA);

        IF P_REG_2010 > 0 AND
             ( DELETING OR 
               (
                :OLD.CODIMP <> :NEW.CODIMP OR
                :OLD.TIPIMP <> :NEW.TIPIMP OR 
                :OLD.ALIQUOTA <> :NEW.ALIQUOTA OR
                NVL(:OLD.BASE, -1) <> NVL(:NEW.BASE, -1) OR
                NVL(:OLD.VALOR, -1) <> NVL(:NEW.VALOR, -1) OR
                NVL(:OLD.TIPOINSSESPECIAL, -1) <> NVL(:NEW.TIPOINSSESPECIAL, -1) OR
                NVL(:OLD.PERCINSSESPECIAL, -1) <> NVL(:NEW.PERCINSSESPECIAL, -1) OR
                NVL(:OLD.VLRINSSESPECIAL, -1) <> NVL(:NEW.VLRINSSESPECIAL, -1)
                )
              )  THEN

            UPDATE TRIRCST
            SET CONTROLE = 'A'
            WHERE CONTROLE = 'I'
                AND CODEMP = P_CODEMP
                AND DTREF = P_DTNEG
                AND EXISTS (SELECT 1
                            FROM TRIINFST INFST
                            WHERE INFST.NUNOTA = :OLD.NUFIN
                                AND INFST.CODEMP = TRIRCST.CODEMP
                                AND INFST.DTREF = TRIRCST.DTREF
                                AND INFST.TPAMB = TRIRCST.TPAMB
                                AND INFST.SEQUENCIA = TRIRCST.SEQUENCIA
                                AND INFST.CHAVE = TRIRCST.CHAVE)
                AND EXISTS (SELECT 1
                            FROM TRICAB CAB 
                            WHERE CAB.CODEMP = TRIRCST.CODEMP
                                AND CAB.DTREF = TRIRCST.DTREF
                                AND CAB.TPAMB = TRIRCST.TPAMB
                                AND CAB.SEQUENCIAATUAL = TRIRCST.SEQUENCIA);
        END IF;
    END IF;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53551-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5355000
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_UPD_DLT_TGFIMF_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210008
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_UPD_DLT_TGFIMF_REINF' NOMEOBJ, 53550 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '678c946cd007846de1c712b402a1adab' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_UPD_DLT_TGFIMF_REINF' and THO.hashcode = '678c946cd007846de1c712b402a1adab')
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53552-0-0
Nro. O.S. : 1148508
Nome      : Altera - TRG_UPD_DLT_TGFIMN_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - TRG_UPD_DLT_TGFIMN_REINF
NomeObjeto: TRG_UPD_DLT_TGFIMN_REINF
TipoObjeto: TRIGGER
NomeTabela: TGFIMN
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_UPD_DLT_TGFIMN_REINF
BEFORE UPDATE OR DELETE ON TGFIMN
FOR EACH ROW
WHEN (
    OLD.TIPOIMPOSTO = 5     /*UTILIZADO APENAS PELOS EVENTOS R-2010, R-2020 E R-2050*/
      )
DECLARE 
    P_REG_2010     NUMBER(10);
    P_REG_2020     NUMBER(10);
    P_REG_2050     NUMBER(10);
    P_COUNT        NUMBER(10) := 0;
    P_CODEMP       NUMBER(5);
    P_DTNEG        DATE;
BEGIN
    /*A TRIGGER TRG_DLT_TGFCAB_AFTER PODE ESTAR CHAMANDO O DELETE DA TGFITE, QUE CHAMA O DELETE DA TGFDIN, LOGO AQUI NÃO TEREMOS MAIS TGFCAB, POR ISSO DEVEMOS TRATA NO EXCEPTION ABAIXO*/
    SNK_GET_DADOS_TGFCAB(:OLD.NUNOTA, P_CODEMP, P_DTNEG);
    
    IF P_CODEMP IS NULL OR P_DTNEG IS NULL THEN
        RETURN;
    END IF;

    /*VERIFICANDO SE EXISTE A EMPRESA DESTA NOTA CONFIGURADA NO REINF CONSIDERANDO O DTNEG COMO REFERÊNCIA*/
    SELECT COUNT(1) INTO P_COUNT 
    FROM TRICAB
    WHERE CODEMP = P_CODEMP
        AND DTREF = P_DTNEG;

    IF P_COUNT = 0 THEN
        RETURN;
    END IF;

    /*AQUI VERIFICO DIRETO NAS TABELAS DO REINF SE O NUNOTA ESTA LÁ PARA NÃO PRECISAR VERIFICAR A TGFCAB NOVAMENTE*/
    SELECT COUNT(1) INTO P_REG_2010
    FROM TRIINFST INFST
    WHERE INFST.CODEMP = P_CODEMP
        AND INFST.DTREF = P_DTNEG
        AND INFST.NUNOTA = :OLD.NUNOTA
        AND EXISTS (SELECT 1
                    FROM TRIRCST RCST
                    WHERE RCST.CODEMP = INFST.CODEMP
                        AND RCST.DTREF = INFST.DTREF
                        AND RCST.TPAMB = INFST.TPAMB  
                        AND RCST.SEQUENCIA = INFST.SEQUENCIA
                        AND RCST.CHAVE = INFST.CHAVE
                        AND RCST.CONTROLE = 'I')
        AND EXISTS (SELECT 1
                    FROM TRICAB CAB
                    WHERE CAB.CODEMP = INFST.CODEMP
                      AND CAB.DTREF = INFST.DTREF
                      AND CAB.TPAMB = INFST.TPAMB
                      AND CAB.SEQUENCIAATUAL = INFST.SEQUENCIA);

    SELECT COUNT(1) INTO P_REG_2020
    FROM TRIINFSP INFSP
    WHERE INFSP.CODEMP = P_CODEMP
        AND INFSP.DTREF = P_DTNEG
        AND INFSP.NUNOTA = :OLD.NUNOTA
        AND EXISTS (SELECT 1
                    FROM TRIRCSP RCSP
                    WHERE RCSP.CODEMP = INFSP.CODEMP
                        AND RCSP.DTREF = INFSP.DTREF
                        AND RCSP.TPAMB = INFSP.TPAMB  
                        AND RCSP.SEQUENCIA = INFSP.SEQUENCIA
                        AND RCSP.CHAVE = INFSP.CHAVE
                        AND RCSP.CONTROLE = 'I')
        AND EXISTS (SELECT 1
                    FROM TRICAB CAB
                    WHERE CAB.CODEMP = INFSP.CODEMP
                      AND CAB.DTREF = INFSP.DTREF
                      AND CAB.TPAMB = INFSP.TPAMB
                      AND CAB.SEQUENCIAATUAL = INFSP.SEQUENCIA);

    SELECT COUNT(1) INTO P_REG_2050
    FROM TRINFPR NFPR
    WHERE NFPR.CODEMP = P_CODEMP
        AND NFPR.DTREF = P_DTNEG
        AND NFPR.NUNOTA = :OLD.NUNOTA
        AND EXISTS (SELECT 1
                    FROM TRICPPR CPPR
                    WHERE CPPR.CODEMP = NFPR.CODEMP
                        AND CPPR.DTREF = NFPR.DTREF
                        AND CPPR.TPAMB = NFPR.TPAMB  
                        AND CPPR.SEQUENCIA = NFPR.SEQUENCIA
                        AND CPPR.CHAVE = NFPR.CHAVE
                        AND CPPR.CONTROLE = 'I')
        AND EXISTS (SELECT 1
                    FROM TRICAB CAB
                    WHERE CAB.CODEMP = NFPR.CODEMP
                      AND CAB.DTREF = NFPR.DTREF
                      AND CAB.TPAMB = NFPR.TPAMB
                      AND CAB.SEQUENCIAATUAL = NFPR.SEQUENCIA);

    IF (P_REG_2010 > 0 OR P_REG_2020 > 0) AND
         ( DELETING OR 
           (
            :OLD.TIPOIMPOSTO <> :NEW.TIPOIMPOSTO OR 
            :OLD.ALIQUOTA <> :NEW.ALIQUOTA OR
            NVL(:OLD.BASE, -1) <> NVL(:NEW.BASE, -1) OR
            NVL(:OLD.VALOR, -1) <> NVL(:NEW.VALOR, -1) OR
            NVL(:OLD.TIPOINSSESPECIAL, -1) <> NVL(:NEW.TIPOINSSESPECIAL, -1) OR
            NVL(:OLD.PERCINSSESPECIAL, -1) <> NVL(:NEW.PERCINSSESPECIAL, -1) OR
            NVL(:OLD.VLRINSSESPECIAL, -1) <> NVL(:NEW.VLRINSSESPECIAL, -1)
            )
          )  THEN

        IF P_REG_2010 > 0 THEN 
            UPDATE TRIRCST
            SET CONTROLE = 'A'
            WHERE CONTROLE = 'I'
                AND CODEMP = P_CODEMP
                AND DTREF = P_DTNEG
                AND EXISTS (SELECT 1
                            FROM TRIINFST INFST
                            WHERE INFST.NUNOTA = :OLD.NUNOTA
                                AND INFST.CODEMP = TRIRCST.CODEMP
                                AND INFST.DTREF = TRIRCST.DTREF
                                AND INFST.TPAMB = TRIRCST.TPAMB
                                AND INFST.SEQUENCIA = TRIRCST.SEQUENCIA
                                AND INFST.CHAVE = TRIRCST.CHAVE)
                AND EXISTS (SELECT 1
                            FROM TRICAB CAB 
                            WHERE CAB.CODEMP = TRIRCST.CODEMP
                                AND CAB.DTREF = TRIRCST.DTREF
                                AND CAB.TPAMB = TRIRCST.TPAMB
                                AND CAB.SEQUENCIAATUAL = TRIRCST.SEQUENCIA);
        END IF;

        IF P_REG_2020 > 0 THEN
            UPDATE TRIRCSP 
            SET CONTROLE = 'A'
            WHERE CONTROLE = 'I'
                AND CODEMP = P_CODEMP
                AND DTREF = P_DTNEG
                AND EXISTS (SELECT 1
                            FROM TRIINFSP INFSP
                            WHERE INFSP.NUNOTA = :OLD.NUNOTA
                                AND INFSP.CODEMP = TRIRCSP.CODEMP
                                AND INFSP.DTREF = TRIRCSP.DTREF
                                AND INFSP.TPAMB = TRIRCSP.TPAMB
                                AND INFSP.SEQUENCIA = TRIRCSP.SEQUENCIA
                                AND INFSP.CHAVE = TRIRCSP.CHAVE)
                AND EXISTS (SELECT 1
                            FROM TRICAB CAB 
                            WHERE CAB.CODEMP = TRIRCSP.CODEMP
                                AND CAB.DTREF = TRIRCSP.DTREF
                                AND CAB.TPAMB = TRIRCSP.TPAMB
                                AND CAB.SEQUENCIAATUAL = TRIRCSP.SEQUENCIA);
        END IF;
    END IF;

    IF P_REG_2050 > 0 AND 
        ( DELETING OR 
           (
            :OLD.TIPOIMPOSTO <> :NEW.TIPOIMPOSTO OR 
            NVL(:OLD.VALOR, -1) <> NVL(:NEW.VALOR, -1)
            )
          )  THEN

        UPDATE TRICPPR 
        SET CONTROLE = 'A'
        WHERE CONTROLE = 'I'
            AND CODEMP = P_CODEMP
            AND DTREF = P_DTNEG
            AND EXISTS (SELECT 1
                        FROM TRINFPR NFPR
                        WHERE NFPR.NUNOTA = :OLD.NUNOTA
                            AND NFPR.CODEMP = TRICPPR.CODEMP
                            AND NFPR.DTREF = TRICPPR.DTREF
                            AND NFPR.TPAMB = TRICPPR.TPAMB
                            AND NFPR.SEQUENCIA = TRICPPR.SEQUENCIA
                            AND NFPR.CHAVE = TRICPPR.CHAVE)
            AND EXISTS (SELECT 1
                        FROM TRICAB CAB 
                        WHERE CAB.CODEMP = TRICPPR.CODEMP
                            AND CAB.DTREF = TRICPPR.DTREF
                            AND CAB.TPAMB = TRICPPR.TPAMB
                            AND CAB.SEQUENCIAATUAL = TRICPPR.SEQUENCIA);
    END IF;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53553-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5355200
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_UPD_DLT_TGFIMN_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210008
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_UPD_DLT_TGFIMN_REINF' NOMEOBJ, 53552 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, 'f72169da7d3c7cb97da653bbe5ea6758' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_UPD_DLT_TGFIMN_REINF' and THO.hashcode = 'f72169da7d3c7cb97da653bbe5ea6758')
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53554-0-0
Nro. O.S. : 1148508
Nome      : Altera- TRG_UPD_DLT_TGFITE_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - TRG_UPD_DLT_TGFITE_REINF
NomeObjeto: TRG_UPD_DLT_TGFITE_REINF
TipoObjeto: TRIGGER
NomeTabela: TGFITE
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_UPD_DLT_TGFITE_REINF
BEFORE UPDATE OR DELETE ON TGFITE
FOR EACH ROW
DECLARE 
    P_REG_2010     NUMBER(10);
    P_REG_2020     NUMBER(10);
    P_REG_2050     NUMBER(10);
    P_REG_2060     NUMBER(10);
    P_COUNT        NUMBER(10) := 0;
    P_CODEMP       NUMBER(5);
    P_DTNEG        DATE;
BEGIN
    /*A TRIGGER TRG_DLT_TGFCAB_AFTER PODE ESTAR CHAMANDO O DELETE DA TGFITE, LOGO AQUI NÃO TEREMOS MAIS TGFCAB, POR ISSO DEVEMOS TRATA NO EXCEPTION ABAIXO*/
    SNK_GET_DADOS_TGFCAB(:OLD.NUNOTA, P_CODEMP, P_DTNEG);

    IF P_DTNEG IS NULL THEN
        RETURN;
    END IF;

    /*VERIFICANDO SE EXISTE A EMPRESA DESTA NOTA CONFIGURADA NO REINF CONSIDERANDO O DTNEG COMO REFERÊNCIA*/
    SELECT COUNT(1) INTO P_COUNT 
    FROM TRICAB
    WHERE CODEMP = :OLD.CODEMP
        AND DTREF = P_DTNEG;

    IF P_COUNT = 0 THEN
        RETURN;
    END IF;

    /*AQUI VERIFICO DIRETO NAS TABELAS DO REINF SE O NUNOTA ESTA LÁ PARA NÃO PRECISAR VERIFICAR A TGFCAB NOVAMENTE*/
    SELECT COUNT(1) INTO P_REG_2010
    FROM TRIINFST INFST
    WHERE INFST.CODEMP = :OLD.CODEMP
        AND INFST.DTREF = P_DTNEG
        AND INFST.NUNOTA = :OLD.NUNOTA
        AND EXISTS (SELECT 1
                    FROM TRIRCST RCST
                    WHERE RCST.CODEMP = INFST.CODEMP
                        AND RCST.DTREF = INFST.DTREF
                        AND RCST.TPAMB = INFST.TPAMB  
                        AND RCST.SEQUENCIA = INFST.SEQUENCIA
                        AND RCST.CHAVE = INFST.CHAVE
                        AND RCST.CONTROLE = 'I')
        AND EXISTS (SELECT 1
                    FROM TRICAB CAB
                    WHERE CAB.CODEMP = INFST.CODEMP
                      AND CAB.DTREF = INFST.DTREF
                      AND CAB.TPAMB = INFST.TPAMB
                      AND CAB.SEQUENCIAATUAL = INFST.SEQUENCIA);

    SELECT COUNT(1) INTO P_REG_2020
    FROM TRIINFSP INFSP
    WHERE INFSP.CODEMP = :OLD.CODEMP
        AND INFSP.DTREF = P_DTNEG
        AND INFSP.NUNOTA = :OLD.NUNOTA
        AND EXISTS (SELECT 1
                    FROM TRIRCSP RCSP
                    WHERE RCSP.CODEMP = INFSP.CODEMP
                        AND RCSP.DTREF = INFSP.DTREF
                        AND RCSP.TPAMB = INFSP.TPAMB  
                        AND RCSP.SEQUENCIA = INFSP.SEQUENCIA
                        AND RCSP.CHAVE = INFSP.CHAVE
                        AND RCSP.CONTROLE = 'I')
        AND EXISTS (SELECT 1
                    FROM TRICAB CAB
                    WHERE CAB.CODEMP = INFSP.CODEMP
                      AND CAB.DTREF = INFSP.DTREF
                      AND CAB.TPAMB = INFSP.TPAMB
                      AND CAB.SEQUENCIAATUAL = INFSP.SEQUENCIA);

    SELECT COUNT(1) INTO P_REG_2050
    FROM TRINFPR NFPR
    WHERE NFPR.CODEMP = :OLD.CODEMP
        AND NFPR.DTREF = P_DTNEG
        AND NFPR.NUNOTA = :OLD.NUNOTA
        AND EXISTS (SELECT 1
                    FROM TRICPPR CPPR
                    WHERE CPPR.CODEMP = NFPR.CODEMP
                        AND CPPR.DTREF = NFPR.DTREF
                        AND CPPR.TPAMB = NFPR.TPAMB  
                        AND CPPR.SEQUENCIA = NFPR.SEQUENCIA
                        AND CPPR.CHAVE = NFPR.CHAVE
                        AND CPPR.CONTROLE = 'I')
        AND EXISTS (SELECT 1
                    FROM TRICAB CAB
                    WHERE CAB.CODEMP = NFPR.CODEMP
                      AND CAB.DTREF = NFPR.DTREF
                      AND CAB.TPAMB = NFPR.TPAMB
                      AND CAB.SEQUENCIAATUAL = NFPR.SEQUENCIA);

    SELECT COUNT(1) INTO P_REG_2060
    FROM TRINFRB NFRB
    WHERE NFRB.CODEMP = :OLD.CODEMP
        AND NFRB.DTREF = P_DTNEG
        AND NFRB.NUNOTA = :OLD.NUNOTA
        AND EXISTS (SELECT 1
                    FROM TRICPRB CPRB
                    WHERE CPRB.CODEMP = NFRB.CODEMP
                        AND CPRB.DTREF = NFRB.DTREF
                        AND CPRB.TPAMB = NFRB.TPAMB  
                        AND CPRB.SEQUENCIA = NFRB.SEQUENCIA
                        AND CPRB.CHAVE = NFRB.CHAVE
                        AND CPRB.CONTROLE = 'I')
        AND EXISTS (SELECT 1
                    FROM TRICAB CAB
                    WHERE CAB.CODEMP = NFRB.CODEMP
                      AND CAB.DTREF = NFRB.DTREF
                      AND CAB.TPAMB = NFRB.TPAMB
                      AND CAB.SEQUENCIAATUAL = NFRB.SEQUENCIA);

    IF (P_REG_2010 > 0 OR P_REG_2020 > 0 OR P_REG_2060 > 0) AND
         ( DELETING OR 
           (
            :OLD.CODEMP <> :NEW.CODEMP OR
            :OLD.VLRTOT <> :NEW.VLRTOT OR 
            :OLD.CODPROD <> :NEW.CODPROD OR
            :OLD.USOPROD <> :NEW.USOPROD    /*ESTE CAMPO NÃO É UTILIZADO PELA VIEW DO EVENTO R-2050, POR ISSO A VALIDAÇÃO DE ALTERAÇÃO DESSE EVENTO FICOU SEPARADA*/
            )
          )  THEN

        IF P_REG_2010 > 0 THEN
            UPDATE TRIRCST
            SET CONTROLE = 'A'
            WHERE CONTROLE = 'I'
                AND CODEMP = :OLD.CODEMP
                AND DTREF = P_DTNEG
                AND EXISTS (SELECT 1
                            FROM TRIINFST INFST
                            WHERE INFST.NUNOTA = :OLD.NUNOTA
                                AND INFST.CODEMP = TRIRCST.CODEMP
                                AND INFST.DTREF = TRIRCST.DTREF
                                AND INFST.TPAMB = TRIRCST.TPAMB
                                AND INFST.SEQUENCIA = TRIRCST.SEQUENCIA
                                AND INFST.CHAVE = TRIRCST.CHAVE)
                AND EXISTS (SELECT 1
                            FROM TRICAB CAB 
                            WHERE CAB.CODEMP = TRIRCST.CODEMP
                                AND CAB.DTREF = TRIRCST.DTREF
                                AND CAB.TPAMB = TRIRCST.TPAMB
                                AND CAB.SEQUENCIAATUAL = TRIRCST.SEQUENCIA);
        END IF;

        IF P_REG_2020 > 0 THEN
            UPDATE TRIRCSP 
            SET CONTROLE = 'A'
            WHERE CONTROLE = 'I'
                AND CODEMP = :OLD.CODEMP
                AND DTREF = P_DTNEG
                AND EXISTS (SELECT 1
                            FROM TRIINFSP INFSP
                            WHERE INFSP.NUNOTA = :OLD.NUNOTA
                                AND INFSP.CODEMP = TRIRCSP.CODEMP
                                AND INFSP.DTREF = TRIRCSP.DTREF
                                AND INFSP.TPAMB = TRIRCSP.TPAMB
                                AND INFSP.SEQUENCIA = TRIRCSP.SEQUENCIA
                                AND INFSP.CHAVE = TRIRCSP.CHAVE)
                AND EXISTS (SELECT 1
                            FROM TRICAB CAB 
                            WHERE CAB.CODEMP = TRIRCSP.CODEMP
                                AND CAB.DTREF = TRIRCSP.DTREF
                                AND CAB.TPAMB = TRIRCSP.TPAMB
                                AND CAB.SEQUENCIAATUAL = TRIRCSP.SEQUENCIA);
        END IF;

        IF P_REG_2060 > 0 THEN
            UPDATE TRICPPR 
            SET CONTROLE = 'A'
            WHERE CONTROLE = 'I'
                AND CODEMP = :OLD.CODEMP
                AND DTREF = P_DTNEG
                AND EXISTS (SELECT 1
                            FROM TRINFPR NFPR
                            WHERE NFPR.NUNOTA = :OLD.NUNOTA
                                AND NFPR.CODEMP = TRICPPR.CODEMP
                                AND NFPR.DTREF = TRICPPR.DTREF
                                AND NFPR.TPAMB = TRICPPR.TPAMB
                                AND NFPR.SEQUENCIA = TRICPPR.SEQUENCIA
                                AND NFPR.CHAVE = TRICPPR.CHAVE)
                AND EXISTS (SELECT 1
                            FROM TRICAB CAB 
                            WHERE CAB.CODEMP = TRICPPR.CODEMP
                                AND CAB.DTREF = TRICPPR.DTREF
                                AND CAB.TPAMB = TRICPPR.TPAMB
                                AND CAB.SEQUENCIAATUAL = TRICPPR.SEQUENCIA);
        END IF;
    END IF;

    IF P_REG_2050 > 0 AND
         ( DELETING OR 
           (
            :OLD.CODEMP <> :NEW.CODEMP OR
            :OLD.VLRTOT <> :NEW.VLRTOT OR 
            :OLD.CODPROD <> :NEW.CODPROD
            )
          )  THEN

        UPDATE TRICPPR 
        SET CONTROLE = 'A'
        WHERE CONTROLE = 'I'
            AND CODEMP = :OLD.CODEMP
            AND DTREF = P_DTNEG
            AND EXISTS (SELECT 1
                        FROM TRINFPR NFPR
                        WHERE NFPR.NUNOTA = :OLD.NUNOTA
                            AND NFPR.CODEMP = TRICPPR.CODEMP
                            AND NFPR.DTREF = TRICPPR.DTREF
                            AND NFPR.TPAMB = TRICPPR.TPAMB
                            AND NFPR.SEQUENCIA = TRICPPR.SEQUENCIA
                            AND NFPR.CHAVE = TRICPPR.CHAVE)
            AND EXISTS (SELECT 1
                        FROM TRICAB CAB 
                        WHERE CAB.CODEMP = TRICPPR.CODEMP
                            AND CAB.DTREF = TRICPPR.DTREF
                            AND CAB.TPAMB = TRICPPR.TPAMB
                            AND CAB.SEQUENCIAATUAL = TRICPPR.SEQUENCIA);
    END IF;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53555-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5355400
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_UPD_DLT_TGFITE_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210008
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_UPD_DLT_TGFITE_REINF' NOMEOBJ, 53554 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '1d84b851999a69757c07a34f6975ede4' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_UPD_DLT_TGFITE_REINF' and THO.hashcode = '1d84b851999a69757c07a34f6975ede4')
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 13/04/2018 17:55:11
Num.Script: 53563-0-0
Nro. O.S. : 1170347
Nome      : Cria - TFPBAS LIBESOCIAL
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: LIBESOCIAL
TipoObjeto: COLUMN
NomeTabela: TFPBAS
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TFPBAS ADD LIBESOCIAL CHAR(1)';
   EXECUTE IMMEDIATE 'UPDATE TFPBAS SET LIBESOCIAL = ''N''';
   EXECUTE IMMEDIATE 'ALTER TABLE TFPBAS ADD  CONSTRAINT CKC_LIBESOCIAL_TFPBAS CHECK (LIBESOCIAL IN (''S'',''N''))';
   EXECUTE IMMEDIATE 'ALTER TABLE TFPBAS MODIFY LIBESOCIAL DEFAULT ''N'' NOT NULL';
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 13/04/2018 17:55:11
Num.Script: 53564-0-0
Nro. O.S. : 1170347
Nome      : Cria - TFPMOV INSCONSIG
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: INSCONSIG
TipoObjeto: COLUMN
NomeTabela: TFPMOV
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPMOV ADD INSCONSIG VARCHAR2(5)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 13/04/2018 17:55:11
Num.Script: 53565-0-0
Nro. O.S. : 1170347
Nome      : Cria - TFPMOV NRCONTR
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: NRCONTR
TipoObjeto: COLUMN
NomeTabela: TFPMOV
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPMOV ADD NRCONTR VARCHAR2(40)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 13/04/2018 17:55:11
Num.Script: 53566-0-0
Nro. O.S. : 1170347
Nome      : Cria - TFPFOL INSCONSIG
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: INSCONSIG
TipoObjeto: COLUMN
NomeTabela: TFPFOL
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPFOL ADD INSCONSIG VARCHAR2(5)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 13/04/2018 17:55:11
Num.Script: 53567-0-0
Nro. O.S. : 1170347
Nome      : Cria - TFPFOL NRCONTR
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: NRCONTR
TipoObjeto: COLUMN
NomeTabela: TFPFOL
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPFOL ADD NRCONTR VARCHAR2(40)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53616-0-0
Nro. O.S. : 1148508
Nome      : Drop - CKC_STATUS_TRICAB
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Drop - CKC_STATUS_TRICAB
NomeObjeto: CKC_STATUS_TRICAB
TipoObjeto: CONSTRAINT
NomeTabela: TRICAB
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRICAB DROP CONSTRAINT CKC_STATUS_TRICAB
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53617-0-0
Nro. O.S. : 1148508
Nome      : Cria - CKC_STATUS_TRICAB
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - CKC_STATUS_TRICAB
NomeObjeto: CKC_STATUS_TRICAB
TipoObjeto: CONSTRAINT
NomeTabela: TRICAB
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRICAB ADD CONSTRAINT CKC_STATUS_TRICAB CHECK (STATUS IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53625-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRG_UPD_TGFCAB_REINF2 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - TRG_UPD_TGFCAB_REINF2 
NomeObjeto: TRG_UPD_TGFCAB_REINF2 
TipoObjeto: TRIGGER
NomeTabela: TGFCAB
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_UPD_TGFCAB_REINF2 
AFTER UPDATE ON TGFCAB
DECLARE P_COUNT         NUMBER(10) := 0;
        queSql          VARCHAR2(4000);
        queUpd          VARCHAR2(4000);
BEGIN
    FOR CUR IN (SELECT (SELECT NOMETAB FROM TRIMON WHERE NOMETABPAI IS NULL AND NOMEEVENTO = M.NOMEEVENTO) AS NOMETAB,
                        NOMEVIEW
                FROM TRIMON M
                WHERE VIEWDETALHE = 'S')
    LOOP
        queSql:= '  SELECT COUNT(1)
                    FROM '||CUR.NOMETAB||' P
                    WHERE EXISTS (SELECT 1
                                  FROM TBTEMP_REINF T
                                      INNER JOIN '||CUR.NOMEVIEW||' V ON V.NUNOTA = T.NUNOTA AND
                                                                         V.CODEMP = T.CODEMP AND
                                                                         V.DTREF = T.DTREF
                                  WHERE V.CODEMP = P.CODEMP
                                     AND V.DTREF = P.DTREF
                                     AND V.CHAVE = P.CHAVE) 
                       AND EXISTS (SELECT 1
                                   FROM TRICAB CAB 
                                   WHERE CAB.CODEMP = P.CODEMP
                                      AND CAB.DTREF = P.DTREF
                                      AND CAB.TPAMB = P.TPAMB
                                      AND CAB.SEQUENCIAATUAL = P.SEQUENCIA)
                       AND P.CONTROLE = ''I''';

        EXECUTE IMMEDIATE queSql INTO P_COUNT;

        IF P_COUNT > 0 THEN 
            queUpd := ' UPDATE '||CUR.NOMETAB||'
                        SET CONTROLE = ''A''
                        WHERE EXISTS (SELECT 1
                                      FROM TBTEMP_REINF T
                                          INNER JOIN '||CUR.NOMEVIEW||' V ON V.NUNOTA = T.NUNOTA AND
                                                                        V.CODEMP = T.CODEMP AND
                                                                        V.DTREF = T.DTREF 
                                      WHERE V.CODEMP = '||CUR.NOMETAB||'.CODEMP
                                         AND V.DTREF = '||CUR.NOMETAB||'.DTREF
                                         AND V.CHAVE = '||CUR.NOMETAB||'.CHAVE) 
                           AND EXISTS (SELECT 1
                                       FROM TRICAB CAB 
                                       WHERE CAB.CODEMP = '||CUR.NOMETAB||'.CODEMP
                                          AND CAB.DTREF = '||CUR.NOMETAB||'.DTREF
                                          AND CAB.TPAMB = '||CUR.NOMETAB||'.TPAMB
                                          AND CAB.SEQUENCIAATUAL = '||CUR.NOMETAB||'.SEQUENCIA)
                           AND '||CUR.NOMETAB||'.CONTROLE = ''I''';     

            EXECUTE IMMEDIATE queUpd;   
        END IF; 

        queSql:= '  SELECT COUNT(1)
                    FROM TRICAB CAB
                    WHERE EXISTS (SELECT 1
                                  FROM TBTEMP_REINF T
                                      INNER JOIN '||CUR.NOMEVIEW||' V ON T.NUNOTA = V.NUNOTA
                                  WHERE V.CODEMP = CAB.CODEMP
                                     AND V.DTREF = CAB.DTREF)
                       AND NOT EXISTS (SELECT 1
                                       FROM '||CUR.NOMETAB||' P
                                       WHERE P.CODEMP = CAB.CODEMP
                                          AND P.DTREF = CAB.DTREF
                                          AND P.TPAMB = CAB.TPAMB
                                          AND P.SEQUENCIA = CAB.SEQUENCIAATUAL)'; 

        EXECUTE IMMEDIATE queSql INTO P_COUNT;

        IF P_COUNT > 0 THEN
            queUpd := ' UPDATE TRICAB
                        SET STATUS = CASE WHEN STATUS = ''7'' THEN ''5'' ELSE ''10'' END
                        WHERE EXISTS (SELECT 1
                                      FROM TBTEMP_REINF T
                                          INNER JOIN '||CUR.NOMEVIEW||' V ON V.NUNOTA = T.NUNOTA AND
                                                                             V.CODEMP = T.CODEMP AND
                                                                             V.DTREF = T.DTREF
                                      WHERE V.CODEMP = TRICAB.CODEMP
                                         AND V.DTREF = TRICAB.DTREF)
                           AND NOT EXISTS (SELECT 1
                                           FROM '||CUR.NOMETAB||' P
                                           WHERE P.CODEMP = TRICAB.CODEMP
                                              AND P.DTREF = TRICAB.DTREF
                                              AND P.TPAMB = TRICAB.TPAMB
                                              AND P.SEQUENCIA = TRICAB.SEQUENCIAATUAL
                                              AND P.CHAVE = (SELECT CHAVE
                                                             FROM TBTEMP_REINF T
                                                                INNER JOIN '||CUR.NOMEVIEW||' V ON V.NUNOTA = T.NUNOTA AND
                                                                             V.CODEMP = T.CODEMP AND
                                                                             V.DTREF = T.DTREF
                                                             WHERE V.CODEMP = P.CODEMP
                                                                AND V.DTREF = P.DTREF))'; 

            EXECUTE IMMEDIATE queUpd;
        END IF;
    END LOOP;

    DELETE TBTEMP_REINF;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53626-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5362500
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_UPD_TGFCAB_REINF2
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210008
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_UPD_TGFCAB_REINF2' NOMEOBJ, 53625 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '723810a90f19d12ea4d51dbbfd5f6dfe' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_UPD_TGFCAB_REINF2' and THO.hashcode = '723810a90f19d12ea4d51dbbfd5f6dfe')
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53636-0-0
Nro. O.S. : 1148508
Nome      : Altera - TRG_DLT_TRITPCO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - TRG_DLT_TRITPCO
NomeObjeto: TRG_DLT_TRITPCO
TipoObjeto: TRIGGER
NomeTabela: TRITPCO
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_DLT_TRITPCO
BEFORE DELETE ON TRITPCO
FOR EACH ROW
BEGIN
    DELETE TRINFPR
    WHERE CODEMP = :OLD.CODEMP
        AND DTREF = :OLD.DTREF
        AND TPAMB = :OLD.TPAMB
        AND SEQUENCIA = :OLD.SEQUENCIA
        AND CHAVE = :OLD.CHAVE
        AND INDCOM = :OLD.INDCOM;
        
    DELETE TRIIPFC
    WHERE CODEMP = :OLD.CODEMP
        AND DTREF = :OLD.DTREF
        AND TPAMB = :OLD.TPAMB
        AND SEQUENCIA = :OLD.SEQUENCIA
        AND CHAVE = :OLD.CHAVE
        AND INDCOM = :OLD.INDCOM;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53637-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5363600
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_DLT_TRITPCO
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210008
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_DLT_TRITPCO' NOMEOBJ, 53636 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, 'f57042139335a1f09aa82ec8ff257466' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_DLT_TRITPCO' and THO.hashcode = 'f57042139335a1f09aa82ec8ff257466')
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53645-0-0
Nro. O.S. : 1148508
Nome      : Altera - TRG_DLT_TRICPRB
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - TRG_DLT_TRICPRB
NomeObjeto: TRG_DLT_TRICPRB
TipoObjeto: TRIGGER
NomeTabela: TRICPRB
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_DLT_TRICPRB
BEFORE DELETE ON TRICPRB
FOR EACH ROW
BEGIN
    DELETE TRITCAE
    WHERE CODEMP = :OLD.CODEMP
        AND DTREF = :OLD.DTREF
        AND TPAMB = :OLD.TPAMB
        AND SEQUENCIA = :OLD.SEQUENCIA
        AND CHAVE = :OLD.CHAVE;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 53646-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5364500
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_DLT_TRICPRB
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210008
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_DLT_TRICPRB' NOMEOBJ, 53645 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '494c200c959dfffdc3708916d79721c8' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_DLT_TRICPRB' and THO.hashcode = '494c200c959dfffdc3708916d79721c8')
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 25/04/2018 10:22:32
Num.Script: 53715-0-0
Nro. O.S. : 1161412
Nome      : Criar - TFPS2298
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS2298
NomeObjeto: TFPS2298
TipoObjeto: TABLE
NomeTabela: TFPS2298
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS2298(
    CODEMP                  NUMBER(5)   NOT NULL,
    DTREF                   DATE        NOT NULL,
    SEQUENCIA               NUMBER(5)   NOT NULL,
    TPINSCEMPREGADOR        NUMBER(5),
    NRINSCEMPREGADOR        VARCHAR2(15),
    CPFTRAB                 VARCHAR2(11),
    NISTRAB                 VARCHAR2(11),
    MATRICULA               VARCHAR2(30),               
    TPREINT                 CHAR(1),
    NRPROCJUD               VARCHAR2(20),
    NRLEIANISTIA            VARCHAR2(13),
    DTEFETRETORNO           DATE,
    DTEFEITO                DATE,
    INDPAGTOJUIZO           CHAR(1),
    STATUS                  CHAR(1)         NOT NULL,
    NRORECIBO               VARCHAR2(50), 
    NRORECIBO_ANT           VARCHAR2(50),
    ACAO                    CHAR(1),
    CHAVE                   VARCHAR2(100)   NOT NULL,
    CONTROLE                CHAR(1)         DEFAULT 'I' NOT NULL,
    TPAMB                   CHAR(1)         DEFAULT 'T' NOT NULL,
    CONSTRAINT PK_TFPS2298 PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE),
    CONSTRAINT CHK_STATUS_TFPS2298 CHECK (STATUS IN ('P','I', 'E', 'F', 'X')), /*'P'= PENDENTE 'I'=INCLUÍDO 'E=ENVIADO 'F=FINALIZADO, 'X-FINALIZADO COM ERRO */ 
    CONSTRAINT CHK_ACAO_TFPS2298 CHECK (ACAO IN ('I', 'A', 'E')), /*'I'=INCLUÍR 'A=ALTERAR 'E=EXCLUIR */
    CONSTRAINT CHK_TPAMB_TFPS2298 CHECK (TPAMB IN ('P', 'T')) /* P = PRODUCAO T = TESTE */
)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 18/04/2018 18:40:19
Num.Script: 53716-0-0
Nro. O.S. : 1161412
Nome      : Criar - TFPS2298_I01 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS2298_I01 
NomeObjeto: TFPS2298_I01 
TipoObjeto: INDEX
NomeTabela: TFPS2298
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
    BEGIN
       EXECUTE IMMEDIATE 'CREATE INDEX TFPS2298_I01 ON TFPS2298 (CODEMP, CHAVE)';
    EXCEPTION
         WHEN OTHERS THEN
            NULL;
    END;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 18/04/2018 18:40:19
Num.Script: 53717-0-0
Nro. O.S. : 1161412
Nome      : Criar - VGF_EVENTO_S2298
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S2298
NomeObjeto: VGF_EVENTO_S2298
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2298
AS
   SELECT VEMP.TPINSCEMPREGADOR,
          VEMP.NRINSCEMPREGADOR,
          FUN.CPF AS CPFTRAB,
          FUN.PIS AS NISTRAB,
          FUN.MATRICULA AS MATRICULA,
          REI.TPREINT,
          REI.PROCJUD AS NRPROCJUD,
          REI.LEIANISTIA AS NRLEIANISTIA,
          REI.DTEFETRETORNO,
          REI.DTEFEITO,
          REI.INDPAGTOJUIZO,
          VEMP.CODEMPMATRIZ AS CODEMP,
          CAST(FUN.CODEMP || ':' || FUN.CODFUNC AS VARCHAR2(100)) AS "CHAVE"
     FROM TFPREI REI, TFPFUN FUN, VGF_EVENTO_EMPREGADOR VEMP
  WHERE REI.CODEMP  = FUN.CODEMP
    AND REI.CODFUNC = FUN.CODFUNC
    AND REI.CODEMP = VEMP.CODEMP
    AND EXISTS (SELECT 1 
                  FROM TFPS2200 P 
               WHERE P.CODEMP = VEMP.CODEMPMATRIZ
                 AND P.DTDESLIG IS NOT NULL 
                 AND P.CHAVE = CAST(FUN.CODEMP || ':' || FUN.CODFUNC AS VARCHAR2(100)))
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 18/04/2018 18:40:19
Num.Script: 53718-0-0
Nro. O.S. : 1161412
Nome      : Script - TFPMON
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - TFPMON
NomeObjeto: TFPMON
TipoObjeto: TABLE
NomeTabela: TFPMON
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
    P_COUNT     NUMBER(5);
BEGIN
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-2298'
        AND NOMETAB = 'TFPS2298'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'R';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO)
        VALUES ('S-2298', 'TFPS2298', 'NRORECIBO', 'R');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-2298'
        AND NOMETAB = 'TFPS2298'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'C';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW)
        VALUES ('S-2298', 'TFPS2298', 'NRORECIBO', 'C','VGF_EVENTO_S2298');
    END IF;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 18/04/2018 19:10:43
Num.Script: 53727-0-0
Nro. O.S. : 1161411
Nome      : Criar - TFPS2260
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS2260
NomeObjeto: TFPS2260
TipoObjeto: TABLE
NomeTabela: TFPS2260
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS2260(
    CODEMP                  NUMBER(5)   NOT NULL,
    CODEMPFUNC              NUMBER(5)   NOT NULL,
    CODFUNC                 NUMBER(10)   NOT NULL,
    DTREF                   DATE        NOT NULL,
    SEQUENCIA               NUMBER(5)   NOT NULL,
    TPINSCEMPREGADOR        NUMBER(5),
    NRINSCEMPREGADOR        VARCHAR2(15),
    CPFTRAB                 VARCHAR2(11),
    NISTRAB                 VARCHAR2(11),
    MATRICULA               VARCHAR2(30),               
    CODCONV                 VARCHAR2(30),
    DTINICIO                DATE,
    DTFIM                   DATE,
    CODHORCONTRAT           VARCHAR2(30),
    DSCJORNADA              VARCHAR2(999),
    INDLOCAL                CHAR(1),
    TPLOGRAD                VARCHAR2(4),
    DSCLOGRAD               VARCHAR2(80),
    NRLOGRAD                VARCHAR2(10),
    COMPLEMENTO             VARCHAR2(30),
    BAIRRO                  VARCHAR2(60),
    CEP                     VARCHAR2(8),
    CODMUNIC                VARCHAR2(7),
    UF                      VARCHAR2(2),    
    STATUS                  CHAR(1)         NOT NULL,
    NRORECIBO               VARCHAR2(50), 
    NRORECIBO_ANT           VARCHAR2(50),
    ACAO                    CHAR(1),
    CHAVE                   VARCHAR2(100)   NOT NULL,
    CONTROLE                CHAR(1)         DEFAULT 'I' NOT NULL,
    TPAMB                   CHAR(1)         DEFAULT 'T' NOT NULL,
    CONSTRAINT PK_TFPS2260 PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE),
    CONSTRAINT CHK_STATUS_TFPS2260 CHECK (STATUS IN ('P','I', 'E', 'F', 'X')), /*'P'= PENDENTE 'I'=INCLUÍDO 'E=ENVIADO 'F=FINALIZADO, 'X-FINALIZADO COM ERRO */ 
    CONSTRAINT CHK_ACAO_TFPS2260 CHECK (ACAO IN ('I', 'A', 'E')), /*'I'=INCLUÍR 'A=ALTERAR 'E=EXCLUIR */
    CONSTRAINT CHK_TPAMB_TFPS2260 CHECK (TPAMB IN ('P', 'T')) /* P = PRODUCAO T = TESTE */
)
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 18/04/2018 19:10:43
Num.Script: 53728-0-0
Nro. O.S. : 1161411
Nome      : Criar - TFPS2260_I01 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS2260_I01 
NomeObjeto: TFPS2260_I01 
TipoObjeto: INDEX
NomeTabela: TFPS2260
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
    BEGIN
       EXECUTE IMMEDIATE 'CREATE INDEX TFPS2260_I01 ON TFPS2260 (CODEMP, CHAVE)';
    EXCEPTION
         WHEN OTHERS THEN
            NULL;
    END;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 18/04/2018 19:10:43
Num.Script: 53729-0-0
Nro. O.S. : 1161411
Nome      : Criar - VGF_EVENTO_S2260
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S2260
NomeObjeto: VGF_EVENTO_S2260
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2260
AS
   SELECT VEMP.TPINSCEMPREGADOR,
          VEMP.NRINSCEMPREGADOR,
          FUN.CPF AS CPFTRAB,
          FUN.PIS AS NISTRAB,
          FUN.MATRICULA AS MATRICULA,
          FCTI.CODCONV,
          FCTI.DTINICIO,
          FCTI.DTFIM,
          0 AS CODHORCONTRAT,
          CGH.DESCRCARGAHOR AS DSCJORNADA,
          FCTI.TIPLOCALTRAB AS INDLOCAL,
          EN.TIPO AS TPLOGRAD,
          EN.NOMEEND AS DSCLOGRAD,
          CTI.NUMEND AS NRLOGRAD,
          CTI.COMPLEMENTO AS COMPLEMENTO,
          BAI.NOMEBAI AS BAIRRO,
          CTI.CEP AS CEP,
          CAST(CID.CODMUNFIS AS VARCHAR (7)) AS CODMUNIC,
          UFS.UF,
          VEMP.CODEMPMATRIZ AS CODEMP,
          FUN.CODEMP AS CODEMPFUNC,
          FUN.CODFUNC AS CODFUNC, 
          CAST(FUN.CODEMP || ':' || FUN.CODFUNC || ':' || CTI.CODCONV AS VARCHAR2(100)) AS "CHAVE"
     FROM TFPCTI CTI LEFT JOIN 
          TSIEND EN ON CTI.CODEND = EN.CODEND LEFT JOIN
          TSICID CID ON CID.CODCID = CTI.CODCID LEFT JOIN
          TSIBAI BAI ON BAI.CODBAI = CTI.CODBAI LEFT JOIN
          TSIUFS UFS ON CID.UF = UFS.CODUF LEFT JOIN
          TSIPAI PA  ON PA.CODPAIS = UFS.CODPAIS 
     , TFPFCTI FCTI, TFPFUN FUN, VGF_EVENTO_EMPREGADOR VEMP,
          TFPFHO FHO, TFPCGH CGH
  WHERE CTI.CODCONV = FCTI.CODCONV
    AND FCTI.CODEMP  = FUN.CODEMP
    AND FCTI.CODFUNC = FUN.CODFUNC
    AND FCTI.CODEMP = VEMP.CODEMP
    AND FUN.CODEMP = FHO.CODEMP AND FUN.CODFUNC = FHO.CODFUNC
    AND FHO.DHALTER =
              (SELECT MAX (DHALTER)
                 FROM TFPFHO
                WHERE     CODEMP = FUN.CODEMP
                      AND CODFUNC = FUN.CODFUNC
                      AND DHALTER <= SYSDATE) -- deve-se sempre olhar a atual ? e se aconteceu mudança
        AND FHO.CODCARGAHOR = CGH.CODCARGAHOR
        AND FUN.CODEMP = VEMP.CODEMP
            AND EXISTS (SELECT 1 
                  FROM TFPS2200 P 
               WHERE P.CODEMP = VEMP.CODEMPMATRIZ
                 AND P.DTDESLIG IS NOT NULL 
                 AND P.CHAVE = CAST(FUN.CODEMP || ':' || FUN.CODFUNC AS VARCHAR2(100)))
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 18/04/2018 19:10:43
Num.Script: 53730-0-0
Nro. O.S. : 1161411
Nome      : Script - TFPMON
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - TFPMON
NomeObjeto: TFPMON
TipoObjeto: TABLE
NomeTabela: TFPMON
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
    P_COUNT     NUMBER(5);
BEGIN
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-2260'
        AND NOMETAB = 'TFPS2260'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'R';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO)
        VALUES ('S-2260', 'TFPS2260', 'NRORECIBO', 'R');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-2260'
        AND NOMETAB = 'TFPS2260'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'C';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW)
        VALUES ('S-2260', 'TFPS2260', 'NRORECIBO', 'C','VGF_EVENTO_S2260');
    END IF;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 20/04/2018 14:55:49
Num.Script: 53807-0-0
Nro. O.S. : 1175370
Nome      : Script - TIPO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - TIPO
NomeObjeto: TIPO
TipoObjeto: COLUMN
NomeTabela: TFPMON
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
    P_COUNT         INT;
BEGIN
    SELECT COUNT(*)
    INTO P_COUNT
    FROM TSISCR
    WHERE NME_SCRIPT = '1175370';
    
    IF P_COUNT = 0 THEN
    
        BEGIN
        
            EXECUTE IMMEDIATE 'INSERT INTO TSISCR VALUES(''1175370'',''1175370'')';
            
            EXECUTE IMMEDIATE  'DELETE TFPMON WHERE TIPO = ''V''';
            
        EXCEPTION        
            WHEN OTHERS THEN
                RAISE_APPLICATION_ERROR(-20010,'Problema na alteração da Tabela TFPMON');                
        END;
   END IF;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 20/04/2018 15:09:39
Num.Script: 53811-0-0
Nro. O.S. : 1175370
Nome      : Script - TFPMON
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - TFPMON
NomeObjeto: TFPMON
TipoObjeto: TABLE
NomeTabela: TFPMON
Executar  : SE_EXISTIR
Ocorrencia: 4210008
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
    P_COUNT     NUMBER(5);
BEGIN
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1005'
        AND NOMETAB = 'TFPS1005'
        AND NOMECOLUNA = 'ALIQRAT2'
        AND TIPO = 'V';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, CAMPOSCHAVE, AMBPRODUCAO, AMBTESTE)
            VALUES ('S-1005', 'TFPS1005', 'ALIQRAT2', 'V', ' ','L', 'L');
    END IF;

    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1010'
        AND NOMETAB = 'TFPS1010'
        AND NOMECOLUNA = 'REPDSR'
        AND TIPO = 'V';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, CAMPOSCHAVE, AMBPRODUCAO, AMBTESTE)
            VALUES ('S-1010', 'TFPS1010', 'REPDSR', 'V', ' ', 'L', 'L');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1010'
        AND NOMETAB = 'TFPS1010'
        AND NOMECOLUNA = 'REP13'
        AND TIPO = 'V';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, CAMPOSCHAVE, AMBPRODUCAO, AMBTESTE)
            VALUES ('S-1010', 'TFPS1010', 'REP13', 'V', ' ', 'L', 'L');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1010'
        AND NOMETAB = 'TFPS1010'
        AND NOMECOLUNA = 'REPFERIAS'
        AND TIPO = 'V';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, CAMPOSCHAVE, AMBPRODUCAO, AMBTESTE)
            VALUES ('S-1010', 'TFPS1010', 'REPFERIAS', 'V', ' ', 'L', 'L');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1010'
        AND NOMETAB = 'TFPS1010'
        AND NOMECOLUNA = 'REPAVISO'
        AND TIPO = 'V';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, CAMPOSCHAVE, AMBPRODUCAO, AMBTESTE)
            VALUES ('S-1010', 'TFPS1010', 'REPAVISO', 'V', ' ', 'L', 'L');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1010'
        AND NOMETAB = 'TFPS1010'
        AND NOMECOLUNA = 'CODEVENTO'
        AND TIPO = 'V';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, CAMPOSCHAVE, AMBPRODUCAO, AMBTESTE)
            VALUES ('S-1010', 'TFPS1010', 'CODEVENTO', 'V', ' ', 'L', 'L');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1020'
        AND NOMETAB = 'TFPS1020'
        AND NOMECOLUNA = 'TPLOTACAO_2'
        AND TIPO = 'V';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, CAMPOSCHAVE, AMBPRODUCAO, AMBTESTE)
            VALUES ('S-1020', 'TFPS1020', 'TPLOTACAO_2', 'V', ' ', 'L', 'L');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1020'
        AND NOMETAB = 'TFPS1020'
        AND NOMECOLUNA = 'CODREGFIS'
        AND TIPO = 'V';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, CAMPOSCHAVE, AMBPRODUCAO, AMBTESTE)
            VALUES ('S-1020', 'TFPS1020', 'CODREGFIS', 'V', ' ', 'L', 'L');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1020'
        AND NOMETAB = 'TFPS1020'
        AND NOMECOLUNA = 'TIPOREGISTRO'
        AND TIPO = 'V';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, CAMPOSCHAVE, AMBPRODUCAO, AMBTESTE)
            VALUES ('S-1020', 'TFPS1020', 'TIPOREGISTRO', 'V', ' ', 'L', 'L');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1020'
        AND NOMETAB = 'TFPS1020'
        AND NOMECOLUNA = 'CODIGO'
        AND TIPO = 'V';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, CAMPOSCHAVE, AMBPRODUCAO, AMBTESTE)
            VALUES ('S-1020', 'TFPS1020', 'CODIGO', 'V', ' ', 'L', 'L');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1020'
        AND NOMETAB = 'TFPS1020'
        AND NOMECOLUNA = 'DESCRLOTACAO'
        AND TIPO = 'V';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, CAMPOSCHAVE, AMBPRODUCAO, AMBTESTE)
            VALUES ('S-1020', 'TFPS1020', 'DESCRLOTACAO', 'V', ' ', 'L', 'L');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1050'
        AND NOMETAB = 'TFPS1050'
        AND NOMECOLUNA = 'CODCARGAHOR'
        AND TIPO = 'V';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, CAMPOSCHAVE, AMBPRODUCAO, AMBTESTE)
            VALUES ('S-1050', 'TFPS1050', 'CODCARGAHOR', 'V', ' ', 'L', 'L');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1050'
        AND NOMETAB = 'TFPS1050'
        AND NOMECOLUNA = 'DESCRCARGAHOR'
        AND TIPO = 'V';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, CAMPOSCHAVE, AMBPRODUCAO, AMBTESTE)
            VALUES ('S-1050', 'TFPS1050', 'DESCRCARGAHOR', 'V', ' ', 'L', 'L');
    END IF;
END;
/
 
 
 
/*
Requer    : 4210007
Conexao   : ORCL
Data      : 22/05/2018 16:00:32
Num.Script: 55727-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5572600
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_PROCESSA_DADOS_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210008
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_PROCESSA_DADOS_REINF' NOMEOBJ, 55726 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, '8a2f7928b9083fa51a120a172d0b2ba7' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_PROCESSA_DADOS_REINF' and THO.hashcode = '8a2f7928b9083fa51a120a172d0b2ba7')
/
 
 
 
/*
Conexao   : ORCL
NomeObjeto: UPDATE TSIPAR INTEIRO
TipoObjeto: TABLE
NomeTabela: 
Executar  : SEMPRE
Ocorrencia: 4210009
FullVersao: Sim
*/
 
 
UPDATE TSIPAR SET INTEIRO = 4210008 WHERE CHAVE = 'VERSAOATUALDB'
/
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 20/04/2018 17:07:34
Num.Script: 52203-0-0
Nro. O.S. : 1162371
Nome      : Cria - VPRLPIPRO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Cria - VPRLPIPRO
NomeObjeto: VPRLPIPRO
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210009
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VPRLPIPRO
AS 
SELECT LPI.*, PROPA.DESCRPROD AS DESCRPRODPA, PROPI.DESCRPROD AS DESCRPRODPI
FROM TPRLPI LPI
INNER JOIN TGFPRO PROPA ON(LPI.CODPRODPA = PROPA.CODPROD)
INNER JOIN TGFPRO PROPI ON(LPI.CODPRODPI = PROPI.CODPROD)
/
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 26/04/2018 15:35:41
Num.Script: 52356-0-0
Nro. O.S. : 1119445
Nome      : Criar - TGFCSZ 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TGFCSZ 
NomeObjeto: TGFCSZ 
TipoObjeto: TABLE
NomeTabela: TGFCSZ 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210009
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TGFCSZ (
CODPARC	NUMBER(10)	NOT NULL,
DHCONSULTA	DATE NOT NULL,
XMLRET	CLOB,
CONSTRAINT	PK_TGFCSZ PRIMARY KEY (CODPARC, DHCONSULTA),
CONSTRAINT FK_TGFCSZ_TGFPAR FOREIGN KEY (CODPARC)	REFERENCES TGFPAR(CODPARC)
)
/
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 26/04/2018 15:35:41
Num.Script: 52357-0-0
Nro. O.S. : 1119445
Nome      : Criar - TGFCSZ CODUSU 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TGFCSZ CODUSU 
NomeObjeto: CODUSU 
TipoObjeto: COLUMN
NomeTabela: TGFCSZ 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210009
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE P_COUNT NUMBER(5);
BEGIN
  SELECT COUNT(1) INTO P_COUNT
  FROM USER_TAB_COLUMNS
  WHERE TABLE_NAME = 'TSIUSU'
    AND COLUMN_NAME = 'CODUSU'
    AND DATA_PRECISION = 5;
  
  IF P_COUNT > 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE TGFCSZ ADD CODUSU NUMBER(5)';
  ELSE
    EXECUTE IMMEDIATE 'ALTER TABLE TGFCSZ ADD CODUSU NUMBER(10)';
  END IF;
END;
/
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 26/04/2018 15:35:41
Num.Script: 52358-0-0
Nro. O.S. : 1119445
Nome      : Criar - FK_TGFCSZ_TSIUSU 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - FK_TGFCSZ_TSIUSU 
NomeObjeto: FK_TGFCSZ_TSIUSU 
TipoObjeto: FOREIGN KEY
NomeTabela: TGFCSZ
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210009
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFCSZ ADD CONSTRAINT FK_TGFCSZ_TSIUSU FOREIGN KEY (CODUSU) REFERENCES TSIUSU(CODUSU)
/
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 20/04/2018 17:07:29
Num.Script: 52374-0-0
Nro. O.S. : 1159188
Nome      : Dropar - FK_TMDVRE_REFERENCE_TMDVAR 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - FK_TMDVRE_REFERENCE_TMDVAR 
NomeObjeto: FK_TMDVRE_REFERENCE_TMDVAR 
TipoObjeto: FOREIGN KEY
NomeTabela: TMDVRE
Executar  : SE_EXISTIR
Ocorrencia: 4210009
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TMDVRE DROP CONSTRAINT FK_TMDVRE_REFERENCE_TMDVAR 
/
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 20/04/2018 17:07:25
Num.Script: 52375-0-0
Nro. O.S. : 1159188
Nome      : Criar - FK_TMDVRE_REFERENCE_TMDVAR 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - FK_TMDVRE_REFERENCE_TMDVAR 
NomeObjeto: FK_TMDVRE_REFERENCE_TMDVAR 
TipoObjeto: FOREIGN KEY
NomeTabela: TMDVRE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210009
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TMDVRE ADD CONSTRAINT FK_TMDVRE_REFERENCE_TMDVAR FOREIGN KEY (CODVAR) REFERENCES TMDVAR (CODVAR) ON DELETE CASCADE
/
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 20/04/2018 17:07:21
Num.Script: 52380-0-0
Nro. O.S. : 1159458
Nome      : Alterar - SNK_MATGIRCALCSUG 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - SNK_MATGIRCALCSUG 
NomeObjeto: SNK_MATGIRCALCSUG 
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210009
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_MATGIRCALCSUG (
   P_CODREL              INT,
   P_PERIODOS            INT,
   P_DIASEST             INT,
   P_DESPPER             INT,
   P_PERCACRESSUG        FLOAT,
   P_SEMGIRO             CHAR,
   P_ULT                 CHAR,
   P_USAREMP             CHAR,
   P_USARLOCAL           CHAR,
   P_USARCONTROLE        CHAR,
   P_TIPOAGRUPAMENTO      CHAR,
   P_FILTROPEDCPAPEND    VARCHAR2,
   P_FILTROPEDVDAPEND    VARCHAR2)
IS
   QUEPED              VARCHAR2 (4000);
   QUEFROMWHERE        VARCHAR2 (4000);
   QUECOMPRA           VARCHAR2 (4000);
   QUEVENDA            VARCHAR2 (4000);
   QUEPEDINI           VARCHAR2 (4000);
   QUEPEDFIM           VARCHAR2 (4000);
   QUEPEDGROUP         VARCHAR2 (4000);
   strSugCompEstMinMax CHAR;

   TYPE TVETOR IS VARRAY (12) OF FLOAT;

   VP                   TVETOR;
   VD                   TVETOR;

   CURSOR CURESTMIN
   IS
      SELECT NVL (VLRVENDA_1, 0),
             NVL (VLRVENDA_2, 0),
             NVL (VLRVENDA_3, 0),
             NVL (VLRVENDA_4, 0),
             NVL (VLRVENDA_5, 0),
             NVL (VLRVENDA_6, 0),
             NVL (VLRVENDA_7, 0),
             NVL (VLRVENDA_8, 0),
             NVL (VLRVENDA_9, 0),
             NVL (VLRVENDA_10, 0),
             NVL (VLRVENDA_11, 0),
             NVL (VLRVENDA_12, 0),
             NVL (VLRVENDIAUTIL_1, 0),
             NVL (VLRVENDIAUTIL_2, 0),
             NVL (VLRVENDIAUTIL_3, 0),
             NVL (VLRVENDIAUTIL_4, 0),
             NVL (VLRVENDIAUTIL_5, 0),
             NVL (VLRVENDIAUTIL_6, 0),
             NVL (VLRVENDIAUTIL_7, 0),
             NVL (VLRVENDIAUTIL_8, 0),
             NVL (VLRVENDIAUTIL_9, 0),
             NVL (VLRVENDIAUTIL_10, 0),
             NVL (VLRVENDIAUTIL_11, 0),
             NVL (VLRVENDIAUTIL_12, 0),
               NVL (VLRVENDIAUTIL_1, 0)
             + NVL (VLRVENDIAUTIL_2, 0)
             + NVL (VLRVENDIAUTIL_3, 0)
             + NVL (VLRVENDIAUTIL_4, 0)
             + NVL (VLRVENDIAUTIL_5, 0)
             + NVL (VLRVENDIAUTIL_6, 0)
             + NVL (VLRVENDIAUTIL_7, 0)
             + NVL (VLRVENDIAUTIL_8, 0)
             + NVL (VLRVENDIAUTIL_9, 0)
             + NVL (VLRVENDIAUTIL_10, 0)
             + NVL (VLRVENDIAUTIL_11, 0)
             + NVL (VLRVENDIAUTIL_12, 0)
                AS TOTVLRVENDIAUTIL,
               CASE WHEN VLRVENDIAUTIL_1 > 0 THEN 1 ELSE 0 END
             + CASE WHEN VLRVENDIAUTIL_2 > 0 THEN 1 ELSE 0 END
             + CASE WHEN VLRVENDIAUTIL_3 > 0 THEN 1 ELSE 0 END
             + CASE WHEN VLRVENDIAUTIL_4 > 0 THEN 1 ELSE 0 END
             + CASE WHEN VLRVENDIAUTIL_5 > 0 THEN 1 ELSE 0 END
             + CASE WHEN VLRVENDIAUTIL_6 > 0 THEN 1 ELSE 0 END
             + CASE WHEN VLRVENDIAUTIL_7 > 0 THEN 1 ELSE 0 END
             + CASE WHEN VLRVENDIAUTIL_8 > 0 THEN 1 ELSE 0 END
             + CASE WHEN VLRVENDIAUTIL_9 > 0 THEN 1 ELSE 0 END
             + CASE WHEN VLRVENDIAUTIL_10 > 0 THEN 1 ELSE 0 END
             + CASE WHEN VLRVENDIAUTIL_11 > 0 THEN 1 ELSE 0 END
             + CASE WHEN VLRVENDIAUTIL_12 > 0 THEN 1 ELSE 0 END
                AS QTDPERCOMGIRO,
             ESTMIN,
             ESTOQUE,
             CUSTOGER,
             CODPROD,
             CODLOCAL,
             CONTROLE,
             CODEMP,
             LEADTIME,
             ESTMAX             
        FROM TGFGIR
       WHERE CODREL = P_CODREL AND CODPROD > 0
      FOR UPDATE OF
         PEDCPAPEND,
         PEDVDAPEND,
         ESTMINGIR,
         SUGCOMPRA,
         SUGCOMPRAGIR,
         SUGCOMPCUSTGER,
         QTDULTCOMPRA,
         ALIQCRED,
         ULTCOMPRA,
         ULTVENDA,
         DUREST,
         DURESTPOSCPA,
         DURESTPOSCPAGIR,
         DIASSEMVENDA,
         QTDTOTAL,
         QTDMEDIA,
         QTDMINIMA,
         QTDMAXIMA,
         ESTMAX;

   DOBPEDCPAPEND        TGFGIR.PEDCPAPEND%TYPE;
   DOBPEDVDAPEND        TGFGIR.PEDVDAPEND%TYPE;
   DOBESTMINGIR         TGFGIR.ESTMIN%TYPE;
   DOBESTMINGIRCOMP     TGFGIR.ESTMIN%TYPE;
   DOBSUGCOMPRA         TGFGIR.SUGCOMPRA%TYPE;
   DOBSUGCOMPRAGIR      TGFGIR.SUGCOMPRAGIR%TYPE;
   DOBSUGCOMPCUSTGER    TGFGIR.SUGCOMPCUSTGER%TYPE;
   DOBQTDEMAIOR         TGFGIR.VLRVENDIAUTIL_12%TYPE;
   DOBQTDEMENOR         TGFGIR.VLRVENDIAUTIL_12%TYPE;
   DOBQTDEMAIORPER      TGFGIR.VLRVENDIAUTIL_12%TYPE;
   DOBQTDEMENORPER      TGFGIR.VLRVENDIAUTIL_12%TYPE;
   DOBQTDESEGMAIOR      TGFGIR.VLRVENDIAUTIL_12%TYPE;
   DOBQTDESEGMENOR      TGFGIR.VLRVENDIAUTIL_12%TYPE;
   TOTVLRVENDA          FLOAT;
   TOTVLRVENDIAUTIL     FLOAT;
   QTDPERCOMGIRO        FLOAT;
   DOBESTMIN            TGFGIR.ESTMIN%TYPE;
   DOBESTOQ             TGFGIR.ESTOQUE%TYPE;
   DOBCUSTOGER          TGFGIR.CUSTOGER%TYPE;
   INTINDMENOR          INT;
   INTINDMAIOR          INT;
   INTPERIODOS          INT;
   INTDIVISOR           INT;
   INTCODPROD           TGFGIR.CODPROD%TYPE;
   INTCODEMP            TGFGIR.CODEMP%TYPE;
   INTCODLOCAL          TGFGIR.CODLOCAL%TYPE;
   STRCONTROLE          TGFGIR.CONTROLE%TYPE;
   DATULTVENDA          TGFGIR.ULTVENDA%TYPE;
   DATULTCOMPRA         TGFGIR.ULTCOMPRA%TYPE;
   DOBALIQICMS          FLOAT;
   DOBQTDULTCOMPRA      FLOAT;
   P_PEDULTCOMPMTGIR    CHAR (1);
   P_LEADTIME           CHAR (1);
   P_FILTRO_TIPMOV      VARCHAR2 (100);
   P_PERMCOMPPROD       TGFPRO.PERMCOMPPROD%TYPE;
   INTLEADTIME          TGFPRO.LEADTIME%TYPE;
   INTDUREST            TGFGIR.DUREST%TYPE;
   INTDURESTPOSCPA      TGFGIR.DURESTPOSCPA%TYPE;
   INTDURESTPOSCPAGIR   TGFGIR.DURESTPOSCPAGIR%TYPE;
   INTDIASSEMVENDA      TGFGIR.DIASSEMVENDA%TYPE;
   DOBGIRODIARIO        FLOAT;
   INTDURESTSEG         TGFGIR.DURESTSEG%TYPE;
   DATPONTOPED          TGFGIR.PONTOPED%TYPE;
   DATPREVENTREGA       TGFGIR.PREVENTREGA%TYPE;   
   DOBESTMAX            TGFGIR.ESTMAX%TYPE;
BEGIN
   QUEPEDINI := ' ';
   QUEPEDFIM := ' ';

   --> INICIO DA QUERY
   QUEPEDINI := ' SELECT ' || P_CODREL || ',';

   IF P_TIPOAGRUPAMENTO = 'S'
   THEN
      QUEPEDINI :=
         QUEPEDINI || 'Snk_GetProdutoAgrupadoGiro(ITE.CODPROD, ''S'') AS CODPROD ';
   ELSIF P_TIPOAGRUPAMENTO = 'G' THEN
      QUEPEDINI := QUEPEDINI || 'Snk_GetProdutoAgrupadoGiro(ITE.CODPROD, ''G'') AS CODPROD ';
   ELSE
      QUEPEDINI := QUEPEDINI || 'ITE.CODPROD ';
   END IF;

   IF P_USAREMP = 'M'
   THEN
      QUEPEDINI :=
         QUEPEDINI || ', NVL(EMP.CODEMPMATRIZ, EMP.CODEMP) AS CODEMP ';
   ELSIF P_USAREMP = 'S'
   THEN
      QUEPEDINI := QUEPEDINI || ', ITE.CODEMP ';
   ELSE
      QUEPEDINI := QUEPEDINI || ', 0 AS CODEMP ';
   END IF;

   IF P_USARLOCAL = 'S'
   THEN
      QUEPEDINI := QUEPEDINI || ', ITE.CODLOCALORIG AS CODLOCAL ';
   ELSE
      QUEPEDINI := QUEPEDINI || ', 0 AS CODLOCAL ';
   END IF;

   IF P_USARCONTROLE = 'S'
   THEN
      QUEPEDINI := QUEPEDINI || ', ITE.CONTROLE ';
   ELSE
      QUEPEDINI := QUEPEDINI || ', '' '' AS CONTROLE ';
   END IF;

   --> FIM DA QUERY
   QUEPEDFIM :=
         ' , SUM(ITE.QTDNEG - ITE.QTDENTREGUE) AS QTDE '
      || 'FROM TGFITE ITE, TGFCAB CAB, TGFTOP TPO, TSIEMP EMP '
      || 'WHERE ITE.QTDNEG > 0 '
      || 'AND ITE.ATUALESTOQUE = 0 '
      || 'AND (ITE.PENDENTE = ''S'' OR CAB.TIPMOV NOT IN (''P'',''O'',''J'')) '
      || 'AND CASE WHEN CAB.TIPMOV IN (''P'',''O'',''J'') '
      || '    THEN CASE WHEN ITE.STATUSNOTA = ''L'' THEN ''S'' ELSE ''N'' END '
      || '    ELSE CASE WHEN ITE.STATUSNOTA <> ''L'' '
      || '               AND ((TPO.ATUALEST <> ''N'' AND ITE.USOPROD NOT IN (''M'',''D'')) OR '
      || '                    (TPO.ATUALESTMP <> 0 AND ITE.USOPROD IN (''M'',''D''))) '
      || '         THEN ''S'' ELSE ''N'' END '
      || '    END = ''S'' '
      || 'AND TPO.CODTIPOPER = CAB.CODTIPOPER '
      || 'AND TPO.DHALTER = CAB.DHTIPOPER '
      || 'AND ITE.CODEMP = EMP.CODEMP '
      || 'AND ITE.NUNOTA = CAB.NUNOTA ';

   --> GROUP BY DA QUERY
   IF P_TIPOAGRUPAMENTO = 'S'
   THEN
      QUEPEDGROUP := ' GROUP BY Snk_GetProdutoAgrupadoGiro(ITE.CODPROD, ''S'') ';
   ELSIF P_TIPOAGRUPAMENTO = 'G' THEN
      QUEPEDGROUP := ' GROUP BY Snk_GetProdutoAgrupadoGiro(ITE.CODPROD, ''G'') ';
   ELSE
      QUEPEDGROUP := ' GROUP BY ITE.CODPROD ';
   END IF;

   IF P_USAREMP = 'M'
   THEN
      QUEPEDGROUP := QUEPEDGROUP || ', NVL(EMP.CODEMPMATRIZ, EMP.CODEMP) ';
   ELSIF P_USAREMP = 'S'
   THEN
      QUEPEDGROUP := QUEPEDGROUP || ', ITE.CODEMP ';
   END IF;

   IF P_USARLOCAL = 'S'
   THEN
      QUEPEDGROUP := QUEPEDGROUP || ', ITE.CODLOCALORIG ';
   END IF;

   IF P_USARCONTROLE = 'S'
   THEN
      QUEPEDGROUP := QUEPEDGROUP || ', ITE.CONTROLE ';
   END IF;

   ----------------- COMPRA ------------------------------------------
   QUEPED := QUEPEDINI || QUEPEDFIM;

   DELETE FROM TEMP_PEDCPAPEND;

   EXECUTE IMMEDIATE
         'INSERT INTO TEMP_PEDCPAPEND '
      || QUEPED
      || ' AND ('
      || P_FILTROPEDCPAPEND
      || ')'
      || QUEPEDGROUP;

   -------------------------------------------------------------------

   ----------------- VENDA -------------------------------------------
   QUEPED := QUEPEDINI || QUEPEDFIM;

   DELETE FROM TEMP_PEDVDAPEND;

   --RAISE_APPLICATION_ERROR(-20101, P_FILTROPEDVDAPEND);

   EXECUTE IMMEDIATE
         'INSERT INTO TEMP_PEDVDAPEND '
      || QUEPED
      || ' AND ('
      || P_FILTROPEDVDAPEND
      || ')'
      || QUEPEDGROUP;

   -------------------------------------------------------------------

   QUECOMPRA := ', MAX( CASE WHEN TPO.ATUALULTIMACOMP = ''E'' AND CAB.DTENTSAI IS NOT NULL THEN CAB.DTENTSAI '
                  || '       WHEN TPO.ATUALULTIMACOMP = ''M'' AND CAB.DTMOV IS NOT NULL THEN CAB.DTMOV '
                  || '       ELSE CAB.DTNEG END ) AS ULTDATA ';
              
   QUEVENDA := ', MAX( CASE WHEN TPO.ATUALULTIMAVEND = ''S'' AND CAB.DTENTSAI IS NOT NULL THEN CAB.DTENTSAI '
                  || '      WHEN TPO.ATUALULTIMAVEND = ''F'' AND CAB.DTMOV IS NOT NULL THEN CAB.DTMOV '
                  || '      ELSE CAB.DTNEG END ) AS ULTDATA ';

   IF P_TIPOAGRUPAMENTO = 'S'
   THEN
      QUEPED := ', Snk_GetProdutoAgrupadoGiro(ITE.CODPROD, ''S'') AS CODPROD ';
   ELSIF P_TIPOAGRUPAMENTO = 'G' THEN
      QUEPED := ', Snk_GetProdutoAgrupadoGiro(ITE.CODPROD, ''G'') AS CODPROD ';
   ELSE
      QUEPED := ', ITE.CODPROD ';
   END IF;

   IF P_USAREMP = 'M'
   THEN
      QUEPED := QUEPED || ', NVL(EMP.CODEMPMATRIZ, EMP.CODEMP) AS CODEMP ';
   ELSIF P_USAREMP = 'S'
   THEN
      QUEPED := QUEPED || ', ITE.CODEMP ';
   ELSE
      QUEPED := QUEPED || ', 0 AS CODEMP ';
   END IF;

   IF P_USARLOCAL = 'S'
   THEN
      QUEPED := QUEPED || ', ITE.CODLOCALORIG AS CODLOCAL ';
   ELSE
      QUEPED := QUEPED || ', 0 AS CODLOCAL ';
   END IF;

   IF P_USARCONTROLE = 'S'
   THEN
      QUEPED := QUEPED || ', ITE.CONTROLE ';
   ELSE
      QUEPED := QUEPED || ', '' '' AS CONTROLE ';
   END IF;

   QUEFROMWHERE := 'FROM TGFITE ITE, TGFCAB CAB, TGFTOP TPO, TSIEMP EMP '
      || 'WHERE ITE.QTDNEG > 0 '
      || 'AND ITE.STATUSNOTA = ''L'' '
      || 'AND ITE.CODEMP = EMP.CODEMP '
      || 'AND ITE.NUNOTA = CAB.NUNOTA '
      || 'AND CAB.CODTIPOPER = TPO.CODTIPOPER '
      || 'AND CAB.DHTIPOPER = TPO.DHALTER ';

   IF P_TIPOAGRUPAMENTO = 'S'
   THEN
      QUEPEDGROUP := 'GROUP BY Snk_GetProdutoAgrupadoGiro(ITE.CODPROD, ''S'') ';
   ELSIF P_TIPOAGRUPAMENTO = 'G' THEN
      QUEPEDGROUP := 'GROUP BY Snk_GetProdutoAgrupadoGiro(ITE.CODPROD, ''G'') ';
   ELSE
      QUEPEDGROUP := 'GROUP BY ITE.CODPROD ';
   END IF;

   IF P_USAREMP = 'M'
   THEN
      QUEPEDGROUP := QUEPEDGROUP || ', NVL(EMP.CODEMPMATRIZ, EMP.CODEMP) ';
   ELSIF P_USAREMP = 'S'
   THEN
      QUEPEDGROUP := QUEPEDGROUP || ', ITE.CODEMP ';
   END IF;

   IF P_USARLOCAL = 'S'
   THEN
      QUEPEDGROUP := QUEPEDGROUP || ', ITE.CODLOCALORIG ';
   END IF;

   IF P_USARCONTROLE = 'S'
   THEN
      QUEPEDGROUP := QUEPEDGROUP || ', ITE.CONTROLE ';
   END IF;

   DELETE FROM TEMP_ULTDT;

   EXECUTE IMMEDIATE
         'INSERT INTO TEMP_ULTDT SELECT ' || P_CODREL || ', ''C'' AS TIPMOV '
      || QUEPED
      || QUECOMPRA
      || QUEFROMWHERE
      || ' AND TPO.ATUALULTIMACOMP IN (''E'',''G'',''M'') '
      || QUEPEDGROUP
      || ' UNION SELECT ' || P_CODREL || ', ''V'' AS TIPMOV '
      || QUEPED
      || QUEVENDA
      || QUEFROMWHERE
      || ' AND TPO.ATUALULTIMAVEND IN (''S'',''G'',''F'') '
      || QUEPEDGROUP;

   IF P_ULT = 'S'
   THEN
      QUEPED :=
            'INSERT INTO TEMP_QTDULTCPA '
         || 'SELECT UD.CODREL, UD.CODPROD, UD.CODEMP, UD.CODLOCAL, UD.CONTROLE '
         || ', MAX(CASE WHEN ITE.CODTRIB IN (0,20) THEN ITE.ALIQICMS ELSE 0 END) AS ALIQICMS '
         || ', SUM(ITE.QTDNEG) AS QtdUltCompra '
         || 'FROM TGFITE ITE, TGFCAB CAB, TEMP_ULTDT UD, TGFTOP TPO, TSIEMP EMP '
         || 'WHERE ITE.QTDNEG > 0 '
         || 'AND ITE.RESERVA = ''N'' '
         || 'AND ITE.STATUSNOTA = ''L'' '
         || 'AND ITE.CODEMP = EMP.CODEMP '
         || 'AND ITE.NUNOTA = CAB.NUNOTA '
         || 'AND UD.TIPMOV = ''C'' '
         || 'AND UD.DAT = CASE WHEN TPO.ATUALULTIMACOMP = ''E'' AND CAB.DTENTSAI IS NOT NULL THEN CAB.DTENTSAI '
         || '                  WHEN TPO.ATUALULTIMACOMP = ''M'' AND CAB.DTMOV IS NOT NULL THEN CAB.DTMOV '
         || '                  ELSE CAB.DTNEG END '
         || 'AND UD.CODREL = '
         || P_CODREL
         || ' '
         || 'AND CAB.CODTIPOPER = TPO.CODTIPOPER '
         || 'AND CAB.DHTIPOPER = TPO.DHALTER '
         || 'AND TPO.ATUALULTIMACOMP IN (''E'',''G'',''M'')  ';

      IF P_TIPOAGRUPAMENTO = 'S' THEN
         QUEPED := QUEPED || 'AND Snk_GetProdutoAgrupadoGiro(UD.CODPROD, ''S'') = ITE.CODPROD  ';      
      ELSIF P_TIPOAGRUPAMENTO = 'G' THEN 
         QUEPED := QUEPED || 'AND Snk_GetProdutoAgrupadoGiro(UD.CODPROD, ''G'') = ITE.CODPROD ';
      ELSE
         QUEPED := QUEPED || 'AND ITE.CODPROD = UD.CODPROD ';
      END IF;

      IF P_USAREMP = 'M'
      THEN
         QUEPED :=
            QUEPED || 'AND NVL(EMP.CODEMPMATRIZ, EMP.CODEMP) = UD.CODEMP ';
      ELSIF P_USAREMP = 'S'
      THEN
         QUEPED := QUEPED || 'AND ITE.CODEMP = UD.CODEMP ';
      END IF;

      IF P_USARLOCAL = 'S'
      THEN
         QUEPED := QUEPED || 'AND ITE.CODLOCALORIG = UD.CODLOCAL ';
      END IF;

      IF P_USARCONTROLE = 'S'
      THEN
         QUEPED := QUEPED || 'AND ITE.CONTROLE = UD.CONTROLE ';
      END IF;

      QUEPED :=
            QUEPED
         || 'GROUP BY UD.CODREL, UD.CODPROD, UD.CODEMP, UD.CODLOCAL, UD.CONTROLE ';

      DELETE FROM TEMP_QTDULTCPA;

      EXECUTE IMMEDIATE QUEPED;
   END IF;

   QUEPED := '';
   VP :=
      TVETOR (0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0);
   VD :=
      TVETOR (0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0);

   BEGIN
      SELECT NVL (LOGICO, 'N')
        INTO P_LEADTIME
        FROM TSIPAR
       WHERE CHAVE = 'SOMALEADTIME';
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         P_LEADTIME := 'N';
   END;

   OPEN CURESTMIN;

   LOOP
      FETCH CURESTMIN
      INTO VP (1),
           VP (2),
           VP (3),
           VP (4),
           VP (5),
           VP (6),
           VP (7),
           VP (8),
           VP (9),
           VP (10),
           VP (11),
           VP (12),
           VD (1),
           VD (2),
           VD (3),
           VD (4),
           VD (5),
           VD (6),
           VD (7),
           VD (8),
           VD (9),
           VD (10),
           VD (11),
           VD (12),
           TOTVLRVENDIAUTIL,
           QTDPERCOMGIRO,
           DOBESTMIN,
           DOBESTOQ,
           DOBCUSTOGER,
           INTCODPROD,
           INTCODLOCAL,
           STRCONTROLE,
           INTCODEMP,
           INTLEADTIME,
           DOBESTMAX;

      EXIT WHEN CURESTMIN%NOTFOUND;

      INTPERIODOS := P_PERIODOS;
      TOTVLRVENDA :=
           VP (1)
         + VP (2)
         + VP (3)
         + VP (4)
         + VP (5)
         + VP (6)
         + VP (7)
         + VP (8)
         + VP (9)
         + VP (10)
         + VP (11)
         + VP (12);

      BEGIN
         SELECT QTDE
           INTO DOBPEDCPAPEND
           FROM TEMP_PEDCPAPEND
          WHERE     CODPROD = INTCODPROD
                AND CODLOCAL = INTCODLOCAL
                AND CODEMP = INTCODEMP
                AND CONTROLE = STRCONTROLE;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            DOBPEDCPAPEND := 0;
      END;

      BEGIN
         SELECT QTDE
           INTO DOBPEDVDAPEND
           FROM TEMP_PEDVDAPEND
          WHERE     CODPROD = INTCODPROD
                AND CODLOCAL = INTCODLOCAL
                AND CODEMP = INTCODEMP
                AND CONTROLE = STRCONTROLE;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            DOBPEDVDAPEND := 0;
      END;

      DOBQTDEMENORPER := VP (1);
      DOBQTDESEGMENOR := 999999999999;
      DOBQTDEMAIORPER := VP (1);
      DOBQTDESEGMAIOR := -999999999999;

      DOBQTDEMENOR := VD (1);
      DOBQTDEMAIOR := VD (1);
      INTINDMENOR := 1;
      INTINDMAIOR := 1;

      FOR I IN 2 .. P_PERIODOS
      LOOP
         IF VP (I) < DOBQTDEMENORPER
         THEN
            DOBQTDESEGMENOR := DOBQTDEMENORPER;
            DOBQTDEMENORPER := VP (I);
         ELSIF VP (I) < DOBQTDESEGMENOR
         THEN
            DOBQTDESEGMENOR := VP (I);
         END IF;

         IF VP (I) > DOBQTDEMAIORPER
         THEN
            DOBQTDESEGMAIOR := DOBQTDEMAIORPER;
            DOBQTDEMAIORPER := VP (I);
         ELSIF VP (I) > DOBQTDESEGMAIOR
         THEN
            DOBQTDESEGMAIOR := VP (I);
         END IF;

         IF VD (I) < DOBQTDEMENOR
         THEN
            DOBQTDEMENOR := VD (I);
            INTINDMENOR := I;
         END IF;

         IF VD (I) > DOBQTDEMAIOR
         THEN
            DOBQTDEMAIOR := VD (I);
            INTINDMAIOR := I;
         END IF;
      END LOOP;

      IF (P_DESPPER = 2 OR P_DESPPER = 3)
      THEN                                                    --MENOR OU AMBOS
         TOTVLRVENDIAUTIL := TOTVLRVENDIAUTIL - VD (INTINDMENOR);
         TOTVLRVENDA := TOTVLRVENDA - VP (INTINDMENOR);

         IF VD (INTINDMENOR) > 0
         THEN                                 --SE FOR ZERO NÃO SOMOU NA QUERY
            QTDPERCOMGIRO := QTDPERCOMGIRO - 1;
         END IF;

         INTPERIODOS := INTPERIODOS - 1;
         DOBQTDEMENORPER := DOBQTDESEGMENOR;
      END IF;

      IF (P_DESPPER = 1 OR P_DESPPER = 3)
      THEN                                                    --MAIOR OU AMBOS
         TOTVLRVENDIAUTIL := TOTVLRVENDIAUTIL - VD (INTINDMAIOR);
         TOTVLRVENDA := TOTVLRVENDA - VP (INTINDMAIOR);

         IF VD (INTINDMAIOR) > 0
         THEN                                 --SE FOR ZERO NÃO SOMOU NA QUERY
            QTDPERCOMGIRO := QTDPERCOMGIRO - 1;
         END IF;

         INTPERIODOS := INTPERIODOS - 1;
         DOBQTDEMAIORPER := DOBQTDESEGMAIOR;
      END IF;

      DOBESTMIN := DOBESTMIN * (1 + (P_PERCACRESSUG / 100));
      DOBESTOQ := DOBESTOQ + DOBPEDCPAPEND - DOBPEDVDAPEND;
      
      strSugCompEstMinMax := SNK_getTSIPARLogico('SUGCOMPMIMAMTZ');

      IF DOBESTOQ < DOBESTMIN
      THEN         
         IF strSugCompEstMinMax = 'S' THEN
            DOBSUGCOMPRA := ROUND (DOBESTMAX - DOBESTOQ, 0);
         ELSE
            DOBSUGCOMPRA := ROUND (DOBESTMIN - DOBESTOQ, 0);
         END IF;

         IF DOBSUGCOMPRA = 0
         THEN
            DOBSUGCOMPRA := 1;
         END IF;
      ELSE
         DOBSUGCOMPRA := 0;
      END IF;

      DOBSUGCOMPCUSTGER := DOBSUGCOMPRA * DOBCUSTOGER;

      IF P_SEMGIRO = 'S'
      THEN
         INTDIVISOR := INTPERIODOS;
      ELSE
         INTDIVISOR := QTDPERCOMGIRO;
      END IF;

      IF P_LEADTIME = 'S'
      THEN
         INTLEADTIME := NVL (INTLEADTIME, 0) + P_DIASEST;
      ELSE
         IF NVL (INTLEADTIME, 0) = 0
         THEN
            INTLEADTIME := P_DIASEST;
         END IF;
      END IF;

      IF (INTDIVISOR <> 0) AND (TOTVLRVENDIAUTIL <> 0)
      THEN
         DOBGIRODIARIO := ROUND (TOTVLRVENDIAUTIL / INTDIVISOR, 3);

         --RAISE_APPLICATION_ERROR(-20101,  DOBGIRODIARIO);
         IF DOBGIRODIARIO > 0
         THEN
            INTDUREST := DOBESTOQ / DOBGIRODIARIO;
         ELSE
            INTDUREST := 0;
         END IF;

         IF DOBGIRODIARIO > 0
         THEN
            INTDURESTPOSCPA :=
               ROUND ( (DOBESTOQ + DOBSUGCOMPRA) / DOBGIRODIARIO, 0);
         ELSE
            INTDURESTPOSCPA := 0;
         END IF;


         DOBESTMINGIR := ROUND (DOBGIRODIARIO * INTLEADTIME, 0);
      ELSE
         DOBGIRODIARIO := 0;
         INTDUREST := 0;
         INTDURESTPOSCPA := 0;
         INTDURESTPOSCPAGIR := 0;
         DOBESTMINGIR := 0;
      END IF;

      BEGIN
         SELECT MAX (
                   CASE
                      WHEN ULTDT.TIPMOV = 'V' THEN ULTDT.DAT
                      ELSE CAST (NULL AS DATE)
                   END)
                   AS DATV,
                MAX (
                   CASE
                      WHEN ULTDT.TIPMOV = 'C' THEN ULTDT.DAT
                      ELSE CAST (NULL AS DATE)
                   END)
                   AS DATC
           INTO DATULTVENDA, DATULTCOMPRA
           FROM (SELECT DAT, TIPMOV
                   FROM TEMP_ULTDT ITE
                  WHERE     ITE.CODPROD = INTCODPROD
                        AND ITE.CODLOCAL = INTCODLOCAL
                        AND ITE.CONTROLE = STRCONTROLE
                        AND ITE.CODEMP = INTCODEMP
                        AND ITE.TIPMOV IN ('V', 'C')) ULTDT;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            DATULTVENDA := NULL;
            DATULTCOMPRA := NULL;
      END;

      IF DATULTVENDA IS NULL
      THEN
         IF DATULTCOMPRA IS NULL
         THEN
            SELECT (TRUNC (SYSDATE) - TRUNC (DTALTER))
              INTO INTDIASSEMVENDA
              FROM TGFPRO
             WHERE CODPROD = INTCODPROD;
         ELSE
            INTDIASSEMVENDA := TRUNC (SYSDATE) - TRUNC (DATULTCOMPRA);
         END IF;
      ELSE
         INTDIASSEMVENDA := TRUNC (SYSDATE) - TRUNC (DATULTVENDA);
      END IF;


      /*RETIRADO CÁLCULO DO DOBESTMINGIR PELO P_PERCACRESSUG CONFORME OS 813819*/
      DOBESTMINGIRCOMP := ABS (DOBESTMINGIR * (1 + (P_PERCACRESSUG / 100)));

      IF DOBESTOQ < DOBESTMINGIRCOMP
      THEN
         DOBSUGCOMPRAGIR := ROUND (DOBESTMINGIRCOMP - DOBESTOQ, 0);

         IF DOBSUGCOMPRAGIR = 0
         THEN
            DOBSUGCOMPRAGIR := 1;
         END IF;
      ELSE
         DOBSUGCOMPRAGIR := 0;
      END IF;

      IF    (DOBSUGCOMPRA <> 0)
         OR (DOBSUGCOMPCUSTGER <> 0)
         OR (DOBSUGCOMPRAGIR <> 0)
      THEN
         SELECT PERMCOMPPROD
           INTO P_PERMCOMPPROD
           FROM TGFPRO
          WHERE CODPROD = INTCODPROD;

         IF P_PERMCOMPPROD = 'N'
         THEN
            DOBSUGCOMPRA := 0;
            DOBSUGCOMPCUSTGER := 0;
            DOBSUGCOMPRAGIR := 0;
         END IF;
      END IF;

      IF DOBGIRODIARIO > 0
      THEN
         INTDURESTPOSCPAGIR :=
            ROUND ( (DOBESTOQ + DOBSUGCOMPRAGIR) / DOBGIRODIARIO, 0);
      ELSE
         INTDURESTPOSCPAGIR := 0;
      END IF;

      INTDURESTSEG := 0;


      IF (DOBESTMIN <> 0 AND DOBGIRODIARIO <> 0)
      THEN
         INTDURESTSEG := ROUND (DOBESTMIN / DOBGIRODIARIO, 0);
      END IF;

      BEGIN 
        DATPONTOPED := TRUNC(SYSDATE) - 1 + (INTDUREST - INTDURESTSEG - INTLEADTIME); 
        DATPREVENTREGA := TRUNC (SYSDATE) - 1 + (INTDUREST - INTDURESTSEG); 
        
        EXCEPTION WHEN OTHERS THEN 
        IF (INTDUREST < 0) THEN 
        DATPONTOPED := TO_DATE('01/01/1970','DD/MM/YYYY'); 
        DATPREVENTREGA := TO_DATE('01/01/1970','DD/MM/YYYY'); 
        ELSE 
        DATPONTOPED := TO_DATE('31/12/9999','DD/MM/YYYY'); 
        DATPREVENTREGA := TO_DATE('31/12/9999','DD/MM/YYYY'); 
        END IF; 
        END;

      UPDATE TGFGIR
         SET ESTMINGIR = NVL (DOBESTMINGIR, 0),
             PEDCPAPEND = NVL (DOBPEDCPAPEND, 0),
             PEDVDAPEND = NVL (DOBPEDVDAPEND, 0),
             SUGCOMPRA = NVL (DOBSUGCOMPRA, 0),
             SUGCOMPCUSTGER = NVL (DOBSUGCOMPCUSTGER, 0),
             SUGCOMPRAGIR = NVL (DOBSUGCOMPRAGIR, 0),
             DUREST = INTDUREST,
             DURESTPOSCPA = INTDURESTPOSCPA,
             DURESTPOSCPAGIR = INTDURESTPOSCPAGIR,
             DIASSEMVENDA = INTDIASSEMVENDA,
             QTDTOTAL = TOTVLRVENDA,
             QTDMEDIA =
                CASE
                   WHEN INTDIVISOR = 0 THEN 0
                   ELSE TOTVLRVENDA / INTDIVISOR
                END,
             QTDMINIMA = DOBQTDEMENORPER,
             QTDMAXIMA = DOBQTDEMAIORPER,
             GIRODIARIO = DOBGIRODIARIO,
             DIASUTEIS =
                CASE
                   WHEN DOBGIRODIARIO = 0 THEN 0
                   ELSE ROUND (TOTVLRVENDA / DOBGIRODIARIO, 0)
                END,
             DURESTSEG = INTDURESTSEG,
             PONTOPED = DATPONTOPED,
             PREVENTREGA = DATPREVENTREGA
       WHERE CURRENT OF CURESTMIN;

      IF P_ULT = 'S'
      THEN
         IF DATULTCOMPRA IS NOT NULL
         THEN
            BEGIN
               SELECT ALIQICMS, QTDE
                 INTO DOBALIQICMS, DOBQTDULTCOMPRA
                 FROM TEMP_QTDULTCPA ITE
                WHERE     ITE.CODPROD = INTCODPROD
                      AND ITE.CODLOCAL = INTCODLOCAL
                      AND ITE.CONTROLE = STRCONTROLE
                      AND ITE.CODEMP = INTCODEMP;
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  DOBALIQICMS := 0;
                  DOBQTDULTCOMPRA := 0;
            END;
         ELSE
            DOBALIQICMS := 0;
            DOBQTDULTCOMPRA := 0;
         END IF;

         UPDATE TGFGIR
            SET QTDULTCOMPRA = NVL (DOBQTDULTCOMPRA, 0),
                ALIQCRED = NVL (DOBALIQICMS, 0),
                ULTCOMPRA = DATULTCOMPRA,
                ULTVENDA = DATULTVENDA,
                VLRCREDICMS = ROUND (CUSTOREP * NVL (DOBALIQICMS, 0) / 100, 2)
          WHERE CURRENT OF CURESTMIN;
      END IF;
   END LOOP;                                                      -- CURESTMIN

   CLOSE CURESTMIN;
END;
/
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 20/04/2018 17:07:21
Num.Script: 52381-0-1000
Nro. O.S. : 1159458
Nome      : INSERE - THOOBJ - 5238000
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_MATGIRCALCSUG
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210009
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_MATGIRCALCSUG' NOMEOBJ, 52380 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, 'e3a6bac461bc9337a0f9c8e98748a9ad' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_MATGIRCALCSUG' and THO.hashcode = 'e3a6bac461bc9337a0f9c8e98748a9ad')
/
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 20/04/2018 17:07:05
Num.Script: 52725-0-0
Nro. O.S. : 1168339
Nome      : Altera - TRG_DLT_TGFCAB
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - TRG_DLT_TGFCAB
NomeObjeto: TRG_DLT_TGFCAB
TipoObjeto: TRIGGER
NomeTabela: TGFCAB
Executar  : SE_EXISTIR
Ocorrencia: 4210009
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_DLT_TGFCAB
BEFORE DELETE ON TGFCAB 
FOR EACH ROW
DECLARE
       P_SOLICITANTE        VARCHAR2(80);
       P_NTUSERNAME         VARCHAR2(30);
       P_COUNT              INT := 0;
       P_PROGRAMNAME        VARCHAR2(80);
       ERRMSG               VARCHAR2(255);
       ERROR                EXCEPTION;
       P_VALIDAR            BOOLEAN;
       P_NUFIN              NUMBER(10);
       P_CODFUNC            NUMBER(10);
       P_CHAVE              VARCHAR(15);
       P_VLRTROCA           FLOAT;
       P_NUIMP              INT := 0;
       P_MINDEST            INT; 
       P_MAXDEST            INT;
       P_MSG                VARCHAR2(200);
BEGIN

  IF Stp_Get_Atualizando THEN
    RETURN;
  END IF;
  
  /* 
  Sincronização de dados
  */
    P_VALIDAR := Fpodevalidar('TGFCAB');

    SELECT COUNT(1) INTO P_COUNT
    FROM TGFCAN C 
    WHERE C.NUNOTA = :OLD.NUNOTA;
    
    IF :NEW.SERIENOTA = 'CF' AND :NEW.TIPMOV = 'V' AND  (:NEW.STATUSNOTA = 'L' OR NVL(:NEW.NROREDZ,0) <> 0) AND P_COUNT = 0 THEN 
        ERRMSG := 'Não é permitido excluir um cupom confirmado. Cupom confirmado só pode ser cancelado.';
        RAISE ERROR;
    END IF;
  
    IF :OLD.STATUSNOTA = 'L' THEN
       SELECT COUNT(1) INTO P_COUNT FROM  TCBINT C WHERE  C.NUNICO = :OLD.NUNOTA AND C.ORIGEM = 'E';
       IF P_COUNT <> 0 THEN
      ERRMSG := 'Nota já foi contabilizada, não pode ser excluída.';
      RAISE ERROR;
       END IF;

       SELECT COUNT(1) INTO P_COUNT
         FROM TGFLIV
        WHERE NUNOTA = :OLD.NUNOTA
          AND ORIGEM IN ('A', 'D', 'E');
       IF P_COUNT <> 0 THEN
      ERRMSG := 'Nota já foi gerada nos Livros Fiscais, não pode ser excluída.';
      RAISE ERROR;
       END IF;

       SELECT COUNT(1) INTO P_COUNT
         FROM TGFLIV
        WHERE NUNOTA = :OLD.NUNOTA
          AND ORIGEM = 'E';
       IF P_COUNT <> 0 THEN
      ERRMSG := 'Nota já foi gerada calculo de ISS, não pode ser excluída.';
      RAISE ERROR;
       END IF;
    END IF;


    IF :OLD.TIPMOV = 'Z' THEN
       SELECT COUNT(1) INTO P_COUNT FROM TGFTPV T WHERE T.NUNOTA = :OLD.NUNOTA;
       IF P_COUNT <> 0 THEN
      ERRMSG := 'Impossivel excluir. Este cabeçalho da nota esta sendo referenciado por um tipo de negociacao.';
      RAISE ERROR;
       END IF;
    END IF;
  
    SELECT COUNT(1) INTO P_COUNT 
    FROM TGWSXN T 
    WHERE T.NUNOTA = :OLD.NUNOTA 
    AND T.STATUSNOTA <> 'C';
    IF P_COUNT <> 0 THEN
      ERRMSG := 'Impossivel excluir. Existem separações no WMS que não foram canceladas.';
      RAISE ERROR;
    END IF;

    SELECT COUNT(1) INTO P_COUNT FROM TCSOSE T WHERE T.NUNOTA = :OLD.NUNOTA;
    IF P_COUNT <> 0 THEN
    ERRMSG := 'Impossivel excluir. Este cabeçalho da nota esta sendo referenciado na ordem de serviço.';
    RAISE ERROR;
    END IF;

    IF (:OLD.APROVADO <> 'X')  THEN
       SELECT COUNT(1) INTO P_COUNT FROM TGFVAR WHERE NUNOTAORIG = :OLD.NUNOTA AND NUNOTA <> NUNOTAORIG;
       IF (P_COUNT <> 0 ) THEN
      ERRMSG := 'Impossível excluir. A nota deu origem a uma ou várias outras notas.';
      RAISE ERROR;
       END IF;
    END IF;

    IF :OLD.STATUSNOTA = 'L' THEN -- OS 447451
      SELECT COUNT(1), MIN(CHAVE)
      INTO P_COUNT, P_CHAVE
      FROM TSIPAR
      WHERE CHAVE IN ('TOPSACUMTROCA','TOPSUSATROCA')
      AND TEXTO IS NOT NULL
      AND  (',' || TRIM(REPLACE(TEXTO,' ','')) || ',') LIKE '%,' || :OLD.CODTIPOPER || ',%';
      IF P_COUNT > 1 THEN
        ERRMSG := 'Uma TOP não pode participar do param.TOPSACUMTROCA e do param.TOPSUSATROCA simultâneamente.';
        RAISE ERROR;
      ELSIF P_COUNT = 1 THEN    
        IF P_CHAVE = 'TOPSACUMTROCA' THEN  
          SELECT SUM(SINAL * VALOR) INTO P_VLRTROCA
          FROM TGFMST
          WHERE CODPARC = :OLD.CODPARC
          AND CODVEND = :OLD.CODVEND
          AND (NUNOTA <> :OLD.NUNOTA OR NUNOTA IS NULL);
          IF P_VLRTROCA < 0 THEN      
            ERRMSG := 'Exclusão cancelada pois o valor acumulado de troca não pode ficar negativo.';
            RAISE_APPLICATION_ERROR(-20101, ERRMSG);
          END IF;
        END IF;
        
        
        SELECT COUNT(1)
          INTO P_COUNT
        FROM TGFMST  
        WHERE NUNOTA = :OLD.NUNOTA;
        IF P_COUNT > 0 THEN
          DELETE FROM TGFMST  WHERE NUNOTA = :OLD.NUNOTA;
        END IF;
        
        
        SELECT COUNT(1)
          INTO P_COUNT
        FROM TGFVAR 
        WHERE (NUNOTA = :OLD.NUNOTA AND SEQUENCIA = 0) OR 
              (NUNOTAORIG = :OLD.NUNOTA AND SEQUENCIAORIG = 0);        
        IF P_COUNT > 0 THEN
          DELETE FROM TGFVAR WHERE (NUNOTA = :OLD.NUNOTA AND SEQUENCIA = 0) OR (NUNOTAORIG = :OLD.NUNOTA AND SEQUENCIAORIG = 0);
        END IF;

      END IF;
    END IF;    

    BEGIN
      SELECT V.NUNOTAORIG
      INTO P_NUIMP
      FROM TCEVAR V
      WHERE V.NUNOTADEST = :OLD.NUNOTA;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        P_NUIMP := 0;
    END;

    IF :OLD.TIPMOV = 'C' THEN
      IF P_NUIMP > 0 THEN   -- SE NOTA FAZ PARTE DO PROCESSO DE IMPORTAÇÃO
        SELECT COUNT (1), MIN(V.NUNOTADEST), MAX(V.NUNOTADEST)
        INTO P_COUNT, P_MINDEST, P_MAXDEST
        FROM TCEVAR V
        WHERE V.NUNOTAORIG = P_NUIMP
        AND V.NUNOTADEST <> :OLD.NUNOTA;
   
        IF P_COUNT <> 0 THEN
          P_MSG := 'NUNota: ' || P_MINDEST;
          IF P_MAXDEST <> P_MINDEST THEN
            P_MSG := P_MSG || ' e ' || P_MAXDEST;
          END IF;   
           RAISE_APPLICATION_ERROR (-20101, 'Processo de Importação com nota gerada.' || P_MSG || ' estas notas devem ser excluídas primeiro.');
        END IF;
      END IF;
    END IF;
    
    SELECT COUNT(1) INTO P_COUNT 
    FROM TGWRXN T 
    WHERE T.NUNOTA = :OLD.NUNOTA 
    AND T.STATUSNOTA <> 'C';
    IF P_COUNT <> 0 THEN
      ERRMSG := 'Impossivel excluir. Existem recebimentos no WMS que não foram cancelados.';
      RAISE ERROR;
    END IF;

    SELECT COUNT(1) INTO P_COUNT 
    FROM TCEVAR 
    WHERE NUNOTAORIG = P_NUIMP 
      AND NUNOTADEST = :OLD.NUNOTA;
    IF P_COUNT > 0 THEN
      DELETE FROM TCEVAR WHERE NUNOTAORIG = P_NUIMP AND NUNOTADEST = :OLD.NUNOTA;
    END IF;
    
    SELECT COUNT(1) INTO P_COUNT 
    FROM TGFRAT 
    WHERE NUFIN = :OLD.NUNOTA 
      AND ORIGEM = 'E';
    IF P_COUNT > 0 THEN
      DELETE FROM TGFRAT WHERE NUFIN = :OLD.NUNOTA AND ORIGEM = 'E';
    END IF;
            
    SELECT COUNT(1) INTO P_COUNT
    FROM TSIATA 
    WHERE CODATA = :OLD.NUNOTA 
    AND TIPO = 'N';
    IF P_COUNT > 0 THEN
      DELETE FROM TSIATA WHERE CODATA = :OLD.NUNOTA AND TIPO = 'N';
    END IF;
    
    SELECT COUNT(1) INTO P_COUNT
    FROM TSILIB 
    WHERE NUCHAVE = :OLD.NUNOTA 
    AND TABELA = 'TGFCAB';
    IF P_COUNT > 0 THEN
      DELETE FROM TSILIB WHERE NUCHAVE = :OLD.NUNOTA AND TABELA = 'TGFCAB';
    END IF;
    
    SELECT COUNT(1) INTO P_COUNT
    FROM TGFORD 
    WHERE NUNOTA = :OLD.NUNOTA;
    IF P_COUNT > 0 THEN
      UPDATE TGFORD SET NUNOTA = NULL WHERE NUNOTA = :OLD.NUNOTA; 
    END IF;
    
    SELECT COUNT(1) INTO P_COUNT
    FROM TGFEAC 
    WHERE NUNOTA = :OLD.NUNOTA;
    IF P_COUNT > 0 THEN
      UPDATE TGFEAC SET NUNOTA = 0 WHERE NUNOTA = :OLD.NUNOTA;
    END IF;
    
    SELECT COUNT(1) INTO P_COUNT
    FROM TCSEXR 
    WHERE NUNOTA = :OLD.NUNOTA;
    IF P_COUNT > 0 THEN
      DELETE FROM TCSEXR WHERE NUNOTA = :OLD.NUNOTA;
    END IF;
    
    SELECT COUNT(1) INTO P_COUNT
    FROM TGFACF 
    WHERE NUNOTA = :OLD.NUNOTA 
      AND CODHIST = 0 
      AND RETORNADO = 'N' 
      AND OBSERVACAO IS NULL;
    IF P_COUNT > 0 THEN
      DELETE FROM TGFACF WHERE NUNOTA =  :OLD.NUNOTA AND CODHIST = 0 AND RETORNADO = 'N' AND OBSERVACAO IS NULL;
    END IF;

  SELECT COUNT(1)  INTO P_COUNT
  FROM TGFCOM
  WHERE NUNOTAORIG = :OLD.NUNOTA;
  
  IF (P_COUNT>0) THEN
    SELECT NVL(MAX(NUFIN),0), NVL(MAX(CODFUNC),0) 
    INTO P_NUFIN,  P_CODFUNC
    FROM TGFCOM
    WHERE NUNOTAORIG = :OLD.NUNOTA;
    
    IF ((P_NUFIN <> 0) OR (P_CODFUNC <> 0))  THEN
       ERRMSG :=  'Essa comissão já foi paga. Exclusão proibida.';
       RAISE ERROR;     
    ELSE 
       DELETE FROM TGFCOM WHERE NUNOTAORIG = :OLD.NUNOTA;
    END IF;
  END IF;
  
    INSERT INTO TGFCAB_DLT
      (NUNOTA, DTNEG, TIPMOV, CODTIPOPER, DHTIPOPER,
       DTMOV, DTFATUR, DTENTSAI, CODPARC, CODEMP, CODEMPNEGOC,CODPARCDEST)
    VALUES
      (:OLD.NUNOTA, :OLD.DTNEG, :OLD.TIPMOV, :OLD.CODTIPOPER, :OLD.DHTIPOPER,
       :OLD.DTMOV, :OLD.DTFATUR, :OLD.DTENTSAI, :OLD.CODPARC, :OLD.CODEMP, :OLD.CODEMPNEGOC, :OLD.CODPARCDEST); 

    Tgfcab_Pkg.V_CONTADOR := Tgfcab_Pkg.V_CONTADOR + 1;
    Tgfcab_Pkg.V_CODPARC(Tgfcab_Pkg.V_CONTADOR) := :OLD.CODPARC;
    Tgfcab_Pkg.V_NUNOTA(Tgfcab_Pkg.V_CONTADOR) := :OLD.NUNOTA;
    Tgfcab_Pkg.V_CODTIPOPER(Tgfcab_Pkg.V_CONTADOR) := :OLD.CODTIPOPER;
    Tgfcab_Pkg.V_DHTIPOPER(Tgfcab_Pkg.V_CONTADOR) := :OLD.DHTIPOPER;
    Tgfcab_Pkg.V_CODVEND(Tgfcab_Pkg.V_CONTADOR) := :OLD.CODVEND;
    Tgfcab_Pkg.V_TIPMOV(Tgfcab_Pkg.V_CONTADOR) := :OLD.TIPMOV;

    IF (:OLD.STATUSNOTA = 'L') OR (:OLD.SERIENOTA = 'CF') THEN

      SELECT  SUBSTR(OSUSER,1,30), SUBSTR(MACHINE,1,64), PROGRAM  
      INTO P_NTUSERNAME, P_SOLICITANTE, P_PROGRAMNAME
      FROM V$SESSION
      WHERE AUDSID = USERENV('SESSIONID')
        AND ROWNUM = 1;

      INSERT INTO TGFCAB_EXC
             (NUNOTA, NUMNOTA, DTNEG, TIPMOV, VLRNOTA,
             DHEXCLUSAO, NT_USERNAME, HOSTNAME, CODPARC, CODVEND,
             CODEMP,CODCENCUS,SERIENOTA,DTFATUR,DTENTSAI,DTVAL,DTMOV,DTCONTAB,
             HRMOV,CODEMPNEGOC,CODCONTATO,RATEADO,CODVEICULO,CODTIPOPER,DHTIPOPER,
             CODTIPVENDA,DHTIPVENDA,NUMCOTACAO,COMISSAO,CODMOEDA,CODOBSPADRAO,
             OBSERVACAO,VLRSEG,VLRICMSSEG,VLRDESTAQUE,VLRJURO,VLRVENDOR,VLROUTROS,
             VLREMB,VLRICMSEMB,VLRDESCSERV,IPIEMB,TIPIPIEMB,VLRDESCTOT,VLRDESCTOTITEM,
             VLRFRETE,ICMSFRETE,BASEICMSFRETE,TIPFRETE,CIF_FOB,VENCFRETE,VENCIPI,ORDEMCARGA,
             SEQCARGA,KMVEICULO,CODPARCTRANSP,QTDVOL,PENDENTE,BASEICMS,VLRICMS,BASEIPI,
             VLRIPI,ISSRETIDO,BASEISS,VLRISS,APROVADO,STATUSNOTA,IRFRETIDO,COMGER,VLRIRF,
             DTALTER,VOLUME,CODPARCDEST,VLRSUBST,BASESUBSTIT,CODPROJ,NUMCONTRATO,BASEINSS,    
             VLRINSS,VLRREPREDTOT,PERCDESC,CODPARCREMETENTE,CODPARCCONSIGNATARIO,
             CODPARCREDESPACHO,LOCALCOLETA,LOCALENTREGA,VLRMERCADORIA,PESO,NOTASCF,
             CODNAT,CODUSU, NROREDZ,CODMAQ, PROGRAMA, NUMALEATORIO, NUMPROTOC, DHPROTOC, 
             DANFE, CHAVENFE, DTENVIOPMB, TIPNOTAPMB, DTENVSUF, NATUREZAOPERDES, SERIENFDES, 
             MODELONFDES, UFEMBARQ, LOCEMBARQ, NUMNFSE, NOMEADQUIRENTE, CPFCNPJADQUIRENTE, 
             ORDEMCARGAANT, TPAMBNFE, STATUSNFE, NULOTENFE, TPEMISNFE, NUMREGDPEC, DHREGDPEC, DTREMRET,
             INDPRESNFCE, VLRFRETETOTAL, CODPARCTRANSPFINAL, VLRICMSDIFALDEST, VLRICMSDIFALREM, CODCIDPREST,
             TPAMBNFSE, NROCAIXA, VLRICMSFCPINT, VLRSTFCPINT, VLRSTFCPINTANT)
      SELECT 
             :OLD.NUNOTA, :OLD.NUMNOTA, :OLD.DTNEG, :OLD.TIPMOV, :OLD.VLRNOTA,
              SYSDATE, P_NTUSERNAME, P_SOLICITANTE, :OLD.CODPARC, :OLD.CODVEND,
             :OLD.CODEMP,:OLD.CODCENCUS,:OLD.SERIENOTA,:OLD.DTFATUR,:OLD.DTENTSAI,:OLD.DTVAL,:OLD.DTMOV,:OLD.DTCONTAB,
             :OLD.HRMOV,:OLD.CODEMPNEGOC,:OLD.CODCONTATO,:OLD.RATEADO,:OLD.CODVEICULO,:OLD.CODTIPOPER,:OLD.DHTIPOPER,
             :OLD.CODTIPVENDA,:OLD.DHTIPVENDA,:OLD.NUMCOTACAO,:OLD.COMISSAO,:OLD.CODMOEDA,:OLD.CODOBSPADRAO,
             :OLD.OBSERVACAO,:OLD.VLRSEG,:OLD.VLRICMSSEG,:OLD.VLRDESTAQUE,:OLD.VLRJURO,:OLD.VLRVENDOR,:OLD.VLROUTROS,
             :OLD.VLREMB,:OLD.VLRICMSEMB,:OLD.VLRDESCSERV,:OLD.IPIEMB,:OLD.TIPIPIEMB,:OLD.VLRDESCTOT,:OLD.VLRDESCTOTITEM,
             :OLD.VLRFRETE,:OLD.ICMSFRETE,:OLD.BASEICMSFRETE,:OLD.TIPFRETE,:OLD.CIF_FOB,:OLD.VENCFRETE,:OLD.VENCIPI,:OLD.ORDEMCARGA,
             :OLD.SEQCARGA,:OLD.KMVEICULO,:OLD.CODPARCTRANSP,:OLD.QTDVOL,:OLD.PENDENTE,:OLD.BASEICMS,:OLD.VLRICMS,:OLD.BASEIPI,
             :OLD.VLRIPI,:OLD.ISSRETIDO,:OLD.BASEISS,:OLD.VLRISS,:OLD.APROVADO,:OLD.STATUSNOTA,:OLD.IRFRETIDO,:OLD.COMGER,:OLD.VLRIRF,
             :OLD.DTALTER,:OLD.VOLUME,:OLD.CODPARCDEST,:OLD.VLRSUBST,:OLD.BASESUBSTIT,:OLD.CODPROJ,:OLD.NUMCONTRATO,:OLD.BASEINSS,
             :OLD.VLRINSS,:OLD.VLRREPREDTOT,:OLD.PERCDESC,:OLD.CODPARCREMETENTE,:OLD.CODPARCCONSIGNATARIO,
             :OLD.CODPARCREDESPACHO,:OLD.LOCALCOLETA,:OLD.LOCALENTREGA,:OLD.VLRMERCADORIA,:OLD.PESO,:OLD.NOTASCF,
             :OLD.CODNAT,Tsiusu_Log_Pkg.V_CODUSULOG, :OLD.NROREDZ,:OLD.CODMAQ,P_PROGRAMNAME, :OLD.NUMALEATORIO, :OLD.NUMPROTOC,
             :OLD.DHPROTOC, :OLD.DANFE, :OLD.CHAVENFE, :OLD.DTENVIOPMB, :OLD.TIPNOTAPMB, :OLD.DTENVSUF, :OLD.NATUREZAOPERDES, 
             :OLD.SERIENFDES, :OLD.MODELONFDES, :OLD.UFEMBARQ, :OLD.LOCEMBARQ, :OLD.NUMNFSE, :OLD.NOMEADQUIRENTE, :OLD.CPFCNPJADQUIRENTE, 
             :OLD.ORDEMCARGAANT, :OLD.TPAMBNFE, :OLD.STATUSNFE, :OLD.NULOTENFE, :OLD.TPEMISNFE, :OLD.NUMREGDPEC, :OLD.DHREGDPEC, :OLD.DTREMRET,
             :OLD.INDPRESNFCE, :OLD.VLRFRETETOTAL, :OLD.CODPARCTRANSPFINAL, :OLD.VLRICMSDIFALDEST, :OLD.VLRICMSDIFALREM, :OLD.CODCIDPREST,
             :OLD.TPAMBNFSE, :OLD.NROCAIXA, :OLD.VLRICMSFCPINT, :OLD.VLRSTFCPINT, :OLD.VLRSTFCPINTANT
    FROM DUAL
    WHERE NOT EXISTS (SELECT 1 FROM TGFCAB_EXC C WHERE C.NUNOTA = :OLD.NUNOTA);
       
    END IF;
    
    SELECT COUNT(1) INTO P_COUNT
    FROM TGFIXN 
    WHERE NUNOTA = :OLD.NUNOTA AND TIPIMPCTE <> 'C';
    IF P_COUNT > 0 THEN
      DELETE FROM TGFIXN WHERE NUNOTA = :OLD.NUNOTA AND TIPIMPCTE <> 'C';
    END IF;

  RETURN;

EXCEPTION
  WHEN ERROR THEN
    /* 
    Sincronização de dados não faz validações
    */
    IF (P_VALIDAR) THEN 
      Tgfcab_Pkg.V_CONTADOR := 0;
      RAISE_APPLICATION_ERROR(-20101, ERRMSG);
    END IF; 
END;
/
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 20/04/2018 17:07:05
Num.Script: 52726-0-1000
Nro. O.S. : 1168339
Nome      : INSERE - THOOBJ - 5272500
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_DLT_TGFCAB
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210009
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_DLT_TGFCAB' NOMEOBJ, 52725 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '1811444211fa1e667a286a9e3640fcff' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_DLT_TGFCAB' and THO.hashcode = '1811444211fa1e667a286a9e3640fcff')
/
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 20/04/2018 16:56:14
Num.Script: 53590-0-0
Nro. O.S. : 1156207
Nome      : Criar - FK_TGFCPL_CODCIDENTREGA_TSICID
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - FK_TGFCPL_CODCIDENTREGA_TSICID
NomeObjeto: FK_TGFCPL_CODCIDENTREGA_TSICID
TipoObjeto: FOREIGN KEY
NomeTabela: TGFCPL
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210009
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFCPL ADD CONSTRAINT FK_TGFCPL_CODCIDENTREGA_TSICID FOREIGN KEY (CODCIDENTREGA) REFERENCES TSICID (CODCID) NOVALIDATE
/
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 20/04/2018 16:56:14
Num.Script: 53591-0-0
Nro. O.S. : 1156207
Nome      : Criar - FK_TGFCPL_CODCIDRECEB_TSICID 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - FK_TGFCPL_CODCIDRECEB_TSICID 
NomeObjeto: FK_TGFCPL_CODCIDRECEB_TSICID 
TipoObjeto: FOREIGN KEY
NomeTabela: TGFCPL
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210009
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFCPL ADD CONSTRAINT FK_TGFCPL_CODCIDRECEB_TSICID FOREIGN KEY (CODCIDRECEB) REFERENCES TSICID (CODCID) NOVALIDATE 
/
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 20/04/2018 16:56:14
Num.Script: 53592-0-0
Nro. O.S. : 1156207
Nome      : Criar - FK_TGFCPL_CODCIDTRAB_TSICID 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - FK_TGFCPL_CODCIDTRAB_TSICID 
NomeObjeto: FK_TGFCPL_CODCIDTRAB_TSICID 
TipoObjeto: FOREIGN KEY
NomeTabela: TGFCPL
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210009
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFCPL ADD CONSTRAINT FK_TGFCPL_CODCIDTRAB_TSICID FOREIGN KEY (CODCIDTRAB) REFERENCES TSICID (CODCID) NOVALIDATE 
/
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 20/04/2018 16:56:14
Num.Script: 53649-0-0
Nro. O.S. : 1119458
Nome      : Criar - TSILIG 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TSILIG 
NomeObjeto: TSILIG 
TipoObjeto: TABLE
NomeTabela: TSILIG 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210009
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TSILIG (	
NOMEINSTORIG VARCHAR2(100) NOT NULL, 
NOMEINSTDEST VARCHAR2(100) NOT NULL, 
RELATIONNAME VARCHAR2(100), 
EXPRESSAO VARCHAR2(4000), 
DHALTER DATE NOT NULL ENABLE, 
PRIMARY KEY (NOMEINSTORIG, NOMEINSTDEST) 
)
/
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 20/04/2018 16:56:14
Num.Script: 53650-0-0
Nro. O.S. : 1119458
Nome      : Criar - CODUSU TSILIG 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - CODUSU TSILIG 
NomeObjeto: CODUSU
TipoObjeto: COLUMN
NomeTabela: TSILIG 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210009
Autor     : ULISSES
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE P_COUNT NUMBER(5);
BEGIN
  SELECT COUNT(1) INTO P_COUNT
  FROM USER_TAB_COLUMNS
  WHERE TABLE_NAME = 'TSIUSU'
    AND COLUMN_NAME = 'CODUSU'
    AND DATA_PRECISION = 5;
  
  IF P_COUNT > 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE TSILIG ADD CODUSU NUMBER(5)';
  ELSE
    EXECUTE IMMEDIATE 'ALTER TABLE TSILIG ADD CODUSU NUMBER(10)';
  END IF;
END;
/
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 23/04/2018 18:04:12
Num.Script: 53662-0-0
Nro. O.S. : 1162921
Nome      : Cria - TGFCPL SEMREPREDAGRO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: SEMREPREDAGRO
TipoObjeto: COLUMN
NomeTabela: TGFCPL
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210009
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TGFCPL ADD SEMREPREDAGRO VARCHAR2(1)';
   EXECUTE IMMEDIATE 'ALTER TABLE TGFCPL ADD  CONSTRAINT CKC_SEMREPREDAGRO_TGFCPL CHECK (SEMREPREDAGRO IN (''S'',''N'') OR SEMREPREDAGRO IS NULL )';
END;
/
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 26/04/2018 15:11:42
Num.Script: 53677-0-0
Nro. O.S. : 1152808
Nome      : Criar - TGFMTP 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TGFMTP 
NomeObjeto: TGFMTP 
TipoObjeto: TABLE
NomeTabela: TGFMTP 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210009
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TGFMTP (
CODEMP NUMBER(5) NOT NULL,
DTMTP DATE NOT NULL,
CODPARC NUMBER(10) NOT NULL,
CODTIPOPER NUMBER(5) NOT NULL,
CUSTOMTP VARCHAR2(1) NOT NULL,
STATUSEFD VARCHAR2(1) DEFAULT 'P' NOT NULL,
DTALTER DATE NOT NULL,
CODTIPVENDA NUMBER(5) NOT NULL,
CONSTRAINT PK_TGFMTP PRIMARY KEY (CODEMP, DTMTP) 
)
/
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 26/04/2018 15:11:42
Num.Script: 53678-0-0
Nro. O.S. : 1152808
Nome      : Criar - CODUSU TGFMTP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - CODUSU TGFMTP
NomeObjeto: CODUSU
TipoObjeto: COLUMN
NomeTabela: TGFMTP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210009
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE P_COUNT NUMBER(5);
BEGIN
  SELECT COUNT(1) INTO P_COUNT
  FROM USER_TAB_COLUMNS
  WHERE TABLE_NAME = 'TSIUSU'
    AND COLUMN_NAME = 'CODUSU'
    AND DATA_PRECISION = 5;
  
  IF P_COUNT > 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE TGFMTP ADD CODUSU NUMBER(5)';
  ELSE
    EXECUTE IMMEDIATE 'ALTER TABLE TGFMTP ADD CODUSU NUMBER(10)';
  END IF;
END;
/
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 26/04/2018 15:11:42
Num.Script: 53679-0-0
Nro. O.S. : 1152808
Nome      : Criar - TGFPMT 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TGFPMT 
NomeObjeto: TGFPMT 
TipoObjeto: TABLE
NomeTabela: TGFPMT 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210009
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TGFPMT (
CODEMP NUMBER(5) NOT NULL,
DTMTP DATE NOT NULL,
CODPROD NUMBER(10) NOT NULL,
NUNOTACOMPRA NUMBER(10),
CODPARCCOMPRA NUMBER(10),
QTDEST FLOAT DEFAULT 0 NOT NULL,
CST NUMBER(5) DEFAULT 0 NOT NULL,
VLRUNITCUSTO FLOAT DEFAULT 0 NOT NULL,
MVA FLOAT DEFAULT 0 NOT NULL,
ALIQST FLOAT DEFAULT 0 NOT NULL,
ALIQICMS FLOAT DEFAULT 0 NOT NULL,
BASEICMS FLOAT DEFAULT 0 NOT NULL,
VLRICMS FLOAT DEFAULT 0 NOT NULL,
DTALTER DATE NOT NULL,
DIGITADO VARCHAR2(1) DEFAULT 'S',
IDALIQ NUMBER(10),
NCM VARCHAR2(10),
USOPROD VARCHAR2(1),
CODGRUPOPROD NUMBER(10),
VLRICMSCOMPRA FLOAT DEFAULT 0,
CODVOL VARCHAR2(2) NOT NULL,
CONSTRAINT PK_TGFPMT PRIMARY KEY (CODEMP, DTMTP, CODPROD),
CONSTRAINT FK_TGFPMT_TGFMTP FOREIGN KEY(CODEMP,DTMTP) REFERENCES TGFMTP (CODEMP,DTMTP) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 26/04/2018 15:11:42
Num.Script: 53680-0-0
Nro. O.S. : 1152808
Nome      : Criar - CODUSU TGFPMT 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - CODUSU TGFPMT 
NomeObjeto: CODUSU
TipoObjeto: COLUMN
NomeTabela: TGFPMT 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210009
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE P_COUNT NUMBER(5);
BEGIN
  SELECT COUNT(1) INTO P_COUNT
  FROM USER_TAB_COLUMNS
  WHERE TABLE_NAME = 'TSIUSU'
    AND COLUMN_NAME = 'CODUSU'
    AND DATA_PRECISION = 5;
  
  IF P_COUNT > 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE TGFPMT ADD CODUSU NUMBER(5)';
  ELSE
    EXECUTE IMMEDIATE 'ALTER TABLE TGFPMT ADD CODUSU NUMBER(10)';
  END IF;
END;
/
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 26/04/2018 15:11:42
Num.Script: 53709-0-0
Nro. O.S. : 1152808
Nome      : Alterar - CODTIPVENDA 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - CODTIPVENDA 
NomeObjeto: CODTIPVENDA 
TipoObjeto: COLUMN
NomeTabela: TGFMTP
Executar  : SE_EXISTIR
Ocorrencia: 4210009
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
   L_NULL USER_TAB_COLUMNS.NULLABLE%TYPE;
BEGIN
   SELECT NULLABLE INTO L_NULL
     FROM USER_TAB_COLUMNS
    WHERE TABLE_NAME = 'TGFMTP'
      AND COLUMN_NAME = 'CODTIPVENDA';

   IF L_NULL = 'N' THEN
      EXECUTE IMMEDIATE 'ALTER TABLE TGFMTP MODIFY CODTIPVENDA NUMBER(5) NULL';
   END IF;
END;
/
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 20/04/2018 16:56:14
Num.Script: 53736-0-0
Nro. O.S. : 1174270
Nome      : Ajusta - TFPFOR CODFORM 902
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Ajusta - TFPFOR CODFORM 902
NomeObjeto: CODFORM
TipoObjeto: COLUMN
NomeTabela: TFPFOR
Executar  : SE_EXISTIR
Ocorrencia: 4210009
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
  P_CODFORMULA      TFPFOR.CODFORM%TYPE;
  P_DESCRFORMULA    TFPFOR.DESCRFORM%TYPE;
  P_DESCRFORMNOVO   TFPFOR.DESCRFORM%TYPE;
  P_FORMULA         VARCHAR2(4000);
  P_FORMULANOVO     VARCHAR2(4000);
  P_CODFORMIND      VARCHAR2(4000);
  P_CODFORMINDNOVO  VARCHAR2(4000);
  P_SANKHYA         TFPFOR.SANKHYA%TYPE;
BEGIN
  
  P_CODFORMULA := 902;
  
  BEGIN
    SELECT FORMULA, DESCRFORM, CODFORMIND, SANKHYA
    INTO P_FORMULA, P_DESCRFORMULA, P_CODFORMIND, P_SANKHYA
    FROM TFPFOR
    WHERE CODFORM = P_CODFORMULA;
  EXCEPTION WHEN NO_DATA_FOUND THEN
    P_FORMULA := 'A';
    P_CODFORMIND := NULL;
    P_DESCRFORMULA := NULL;
    P_SANKHYA := 'S'; 
  END;
  
  IF P_SANKHYA = 'N' THEN
    RETURN;
  END IF;
  
  P_DESCRFORMNOVO := 'INSS - FERIAS';
  P_FORMULANOVO := 'IF(QueFuncionario.VINCULO = 2,0,TRUNCFOL(IF(&INSSMESAMES = ''S'',0,IF(&F5011 > FTF(1,3,&F5011,&Refere,QueFuncionario.TIPTAB), FTF(1,4,&F5011,&Refere,QueFuncionario.TIPTAB),((((&F5011 * FTF(1,1,&F5011,&Refere,QueFuncionario.TIPTAB)) / 100) * IF(&F5011 > 0,(&E1902 / &F5011),0)) + IF(&F5011 <= FTF(1,3,&F5011,&Refere,QueFuncionario.TIPTAB),((&E505 + FBE(QueFuncionario.CODEMP,QueFuncionario.CODFUNC,&Refere,''F,1,2,3'',''1902'') * FTF(1,1,&F5011,&Refere,QueFuncionario.TIPTAB)) / 100),0)))),2)) - (&E506 + ABS(FBE(QueFuncionario.CODEMP,QueFuncionario.CODFUNC,&Refere,''F,1,2,3'',''902'') + IF(&F5011 >= FTF(1,3,&F5011,&Refere,QueFuncionario.TIPTAB),ABS(&E922),0)))';
  P_CODFORMINDNOVO := 'FTF(1,1,&F5011 ,&Refere,QueFuncionario.TIPTAB)';
  
  IF P_FORMULA = 'A' THEN
    INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
      VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
             'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO);
    
    IF P_CODFORMINDNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO);
    END IF;
    
    IF P_DESCRFORMNOVO IS NOT NULL THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO)
        VALUES('TFPFOR', 'INSERT', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO);
    END IF;
    
    INSERT INTO TFPFOR (CODFORM, DESCRFORM, SANKHYA, FORMULA, CODFORMIND)
      VALUES(P_CODFORMULA, P_DESCRFORMNOVO, 'S', P_FORMULANOVO, P_CODFORMINDNOVO);
    
  ELSIF (P_FORMULANOVO <> P_FORMULA OR 
         NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') OR 
         NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z')) 
  THEN
    
    IF P_FORMULANOVO <> P_FORMULA THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'FORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_FORMULANOVO, P_FORMULA);
    END IF;
    
    IF NVL(P_CODFORMINDNOVO,'z') <> NVL(P_CODFORMIND,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'CODFORMIND',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_CODFORMINDNOVO, P_CODFORMIND);
    END IF;
    
    IF NVL(P_DESCRFORMNOVO,'z') <> NVL(P_DESCRFORMULA,'z') THEN
      INSERT INTO TSILGT(NOMETAB, ACAO, DHACAO, USUBANCO, PROGRAMA, CAMPO, CHAVE, NOVO, VELHO)
        VALUES('TFPFOR', 'UPDATE', SYSDATE, 'SANKHYA', 'SNKSCRIPT', 'DESCRFORMULA',
               'PK [CODFORM=' || TO_CHAR(P_CODFORMULA) || ']', P_DESCRFORMNOVO, P_DESCRFORMULA);
    END IF;
    
    UPDATE TFPFOR
    SET FORMULA = P_FORMULANOVO
    , DESCRFORM = P_DESCRFORMNOVO
    , CODFORMIND = P_CODFORMINDNOVO
    , FORMULANTERIOR = CASE WHEN FORMULA <> P_FORMULANOVO THEN P_FORMULA ELSE FORMULANTERIOR END
    , DTALTER = SYSDATE
    , CODUSU = 0
    WHERE CODFORM = P_CODFORMULA
    AND SANKHYA = 'S';
    
  END IF;
  
END;
/
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 20/04/2018 16:56:14
Num.Script: 53747-0-0
Nro. O.S. : 1141788
Nome      : Cria - TFPFAL HORAS
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: HORAS
TipoObjeto: COLUMN
NomeTabela: TFPFAL
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210009
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPFAL ADD HORAS FLOAT
/
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 20/04/2018 16:56:14
Num.Script: 53748-0-0
Nro. O.S. : 1141788
Nome      : Cria - TFPMOV INDICEHORA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: INDICEHORA
TipoObjeto: COLUMN
NomeTabela: TFPMOV
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210009
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPMOV ADD INDICEHORA FLOAT
/
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 20/04/2018 16:56:14
Num.Script: 53750-0-0
Nro. O.S. : 1077807
Nome      : Dropar - CKC_RETSTVENDA_TGFPAR
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - CKC_RETSTVENDA_TGFPAR
NomeObjeto: CKC_RETSTVENDA_TGFPAR
TipoObjeto: CONSTRAINT
NomeTabela: TGFPAR 
Executar  : SE_EXISTIR
Ocorrencia: 4210009
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFPAR DROP CONSTRAINT CKC_RETSTVENDA_TGFPAR
/
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 20/04/2018 16:56:14
Num.Script: 53751-0-0
Nro. O.S. : 1077807
Nome      : Criar - CKC_RETSTVENDA_TGFPAR 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - CKC_RETSTVENDA_TGFPAR 
NomeObjeto: CKC_RETSTVENDA_TGFPAR 
TipoObjeto: CONSTRAINT
NomeTabela: TGFPAR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210009
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFPAR ADD CONSTRAINT CKC_RETSTVENDA_TGFPAR CHECK (RETSTVENDA IN ('S','N','A')) ENABLE VALIDATE
/
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 20/04/2018 16:56:14
Num.Script: 53761-0-0
Nro. O.S. : 1173947
Nome      : Alterar - SNK_GET_DADOS_EFD
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - SNK_GET_DADOS_EFD
NomeObjeto: SNK_GET_DADOS_EFD
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210009
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_GET_DADOS_EFD (P_REGISTRO        VARCHAR2,
                                               P_CODEMP          NUMBER,
                                               P_NUNICO          NUMBER,
                                               P_SEQNOTA         NUMBER,
                                               P_ORIGEM          VARCHAR2,
                                               P_CODCENCUS   OUT NUMBER,
                                               P_CTACTB      OUT VARCHAR2)
AS
   P_GRUPO_NATUREZA   VARCHAR2 (100);
   CURSOR CUR_DADOS IS
    SELECT PLA.CTACTB, LAN.CODCENCUS
    FROM TCBINT BINT
        INNER JOIN TCBLAN LAN
           ON     LAN.CODEMP = BINT.CODEMP
              AND LAN.REFERENCIA = BINT.REFERENCIA
              AND LAN.NUMLOTE = BINT.NUMLOTE
              AND LAN.NUMLANC = BINT.NUMLANC
              AND LAN.TIPLANC = BINT.TIPLANC
              AND LAN.SEQUENCIA = BINT.SEQUENCIA
        INNER JOIN TCBPLA PLA
           ON PLA.CODCTACTB = LAN.CODCTACTB
    WHERE ( (P_ORIGEM = 'F'
           AND BINT.ORIGEM IN ('F', 'B', 'M', 'R', 'J'))
         OR (P_ORIGEM = 'E' AND BINT.ORIGEM IN ('E', 'L', 'S')))
        AND BINT.NUNICO = P_NUNICO
        AND (BINT.SEQNOTA = 0 OR BINT.SEQNOTA = P_SEQNOTA)
        AND (BINT.CODEMP = P_CODEMP
             OR (P_ORIGEM = 'E'
                 AND EXISTS
                       (SELECT 1
                          FROM TGFCAB C
                         WHERE C.NUNOTA = P_NUNICO
                               AND C.CODEMP = P_CODEMP))
             OR (P_ORIGEM = 'F'
                 AND EXISTS
                       (SELECT 1
                          FROM TGFFIN F
                         WHERE F.NUFIN = P_NUNICO
                               AND F.CODEMP = P_CODEMP)))
        AND INSTR (P_GRUPO_NATUREZA, ',' || PLA.NATUREZAEFD || ',') > 0
     ORDER BY LAN.VLRLANC DESC, BINT.SEQNOTA DESC, PLA.CTACTB DESC; /* ESSA ORDENAÇÃO É MUITO IMPORTANTE, NÃO PODE SER ALTERADA */
        
BEGIN
   IF P_REGISTRO IN ('A170', 'C170', 'C191', 'C195', 'C396', 'C481', 'C485', 'C501', 'C505', 'F100_NOTA', 'F100_FINANCEIRO')
   THEN
      P_GRUPO_NATUREZA := ',1,2,3,4,6,7,8,9,';
   ELSIF P_REGISTRO IN ('C175', 'C181', 'C185', 'C381', 'C385', 'C491', 'C495', 'C810', 'C870')
   THEN
      P_GRUPO_NATUREZA := ',1,2,';
   ELSIF P_REGISTRO IN ('D100', 'D101', 'D105')
   THEN
      P_GRUPO_NATUREZA := ',3,5,6,7,8,9,11,';
   ELSIF P_REGISTRO IN ('D201', 'D205', 'D601', 'D605')
   THEN
      P_GRUPO_NATUREZA := ',3,';
   ELSIF P_REGISTRO IN ('D501', 'D505')
   THEN
      P_GRUPO_NATUREZA := ',6,7,';
   ELSIF P_REGISTRO IN ('F500', 'F510', 'F525', 'F550', 'F560', '1900')
   THEN
      P_GRUPO_NATUREZA := ',1,2,3,';
   ELSIF P_REGISTRO IN ('F100_MULTA', 'F100_JURO', 'F100_DESCONTO')
   THEN
      P_GRUPO_NATUREZA := ',1,2,6,7,12,13,';
   ELSE
      P_GRUPO_NATUREZA := ' ';
   END IF;

   IF P_GRUPO_NATUREZA <> ' ' THEN
      OPEN CUR_DADOS;
      FETCH CUR_DADOS INTO P_CTACTB, P_CODCENCUS;
      CLOSE CUR_DADOS;
   END IF;
END;
/
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 20/04/2018 17:54:58
Num.Script: 53771-0-0
Nro. O.S. : 1166501
Nome      : Cria - TGFNMDFE INDREENTREGA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: INDREENTREGA
TipoObjeto: COLUMN
NomeTabela: TGFNMDFE
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210009
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFNMDFE ADD INDREENTREGA VARCHAR2(1)
/
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 20/04/2018 17:06:16
Num.Script: 53782-0-0
Nro. O.S. : 1149539
Nome      : Dropar - CKC_STATUSAPROV_TRSCAN
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - CKC_STATUSAPROV_TRSCAN
NomeObjeto: CKC_STATUSAPROV_TRSCAN
TipoObjeto: CONSTRAINT
NomeTabela: TRSCAN
Executar  : SE_EXISTIR
Ocorrencia: 4210009
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRSCAN DROP CONSTRAINT CKC_STATUSAPROV_TRSCAN
/
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 20/04/2018 17:06:11
Num.Script: 53783-0-0
Nro. O.S. : 1149539
Nome      : Criar - CKC_STATUSAPROV_TRSCAN 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - CKC_STATUSAPROV_TRSCAN 
NomeObjeto: CKC_STATUSAPROV_TRSCAN 
TipoObjeto: CONSTRAINT
NomeTabela: TRSCAN
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210009
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRSCAN ADD CONSTRAINT CKC_STATUSAPROV_TRSCAN CHECK (STATUSAPROV IN ('A','C','D','E','P','R','N'))
/
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 09/05/2018 09:49:43
Num.Script: 53784-0-0
Nro. O.S. : 1149539
Nome      : Alterar - VGFSELECAO_ETAPA_CANDIDATO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VGFSELECAO_ETAPA_CANDIDATO
NomeObjeto: VGFSELECAO_ETAPA_CANDIDATO
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210009
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE FORCE VIEW VGFSELECAO_ETAPA_CANDIDATO
(
   NUSELECAO,
   DESCRSELECAO,
   CODETAPA,
   DESCRETAPA,
   NUCURRICULO,
   NOMECANDIDATO,
   RESULTADO,
   CODUSU,
   DHINICIO,
   DHFINAL,
   NUEVENTO,
   NUREQUISICAO,
   STATUSETAPA,
   CODSTAETAPA,
   TIPOETAPA
)
AS
     SELECT SEL.NUSELECAO,
            SEL.DESCRSELECAO,
            ECG.CODETAPA,
            ETA.DESCRETAPA,
            CAN.NUCURRICULO,
            BCO.NOMECANDIDATO,
            PON.RESULTADO,
            EAG.CODUSU,
            EAG.DHINICIO,
            EAG.DHFINAL,
            EAG.NUEVENTO,
            REQ.NUREQUISICAO,
            STE.STATUSETAPA,
            STE.CODSTAETAPA,
            STE.TIPOETAPA
       FROM TRSSEL SEL
            INNER JOIN TRSCAN CAN ON CAN.NUSELECAO = SEL.NUSELECAO
            INNER JOIN TRSRQS RQS ON RQS.NUSELECAO = SEL.NUSELECAO
            INNER JOIN TRSREQ REQ ON REQ.NUREQUISICAO = RQS.NUREQUISICAO
            INNER JOIN
            TRSECG ECG
               ON     (ECG.CODCARGO = REQ.CODCARGO OR ECG.CODCARGO = 0)
                  AND ECG.CODEMP = REQ.CODEMP
            INNER JOIN TRSETA ETA ON (ETA.CODETAPA = ECG.CODETAPA)
            INNER JOIN TFCBCO BCO ON (BCO.NUCURRICULO = CAN.NUCURRICULO)
            LEFT JOIN
            TRSPON PON
               ON (    PON.CODETAPA = ETA.CODETAPA
                   AND PON.NUCURRICULO = BCO.NUCURRICULO
                   AND PON.NUSELECAO = CAN.NUSELECAO)
            LEFT JOIN
            TRSSTE STE
               ON (    STE.CODETAPA = ETA.CODETAPA
                   AND STE.NUSELECAO = SEL.NUSELECAO 
                   AND STE.NUCURRICULO = BCO.NUCURRICULO 
                   AND STE.NUREQUISICAO = RQS.NUREQUISICAO)
            LEFT JOIN
            TCSEAG EAG
               ON (    EAG.CODETAPA = ETA.CODETAPA
                   AND EAG.NUCURRICULO = BCO.NUCURRICULO
                   AND EAG.NUSELECAO = CAN.NUSELECAO
                   AND EAG.CANCELADO <> 'S')
      WHERE     (   ECG.CODCARGO <> 0
                 OR NOT EXISTS
                           (SELECT 1
                              FROM TRSECG ECG1
                             WHERE     ECG1.CODETAPA = ECG.CODETAPA
                                   AND ECG1.CODEMP = ECG.CODEMP
                                   AND ECG1.CODCARGO = REQ.CODCARGO))
                                   AND SEL.SITSELECAO <> 1 
                                   AND STE.STATUSETAPA IS NOT NULL
                                   AND STE.STATUSETAPA <> 'X'                            
   ORDER BY 1, 3, 5
   /
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 03/05/2018 17:49:37
Num.Script: 53822-0-0
Nro. O.S. : 1168521
Nome      : Criar - TGFUVC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TGFUVC
NomeObjeto: TGFUVC
TipoObjeto: TABLE
NomeTabela: TGFUVC
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210009
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE  TGFUVC
(
  TIPMOV         CHAR(1 BYTE),
  CODPROD      NUMBER(10),
  CODEMP        NUMBER(5),
  CODLOCALORIG  NUMBER(10),
  CONTROLE     VARCHAR2(11 BYTE),
  RESERVA        CHAR(1 BYTE),
  DTREF            DATE,
  QTDNEG        NUMBER,
  ALIQICMS      NUMBER,
  PRIMARY KEY (TIPMOV, CODPROD, CODEMP, CODLOCALORIG, CONTROLE,DTREF)
)
/
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 03/05/2018 17:49:37
Num.Script: 53823-0-0
Nro. O.S. : 1168521
Nome      : Alterar - SNK_MATGIRCALCSUG 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - SNK_MATGIRCALCSUG 
NomeObjeto: SNK_MATGIRCALCSUG 
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210009
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_MATGIRCALCSUG (
   P_CODREL              INT,
   P_PERIODOS            INT,
   P_DIASEST             INT,
   P_DESPPER             INT,
   P_PERCACRESSUG        FLOAT,
   P_SEMGIRO             CHAR,
   P_ULT                 CHAR,
   P_USAREMP             CHAR,
   P_USARLOCAL           CHAR,
   P_USARCONTROLE        CHAR,
   P_TIPOAGRUPAMENTO      CHAR,
   P_FILTROPEDCPAPEND    VARCHAR2,
   P_FILTROPEDVDAPEND    VARCHAR2)
IS
   QUEPED              VARCHAR2 (4000);
   QUEFROMWHERE        VARCHAR2 (4000);
   QUECOMPRA           VARCHAR2 (4000);
   QUEVENDA            VARCHAR2 (4000);
   QUEPEDINI           VARCHAR2 (4000);
   QUEPEDFIM           VARCHAR2 (4000);
   QUEPEDGROUP         VARCHAR2 (4000);
   QUEULTDT            VARCHAR2 (4000);
   strSugCompEstMinMax CHAR;

   TYPE TVETOR IS VARRAY (12) OF FLOAT;

   VP                   TVETOR;
   VD                   TVETOR;

   CURSOR CURESTMIN
   IS
      SELECT NVL (VLRVENDA_1, 0),
             NVL (VLRVENDA_2, 0),
             NVL (VLRVENDA_3, 0),
             NVL (VLRVENDA_4, 0),
             NVL (VLRVENDA_5, 0),
             NVL (VLRVENDA_6, 0),
             NVL (VLRVENDA_7, 0),
             NVL (VLRVENDA_8, 0),
             NVL (VLRVENDA_9, 0),
             NVL (VLRVENDA_10, 0),
             NVL (VLRVENDA_11, 0),
             NVL (VLRVENDA_12, 0),
             NVL (VLRVENDIAUTIL_1, 0),
             NVL (VLRVENDIAUTIL_2, 0),
             NVL (VLRVENDIAUTIL_3, 0),
             NVL (VLRVENDIAUTIL_4, 0),
             NVL (VLRVENDIAUTIL_5, 0),
             NVL (VLRVENDIAUTIL_6, 0),
             NVL (VLRVENDIAUTIL_7, 0),
             NVL (VLRVENDIAUTIL_8, 0),
             NVL (VLRVENDIAUTIL_9, 0),
             NVL (VLRVENDIAUTIL_10, 0),
             NVL (VLRVENDIAUTIL_11, 0),
             NVL (VLRVENDIAUTIL_12, 0),
               NVL (VLRVENDIAUTIL_1, 0)
             + NVL (VLRVENDIAUTIL_2, 0)
             + NVL (VLRVENDIAUTIL_3, 0)
             + NVL (VLRVENDIAUTIL_4, 0)
             + NVL (VLRVENDIAUTIL_5, 0)
             + NVL (VLRVENDIAUTIL_6, 0)
             + NVL (VLRVENDIAUTIL_7, 0)
             + NVL (VLRVENDIAUTIL_8, 0)
             + NVL (VLRVENDIAUTIL_9, 0)
             + NVL (VLRVENDIAUTIL_10, 0)
             + NVL (VLRVENDIAUTIL_11, 0)
             + NVL (VLRVENDIAUTIL_12, 0)
                AS TOTVLRVENDIAUTIL,
               CASE WHEN VLRVENDIAUTIL_1 > 0 THEN 1 ELSE 0 END
             + CASE WHEN VLRVENDIAUTIL_2 > 0 THEN 1 ELSE 0 END
             + CASE WHEN VLRVENDIAUTIL_3 > 0 THEN 1 ELSE 0 END
             + CASE WHEN VLRVENDIAUTIL_4 > 0 THEN 1 ELSE 0 END
             + CASE WHEN VLRVENDIAUTIL_5 > 0 THEN 1 ELSE 0 END
             + CASE WHEN VLRVENDIAUTIL_6 > 0 THEN 1 ELSE 0 END
             + CASE WHEN VLRVENDIAUTIL_7 > 0 THEN 1 ELSE 0 END
             + CASE WHEN VLRVENDIAUTIL_8 > 0 THEN 1 ELSE 0 END
             + CASE WHEN VLRVENDIAUTIL_9 > 0 THEN 1 ELSE 0 END
             + CASE WHEN VLRVENDIAUTIL_10 > 0 THEN 1 ELSE 0 END
             + CASE WHEN VLRVENDIAUTIL_11 > 0 THEN 1 ELSE 0 END
             + CASE WHEN VLRVENDIAUTIL_12 > 0 THEN 1 ELSE 0 END
                AS QTDPERCOMGIRO,
             ESTMIN,
             ESTOQUE,
             CUSTOGER,
             CODPROD,
             CODLOCAL,
             CONTROLE,
             CODEMP,
             LEADTIME,
             ESTMAX             
        FROM TGFGIR
       WHERE CODREL = P_CODREL AND CODPROD > 0
      FOR UPDATE OF
         PEDCPAPEND,
         PEDVDAPEND,
         ESTMINGIR,
         SUGCOMPRA,
         SUGCOMPRAGIR,
         SUGCOMPCUSTGER,
         QTDULTCOMPRA,
         ALIQCRED,
         ULTCOMPRA,
         ULTVENDA,
         DUREST,
         DURESTPOSCPA,
         DURESTPOSCPAGIR,
         DIASSEMVENDA,
         QTDTOTAL,
         QTDMEDIA,
         QTDMINIMA,
         QTDMAXIMA,
         ESTMAX;

   DOBPEDCPAPEND        TGFGIR.PEDCPAPEND%TYPE;
   DOBPEDVDAPEND        TGFGIR.PEDVDAPEND%TYPE;
   DOBESTMINGIR         TGFGIR.ESTMIN%TYPE;
   DOBESTMINGIRCOMP     TGFGIR.ESTMIN%TYPE;
   DOBSUGCOMPRA         TGFGIR.SUGCOMPRA%TYPE;
   DOBSUGCOMPRAGIR      TGFGIR.SUGCOMPRAGIR%TYPE;
   DOBSUGCOMPCUSTGER    TGFGIR.SUGCOMPCUSTGER%TYPE;
   DOBQTDEMAIOR         TGFGIR.VLRVENDIAUTIL_12%TYPE;
   DOBQTDEMENOR         TGFGIR.VLRVENDIAUTIL_12%TYPE;
   DOBQTDEMAIORPER      TGFGIR.VLRVENDIAUTIL_12%TYPE;
   DOBQTDEMENORPER      TGFGIR.VLRVENDIAUTIL_12%TYPE;
   DOBQTDESEGMAIOR      TGFGIR.VLRVENDIAUTIL_12%TYPE;
   DOBQTDESEGMENOR      TGFGIR.VLRVENDIAUTIL_12%TYPE;
   TOTVLRVENDA          FLOAT;
   TOTVLRVENDIAUTIL     FLOAT;
   QTDPERCOMGIRO        FLOAT;
   DOBESTMIN            TGFGIR.ESTMIN%TYPE;
   DOBESTOQ             TGFGIR.ESTOQUE%TYPE;
   DOBCUSTOGER          TGFGIR.CUSTOGER%TYPE;
   INTINDMENOR          INT;
   INTINDMAIOR          INT;
   INTPERIODOS          INT;
   INTDIVISOR           INT;
   INTCODPROD           TGFGIR.CODPROD%TYPE;
   INTCODEMP            TGFGIR.CODEMP%TYPE;
   INTCODLOCAL          TGFGIR.CODLOCAL%TYPE;
   STRCONTROLE          TGFGIR.CONTROLE%TYPE;
   DATULTVENDA          TGFGIR.ULTVENDA%TYPE;
   DATULTCOMPRA         TGFGIR.ULTCOMPRA%TYPE;
   DOBALIQICMS          FLOAT;
   DOBQTDULTCOMPRA      FLOAT;
   P_PEDULTCOMPMTGIR    CHAR (1);
   P_LEADTIME           CHAR (1);
   P_FILTRO_TIPMOV      VARCHAR2 (100);
   P_PERMCOMPPROD       TGFPRO.PERMCOMPPROD%TYPE;
   INTLEADTIME          TGFPRO.LEADTIME%TYPE;
   INTDUREST            TGFGIR.DUREST%TYPE;
   INTDURESTPOSCPA      TGFGIR.DURESTPOSCPA%TYPE;
   INTDURESTPOSCPAGIR   TGFGIR.DURESTPOSCPAGIR%TYPE;
   INTDIASSEMVENDA      TGFGIR.DIASSEMVENDA%TYPE;
   DOBGIRODIARIO        FLOAT;
   INTDURESTSEG         TGFGIR.DURESTSEG%TYPE;
   DATPONTOPED          TGFGIR.PONTOPED%TYPE;
   DATPREVENTREGA       TGFGIR.PREVENTREGA%TYPE;   
   DOBESTMAX            TGFGIR.ESTMAX%TYPE;
BEGIN
   QUEPEDINI := ' ';
   QUEPEDFIM := ' ';

   --> INICIO DA QUERY
   QUEPEDINI := ' SELECT ' || P_CODREL || ',';

   IF P_TIPOAGRUPAMENTO = 'S'
   THEN
      QUEPEDINI :=
         QUEPEDINI || 'Snk_GetProdutoAgrupadoGiro(ITE.CODPROD, ''S'') AS CODPROD ';
   ELSIF P_TIPOAGRUPAMENTO = 'G' THEN
      QUEPEDINI := QUEPEDINI || 'Snk_GetProdutoAgrupadoGiro(ITE.CODPROD, ''G'') AS CODPROD ';
   ELSE
      QUEPEDINI := QUEPEDINI || 'ITE.CODPROD ';
   END IF;

   IF P_USAREMP = 'M'
   THEN
      QUEPEDINI :=
         QUEPEDINI || ', NVL(EMP.CODEMPMATRIZ, EMP.CODEMP) AS CODEMP ';
   ELSIF P_USAREMP = 'S'
   THEN
      QUEPEDINI := QUEPEDINI || ', ITE.CODEMP ';
   ELSE
      QUEPEDINI := QUEPEDINI || ', 0 AS CODEMP ';
   END IF;

   IF P_USARLOCAL = 'S'
   THEN
      QUEPEDINI := QUEPEDINI || ', ITE.CODLOCALORIG AS CODLOCAL ';
   ELSE
      QUEPEDINI := QUEPEDINI || ', 0 AS CODLOCAL ';
   END IF;

   IF P_USARCONTROLE = 'S'
   THEN
      QUEPEDINI := QUEPEDINI || ', ITE.CONTROLE ';
   ELSE
      QUEPEDINI := QUEPEDINI || ', '' '' AS CONTROLE ';
   END IF;

   --> FIM DA QUERY
   QUEPEDFIM :=
         ' , SUM(ITE.QTDNEG - ITE.QTDENTREGUE) AS QTDE '
      || 'FROM TGFITE ITE, TGFCAB CAB, TGFTOP TPO, TSIEMP EMP '
      || 'WHERE ITE.QTDNEG > 0 '
      || 'AND ITE.ATUALESTOQUE = 0 '
      || 'AND (ITE.PENDENTE = ''S'' OR CAB.TIPMOV NOT IN (''P'',''O'',''J'')) '
      || 'AND CASE WHEN CAB.TIPMOV IN (''P'',''O'',''J'') '
      || '    THEN CASE WHEN ITE.STATUSNOTA = ''L'' THEN ''S'' ELSE ''N'' END '
      || '    ELSE CASE WHEN ITE.STATUSNOTA <> ''L'' '
      || '               AND ((TPO.ATUALEST <> ''N'' AND ITE.USOPROD NOT IN (''M'',''D'')) OR '
      || '                    (TPO.ATUALESTMP <> 0 AND ITE.USOPROD IN (''M'',''D''))) '
      || '         THEN ''S'' ELSE ''N'' END '
      || '    END = ''S'' '
      || 'AND TPO.CODTIPOPER = CAB.CODTIPOPER '
      || 'AND TPO.DHALTER = CAB.DHTIPOPER '
      || 'AND ITE.CODEMP = EMP.CODEMP '
      || 'AND ITE.NUNOTA = CAB.NUNOTA ';

   --> GROUP BY DA QUERY
   IF P_TIPOAGRUPAMENTO = 'S'
   THEN
      QUEPEDGROUP := ' GROUP BY Snk_GetProdutoAgrupadoGiro(ITE.CODPROD, ''S'') ';
   ELSIF P_TIPOAGRUPAMENTO = 'G' THEN
      QUEPEDGROUP := ' GROUP BY Snk_GetProdutoAgrupadoGiro(ITE.CODPROD, ''G'') ';
   ELSE
      QUEPEDGROUP := ' GROUP BY ITE.CODPROD ';
   END IF;

   IF P_USAREMP = 'M'
   THEN
      QUEPEDGROUP := QUEPEDGROUP || ', NVL(EMP.CODEMPMATRIZ, EMP.CODEMP) ';
   ELSIF P_USAREMP = 'S'
   THEN
      QUEPEDGROUP := QUEPEDGROUP || ', ITE.CODEMP ';
   END IF;

   IF P_USARLOCAL = 'S'
   THEN
      QUEPEDGROUP := QUEPEDGROUP || ', ITE.CODLOCALORIG ';
   END IF;

   IF P_USARCONTROLE = 'S'
   THEN
      QUEPEDGROUP := QUEPEDGROUP || ', ITE.CONTROLE ';
   END IF;

   ----------------- COMPRA ------------------------------------------
   QUEPED := QUEPEDINI || QUEPEDFIM;
   
   
   DELETE FROM TEMP_PEDCPAPEND;
   

   EXECUTE IMMEDIATE
         'INSERT INTO TEMP_PEDCPAPEND '
      || QUEPED
      || ' AND ('
      || P_FILTROPEDCPAPEND
      || ')'
      || QUEPEDGROUP;


   -------------------------------------------------------------------
   ----------------- VENDA -------------------------------------------
   QUEPED := QUEPEDINI || QUEPEDFIM;
   
   DELETE FROM TEMP_PEDVDAPEND;


   EXECUTE IMMEDIATE
         'INSERT INTO TEMP_PEDVDAPEND '
      || QUEPED
      || ' AND ('
      || P_FILTROPEDVDAPEND
      || ')'
      || QUEPEDGROUP;

   -------------------------------------------------------------------
   
   QUECOMPRA := ', MAX (ITE.DTREF) AS ULTDATA ';
                      
   QUEVENDA :=  ', MAX (ITE.DTREF) AS ULTDATA ';
   

   IF P_TIPOAGRUPAMENTO = 'S'
   THEN
      QUEPED := ', Snk_GetProdutoAgrupadoGiro(ITE.CODPROD, ''S'') AS CODPROD ';
   ELSIF P_TIPOAGRUPAMENTO = 'G' THEN
      QUEPED := ', Snk_GetProdutoAgrupadoGiro(ITE.CODPROD, ''G'') AS CODPROD ';
   ELSE
      QUEPED := ', ITE.CODPROD ';
   END IF;

   IF P_USAREMP = 'M'
   THEN
      QUEPED := QUEPED || ', NVL(EMP.CODEMPMATRIZ, EMP.CODEMP) AS CODEMP ';
   ELSIF P_USAREMP = 'S'
   THEN
      QUEPED := QUEPED || ', ITE.CODEMP ';
   ELSE
      QUEPED := QUEPED || ', 0 AS CODEMP ';
   END IF;

   IF P_USARLOCAL = 'S'
   THEN
      QUEPED := QUEPED || ', ITE.CODLOCALORIG AS CODLOCAL ';
   ELSE
      QUEPED := QUEPED || ', 0 AS CODLOCAL ';
   END IF;

   IF P_USARCONTROLE = 'S'
   THEN
      QUEPED := QUEPED || ', ITE.CONTROLE ';
   ELSE
      QUEPED := QUEPED || ', '' '' AS CONTROLE ';
   END IF;
   
   --TGFUVC - tabela com a consolidação da ultima compra e venda
   QUEFROMWHERE := 'FROM TGFUVC ITE INNER JOIN TSIEMP EMP ON EMP.CODEMP = ITE.CODEMP ';


   IF P_TIPOAGRUPAMENTO = 'S'
   THEN
      QUEPEDGROUP := 'GROUP BY Snk_GetProdutoAgrupadoGiro(ITE.CODPROD, ''S'') ';
   ELSIF P_TIPOAGRUPAMENTO = 'G' THEN
      QUEPEDGROUP := 'GROUP BY Snk_GetProdutoAgrupadoGiro(ITE.CODPROD, ''G'') ';
   ELSE
      QUEPEDGROUP := 'GROUP BY ITE.CODPROD ';
   END IF;

   IF P_USAREMP = 'M'
   THEN
      QUEPEDGROUP := QUEPEDGROUP || ', NVL(EMP.CODEMPMATRIZ, EMP.CODEMP) ';
   ELSIF P_USAREMP = 'S'
   THEN
      QUEPEDGROUP := QUEPEDGROUP || ', ITE.CODEMP ';
   END IF;

   IF P_USARLOCAL = 'S'
   THEN
      QUEPEDGROUP := QUEPEDGROUP || ', ITE.CODLOCALORIG ';
   END IF;

   IF P_USARCONTROLE = 'S'
   THEN
      QUEPEDGROUP := QUEPEDGROUP || ', ITE.CONTROLE ';
   END IF;
   
   
   DELETE FROM TEMP_ULTDT;
   
   QUEULTDT := 'INSERT INTO TEMP_ULTDT SELECT ' || P_CODREL || ', ''C'' AS TIPMOV '
   || QUEPED
   || QUECOMPRA
   || QUEFROMWHERE
   || ' AND ITE.TIPMOV = ''C'' '
   || QUEPEDGROUP
   || ' UNION SELECT ' || P_CODREL || ', ''V'' AS TIPMOV '
   || QUEPED
   || QUEVENDA
   || QUEFROMWHERE
   || ' AND ITE.TIPMOV = ''V'' '
   || QUEPEDGROUP;
   
 
  
   EXECUTE IMMEDIATE QUEULTDT;
   

   IF P_ULT = 'S'
   THEN
      QUEPED := 'INSERT INTO TEMP_QTDULTCPA '
        || 'SELECT UD.CODREL, UD.CODPROD, UD.CODEMP, UD.CODLOCAL, UD.CONTROLE '
        || ', MAX(ITE.ALIQICMS) '
        || ', SUM(ITE.QTDNEG) AS QtdUltCompra '
        || ' FROM TGFUVC ITE, TEMP_ULTDT UD, TSIEMP EMP '
        || 'WHERE ITE.QTDNEG > 0 '
        || 'AND ITE.RESERVA = ''N'' '
        || 'AND ITE.CODEMP = EMP.CODEMP '
        || 'AND UD.CODREL = ' || P_CODREL || ' '
        || 'AND UD.TIPMOV = ''C'' '                             
        || 'AND ITE.TIPMOV = ''C'' AND ITE.DTREF = UD.DAT ';

                                                 
      IF P_TIPOAGRUPAMENTO = 'S' THEN
         QUEPED := QUEPED || 'AND Snk_GetProdutoAgrupadoGiro(UD.CODPROD, ''S'') = ITE.CODPROD  ';      
      ELSIF P_TIPOAGRUPAMENTO = 'G' THEN 
         QUEPED := QUEPED || 'AND Snk_GetProdutoAgrupadoGiro(UD.CODPROD, ''G'') = ITE.CODPROD ';
      ELSE
         QUEPED := QUEPED || 'AND ITE.CODPROD = UD.CODPROD ';
      END IF;

      IF P_USAREMP = 'M'
      THEN
         QUEPED :=
            QUEPED || 'AND NVL(EMP.CODEMPMATRIZ, EMP.CODEMP) = UD.CODEMP ';
      ELSIF P_USAREMP = 'S'
      THEN
         QUEPED := QUEPED || 'AND ITE.CODEMP = UD.CODEMP ';
      END IF;

      IF P_USARLOCAL = 'S'
      THEN
         QUEPED := QUEPED || 'AND ITE.CODLOCALORIG = UD.CODLOCAL ';
      END IF;

      IF P_USARCONTROLE = 'S'
      THEN
         QUEPED := QUEPED || 'AND ITE.CONTROLE = UD.CONTROLE ';
      END IF;

      QUEPED :=
            QUEPED
         || 'GROUP BY UD.CODREL, UD.CODPROD, UD.CODEMP, UD.CODLOCAL, UD.CONTROLE ';

      
      DELETE FROM TEMP_QTDULTCPA;

      EXECUTE IMMEDIATE QUEPED;
       
   END IF;

   QUEPED := '';
   VP :=
      TVETOR (0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0);
   VD :=
      TVETOR (0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0);

   BEGIN
      SELECT NVL (LOGICO, 'N')
        INTO P_LEADTIME
        FROM TSIPAR
       WHERE CHAVE = 'SOMALEADTIME';
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         P_LEADTIME := 'N';
   END;

   OPEN CURESTMIN;

   LOOP
      FETCH CURESTMIN
      INTO VP (1),
           VP (2),
           VP (3),
           VP (4),
           VP (5),
           VP (6),
           VP (7),
           VP (8),
           VP (9),
           VP (10),
           VP (11),
           VP (12),
           VD (1),
           VD (2),
           VD (3),
           VD (4),
           VD (5),
           VD (6),
           VD (7),
           VD (8),
           VD (9),
           VD (10),
           VD (11),
           VD (12),
           TOTVLRVENDIAUTIL,
           QTDPERCOMGIRO,
           DOBESTMIN,
           DOBESTOQ,
           DOBCUSTOGER,
           INTCODPROD,
           INTCODLOCAL,
           STRCONTROLE,
           INTCODEMP,
           INTLEADTIME,
           DOBESTMAX;

      EXIT WHEN CURESTMIN%NOTFOUND;

      INTPERIODOS := P_PERIODOS;
      TOTVLRVENDA :=
           VP (1)
         + VP (2)
         + VP (3)
         + VP (4)
         + VP (5)
         + VP (6)
         + VP (7)
         + VP (8)
         + VP (9)
         + VP (10)
         + VP (11)
         + VP (12);

      BEGIN
         SELECT QTDE
           INTO DOBPEDCPAPEND
           FROM TEMP_PEDCPAPEND
          WHERE     CODPROD = INTCODPROD
                AND CODLOCAL = INTCODLOCAL
                AND CODEMP = INTCODEMP
                AND CONTROLE = STRCONTROLE;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            DOBPEDCPAPEND := 0;
      END;

      BEGIN
         SELECT QTDE
           INTO DOBPEDVDAPEND
           FROM TEMP_PEDVDAPEND
          WHERE     CODPROD = INTCODPROD
                AND CODLOCAL = INTCODLOCAL
                AND CODEMP = INTCODEMP
                AND CONTROLE = STRCONTROLE;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            DOBPEDVDAPEND := 0;
      END;

      DOBQTDEMENORPER := VP (1);
      DOBQTDESEGMENOR := 999999999999;
      DOBQTDEMAIORPER := VP (1);
      DOBQTDESEGMAIOR := -999999999999;

      DOBQTDEMENOR := VD (1);
      DOBQTDEMAIOR := VD (1);
      INTINDMENOR := 1;
      INTINDMAIOR := 1;

      FOR I IN 2 .. P_PERIODOS
      LOOP
         IF VP (I) < DOBQTDEMENORPER
         THEN
            DOBQTDESEGMENOR := DOBQTDEMENORPER;
            DOBQTDEMENORPER := VP (I);
         ELSIF VP (I) < DOBQTDESEGMENOR
         THEN
            DOBQTDESEGMENOR := VP (I);
         END IF;

         IF VP (I) > DOBQTDEMAIORPER
         THEN
            DOBQTDESEGMAIOR := DOBQTDEMAIORPER;
            DOBQTDEMAIORPER := VP (I);
         ELSIF VP (I) > DOBQTDESEGMAIOR
         THEN
            DOBQTDESEGMAIOR := VP (I);
         END IF;

         IF VD (I) < DOBQTDEMENOR
         THEN
            DOBQTDEMENOR := VD (I);
            INTINDMENOR := I;
         END IF;

         IF VD (I) > DOBQTDEMAIOR
         THEN
            DOBQTDEMAIOR := VD (I);
            INTINDMAIOR := I;
         END IF;
      END LOOP;

      IF (P_DESPPER = 2 OR P_DESPPER = 3)
      THEN                                                    --MENOR OU AMBOS
         TOTVLRVENDIAUTIL := TOTVLRVENDIAUTIL - VD (INTINDMENOR);
         TOTVLRVENDA := TOTVLRVENDA - VP (INTINDMENOR);

         IF VD (INTINDMENOR) > 0
         THEN                                 --SE FOR ZERO NÃO SOMOU NA QUERY
            QTDPERCOMGIRO := QTDPERCOMGIRO - 1;
         END IF;

         INTPERIODOS := INTPERIODOS - 1;
         DOBQTDEMENORPER := DOBQTDESEGMENOR;
      END IF;

      IF (P_DESPPER = 1 OR P_DESPPER = 3)
      THEN                                                    --MAIOR OU AMBOS
         TOTVLRVENDIAUTIL := TOTVLRVENDIAUTIL - VD (INTINDMAIOR);
         TOTVLRVENDA := TOTVLRVENDA - VP (INTINDMAIOR);

         IF VD (INTINDMAIOR) > 0
         THEN                                 --SE FOR ZERO NÃO SOMOU NA QUERY
            QTDPERCOMGIRO := QTDPERCOMGIRO - 1;
         END IF;

         INTPERIODOS := INTPERIODOS - 1;
         DOBQTDEMAIORPER := DOBQTDESEGMAIOR;
      END IF;

      DOBESTMIN := DOBESTMIN * (1 + (P_PERCACRESSUG / 100));
      DOBESTOQ := DOBESTOQ + DOBPEDCPAPEND - DOBPEDVDAPEND;
      
      strSugCompEstMinMax := SNK_getTSIPARLogico('SUGCOMPMIMAMTZ');

      IF DOBESTOQ < DOBESTMIN
      THEN         
         IF strSugCompEstMinMax = 'S' THEN
            DOBSUGCOMPRA := ROUND (DOBESTMAX - DOBESTOQ, 0);
         ELSE
            DOBSUGCOMPRA := ROUND (DOBESTMIN - DOBESTOQ, 0);
         END IF;

         IF DOBSUGCOMPRA = 0
         THEN
            DOBSUGCOMPRA := 1;
         END IF;
      ELSE
         DOBSUGCOMPRA := 0;
      END IF;

      DOBSUGCOMPCUSTGER := DOBSUGCOMPRA * DOBCUSTOGER;

      IF P_SEMGIRO = 'S'
      THEN
         INTDIVISOR := INTPERIODOS;
      ELSE
         INTDIVISOR := QTDPERCOMGIRO;
      END IF;

      IF P_LEADTIME = 'S'
      THEN
         INTLEADTIME := NVL (INTLEADTIME, 0) + P_DIASEST;
      ELSE
         IF NVL (INTLEADTIME, 0) = 0
         THEN
            INTLEADTIME := P_DIASEST;
         END IF;
      END IF;

      IF (INTDIVISOR <> 0) AND (TOTVLRVENDIAUTIL <> 0)
      THEN
         DOBGIRODIARIO := ROUND (TOTVLRVENDIAUTIL / INTDIVISOR, 3);

         --RAISE_APPLICATION_ERROR(-20101,  DOBGIRODIARIO);
         IF DOBGIRODIARIO > 0
         THEN
            INTDUREST := DOBESTOQ / DOBGIRODIARIO;
         ELSE
            INTDUREST := 0;
         END IF;

         IF DOBGIRODIARIO > 0
         THEN
            INTDURESTPOSCPA :=
               ROUND ( (DOBESTOQ + DOBSUGCOMPRA) / DOBGIRODIARIO, 0);
         ELSE
            INTDURESTPOSCPA := 0;
         END IF;


         DOBESTMINGIR := ROUND (DOBGIRODIARIO * INTLEADTIME, 0);
      ELSE
         DOBGIRODIARIO := 0;
         INTDUREST := 0;
         INTDURESTPOSCPA := 0;
         INTDURESTPOSCPAGIR := 0;
         DOBESTMINGIR := 0;
      END IF;

      BEGIN
         SELECT MAX (
                   CASE
                      WHEN ULTDT.TIPMOV = 'V' THEN ULTDT.DAT
                      ELSE CAST (NULL AS DATE)
                   END)
                   AS DATV,
                MAX (
                   CASE
                      WHEN ULTDT.TIPMOV = 'C' THEN ULTDT.DAT
                      ELSE CAST (NULL AS DATE)
                   END)
                   AS DATC
           INTO DATULTVENDA, DATULTCOMPRA
           FROM (SELECT DAT, TIPMOV
                   FROM TEMP_ULTDT ITE
                  WHERE     ITE.CODPROD = INTCODPROD
                        AND ITE.CODLOCAL = INTCODLOCAL
                        AND ITE.CONTROLE = STRCONTROLE
                        AND ITE.CODEMP = INTCODEMP
                        AND ITE.TIPMOV IN ('V', 'C')) ULTDT;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            DATULTVENDA := NULL;
            DATULTCOMPRA := NULL;
      END;

      IF DATULTVENDA IS NULL
      THEN
         IF DATULTCOMPRA IS NULL
         THEN
            SELECT (TRUNC (SYSDATE) - TRUNC (DTALTER))
              INTO INTDIASSEMVENDA
              FROM TGFPRO
             WHERE CODPROD = INTCODPROD;
         ELSE
            INTDIASSEMVENDA := TRUNC (SYSDATE) - TRUNC (DATULTCOMPRA);
         END IF;
      ELSE
         INTDIASSEMVENDA := TRUNC (SYSDATE) - TRUNC (DATULTVENDA);
      END IF;


      /*RETIRADO CÁLCULO DO DOBESTMINGIR PELO P_PERCACRESSUG CONFORME OS 813819*/
      DOBESTMINGIRCOMP := ABS (DOBESTMINGIR * (1 + (P_PERCACRESSUG / 100)));

      IF DOBESTOQ < DOBESTMINGIRCOMP
      THEN
         DOBSUGCOMPRAGIR := ROUND (DOBESTMINGIRCOMP - DOBESTOQ, 0);

         IF DOBSUGCOMPRAGIR = 0
         THEN
            DOBSUGCOMPRAGIR := 1;
         END IF;
      ELSE
         DOBSUGCOMPRAGIR := 0;
      END IF;

      IF    (DOBSUGCOMPRA <> 0)
         OR (DOBSUGCOMPCUSTGER <> 0)
         OR (DOBSUGCOMPRAGIR <> 0)
      THEN
         SELECT PERMCOMPPROD
           INTO P_PERMCOMPPROD
           FROM TGFPRO
          WHERE CODPROD = INTCODPROD;

         IF P_PERMCOMPPROD = 'N'
         THEN
            DOBSUGCOMPRA := 0;
            DOBSUGCOMPCUSTGER := 0;
            DOBSUGCOMPRAGIR := 0;
         END IF;
      END IF;

      IF DOBGIRODIARIO > 0
      THEN
         INTDURESTPOSCPAGIR :=
            ROUND ( (DOBESTOQ + DOBSUGCOMPRAGIR) / DOBGIRODIARIO, 0);
      ELSE
         INTDURESTPOSCPAGIR := 0;
      END IF;

      INTDURESTSEG := 0;


      IF (DOBESTMIN <> 0 AND DOBGIRODIARIO <> 0)
      THEN
         INTDURESTSEG := ROUND (DOBESTMIN / DOBGIRODIARIO, 0);
      END IF;

      BEGIN 
        DATPONTOPED := TRUNC(SYSDATE) - 1 + (INTDUREST - INTDURESTSEG - INTLEADTIME); 
        DATPREVENTREGA := TRUNC (SYSDATE) - 1 + (INTDUREST - INTDURESTSEG); 
        
        EXCEPTION WHEN OTHERS THEN 
        IF (INTDUREST < 0) THEN 
        DATPONTOPED := TO_DATE('01/01/1970','DD/MM/YYYY'); 
        DATPREVENTREGA := TO_DATE('01/01/1970','DD/MM/YYYY'); 
        ELSE 
        DATPONTOPED := TO_DATE('31/12/9999','DD/MM/YYYY'); 
        DATPREVENTREGA := TO_DATE('31/12/9999','DD/MM/YYYY'); 
        END IF; 
        END;

      UPDATE TGFGIR
         SET ESTMINGIR = NVL (DOBESTMINGIR, 0),
             PEDCPAPEND = NVL (DOBPEDCPAPEND, 0),
             PEDVDAPEND = NVL (DOBPEDVDAPEND, 0),
             SUGCOMPRA = NVL (DOBSUGCOMPRA, 0),
             SUGCOMPCUSTGER = NVL (DOBSUGCOMPCUSTGER, 0),
             SUGCOMPRAGIR = NVL (DOBSUGCOMPRAGIR, 0),
             DUREST = INTDUREST,
             DURESTPOSCPA = INTDURESTPOSCPA,
             DURESTPOSCPAGIR = INTDURESTPOSCPAGIR,
             DIASSEMVENDA = INTDIASSEMVENDA,
             QTDTOTAL = TOTVLRVENDA,
             QTDMEDIA =
                CASE
                   WHEN INTDIVISOR = 0 THEN 0
                   ELSE TOTVLRVENDA / INTDIVISOR
                END,
             QTDMINIMA = DOBQTDEMENORPER,
             QTDMAXIMA = DOBQTDEMAIORPER,
             GIRODIARIO = DOBGIRODIARIO,
             DIASUTEIS =
                CASE
                   WHEN DOBGIRODIARIO = 0 THEN 0
                   ELSE ROUND (TOTVLRVENDA / DOBGIRODIARIO, 0)
                END,
             DURESTSEG = INTDURESTSEG,
             PONTOPED = DATPONTOPED,
             PREVENTREGA = DATPREVENTREGA
       WHERE CURRENT OF CURESTMIN;

      IF P_ULT = 'S'
      THEN
         IF DATULTCOMPRA IS NOT NULL
         THEN
            BEGIN
               SELECT ALIQICMS, QTDE
                 INTO DOBALIQICMS, DOBQTDULTCOMPRA
                 FROM TEMP_QTDULTCPA ITE
                WHERE     ITE.CODPROD = INTCODPROD
                      AND ITE.CODLOCAL = INTCODLOCAL
                      AND ITE.CONTROLE = STRCONTROLE
                      AND ITE.CODEMP = INTCODEMP;
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  DOBALIQICMS := 0;
                  DOBQTDULTCOMPRA := 0;
            END;
         ELSE
            DOBALIQICMS := 0;
            DOBQTDULTCOMPRA := 0;
         END IF;

         UPDATE TGFGIR
            SET QTDULTCOMPRA = NVL (DOBQTDULTCOMPRA, 0),
                ALIQCRED = NVL (DOBALIQICMS, 0),
                ULTCOMPRA = DATULTCOMPRA,
                ULTVENDA = DATULTVENDA,
                VLRCREDICMS = ROUND (CUSTOREP * NVL (DOBALIQICMS, 0) / 100, 2)
          WHERE CURRENT OF CURESTMIN;
      END IF;
   END LOOP;                                                      -- CURESTMIN

   CLOSE CURESTMIN;
END;
/
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 03/05/2018 17:49:37
Num.Script: 53824-0-1000
Nro. O.S. : 1168521
Nome      : INSERE - THOOBJ - 5382300
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_MATGIRCALCSUG
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210009
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_MATGIRCALCSUG' NOMEOBJ, 53823 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, 'ff35a8f7a260f8ac1e3212221b07966d' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_MATGIRCALCSUG' and THO.hashcode = 'ff35a8f7a260f8ac1e3212221b07966d')
/
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 20/04/2018 16:56:14
Num.Script: 53829-0-0
Nro. O.S. : 1175490
Nome      : Alterar - TRG_UPT_TGFFIN
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - TRG_UPT_TGFFIN
NomeObjeto: TRG_UPT_TGFFIN
TipoObjeto: TRIGGER
NomeTabela: TGFFIN
Executar  : SE_EXISTIR
Ocorrencia: 4210009
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_UPT_TGFFIN
BEFORE UPDATE ON TGFFIN 
FOR EACH ROW
DECLARE
  P_COUNT            INT := 0;
  P_VLRBAIXAZERO     VARCHAR2 (1);
  P_VLRJURO          FLOAT;
  P_VLRMULTA         FLOAT;
  P_VLRISS           FLOAT;
  P_VLRIRF           FLOAT;
  P_VLRINSS          FLOAT;
  P_OUTROSIMPOSTOS   FLOAT;
  P_ORIGEM           VARCHAR2 (1);
  P_VLRMINAP         TGFTOP.VLRMINAP%TYPE;
  ERRMSG             VARCHAR2(400);
  ERROR              EXCEPTION;
  P_VALIDAR          BOOLEAN;
  P_SUBSTHISTFIN     CHAR(1);
  P_ATIVO            CHAR(1);
  P_TPAGNFCE         VARCHAR(2);
  P_APELIDO          VARCHAR2(15);       
  P_GERANDO_REMESSA  BOOLEAN;    
  P_VLRBASE          FLOAT;
BEGIN

  IF STP_GET_ATUALIZANDO THEN
    RETURN;
  END IF;

  P_GERANDO_REMESSA := VARIAVEIS_PKG.V_GERANDO_REMESSA;
  
   /* 
   sincronização de dados
   */
   P_VALIDAR := Fpodevalidar('TGFFIN');

  IF :NEW.ORIGEM <> 'E' AND NVL(:NEW.NUNOTA, 0) <> 0 THEN
    ERRMSG := 'Só é permitido preencher o NUNOTA para financeiros com origem igual a ''E''. ';
    RAISE ERROR;
  END IF;

   IF :NEW.DHBAIXA IS NOT NULL THEN
     :NEW.DHBAIXA := TRUNC(:NEW.DHBAIXA);
   END IF;
   IF  NVL(:NEW.NURENEG, 0) <> NVL (:OLD.NURENEG, 0)  AND :NEW.NURENEG IS NULL AND :NEW.RECDESP = 0 THEN
     RAISE_APPLICATION_ERROR(-20101, 'Título originado a partir de renegociação não pode ter o Nro da Renegociação alterado para NULL. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.');
   END IF;
   
   SELECT COUNT(1) INTO P_COUNT
   FROM TSIPAR
   WHERE (CHAVE = 'SBPARCEIRO' OR CHAVE ='MGE-SUBST');
   
   IF (P_COUNT > 0) OR NOT Tgffin_Pkg.V_VALIDA_FINANCEIRO THEN
      RETURN;
   END IF; 
    
   IF ((:NEW.PROVISAO <> :OLD.PROVISAO)
      OR (:NEW.CODEMP <> :OLD.CODEMP)
      OR (:NEW.NUMNOTA <> :OLD.NUMNOTA)
      OR (:NEW.DTNEG <> :OLD.DTNEG)
      OR (NVL (:NEW.CODTIPOPER, 0) <> NVL (:OLD.CODTIPOPER, 0))
      OR (:NEW.CODPARC <> :OLD.CODPARC)
      OR (:NEW.CODNAT <> :OLD.CODNAT)
      OR (NVL (:NEW.CODCENCUS, 0) <> NVL (:OLD.CODCENCUS, 0))
      OR (NVL (:NEW.HISTORICO, ' ') <> NVL (:OLD.HISTORICO, ' '))
      OR (:NEW.ISSRETIDO <> :OLD.ISSRETIDO)
      OR (:NEW.RECDESP <> :OLD.RECDESP AND NVL(:NEW.NURENEG, 0) = NVL (:OLD.NURENEG, 0))
      OR (NVL (:NEW.VLRINSS, 0) <> NVL (:OLD.VLRINSS, 0))
      OR (NVL (:NEW.VLRIRF, 0) <> NVL (:OLD.VLRIRF, 0))
      OR (NVL (:NEW.VLRISS, 0) <> NVL (:OLD.VLRISS, 0))
      OR (NVL (:NEW.VLRVENDOR, 0) <> NVL (:OLD.VLRVENDOR, 0)) 
      OR (:NEW.VLRDESDOB <> :OLD.VLRDESDOB AND (:NEW.NUFIN <> Tgffin_Pkg.V_NUFINRECOMP))
     OR (NVL(:NEW.DHBAIXA, :NEW.DTNEG - 100) <> NVL(:OLD.DHBAIXA, :NEW.DTNEG - 100))
     OR (:NEW.VLRBAIXA <> :OLD.VLRBAIXA AND :NEW.DHBAIXA IS NOT NULL)) THEN
      BEGIN 
      SELECT NVL(LOGICO, 'N') INTO P_SUBSTHISTFIN FROM TSIPAR WHERE CHAVE = 'SUBSTHISTFIN';
    EXCEPTION WHEN NO_DATA_FOUND THEN 
    P_SUBSTHISTFIN := 'N';
    END;
    
      SELECT MIN (C.ORIGEM)
      INTO P_ORIGEM
      FROM TCBINT C
      WHERE :NEW.NUFIN = C.NUNICO
      AND C.ORIGEM IN ('F', 'B')    
      AND ((:NEW.PROVISAO <> :OLD.PROVISAO)
            OR (:NEW.CODEMP <> :OLD.CODEMP)
            OR (:NEW.NUMNOTA <> :OLD.NUMNOTA)
            OR (:NEW.DTNEG <> :OLD.DTNEG)
            OR (NVL (:NEW.CODTIPOPER, 0) <> NVL (:OLD.CODTIPOPER, 0))
            OR (:NEW.CODPARC <> :OLD.CODPARC)
            OR (:NEW.CODNAT <> :OLD.CODNAT)
            OR ( (NVL(:NEW.CODCENCUS, 0) <> NVL(:OLD.CODCENCUS, 0)) AND
           EXISTS (SELECT 1 
                 FROM TCBLAN L 
             WHERE L.CODEMP = C.CODEMP 
               AND L.NUMLOTE = C.NUMLOTE 
               AND L.NUMLANC = C.NUMLANC 
               AND L.TIPLANC = C.TIPLANC 
               AND L.REFERENCIA = C.REFERENCIA 
               AND L.CODCENCUS <> 0)
         )
            OR (NVL (:NEW.HISTORICO, ' ') <> NVL (:OLD.HISTORICO, ' ') AND P_SUBSTHISTFIN = 'N')
            OR (:NEW.ISSRETIDO <> :OLD.ISSRETIDO)
            OR (:NEW.RECDESP <> :OLD.RECDESP AND NVL (:NEW.NURENEG, 0) = NVL (:OLD.NURENEG, 0))
            OR ((NVL (:NEW.VLRINSS, 0) <> NVL (:OLD.VLRINSS, 0)) AND (C.ORIGEM = 'B' OR :NEW.DHBAIXA IS NULL))
            OR ((NVL (:NEW.VLRIRF, 0) <> NVL (:OLD.VLRIRF, 0)) AND (C.ORIGEM = 'B' OR :NEW.DHBAIXA IS NULL))
            OR ((NVL (:NEW.VLRISS, 0) <> NVL (:OLD.VLRISS, 0)) AND (C.ORIGEM = 'B' OR :NEW.DHBAIXA IS NULL))
            OR ((NVL (:NEW.VLRVENDOR, 0) <> NVL (:OLD.VLRVENDOR, 0)) AND (C.ORIGEM = 'B' OR :NEW.DHBAIXA IS NULL))
            OR ((:NEW.VLRDESDOB <> :OLD.VLRDESDOB) AND (C.ORIGEM = 'B' OR :NEW.DHBAIXA IS NULL)) 
            OR (C.ORIGEM = 'B' AND NVL(:NEW.DHBAIXA,:NEW.DTNEG-100) <> NVL(:OLD.DHBAIXA,:NEW.DTNEG-100)) 
            OR (C.ORIGEM = 'B' AND :NEW.VLRBAIXA <> :OLD.VLRBAIXA AND :NEW.DHBAIXA IS NOT NULL)
        );
            
      IF (P_ORIGEM = 'F') THEN
 
         SELECT COUNT(1) INTO P_COUNT
         FROM TGFFRE
         WHERE TIPACERTO IN ('C','F')  
         AND (NUFIN = :NEW.NUFIN OR NUFINORIG = :NEW.NUFIN);
         IF P_COUNT = 0 THEN
            ERRMSG := 'Financeiro (Provisão) já foi contabilizado, não pode ser alterado. VlrDesdob: ' || :NEW.VLRDESDOB ||' Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
            RAISE ERROR;
         END IF;
      ELSIF (P_ORIGEM = 'B') THEN
         ERRMSG := 'Baixa do financeiro já foi contabilizada, não pode ser alterada. (0). Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
         RAISE ERROR;
      END IF;
   END IF;
-- ********
 /*
    O titulo original com essas caracteristicas não pode mais sofrer alterações
    No financeiro ele não aparece, mais nas centrais pode acontecer no caso do frete.
  */
  IF (NOT P_GERANDO_REMESSA) AND ((:NEW.NURENEG IS NOT NULL) AND (:NEW.NURENEG<>0)) AND (:NEW.RECDESP=0 AND :OLD.RECDESP=0) THEN
    ERRMSG := 'Título foi renegociado, não deve ser alterado. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
    RAISE ERROR;
  END IF;

  IF UPDATING ('NUMCONTRATO') THEN
    SELECT COUNT (1)
      INTO P_COUNT
      FROM TCSCON
     WHERE NUMCONTRATO = :NEW.NUMCONTRATO
       AND ATIVO = 'S';

    IF (P_COUNT = 0) THEN
    ERRMSG := 'Contrato: '|| :NEW.NUMCONTRATO ||' não esta ativo. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
    RAISE ERROR;
    END IF;
  END IF;

  IF UPDATING ('CODPROJ')
     AND :NEW.CODPROJ IS NOT NULL THEN
    SELECT COUNT (1)
      INTO P_COUNT
      FROM TCSPRJ
     WHERE CODPROJ = :NEW.CODPROJ
       AND ATIVO = 'S'
       AND ANALITICO = 'S';

    IF (P_COUNT = 0) THEN
            ERRMSG := 'Projeto '||:NEW.CODPROJ||' não está ativo ou não é analítico. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
            RAISE ERROR;
    END IF;
  END IF;

  IF UPDATING ('CODCTABCOINT')
     AND :NEW.CODCTABCOINT IS NOT NULL THEN
    SELECT COUNT (1)
      INTO P_COUNT
      FROM TSICTA
     WHERE CODCTABCOINT = :NEW.CODCTABCOINT
       AND ATIVA = 'S';

    IF (P_COUNT = 0) THEN
    ERRMSG := 'Conta bancária '||:NEW.CODCTABCOINT||' não está ativa. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
    RAISE ERROR;
    END IF;
  END IF;

  IF UPDATING ('CODEMP') THEN
    SELECT COUNT (1)
      INTO P_COUNT
      FROM TGFEMP
     WHERE CODEMP = :NEW.CODEMP
       AND ATIVO = 'S';

    IF (P_COUNT = 0) THEN
    ERRMSG := 'Empresa '||:NEW.CODEMP||' não está ativa. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
    RAISE ERROR;
    END IF;
  END IF;

  IF UPDATING ('CODEMPBAIXA') AND (:NEW.CODEMP <> :NEW.CODEMPBAIXA) THEN
    SELECT COUNT (1)
      INTO P_COUNT
      FROM TGFEMP
     WHERE CODEMP = :NEW.CODEMPBAIXA
       AND ATIVO = 'S';

    IF (P_COUNT = 0) THEN
    ERRMSG := 'Empresa '||:NEW.CODEMPBAIXA||' da baixa não está ativa. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
    RAISE ERROR;
    END IF;
  END IF;

  IF UPDATING ('CODVEICULO') AND :NEW.CODVEICULO IS NOT NULL AND (:NEW.DHBAIXA IS NULL OR :NEW.CODVEICULO <> :OLD.CODVEICULO) THEN
    Stp_Valida_Veiculo (:NEW.CODVEICULO);
  END IF;

  IF UPDATING ('CODPARC') THEN
    SELECT COUNT (1)
      INTO P_COUNT
      FROM TGFPAR
     WHERE CODPARC = :NEW.CODPARC
       AND ATIVO = 'S';

    IF (P_COUNT = 0) THEN
    ERRMSG := 'Parceiro: '|| :NEW.CODPARC ||' não esta ativo. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
    RAISE ERROR;
    END IF;
  END IF;

  IF (UPDATING ('CODTIPOPER') OR UPDATING ('DHTIPOPER')) THEN
    SELECT COUNT (1)
      INTO P_COUNT
      FROM TGFTOP
     WHERE CODTIPOPER = :NEW.CODTIPOPER
       AND DHALTER = :NEW.DHTIPOPER
       AND ATIVO = 'S';

    IF (P_COUNT = 0) THEN
    ERRMSG := 'Tipo de operação não está ativo. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
    RAISE ERROR;
    END IF;
  END IF;

  IF (UPDATING ('CODTIPOPERBAIXA') OR UPDATING ('DHTIPOPERBAIXA')) THEN
    SELECT COUNT (1)
      INTO P_COUNT
      FROM TGFTOP T
     WHERE CODTIPOPER = :NEW.CODTIPOPERBAIXA
       AND DHALTER = :NEW.DHTIPOPERBAIXA
       AND ATIVO = 'S';

    IF (P_COUNT = 0) THEN
    ERRMSG := 'Tipo de operação de baixa não está ativo. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
    RAISE ERROR;
    END IF;
  END IF;

  IF UPDATING ('CODNAT') THEN
    SELECT COUNT (1)
      INTO P_COUNT
      FROM TGFNAT
     WHERE CODNAT = :NEW.CODNAT
       AND ATIVA = 'S'
       AND ANALITICA = 'S';

    IF (P_COUNT = 0) THEN
            ERRMSG := 'Natureza '||:NEW.CODNAT||' não está ativa ou não é analítico. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
            RAISE ERROR;
    END IF;
  END IF;

  IF UPDATING ('CODCENCUS') THEN
    SELECT COUNT (1)
      INTO P_COUNT
      FROM TSICUS
     WHERE CODCENCUS = :NEW.CODCENCUS
       AND ATIVO = 'S'
       AND ANALITICO = 'S';

    IF (P_COUNT = 0) THEN
            ERRMSG := 'Centro de Resultado '||:NEW.CODCENCUS||' não está ativa ou não é analítico. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
            RAISE ERROR;
    END IF;
  END IF;

  IF UPDATING ('CODVEND') THEN
    SELECT COUNT (1)
      INTO P_COUNT
      FROM TGFVEN
     WHERE CODVEND = :NEW.CODVEND
       AND ATIVO = 'S';

    IF (P_COUNT = 0) THEN
       SELECT APELIDO INTO P_APELIDO FROM TGFVEN WHERE CODVEND = :NEW.CODVEND;
       ERRMSG := Erros_Pkg.ERRO_VENDEDOR_NAOATIVO || 'Vendedor: '|| :NEW.CODVEND || ' - ' || P_APELIDO || ', Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
       RAISE ERROR;
    END IF;
  END IF;

  IF UPDATING ('CODTIPTIT') THEN
     SELECT ATIVO, TPAGNFCE
     INTO P_ATIVO, P_TPAGNFCE
     FROM TGFTIT
     WHERE CODTIPTIT = :NEW.CODTIPTIT;
     IF  (P_ATIVO <> 'S') THEN
       ERRMSG := 'Tipo de Título não está ativo. ';
       RAISE ERROR;
     END IF;
     :NEW.TPAGNFCE := P_TPAGNFCE;
  END IF;  
  
  IF (:NEW.NUBCO IS NOT NULL) AND (:NEW.PROVISAO = 'S') THEN
      ERRMSG := 'Provisão não pode atualizar Movimentação Bancária. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
      RAISE ERROR;
  END IF;

  IF (:NEW.NUBCO IS NOT NULL) AND UPDATING ('NUBCO') THEN
     SELECT COUNT (1)

       INTO P_COUNT
       FROM TGFMBC
      WHERE NUBCO = :NEW.NUBCO;

    IF (P_COUNT = 0) THEN --
      ERRMSG := 'Movimentação  Bancária não encontrada. NUBCO: ' || :NEW.NUBCO ||' Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
      RAISE ERROR;
    END IF;
  END IF;

  IF UPDATING('VLRBAIXA') OR UPDATING('CODTIPOPERBAIXA') OR UPDATING('DHBAIXA') OR UPDATING('PROVISAO') THEN
    IF (:NEW.PROVISAO = 'N') AND (:NEW.CODTIPOPERBAIXA = 0) AND ((:NEW.VLRBAIXA <> 0) OR (:NEW.DHBAIXA IS NOT NULL)) THEN
      ERRMSG := 'A TOP da Baixa deve ser informada. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
      RAISE ERROR;
    END IF;

    IF (:NEW.CODTIPOPERBAIXA <> 0) AND (:NEW.DHBAIXA IS NULL) THEN
      ERRMSG := 'A TOP da Baixa não pode ser informada. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
      RAISE ERROR;
    END IF;

    IF (:NEW.DHBAIXA IS NOT NULL) AND (:NEW.VLRBAIXA = 0) THEN
      SELECT COUNT (1), MIN (LOGICO)
        INTO P_COUNT, P_VLRBAIXAZERO
        FROM TSIPAR
       WHERE CHAVE = 'VLRBAIXAZERO';

      IF (P_COUNT = 0) OR (P_VLRBAIXAZERO <> 'S') THEN
        ERRMSG := 'O Valor da Baixa deve ser informado. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
        RAISE ERROR;
      END IF;
    END IF;
  END IF;

  /* TESTA SE O ANO DIGITADO é VáLIDO */
  IF UPDATING ('DTVENC')
     OR UPDATING ('DHBAIXA') THEN
    SELECT NVL (INTEIRO, 0)
      INTO P_COUNT
      FROM TSIPAR
     WHERE CHAVE = 'LIMSUPANO';

    IF (P_COUNT <> 0)
       AND (((:NEW.DTVENC IS NOT NULL)
             AND (TO_NUMBER (TO_CHAR (:NEW.DTVENC, 'YYYY')) > TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY')) + P_COUNT))
            OR (TO_NUMBER (TO_CHAR (:NEW.DTNEG, 'YYYY')) > (TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY')) + P_COUNT))
            OR (TO_NUMBER (TO_CHAR (:NEW.DHMOV, 'YYYY')) > (TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY')) + P_COUNT))
            OR ((:NEW.DHBAIXA IS NOT NULL)
                AND (TO_NUMBER (TO_CHAR (:NEW.DHBAIXA, 'YYYY')) > (TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY')) + P_COUNT)))) THEN
      ERRMSG := 'Ano superior ao limite permitido, veja o parâmetro de Limite Superior para Ano. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
      RAISE ERROR;
    END IF;

    SELECT NVL (INTEIRO, 0)
      INTO P_COUNT
      FROM TSIPAR
     WHERE CHAVE = 'LIMINFANO';

    IF (P_COUNT <> 0)
       AND (((:NEW.DTVENC IS NOT NULL)
             AND (TO_NUMBER (TO_CHAR (:NEW.DTVENC, 'YYYY')) < (TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY')) - P_COUNT)))
            OR (TO_NUMBER (TO_CHAR (:NEW.DTNEG, 'YYYY')) < (TO_NUMBER (     TO_CHAR (SYSDATE, 'YYYY')) - P_COUNT))
            OR (TO_NUMBER (TO_CHAR (:NEW.DHMOV, 'YYYY')) < (TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY')) - P_COUNT))
            OR ((:NEW.DHBAIXA IS NOT NULL) AND 
      (TO_NUMBER (TO_CHAR (:NEW.DHBAIXA, 'YYYYYYY'))) < (TO_NUMBER (TO_CHAR (SYSDATE, 'YYYYY')) - P_COUNT))) THEN
      ERRMSG := 'Ano inferior ao limite permitido, veja o parâmetro de Limite Inferior para Ano. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
      RAISE ERROR;
    END IF;
  END IF;

  /* O NUNOTA DEVE EXISTIR NA CAB, NãO ¿ FEITO VIA CHAVE ESTRANGEIRA PORQUE A DELEçãO ¿ CASCADE */
  IF :NEW.NUNOTA IS NOT NULL AND (NVL(:OLD.NUNOTA,0) <> NVL(:NEW.NUNOTA,0)) THEN
    SELECT COUNT(1) INTO P_COUNT
    FROM TGFCAB
    WHERE NUNOTA = :NEW.NUNOTA;
    IF (P_COUNT = 0 ) THEN
      ERRMSG := 'Número da Nota não cadastrado na tabela de notas. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
      RAISE ERROR;
    END IF;
  END IF;

 /* NESTE LUGAR NO SQL TEM UMA VALIDAçãO PARA VER SE PARA AQULE PARCEIRO OS TITULOS NãO
    BAIXADOS COM MARCAçãO DE CHEQUE IGUAL A B SOMAM MAIS QUE 0. NO ORACLE ISTO ESTá IMPLEMENTADO NA
    TRIGGER DE AFTER_UPD */
  IF ((:NEW.TIPMARCCHEQ <> :OLD.TIPMARCCHEQ) OR (:OLD.CODPARC <> :NEW.CODPARC)) AND
     (((:OLD.TIPMARCCHEQ = 'B') AND (:OLD.RECDESP = -1)) OR
      ((:NEW.TIPMARCCHEQ = 'B') AND (:NEW.RECDESP = 1))) THEN
    INSERT INTO TGFFIN_UPD (CODPARC, TIPMARCCHEQ, TIPMARCCHEQ_D, RECDESP_D, RECDESP)
              VALUES (:NEW.CODPARC, :OLD.TIPMARCCHEQ, :NEW.TIPMARCCHEQ, :OLD.RECDESP, :NEW.RECDESP);
  END IF;

  IF (:NEW.RECDESP <> :OLD.RECDESP) AND (:NEW.DHBAIXA IS NOT NULL) THEN
    ERRMSG := 'Esta nota já foi baixada não pode ser alterada de receita para despesa ou vice-versa. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
    RAISE ERROR;
  END IF;

  IF (:NEW.TIPJURO = '1') THEN
    P_VLRJURO := NVL (:NEW.VLRJURO, 0);
  ELSE
    P_VLRJURO := 0;
  END IF;

  IF (:NEW.TIPMULTA = '1') THEN
    P_VLRMULTA := NVL (:NEW.VLRMULTA, 0);
  ELSE
    P_VLRMULTA := 0;
  END IF;

  IF (:NEW.ISSRETIDO = 'S') THEN
    P_VLRISS := NVL (:NEW.VLRISS, 0);
  ELSE
    P_VLRISS := 0;
  END IF;

  IF (:NEW.IRFRETIDO = 'S') THEN
    P_VLRIRF := NVL (:NEW.VLRIRF, 0);
  ELSE
    P_VLRIRF := 0;
  END IF;

  IF (:NEW.INSSRETIDO = 'S') THEN
    P_VLRINSS := NVL (:NEW.VLRINSS, 0);
  ELSE
    P_VLRINSS := 0;
  END IF;

  BEGIN
    SELECT NVL (SUM (VALOR * TIPIMP), 0)
      INTO P_OUTROSIMPOSTOS
      FROM TGFIMF
     WHERE NUFIN = :NEW.NUFIN;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      P_OUTROSIMPOSTOS := 0;
  END;

    IF (UPDATING ('DHBAIXA')
      OR UPDATING ('VLRBAIXA'))
      AND (:NEW.DHBAIXA IS NOT NULL)
      AND (:NEW.PROVISAO = 'N') THEN
    
    P_VLRBASE := 
    :NEW.VLRDESDOB
    + :NEW.VLRVENDOR
    + :NEW.DESPCART
    + NVL (:NEW.VLRVARCAMBIAL, 0)
    - :NEW.VLRDESC
    - P_VLRIRF
    - P_VLRINSS
    - :NEW.CARTAODESC
    + P_VLRJURO
    + P_VLRMULTA
    - P_VLRISS
    + P_OUTROSIMPOSTOS
    + NVL(:NEW.VLRMULTANEGOC,0) 
    + NVL(:NEW.VLRJURONEGOC,0) 
    - NVL(:NEW.VLRMULTALIB,0) 
    - NVL(:NEW.VLRJUROLIB,0);
    IF P_VLRBASE <> :NEW.VLRBAIXA THEN
    ERRMSG :=
    'Valor da baixa '||TO_CHAR(:NEW.VLRBAIXA, 'FM999,999,999,999,999,990.00')||
    ' diferente do valor calculado '||TO_CHAR(P_VLRBASE,'FM999,999,999,999,999,990.00')||
    ' (VLRDESDOB'||
    CASE WHEN :NEW.VLRVENDOR <> 0 THEN ' + VLRVENDOR' END ||
    CASE WHEN P_VLRJURO <> 0 THEN ' + VLRJURO' END ||
    CASE WHEN P_VLRMULTA <> 0 THEN ' + VLRMULTA' END ||
    CASE WHEN :NEW.DESPCART <> 0 THEN ' + DESPCART' END ||
    CASE WHEN NVL (:NEW.VLRVARCAMBIAL, 0) <> 0 THEN ' + VLRVARCAMBIAL' END ||
    CASE WHEN :NEW.VLRDESC <> 0 THEN ' - VLRDESC' END ||
    CASE WHEN P_VLRISS <> 0 THEN ' - VLRISS' END ||
    CASE WHEN P_VLRIRF <> 0 THEN ' - VLRIRRF' END ||
    CASE WHEN P_VLRINSS <> 0 THEN ' - VLRINSS' END ||
    CASE WHEN :NEW.CARTAODESC <> 0 THEN ' - CARTAODESC' END ||
    CASE WHEN NVL(:NEW.VLRMULTANEGOC,0) <> 0 THEN ' + VLRMULTANEGOC' END ||
    CASE WHEN NVL(:NEW.VLRJURONEGOC,0) <> 0 THEN ' + VLRJURONEGOC' END ||
    CASE WHEN NVL(:NEW.VLRMULTALIB,0) <> 0 THEN ' - VLRMULTALIB' END ||
    CASE WHEN NVL(:NEW.VLRJUROLIB,0) <> 0 THEN ' - VLRJUROLIB' END ||
    CASE WHEN P_OUTROSIMPOSTOS <> 0 THEN ' + OUTROS IMPOSTOS' END ||
    '). Financeiro de Nro Único: ' || :NEW.NUFIN;
    RAISE ERROR;
    END IF;
    
    END IF;

  IF :NEW.DHBAIXA IS NULL AND :OLD.DHBAIXA IS NOT NULL THEN
     DELETE FROM TGFREC WHERE NUFIN = :NEW.NUFIN;
  END IF;

  /*NAO PERMITIR BAIXA DE DESPESA DE VALOR SUPERIOR AO DEFINIDO NO PARAMETRO SE NAO EXISTIR LIBERACAO DO EVENTO 24 NA TGFLIB.*/
  IF (:NEW.RECDESP = -1 AND :NEW.PROVISAO = 'N' AND :NEW.DHBAIXA IS NOT NULL) THEN
    SELECT COUNT (1)
      INTO P_COUNT
      FROM TGFTOP
     WHERE CODTIPOPER = :NEW.CODTIPOPERBAIXA
       AND DHALTER = :NEW.DHTIPOPERBAIXA
       AND VLRMINAP IS NOT NULL
       AND VLRMINAP > 0
       AND VLRMINAP < :NEW.VLRBAIXA;

    IF P_COUNT <> 0 THEN
      SELECT COUNT (1)
        INTO P_COUNT
        FROM TSILIB
       WHERE TABELA = 'TGFFIN'
         AND VLRLIBERADO >= :NEW.VLRBAIXA
         AND NUCHAVE = :NEW.NUFIN
         AND EVENTO = 24;

      IF P_COUNT = 0 THEN
        ERRMSG := 'Não pode ser baixada por não existir uma liberação ou o valor do desdobramento é superior ao definido na TOP. Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
        RAISE ERROR;
      END IF;
    END IF;
  END IF;


 /*TRATAMENTO PARA ALTERAçãO DE TíTULOS COM SOLICITAçãO DE LIBERAçãO*/
  IF UPDATING ('VLRDESDOB')  AND :NEW.RECDESP = -1 AND :NEW.PROVISAO = 'N' THEN
    SELECT COUNT (1)
      INTO P_COUNT
      FROM TSILIB
     WHERE NUCHAVE = :NEW.NUFIN
       AND TABELA = 'TGFFIN'
       AND EVENTO = 24;

    IF P_COUNT <> 0 THEN
      UPDATE TSILIB
         SET VLRANTERIOR = VLRATUAL,
             VLRATUAL = :NEW.VLRDESDOB
       WHERE NUCHAVE = :NEW.NUFIN
         AND TABELA = 'TGFFIN'
         AND EVENTO = 24;
    END IF;
  END IF;  

  
  /*VERIFICA SE NãO EXISTE LIBERAçãO PARA TITULOS DIFERENTES DE DESPESA LANçADO NO EVENTO 24.*/
  IF (UPDATING ('RECDESP') OR UPDATING ('PROVISAO')) AND 
     (:NEW.RECDESP = 1 OR :NEW.PROVISAO = 'S') THEN
    DELETE FROM TSILIB
          WHERE TABELA = 'TGFFIN'
            AND NUCHAVE = :NEW.NUFIN
            AND EVENTO = 24;
  END IF;
  
  IF :NEW.DHBAIXA IS NOT NULL AND :NEW.NUCCR IS NOT NULL THEN
    ERRMSG := 'Título de autorização de venda de cartão de crédito não pode ser baixado! Financeiro de Nro Único: '|| TO_CHAR(:NEW.NUFIN) ||'.';
    RAISE ERROR;
  END IF;

  RETURN;
   
EXCEPTION
  WHEN ERROR THEN
    /* 
    Sincronização de dados não faz validações
    */
    IF (P_VALIDAR) THEN 
      RAISE_APPLICATION_ERROR(-20101, ERRMSG);
    END IF; 

END;
/
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 24/04/2018 10:23:15
Num.Script: 53876-0-0
Nro. O.S. : 1172240
Nome      : Alterar - STP_SET_SESSION
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - STP_SET_SESSION
NomeObjeto: STP_SET_SESSION
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210009
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE STP_SET_SESSION(P_CODUSU  IN NUMBER, P_CODPROD IN NUMBER, P_VERSAO  IN NUMBER)
AS  
  P_VERSAOINT NUMBER(10);
  P_VERSAOBD VARCHAR(10);
BEGIN
  STP_SET_ATUALIZANDO('N');
   Tsiusu_Log_Pkg.V_CODUSULOG := P_CODUSU;
  SELECT USU.NOMEUSU 
  INTO Tsiusu_Log_Pkg.V_NOMEUSULOG 
  FROM TSIUSU USU 
  WHERE USU.CODUSU = P_CODUSU;
  Stp_Set_Variaveis;
  Habilita_Triggers; 

  BEGIN
    SELECT VERSAO
    INTO P_VERSAOINT
    FROM TGFVMP
    WHERE CODPROD = P_CODPROD;
    P_VERSAOBD := SUBSTR(P_VERSAOINT,1,1)||'.'||SUBSTR(P_VERSAOINT,2,2)||'.'||SUBSTR(P_VERSAOINT,4,2)||'.'||SUBSTR(P_VERSAOINT,6,2);
  EXCEPTION WHEN NO_DATA_FOUND THEN
    P_VERSAOBD := NULL;
    P_VERSAOINT := NULL;
  END;    

  IF P_VERSAOINT IS NOT NULL AND P_VERSAOINT > P_VERSAO THEN
    RAISE_APPLICATION_ERROR(-20101,'Versão do módulo que está sendo executado é menor que a versão mínima permitida.'||CHR(13)||
                                   'Atualize o seu executável ou procure o administrador do sistema'||CHR(13)||
                                   'Versão mínima permitida: '  ||P_VERSAOBD); 

  END IF;
END;
/
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 24/04/2018 10:23:15
Num.Script: 53877-0-1000
Nro. O.S. : 1172240
Nome      : INSERE - THOOBJ - 5387600
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE STP_SET_SESSION
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210009
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'STP_SET_SESSION' NOMEOBJ, 53876 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, 'e38f13595a0f66c20e825135d903897b' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'STP_SET_SESSION' and THO.hashcode = 'e38f13595a0f66c20e825135d903897b')
/
 
 
 
/*
Requer    : 4210008
Conexao   : ORCL
Data      : 24/04/2018 11:51:02
Num.Script: 53930-0-0
Nro. O.S. : 1175868
Nome      : Alterar - TRG_UPD_TFPFUN
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - TRG_UPD_TFPFUN
NomeObjeto: TRG_UPD_TFPFUN
TipoObjeto: TRIGGER
NomeTabela: TFPFUN
Executar  : SE_EXISTIR
Ocorrencia: 4210009
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_UPD_TFPFUN
BEFORE UPDATE ON TFPFUN
FOR EACH ROW
DECLARE
  ERROR                    EXCEPTION;
  ERRMSG                   VARCHAR2(255);
  P_COUNT                  INT;
  P_CODDEPORGANOGRAMA       INT;
  P_CODCARGOORGANOGRAMA    INT;
  P_CODAFASTRAIS                    INT;
  P_CODAFASTFGTS                    INT;
  P_CODAFASTCAGED                   INT;

BEGIN

  IF STP_GET_ATUALIZANDO THEN
    RETURN;
  END IF;
  
  IF (:NEW.CODDEP   <> :OLD.CODDEP) OR
     (:NEW.CODCARGO <> :OLD.CODCARGO) THEN
      /* Verifica se tem integração com organograma */
    SELECT COUNT(1)
      INTO P_COUNT
      FROM TFPLFU LFU
     WHERE LFU.CODEMP = :NEW.CODEMP
       AND LFU.CODFUNC = :NEW.CODFUNC
       AND LFU.DTSAIDA IS NULL;

    P_COUNT := NVL(P_COUNT,0);
    IF (P_COUNT<>0) THEN
      IF (:NEW.CODDEP   <> :OLD.CODDEP) THEN
        /* Verifica se o departamento é o mesmo que está na instancia, se retornar zero é
           porque não é o mesmo que foi incluido pelo organograma, lançar a excessão */
    BEGIN
          SELECT NES.CHAVEREGISTRO
            INTO P_CODDEPORGANOGRAMA
            FROM TFPLFU LFU
           INNER JOIN TGFNES NES ON (NES.NUNO = LFU.NUNO)
           INNER JOIN TDDINS INS ON (INS.NUINSTANCIA = NES.NUINSTANCIA)
           WHERE LFU.CODEMP = :NEW.CODEMP
             AND LFU.CODFUNC = :NEW.CODFUNC
             AND LFU.DTSAIDA IS NULL
             AND INS.NOMETAB = 'TFPDEP';

    EXCEPTION
          WHEN NO_DATA_FOUND THEN
        P_CODDEPORGANOGRAMA := 0;
    END;

        IF (P_CODDEPORGANOGRAMA>0) AND
           (P_CODDEPORGANOGRAMA<>:NEW.CODDEP) THEN
          ERRMSG := 'Departamento não deve ser alterado, Não é o mesmo vinculado no sistema de Organograma.';
          RAISE ERROR;
        END IF;
      END IF;

      IF (:NEW.CODCARGO <> :OLD.CODCARGO) THEN
        /* Verifica se o departamento é o mesmo que está na instancia, se retornar zero é
           porque não é o mesmo que foi incluido pelo organograma, lançar a excessão */
    BEGIN
      SELECT NES.CHAVEREGISTRO
        INTO P_CODCARGOORGANOGRAMA
        FROM TFPLFU LFU
       INNER JOIN TGFNES NES ON (NES.NUNO = LFU.NUNO)
       INNER JOIN TDDINS INS ON (INS.NUINSTANCIA = NES.NUINSTANCIA)
       WHERE LFU.CODEMP = :NEW.CODEMP
         AND LFU.CODFUNC = :NEW.CODFUNC
         AND LFU.DTSAIDA IS NULL
         AND INS.NOMETAB = 'TFPCAR';
    EXCEPTION
          WHEN NO_DATA_FOUND THEN
        P_CODCARGOORGANOGRAMA := 0;
    END;

        IF (P_CODCARGOORGANOGRAMA>0) AND (P_CODCARGOORGANOGRAMA<>:NEW.CODCARGO) THEN
          ERRMSG := 'Cargo não deve ser alterado, Não é o mesmo vinculado no sistema de Organograma.';
          RAISE ERROR;
        END IF;

      END IF;
    END IF;
  END IF;

  IF :NEW.CODTPR IS NOT NULL THEN 
     
    IF (:NEW.AFASTRAIS <> :OLD.AFASTRAIS) OR
       (:NEW.AFASTFGTS <> :OLD.AFASTFGTS) OR
       (:NEW.CAUSAAFAST <> :OLD.CAUSAAFAST) THEN

      SELECT CODAFASTRAIS, CODAFASTFGTS, CODAFASTCAGED
        INTO P_CODAFASTRAIS, P_CODAFASTFGTS, P_CODAFASTCAGED
        FROM TFPTPR TPR
       WHERE TPR.CODTPR = :NEW.CODTPR;
               
      IF (P_CODAFASTRAIS  <> :NEW.AFASTRAIS) OR
         (P_CODAFASTFGTS  <> :NEW.AFASTFGTS) OR
         (P_CODAFASTCAGED <> :NEW.CAUSAAFAST) THEN
        RAISE_APPLICATION_ERROR(-20101, 'TIPO DE RESCISÃO INCOMPATÍVEL COM OS CAMPOS REFERENTES AO AFASTAMENTO !!!');
      END IF; 
                
      
    END IF;
  END IF;
  
 EXCEPTION
  WHEN ERROR THEN
    RAISE_APPLICATION_ERROR(-20101, ERRMSG);
END;
/
 
 
 
/*
Conexao   : ORCL
NomeObjeto: UPDATE TSIPAR INTEIRO
TipoObjeto: TABLE
NomeTabela: 
Executar  : SEMPRE
Ocorrencia: 4210010
FullVersao: Sim
*/
 
 
UPDATE TSIPAR SET INTEIRO = 4210009 WHERE CHAVE = 'VERSAOATUALDB'
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 11/05/2018 10:55:32
Num.Script: 54025-0-0
Nro. O.S. : 1170347
Nome      : Cria - TFPFUN INDNIF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: INDNIF
TipoObjeto: COLUMN
NomeTabela: TFPFUN
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TFPFUN ADD INDNIF CHAR(1)';
   EXECUTE IMMEDIATE 'ALTER TABLE TFPFUN ADD  CONSTRAINT CKC_INDNIF_TFPFUN CHECK (INDNIF IN (''1'',''2'',''3'') OR INDNIF IS NULL )';
END;
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 11/05/2018 10:55:39
Num.Script: 54025-0-1
Nro. O.S. : 1170347
Nome      : Cria - TFPFUN NIFBENEF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: NIFBENEF
TipoObjeto: COLUMN
NomeTabela: TFPFUN
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPFUN ADD NIFBENEF VARCHAR2(20)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 11/05/2018 10:55:45
Num.Script: 54025-0-2
Nro. O.S. : 1170347
Nome      : Cria - TFPBAS GERARPARESCISAO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: GERARPARESCISAO
TipoObjeto: COLUMN
NomeTabela: TFPBAS
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TFPBAS ADD GERARPARESCISAO CHAR(1)';
   EXECUTE IMMEDIATE 'UPDATE TFPBAS SET GERARPARESCISAO = ''N''';
   EXECUTE IMMEDIATE 'ALTER TABLE TFPBAS ADD  CONSTRAINT CKC_GERARPARESCISAO_TFPBAS CHECK (GERARPARESCISAO IN (''S'',''N''))';
   EXECUTE IMMEDIATE 'ALTER TABLE TFPBAS MODIFY GERARPARESCISAO DEFAULT ''N'' NOT NULL';
END;
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 11/05/2018 10:55:54
Num.Script: 54025-0-3
Nro. O.S. : 1170347
Nome      : Cria - TFPBAS LIBESOCIAL
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: LIBESOCIAL
TipoObjeto: COLUMN
NomeTabela: TFPBAS
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TFPBAS ADD LIBESOCIAL CHAR(1)';
   EXECUTE IMMEDIATE 'UPDATE TFPBAS SET LIBESOCIAL = ''N''';
   EXECUTE IMMEDIATE 'ALTER TABLE TFPBAS ADD  CONSTRAINT CKC_LIBESOCIAL_TFPBAS CHECK (LIBESOCIAL IN (''S'',''N''))';
   EXECUTE IMMEDIATE 'ALTER TABLE TFPBAS MODIFY LIBESOCIAL DEFAULT ''N'' NOT NULL';
END;
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 11/05/2018 10:56:00
Num.Script: 54025-0-4
Nro. O.S. : 1170347
Nome      : Cria - TFPMOV INSCONSIG
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: INSCONSIG
TipoObjeto: COLUMN
NomeTabela: TFPMOV
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPMOV ADD INSCONSIG VARCHAR2(5)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 11/05/2018 10:56:09
Num.Script: 54025-0-5
Nro. O.S. : 1170347
Nome      : Cria - TFPMOV NRCONTR
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: NRCONTR
TipoObjeto: COLUMN
NomeTabela: TFPMOV
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPMOV ADD NRCONTR VARCHAR2(40)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 11/05/2018 10:56:24
Num.Script: 54025-0-6
Nro. O.S. : 1170347
Nome      : Cria - TFPFOL INSCONSIG
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: INSCONSIG
TipoObjeto: COLUMN
NomeTabela: TFPFOL
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPFOL ADD INSCONSIG VARCHAR2(5)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 11/05/2018 10:56:30
Num.Script: 54025-0-7
Nro. O.S. : 1170347
Nome      : Cria - TFPFOL NRCONTR
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: NRCONTR
TipoObjeto: COLUMN
NomeTabela: TFPFOL
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPFOL ADD NRCONTR VARCHAR2(40)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 11/05/2018 10:55:04
Num.Script: 54025-0-8
Nro. O.S. : 1170347
Nome      : Cria - TFPEMP DTTERCEIRAFASE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: DTTERCEIRAFASE
TipoObjeto: COLUMN
NomeTabela: TFPEMP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPEMP ADD DTTERCEIRAFASE DATE
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 11/05/2018 10:55:11
Num.Script: 54025-0-9
Nro. O.S. : 1175714
Nome      : Alterar - VGF_EVENTO_EMPREGADOR
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VGF_EVENTO_EMPREGADOR
NomeObjeto: VGF_EVENTO_EMPREGADOR
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_EMPREGADOR
AS
   SELECT E.CODEMP,
          E.CODEMPMATRIZ AS CODEMPMATRIZ,
          CASE WHEN LENGTH (E.CGC) = 14 THEN 1 ELSE 2 END
             AS "TPINSCEMPREGADOR",
          CASE
             WHEN     LENGTH (E.CGC) = 14
                  AND (SELECT LOGICO
                         FROM TSIPAR
                        WHERE CHAVE = 'FPTRIBUNAL') = 'N'
             THEN
                SUBSTR (E.CGC, 1, 8)
             ELSE
                E.CGC
          END
             AS "NRINSCEMPREGADOR",
          CASE
             WHEN FIS.TPCAEPF IS NOT NULL AND FIS.CGC_CEI IS NOT NULL THEN 3
             WHEN LENGTH (E.CGC) = 14 THEN 1
             ELSE 4
          END
             AS "TPINSCESTABELECIMENTO",
          CASE
             WHEN FIS.TPCAEPF IS NOT NULL AND FIS.CGC_CEI IS NOT NULL THEN FIS.CGC_CEI
             ELSE E.CGC
          END
             AS "NRINSCESTABELECIMENTO",
          RAZAOSOCIAL AS "NMRAZAO",
          LPAD (CLASSTRIB, 2, '0') AS "CLASSTRIB",
          NATJUR AS "NATJURID",
          INDCOOP,
          INDCONSTR,
          INFOOBRA,
          CNAEPREPON,
          CEP,
          COMPLEMENTO,
          NUMEND,
          CODEND,
          CODBAI,
          E.CODCID,
          ACDINTISENMULTA AS "INDACORDOISENMULTA",
          (SELECT UFS.UF
             FROM TSIUFS UFS
            WHERE UFS.CODUF = C.UF)
             AS UF,
          C.CODMUNFIS AS CODMUNFIS,
          (SELECT DTCARGAINICIAL
             FROM TFPEMP
            WHERE CODEMP = E.CODEMPMATRIZ)
             AS DTCARGAINICIAL,             
          (SELECT DTTERCEIRAFASE
             FROM TFPEMP
            WHERE CODEMP = E.CODEMPMATRIZ)
             AS DTTERCEIRAFASE,             
          E.CGC
     FROM TSIEMP E, TSICID C, TFPEMP EF, TFPFIS FIS
    WHERE E.CODCID = C.CODCID
      AND EF.USADOESOCIAL = 'S'
      AND E.CODEMP = EF.CODEMP
      AND E.CODEMPMATRIZ IS NOT NULL
      AND EF.CODREGFIS = FIS.CODREGFIS
   UNION
   SELECT E.CODEMP,
          E.CODEMP AS CODEMPMATRIZ,
          CASE WHEN LENGTH (E.CGC) = 14 THEN 1 ELSE 2 END
             AS "TPINSCEMPREGADOR",
          CASE
             WHEN     LENGTH (E.CGC) = 14
                  AND (SELECT LOGICO
                         FROM TSIPAR
                        WHERE CHAVE = 'FPTRIBUNAL') = 'N'
             THEN
                SUBSTR (E.CGC, 1, 8)
             ELSE
                E.CGC
          END
             AS "NRINSCEMPREGADOR",
          CASE
             WHEN FIS.TPCAEPF IS NOT NULL AND FIS.CGC_CEI IS NOT NULL THEN 3
             WHEN LENGTH (E.CGC) = 14 THEN 1
             ELSE 4
          END
             AS "TPINSCESTABELECIMENTO",
          CASE
             WHEN FIS.TPCAEPF IS NOT NULL AND FIS.CGC_CEI IS NOT NULL THEN FIS.CGC_CEI
             ELSE E.CGC
          END
             AS "NRINSCESTABELECIMENTO",
          RAZAOSOCIAL AS "NMRAZAO",
          LPAD (CLASSTRIB, 2, '0') AS "CLASSTRIB",
          NATJUR AS "NATJURID",
          INDCOOP,
          INDCONSTR,
          INFOOBRA,
          CNAEPREPON,
          CEP,
          COMPLEMENTO,
          NUMEND,
          CODEND,
          CODBAI,
          E.CODCID,
          ACDINTISENMULTA AS "INDACORDOISENMULTA",
          (SELECT UFS.UF
             FROM TSIUFS UFS
            WHERE UFS.CODUF = C.UF)
             AS UF,
          C.CODMUNFIS AS CODMUNFIS,
          (SELECT DTCARGAINICIAL
             FROM TFPEMP
            WHERE CODEMP = E.CODEMP)
             AS DTCARGAINICIAL,
          (SELECT DTTERCEIRAFASE
             FROM TFPEMP
            WHERE CODEMP = E.CODEMP)
             AS DTTERCEIRAFASE,
          E.CGC
     FROM TSIEMP E, TSICID C, TFPEMP EF, TFPFIS FIS
    WHERE E.CODCID = C.CODCID
      AND EF.USADOESOCIAL = 'S'
      AND E.CODEMP = EF.CODEMP
      AND E.CODEMPMATRIZ IS NULL
      AND EF.CODREGFIS = FIS.CODREGFIS
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54026-0-0
Nro. O.S. : 1175714
Nome      : Alterar - VGF_EVENTO_S1005
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VGF_EVENTO_S1005
NomeObjeto: VGF_EVENTO_S1005
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1005
AS
   SELECT ESTAB.TPINSCEMPREGADOR,
          ESTAB.NRINSCEMPREGADOR,
          ESTAB.TPINSCESTABELECIMENTO,
          ESTAB.NRINSCESTABELECIMENTO,
          ESTAB.CNAEPREPON AS "CNAEPREP",
          CASE
             WHEN     FIS.ATIVINSS = 604
                  AND ESTAB.CNAEPREPON IN
                         (111302,
                          134200,
                          154700,
                          134200,
                          154700,
                          151201,
                          151201,
                          119905,
                          115600,
                          111302,
                          161003,
                          119903)
             THEN
                3
             ELSE
                CAST (FIS.TAXASEG AS INTEGER)
          END
             AS "ALIQRAT",
          CASE WHEN FIS.TAXASEG IN (1, 2, 3) THEN 1 ELSE 0 END AS "ALIQRAT2",
          FIS.FATORFAP AS "FAP",
          CAST (
             (  CASE
                   WHEN     FIS.ATIVINSS = 604
                        AND ESTAB.CNAEPREPON IN
                               (111302,
                                134200,
                                154700,
                                134200,
                                154700,
                                151201,
                                151201,
                                119905,
                                115600,
                                111302,
                                161003,
                                119903)
                   THEN
                      3
                   ELSE
                      CAST (FIS.TAXASEG AS INTEGER)
                END
              * FIS.FATORFAP) AS FLOAT)
             AS "ALIQRATAJUST",
          CAST (
             CASE
                WHEN NUPROCESSORAT IS NULL THEN NULL
                WHEN RAT.TIPOPROCESSO = 'A' THEN '1'
                ELSE '2'
             END AS INTEGER)
             AS "TPPROCRAT",
          RAT.NUMPROCESSO AS "NRPROCRAT",
          CAST (
             CASE
                WHEN NUPROCESSORAT IS NULL
                THEN
                   NULL
                ELSE
                   (SELECT CODSUSP
                      FROM TFPSUSP S
                     WHERE     S.NUPROCESSO = EMP.NUPROCESSORAT
                           AND S.DTDESCISAO =
                                  (SELECT MAX (DTDESCISAO)
                                     FROM TFPSUSP
                                    WHERE NUPROCESSO = EMP.NUPROCESSORAT))
             END AS INTEGER)
             AS "CODSUSPRAT",
          CAST (
             (CASE
                 WHEN NUPROCESSOFAP IS NULL THEN NULL
                 WHEN FAP.TIPOPROCESSO = 'A' THEN '1'
                 ELSE '2'
              END) AS INTEGER)
             AS "TPPROCFAP",
          FAP.NUMPROCESSO AS "NRPROCFAP",
          CAST (
             CASE
                WHEN NUPROCESSOFAP IS NULL
                THEN
                   NULL
                ELSE
                   (SELECT CODSUSP
                      FROM TFPSUSP S
                     WHERE     S.NUPROCESSO = EMP.NUPROCESSOFAP
                           AND S.DTDESCISAO =
                                  (SELECT MAX (DTDESCISAO)
                                     FROM TFPSUSP
                                    WHERE NUPROCESSO = EMP.NUPROCESSOFAP))
             END AS INTEGER)
             AS "CODSUSPFAP",
          CAST (FIS.TPCAEPF AS INTEGER) AS "TPCAEPF",
          CASE WHEN ESTAB.INDCONSTR = 1 THEN ESTAB.INFOOBRA ELSE NULL END
             AS "INDSUBSTPATROBRA",
          CASE
             WHEN (EMP.CONTROLEPONTO - 1) < 0 THEN 0
             ELSE (EMP.CONTROLEPONTO - 1)
          END
             AS "REGPT",
          CAST (EMP.CONTAPR AS INTEGER) AS "CONTAPR",
          CAST (EMP.NUPROCESSOAPR AS VARCHAR (100)) AS "NUPROCJUDAPR",
          EMP.CONTENTED AS "CONTENTED",
          CAST (EMP.CONTPCD AS INTEGER) AS "CONTPCD",
          CAST (EMP.NUPROCESSOPCD AS VARCHAR (100)) AS "NUPROCJUDPCD",
          ESTAB.CODEMPMATRIZ AS "CODEMP",
          CAST (EMP.CODEMP AS VARCHAR (20)) AS "CHAVE"
     FROM TFPEMP EMP
          LEFT JOIN TFPPSS RAT ON RAT.NUPROCESSO = EMP.NUPROCESSORAT
          LEFT JOIN TFPPSS FAP ON FAP.NUPROCESSO = EMP.NUPROCESSOFAP
          JOIN VGF_EVENTO_EMPREGADOR ESTAB ON ESTAB.CODEMP = EMP.CODEMP
          JOIN TFPFIS FIS ON FIS.CODREGFIS = EMP.CODREGFIS
    WHERE     EMP.ATIVO = 'S'
          AND EMP.USADOESOCIAL = 'S'
          AND EMP.CODEMPLOTACAO IS NULL		  
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54027-0-0
Nro. O.S. : 1175714
Nome      : Alterar - VGF_EVENTO_S1020 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VGF_EVENTO_S1020 
NomeObjeto: VGF_EVENTO_S1020 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1020 AS
SELECT
VEMP.TPINSCEMPREGADOR,
VEMP.NRINSCEMPREGADOR,
'E' || CAST(EMP.CODEMP AS VARCHAR2(10))AS "CODLOTACAO",
CAST(TIPLOTACAO AS VARCHAR (2)) AS "TPLOTACAO",
0 AS "TPLOTACAO_2",
CASE WHEN TIPLOTACAO IN (1,10,21,24,90,91) THEN NULL
     WHEN LENGTH(ESTAB.CGC) = 14 THEN 1 
     WHEN FIS.TPCAEPF IS NOT NULL THEN 2
     ELSE 4
END AS "TPINSCLOTACAO",
CASE WHEN TIPLOTACAO IN (1,10,21,24,90,91) THEN NULL
     WHEN LENGTH(ESTAB.CGC) = 14 THEN ESTAB.CGC 
     WHEN FIS.TPCAEPF IS NOT NULL THEN FIS.CGC_CEI -- teremos que criar outro campo para registrar o nro CAEPF e o CNO 
     ELSE ESTAB.CGC
 END AS "NRINSCLOTACAO",
FIS.ATIVINSS AS "FPAS",
LPAD (FIS.CODGRPS, 4, '0') AS "CODTERCS",
(SELECT MIN(T.CODTERC)
 FROM TFPPRTC TC, TFPTERC T
 WHERE  TC.CODREGFIS = FIS.CODREGFIS
 AND TC.NUPROCESSO = T.NUPROCESSO) AS "CODTERCSSUSP",
CASE WHEN EMP.TIPLOTACAO <> 2 THEN NULL
        WHEN LENGTH(ESTAB.CGC) = 14  THEN 1 
        ELSE 2 
END AS "TPINSCCONTRAT",
CASE WHEN EMP.TIPLOTACAO <> 2 THEN NULL
     ELSE ESTAB.CGC END AS "NRINSCCONTRAT",
CASE WHEN EMP.TIPLOTACAO <> 2 THEN NULL
     WHEN LENGTH(ESTAB.CGC) = 14 THEN 1 
      ELSE 2 END AS "TPINSCPROP",
CASE WHEN EMP.TIPLOTACAO <> 2 THEN NULL ELSE ESTAB.CGC END AS "NRINSCPROP",
FIS.CODREGFIS AS "CODREGFIS",
'E' || CAST(EMP.CODEMP AS VARCHAR2(10)) AS "CHAVE",
NVL(ESTAB.CODEMPMATRIZ, ESTAB.CODEMP) AS "CODEMP",
'E' AS "TIPOREGISTRO",
EMP.CODEMP AS "CODIGO",
'Empresa: ' || ESTAB.RAZAOSOCIAL AS "DESCRLOTACAO"
FROM TFPEMP EMP
, TFPFIS FIS
, TSIEMP ESTAB
  JOIN VGF_EVENTO_EMPREGADOR VEMP ON VEMP.CODEMP = NVL(ESTAB.CODEMPMATRIZ,ESTAB.CODEMP)
WHERE  EMP.ATIVO = 'S'
 AND EMP.TIPLOTACAO <> 0
 AND EMP.CODEMP = ESTAB.CODEMP
 AND EMP.CODREGFIS = FIS.CODREGFIS
 AND EMP.USADOESOCIAL = 'S'
 AND NOT EXISTS (SELECT 1 FROM TSIPAR WHERE CHAVE = 'FPESOCIALDEPTOM' AND LOGICO = 'S')
 
UNION

SELECT 
VEMP.TPINSCEMPREGADOR,
VEMP.NRINSCEMPREGADOR,
'T' || CAST(TME.CODPARC AS VARCHAR2(10)) AS "CODLOTACAO",
CAST(
CASE
    WHEN PAR.TIPLOTACAO <> 0 THEN PAR.TIPLOTACAO 
    WHEN DEP.TIPLOTACAO IS NOT NULL THEN DEP.TIPLOTACAO 
    WHEN VEMP.TPINSCEMPREGADOR = 1 THEN 4 
    ELSE 3 
END AS VARCHAR (2)) AS "TPLOTACAO",
0 AS "TPLOTACAO_2",
CASE WHEN PAR.TIPLOTACAO IN (1,10,21,24,90,91) THEN NULL
     WHEN DEP.TIPLOTACAO IS NOT NULL AND DEP.TIPLOTACAO IN (1,10,21,24,90,91) THEN NULL
     WHEN PAR.TIPLOTACAO <> 0 OR DEP.TIPLOTACAO IS NOT NULL  THEN CASE WHEN LENGTH(PAR.CGC_CPF) = 14 THEN 1  ELSE 2 END 
     ELSE VEMP.TPINSCEMPREGADOR
END AS "TPINSCLOTACAO",
CASE WHEN PAR.TIPLOTACAO IN (1,10,21,24,90,91) THEN NULL
     WHEN DEP.TIPLOTACAO IS NOT NULL AND DEP.TIPLOTACAO IN (1,10,21,24,90,91) THEN NULL
     WHEN PAR.TIPLOTACAO <> 0 OR DEP.TIPLOTACAO IS NOT NULL THEN PAR.CGC_CPF
     ELSE VEMP.NRINSCEMPREGADOR
END AS "NRINSCLOTACAO",
FIS.ATIVINSS AS "FPAS",
LPAD (FIS.CODGRPS, 4, '0') AS "CODTERCS",
NULL AS "CODTERCSSUSP",
0 AS "TPINSCCONTRAT",
NULL AS "NRINSCCONTRAT",
CASE WHEN DEP.TIPLOTACAO <> 2 THEN DEP.TPINSCPROP ELSE NULL END AS "TPINSCPROP",
CASE WHEN DEP.TIPLOTACAO <> 2 THEN DEP.NRINSCPROP ELSE NULL END AS "NRINSCPROP",
FIS.CODREGFIS AS "CODREGFIS",
'T' || CAST(TME.CODPARC AS VARCHAR2(10)) AS "CHAVE",
TME.CODEMP AS "CODEMP",
'P' AS "TIPOREGISTRO",
TME.CODPARC AS "CODIGO",
'Parceiro Tomador: ' || PAR.NOMEPARC AS "DESCRLOTACAO"
FROM TFPTME TME 
   LEFT JOIN (SELECT D.* FROM TFPDEP D
              WHERE D.CODDEP = (SELECT MIN(CODDEP) FROM TFPDEP DM WHERE DM.CODPARC = D.CODPARC)) DEP  ON DEP.CODPARC = TME.CODPARC 
, VGF_EVENTO_EMPREGADOR VEMP, TGFPAR PAR, TFPFIS FIS
WHERE TME.CODEMP = VEMP.CODEMP
AND TME.CODPARC = PAR.CODPARC
AND FIS.CODREGFIS = NVL(DEP.CODREGFIS,(SELECT EMP.CODREGFIS FROM TFPEMP EMP WHERE TME.CODEMP = EMP.CODEMP))
AND NOT EXISTS (SELECT 1 FROM TSIPAR WHERE CHAVE = 'FPESOCIALDEPTOM' AND LOGICO = 'S')

UNION

SELECT
    VEMP.TPINSCEMPREGADOR,
    VEMP.NRINSCEMPREGADOR,
    'E' || CAST(EMP.CODEMP AS VARCHAR2(10))AS "CODLOTACAO",
    CAST(TIPLOTACAO AS VARCHAR (2)) AS "TPLOTACAO",
    0 AS "TPLOTACAO_2",
    CASE WHEN TIPLOTACAO IN (1,10,21,24,90,91) THEN NULL
         WHEN LENGTH(ESTAB.CGC) = 14 THEN 1 
         WHEN FIS.TPCAEPF IS NOT NULL THEN 2
         ELSE 4
    END AS "TPINSCLOTACAO",
    CASE WHEN TIPLOTACAO IN (1,10,21,24,90,91)  THEN NULL
         ELSE NVL((SELECT CASE WHEN LENGTH(E.CGC) = 14 AND NVL((SELECT LOGICO FROM TSIPAR WHERE CHAVE = 'FPTRIBUNAL'), 'N') = 'N' THEN SUBSTR(E.CGC, 1, 8) 
                          ELSE E.CGC END
                        FROM TFPTOM TOM, TSIEMP E 
                       WHERE TOM.CODPARC = E.CODPARC 
                         AND TOM.DTINICIO = (SELECT MAX(TM.DTINICIO)
                                               FROM TFPTOM TM 
                                              WHERE TM.CODEMP = TOM.CODEMP 
                                                AND TM.CODFUNC = TOM.CODFUNC)), VEMP.TPINSCEMPREGADOR) END AS "NRINSCLOTACAO",
    FIS.ATIVINSS AS "FPAS",    
    LPAD (FIS.CODGRPS, 4, '0') AS "CODTERCS",
    (SELECT MIN(T.CODTERC)
     FROM TFPPRTC TC, TFPTERC T
     WHERE  TC.CODREGFIS = FIS.CODREGFIS
     AND TC.NUPROCESSO = T.NUPROCESSO) AS "CODTERCSSUSP",
    CASE WHEN EMP.TIPLOTACAO <> 2 THEN NULL
            WHEN LENGTH(ESTAB.CGC) = 14  THEN 1 
            ELSE 2 
    END AS "TPINSCCONTRAT",
    CASE WHEN EMP.TIPLOTACAO <> 2 THEN NULL
         ELSE ESTAB.CGC END AS "NRINSCCONTRAT",
    CASE WHEN EMP.TIPLOTACAO <> 2 THEN NULL
         WHEN LENGTH(ESTAB.CGC) = 14 THEN 1 
          ELSE 2 END AS "TPINSCPROP",
    CASE WHEN EMP.TIPLOTACAO <> 2 THEN NULL ELSE ESTAB.CGC END AS "NRINSCPROP",
    FIS.CODREGFIS AS "CODREGFIS",
    'E' || CAST(EMP.CODEMP AS VARCHAR2(10)) AS "CHAVE",
    NVL(ESTAB.CODEMPMATRIZ, ESTAB.CODEMP) AS "CODEMP",
    'E' AS "TIPOREGISTRO",
    EMP.CODEMP AS "CODIGO",
    'Empresa: ' || ESTAB.RAZAOSOCIAL AS "DESCRLOTACAO"
FROM TFPEMP EMP
, TFPFIS FIS
, TSIEMP ESTAB
  JOIN VGF_EVENTO_EMPREGADOR VEMP ON VEMP.CODEMP = NVL(ESTAB.CODEMPMATRIZ,ESTAB.CODEMP)
WHERE EMP.ATIVO = 'S'
  AND EMP.TIPLOTACAO <> 0
  AND EMP.CODEMP = ESTAB.CODEMP
  AND EMP.CODREGFIS = FIS.CODREGFIS
  AND EMP.USADOESOCIAL = 'S'
  AND EXISTS (SELECT 1 FROM TSIPAR WHERE CHAVE = 'FPESOCIALDEPTOM' AND LOGICO = 'S')
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54028-0-0
Nro. O.S. : 1175714
Nome      : Dropar - CKC_SITESOCIAL_TFPFUN
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - CKC_SITESOCIAL_TFPFUN
NomeObjeto: CKC_SITESOCIAL_TFPFUN
TipoObjeto: CONSTRAINT
NomeTabela: TFPFUN
Executar  : SE_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPFUN DROP CONSTRAINT CKC_SITESOCIAL_TFPFUN
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54029-0-0
Nro. O.S. : 1175714
Nome      : Criar - CKC_SITESOCIAL_TFPFUN 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - CKC_SITESOCIAL_TFPFUN 
NomeObjeto: CKC_SITESOCIAL_TFPFUN 
TipoObjeto: CONSTRAINT
NomeTabela: TFPFUN
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPFUN ADD CONSTRAINT CKC_SITESOCIAL_TFPFUN CHECK (SITESOCIAL IS NULL OR SITESOCIAL IN ('P', 'O', '5', '6', 'T', 'S'))
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54031-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_BASEFOLHA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_BASEFOLHA
NomeObjeto: VGF_EVENTO_BASEFOLHA
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_BASEFOLHA
AS
   SELECT DISTINCT
          VEMP.CODEMPMATRIZ AS CODEMP,
          BAS.REFERENCIA AS DTREF,
          VEMP.TPINSCEMPREGADOR,
          CAST (VEMP.NRINSCEMPREGADOR AS VARCHAR2 (15)) AS NRINSCEMPREGADOR,
          VEMP.TPINSCESTABELECIMENTO,
          CAST (VEMP.NRINSCESTABELECIMENTO AS VARCHAR2 (15))
             AS NRINSCESTABELECIMENTO,
          FUN.CODEMP AS CODEMPFUNC,
          FUN.CODFUNC,
          FUN.MATRICULA,
          FUN.CPF,
          FUN.PIS,
          FUN.CODCATEGESOCIAL AS CODCATEG,
          CASE WHEN BAS.TIPFOLHA IN ('D') THEN 2 ELSE 1 END AS INDAPURACAO,
          BAS.TIPFOLHA AS IDEDMDEV,
          EMP.CODPARC AS CODPARCEMP,
          CASE
             WHEN TOM.CODPARC IS NULL OR EMP.CODPARC = TOM.CODPARC
             THEN
                'E' || FUN.CODEMP
             ELSE
                'T' || TOM.CODPARC
          END AS CODLOTACAO,
          (SELECT SUM (
                     CASE
                        WHEN T.CODPARC IS NULL OR EMP.CODPARC = T.CODPARC
                        THEN
                           NULL
                        ELSE
                             SNK_DATE_DIFF (
                                LEAST (
                                   NVL (T.DTFIM,
                                        ADD_MONTHS (BAS.REFERENCIA, 1) - 1),
                                   ADD_MONTHS (BAS.REFERENCIA, 1) - 1),
                                GREATEST (T.DTINICIO, BAS.REFERENCIA))
                           + 1
                     END)
             FROM TFPTOM T
            WHERE     T.CODEMP = TOM.CODEMP
                  AND T.CODFUNC = TOM.CODFUNC
                  AND T.CODPARC = TOM.CODPARC
                  AND T.DTINICIO < ADD_MONTHS (BAS.REFERENCIA, 1)
                  AND (T.DTFIM IS NULL OR T.DTFIM >= BAS.REFERENCIA))
             AS QTDDIASAV,
          CASE
             WHEN TOM.CODPARC IS NULL OR EMP.CODPARC = TOM.CODPARC THEN 0
             ELSE TOM.CODPARC
          END
             AS CODPARC,
          CASE
             WHEN CODADMFGTS = '02' THEN 2
             WHEN CODADMFGTS = '03' THEN 3
             WHEN CODADMFGTS = '04' THEN 4
             ELSE 1
          END
             AS GRAUEXP,
          CASE
             WHEN BAS.TIPFOLHA IN ('D') THEN TO_CHAR (BAS.REFERENCIA, 'YYYY')
             ELSE TO_CHAR (BAS.REFERENCIA, 'YYYY-MM')
          END
             AS PERAPUR,
          BAS.INDMV,
          CAST (NOMEFUNC AS VARCHAR2 (70)) AS NMTRAB,
          CAST (
             CASE
                WHEN FUN.SITESOCIAL = 'S' THEN FUN.DTNASC
                ELSE BAS.REFERENCIA
             END AS DATE)
             AS DTNASCTO,
          CAST (NULL AS VARCHAR2 (14)) AS CNPJEMPREGANT,
          CAST (NULL AS VARCHAR2 (30)) AS MATRICANT,
          CAST (NULL AS DATE) AS DTADM,
          CAST (NULL AS VARCHAR2 (255)) AS OBSERVACAO,
          CAST (
             CASE
                WHEN FUN.SITESOCIAL = 'S'
                THEN
                   (SELECT CBO.CODCBO
                      FROM TFPCBO CBO, TFPCAR CAR
                     WHERE     CBO.CODCBO = CAR.CODCBO
                           AND CAR.CODCARGO = FUN.CODCARGO)
                ELSE
                   NULL
             END AS VARCHAR2 (6))
             AS CODCBO,
          CASE
             WHEN FUN.SITESOCIAL = 'S'
             THEN
                (SELECT CASE WHEN TIPHORANOTURNA = 'U' THEN 1 ELSE 2 END
                   FROM TFPCBO CBO
                  WHERE CBO.CODCBO =
                           CASE
                              WHEN EXISTS
                                      (SELECT 1
                                         FROM TSIPAR
                                        WHERE     CHAVE = 'FPUTILIZACBO'
                                              AND NVL (INTEIRO, 0) = 0)
                              THEN
                                 (SELECT CODCBO
                                    FROM TFPCAR C
                                   WHERE C.CODCARGO = FUN.CODCARGO)
                              ELSE
                                 (SELECT CODCBO
                                    FROM TFPFCO F
                                   WHERE F.CODFUNCAO = FUN.CODFUNCAO)
                           END)
             ELSE
                NULL
          END
             AS "NATATIVIDADE",
          CASE WHEN BAS.CODCONV IS NOT NULL THEN BAS.DIASTRAB ELSE NULL END
             AS QTDDIASINTERM,
          CASE WHEN FUN.SITESOCIAL = 'S' THEN BAS.DIASTRAB ELSE NULL END
             AS QTDDIASTRAB,
          BAS.CODSIND,
          BAS.PROCESSO,
          BAS.DSC,
          FUN.DTDEM,
          CAST (BAS.CODCONV AS VARCHAR2 (30)) AS CODCONV,
          CAST (
                CAST (
                   CASE WHEN BAS.TIPFOLHA IN ('D') THEN 2 ELSE 1 END AS CHAR (1))
             || ':'
             || CAST (FUN.CPF AS VARCHAR2 (11)) AS VARCHAR2 (100)) AS CHAVE1200,
          CAST(CAST(FUN.CODEMP AS VARCHAR(10)) || ':' || CAST(FUN.CODFUNC AS VARCHAR2 (30)) AS VARCHAR2(100)) AS CHAVEDESLIG,
          BAS.GERARPARESCISAO,
          VEMP.DTTERCEIRAFASE
     FROM TFPFUN FUN
          JOIN TFPBAS BAS
             ON BAS.CODEMP = FUN.CODEMP 
            AND BAS.CODFUNC = FUN.CODFUNC
            AND BAS.TIPFOLHA <> 'P'
            AND BAS.LIBESOCIAL = 'S'
          LEFT JOIN
          TFPTOM TOM
             ON     TOM.CODEMP = BAS.CODEMP
                AND TOM.CODFUNC = BAS.CODFUNC
                AND TOM.DTINICIO < ADD_MONTHS (BAS.REFERENCIA, 1)
                AND (TOM.DTFIM IS NULL OR TOM.DTFIM >= BAS.REFERENCIA),
          VGF_EVENTO_EMPREGADOR VEMP,
          TSIEMP EMP
    WHERE     FUN.CODEMP = VEMP.CODEMP
          AND FUN.CODEMP = EMP.CODEMP
          AND FUN.SITESOCIAL IN ('O', '5', '6', 'T', 'S')
          AND FUN.CODCATEGESOCIAL NOT IN (301, 302, 303, 304, 305, 306, 307, 308, 309, 410) /* ORGAO PUBLICO */
          AND FUN.VINCULO <> 99
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54032-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_BASERUBRICA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_BASERUBRICA
NomeObjeto: VGF_EVENTO_BASERUBRICA
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_BASERUBRICA
AS
   SELECT
      BASE.CODEMP
    , BASE.CODEMPFUNC
    , BASE.CODFUNC
    , BASE.DTREF
    , BASE.IDEDMDEV
    , BASE.MATRICULA
    , BASE.CODCATEG
    , BASE.DTDEM
    , BASE.CODLOTACAO
    , BASE.CHAVE1200
    , BASE.CHAVEDESLIG  
    , CAST(FOL.CODEVENTO AS VARCHAR2(100)) AS CODRUBR
    , EVE.CODEVENTO AS IDETABRUBR
--    , CAST( CASE WHEN EVE.BASELIQUIDO = 'S' THEN 
--       CASE WHEN EVE.UNIDADE = 'H' THEN HR2DEC(FOL.INDICE * 100)  
--            WHEN EVE.UNIDADE = 'Q' AND EVE.BASEINFREND NOT IN ('J','G') THEN FOL.INDICE
--            WHEN EVE.IDENTIFICACAO NOT IN (101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,129,130,135,136,145,146,154,155,163) AND EVE.UNIDADE = 'D' THEN FOL.INDICE 
--       ELSE 0 END 
--     ELSE 0 END AS FLOAT) AS QTDRUBR
--    ,CAST(CASE WHEN EVE.BASELIQUIDO = 'S' THEN 
--       CASE WHEN EVE.IDENTIFICACAO IN (101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,129,130,135,136,145,146,154,155,163) THEN FOL.INDICE 
--            WHEN EVE.UNIDADE = 'H' AND EVE.INDICE > 0 THEN (EVE.INDICE - 1) * 100 
--            WHEN EVE.UNIDADE = 'Q' THEN EVE.INDICE 
--            WHEN EVE.UNIDADE = 'D' THEN EVE.INDICE 
--       ELSE 0 END 
--     ELSE 0 END AS FLOAT) AS FATORRUBR
    , 0 AS QTDRUBR
    , 0 AS FATORRUBR
    , CAST(NULL AS FLOAT) AS VRUNIT
    , CAST(FOL.VLREVENTO AS FLOAT) AS VRRUBR
    , BASE.DTTERCEIRAFASE
    FROM VGF_EVENTO_BASEFOLHA BASE
    JOIN TFPTFOL FOL
      ON BASE.CODEMPFUNC = FOL.CODEMP
     AND BASE.CODFUNC = FOL.CODFUNC
     AND BASE.DTREF = FOL.REFERENCIA
     AND BASE.IDEDMDEV = FOL.TIPFOLHA  
     AND BASE.CODPARC = FOL.CODPARC
     AND BASE.IDEDMDEV NOT IN ('O', 'C')
   JOIN TFPEVE EVE 
      ON EVE.CODEVENTO = FOL.CODEVENTO
     AND EVE.USADOESOCIAL = 'S'
     AND EVE.ACUMULADOR = 'N'
     AND EVE.CODNATRUBRICA NOT IN (9203, 9213) /* IRRF E PENSÃO ALIMENTICIA NÃO ENTRAM NESTE REGISTRO */
     AND EVE.BASELIQUIDO = 'S'
    JOIN VGF_EVENTO_S1010 S10 
      ON S10.CODEVENTO = EVE.CODEVENTO 
     AND S10.CODINCCP NOT IN ('23', '24', '61')
     AND S10.CODINCIRRF NOT IN ('31', '32', '33', '34', '35', '51', '52', '53', '54', '55', '81', '82', '83')
     AND (S10.CODINCCP NOT IN ('25', '26', '51') OR BASE.CODCATEG NOT BETWEEN 701 AND 905) --701 AND 905 =contribuinte individual ou bolsistas

/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54033-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_BASERUBRICA_PA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_BASERUBRICA_PA
NomeObjeto: VGF_EVENTO_BASERUBRICA_PA
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_BASERUBRICA_PA
AS
   SELECT BASE.CODEMP,
          BASE.CODEMPFUNC,
          BASE.CODFUNC,
          BASE.DTREF,
          BASE.IDEDMDEV,
          BASE.MATRICULA,
          CASE
             WHEN NVL (FOL.CODPARC, 0) = 0 OR BASE.CODPARCEMP = FOL.CODPARC
             THEN
                'E' || FOL.CODEMP
             ELSE
                'T' || FOL.CODPARC
          END
             AS CODLOTACAO,
          CAST (TO_CHAR (FOL.REFERENCIAORIG, 'YYYY-MM') AS VARCHAR2 (100))
             AS PERREF,
          CAST (FOL.CODEVENTO AS VARCHAR2 (100)) AS CODRUBR,
          BASE.CODCATEG,
          BASE.DTDEM,
          (SELECT INDSIMPLES
             FROM TFPEMP EM
            WHERE EM.CODEMP = BASE.CODEMP)
             AS INDSIMPLES,
          BASE.GRAUEXP,
          FOL.CODPARC,
          BASE.CODCONV,
          BASE.CHAVE1200,
          BASE.CHAVEDESLIG,
          CAST (
             CASE
                WHEN BASE.IDEDMDEV = 'C'
                THEN
                   'F'
                ELSE
                      CNV.TPACCONV
                   || ':'
                   || BASE.CODSIND
                   || ':'
                   || BASE.PROCESSO
             END AS VARCHAR2 (100))
             AS CHAVE1200_PA_ADC,
          CAST(CASE WHEN BASE.IDEDMDEV = 'C' THEN 'F' ELSE CNV.TPACCONV || ':' || BASE.CODSIND || ':' || BASE.PROCESSO END AS VARCHAR2(100)) AS CHAVE2299_PA_ADC,
          CASE
             WHEN BASE.IDEDMDEV = 'C' THEN CAST (NULL AS DATE)
             ELSE CNV.DTASSINATURA
          END
             AS DTACCONV,
          CASE WHEN BASE.IDEDMDEV = 'C' THEN 'F' ELSE CNV.TPACCONV END
             AS TPACCONV,
          CASE
             WHEN BASE.IDEDMDEV = 'C' THEN CAST (NULL AS VARCHAR2 (7))
             ELSE TO_CHAR (BASE.DTREF, 'YYYY-MM')
          END
             AS COMPACCONV,
          CASE
             WHEN BASE.IDEDMDEV = 'C' THEN CAST (NULL AS DATE)
             ELSE CNV.DTEFACCONV
          END
             AS DTEFACCONV,
          CASE
             WHEN BASE.IDEDMDEV = 'C' THEN BASE.DSC
             ELSE NVL (CNV.DSC, CAST (CNV.CARACTERISTICA AS VARCHAR2 (255)))
          END
             AS DSC,
          CASE WHEN BASE.CNPJEMPREGANT IS NOT NULL THEN 'S' ELSE 'N' END
             AS REMUNSUC,
          BASE.TPINSCESTABELECIMENTO,
          BASE.NRINSCESTABELECIMENTO,
          EVE.CODEVENTO AS IDETABRUBR --    , CAST( CASE WHEN EVE.BASELIQUIDO = 'S' THEN
            --       CASE WHEN EVE.UNIDADE = 'H' THEN HR2DEC(FOL.INDICE * 100)
 --            WHEN EVE.UNIDADE = 'Q' AND EVE.BASEINFREND NOT IN ('J','G') THEN FOL.INDICE
 --            WHEN EVE.IDENTIFICACAO NOT IN (101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,129,130,135,136,145,146,154,155,163) AND EVE.UNIDADE = 'D' THEN FOL.INDICE
                                                           --       ELSE 0 END
                                        --     ELSE 0 END AS FLOAT) AS QTDRUBR
                              --    ,CAST(CASE WHEN EVE.BASELIQUIDO = 'S' THEN
 --       CASE WHEN EVE.IDENTIFICACAO IN (101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,129,130,135,136,145,146,154,155,163) THEN FOL.INDICE
 --            WHEN EVE.UNIDADE = 'H' AND EVE.INDICE > 0 THEN (EVE.INDICE - 1) * 100
                          --            WHEN EVE.UNIDADE = 'Q' THEN EVE.INDICE
                          --            WHEN EVE.UNIDADE = 'D' THEN EVE.INDICE
                                                           --       ELSE 0 END
                                      --     ELSE 0 END AS FLOAT) AS FATORRUBR
          ,
          0 AS QTDRUBR,
          0 AS FATORRUBR,
          CAST (NULL AS FLOAT) AS VRUNIT,
          CAST (FOL.VLREVENTO AS FLOAT) AS VRRUBR,
          BASE.GERARPARESCISAO,
          BASE.DTTERCEIRAFASE
     FROM VGF_EVENTO_BASEFOLHA BASE
          JOIN
          TFPTFOL FOL
             ON     BASE.CODEMPFUNC = FOL.CODEMP
                AND BASE.CODFUNC = FOL.CODFUNC
                AND BASE.DTREF = FOL.REFERENCIA
                AND BASE.IDEDMDEV = FOL.TIPFOLHA
                AND BASE.IDEDMDEV IN ('O', 'C')
          JOIN
          TFPEVE EVE
             ON     EVE.CODEVENTO = FOL.CODEVENTO
                AND EVE.USADOESOCIAL = 'S'
                AND EVE.ACUMULADOR = 'N'
                AND EVE.CODNATRUBRICA NOT IN (9203, 9213) /* IRRF E PENSÃO ALIMENTICIA NÃO ENTRAM NESTE REGISTRO */
                AND EVE.BASELIQUIDO = 'S'
          JOIN
          VGF_EVENTO_S1010 S10
             ON     S10.CODEVENTO = EVE.CODEVENTO
                AND S10.CODINCCP NOT IN ('23', '24', '61')
                AND S10.CODINCIRRF NOT IN
                       ('31',
                        '32',
                        '33',
                        '34',
                        '35',
                        '51',
                        '52',
                        '53',
                        '54',
                        '55',
                        '81',
                        '82',
                        '83')
                AND (   S10.CODINCCP NOT IN ('25', '26', '51')
                     OR BASE.CODCATEG NOT BETWEEN 701 AND 905) --701 AND 905 =contribuinte individual ou bolsistas
          LEFT JOIN TFPCNV CNV
             ON CNV.CODSIND = BASE.CODSIND AND CNV.PROCESSO = BASE.PROCESSO

/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54034-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S1200_BASE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S1200_BASE
NomeObjeto: VGF_EVENTO_S1200_BASE
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1200_BASE
AS
   /*REPRESENTA O EVENTO EVTREMUN*/
   SELECT DISTINCT
          BASE.CODEMP,
          BASE.DTREF,
          BASE.TPINSCEMPREGADOR,
          BASE.NRINSCEMPREGADOR,
          BASE.TPINSCESTABELECIMENTO,
          BASE.NRINSCESTABELECIMENTO,
          BASE.CODEMPFUNC,
          BASE.CODFUNC,
          CAST(BASE.MATRICULA AS VARCHAR2(100)) AS MATRICULA,
          BASE.CPF,
          BASE.PIS,
          BASE.CODCATEG,
          BASE.INDAPURACAO,
          BASE.CHAVE1200,
          CAST(BASE.IDEDMDEV AS VARCHAR2(100)) AS IDEDMDEV,
          BASE.CODPARCEMP,
          CAST(BASE.CODLOTACAO AS VARCHAR2(100)) AS CODLOTACAO,
          BASE.QTDDIASAV,
          BASE.CODPARC,
          BASE.GRAUEXP,
          BASE.PERAPUR,
          BASE.INDMV,
          BASE.NMTRAB,
          BASE.DTNASCTO,
          BASE.CNPJEMPREGANT,
          BASE.MATRICANT,
          BASE.DTADM,
          BASE.OBSERVACAO,
          BASE.CODCBO,
          BASE.NATATIVIDADE,
          BASE.QTDDIASINTERM,
          BASE.QTDDIASTRAB,
          BASE.CODSIND,
          BASE.PROCESSO,
          BASE.DSC,
          BASE.CODCONV
     FROM VGF_EVENTO_BASEFOLHA BASE
    WHERE BASE.IDEDMDEV <> 'R'
      AND BASE.GERARPARESCISAO = 'N'
      AND BASE.DTREF >= TRUNC(BASE.DTTERCEIRAFASE,'MM')

/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54035-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS1200
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS1200
NomeObjeto: TFPS1200
TipoObjeto: TABLE
NomeTabela: TFPS1200
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS1200( /*REPRESENTA O EVENTO EVTREMUN*/
    CODEMP            NUMBER(5),
    DTREF             DATE,
    SEQUENCIA         NUMBER(5),
    CHAVE             VARCHAR2(100) NOT NULL, /*INDAPURACAO:CPFTRAB*/
    INDAPURACAO       NUMBER(5),
    PERAPUR           VARCHAR2(7),
    TPINSC            NUMBER(5),
    NRINSC            VARCHAR2(15),
    CPFTRAB           VARCHAR2(11),
    NISTRAB           VARCHAR2(11),
    INDMV             NUMBER(5),
    NMTRAB            VARCHAR2(70),
    DTNASCTO          DATE,
    CODCBO            VARCHAR2(6),
    NATATIVIDADE      NUMBER(5),
    QTDDIASTRAB       NUMBER(5),
    CNPJEMPREGANT     VARCHAR2(14),
    MATRICANT         VARCHAR2(30),
    DTADM             DATE,
    OBSERVACAO        VARCHAR2(255),
    QTDDIASINTERM     NUMBER(5),
    STATUS            CHAR(1) NOT NULL,
    NRORECIBO         VARCHAR2(40), /*NRRECIBO*/
    NRORECIBO_ANT     VARCHAR2(40), /*NRRECIBO*/
    ACAO              CHAR(1),
    CONTROLE          CHAR(1) DEFAULT 'I' NOT NULL,
    TPAMB             CHAR(1) DEFAULT 'T' NOT NULL,
    CONSTRAINT PK_TFPS1200 PRIMARY KEY (CODEMP, DTREF, SEQUENCIA, TPAMB, CHAVE),
    CONSTRAINT CHK_STATUS_TFPS1200 CHECK (STATUS IN ('P','I', 'E', 'F', 'X')), /*P=PENDENTE I=INCLUÍDO E=ENVIADO F=FINALIZADO X=FINAL.C/ERRO */ 
    CONSTRAINT CHK_ACAO_TFPS1200 CHECK (ACAO IN ('I', 'A', 'E')), /*'I'=INCLUÍR 'A=ALTERAR 'E=EXCLUIR */
    CONSTRAINT CHK_CONTROLE_TFPS1200 CHECK (CONTROLE IN ('I', 'A', 'E')),
    CONSTRAINT CHK_TPAMB_TFPS1200 CHECK (TPAMB IN ('P', 'T')) /* P = PRODUCAO T = TESTE */
)

/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54036-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S1200
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S1200
NomeObjeto: VGF_EVENTO_S1200
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1200
AS
   SELECT DISTINCT
          BASE.CODEMP,
          BASE.DTREF,
          CAST(CAST(BASE.INDAPURACAO AS CHAR(1)) || ':' || CAST(BASE.CPF AS VARCHAR2 (11)) AS VARCHAR2(100)) AS "CHAVE",
          BASE.INDAPURACAO,
          BASE.PERAPUR,
          BASE.TPINSCEMPREGADOR AS TPINSC,
          BASE.NRINSCEMPREGADOR AS NRINSC,
          BASE.CPF AS "CPFTRAB",
          BASE.PIS AS "NISTRAB",
          MAX(BASE.INDMV) AS INDMV,
          CASE WHEN MAX(BASE.DTNASCTO) = BASE.DTREF THEN NULL ELSE MAX(BASE.NMTRAB) END AS NMTRAB,
          CASE WHEN MAX(BASE.DTNASCTO) = BASE.DTREF THEN NULL ELSE MAX(BASE.DTNASCTO) END AS DTNASCTO,
          CASE WHEN MAX(BASE.DTNASCTO) = BASE.DTREF THEN NULL ELSE MAX(BASE.CODCBO) END AS CODCBO,
          CASE WHEN MAX(BASE.DTNASCTO) = BASE.DTREF THEN NULL ELSE MAX(BASE.NATATIVIDADE) END AS NATATIVIDADE,
          CASE WHEN MAX(BASE.DTNASCTO) = BASE.DTREF THEN NULL ELSE MAX(BASE.QTDDIASTRAB) END AS QTDDIASTRAB,
          BASE.CNPJEMPREGANT,
          CAST(BASE.MATRICANT AS VARCHAR2(30)) AS MATRICANT,
          BASE.DTADM,
          CAST (BASE.OBSERVACAO AS VARCHAR2(255)) AS OBSERVACAO,
          BASE.QTDDIASINTERM
     FROM VGF_EVENTO_S1200_BASE BASE
	 GROUP BY
          BASE.CODEMP,
          BASE.DTREF,
          BASE.INDAPURACAO,
          BASE.PERAPUR,
          BASE.TPINSCEMPREGADOR,
          BASE.NRINSCEMPREGADOR,
          BASE.CPF,
          BASE.PIS,
          BASE.CNPJEMPREGANT,
          BASE.MATRICANT,
          BASE.DTADM,
          BASE.OBSERVACAO,
          BASE.QTDDIASINTERM
	 
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54037-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS1200_REMOUTREMPRE 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS1200_REMOUTREMPRE 
NomeObjeto: TFPS1200_REMOUTREMPRE 
TipoObjeto: TABLE
NomeTabela: TFPS1200_REMOUTREMPRE 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS1200_REMOUTREMPRE ( /*INFORMAÇÕES RELATIVAS AO TRABALHADOR QUE POSSUI VÍNCULO EMPREGATÍCIO COM OUTRA(S) EMPRESA(S) - */
    CODEMP            NUMBER(5),
    DTREF             DATE,
    TPAMB             CHAR(1),
    SEQUENCIA         NUMBER(5),
    CHAVE1200         VARCHAR2(100), /*CHAVEPAI*/
    CHAVE             VARCHAR2(100), /*NRINSC:CODCATEG*/
    TPINSC            NUMBER(5),
    NRINSC            VARCHAR2(15),
    CODCATEG          NUMBER(5),
    VLRREMUNOE        FLOAT,
    CONSTRAINT PK_TFPS1200_REMOUTREMPRE PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, CHAVE),
    CONSTRAINT FK_REMOUTREMPRE_TFPS1200 FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200) REFERENCES TFPS1200(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE) ON DELETE CASCADE
)

/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54038-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S1200_REMOUTREMPRE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S1200_REMOUTREMPRE
NomeObjeto: VGF_EVENTO_S1200_REMOUTREMPRE
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1200_REMOUTREMPRE
AS
/*INFORMAÇÕES RELATIVAS AO TRABALHADOR QUE POSSUI VÍNCULO EMPREGATÍCIO COM OUTRA(S) EMPRESA(S) - */
SELECT 
  BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE1200
, CAST (ROE.CGCCPF || ':' || ROE.CODCATEG AS VARCHAR2 (100)) AS CHAVE
, CASE WHEN LENGTH (ROE.CGCCPF) = 14 THEN 1 ELSE 2 END AS TPINSC
, CAST(ROE.CGCCPF AS VARCHAR2(15)) AS NRINSC
, ROE.CODCATEG
, CAST(SUM(FOL.VLREVENTO) AS FLOAT) AS VLRREMUNOE
FROM (SELECT DISTINCT CODEMP,
                             DTREF,
                             CHAVE1200,
                             CODEMPFUNC,
                             CODFUNC,
                             IDEDMDEV
               FROM VGF_EVENTO_S1200_BASE) BASE
, TFPROE ROE
, TFPFOL FOL
WHERE BASE.CODEMPFUNC = ROE.CODEMP
  AND BASE.CODFUNC = ROE.CODFUNC
  AND FOL.CODEMP = BASE.CODEMPFUNC 
  AND FOL.CODFUNC = BASE.CODFUNC
  AND FOL.REFERENCIA = BASE.DTREF
  AND FOL.CODEVENTO IN (SELECT EVE.CODEVENTO FROM TFPEVE EVE WHERE EVE.IDENTIFICACAO = 178) /* EVENTO DE REMUNERAÇÃO OUTRAS EMPRESAS */
  AND FOL.SEQROE = ROE.SEQUENCIA
GROUP BY BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE1200
, ROE.CGCCPF 
, ROE.CODCATEG
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54039-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS1200_PROCJUD 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS1200_PROCJUD 
NomeObjeto: TFPS1200_PROCJUD 
TipoObjeto: TABLE
NomeTabela: TFPS1200_PROCJUD 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS1200_PROCJUD (
    CODEMP           NUMBER(5),
    DTREF            DATE,
    TPAMB            CHAR(1),
    SEQUENCIA        NUMBER(5),
    CHAVE1200        VARCHAR2(100), /*CHAVEPAI INDAPURACAO:CPFTRAB*/
    CHAVE            VARCHAR2(100),
    TPTRIB           NUMBER(5),
    NRPROCJUD        VARCHAR2(50),
    CODSUSP          VARCHAR2(14), /* SÓ ACEITA NUMEROS */
    CONSTRAINT PK_TFPS1200_PROCJUD PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, CHAVE),
    CONSTRAINT FK_PROCJUD_TFPS1200 FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200) REFERENCES TFPS1200(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE) ON DELETE CASCADE
)

/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 09/05/2018 08:50:58
Num.Script: 54040-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S1200_PROCJUD 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S1200_PROCJUD 
NomeObjeto: VGF_EVENTO_S1200_PROCJUD 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1200_PROCJUD 
AS
/* PROCJUDTRAB */
SELECT DISTINCT
  BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE1200
, CAST(PSS.NUPROCESSO AS VARCHAR2(100)) AS CHAVE
, PSS.ABRANPROCESSO AS TPTRIB
, CAST(PSS.NUMPROCESSO AS VARCHAR2(50)) AS NRPROCJUD
, CAST(PSS.NUPROCESSO AS VARCHAR2(14)) AS CODSUSP
FROM VGF_EVENTO_S1200_BASE BASE
, TFPPSS PSS
, TFPEPR EPR
, TFPFOL FOL
WHERE PSS.ABRANPROCESSO BETWEEN 1 AND 4
AND FOL.CODEMP = BASE.CODEMPFUNC 
AND FOL.CODFUNC = BASE.CODFUNC
AND FOL.REFERENCIA = BASE.DTREF
AND FOL.TIPFOLHA = BASE.IDEDMDEV
AND FOL.CODEVENTO = EPR.CODEVENTO
AND PSS.NUPROCESSO = EPR.NUPROCESSO

/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54041-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS1200_DMDEV
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS1200_DMDEV
NomeObjeto: TFPS1200_DMDEV
TipoObjeto: TABLE
NomeTabela: TFPS1200_DMDEV
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS1200_DMDEV(-- DEMONSTRATIVOS DE VALORES DEVIDOS AO TRABALHADOR, ATE 99 OCORRÊNCIAS
    CODEMP            NUMBER(5),
    DTREF            DATE,
    TPAMB            CHAR(1),
    SEQUENCIA        NUMBER(5),
    CHAVE1200         VARCHAR2(100), /*CHAVEPAI*/
    CHAVE            VARCHAR2(100), /*IDEDMDEV*/
    IDEDMDEV        VARCHAR2(30),
    CODCATEG        NUMBER(5),
    CODCBO            VARCHAR2(6),
    NATATIVIDADE    NUMBER(5),
    QTDDIASTRAB        NUMBER(5),
    CONSTRAINT PK_TFPS1200_DMDEV PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, CHAVE),
    CONSTRAINT FK_DMDEV_TFPS1200 FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200) REFERENCES TFPS1200(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54042-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S1200_DMDEV 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S1200_DMDEV 
NomeObjeto: VGF_EVENTO_S1200_DMDEV 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1200_DMDEV /* IDENTIFICAÇÃO DE CADA UM DOS DEMONSTRATIVOS DE VALORES DEVIDOS AO TRABALHADOR */
AS
SELECT DISTINCT
  BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE1200
, BASE.IDEDMDEV AS CHAVE
, CAST(BASE.IDEDMDEV AS VARCHAR2(30)) AS IDEDMDEV 
, BASE.CODCATEG
--  CASE WHEN MAX(BASE.DTNASCTO) = BASE.DTREF THEN NULL ELSE MAX(BASE.CODCBO) END AS CODCBO,
--  CASE WHEN MAX(BASE.DTNASCTO) = BASE.DTREF THEN NULL ELSE MAX(BASE.NATATIVIDADE) END AS NATATIVIDADE,
--  CASE WHEN MAX(BASE.DTNASCTO) = BASE.DTREF THEN NULL ELSE MAX(BASE.QTDDIASTRAB) END AS QTDDIASTRAB,
, BASE.CODCBO
, BASE.NATATIVIDADE
, BASE.QTDDIASTRAB
FROM VGF_EVENTO_S1200_BASE BASE

/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54043-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS1200_DMDEV_EL
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS1200_DMDEV_EL
NomeObjeto: TFPS1200_DMDEV_EL
TipoObjeto: TABLE
NomeTabela: TFPS1200_DMDEV_EL
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS1200_DMDEV_EL( /* ESTABELECIMENTO/LOTAÇÃO NO QUAL O TRABALHADOR POSSUI REMUNERAÇÃO NO PERÍODO DE APURAÇÃO*/
    CODEMP            NUMBER(5),
    DTREF             DATE,
    TPAMB             CHAR(1),
    SEQUENCIA         NUMBER(5),
    CHAVE1200         VARCHAR2(100),  /*CHAVEAVO*/
    IDEDMDEV          VARCHAR2(100),  /*CHAVEPAI*/
    CHAVE             VARCHAR2(100), /*CODLOTACAO*/
    TPINSC            NUMBER(5),
    NRINSC            VARCHAR2(15),
    CODLOTACAO        VARCHAR2(30),
    QTDDIASAV         NUMBER(5),
    CONSTRAINT PK_TFPS1200_DMDEV_EL PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, IDEDMDEV, CHAVE),
    CONSTRAINT FK_EL_TFPS1200_DMDEV FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, IDEDMDEV) REFERENCES TFPS1200_DMDEV(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, CHAVE) ON DELETE CASCADE
)

/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 09/05/2018 10:04:52
Num.Script: 54044-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S1200_DMDEV_EL 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S1200_DMDEV_EL 
NomeObjeto: VGF_EVENTO_S1200_DMDEV_EL 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1200_DMDEV_EL /* IDEESTABLOT */
AS
/* ESTABELECIMENTO/LOTAÇÃO NO QUAL O TRABALHADOR POSSUI REMUNERAÇÃO NO PERÍODO DE APURAÇÃO (IDEESTABLOT) */
SELECT DISTINCT
  BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE1200
, BASE.IDEDMDEV
, CAST(BASE.CODLOTACAO AS VARCHAR2(100)) AS CHAVE
, BASE.TPINSCESTABELECIMENTO AS TPINSC
, BASE.NRINSCESTABELECIMENTO AS NRINSC
, CAST(BASE.CODLOTACAO AS VARCHAR2(30)) AS CODLOTACAO     
, BASE.QTDDIASAV
FROM VGF_EVENTO_S1200_BASE BASE
            
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54045-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS1200_DMDEV_RPA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS1200_DMDEV_RPA
NomeObjeto: TFPS1200_DMDEV_RPA
TipoObjeto: TABLE
NomeTabela: TFPS1200_DMDEV_RPA
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS1200_DMDEV_RPA( /* INFORMAÇÕES RELATIVAS A REMUNERAÇÃO DO TRABALHADOR NO PERÍODO DE APURAÇÃO*/
    CODEMP            NUMBER(5),
    DTREF            DATE,
    TPAMB            CHAR(1),
    SEQUENCIA        NUMBER(5),
    CHAVE1200        VARCHAR2(100),         /*CHAVEBAVO*/
    IDEDMDEV         VARCHAR2(100),        /*CHAVEAVO*/
    CODLOTACAO       VARCHAR2(100),        /*CHAVEPAI*/
    CHAVE            VARCHAR2(100),        /*MATRICULA*/
    MATRICULA        VARCHAR2(30),
    INDSIMPLES        NUMBER(5),
    GRAUEXP            NUMBER(5),
    CONSTRAINT PK_TFPS1200_DMDEV_RPA PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, IDEDMDEV, CODLOTACAO, CHAVE),
    CONSTRAINT FK_RPA_TFPS1200_DMDEV_EL FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, IDEDMDEV, CODLOTACAO) REFERENCES TFPS1200_DMDEV_EL(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, IDEDMDEV, CHAVE) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 09/05/2018 08:52:19
Num.Script: 54046-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S1200_DMDEV_RPA 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S1200_DMDEV_RPA 
NomeObjeto: VGF_EVENTO_S1200_DMDEV_RPA 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1200_DMDEV_RPA /* REMUNPERAPUR */
AS
/* INFORMAÇÕES RELATIVAS A REMUNERAÇÃO DO TRABALHADOR NO PERÍODO DE APURAÇÃO (REMUNPERAPUR) */
SELECT DISTINCT
  BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE1200
, BASE.IDEDMDEV
, BASE.CODLOTACAO
, BASE.MATRICULA AS CHAVE
, CAST(BASE.MATRICULA AS VARCHAR2(30)) AS MATRICULA
, (SELECT INDSIMPLES FROM TFPEMP E WHERE E.CODEMP = BASE.CODEMP) AS INDSIMPLES
, BASE.GRAUEXP
FROM VGF_EVENTO_S1200_BASE BASE
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54047-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS1200_DMDEV_IRPA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS1200_DMDEV_IRPA
NomeObjeto: TFPS1200_DMDEV_IRPA
TipoObjeto: TABLE
NomeTabela: TFPS1200_DMDEV_IRPA
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS1200_DMDEV_IRPA( /* REGISTRO QUE RELACIONA AS RUBRICAS QUE COMPÕEM A REMUNERAÇÃO DO TRABALHADOR. */
    CODEMP            NUMBER(5),
    DTREF             DATE,
    TPAMB             CHAR(1),
    SEQUENCIA         NUMBER(5),
    CHAVE1200         VARCHAR2(100),
    IDEDMDEV          VARCHAR2(100),
    CODLOTACAO        VARCHAR2(100),
    MATRICULA         VARCHAR2(100),    /*CHAVEPAI*/
    CHAVE             VARCHAR2(100), /*CODRUBR*/
    CODRUBR           VARCHAR2(30),
    IDETABRUBR        VARCHAR2(8),
    QTDRUBR           FLOAT, /*(6,2)*/
    FATORRUBR         FLOAT, /*(5,2)*/
    VRUNIT            FLOAT, /*(14,2)*/
    VRRUBR            FLOAT,    /*(14,2)*/
    CONSTRAINT PK_TFPS1200_DMDEV_IRPA PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, IDEDMDEV, CODLOTACAO, MATRICULA, CHAVE),
    CONSTRAINT FK_I_TFPS1200_DMDEV_RPA FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, IDEDMDEV, CODLOTACAO, MATRICULA) REFERENCES TFPS1200_DMDEV_RPA(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, IDEDMDEV, CODLOTACAO, CHAVE) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54048-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S1200_DMDEV_IRPA 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S1200_DMDEV_IRPA 
NomeObjeto: VGF_EVENTO_S1200_DMDEV_IRPA 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1200_DMDEV_IRPA /* ITENSREMUN */
AS
 /* REGISTRO QUE RELACIONA AS RUBRICAS QUE COMPÕEM A REMUNERAÇÃO DO TRABALHADOR.(ITENSREMUN) */
SELECT   
  RUB.CODEMP
, RUB.DTREF
, RUB.CHAVE1200
, RUB.IDEDMDEV
, RUB.CODLOTACAO
, RUB.MATRICULA
, RUB.CODRUBR AS CHAVE
, CAST(RUB.CODRUBR AS VARCHAR2(30)) AS CODRUBR
, CAST(RUB.IDETABRUBR AS VARCHAR2(8)) AS IDETABRUBR
, CAST(MAX(RUB.QTDRUBR) AS FLOAT) AS QTDRUBR
, CAST(RUB.FATORRUBR AS FLOAT) AS FATORRUBR
, CAST(RUB.VRUNIT AS FLOAT) AS VRUNIT
, CAST(SUM(RUB.VRRUBR) AS FLOAT) AS VRRUBR
FROM VGF_EVENTO_BASERUBRICA RUB
WHERE RUB.IDEDMDEV <> 'R'
  AND RUB.DTREF >= TRUNC(RUB.DTTERCEIRAFASE,'MM')
GROUP BY
  RUB.CODEMP
, RUB.DTREF
, RUB.CHAVE1200
, RUB.IDEDMDEV
, RUB.CODLOTACAO
, RUB.MATRICULA
, RUB.CODRUBR
, RUB.IDETABRUBR
, RUB.FATORRUBR
, RUB.VRUNIT
, RUB.CODEMPFUNC 
, RUB.CODFUNC

/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54049-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS1200_DMDEV_TRPA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS1200_DMDEV_TRPA
NomeObjeto: TFPS1200_DMDEV_TRPA
TipoObjeto: TABLE
NomeTabela: TFPS1200_DMDEV_TRPA
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS1200_DMDEV_TRPA( /* Informações da(s) convocação(ões) de trabalho intermitente */
    CODEMP            NUMBER(5),
    DTREF             DATE,
    TPAMB             CHAR(1),
    SEQUENCIA         NUMBER(5),
    CHAVE1200         VARCHAR2(100),
    IDEDMDEV          VARCHAR2(100),
    CODLOTACAO        VARCHAR2(100),
    MATRICULA         VARCHAR2(100),    /*CHAVEPAI*/
    CHAVE             VARCHAR2(100), /*codConv*/
    CODCONV           VARCHAR2(30),
    CONSTRAINT PK_TFPS1200_DMDEV_TRPA PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, IDEDMDEV, CODLOTACAO, MATRICULA, CHAVE),
    CONSTRAINT FK_T_TFPS1200_DMDEV_RPA FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, IDEDMDEV, CODLOTACAO, MATRICULA) REFERENCES TFPS1200_DMDEV_RPA(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, IDEDMDEV, CODLOTACAO, CHAVE) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 09/05/2018 10:06:53
Num.Script: 54050-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S1200_DMDEV_TRPA 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S1200_DMDEV_TRPA 
NomeObjeto: VGF_EVENTO_S1200_DMDEV_TRPA 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1200_DMDEV_TRPA /* infoInterm */
AS
SELECT DISTINCT
  BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE1200
, BASE.IDEDMDEV
, BASE.CODLOTACAO
, BASE.MATRICULA
, CAST(BASE.CODCONV AS VARCHAR2(100)) AS CHAVE
, BASE.CODCONV
FROM VGF_EVENTO_S1200_BASE BASE
WHERE BASE.CODCONV IS NOT NULL

/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54051-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS1200_DMDEV_DRPA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS1200_DMDEV_DRPA
NomeObjeto: TFPS1200_DMDEV_DRPA
TipoObjeto: TABLE
NomeTabela: TFPS1200_DMDEV_DRPA
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS1200_DMDEV_DRPA( /* Detalhamento dos valores pagos a Operadoras de Planos de Saúde. */
    CODEMP            NUMBER(5),
    DTREF            DATE,
    TPAMB            CHAR(1),
    SEQUENCIA        NUMBER(5),
    CHAVE1200       VARCHAR2(100),
    IDEDMDEV        VARCHAR2(100),
    CODLOTACAO        VARCHAR2(100),
    MATRICULA        VARCHAR2(100),    
    CHAVE            VARCHAR2(100), /*cnpjOper*/
    CNPJOPER        VARCHAR2(14),
    REGANS            VARCHAR2(6),
    VRPGTIT            FLOAT, /*(14,2)*/
    CONSTRAINT PK_TFPS1200_DMDEV_DRPA PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, IDEDMDEV, CODLOTACAO, MATRICULA, CHAVE),
    CONSTRAINT FK_D_TFPS1200_DMDEV_RPA FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, IDEDMDEV, CODLOTACAO, MATRICULA) REFERENCES TFPS1200_DMDEV_RPA(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, IDEDMDEV, CODLOTACAO, CHAVE) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54052-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S1200_DMDEV_DRPA 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S1200_DMDEV_DRPA 
NomeObjeto: VGF_EVENTO_S1200_DMDEV_DRPA 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1200_DMDEV_DRPA /* infoSaudeColet */
AS
     SELECT BASE.CODEMP,
            BASE.DTREF,
            BASE.CHAVE1200,
            BASE.IDEDMDEV,
            BASE.CODLOTACAO,
            BASE.MATRICULA,
            CAST(CON.CNPJ AS VARCHAR2(100)) AS CHAVE,
            CON.CNPJ AS CNPJOPER,
            CAST(SUBSTR(CON.REGANS,1,6) AS VARCHAR2(6)) AS REGANS,
            CAST(SUM (CASE WHEN VPS.SEQUENCIA = 0 THEN VPS.VALOR ELSE 0 END) AS FLOAT) AS VRPGTIT
       FROM VGF_EVENTO_S1200_BASE BASE, TFPTVPS VPS, TFPCON CON
      WHERE VPS.CODEMP = BASE.CODEMPFUNC
        AND VPS.CODFUNC = BASE.CODFUNC
        AND VPS.REFERENCIA = BASE.DTREF
        AND VPS.CODPARC = BASE.CODPARC
        AND CON.CODCONVENIO = VPS.CODCONVENIO
        AND EXISTS ( SELECT 1 FROM TFPFOL FOL
                      WHERE CODEVENTO IN (SELECT CODEVENTO FROM TFPEVE WHERE CODNATRUBRICA = 9219 AND USADOESOCIAL = 'S')
                        AND FOL.CODEMP = BASE.CODEMPFUNC
                        AND FOL.CODFUNC = BASE.CODFUNC
                        AND FOL.REFERENCIA = BASE.DTREF
                        AND FOL.TIPFOLHA = BASE.IDEDMDEV )
   GROUP BY BASE.CODEMP, BASE.DTREF, BASE.CHAVE1200, BASE.IDEDMDEV, BASE.CODLOTACAO, 
            BASE.MATRICULA, CON.CNPJ, CON.REGANS, BASE.CODEMPFUNC, BASE.CODFUNC
   ORDER BY BASE.CODEMP, BASE.DTREF, BASE.CHAVE1200, BASE.IDEDMDEV, BASE.CODLOTACAO,
            BASE.MATRICULA, CON.CNPJ
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54053-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS1200_DMDEV_DDRPA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS1200_DMDEV_DDRPA
NomeObjeto: TFPS1200_DMDEV_DDRPA
TipoObjeto: TABLE
NomeTabela: TFPS1200_DMDEV_DDRPA
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS1200_DMDEV_DDRPA( /* Informações do dependente do plano privado de saúde. */
    CODEMP            NUMBER(5),
    DTREF            DATE,
    TPAMB            CHAR(1),
    SEQUENCIA        NUMBER(5),
    CHAVE1200            VARCHAR2(100),
    IDEDMDEV        VARCHAR2(100),
    CODLOTACAO        VARCHAR2(100),
    MATRICULA        VARCHAR2(100),
    CNPJOPER        VARCHAR2(100),    
    CHAVE            VARCHAR2(100), /*nmDep porque pode ser que o dependente não tenha  cpf, talvez possamos utilizar algum identificador do sistema*/
    TPDEP            VARCHAR2(2),
    CPFDEP            VARCHAR2(11),
    NMDEP            VARCHAR2(70),
    DTNASCTO        DATE,
    VLRPGDEP        FLOAT, /*(14,2)*/
    CONSTRAINT PK_TFPS1200_DMDEV_DDRPA PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, IDEDMDEV, CODLOTACAO, MATRICULA, CNPJOPER, CHAVE),
    CONSTRAINT FK_D_TFPS1200_DMDEV_DRPA FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, IDEDMDEV, CODLOTACAO, MATRICULA, CNPJOPER) REFERENCES TFPS1200_DMDEV_DRPA(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, IDEDMDEV, CODLOTACAO, MATRICULA, CHAVE) ON DELETE CASCADE
)

/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54054-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S1200_DMDEV_DDRPA 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S1200_DMDEV_DDRPA 
NomeObjeto: VGF_EVENTO_S1200_DMDEV_DDRPA 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1200_DMDEV_DDRPA /* infoSaudeColet/detPlano  */
AS
SELECT
  BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE1200
, BASE.IDEDMDEV
, BASE.CODLOTACAO
, BASE.MATRICULA
, CAST(CON.CNPJ AS VARCHAR2(100)) AS CNPJOPER
, CAST (DPD.SEQUENCIA AS VARCHAR2(100)) AS "CHAVE"
, CAST(CASE 
    WHEN DPD.GRAUPARENTESCO = 1 THEN 3 
    WHEN DPD.GRAUPARENTESCO = 2 THEN 1 
    WHEN DPD.GRAUPARENTESCO = 3 THEN 9 
    WHEN DPD.GRAUPARENTESCO = 6 THEN 11
    WHEN DPD.GRAUPARENTESCO = 9 THEN 6
    WHEN DPD.GRAUPARENTESCO = 11 THEN 10 
    WHEN DPD.GRAUPARENTESCO = 12 THEN 2 
    WHEN DPD.GRAUPARENTESCO = 13 THEN 4 
    WHEN DPD.GRAUPARENTESCO = 14 THEN 12 
    ELSE 99 END AS VARCHAR2(2)) AS TPDEP
, DPD.CPF AS CPFDEP
, CAST(DPD.NOMEDEPEND AS VARCHAR2(70)) AS NMDEP
, DPD.DTNASC AS DTNASCTO
, CAST(SUM(CASE WHEN VPS.SEQUENCIA <> 0 THEN VPS.VALOR ELSE 0 END) AS FLOAT) AS VLRPGDEP
       FROM VGF_EVENTO_S1200_BASE BASE, TFPTVPS VPS, TFPCON CON, TFPDPD DPD
      WHERE VPS.CODEMP = BASE.CODEMPFUNC
        AND VPS.CODFUNC = BASE.CODFUNC
        AND VPS.REFERENCIA = BASE.DTREF
        AND VPS.CODPARC = BASE.CODPARC
        AND CON.CODCONVENIO = VPS.CODCONVENIO
        AND EXISTS ( SELECT 1 FROM TFPFOL FOL
                      WHERE CODEVENTO IN (SELECT CODEVENTO FROM TFPEVE WHERE CODNATRUBRICA = 9219 AND USADOESOCIAL = 'S')
                        AND FOL.CODEMP = BASE.CODEMPFUNC
                        AND FOL.CODFUNC = BASE.CODFUNC
                        AND FOL.REFERENCIA = BASE.DTREF
                        AND FOL.TIPFOLHA = BASE.IDEDMDEV )
    AND VPS.CODEMP = DPD.CODEMP
    AND VPS.CODFUNC = DPD.CODFUNC
    AND VPS.SEQUENCIA = DPD.SEQUENCIA
GROUP BY CON.CNPJ 
, BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE1200
, BASE.IDEDMDEV
, BASE.CODLOTACAO
, BASE.MATRICULA
, CON.REGANS 
, VPS.CODEMP
, VPS.CODFUNC
, VPS.REFERENCIA
, CASE 
    WHEN DPD.GRAUPARENTESCO = 1 THEN 3 
    WHEN DPD.GRAUPARENTESCO = 2 THEN 1 
    WHEN DPD.GRAUPARENTESCO = 3 THEN 9 
    WHEN DPD.GRAUPARENTESCO = 6 THEN 11
    WHEN DPD.GRAUPARENTESCO = 9 THEN 6
    WHEN DPD.GRAUPARENTESCO = 11 THEN 10 
    WHEN DPD.GRAUPARENTESCO = 12 THEN 2 
    WHEN DPD.GRAUPARENTESCO = 13 THEN 4 
    WHEN DPD.GRAUPARENTESCO = 14 THEN 12 
    ELSE 99 END 
, DPD.CPF 
, DPD.SEQUENCIA
, DPD.NOMEDEPEND 
, DPD.DTNASC 
, BASE.CODEMPFUNC
, BASE.CODFUNC

/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54055-0-0
Nro. O.S. : 1175714
Nome      : Script - NOMEEVENTO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : SCRIPT _ NOMEEVENTO
NomeObjeto: NOMEEVENTO
TipoObjeto: COLUMN
NomeTabela: TFPMON
Executar  : SE_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
           
    EXECUTE IMMEDIATE  'DELETE FROM TFPMON WHERE NOMEEVENTO LIKE ''S-1200%''';

    EXECUTE IMMEDIATE  'DELETE FROM TFPMON WHERE NOMEEVENTO LIKE ''S-1210%''';
    
    EXECUTE IMMEDIATE  'DELETE FROM TFPMON WHERE NOMEEVENTO LIKE ''S-2399%''';

    EXECUTE IMMEDIATE  'DELETE FROM TFPMON WHERE NOMEEVENTO LIKE ''S-2299%''';

END;
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 14/05/2018 17:07:38
Num.Script: 54056-0-0
Nro. O.S. : 1175714
Nome      : Script - TFPMON
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - TFPMON
NomeObjeto: TFPMON
TipoObjeto: TABLE
NomeTabela: TFPMON
Executar  : SE_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
    P_COUNT     NUMBER(5);
BEGIN
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1200'
        AND NOMETAB = 'TFPS1200'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'R';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO)
        VALUES ('S-1200', 'TFPS1200', 'NRORECIBO', 'R');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1200'
        AND NOMETAB = 'TFPS1200'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'M';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW)
        VALUES ('S-1200', 'TFPS1200', 'NRORECIBO', 'M','VGF_EVENTO_S1200');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1200'
        AND NOMETAB = 'TFPS1200_REMOUTREMPRE'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'M';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
        VALUES ('S-1200', 'TFPS1200_REMOUTREMPRE', 'NRORECIBO', 'M','VGF_EVENTO_S1200_REMOUTREMPRE', 'TFPS1200');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1200'
        AND NOMETAB = 'TFPS1200_PROCJUD'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'M';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
        VALUES ('S-1200', 'TFPS1200_PROCJUD', 'NRORECIBO', 'M','VGF_EVENTO_S1200_PROCJUD', 'TFPS1200');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1200'
        AND NOMETAB = 'TFPS1200_DMDEV'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'M';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
        VALUES ('S-1200', 'TFPS1200_DMDEV', 'NRORECIBO', 'M','VGF_EVENTO_S1200_DMDEV', 'TFPS1200');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1200'
        AND NOMETAB = 'TFPS1200_DMDEV_EL'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'M';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
        VALUES ('S-1200', 'TFPS1200_DMDEV_EL', 'NRORECIBO', 'M','VGF_EVENTO_S1200_DMDEV_EL', 'TFPS1200_DMDEV');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1200'
        AND NOMETAB = 'TFPS1200_DMDEV_RPA'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'M';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
        VALUES ('S-1200', 'TFPS1200_DMDEV_RPA', 'NRORECIBO', 'M','VGF_EVENTO_S1200_DMDEV_RPA', 'TFPS1200_DMDEV_EL');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1200'
        AND NOMETAB = 'TFPS1200_DMDEV_IRPA'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'M';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
        VALUES ('S-1200', 'TFPS1200_DMDEV_IRPA', 'NRORECIBO', 'M','VGF_EVENTO_S1200_DMDEV_IRPA', 'TFPS1200_DMDEV_RPA');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1200'
        AND NOMETAB = 'TFPS1200_DMDEV_TRPA'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'M';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
        VALUES ('S-1200', 'TFPS1200_DMDEV_TRPA', 'NRORECIBO', 'M','VGF_EVENTO_S1200_DMDEV_TRPA', 'TFPS1200_DMDEV_RPA');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1200'
        AND NOMETAB = 'TFPS1200_DMDEV_DRPA'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'M';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
        VALUES ('S-1200', 'TFPS1200_DMDEV_DRPA', 'NRORECIBO', 'M','VGF_EVENTO_S1200_DMDEV_DRPA', 'TFPS1200_DMDEV_RPA');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1200'
        AND NOMETAB = 'TFPS1200_DMDEV_DDRPA'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'M';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
        VALUES ('S-1200', 'TFPS1200_DMDEV_DDRPA', 'NRORECIBO', 'M','VGF_EVENTO_S1200_DMDEV_DDRPA', 'TFPS1200_DMDEV_DRPA');
    END IF;  
END;
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54057-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S1200_BASE_PA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S1200_BASE_PA
NomeObjeto: VGF_EVENTO_S1200_BASE_PA
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1200_BASE_PA
AS
/*PERÍODO ANTERIOR */
/* IDENTIFICAÇÃO DO INSTRUMENTO OU SITUAÇÃO ENSEJADORA DA REMUNERAÇÃO RELATIVA A PERÍODOS DE APURAÇÃO ANTERIORES. */
SELECT DISTINCT
  BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE1200
, BASE.IDEDMDEV  
, BASE.CHAVE1200_PA_ADC
, BASE.DTACCONV
, BASE.TPACCONV
, BASE.COMPACCONV
, BASE.DTEFACCONV
, BASE.DSC 
, BASE.REMUNSUC
, BASE.TPINSCESTABELECIMENTO
, BASE.NRINSCESTABELECIMENTO
, BASE.CODLOTACAO
, BASE.MATRICULA 
, BASE.INDSIMPLES
, BASE.GRAUEXP
, BASE.CODPARC
, BASE.CODEMPFUNC
, BASE.CODFUNC
, BASE.CODCONV
, BASE.PERREF
, BASE.IDETABRUBR AS CODEVENTO
FROM VGF_EVENTO_BASERUBRICA_PA BASE
WHERE BASE.GERARPARESCISAO = 'N'
  AND BASE.DTREF >= TRUNC(BASE.DTTERCEIRAFASE,'MM')
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54058-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS1200_DMDEV_ADC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS1200_DMDEV_ADC
NomeObjeto: TFPS1200_DMDEV_ADC
TipoObjeto: TABLE
NomeTabela: TFPS1200_DMDEV_ADC
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS1200_DMDEV_ADC( /* IDENTIFICAÇÃO DO INSTRUMENTO OU SITUAÇÃO ENSEJADORA DA REMUNERAÇÃO RELATIVA A PERÍODOS DE APURAÇÃO ANTERIORES. */
    CODEMP            NUMBER(5),
    DTREF             DATE,
    TPAMB             CHAR(1),
    SEQUENCIA         NUMBER(5),
    CHAVE1200         VARCHAR2(100),
    IDEDMDEV          VARCHAR2(100),     
    CHAVE             VARCHAR2(100), /*TPACCONV : CODSIND : PROCESSO*/
    DTACCONV          DATE,
    TPACCONV          CHAR(1),
    COMPACCONV        VARCHAR2(7),
    DTEFACCONV        DATE,
    DSC               VARCHAR2(255),
    REMUNSUC          CHAR(1),
    CONSTRAINT PK_TFPS1200_DMDEV_ADC PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, IDEDMDEV, CHAVE), /*TPACCONV : CODSIND : PROCESSO*/
    CONSTRAINT FK_ADC_TFPS1200_DMDEV FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, IDEDMDEV) REFERENCES TFPS1200_DMDEV(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, CHAVE) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 09/05/2018 10:07:50
Num.Script: 54059-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S1200_DMDEV_ADC 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S1200_DMDEV_ADC 
NomeObjeto: VGF_EVENTO_S1200_DMDEV_ADC 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1200_DMDEV_ADC /* ideADC/infoPerAnt */
AS
SELECT DISTINCT
  BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE1200
, BASE.IDEDMDEV  
, BASE.CHAVE1200_PA_ADC AS CHAVE
, BASE.DTACCONV
, BASE.TPACCONV
, BASE.COMPACCONV
, BASE.DTEFACCONV
, BASE.DSC 
, BASE.REMUNSUC
FROM VGF_EVENTO_S1200_BASE_PA BASE

/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54060-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS1200_DMDEV_PADC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS1200_DMDEV_PADC
NomeObjeto: TFPS1200_DMDEV_PADC
TipoObjeto: TABLE
NomeTabela: TFPS1200_DMDEV_PADC
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS1200_DMDEV_PADC( /* IDENTIFICAÇÃO DO PERÍODO AO QUAL SE REFEREM AS DIFERENÇAS DE REMUNERAÇÃO.  PRREF */
    CODEMP             NUMBER(5),
    DTREF              DATE,
    TPAMB              CHAR(1),
    SEQUENCIA          NUMBER(5),
    CHAVE1200          VARCHAR2(100),
    IDEDMDEV           VARCHAR2(100),
    CHAVE1200_PA_ADC   VARCHAR2(100),    
    CHAVE              VARCHAR2(100), /*PERREF*/
    PERREF             VARCHAR2(7),
    CONSTRAINT PK_TFPS1200_DMDEV_PADC PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, IDEDMDEV, CHAVE1200_PA_ADC, CHAVE),/*PERREF*/
    CONSTRAINT FK_P_TFPS1200_DMDEV_ADC FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, IDEDMDEV, CHAVE1200_PA_ADC) REFERENCES TFPS1200_DMDEV_ADC(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, IDEDMDEV, CHAVE) ON DELETE CASCADE
)

/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54061-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S1200_DMDEV_PADC 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S1200_DMDEV_PADC 
NomeObjeto: VGF_EVENTO_S1200_DMDEV_PADC 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1200_DMDEV_PADC /* ideADC/infoPerAnt/idePeriodo  */
AS
SELECT DISTINCT
  BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE1200
, BASE.IDEDMDEV  
, BASE.CHAVE1200_PA_ADC
, BASE.PERREF AS CHAVE
, CAST(BASE.PERREF AS VARCHAR2(7)) AS PERREF
FROM VGF_EVENTO_S1200_BASE_PA BASE

/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54062-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS1200_DMDEV_IPADC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS1200_DMDEV_IPADC
NomeObjeto: TFPS1200_DMDEV_IPADC
TipoObjeto: TABLE
NomeTabela: TFPS1200_DMDEV_IPADC
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS1200_DMDEV_IPADC( /*O REGISTRO IDENTIFICA O ESTABELECIMENTO E LOTAÇÃO AO QUAL SE REFEREM AS DIFERENÇAS DE REMUNERAÇÃO DO MÊS IDENTIFICADO NO REGISTRO SUPERIOR  IDEESTABLOT */
    CODEMP             NUMBER(5),
    DTREF              DATE,
    TPAMB              CHAR(1),
    SEQUENCIA          NUMBER(5),
    CHAVE1200          VARCHAR2(100),
    IDEDMDEV           VARCHAR2(100),
    CHAVE1200_PA_ADC   VARCHAR2(100),
    PERREF             VARCHAR2(100),    
    CHAVE              VARCHAR2(100), /*CODLOTACAO*/
    TPINSC             NUMBER(5),
    NRINSC             VARCHAR2(15),
    CODLOTACAO         VARCHAR2(100),
    CONSTRAINT PK_TFPS1200_DMDEV_IPADC PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, IDEDMDEV, CHAVE1200_PA_ADC, PERREF, CHAVE), /*CODLOTACAO*/
    CONSTRAINT FK_I_TFPS1200_DMDEV_PADC FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, IDEDMDEV, CHAVE1200_PA_ADC, PERREF) REFERENCES TFPS1200_DMDEV_PADC(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, IDEDMDEV, CHAVE1200_PA_ADC, CHAVE) ON DELETE CASCADE
)

/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54063-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S1200_DMDEV_IPADC 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S1200_DMDEV_IPADC 
NomeObjeto: VGF_EVENTO_S1200_DMDEV_IPADC 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1200_DMDEV_IPADC /* ideADC/infoPerAnt/idePeriodo/ideEstabLot   */
AS
SELECT DISTINCT
  BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE1200
, BASE.IDEDMDEV  
, BASE.CHAVE1200_PA_ADC
, BASE.PERREF
, CAST(BASE.CODLOTACAO AS VARCHAR2(100)) AS CHAVE
, BASE.TPINSCESTABELECIMENTO AS TPINSC
, BASE.NRINSCESTABELECIMENTO AS NRINSC
, BASE.CODLOTACAO      
FROM VGF_EVENTO_S1200_BASE_PA BASE

/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54064-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS1200_DMDEV_RPADC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS1200_DMDEV_RPADC
NomeObjeto: TFPS1200_DMDEV_RPADC
TipoObjeto: TABLE
NomeTabela: TFPS1200_DMDEV_RPADC
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS1200_DMDEV_RPADC( /*INFORMAÇÕES RELATIVAS A REMUNERAÇÃO DO TRABALHADOR EM PERÍODOS ANTERIORES AO PERÍODO DE APURAÇÃO   REMUNPERANT */
    CODEMP             NUMBER(5),
    DTREF             DATE,
    TPAMB             CHAR(1),
    SEQUENCIA         NUMBER(5),
    CHAVE1200         VARCHAR2(100),
    IDEDMDEV         VARCHAR2(100),
    CHAVE1200_PA_ADC VARCHAR2(100),
    PERREF             VARCHAR2(100),
    CODLOTACAO         VARCHAR2(100),    
    CHAVE             VARCHAR2(100), /*MATRICULA*/
    MATRICULA         VARCHAR2(30),
    INDSIMPLES         NUMBER(5),
    GRAUEXP             NUMBER(5),
    CONSTRAINT PK_TFPS1200_DMDEV_RPADC PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, IDEDMDEV, CHAVE1200_PA_ADC, PERREF, CODLOTACAO, CHAVE), /*MATRICULA*/
    CONSTRAINT FK_R_TFPS1200_DMDEV_IPADC FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, IDEDMDEV, CHAVE1200_PA_ADC, PERREF, CODLOTACAO) REFERENCES TFPS1200_DMDEV_IPADC(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, IDEDMDEV, CHAVE1200_PA_ADC, PERREF, CHAVE) ON DELETE CASCADE
)

/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54065-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S1200_DMDEV_RPADC 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S1200_DMDEV_RPADC 
NomeObjeto: VGF_EVENTO_S1200_DMDEV_RPADC 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1200_DMDEV_RPADC /* ideADC/infoPerAnt/idePeriodo/ideEstabLo/remunPerAnt  */
AS
SELECT DISTINCT
  BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE1200
, BASE.IDEDMDEV  
, BASE.CHAVE1200_PA_ADC
, BASE.PERREF
, BASE.CODLOTACAO      
, BASE.MATRICULA AS CHAVE
, CAST(BASE.MATRICULA AS VARCHAR2(30)) AS MATRICULA
, BASE.INDSIMPLES
, BASE.GRAUEXP
FROM VGF_EVENTO_S1200_BASE_PA BASE
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54066-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS1200_DMDEV_IRPADC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS1200_DMDEV_IRPADC
NomeObjeto: TFPS1200_DMDEV_IRPADC
TipoObjeto: TABLE
NomeTabela: TFPS1200_DMDEV_IRPADC
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS1200_DMDEV_IRPADC( /*INFORMAÇÕES RELATIVAS A REMUNERAÇÃO DO TRABALHADOR EM PERÍODOS ANTERIORES AO PERÍODO DE APURAÇÃO   REMUNPERANT */
    CODEMP             NUMBER(5),
    DTREF              DATE,
    TPAMB              CHAR(1),
    SEQUENCIA          NUMBER(5),
    CHAVE1200          VARCHAR2(100),
    IDEDMDEV           VARCHAR2(100),
    CHAVE1200_PA_ADC   VARCHAR2(100),
    PERREF             VARCHAR2(100),
    CODLOTACAO         VARCHAR2(100),
    MATRICULA          VARCHAR2(100),    
    CHAVE              VARCHAR2(100), /*CODRUBR*/
    CODRUBR            VARCHAR2(30),
    IDETABRUBR         VARCHAR2(8),
    QTDRUBR            FLOAT, /*(6,2)*/
    FATORRUBR          FLOAT,    /*(5,2)*/
    VRUNIT             FLOAT, /*(14,2)*/
    VRRUBR             FLOAT, /*(14,2)*/
    CONSTRAINT PK_TFPS1200_DMDEV_IRPADC PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, IDEDMDEV, CHAVE1200_PA_ADC, PERREF, CODLOTACAO, MATRICULA, CHAVE),
    CONSTRAINT FK_I_TFPS1200_DMDEV_RPADC FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, IDEDMDEV, CHAVE1200_PA_ADC, PERREF, CODLOTACAO, MATRICULA) REFERENCES TFPS1200_DMDEV_RPADC(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, IDEDMDEV, CHAVE1200_PA_ADC, PERREF, CODLOTACAO, CHAVE) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54067-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S1200_DMDEV_IRPADC 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S1200_DMDEV_IRPADC 
NomeObjeto: VGF_EVENTO_S1200_DMDEV_IRPADC 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1200_DMDEV_IRPADC /* ideADC/infoPerAnt/idePeriodo/ideEstabLo/remunPerAnt/itensRemun   */
AS
SELECT   
  RUB.CODEMP
, RUB.DTREF
, RUB.CHAVE1200
, RUB.IDEDMDEV
, RUB.CHAVE1200_PA_ADC
, RUB.PERREF
, RUB.CODLOTACAO
, RUB.MATRICULA
, CAST(RUB.CODRUBR AS VARCHAR2(100)) AS CHAVE
, CAST(RUB.CODRUBR AS VARCHAR2(30)) AS CODRUBR
, CAST(RUB.IDETABRUBR AS VARCHAR2(8)) AS IDETABRUBR
, CAST(MAX(RUB.QTDRUBR) AS FLOAT) AS QTDRUBR
, CAST(RUB.FATORRUBR AS FLOAT) AS FATORRUBR
, CAST(RUB.VRUNIT AS FLOAT) AS VRUNIT
, CAST(SUM(RUB.VRRUBR) AS FLOAT) AS VRRUBR
FROM VGF_EVENTO_BASERUBRICA_PA RUB
WHERE RUB.IDEDMDEV <> 'R'
  AND RUB.GERARPARESCISAO = 'N'
  AND RUB.DTREF >= TRUNC(RUB.DTTERCEIRAFASE,'MM')
GROUP BY
  RUB.CODEMP
, RUB.DTREF
, RUB.CHAVE1200
, RUB.IDEDMDEV
, RUB.CHAVE1200_PA_ADC
, RUB.PERREF
, RUB.CODLOTACAO
, RUB.MATRICULA
, RUB.CODRUBR
, RUB.IDETABRUBR
, RUB.FATORRUBR
, RUB.VRUNIT
, RUB.CODEMPFUNC 
, RUB.CODFUNC

/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54068-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS1200_DMDEV_TRPADC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS1200_DMDEV_TRPADC
NomeObjeto: TFPS1200_DMDEV_TRPADC
TipoObjeto: TABLE
NomeTabela: TFPS1200_DMDEV_TRPADC
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS1200_DMDEV_TRPADC( /*INFORMAÇÕES DA(S) CONVOCAÇÃO(ÕES) DE TRABALHO INTERMITENTE INFOTRABINTERM */
    CODEMP             NUMBER(5),
    DTREF              DATE,
    TPAMB              CHAR(1),
    SEQUENCIA          NUMBER(5),
    CHAVE1200          VARCHAR2(100),
    IDEDMDEV           VARCHAR2(100),
    CHAVE1200_PA_ADC   VARCHAR2(100),
    PERREF             VARCHAR2(100),
    CODLOTACAO         VARCHAR2(100),
    MATRICULA          VARCHAR2(100),    
    CHAVE              VARCHAR2(100), /*CODCONV*/
    CODCONV            VARCHAR2(30),
    CONSTRAINT PK_TFPS1200_DMDEV_TRPADC PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, IDEDMDEV, CHAVE1200_PA_ADC, PERREF, CODLOTACAO, MATRICULA, CHAVE),
    CONSTRAINT FK_T_TFPS1200_DMDEV_RPADC FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, IDEDMDEV, CHAVE1200_PA_ADC, PERREF, CODLOTACAO, MATRICULA) REFERENCES TFPS1200_DMDEV_RPADC(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE1200, IDEDMDEV, CHAVE1200_PA_ADC, PERREF, CODLOTACAO, CHAVE) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54069-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S1200_DMDEV_TRPADC 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S1200_DMDEV_TRPADC 
NomeObjeto: VGF_EVENTO_S1200_DMDEV_TRPADC 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1200_DMDEV_TRPADC /* infoInterm  */
AS
SELECT DISTINCT
  BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE1200
, BASE.IDEDMDEV  
, BASE.CHAVE1200_PA_ADC
, BASE.PERREF
, BASE.CODLOTACAO      
, CAST(BASE.CODCONV AS VARCHAR2(100)) AS CHAVE
, BASE.CODCONV
FROM VGF_EVENTO_S1200_BASE_PA BASE
WHERE BASE.CODCONV IS NOT NULL
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54070-0-0
Nro. O.S. : 1175714
Nome      : Script - TFPMON
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - TFPMON
NomeObjeto: TFPMON
TipoObjeto: TABLE
NomeTabela: TFPMON
Executar  : SE_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
    P_COUNT     NUMBER(5);
BEGIN
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1200'
        AND NOMETAB = 'TFPS1200_DMDEV_ADC'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'M';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
        VALUES ('S-1200', 'TFPS1200_DMDEV_ADC', 'NRORECIBO', 'M','VGF_EVENTO_S1200_DMDEV_ADC', 'TFPS1200_DMDEV');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1200'
        AND NOMETAB = 'TFPS1200_DMDEV_PADC'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'M';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
        VALUES ('S-1200', 'TFPS1200_DMDEV_PADC', 'NRORECIBO', 'M','VGF_EVENTO_S1200_DMDEV_PADC', 'TFPS1200_DMDEV_ADC');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1200'
        AND NOMETAB = 'TFPS1200_DMDEV_IPADC'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'M';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
        VALUES ('S-1200', 'TFPS1200_DMDEV_IPADC', 'NRORECIBO', 'M','VGF_EVENTO_S1200_DMDEV_IPADC', 'TFPS1200_DMDEV_PADC'); 
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1200'
        AND NOMETAB = 'TFPS1200_DMDEV_RPADC'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'M';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
        VALUES ('S-1200', 'TFPS1200_DMDEV_RPADC', 'NRORECIBO', 'M','VGF_EVENTO_S1200_DMDEV_RPADC', 'TFPS1200_DMDEV_IPADC'); 
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1200'
        AND NOMETAB = 'TFPS1200_DMDEV_IRPADC'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'M';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
        VALUES ('S-1200', 'TFPS1200_DMDEV_IRPADC', 'NRORECIBO', 'M','VGF_EVENTO_S1200_DMDEV_IRPADC', 'TFPS1200_DMDEV_RPADC');
    END IF;
END;
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54071-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS2399
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS2399
NomeObjeto: TFPS2399
TipoObjeto: TABLE
NomeTabela: TFPS2399
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS2399(
    CODEMP                  NUMBER(5)   NOT NULL,
    DTREF                   DATE        NOT NULL,
    SEQUENCIA               NUMBER(5)   NOT NULL,
    TPINSCEMPREGADOR        NUMBER(5),
    NRINSCEMPREGADOR        VARCHAR2(15),
    CPFTRAB                 VARCHAR2(11),
    NISTRAB                 VARCHAR2(11),
    CODCATEG                NUMBER(5),
    DTTERMINO               DATE,
    MTVDESLIG               VARCHAR2(2),
    DTFIMQUAR               DATE, 
    INDMV                   NUMBER(5),
    STATUS                  CHAR(1)         NOT NULL,
    NRORECIBO               VARCHAR2(50), 
    NRORECIBO_ANT           VARCHAR2(50),
    ACAO                    CHAR(1),
    CHAVE                   VARCHAR2(100)   NOT NULL,
    CONTROLE                CHAR(1)         DEFAULT 'I' NOT NULL,
    TPAMB                   CHAR(1)         DEFAULT 'T' NOT NULL,
    CONSTRAINT PK_TFPS2399 PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE),
    CONSTRAINT CHK_STATUS_TFPS2399 CHECK (STATUS IN ('P','I', 'E', 'F', 'X')), /*'P'= PENDENTE 'I'=INCLUÃ?DO 'E=ENVIADO 'F=FINALIZADO, 'X-FINALIZADO COM ERRO */ 
    CONSTRAINT CHK_ACAO_TFPS2399 CHECK (ACAO IN ('I', 'A', 'E')), /*'I'=INCLUÃ?R 'A=ALTERAR 'E=EXCLUIR */
    CONSTRAINT CHK_CONTROLE_TFPS2399 CHECK (CONTROLE IN ('I', 'A', 'E')),
    CONSTRAINT CHK_TPAMB_TFPS2399 CHECK (TPAMB IN ('P', 'T')) /* P = PRODUCAO T = TESTE */
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54072-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S1210_BASE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S1210_BASE
NomeObjeto: VGF_EVENTO_S1210_BASE
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1210_BASE
AS
   SELECT DISTINCT
          VEMP.CODEMPMATRIZ AS CODEMP,
          BAS.REFERENCIA AS DTREF,
          VEMP.TPINSCEMPREGADOR,
          VEMP.NRINSCEMPREGADOR,
          CAST (SNK_FORMAT_DATE(BAS.REFERENCIA, 'YYYY-MM') AS VARCHAR2 (7)) AS PERAPUR,
          CAST (CASE WHEN BAS.TIPFOLHA IN ('D') THEN SNK_FORMAT_DATE(BAS.REFERENCIA, 'YYYY') ELSE SNK_FORMAT_DATE(BAS.REFERENCIA, 'YYYY-MM') END AS VARCHAR2(7)) AS PERREF,
          1 AS INDAPURACAO,
          FUN.CODEMP AS CODEMPFUNC,
          FUN.CODFUNC,
          FUN.CPF,
          FUN.MATRICULA,
          FUN.CODCATEGESOCIAL AS CODCATEG,
          CASE WHEN FUN.CODCATEGESOCIAL IN (301,302,303,305,306,307,308,309,410) THEN 'S' ELSE 'N' END AS ORGAOPUBLICO,
          CASE WHEN FUN.CODCATEGESOCIAL >= 701 THEN 'S' ELSE 'N' END AS TRABSEMVINCULO,
          CASE WHEN NVL(PUB.CODDIV,0) IN (11, 12, 13, 14) THEN 'S' ELSE 'N' END AS BENEFPREV1207,
          (SELECT SUM (FOL.VLREVENTO)
             FROM TFPFOL FOL, TFPEVE EVE
            WHERE     FOL.CODEMP = BAS.CODEMP
                  AND FOL.REFERENCIA = BAS.REFERENCIA
                  AND EVE.BASEINFREND = 'Q'
                  AND FOL.CODEVENTO = EVE.CODEVENTO)
             AS VRDEDDEP,
          BAS.DTPAGAMENTO AS DTPGTO,
          CASE WHEN BAS.TIPFOLHA IN ('F', '1', '2') THEN 7
               WHEN FUN.CODCATEGESOCIAL IN (301, 302, 303, 305, 306, 307, 308, 309, 410) /* ORGAO PUBLICO - 1202 */ THEN
                    CASE WHEN PUB.CODDIV IN (11, 12, 13, 14)  /* Benefícios previdenciários - 1207 */ THEN 6 ELSE 5 END
               WHEN BAS.TIPFOLHA = 'R' AND FUN.CODCATEGESOCIAL >= 701 THEN 3
               WHEN BAS.TIPFOLHA = 'R' THEN 2
             -- WHEN THEN 9 Pagamento relativo a competências anteriores ao início de obrigatoriedade dos eventos periódicos para o contribuinte
             ELSE 1 END AS TPPGTO,
          (SELECT CASE
                     WHEN SUBSTR (PAI.CODPAISFIS, 1, 3) = 105 THEN 'S'
                     ELSE 'N'
                  END
             FROM TSIPAI PAI, TSICID CID, TSIUFS UFS
            WHERE     PAI.CODPAIS = UFS.CODPAIS
                  AND CID.UF = UFS.CODUF
                  AND FUN.CODCIDTRAB = CID.CODCID)
             AS INDRESBR,
          CAST (BAS.TIPFOLHA AS VARCHAR2 (30)) AS IDEDMDEV,
          CASE WHEN BAS.TIPFOLHA IN ('F','1','2') THEN 'S' ELSE 'N' END FOLHADEFERIAS,
          'S' AS INDPGTOTT,
          CAST(BAS.SALLIQ AS FLOAT) AS VRLIQ,
          CASE
             WHEN LENGTH (PEND.CODPAISFIS) = 4
             THEN
                SUBSTR (PEND.CODPAISFIS, 1, 3)
             ELSE
                '0' || SUBSTR (PEND.CODPAISFIS, 1, 2)
          END
             AS CODPAIS,
          FUN.INDNIF,
          FUN.NIFBENEF,
          CASE
             WHEN (CASE
                      WHEN LENGTH (PEND.CODPAISFIS) = 4
                      THEN
                         SUBSTR (PEND.CODPAISFIS, 1, 3)
                      ELSE
                         '0' || SUBSTR (PEND.CODPAISFIS, 1, 2)
                   END) <> '105'
             THEN
                (SELECT NOMEEND
                   FROM TSIEND
                  WHERE CODEND = FUN.CODEND)
             ELSE
                ''
          END
             AS DSCLOGRAD,
          CASE
             WHEN (CASE
                      WHEN LENGTH (PEND.CODPAISFIS) = 4
                      THEN
                         SUBSTR (PEND.CODPAISFIS, 1, 3)
                      ELSE
                         '0' || SUBSTR (PEND.CODPAISFIS, 1, 2)
                   END) <> '105'
             THEN
                FUN.NUMEND
             ELSE
                ''
          END
             AS NRLOGRAD,
          CASE
             WHEN (CASE
                      WHEN LENGTH (PEND.CODPAISFIS) = 4
                      THEN
                         SUBSTR (PEND.CODPAISFIS, 1, 3)
                      ELSE
                         '0' || SUBSTR (PEND.CODPAISFIS, 1, 2)
                   END) <> '105'
             THEN
                FUN.COMPLEMENTO
             ELSE
                ''
          END
             AS COMPLEM,
          CASE
             WHEN (CASE
                      WHEN LENGTH (PEND.CODPAISFIS) = 4
                      THEN
                         SUBSTR (PEND.CODPAISFIS, 1, 3)
                      ELSE
                         '0' || SUBSTR (PEND.CODPAISFIS, 1, 2)
                   END) <> '105'
             THEN
                (SELECT NOMEBAI
                   FROM TSIBAI
                  WHERE CODBAI = FUN.CODBAI)
             ELSE
                ''
          END
             AS BAIRRO,
          CASE
             WHEN (CASE
                      WHEN LENGTH (PEND.CODPAISFIS) = 4
                      THEN
                         SUBSTR (PEND.CODPAISFIS, 1, 3)
                      ELSE
                         '0' || SUBSTR (PEND.CODPAISFIS, 1, 2)
                   END) <> '105'
             THEN
                CEND.NOMECID
             ELSE
                ''
          END
             AS NMCID,
          CASE
             WHEN (CASE
                      WHEN LENGTH (PEND.CODPAISFIS) = 4
                      THEN
                         SUBSTR (PEND.CODPAISFIS, 1, 3)
                      ELSE
                         '0' || SUBSTR (PEND.CODPAISFIS, 1, 2)
                   END) <> '105'
             THEN
                FUN.CAIXAPOSTAL
             ELSE
                ''
          END
             AS CODPOSTAL
          , FER.DTSAIDA AS DTINIGOZ
          , CASE WHEN FER.NUMDIASFERCOL = 0 THEN FER.NUMDIASFER ELSE FER.NUMDIASFERCOL END AS QTDIAS
     , CASE WHEN BAS.TIPFOLHA <> 'R' THEN NULL
       WHEN FUN.CODCATEGESOCIAL >= 701 THEN
        (SELECT NVL (S.NRORECIBO, '')
         FROM TFPS2399 S
        WHERE S.CODEMP  = FUN.CODEMP
          AND S.CHAVE = CAST(CAST (FUN.CODEMP AS VARCHAR (10)) || ':' || CAST (FUN.CODFUNC AS VARCHAR (10)) AS VARCHAR (100)) 
          AND S.TPAMB = SNK_GET_TPAMB_ESOCIAL
          AND S.SEQUENCIA = SNK_GET_SEQ_ATUAL_ESOCIAL - 1
          AND S.DTREF = SNK_GET_DTREF_ESOCIAL)
       ELSE
        (SELECT NVL(S.NRORECIBO, '')
         FROM TFPS2299 S
        WHERE S.CODEMP = FUN.CODEMP
          AND S.CHAVE = CAST(CAST (FUN.CODEMP AS VARCHAR (10)) || ':' || CAST (FUN.CODFUNC AS VARCHAR (10)) AS VARCHAR (100)) 
          AND S.TPAMB = SNK_GET_TPAMB_ESOCIAL
          AND S.SEQUENCIA = SNK_GET_SEQ_ATUAL_ESOCIAL - 1
          AND S.DTREF = SNK_GET_DTREF_ESOCIAL)
       END AS NRRECARQ
  , CAST(SNK_FORMAT_DATE(BAS.DTPAGAMENTO, 'DD-MM-YYYY') || ':' || 
          CASE WHEN BAS.TIPFOLHA IN ('F', '1', '2') THEN 7
               WHEN FUN.CODCATEGESOCIAL IN (301, 302, 303, 305, 306, 307, 308, 309, 410) /* ORGAO PUBLICO - 1202 */ THEN
                    CASE WHEN PUB.CODDIV IN (11, 12, 13, 14)  /* Benefícios previdenciários - 1207 */ THEN 6 ELSE 5 END
               WHEN BAS.TIPFOLHA = 'R' AND FUN.CODCATEGESOCIAL >= 701 THEN 3
               WHEN BAS.TIPFOLHA = 'R' THEN 2
             -- WHEN THEN 9 Pagamento relativo a competências anteriores ao início de obrigatoriedade dos eventos periódicos para o contribuinte
             ELSE 1 END  
     AS VARCHAR2(100)) AS DT_TPPGTO
  , CAST(SNK_FORMAT_DATE(BAS.REFERENCIA, 'MM-YYYY') || ':' || BAS.TIPFOLHA AS VARCHAR2(100)) AS PER_IDEDMDEV
  , CAST(CASE WHEN BAS.TIPFOLHA IN ('F', '1', '2') THEN FUN.CODCATEGESOCIAL || ':' || FUN.MATRICULA || ':' || SNK_FORMAT_DATE(FER.DTSAIDA, 'DD-MM-YYYY') ELSE NULL END AS VARCHAR2(100)) AS CHAVEFERIAS
FROM TFPFUN FUN
          LEFT JOIN TFPPUB PUB
             ON PUB.CODEMP = FUN.CODEMP AND PUB.CODFUNC = FUN.CODFUNC
          LEFT JOIN TSICID CEND ON FUN.CODCID = CEND.CODCID
          LEFT JOIN TSIUFS UFEND ON CEND.UF = UFEND.CODUF
          LEFT JOIN TSIPAI PEND ON UFEND.CODPAIS = PEND.CODPAIS
          JOIN TFPBAS BAS 
            ON BAS.CODEMP = FUN.CODEMP
           AND BAS.CODFUNC = FUN.CODFUNC
           AND BAS.TIPFOLHA <> 'P'
           AND BAS.LIBESOCIAL = 'S'
          LEFT JOIN TFPFER FER
           ON FER.CODEMP = FUN.CODEMP
          AND FER.CODFUNC = FUN.CODFUNC
          AND TRUNC(FER.DTSAIDA,'MM') = BAS.REFERENCIA,
          VGF_EVENTO_EMPREGADOR VEMP
    WHERE FUN.CODEMP = VEMP.CODEMP
      AND FUN.SITESOCIAL IN ('O', '5', '6', 'T', 'S')
      AND FUN.CODCATEGESOCIAL IS NOT NULL
      AND FUN.VINCULO <> 99
      AND BAS.REFERENCIA >= TRUNC(VEMP.DTTERCEIRAFASE,'MM')
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54073-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S1210_BASEFOLHA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S1210_BASEFOLHA
NomeObjeto: VGF_EVENTO_S1210_BASEFOLHA
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1210_BASEFOLHA
AS
SELECT 
  BASE.CODEMP
, BASE.DTREF
, BASE.CPF AS CPFBENEF
, BASE.DT_TPPGTO
, BASE.PER_IDEDMDEV
, BASE.CHAVEFERIAS
, CAST(BASE.NRRECARQ AS VARCHAR2(40)) AS NRRECARQ
, CAST(FOL.CODEVENTO AS VARCHAR2(30)) AS CODRUBR
--, CASE WHEN EVE.BASELIQUIDO = 'S' THEN 
--    CASE WHEN EVE.UNIDADE = 'H' THEN FOL.INDICE 
--         WHEN EVE.UNIDADE = 'Q' AND EVE.BASEINFREND NOT IN ('J','G') THEN FOL.INDICE
--         WHEN EVE.UNIDADE = 'D' AND EVE.IDENTIFICACAO NOT IN (101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,129,130,135,136,145,146,154,155,163) THEN FOL.INDICE 
--    ELSE 0 END 
--  ELSE 0 END AS QTDRUBR
--, CASE WHEN EVE.BASELIQUIDO = 'S' THEN 
--    CASE WHEN EVE.IDENTIFICACAO IN (101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,129,130,135,136,145,146,154,155,163) THEN FOL.INDICE 
--         WHEN EVE.UNIDADE = 'H' AND EVE.INDICE > 0 THEN (EVE.INDICE - 1) * 100 
--         WHEN EVE.UNIDADE = 'Q' THEN EVE.INDICE 
--         WHEN EVE.UNIDADE = 'D' THEN EVE.INDICE 
--    ELSE 0 END 
--  ELSE 0 END AS FATORRUBR
 /*Não iremos alimentar esse campo porque no sistema essa informação não é clara e como é opcional não será criado*/
, CAST(0 AS FLOAT) AS VRUNIT
, CAST(0 AS FLOAT) AS QTDRUBR
, CAST(0 AS FLOAT) AS FATORRUBR
, CAST(SUM(FOL.VLREVENTO) AS FLOAT) AS VRRUBR
, S10.CODINCIRRF
, BASE.FOLHADEFERIAS
, BASE.BENEFPREV1207
, MAX(BASE.CODEMPFUNC) AS CODEMPFUNC 
, MAX(BASE.CODFUNC) AS CODFUNC /* UTILIZADO APENAS PARA BUSCA DOS DEPENDENTES NA FOLHA DE PENSIONISTA */
, BASE.CODCATEG
, BASE.IDEDMDEV
, CASE WHEN S10.CODINCIRRF IN ('31', '32', '33', '34', '35', '81', '82', '83') THEN 'S' ELSE 'N' END AS RETENCOES  
, CASE WHEN S10.CODINCIRRF IN ('51', '52', '53', '54', '55') THEN 'S' ELSE 'N' END AS PENSAO  
, CASE WHEN S10.CODINCIRRF IN ('00', '01', '09', '13', '33', '43', '46', '53', '63', '75', '93') THEN 'S' ELSE 'N' END AS INCFERIAS
FROM VGF_EVENTO_S1210_BASE BASE
, TFPFOL FOL
, TFPEVE EVE
  JOIN VGF_EVENTO_S1010 S10 ON S10.CODEVENTO = EVE.CODEVENTO  
WHERE FOL.CODEMP = BASE.CODEMPFUNC
  AND FOL.CODFUNC = BASE.CODFUNC
  AND FOL.REFERENCIA = BASE.DTREF
  AND FOL.TIPFOLHA = BASE.IDEDMDEV
  AND FOL.CODEVENTO = EVE.CODEVENTO
GROUP BY 
  BASE.CODEMP
, BASE.DTREF
, BASE.CPF
, BASE.DT_TPPGTO
, BASE.PER_IDEDMDEV
, BASE.CHAVEFERIAS
, BASE.NRRECARQ
, FOL.CODEVENTO
, S10.CODINCIRRF
, BASE.FOLHADEFERIAS
, BASE.BENEFPREV1207
, BASE.CODCATEG
, BASE.IDEDMDEV
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54074-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS1210
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS1210
NomeObjeto: TFPS1210
TipoObjeto: TABLE
NomeTabela: TFPS1210
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS1210(
    CODEMP             NUMBER(5),
    DTREF              DATE,
    SEQUENCIA          NUMBER(5),
    TPAMB              CHAR(1)                   DEFAULT 'T'                   NOT NULL,
    CHAVE              VARCHAR2(100)             NOT NULL, /*cpfBenef*/
    INDAPURACAO        NUMBER(5),
    PERAPUR            VARCHAR2(7),
    TPINSC             NUMBER(5),
    NRINSC             VARCHAR2(14),
    CPFBENEF           VARCHAR2(11),
    VRDEDDEP           FLOAT, /*(14,2)*/
    STATUS             CHAR(1)                   NOT NULL,
    NRORECIBO          VARCHAR2(40),
    NRORECIBO_ANT      VARCHAR2(40),
    ACAO               CHAR(1),
    CONTROLE           CHAR(1)                   DEFAULT 'I'                   NOT NULL,
    CONSTRAINT PK_TFPS1210 PRIMARY KEY (CODEMP, DTREF, SEQUENCIA, TPAMB, CHAVE),    
    CONSTRAINT CHK_ACAO_TFPS1210 CHECK (ACAO IN ('I', 'A', 'E')),
    CONSTRAINT CHK_CONTROLE_TFPS1210 CHECK (CONTROLE IN ('I', 'A', 'E')),
    CONSTRAINT CHK_STATUS_TFPS1210 CHECK (STATUS IN ('P','I', 'E', 'F', 'X')),
    CONSTRAINT CHK_TPAMB_TFPS1210 CHECK (TPAMB IN ('P', 'T')))    
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54075-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S1210 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S1210 
NomeObjeto: VGF_EVENTO_S1210 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1210 /* ideBenef */
AS
   SELECT BASE.CODEMP,
          BASE.DTREF,
          CAST(BASE.CPF AS VARCHAR2(100)) AS CHAVE,
          BASE.INDAPURACAO,
          BASE.PERAPUR,
          BASE.TPINSCEMPREGADOR AS TPINSC,
          BASE.NRINSCEMPREGADOR AS NRINSC,
          BASE.CPF AS CPFBENEF,
          CAST(SUM(BASE.VRDEDDEP) AS FLOAT) AS VRDEDDEP 
   FROM VGF_EVENTO_S1210_BASE BASE
   GROUP BY BASE.CODEMP,
            BASE.DTREF,
            BASE.CPF,
            BASE.INDAPURACAO,
            BASE.PERAPUR,
            BASE.TPINSCEMPREGADOR,
            BASE.NRINSCEMPREGADOR
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54076-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS1210_IPGTO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS1210_IPGTO
NomeObjeto: TFPS1210_IPGTO
TipoObjeto: TABLE
NomeTabela: TFPS1210_IPGTO
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS1210_IPGTO( /* INFORMAÇÕES DOS PAGAMENTOS EFETUADOS INFOPGTO */
    CODEMP             NUMBER(5),
    DTREF              DATE,
    SEQUENCIA          NUMBER(5),
    TPAMB              CHAR(1)                   DEFAULT 'T'                   NOT NULL,
    CPFBENEF           VARCHAR2(100),
    CHAVE              VARCHAR2(100)             NOT NULL, /*DTPGTO:TPPGTO UTILIZAR SNK_FORMAT_DATE(DTPGTO, 'DD/MM/YYYY')*/
    DTPGTO             DATE,
    TPPGTO             NUMBER(5),
    INDRESBR           CHAR(1),
    PERREF             VARCHAR2(7),       /* detPgtoBenPr */ 
    IDEDMDEV           VARCHAR2(30),      /* detPgtoBenPr */ 
    INDPGTOTT          CHAR(1), /*S, N*/ /* detPgtoBenPr */ 
    VRLIQ              FLOAT, /*(14,2)*/ /* detPgtoBenPr */ 
    CODPAIS            VARCHAR2(3),
    INDNIF             NUMBER(5),    /*1,2,3*/
    NIFBENEF           VARCHAR2(20),
    DSCLOGRAD          VARCHAR2(80),
    NRLOGRAD           VARCHAR2(10),
    COMPLEM            VARCHAR2(30),
    BAIRRO             VARCHAR2(60),
    NMCID              VARCHAR2(50),
    CODPOSTAL          VARCHAR2(12),    
    CONSTRAINT PK_TFPS1210_IPGTO PRIMARY KEY (CODEMP, DTREF, SEQUENCIA, TPAMB, CPFBENEF, CHAVE),
    CONSTRAINT FK_IPGTO_TFPS1210 FOREIGN KEY (CODEMP, DTREF, SEQUENCIA, TPAMB, CPFBENEF) REFERENCES TFPS1210 (CODEMP, DTREF, SEQUENCIA, TPAMB, CHAVE) ON DELETE CASCADE,
    CONSTRAINT CHK_TPAMB_TFPS1210_IPGTO CHECK (TPAMB IN ('P', 'T'))
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54077-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S1210_IPGTO 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S1210_IPGTO 
NomeObjeto: VGF_EVENTO_S1210_IPGTO 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1210_IPGTO /* infoPgto */
AS
   SELECT BASE.CODEMP,
          BASE.DTREF,
          CAST(BASE.CPF AS VARCHAR2(100)) AS CPFBENEF,
          BASE.DT_TPPGTO AS CHAVE,
          BASE.DTPGTO,
          BASE.TPPGTO,
          MAX(BASE.INDRESBR) AS INDRESBR,
          CASE WHEN MAX(BASE.BENEFPREV1207) = 'S' THEN MAX(BASE.PERREF) ELSE NULL END AS PERREF, /* detPgtoBenPr */ 
          CASE WHEN MAX(BASE.BENEFPREV1207) = 'S' THEN MAX(BASE.IDEDMDEV) ELSE NULL END AS IDEDMDEV, /* detPgtoBenPr */ 
          CASE WHEN MAX(BASE.BENEFPREV1207) = 'S' THEN MAX(BASE.INDPGTOTT) ELSE NULL END AS INDPGTOTT, /* detPgtoBenPr */ 
          CAST(SUM(CASE WHEN (BASE.BENEFPREV1207) = 'S' THEN BASE.VRLIQ ELSE 0 END) AS FLOAT) AS VRLIQ, /* detPgtoBenPr */ 
          MAX(BASE.CODPAIS) AS CODPAIS,
          CAST(MAX(BASE.INDNIF) AS INTEGER) AS INDNIF,
          MAX(BASE.NIFBENEF) AS NIFBENEF,
          MAX(BASE.DSCLOGRAD) AS DSCLOGRAD,
          MAX(BASE.NRLOGRAD) AS NRLOGRAD,
          MAX(BASE.COMPLEM) AS COMPLEM,
          MAX(BASE.BAIRRO) AS BAIRRO,
          MAX(BASE.NMCID) AS NMCID,
          MAX(BASE.CODPOSTAL) AS CODPOSTAL    
FROM VGF_EVENTO_S1210_BASE BASE
  GROUP BY BASE.CODEMP,
         BASE.DTREF,
         BASE.CPF,
         BASE.DT_TPPGTO,
         BASE.DTPGTO,
         BASE.TPPGTO    
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54078-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS1210_DIPGTO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS1210_DIPGTO
NomeObjeto: TFPS1210_DIPGTO
TipoObjeto: TABLE
NomeTabela: TFPS1210_DIPGTO
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS1210_DIPGTO( /* detPgtoFl - DETALHAMENTO DOS PAGAMENTOS EFETUADOS, RELATIVOS A FOLHA DE PAGAMENTO E RESCISÕES CONTRATUAIS, APURADOS EM S-1200, S-1202, S-2299 E S-2399.  */
    CODEMP             NUMBER(5),
    DTREF              DATE,
    SEQUENCIA          NUMBER(5),
    TPAMB              CHAR(1)                   DEFAULT 'T'                   NOT NULL,
    CPFBENEF           VARCHAR2(100),
    DT_TPPGTO          VARCHAR2(100)             NOT NULL,
    CHAVE              VARCHAR2(100)             NOT NULL, /*PERREF:IDEDMDEV UTILIZAR SNK_FORMAT_DATE(PERREF, 'MM/YYYY') PER_IDEDMDEV*/
    PERREF             VARCHAR2(7),
    IDEDMDEV           VARCHAR2(30),
    INDPGTOTT          CHAR(1), /* S,N */
    VRLIQ              FLOAT, /* 14,2 */
    NRRECARQ           VARCHAR2(40),
    CONSTRAINT PK_TFPS1210_DIPGTO PRIMARY KEY (CODEMP, DTREF, SEQUENCIA, TPAMB, CPFBENEF, DT_TPPGTO, CHAVE),
    CONSTRAINT FK_D_IPGTO_TFPS1210 FOREIGN KEY (CODEMP, DTREF, SEQUENCIA, TPAMB, CPFBENEF, DT_TPPGTO) REFERENCES TFPS1210_IPGTO(CODEMP, DTREF, SEQUENCIA, TPAMB, CPFBENEF, CHAVE) ON DELETE CASCADE,
    CONSTRAINT CHK_TPAMB_TFPS1210_DIPGTO CHECK (TPAMB IN ('P', 'T'))
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54079-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S1210_DIPGTO 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S1210_DIPGTO 
NomeObjeto: VGF_EVENTO_S1210_DIPGTO 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1210_DIPGTO /* detPgtoFl */
AS
SELECT 
  BASE.CODEMP
, BASE.DTREF  
, CAST(BASE.CPF AS VARCHAR2(100)) AS CPFBENEF
, BASE.DT_TPPGTO
, BASE.PER_IDEDMDEV AS CHAVE
, BASE.PERREF
, BASE.IDEDMDEV
, BASE.INDPGTOTT
, CAST(SUM(BASE.VRLIQ) AS FLOAT) AS VRLIQ
, CAST(BASE.NRRECARQ AS VARCHAR2(40)) AS NRRECARQ
FROM VGF_EVENTO_S1210_BASE BASE
WHERE BASE.FOLHADEFERIAS = 'N'
  AND BASE.BENEFPREV1207 = 'N' 
GROUP BY
  BASE.CODEMP
, BASE.DTREF
, BASE.CPF
, BASE.DT_TPPGTO
, BASE.PER_IDEDMDEV 
, BASE.PERREF
, BASE.IDEDMDEV
, BASE.INDPGTOTT
, BASE.TRABSEMVINCULO
, BASE.NRRECARQ
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54080-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS1210_RDIPGTO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS1210_RDIPGTO
NomeObjeto: TFPS1210_RDIPGTO
TipoObjeto: TABLE
NomeTabela: TFPS1210_RDIPGTO
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS1210_RDIPGTO( /* RETENÇÕES EFETUADAS NO ATO DO PAGAMENTO PELO VALOR TOTAL DO DEMONSTRATIVO.   */
    CODEMP             NUMBER(5),
    DTREF              DATE,
    SEQUENCIA          NUMBER(5),
    TPAMB              CHAR(1)                   DEFAULT 'T'                   NOT NULL,
    CPFBENEF           VARCHAR2(100),
    DT_TPPGTO          VARCHAR2(100)             NOT NULL,
    PER_IDEDMDEV       VARCHAR2(100)             NOT NULL,
    CHAVE              VARCHAR2(100)             NOT NULL, /*CODRUBR*/
    CODRUBR            VARCHAR2(30),
    IDETABRUBR         VARCHAR2(8),
    QTDRUBR            FLOAT, /*6,2*/
    FATORRUBR          FLOAT, /*5,2*/
    VRUNIT             FLOAT, /*14,2*/
    VRRUBR             FLOAT, /*14,2*/
    CONSTRAINT PK_TFPS1210_RDIPGTO PRIMARY KEY (CODEMP, DTREF, SEQUENCIA, TPAMB, CPFBENEF, DT_TPPGTO, CHAVE),
    CONSTRAINT FK_R_DIPGTO_TFPS1210 FOREIGN KEY (CODEMP, DTREF, SEQUENCIA, TPAMB, CPFBENEF, DT_TPPGTO, PER_IDEDMDEV) REFERENCES TFPS1210_DIPGTO(CODEMP, DTREF, SEQUENCIA, TPAMB, CPFBENEF, DT_TPPGTO, CHAVE) ON DELETE CASCADE,
    CONSTRAINT CHK_TPAMB_TFPS1210_RDIPGTO CHECK (TPAMB IN ('P', 'T'))
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54081-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S1210_RDIPGTO 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S1210_RDIPGTO 
NomeObjeto: VGF_EVENTO_S1210_RDIPGTO 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1210_RDIPGTO /* retPgtoTot/detPgtoFl   */
AS
SELECT 
  FOL.CODEMP
, FOL.DTREF
, CAST(FOL.CPFBENEF AS VARCHAR2(100)) AS CPFBENEF
, FOL.DT_TPPGTO
, FOL.PER_IDEDMDEV
, CAST(FOL.CODRUBR AS VARCHAR2(100)) AS CHAVE
, CAST(FOL.CODRUBR AS VARCHAR2(30)) AS CODRUBR
, CAST(FOL.CODRUBR AS VARCHAR2(8)) AS IDETABRUBR
, FOL.QTDRUBR
, FOL.FATORRUBR
, FOL.VRUNIT
, CAST(SUM(FOL.VRRUBR) AS FLOAT) AS VRRUBR
FROM VGF_EVENTO_S1210_BASEFOLHA FOL
WHERE FOL.FOLHADEFERIAS = 'N'
  AND FOL.BENEFPREV1207 = 'N'
  AND ((FOL.RETENCOES = 'S') OR (PENSAO = 'S'))
GROUP BY
  FOL.CODEMP
, FOL.DTREF
, FOL.CPFBENEF
, FOL.DT_TPPGTO
, FOL.PER_IDEDMDEV
, FOL.CODRUBR
, FOL.QTDRUBR
, FOL.FATORRUBR
, FOL.VRUNIT
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54082-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS1210_PRDIPGTO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS1210_PRDIPGTO
NomeObjeto: TFPS1210_PRDIPGTO
TipoObjeto: TABLE
NomeTabela: TFPS1210_PRDIPGTO
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS1210_PRDIPGTO( /* INFORMAÇÕES SOBRE BENEFICIÁRIOS DE PENSÃO ALIMENTÍCIA.  */
    CODEMP             NUMBER(5),
    DTREF              DATE,
    SEQUENCIA          NUMBER(5),
    TPAMB              CHAR(1)                   DEFAULT 'T'                   NOT NULL,
    CPFBENEF        VARCHAR2(100),
    DT_TPPGTO       VARCHAR2(100)             NOT NULL,
    PER_IDEDMDEV    VARCHAR2(100)             NOT NULL,
    CODRUBR         VARCHAR2(100)             NOT NULL,
    CHAVE              VARCHAR2(100)             NOT NULL, /*CPFBENEF*/
    CPFBENEFPENSAO    VARCHAR2(11),    
    DTNASCTOBENEF    DATE,
    NMBENEFIC        VARCHAR2(70),
    VLRPENSAO        FLOAT, /* 14,2 */
    CONSTRAINT PK_TFPS1210_PRDIPGTO PRIMARY KEY (CODEMP, DTREF, SEQUENCIA, TPAMB, CPFBENEF, DT_TPPGTO, CODRUBR, CHAVE),
    CONSTRAINT FK_P_RDIPGTO_TFPS1210 FOREIGN KEY (CODEMP, DTREF, SEQUENCIA, TPAMB, CPFBENEF, DT_TPPGTO, CODRUBR) REFERENCES TFPS1210_RDIPGTO(CODEMP, DTREF, SEQUENCIA, TPAMB, CPFBENEF, DT_TPPGTO, CHAVE) ON DELETE CASCADE,
    CONSTRAINT CHK_TPAMB_TFPS1210_PRDIPGTO CHECK (TPAMB IN ('P', 'T'))
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54083-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S1210_PRDIPGTO 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S1210_PRDIPGTO 
NomeObjeto: VGF_EVENTO_S1210_PRDIPGTO 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1210_PRDIPGTO /* penAlim */
AS
SELECT FOL.CODEMP
     , FOL.DTREF
     , CAST(FOL.CPFBENEF AS VARCHAR2(100)) AS CPFBENEF
     , FOL.DT_TPPGTO
     , FOL.PER_IDEDMDEV
     , CAST(FOL.CODRUBR AS VARCHAR2(100)) AS CODRUBR
     , CAST(DPD.CPF AS VARCHAR2(100)) AS CHAVE
     , DPD.CPF AS CPFBENEFPENSAO
     , DPD.DTNASC AS DTNASCTOBENEF
     , DPD.NOMEDEPEND AS NMBENEFIC
     , FOLPS.VLREVENTO AS VLRPENSAO
FROM
(SELECT DISTINCT
  CODEMP
, DTREF
, CPFBENEF
, DT_TPPGTO
, PER_IDEDMDEV
, CODRUBR
, CODEMPFUNC
, CODFUNC
FROM VGF_EVENTO_S1210_BASEFOLHA WHERE FOLHADEFERIAS = 'N' AND BENEFPREV1207 = 'N' AND PENSAO = 'S') FOL
JOIN TFPDPD DPD /* DEPENDENTES QUE POSSUEM BENEFICIO DE PENSAO */
  ON DPD.CODEMP = FOL.CODEMPFUNC
 AND DPD.CODFUNC = FOL.CODFUNC
JOIN TFPFOL FOLPS /* FOLHA DE PENSIONISTA */
  ON FOLPS.CODEMP = FOL.CODEMPFUNC 
 AND FOLPS.CODFUNC = DPD.CODFUNCPENS
 AND FOLPS.REFERENCIA = FOL.DTREF
 AND FOLPS.TIPFOLHA = 'P' 
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54084-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS1210_IIPGTO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS1210_IIPGTO
NomeObjeto: TFPS1210_IIPGTO
TipoObjeto: TABLE
NomeTabela: TFPS1210_IIPGTO
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS1210_IIPGTO( /* INFORMAÇÕES COMPLENTARES RELACIONADAS AO PAGAMENTO EFETUADO EM VALOR MENOR QUE O APURADO NO DEMONSTRATIVO - PUBLICO*/
    CODEMP             NUMBER(5),
    DTREF              DATE,
    SEQUENCIA          NUMBER(5),
    TPAMB              CHAR(1)                   DEFAULT 'T'                   NOT NULL,
    CPFBENEF        VARCHAR2(100),
    DT_TPPGTO       VARCHAR2(100)             NOT NULL,
    CHAVE              VARCHAR2(100)             NOT NULL, /*CODRUBR*/
    CODRUBR            VARCHAR2(30),
    IDETABRUBR        VARCHAR2(8),
    QTDRUBR            FLOAT, /*6,2*/
    FATORRUBR        FLOAT,    /*5,2*/
    VRUNIT            FLOAT,    /*14,2*/
    VRRUBR            FLOAT,  /*14,2*/
    CONSTRAINT PK_TFPS1210_IIPGTO PRIMARY KEY (CODEMP, DTREF, SEQUENCIA, TPAMB, CPFBENEF, DT_TPPGTO, CHAVE),
    CONSTRAINT FK_I_IPGTO_TFPS1210 FOREIGN KEY (CODEMP, DTREF, SEQUENCIA, TPAMB, CPFBENEF, DT_TPPGTO) REFERENCES TFPS1210_IPGTO(CODEMP, DTREF, SEQUENCIA, TPAMB, CPFBENEF, CHAVE) ON DELETE CASCADE,
    CONSTRAINT CHK_TPAMB_TFPS1210_IIPGTO CHECK (TPAMB IN ('P', 'T'))
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54085-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS1210_RIPGTO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS1210_RIPGTO
NomeObjeto: TFPS1210_RIPGTO
TipoObjeto: TABLE
NomeTabela: TFPS1210_RIPGTO
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS1210_RIPGTO( /* RETENÇÕES EFETUADAS NO ATO DO PAGAMENTO PELO VALOR INTEGRAL DO DEMONSTRATIVO - PUBLICO */
    CODEMP             NUMBER(5),
    DTREF              DATE,
    SEQUENCIA          NUMBER(5),
    TPAMB              CHAR(1)                   DEFAULT 'T'                   NOT NULL,
    CPFBENEF           VARCHAR2(100),
    DT_TPPGTO          VARCHAR2(100)             NOT NULL,
    CHAVE              VARCHAR2(100)             NOT NULL, /*CODRUBR*/
    CODRUBR            VARCHAR2(30),
    IDETABRUBR         VARCHAR2(8),
    QTDRUBR            FLOAT, /*6,2*/
    FATORRUBR          FLOAT, /*5,2*/
    VRUNIT             FLOAT, /*14,2*/
    VRRUBR             FLOAT,    /*14,2*/
    CONSTRAINT PK_TFPS1210_RIPGTO PRIMARY KEY (CODEMP, DTREF, SEQUENCIA, TPAMB, CPFBENEF, DT_TPPGTO, CHAVE),
    CONSTRAINT FK_R_IPGTO_TFPS1210 FOREIGN KEY (CODEMP, DTREF, SEQUENCIA, TPAMB, CPFBENEF, DT_TPPGTO) REFERENCES TFPS1210_IPGTO(CODEMP, DTREF, SEQUENCIA, TPAMB, CPFBENEF, CHAVE) ON DELETE CASCADE,
    CONSTRAINT CHK_TPAMB_TFPS1210_RIPGTO CHECK (TPAMB IN ('P', 'T'))
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54086-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S1210_RIPGTO 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S1210_RIPGTO 
NomeObjeto: VGF_EVENTO_S1210_RIPGTO 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1210_RIPGTO /* detPgtoBenPr */
AS
SELECT 
  FOL.CODEMP
, FOL.DTREF
, CAST(FOL.CPFBENEF AS VARCHAR2(100)) AS CPFBENEF
, FOL.DT_TPPGTO
--, FOL.PER_IDEDMDEV
, CAST(FOL.CODRUBR AS VARCHAR2(100)) AS CHAVE
, CAST(FOL.CODRUBR AS VARCHAR2(30)) AS CODRUBR
, CAST(FOL.CODRUBR AS VARCHAR2(8)) AS IDETABRUBR
, FOL.QTDRUBR
, FOL.FATORRUBR
, FOL.VRUNIT
, CAST(SUM(FOL.VRRUBR) AS FLOAT) AS VRRUBR
FROM VGF_EVENTO_S1210_BASEFOLHA FOL
WHERE FOL.BENEFPREV1207 = 'S' 
AND ((FOL.RETENCOES = 'S') OR (PENSAO = 'S'))
GROUP BY
  FOL.CODEMP
, FOL.DTREF
, FOL.CPFBENEF
, FOL.DT_TPPGTO
, FOL.PER_IDEDMDEV
, FOL.CODRUBR
, FOL.QTDRUBR
, FOL.FATORRUBR
, FOL.VRUNIT
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54087-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS1210_FIPGTO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS1210_FIPGTO
NomeObjeto: TFPS1210_FIPGTO
TipoObjeto: TABLE
NomeTabela: TFPS1210_FIPGTO
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS1210_FIPGTO( /* DETALHAMENTO DAS RUBRICAS DO RECIBO ANTECIPADO DE FÉRIAS */
    CODEMP             NUMBER(5),
    DTREF              DATE,
    SEQUENCIA          NUMBER(5),
    TPAMB              CHAR(1)                   DEFAULT 'T'                   NOT NULL,
    CPFBENEF           VARCHAR2(100),
    DT_TPPGTO          VARCHAR2(100)                NOT NULL,
    CHAVE              VARCHAR2(100)             NOT NULL, /*CODCATEG, MATRICULA, DTINIGOZ*/
    CODCATEG           NUMBER(5),
    MATRICULA          VARCHAR2(30),
    DTINIGOZ           DATE,
    QTDIAS             NUMBER(5),
    VRLIQ              FLOAT, /* 14,2 */
    CONSTRAINT PK_TFPS1210_FIPGTO PRIMARY KEY (CODEMP, DTREF, SEQUENCIA, TPAMB, CPFBENEF, DT_TPPGTO, CHAVE),
    CONSTRAINT FK_F_IPGTO_TFPS1210 FOREIGN KEY (CODEMP, DTREF, SEQUENCIA, TPAMB, CPFBENEF, DT_TPPGTO) REFERENCES TFPS1210_IPGTO(CODEMP, DTREF, SEQUENCIA, TPAMB, CPFBENEF, CHAVE) ON DELETE CASCADE,
    CONSTRAINT CHK_TPAMB_TFPS1210_FIPGTO CHECK (TPAMB IN ('P', 'T'))
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54088-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S1210_FIPGTO 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S1210_FIPGTO 
NomeObjeto: VGF_EVENTO_S1210_FIPGTO 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1210_FIPGTO /* detPgtoFer/infoPgto */
AS
   SELECT BASE.CODEMP,
          BASE.DTREF,
          CAST(BASE.CPF AS VARCHAR2(100)) AS CPFBENEF,
          BASE.DT_TPPGTO,
          BASE.CHAVEFERIAS AS CHAVE,
          BASE.CODCATEG AS CODCATEG, 
          CAST(BASE.MATRICULA AS VARCHAR2(30)) AS MATRICULA,
          BASE.DTINIGOZ,
          BASE.QTDIAS,
          BASE.VRLIQ     
FROM VGF_EVENTO_S1210_BASE BASE
WHERE BASE.FOLHADEFERIAS = 'S'
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54089-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS1210_DFIPGTO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS1210_DFIPGTO
NomeObjeto: TFPS1210_DFIPGTO
TipoObjeto: TABLE
NomeTabela: TFPS1210_DFIPGTO
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS1210_DFIPGTO( /* DETALHAMENTO DAS RUBRICAS DO RECIBO ANTECIPADO DE FÉRIAS */
    CODEMP             NUMBER(5),
    DTREF              DATE,
    SEQUENCIA          NUMBER(5),
    TPAMB              CHAR(1)                   DEFAULT 'T'                   NOT NULL,
    CPFBENEF        VARCHAR2(100),
    DT_TPPGTO       VARCHAR2(100)             NOT NULL,
    CHAVEPAI           VARCHAR2(100)             NOT NULL, /*CODCATEG, MATRICULA, DTINIGOZ*/
    CHAVE              VARCHAR2(100)             NOT NULL, /* CODRUBR */
    CODRUBR            VARCHAR2(30),
    IDETABRUBR        VARCHAR2(8),
    QTDRUBR            FLOAT, /* 6,2 */
    FATORRUBR        FLOAT, /* 5,2 */
    VRUNIT            FLOAT, /*14,2*/
    VRRUBR            FLOAT, /*14,2*/
    CONSTRAINT PK_TFPS1210_DFIPGTO PRIMARY KEY (CODEMP, DTREF, SEQUENCIA, TPAMB, CPFBENEF, DT_TPPGTO, CHAVEPAI, CHAVE),
    CONSTRAINT FK_D_FIPGTO_TFPS1210 FOREIGN KEY (CODEMP, DTREF, SEQUENCIA, TPAMB, CPFBENEF, DT_TPPGTO, CHAVEPAI) REFERENCES TFPS1210_FIPGTO(CODEMP, DTREF, SEQUENCIA, TPAMB, CPFBENEF, DT_TPPGTO, CHAVE) ON DELETE CASCADE,
    CONSTRAINT CHK_TPAMB_TFPS1210_DFIPGTO CHECK (TPAMB IN ('P', 'T'))
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54090-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S1210_DFIPGTO 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S1210_DFIPGTO 
NomeObjeto: VGF_EVENTO_S1210_DFIPGTO 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1210_DFIPGTO /* detRubrFer/detPgtoFer */
AS
SELECT 
  FOL.CODEMP
, FOL.DTREF
, CAST(FOL.CPFBENEF AS VARCHAR2(100)) AS CPFBENEF
, FOL.DT_TPPGTO
, FOL.CHAVEFERIAS AS CHAVEPAI
, CAST(FOL.CODRUBR AS VARCHAR2(100)) AS CHAVE
, CAST(FOL.CODRUBR AS VARCHAR2(30)) AS CODRUBR
, CAST(FOL.CODRUBR AS VARCHAR2(8)) AS IDETABRUBR
, FOL.QTDRUBR
, FOL.FATORRUBR
, FOL.VRUNIT
, CAST(SUM(FOL.VRRUBR) AS FLOAT) AS VRRUBR
FROM VGF_EVENTO_S1210_BASEFOLHA FOL
WHERE FOL.FOLHADEFERIAS = 'S'
  AND FOL.INCFERIAS = 'S'
GROUP BY
  FOL.CODEMP
, FOL.DTREF
, FOL.CPFBENEF
, FOL.DT_TPPGTO
, FOL.CHAVEFERIAS
, FOL.CODRUBR
, FOL.QTDRUBR
, FOL.FATORRUBR
, FOL.VRUNIT
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54091-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS1210_PDFIPGTO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS1210_PDFIPGTO
NomeObjeto: TFPS1210_PDFIPGTO
TipoObjeto: TABLE
NomeTabela: TFPS1210_PDFIPGTO
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS1210_PDFIPGTO( /* INFORMAÇÕES SOBRE BENEFICIÁRIOS DE PENSÃO ALIMENTÍCIA DE FÉRIAS */
    CODEMP             NUMBER(5),
    DTREF              DATE,
    SEQUENCIA          NUMBER(5),
    TPAMB              CHAR(1)                   DEFAULT 'T'                   NOT NULL,
    CPFBENEF           VARCHAR2(100),
    DT_TPPGTO          VARCHAR2(100)             NOT NULL,
    CHAVEAVO           VARCHAR2(100)             NOT NULL, /*CODCATEG, MATRICULA, DTINIGOZ*/
    CODRUBR            VARCHAR2(100)             NOT NULL,
    CHAVE              VARCHAR2(100)             NOT NULL, /* CPFBENEF */
    CPFBENEFPENSAO     VARCHAR2(11),
    DTNASCTOBENEF      DATE,
    NMBENEFIC          VARCHAR2(70),
    VLRPENSAO          FLOAT, /* 14,2 */
    CONSTRAINT PK_TFPS1210_PDFIPGTO PRIMARY KEY (CODEMP, DTREF, SEQUENCIA, TPAMB, CPFBENEF, DT_TPPGTO, CHAVEAVO, CODRUBR, CHAVE),
    CONSTRAINT FK_P_DFIPGTO_TFPS1210 FOREIGN KEY (CODEMP, DTREF, SEQUENCIA, TPAMB, CPFBENEF, DT_TPPGTO, CHAVEAVO, CODRUBR) REFERENCES TFPS1210_DFIPGTO(CODEMP, DTREF, SEQUENCIA, TPAMB, CPFBENEF, DT_TPPGTO, CHAVEPAI, CHAVE)  ON DELETE CASCADE,
    CONSTRAINT CHK_TPAMB_TFPS1210_PDFIPGTO CHECK (TPAMB IN ('P', 'T'))
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54092-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S1210_PDFIPGTO 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S1210_PDFIPGTO 
NomeObjeto: VGF_EVENTO_S1210_PDFIPGTO 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1210_PDFIPGTO /* PenAlim/detRubrFer  */
AS
SELECT FOL.CODEMP
     , FOL.DTREF
     , CAST(FOL.CPFBENEF AS VARCHAR2(100)) AS CPFBENEF
     , FOL.DT_TPPGTO
     , FOL.CHAVEFERIAS AS CHAVEAVO
     , CAST(FOL.CODRUBR AS VARCHAR2(100)) AS CODRUBR
     , CAST(DPD.CPF AS VARCHAR2(100)) AS CHAVE
     , DPD.CPF AS CPFBENEFPENSAO
     , DPD.DTNASC AS DTNASCTOBENEF
     , CAST(DPD.NOMEDEPEND AS VARCHAR2(70)) AS NMBENEFIC
     , FOLPS.VLREVENTO AS VLRPENSAO
FROM
(SELECT DISTINCT
  CODEMP
, CPFBENEF
, DT_TPPGTO
, DTREF
, CHAVEFERIAS
, CODRUBR
, CODEMPFUNC
, CODFUNC
FROM VGF_EVENTO_S1210_BASEFOLHA WHERE FOLHADEFERIAS = 'S' AND CODINCIRRF = 53 /* RUBRICA DE FERIAS PARA PENSAO */) FOL
JOIN TFPDPD DPD /* DEPENDENTES QUE POSSUEM BENEFICIO DE PENSAO */
  ON DPD.CODEMP = FOL.CODEMPFUNC
 AND DPD.CODFUNC = FOL.CODFUNC
JOIN TFPFOL FOLPS /* FOLHA DE PENSIONISTA */
  ON FOLPS.CODEMP = FOL.CODEMPFUNC 
 AND FOLPS.CODFUNC = DPD.CODFUNCPENS
 AND FOLPS.REFERENCIA = FOL.DTREF
 AND FOLPS.TIPFOLHA = 'P'
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54093-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS1210_AIPGTO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS1210_AIPGTO
NomeObjeto: TFPS1210_AIPGTO
TipoObjeto: TABLE
NomeTabela: TFPS1210_AIPGTO
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS1210_AIPGTO( /* Pagamento relativo a competências anteriores ao início de obrigatoriedade dos eventos periódicos para o contribuinte */
    CODEMP             NUMBER(5),
    DTREF              DATE,
    SEQUENCIA          NUMBER(5),
    TPAMB              CHAR(1)                   DEFAULT 'T'                   NOT NULL,
    CPFBENEF           VARCHAR2(100),
    DT_TPPGTO          VARCHAR2(100)             NOT NULL,
    CHAVE              VARCHAR2(100)             NOT NULL, /*codCateg*/
    CODCATEG           NUMBER(5),
    CONSTRAINT PK_TFPS1210_AIPGTO PRIMARY KEY (CODEMP, DTREF, SEQUENCIA, TPAMB, CPFBENEF, DT_TPPGTO, CHAVE),
    CONSTRAINT FK_A_IPGTO_TFPS1210 FOREIGN KEY (CODEMP, DTREF, SEQUENCIA, TPAMB, CPFBENEF, DT_TPPGTO) REFERENCES TFPS1210_IPGTO(CODEMP, DTREF, SEQUENCIA, TPAMB, CPFBENEF, CHAVE) ON DELETE CASCADE,
    CONSTRAINT CHK_TPAMB_TFPS1210_AIPGTO CHECK (TPAMB IN ('P', 'T'))
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54094-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S1210_AIPGTO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S1210_AIPGTO
NomeObjeto: VGF_EVENTO_S1210_AIPGTO
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1210_AIPGTO
AS
SELECT DISTINCT 
          BASE.CODEMP,
          BASE.DTREF,
          CAST(BASE.CPF AS VARCHAR2(100)) AS CPFBENEF,
          BASE.DT_TPPGTO,
          CAST(BASE.CODCATEG AS VARCHAR2(100)) AS CHAVE,
          BASE.CODCATEG
   FROM VGF_EVENTO_S1210_BASE BASE
  WHERE BASE.IDEDMDEV IN ('O', 'C')
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54095-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS1210_DAIPGTO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS1210_DAIPGTO
NomeObjeto: TFPS1210_DAIPGTO
TipoObjeto: TABLE
NomeTabela: TFPS1210_DAIPGTO
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS1210_DAIPGTO( /* DETALHAMENTO DO PAGAMENTO, ANTERIOR */
    CODEMP             NUMBER(5),
    DTREF              DATE,
    SEQUENCIA          NUMBER(5),
    TPAMB              CHAR(1)                   DEFAULT 'T'                   NOT NULL,
    CPFBENEF           VARCHAR2(100),
    DT_TPPGTO          VARCHAR2(100)             NOT NULL,
    CODCATEG           VARCHAR2(100)             NOT NULL,
    CHAVE              VARCHAR2(100)             NOT NULL, /*TPBCIRRF*/
    TPBCIRRF           VARCHAR2(2),
    VRBCIRRF           FLOAT, /* 14,2 */
    CONSTRAINT PK_TFPS1210_DAIPGTO PRIMARY KEY (CODEMP, DTREF, SEQUENCIA, TPAMB, CPFBENEF, DT_TPPGTO, CODCATEG, CHAVE),
    CONSTRAINT FK_D_AIPGTO_TFPS1210 FOREIGN KEY (CODEMP, DTREF, SEQUENCIA, TPAMB, CPFBENEF, DT_TPPGTO, CODCATEG) REFERENCES TFPS1210_AIPGTO(CODEMP, DTREF, SEQUENCIA, TPAMB, CPFBENEF, DT_TPPGTO, CHAVE) ON DELETE CASCADE,
    CONSTRAINT CHK_TPAMB_TFPS1210_DAIPGTO CHECK (TPAMB IN ('P', 'T'))
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54096-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S1210_DAIPGTO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S1210_DAIPGTO
NomeObjeto: VGF_EVENTO_S1210_DAIPGTO
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1210_DAIPGTO
AS
SELECT  FOL.CODEMP,
        FOL.DTREF,
        CAST(FOL.CPFBENEF AS VARCHAR2(100)) AS CPFBENEF,
        FOL.DT_TPPGTO,
        CAST(FOL.CODCATEG AS VARCHAR2(100)) AS CODCATEG, 
        CAST(FOL.CODINCIRRF AS VARCHAR2(100)) AS CHAVE,
        FOL.CODINCIRRF AS TPBCIRRF,
        CAST(SUM(FOL.VRRUBR) AS FLOAT) AS VRBCIRRF
 FROM VGF_EVENTO_S1210_BASEFOLHA FOL
WHERE FOL.IDEDMDEV IN ('O', 'C')
GROUP BY FOL.CODEMP,
         FOL.DTREF,
         FOL.CPFBENEF,
         FOL.DT_TPPGTO,
         FOL.CODCATEG,
         FOL.CODINCIRRF   
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54097-0-0
Nro. O.S. : 1175714
Nome      : Script - TFPMON
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - TFPMON
NomeObjeto: TFPMON
TipoObjeto: TABLE
NomeTabela: TFPMON
Executar  : SE_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
    P_COUNT     NUMBER(5);
BEGIN
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1210'
        AND NOMETAB = 'TFPS1210'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'R';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO)
        VALUES ('S-1210', 'TFPS1210', 'NRORECIBO', 'R');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1210'
        AND NOMETAB = 'TFPS1210'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'M';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW)
        VALUES ('S-1210', 'TFPS1210', 'NRORECIBO', 'M','VGF_EVENTO_S1210');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1210'
        AND NOMETAB = 'TFPS1210_IPGTO'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'M';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
        VALUES ('S-1210', 'TFPS1210_IPGTO', 'NRORECIBO', 'M','VGF_EVENTO_S1210_IPGTO','TFPS1210');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1210'
        AND NOMETAB = 'TFPS1210_DIPGTO'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'M';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
        VALUES ('S-1210', 'TFPS1210_DIPGTO', 'NRORECIBO', 'M','VGF_EVENTO_S1210_DIPGTO','TFPS1210_IPGTO');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1210'
        AND NOMETAB = 'TFPS1210_RDIPGTO'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'M';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
        VALUES ('S-1210', 'TFPS1210_RDIPGTO', 'NRORECIBO', 'M','VGF_EVENTO_S1210_RDIPGTO','TFPS1210_DIPGTO');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1210'
        AND NOMETAB = 'TFPS1210_PRDIPGTO'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'M';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
        VALUES ('S-1210', 'TFPS1210_PRDIPGTO', 'NRORECIBO', 'M','VGF_EVENTO_S1210_PRDIPGTO','TFPS1210_RDIPGTO');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1210'
        AND NOMETAB = 'TFPS1210_RIPGTO'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'M';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
        VALUES ('S-1210', 'TFPS1210_RIPGTO', 'NRORECIBO', 'M','VGF_EVENTO_S1210_RIPGTO','TFPS1210_IPGTO');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1210'
        AND NOMETAB = 'TFPS1210_FIPGTO'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'M';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
        VALUES ('S-1210', 'TFPS1210_FIPGTO', 'NRORECIBO', 'M','VGF_EVENTO_S1210_FIPGTO','TFPS1210_IPGTO');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1210'
        AND NOMETAB = 'TFPS1210_DFIPGTO'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'M';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
        VALUES ('S-1210', 'TFPS1210_DFIPGTO', 'NRORECIBO', 'M','VGF_EVENTO_S1210_DFIPGTO','TFPS1210_FIPGTO');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1210'
        AND NOMETAB = 'TFPS1210_PDFIPGTO'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'M';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
        VALUES ('S-1210', 'TFPS1210_PDFIPGTO', 'NRORECIBO', 'M','VGF_EVENTO_S1210_PDFIPGTO','TFPS1210_DFIPGTO');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1210'
        AND NOMETAB = 'TFPS1210_AIPGTO'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'M';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
        VALUES ('S-1210', 'TFPS1210_AIPGTO', 'NRORECIBO', 'M','VGF_EVENTO_S1210_AIPGTO','TFPS1210_IPGTO');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-1210'
        AND NOMETAB = 'TFPS1210_DAIPGTO'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'M';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
        VALUES ('S-1210', 'TFPS1210_DAIPGTO', 'NRORECIBO', 'M','VGF_EVENTO_S1210_DAIPGTO','TFPS1210_AIPGTO');
    END IF;
END;
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54098-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S2399
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S2399
NomeObjeto: VGF_EVENTO_S2399
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2399
AS
SELECT VEMP.TPINSCEMPREGADOR,
       VEMP.NRINSCEMPREGADOR,
       BAS.REFERENCIA AS DTREF,
       FUN.CPF AS "CPFTRAB",
       FUN.PIS AS "NISTRAB",
       FUN.CODCATEGESOCIAL AS CODCATEG,         
       FUN.DTDEM AS DTTERMINO,
	   BAS.INDMV,
       CASE WHEN CODCATEGESOCIAL = 721 THEN FUN.MTVDESLIGTSV ELSE NULL END AS MTVDESLIG,
       FUN.DTFIMQUARENTENA AS DTFIMQUAR,
       VEMP.CODEMPMATRIZ AS CODEMP,
       CAST(FUN.CODEMP || ':' || FUN.CODFUNC AS VARCHAR2(100)) AS "CHAVE"
   FROM TFPFUN FUN 
	   LEFT JOIN TFPAVI AVI
     ON AVI.CODFUNC = FUN.CODFUNC AND AVI.CODEMP = FUN.CODEMP
	   JOIN TFPBAS BAS
     ON BAS.CODEMP = FUN.CODEMP 
    AND BAS.CODFUNC = FUN.CODFUNC 
    AND BAS.TIPFOLHA = 'R'
    AND BAS.LIBESOCIAL = 'S'
	   LEFT JOIN (SELECT NVL(SUM(FOL.VLREVENTO), 0) AS VALOR, FOL.CODFUNC, FOL.CODEMP
                 FROM TFPFOL FOL, TFPEVE EVE
                WHERE FOL.TIPFOLHA = 'R'
				AND FOL.REFERENCIA  >= TRUNC(SYSDATE - 60,'MONTH')
				AND EVE.CODEVENTO = FOL.CODEVENTO
				AND EVE.IDENTIFICACAO IN (148, 149, 150, 166, 167, 168)
                GROUP BY FOL.CODFUNC, FOL.CODEMP) RESFOL ON RESFOL.CODFUNC = FUN.CODFUNC AND RESFOL.CODEMP = FUN.CODEMP    
     , VGF_EVENTO_EMPREGADOR VEMP
  WHERE FUN.CODEMP = VEMP.CODEMP
    AND FUN.CODCATEGESOCIAL >= 701
    AND FUN.SITESOCIAL IN ('O','5','6','T')
    AND FUN.SITUACAO = 0
    AND FUN.DTDEM >= VEMP.DTTERCEIRAFASE
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54099-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S2399_BASE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S2399_BASE
NomeObjeto: VGF_EVENTO_S2399_BASE
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2399_BASE
  AS 
  SELECT DISTINCT
          BASE.CODEMP,
          BASE.DTREF,
          BASE.TPINSCEMPREGADOR,
          BASE.NRINSCEMPREGADOR,
          BASE.TPINSCESTABELECIMENTO,
          BASE.NRINSCESTABELECIMENTO,
          BASE.CHAVEDESLIG AS CHAVE2399,
          BASE.CPF,
          BASE.PIS,
          BASE.CODEMPFUNC,
          BASE.CODFUNC,
          BASE.CODCATEG,
          CAST(BASE.IDEDMDEV AS VARCHAR2(30)) AS IDEDMDEV,
          CAST(BASE.CODLOTACAO AS VARCHAR2(30)) AS CODLOTACAO,
          BASE.CODPARC,
          BASE.GRAUEXP,
          BASE.PERAPUR,
          BASE.INDMV,
          BASE.QTDDIASINTERM, --layout 2.4.2
          BASE.QTDDIASTRAB,
          BASE.CODSIND,
          BASE.PROCESSO,
          BASE.DSC
     FROM VGF_EVENTO_BASEFOLHA BASE
    WHERE BASE.IDEDMDEV = 'R'
      AND BASE.CODCATEG >= 701
      AND BASE.DTTERCEIRAFASE IS NOT NULL
      AND BASE.DTDEM >= BASE.DTTERCEIRAFASE /* DEMAIS EVENTOS DO S-2399 SÃ ENTRAM NA TERCEIRA FASE */
      AND BASE.DTDEM >= SYSDATE - 60
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54100-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS2399_REMOUTREMPRE 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS2399_REMOUTREMPRE 
NomeObjeto: TFPS2399_REMOUTREMPRE 
TipoObjeto: TABLE
NomeTabela: TFPS2399_REMOUTREMPRE 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS2399_REMOUTREMPRE ( /*INFORMAÃÃES RELATIVAS AO TRABALHADOR QUE POSSUI VÃ?NCULO EMPREGATÃ?CIO COM OUTRA(S) EMPRESA(S) - */
    CODEMP            NUMBER(5),
    DTREF             DATE,
    TPAMB             CHAR(1),
    SEQUENCIA         NUMBER(5),
    CHAVE2399         VARCHAR2(100), /*CHAVEPAI*/
    CHAVE             VARCHAR2(100), /*NRINSC:CODCATEG*/
    TPINSC            NUMBER(5),
    NRINSC            VARCHAR2(15),
    CODCATEG          NUMBER(5),
    VLRREMUNOE        FLOAT,
    CONSTRAINT PK_TFPS2399_REMOUTREMPRE PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2399, CHAVE),
    CONSTRAINT FK_REMOUTREMPRE_TFPS2399 FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2399) REFERENCES TFPS2399(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54101-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S2399_REMOUTREMPRE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S2399_REMOUTREMPRE
NomeObjeto: VGF_EVENTO_S2399_REMOUTREMPRE
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2399_REMOUTREMPRE
AS
SELECT 
  BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE2399
, CAST (ROE.CGCCPF || ':' || ROE.CODCATEG AS VARCHAR2 (100)) AS CHAVE
, CASE WHEN LENGTH (ROE.CGCCPF) = 14 THEN 1 ELSE 2 END AS TPINSC
, CAST(ROE.CGCCPF AS VARCHAR2(15)) AS NRINSC
, ROE.CODCATEG
, CAST(SUM(FOL.VLREVENTO) AS FLOAT) AS VLRREMUNOE
FROM (SELECT DISTINCT CODEMP, DTREF, CHAVE2399, CODEMPFUNC, CODFUNC, IDEDMDEV FROM VGF_EVENTO_S2399_BASE) BASE
, TFPROE ROE
, TFPFOL FOL
WHERE BASE.CODEMPFUNC = ROE.CODEMP
  AND BASE.CODFUNC = ROE.CODFUNC
  AND FOL.CODEMP = BASE.CODEMPFUNC 
  AND FOL.CODFUNC = BASE.CODFUNC
  AND FOL.REFERENCIA = BASE.DTREF
  AND FOL.TIPFOLHA = BASE.IDEDMDEV
  AND FOL.CODEVENTO IN (SELECT EVE.CODEVENTO FROM TFPEVE EVE WHERE EVE.IDENTIFICACAO = 178) /* EVENTO DE REMUNERAÃÃO OUTRAS EMPRESAS */
  AND FOL.SEQUENCIA = ROE.SEQUENCIA
GROUP BY BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE2399
, ROE.CGCCPF 
, ROE.CODCATEG
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54102-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS2399_PROCJUD 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS2399_PROCJUD 
NomeObjeto: TFPS2399_PROCJUD 
TipoObjeto: TABLE
NomeTabela: TFPS2399_PROCJUD 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS2399_PROCJUD (
    CODEMP           NUMBER(5),
    DTREF            DATE,
    TPAMB            CHAR(1),
    SEQUENCIA        NUMBER(5),
    CHAVE2399        VARCHAR2(100), /*CHAVEPAI INDAPURACAO:CPFTRAB*/
    CHAVE            VARCHAR2(100),
    TPTRIB           NUMBER(5),
    NRPROCJUD        VARCHAR2(50),
    CODSUSP          VARCHAR2(14), /* SÃ ACEITA NUMEROS */
    CONSTRAINT PK_TFPS2399_PROCJUD PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2399, CHAVE),
    CONSTRAINT FK_PROCJUD_TFPS2399 FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2399) REFERENCES TFPS2399(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54103-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S2399_PROCJUD 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S2399_PROCJUD 
NomeObjeto: VGF_EVENTO_S2399_PROCJUD 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2399_PROCJUD /* PROCJUDTRAB */
AS
SELECT DISTINCT
  BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE2399
, CAST(PSS.NUPROCESSO AS VARCHAR2(100)) AS CHAVE
, PSS.ABRANPROCESSO AS TPTRIB
, CAST(PSS.NUMPROCESSO AS VARCHAR2(50)) AS NRPROCJUD
, CAST(PSS.NUPROCESSO AS VARCHAR2(14)) AS CODSUSP
FROM VGF_EVENTO_S2399_BASE BASE
, TFPPSS PSS
, TFPEPR EPR
, TFPFOL FOL
WHERE PSS.ABRANPROCESSO BETWEEN 1 AND 4
AND FOL.CODEMP = BASE.CODEMPFUNC 
AND FOL.CODFUNC = BASE.CODFUNC
AND FOL.REFERENCIA = BASE.DTREF
AND FOL.TIPFOLHA = BASE.IDEDMDEV
AND FOL.CODEVENTO = EPR.CODEVENTO
AND PSS.NUPROCESSO = EPR.NUPROCESSO
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54104-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS2399_DMDEV
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS2399_DMDEV
NomeObjeto: TFPS2399_DMDEV
TipoObjeto: TABLE
NomeTabela: TFPS2399_DMDEV
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS2399_DMDEV(-- DEMONSTRATIVOS DE VALORES DEVIDOS AO TRABALHADOR, ATE 50 OCORRÃNCIAS
    CODEMP           NUMBER(5),
    DTREF            DATE,
    TPAMB            CHAR(1),
    SEQUENCIA        NUMBER(5),
    CHAVE2399        VARCHAR2(100),
    CHAVE            VARCHAR2(100), /*IDEDMDEV*/
    IDEDMDEV         VARCHAR2(100),
    CONSTRAINT PK_TFPS2399_DMDEV PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2399, CHAVE),
    CONSTRAINT FK_DMDEV_TFPS2399 FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2399) REFERENCES TFPS2399(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54105-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S2399_DMDEV 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S2399_DMDEV 
NomeObjeto: VGF_EVENTO_S2399_DMDEV 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2399_DMDEV /* IDENTIFICAÃÃO DE CADA UM DOS DEMONSTRATIVOS DE VALORES DEVIDOS AO TRABALHADOR */
AS
SELECT DISTINCT
  BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE2399
, CAST(BASE.IDEDMDEV AS VARCHAR2(100)) AS CHAVE
, BASE.IDEDMDEV
FROM VGF_EVENTO_S2399_BASE BASE
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54106-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS2399_DMDEV_EL
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS2399_DMDEV_EL
NomeObjeto: TFPS2399_DMDEV_EL
TipoObjeto: TABLE
NomeTabela: TFPS2399_DMDEV_EL
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS2399_DMDEV_EL( /* ESTABELECIMENTO/LOTAÃÃO NO QUAL O TRABALHADOR POSSUI REMUNERAÃÃO NO PERÃ?ODO DE APURAÃÃO*/
    CODEMP            NUMBER(5),
    DTREF             DATE,
    TPAMB             CHAR(1),
    SEQUENCIA         NUMBER(5),
    CHAVE2399         VARCHAR2(100),
    IDEDMDEV          VARCHAR2(100),  /*CHAVEPAI*/
    CHAVE             VARCHAR2(100), /*CODLOTACAO*/
    TPINSC            NUMBER(5),
    NRINSC            VARCHAR2(15),
    CODLOTACAO        VARCHAR2(30),
    GRAUEXP           NUMBER(5),
	INDSIMPLES        NUMBER(5),
    CONSTRAINT PK_TFPS2399_DMDEV_EL PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2399, IDEDMDEV, CHAVE),
    CONSTRAINT FK_EL_TFPS2399_DMDEV FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2399, IDEDMDEV) REFERENCES TFPS2399_DMDEV(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2399, CHAVE) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54107-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S2399_DMDEV_EL 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S2399_DMDEV_EL 
NomeObjeto: VGF_EVENTO_S2399_DMDEV_EL 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2399_DMDEV_EL /* IDEESTABLOT */
AS
SELECT DISTINCT
  BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE2399
, BASE.IDEDMDEV
, CAST(BASE.CODLOTACAO AS VARCHAR2(100)) AS CHAVE
, BASE.TPINSCESTABELECIMENTO AS TPINSC
, BASE.NRINSCESTABELECIMENTO AS NRINSC
, BASE.CODLOTACAO
, BASE.GRAUEXP
, (SELECT INDSIMPLES FROM TFPEMP E WHERE E.CODEMP = BASE.CODEMP) AS INDSIMPLES 	
FROM VGF_EVENTO_S2399_BASE BASE
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54108-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS2399_DMDEV_IRPA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS2399_DMDEV_IRPA
NomeObjeto: TFPS2399_DMDEV_IRPA
TipoObjeto: TABLE
NomeTabela: TFPS2399_DMDEV_IRPA
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS2399_DMDEV_IRPA( /* REGISTRO QUE RELACIONA AS RUBRICAS QUE COMPÃEM A REMUNERAÃÃO DO TRABALHADOR. */
    CODEMP            NUMBER(5),
    DTREF             DATE,
    TPAMB             CHAR(1),
    SEQUENCIA         NUMBER(5),
    CHAVE2399         VARCHAR2(100),
    IDEDMDEV          VARCHAR2(100),
    CODLOTACAO        VARCHAR2(100),
    CHAVE             VARCHAR2(100), /*CODRUBR*/
    CODRUBR           VARCHAR2(30),
    IDETABRUBR        VARCHAR2(8),
    QTDRUBR           FLOAT, /*(6,2)*/
    FATORRUBR         FLOAT, /*(5,2)*/
    VRUNIT            FLOAT, /*(14,2)*/
    VRRUBR            FLOAT,    /*(14,2)*/
    CONSTRAINT PK_TFPS2399_DMDEV_IRPA PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2399, IDEDMDEV, CODLOTACAO, CHAVE),
    CONSTRAINT FK_I_TFPS2399_DMDEV_EL FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2399, IDEDMDEV, CODLOTACAO) REFERENCES TFPS2399_DMDEV_EL(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2399, IDEDMDEV, CHAVE) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54109-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S2399_DMDEV_IRPA 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S2399_DMDEV_IRPA 
NomeObjeto: VGF_EVENTO_S2399_DMDEV_IRPA 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2399_DMDEV_IRPA /* ITENSREMUN */
AS
SELECT
  RUB.CODEMP 
, RUB.DTREF
, RUB.CHAVEDESLIG AS CHAVE2399
, RUB.IDEDMDEV
, RUB.CODLOTACAO 
, RUB.CODRUBR AS CHAVE
, CAST(RUB.CODRUBR AS VARCHAR2(30)) AS CODRUBR
, CAST(RUB.IDETABRUBR AS VARCHAR2(8)) AS IDETABRUBR
, CAST(MAX(RUB.QTDRUBR) AS FLOAT) AS QTDRUBR
, CAST(RUB.FATORRUBR AS FLOAT) AS FATORRUBR
, CAST(RUB.VRUNIT AS FLOAT) AS VRUNIT
, CAST(SUM(RUB.VRRUBR) AS FLOAT) AS VRRUBR
FROM VGF_EVENTO_BASERUBRICA RUB
WHERE RUB.IDEDMDEV = 'R'
  AND RUB.CODCATEG >= 701
  AND RUB.DTTERCEIRAFASE IS NOT NULL
  AND RUB.DTDEM >= RUB.DTTERCEIRAFASE /*TAGS DO S-2399 SÃ ENTRAM NA TERCEIRA FASE */
  AND RUB.DTDEM >= SYSDATE - 60
GROUP BY
  RUB.CODEMP
, RUB.DTREF
, RUB.CHAVEDESLIG
, RUB.IDEDMDEV
, RUB.CODLOTACAO
, RUB.CODRUBR
, RUB.IDETABRUBR
, RUB.FATORRUBR
, RUB.VRUNIT
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54110-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS2399_DMDEV_DRPA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS2399_DMDEV_DRPA
NomeObjeto: TFPS2399_DMDEV_DRPA
TipoObjeto: TABLE
NomeTabela: TFPS2399_DMDEV_DRPA
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS2399_DMDEV_DRPA( /* Detalhamento dos valores pagos a Operadoras de Planos de SaÃºde. */
    CODEMP           NUMBER(5),
    DTREF            DATE,
    TPAMB            CHAR(1),
    SEQUENCIA        NUMBER(5),
    CHAVE2399        VARCHAR2(100),
    IDEDMDEV         VARCHAR2(100),
    CODLOTACAO       VARCHAR2(100),
    CHAVE            VARCHAR2(100), /*cnpjOper*/
    CNPJOPER         VARCHAR2(100),
    REGANS           VARCHAR2(6),
    VRPGTIT          FLOAT, /*(14,2)*/
    CONSTRAINT PK_TFPS2399_DMDEV_DRPA PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2399, IDEDMDEV, CODLOTACAO, CHAVE),
    CONSTRAINT FK_D_TFPS2399_DMDEV_EL FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2399, IDEDMDEV, CODLOTACAO) REFERENCES TFPS2399_DMDEV_EL(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2399, IDEDMDEV, CHAVE) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54111-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S2399_DMDEV_DRPA 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S2399_DMDEV_DRPA 
NomeObjeto: VGF_EVENTO_S2399_DMDEV_DRPA 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2399_DMDEV_DRPA /* infoSaudeColet */
AS
     SELECT BASE.CODEMP,
            BASE.DTREF,
            BASE.CHAVE2399,
            BASE.IDEDMDEV,
            BASE.CODLOTACAO,
            CAST(CON.CNPJ AS VARCHAR2(100)) AS CHAVE,
            CON.CNPJ AS CNPJOPER,
            CAST(CON.REGANS AS VARCHAR2(6)) AS REGANS,
            CAST(SUM (CASE WHEN VPS.SEQUENCIA = 0 THEN VPS.VALOR ELSE 0 END) AS FLOAT) AS VRPGTIT
       FROM VGF_EVENTO_S2399_BASE BASE, TFPTVPS VPS, TFPCON CON
      WHERE VPS.CODEMP = BASE.CODEMPFUNC
        AND VPS.CODFUNC = BASE.CODFUNC
        AND VPS.REFERENCIA = BASE.DTREF
        AND VPS.CODPARC = BASE.CODPARC
        AND CON.CODCONVENIO = VPS.CODCONVENIO
        AND EXISTS ( SELECT 1 FROM TFPFOL FOL
                      WHERE CODEVENTO IN (SELECT CODEVENTO FROM TFPEVE WHERE CODNATRUBRICA = 9219 AND USADOESOCIAL = 'S')
                        AND FOL.CODEMP = BASE.CODEMPFUNC
                        AND FOL.CODFUNC = BASE.CODFUNC
                        AND FOL.REFERENCIA = BASE.DTREF
                        AND FOL.TIPFOLHA = BASE.IDEDMDEV )
   GROUP BY BASE.CODEMP, BASE.DTREF, BASE.CHAVE2399, BASE.IDEDMDEV, BASE.CODLOTACAO,
            CON.CNPJ, CON.REGANS
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54112-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS2399_DMDEV_DDRPA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS2399_DMDEV_DDRPA
NomeObjeto: TFPS2399_DMDEV_DDRPA
TipoObjeto: TABLE
NomeTabela: TFPS2399_DMDEV_DDRPA
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS2399_DMDEV_DDRPA( /* InformaÃ§Ãµes do dependente do plano privado de saÃºde. */
    CODEMP           NUMBER(5),
    DTREF            DATE,
    TPAMB            CHAR(1),
    SEQUENCIA        NUMBER(5),
    CHAVE2399        VARCHAR2(100),
    IDEDMDEV         VARCHAR2(100),
    CODLOTACAO       VARCHAR2(100),
    CNPJOPER         VARCHAR2(100),
    CHAVE            VARCHAR2(100), /*nmDep porque pode ser que o dependente nÃ£o tenha  cpf, talvez possamos utilizar algum identificador do sistema*/
    TPDEP            VARCHAR2(2),
    CPFDEP           VARCHAR2(11),
    NMDEP            VARCHAR2(70),
    DTNASCTO         DATE,
    VLRPGDEP         FLOAT, /*(14,2)*/
    CONSTRAINT PK_TFPS2399_DMDEV_DDRPA PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2399, IDEDMDEV, CODLOTACAO, CNPJOPER, CHAVE),
    CONSTRAINT FK_D_TFPS2399_DMDEV_DRPA FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2399, IDEDMDEV, CODLOTACAO, CNPJOPER) REFERENCES TFPS2399_DMDEV_DRPA(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2399, IDEDMDEV, CODLOTACAO, CHAVE) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54113-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S2399_DMDEV_DDRPA 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S2399_DMDEV_DDRPA 
NomeObjeto: VGF_EVENTO_S2399_DMDEV_DDRPA 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2399_DMDEV_DDRPA /* infoSaudeColet/detPlano  */
AS
SELECT
  BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE2399
, BASE.IDEDMDEV
, BASE.CODLOTACAO
, CON.CNPJ AS CNPJOPER
, CAST (DPD.SEQUENCIA AS VARCHAR2(100)) AS "CHAVE"
, CAST(CASE
    WHEN DPD.GRAUPARENTESCO = 1 THEN 3
    WHEN DPD.GRAUPARENTESCO = 2 THEN 1
    WHEN DPD.GRAUPARENTESCO = 3 THEN 9
    WHEN DPD.GRAUPARENTESCO = 6 THEN 11
    WHEN DPD.GRAUPARENTESCO = 9 THEN 6
    WHEN DPD.GRAUPARENTESCO = 11 THEN 10
    WHEN DPD.GRAUPARENTESCO = 12 THEN 2
    WHEN DPD.GRAUPARENTESCO = 13 THEN 4
    WHEN DPD.GRAUPARENTESCO = 14 THEN 12
    ELSE 99 END AS VARCHAR2(2)) AS TPDEP
, DPD.CPF AS CPFDEP
, CAST(DPD.NOMEDEPEND AS VARCHAR2(70)) AS NMDEP
, DPD.DTNASC AS DTNASCTO
, CAST(SUM(CASE WHEN VPS.SEQUENCIA <> 0 THEN VPS.VALOR ELSE 0 END) AS FLOAT) AS VLRPGDEP
       FROM VGF_EVENTO_S2399_BASE BASE, TFPTVPS VPS, TFPCON CON, TFPDPD DPD
      WHERE VPS.CODEMP = BASE.CODEMPFUNC
        AND VPS.CODFUNC = BASE.CODFUNC
        AND VPS.REFERENCIA = BASE.DTREF
        AND VPS.CODPARC = BASE.CODPARC
        AND CON.CODCONVENIO = VPS.CODCONVENIO
        AND EXISTS ( SELECT 1 FROM TFPFOL FOL
                      WHERE CODEVENTO IN (SELECT CODEVENTO FROM TFPEVE WHERE CODNATRUBRICA = 9219 AND USADOESOCIAL = 'S')
                        AND FOL.CODEMP = BASE.CODEMPFUNC
                        AND FOL.CODFUNC = BASE.CODFUNC
                        AND FOL.REFERENCIA = BASE.DTREF
                        AND FOL.TIPFOLHA = BASE.IDEDMDEV )
    AND VPS.CODEMP = DPD.CODEMP
    AND VPS.CODFUNC = DPD.CODFUNC
    AND VPS.SEQUENCIA = DPD.SEQUENCIA
GROUP BY CON.CNPJ
, BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE2399
, BASE.IDEDMDEV
, BASE.CODLOTACAO
, CON.REGANS
, VPS.CODEMP
, VPS.CODFUNC
, VPS.REFERENCIA
, CASE
    WHEN DPD.GRAUPARENTESCO = 1 THEN 3
    WHEN DPD.GRAUPARENTESCO = 2 THEN 1
    WHEN DPD.GRAUPARENTESCO = 3 THEN 9
    WHEN DPD.GRAUPARENTESCO = 6 THEN 11
    WHEN DPD.GRAUPARENTESCO = 9 THEN 6
    WHEN DPD.GRAUPARENTESCO = 11 THEN 10
    WHEN DPD.GRAUPARENTESCO = 12 THEN 2
    WHEN DPD.GRAUPARENTESCO = 13 THEN 4
    WHEN DPD.GRAUPARENTESCO = 14 THEN 12
    ELSE 99 END
, DPD.CPF
, DPD.SEQUENCIA
, DPD.NOMEDEPEND
, DPD.DTNASC
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54114-0-0
Nro. O.S. : 1175714
Nome      : Script - TFPMON
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - TFPMON
NomeObjeto: TFPMON
TipoObjeto: TABLE
NomeTabela: TFPMON
Executar  : SE_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
    P_COUNT     NUMBER(5);
BEGIN
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-2399'
        AND NOMETAB = 'TFPS2399'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'R';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO)
        VALUES ('S-2399', 'TFPS2399', 'NRORECIBO', 'R');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-2399'
        AND NOMETAB = 'TFPS2399'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'M';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW)
        VALUES ('S-2399', 'TFPS2399', 'NRORECIBO', 'M','VGF_EVENTO_S2399');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-2399'
        AND NOMETAB = 'TFPS2399_DMDEV'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'M';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
        VALUES ('S-2399', 'TFPS2399_DMDEV', 'NRORECIBO', 'M','VGF_EVENTO_S2399_DMDEV', 'TFPS2399');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-2399'
        AND NOMETAB = 'TFPS2399_DMDEV_EL'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'M';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
        VALUES ('S-2399', 'TFPS2399_DMDEV_EL', 'NRORECIBO', 'M','VGF_EVENTO_S2399_DMDEV_EL', 'TFPS2399_DMDEV');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-2399'
        AND NOMETAB = 'TFPS2399_DMDEV_IRPA'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'M';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
        VALUES ('S-2399', 'TFPS2399_DMDEV_IRPA', 'NRORECIBO', 'M','VGF_EVENTO_S2399_DMDEV_IRPA', 'TFPS2399_DMDEV_EL'); 
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-2399'
        AND NOMETAB = 'TFPS2399_DMDEV_DRPA'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'M';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
        VALUES ('S-2399', 'TFPS2399_DMDEV_DRPA', 'NRORECIBO', 'M','VGF_EVENTO_S2399_DMDEV_DRPA', 'TFPS2399_DMDEV');
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-2399'
        AND NOMETAB = 'TFPS2399_PROCJUD'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'M';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
        VALUES ('S-2399', 'TFPS2399_PROCJUD', 'NRORECIBO', 'M','VGF_EVENTO_S2399_PROCJUD', 'TFPS2399'); 
    END IF;
    
    SELECT COUNT(*) INTO P_COUNT
    FROM TFPMON
    WHERE NOMEEVENTO = 'S-2399'
        AND NOMETAB = 'TFPS2399_REMOUTREMPRE'
        AND NOMECOLUNA = 'NRORECIBO'
        AND TIPO = 'M';
        
    IF P_COUNT = 0 THEN
        INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
        VALUES ('S-2399', 'TFPS2399_REMOUTREMPRE', 'NRORECIBO', 'M','VGF_EVENTO_S2399_REMOUTREMPRE', 'TFPS2399'); 
    END IF;
END;
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54116-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S2299_BASE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S2299_BASE
NomeObjeto: VGF_EVENTO_S2299_BASE
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2299_BASE
  AS 
  SELECT DISTINCT
          BASE.CODEMP,
          BASE.DTREF,
          BASE.TPINSCEMPREGADOR,
          BASE.NRINSCEMPREGADOR,
          BASE.TPINSCESTABELECIMENTO,
          BASE.NRINSCESTABELECIMENTO,
          BASE.CHAVEDESLIG AS CHAVE2299,
          BASE.CPF,
          BASE.PIS,
          CAST(BASE.MATRICULA AS VARCHAR2(30)) AS MATRICULA,
          BASE.CODEMPFUNC,
          BASE.CODFUNC,
          BASE.CODCATEG,
          CAST(BASE.IDEDMDEV AS VARCHAR2(30)) AS IDEDMDEV,
          CAST(BASE.CODLOTACAO AS VARCHAR2(30)) AS CODLOTACAO,
          BASE.CODPARCEMP,
          BASE.QTDDIASAV,
          BASE.CODPARC,
          BASE.GRAUEXP,
          BASE.PERAPUR,
          BASE.INDMV,
          BASE.QTDDIASINTERM, --layout 2.4.2
          BASE.QTDDIASTRAB,
          BASE.CODSIND,
          BASE.PROCESSO,
          BASE.DSC,
          BASE.CNPJEMPREGANT,
          BASE.CODCONV
     FROM VGF_EVENTO_BASEFOLHA BASE
    WHERE ((BASE.IDEDMDEV ='R') OR (BASE.GERARPARESCISAO = 'S'))
      AND BASE.CODCATEG < 701
      AND BASE.DTTERCEIRAFASE IS NOT NULL
      AND BASE.DTDEM >= BASE.DTTERCEIRAFASE /* DEMAIS EVENTOS DO S-2299 SÓ ENTRAM NA TERCEIRA FASE */
      AND BASE.DTDEM >= SYSDATE - 60
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54117-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S2299_BASE_PA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S2299_BASE_PA
NomeObjeto: VGF_EVENTO_S2299_BASE_PA
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2299_BASE_PA
AS
   SELECT DISTINCT BASE.CODEMP,
                   BASE.DTREF,
                   BASE.CHAVEDESLIG AS CHAVE2299,
                   BASE.IDEDMDEV,
                   BASE.CHAVE2299_PA_ADC,
                   BASE.DTACCONV,
                   BASE.TPACCONV,
                   BASE.COMPACCONV,
                   BASE.DTEFACCONV,
                   BASE.DSC,
                   BASE.REMUNSUC,
                   BASE.TPINSCESTABELECIMENTO,
                   BASE.NRINSCESTABELECIMENTO,
                   BASE.CODLOTACAO,
                   BASE.MATRICULA,
                   BASE.INDSIMPLES,
                   BASE.GRAUEXP,
                   BASE.CODPARC,
                   BASE.CODEMPFUNC,
                   BASE.CODFUNC,
                   BASE.CODCONV,
                   BASE.PERREF,
                   BASE.IDETABRUBR AS CODEVENTO
     FROM VGF_EVENTO_BASERUBRICA_PA BASE
    WHERE GERARPARESCISAO = 'S'
      AND BASE.CODCATEG < 701
      AND BASE.DTTERCEIRAFASE IS NOT NULL
      AND BASE.DTDEM >= BASE.DTTERCEIRAFASE /* DEMAIS EVENTOS DO S-2299 SÓ ENTRAM NA TERCEIRA FASE */
      AND BASE.DTDEM >= SYSDATE - 60
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54118-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS2299_REMOUTREMPRE 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS2299_REMOUTREMPRE 
NomeObjeto: TFPS2299_REMOUTREMPRE 
TipoObjeto: TABLE
NomeTabela: TFPS2299_REMOUTREMPRE 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS2299_REMOUTREMPRE ( /*INFORMAÃÃES RELATIVAS AO TRABALHADOR QUE POSSUI VÃ?NCULO EMPREGATÃ?CIO COM OUTRA(S) EMPRESA(S) - */
    CODEMP            NUMBER(5),
    DTREF             DATE,
    TPAMB             CHAR(1),
    SEQUENCIA         NUMBER(5),
    CHAVE2299         VARCHAR2(100), /*CHAVEPAI*/
    CHAVE             VARCHAR2(100), /*NRINSC:CODCATEG*/
    TPINSC            NUMBER(5),
    NRINSC            VARCHAR2(15),
    CODCATEG          NUMBER(5),
    VLRREMUNOE        FLOAT,
    CONSTRAINT PK_TFPS2299_REMOUTREMPRE PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, CHAVE),
    CONSTRAINT FK_REMOUTREMPRE_TFPS2299 FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299) REFERENCES TFPS2299(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54119-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S2299_REMOUTREMPRE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S2299_REMOUTREMPRE
NomeObjeto: VGF_EVENTO_S2299_REMOUTREMPRE
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2299_REMOUTREMPRE
AS
SELECT 
  BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE2299
, CAST (ROE.CGCCPF || ':' || ROE.CODCATEG AS VARCHAR2 (100)) AS CHAVE
, CASE WHEN LENGTH (ROE.CGCCPF) = 14 THEN 1 ELSE 2 END AS TPINSC
, CAST(ROE.CGCCPF AS VARCHAR2(15)) AS NRINSC
, ROE.CODCATEG
, CAST(SUM(FOL.VLREVENTO) AS FLOAT) AS VLRREMUNOE
FROM (SELECT DISTINCT CODEMP, DTREF, CHAVE2299, CODEMPFUNC, CODFUNC, IDEDMDEV FROM VGF_EVENTO_S2299_BASE) BASE
, TFPROE ROE
, TFPFOL FOL
WHERE BASE.CODEMPFUNC = ROE.CODEMP
  AND BASE.CODFUNC = ROE.CODFUNC
  AND FOL.CODEMP = BASE.CODEMPFUNC 
  AND FOL.CODFUNC = BASE.CODFUNC
  AND FOL.REFERENCIA = BASE.DTREF
  AND FOL.TIPFOLHA = BASE.IDEDMDEV
  AND FOL.CODEVENTO IN (SELECT EVE.CODEVENTO FROM TFPEVE EVE WHERE EVE.IDENTIFICACAO = 178) /* EVENTO DE REMUNERAÇÃO OUTRAS EMPRESAS */
  AND FOL.SEQUENCIA = ROE.SEQUENCIA
GROUP BY BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE2299
, ROE.CGCCPF 
, ROE.CODCATEG
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54120-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS2299_PROCJUD 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS2299_PROCJUD 
NomeObjeto: TFPS2299_PROCJUD 
TipoObjeto: TABLE
NomeTabela: TFPS2299_PROCJUD 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS2299_PROCJUD (
    CODEMP           NUMBER(5),
    DTREF            DATE,
    TPAMB            CHAR(1),
    SEQUENCIA        NUMBER(5),
    CHAVE2299        VARCHAR2(100), /*CHAVEPAI INDAPURACAO:CPFTRAB*/
    CHAVE            VARCHAR2(100),
    TPTRIB           NUMBER(5),
    NRPROCJUD        VARCHAR2(50),
    CODSUSP          VARCHAR2(14), /* SÃ ACEITA NUMEROS */
    CONSTRAINT PK_TFPS2299_PROCJUD PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, CHAVE),
    CONSTRAINT FK_PROCJUD_TFPS2299 FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299) REFERENCES TFPS2299(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54121-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S2299_PROCJUD 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S2299_PROCJUD 
NomeObjeto: VGF_EVENTO_S2299_PROCJUD 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2299_PROCJUD /* PROCJUDTRAB */
AS
SELECT DISTINCT
  BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE2299
, CAST(PSS.NUPROCESSO AS VARCHAR2(100)) AS CHAVE
, PSS.ABRANPROCESSO AS TPTRIB
, CAST(PSS.NUMPROCESSO AS VARCHAR2(50)) AS NRPROCJUD
, CAST(PSS.NUPROCESSO AS VARCHAR2(14)) AS CODSUSP
FROM VGF_EVENTO_S2299_BASE BASE
, TFPPSS PSS
, TFPEPR EPR
, TFPFOL FOL
WHERE PSS.ABRANPROCESSO BETWEEN 1 AND 4
AND FOL.CODEMP = BASE.CODEMPFUNC 
AND FOL.CODFUNC = BASE.CODFUNC
AND FOL.REFERENCIA = BASE.DTREF
AND FOL.TIPFOLHA = BASE.IDEDMDEV
AND FOL.CODEVENTO = EPR.CODEVENTO
AND PSS.NUPROCESSO = EPR.NUPROCESSO
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54122-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS2299_DMDEV
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS2299_DMDEV
NomeObjeto: TFPS2299_DMDEV
TipoObjeto: TABLE
NomeTabela: TFPS2299_DMDEV
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS2299_DMDEV(-- DEMONSTRATIVOS DE VALORES DEVIDOS AO TRABALHADOR, ATE 50 OCORRÊNCIAS
    CODEMP           NUMBER(5),
    DTREF            DATE,
    TPAMB            CHAR(1),
    SEQUENCIA        NUMBER(5),
    CHAVE2299        VARCHAR2(100),
    CHAVE            VARCHAR2(100), /*IDEDMDEV*/
    IDEDMDEV         VARCHAR2(30),
    CONSTRAINT PK_TFPS2299_DMDEV PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, CHAVE),
    CONSTRAINT FK_DMDEV_TFPS2299 FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299) REFERENCES TFPS2299(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54123-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S2299_DMDEV 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S2299_DMDEV 
NomeObjeto: VGF_EVENTO_S2299_DMDEV 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2299_DMDEV /* IDENTIFICAÇÃO DE CADA UM DOS DEMONSTRATIVOS DE VALORES DEVIDOS AO TRABALHADOR */
AS
SELECT DISTINCT
  BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE2299
, CAST(BASE.IDEDMDEV AS VARCHAR2(100)) AS CHAVE
, BASE.IDEDMDEV
FROM VGF_EVENTO_S2299_BASE BASE
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54124-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS2299_DMDEV_EL
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS2299_DMDEV_EL
NomeObjeto: TFPS2299_DMDEV_EL
TipoObjeto: TABLE
NomeTabela: TFPS2299_DMDEV_EL
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS2299_DMDEV_EL( /* ESTABELECIMENTO/LOTAÇÃO NO QUAL O TRABALHADOR POSSUI REMUNERAÇÃO NO PERÍODO DE APURAÇÃO*/
    CODEMP            NUMBER(5),
    DTREF             DATE,
    TPAMB             CHAR(1),
    SEQUENCIA         NUMBER(5),
    CHAVE2299         VARCHAR2(100),
    IDEDMDEV          VARCHAR2(30),  /*CHAVEPAI*/
    CHAVE             VARCHAR2(100), /*CODLOTACAO*/
    TPINSC            NUMBER(5),
    NRINSC            VARCHAR2(15),
    CODLOTACAO        VARCHAR2(30),
    GRAUEXP           NUMBER(5),
	INDSIMPLES        NUMBER(5),
    CONSTRAINT PK_TFPS2299_DMDEV_EL PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, IDEDMDEV, CHAVE),
    CONSTRAINT FK_EL_TFPS2299_DMDEV FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, IDEDMDEV) REFERENCES TFPS2299_DMDEV(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, CHAVE) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54125-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S2299_DMDEV_EL 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S2299_DMDEV_EL 
NomeObjeto: VGF_EVENTO_S2299_DMDEV_EL 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2299_DMDEV_EL /* IDEESTABLOT */
AS
SELECT DISTINCT
  BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE2299
, BASE.IDEDMDEV
, CAST(BASE.CODLOTACAO AS VARCHAR2(100)) AS CHAVE
, BASE.TPINSCESTABELECIMENTO AS TPINSC
, BASE.NRINSCESTABELECIMENTO AS NRINSC
, BASE.CODLOTACAO
, BASE.GRAUEXP
, (SELECT INDSIMPLES FROM TFPEMP E WHERE E.CODEMP = BASE.CODEMP) AS INDSIMPLES 	
FROM VGF_EVENTO_S2299_BASE BASE
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54126-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS2299_DMDEV_IRPA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS2299_DMDEV_IRPA
NomeObjeto: TFPS2299_DMDEV_IRPA
TipoObjeto: TABLE
NomeTabela: TFPS2299_DMDEV_IRPA
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS2299_DMDEV_IRPA( /* REGISTRO QUE RELACIONA AS RUBRICAS QUE COMPÕEM A REMUNERAÇÃO DO TRABALHADOR. */
    CODEMP            NUMBER(5),
    DTREF             DATE,
    TPAMB             CHAR(1),
    SEQUENCIA         NUMBER(5),
    CHAVE2299         VARCHAR2(100),
    IDEDMDEV          VARCHAR2(30),
    CODLOTACAO        VARCHAR2(30),
    CHAVE             VARCHAR2(100), /*CODRUBR*/
    CODRUBR           VARCHAR2(30),
    IDETABRUBR        VARCHAR2(8),
    QTDRUBR           FLOAT, /*(6,2)*/
    FATORRUBR         FLOAT, /*(5,2)*/
    VRUNIT            FLOAT, /*(14,2)*/
    VRRUBR            FLOAT,    /*(14,2)*/
    CONSTRAINT PK_TFPS2299_DMDEV_IRPA PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, IDEDMDEV, CODLOTACAO, CHAVE),
    CONSTRAINT FK_I_TFPS2299_DMDEV_EL FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, IDEDMDEV, CODLOTACAO) REFERENCES TFPS2299_DMDEV_EL(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, IDEDMDEV, CHAVE) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54127-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S2299_DMDEV_IRPA 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S2299_DMDEV_IRPA 
NomeObjeto: VGF_EVENTO_S2299_DMDEV_IRPA 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2299_DMDEV_IRPA /* ITENSREMUN */
AS
SELECT
  RUB.CODEMP 
, RUB.DTREF
, RUB.CHAVEDESLIG AS CHAVE2299
, RUB.IDEDMDEV
, RUB.CODLOTACAO 
, RUB.CODRUBR AS CHAVE
, CAST(RUB.CODRUBR AS VARCHAR2(30)) AS CODRUBR
, CAST(RUB.IDETABRUBR AS VARCHAR2(8)) AS IDETABRUBR
, CAST(MAX(RUB.QTDRUBR) AS FLOAT) AS QTDRUBR
, CAST(RUB.FATORRUBR AS FLOAT) AS FATORRUBR
, CAST(RUB.VRUNIT AS FLOAT) AS VRUNIT
, CAST(SUM(RUB.VRRUBR) AS FLOAT) AS VRRUBR
FROM VGF_EVENTO_BASERUBRICA RUB
WHERE RUB.IDEDMDEV = 'R'
  AND RUB.CODCATEG < 701
  AND RUB.DTTERCEIRAFASE IS NOT NULL
  AND RUB.DTDEM >= RUB.DTTERCEIRAFASE /*TAGS DO S-2299 SÓ ENTRAM NA TERCEIRA FASE */
  AND RUB.DTDEM >= SYSDATE - 60
GROUP BY
  RUB.CODEMP
, RUB.DTREF
, RUB.CHAVEDESLIG
, RUB.IDEDMDEV
, RUB.CODLOTACAO
, RUB.CODRUBR
, RUB.IDETABRUBR
, RUB.FATORRUBR
, RUB.VRUNIT
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54128-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS2299_DMDEV_DRPA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS2299_DMDEV_DRPA
NomeObjeto: TFPS2299_DMDEV_DRPA
TipoObjeto: TABLE
NomeTabela: TFPS2299_DMDEV_DRPA
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS2299_DMDEV_DRPA( /* Detalhamento dos valores pagos a Operadoras de Planos de SaÃºde. */
    CODEMP           NUMBER(5),
    DTREF            DATE,
    TPAMB            CHAR(1),
    SEQUENCIA        NUMBER(5),
    CHAVE2299        VARCHAR2(100),
    IDEDMDEV         VARCHAR2(30),
    CODLOTACAO       VARCHAR2(30),
    CHAVE            VARCHAR2(100), /*cnpjOper*/
    CNPJOPER         VARCHAR2(14),
    REGANS           VARCHAR2(6),
    VRPGTIT          FLOAT, /*(14,2)*/
    CONSTRAINT PK_TFPS2299_DMDEV_DRPA PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, IDEDMDEV, CODLOTACAO, CHAVE),
    CONSTRAINT FK_D_TFPS2299_DMDEV_EL FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, IDEDMDEV, CODLOTACAO) REFERENCES TFPS2299_DMDEV_EL(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, IDEDMDEV, CHAVE) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54129-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S2299_DMDEV_DRPA 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S2299_DMDEV_DRPA 
NomeObjeto: VGF_EVENTO_S2299_DMDEV_DRPA 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2299_DMDEV_DRPA /* infoSaudeColet */
AS
     SELECT BASE.CODEMP,
            BASE.DTREF,
            BASE.CHAVE2299,
            BASE.IDEDMDEV,
            BASE.CODLOTACAO,
            CAST(CON.CNPJ AS VARCHAR2(100)) AS CHAVE,
            CON.CNPJ AS CNPJOPER,
            CAST(CON.REGANS AS VARCHAR2(6)) AS REGANS,
            CAST(SUM (CASE WHEN VPS.SEQUENCIA = 0 THEN VPS.VALOR ELSE 0 END) AS FLOAT) AS VRPGTIT
       FROM VGF_EVENTO_S2299_BASE BASE, TFPTVPS VPS, TFPCON CON
      WHERE VPS.CODEMP = BASE.CODEMPFUNC
        AND VPS.CODFUNC = BASE.CODFUNC
        AND VPS.REFERENCIA = BASE.DTREF
        AND VPS.CODPARC = BASE.CODPARC
        AND CON.CODCONVENIO = VPS.CODCONVENIO
        AND EXISTS ( SELECT 1 FROM TFPFOL FOL
                      WHERE CODEVENTO IN (SELECT CODEVENTO FROM TFPEVE WHERE CODNATRUBRICA = 9219 AND USADOESOCIAL = 'S')
                        AND FOL.CODEMP = BASE.CODEMPFUNC
                        AND FOL.CODFUNC = BASE.CODFUNC
                        AND FOL.REFERENCIA = BASE.DTREF
                        AND FOL.TIPFOLHA = BASE.IDEDMDEV )
   GROUP BY BASE.CODEMP, BASE.DTREF, BASE.CHAVE2299, BASE.IDEDMDEV, BASE.CODLOTACAO,
            CON.CNPJ, CON.REGANS
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54130-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS2299_DMDEV_DDRPA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS2299_DMDEV_DDRPA
NomeObjeto: TFPS2299_DMDEV_DDRPA
TipoObjeto: TABLE
NomeTabela: TFPS2299_DMDEV_DDRPA
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS2299_DMDEV_DDRPA( /* Informações do dependente do plano privado de saúde. */
    CODEMP           NUMBER(5),
    DTREF            DATE,
    TPAMB            CHAR(1),
    SEQUENCIA        NUMBER(5),
    CHAVE2299        VARCHAR2(100),
    IDEDMDEV         VARCHAR2(30),
    CODLOTACAO       VARCHAR2(30),
    CNPJOPER         VARCHAR2(14),
    CHAVE            VARCHAR2(100), /*nmDep porque pode ser que o dependente não tenha  cpf, talvez possamos utilizar algum identificador do sistema*/
    TPDEP            VARCHAR2(2),
    CPFDEP           VARCHAR2(11),
    NMDEP            VARCHAR2(70),
    DTNASCTO         DATE,
    VLRPGDEP         FLOAT, /*(14,2)*/
    CONSTRAINT PK_TFPS2299_DMDEV_DDRPA PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, IDEDMDEV, CODLOTACAO, CNPJOPER, CHAVE),
    CONSTRAINT FK_D_TFPS2299_DMDEV_DRPA FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, IDEDMDEV, CODLOTACAO, CNPJOPER) REFERENCES TFPS2299_DMDEV_DRPA(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, IDEDMDEV, CODLOTACAO, CHAVE) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54131-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S2299_DMDEV_DDRPA 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S2299_DMDEV_DDRPA 
NomeObjeto: VGF_EVENTO_S2299_DMDEV_DDRPA 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2299_DMDEV_DDRPA /* infoSaudeColet/detPlano  */
AS
SELECT
  BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE2299
, BASE.IDEDMDEV
, BASE.CODLOTACAO
, CON.CNPJ AS CNPJOPER
, CAST (DPD.SEQUENCIA AS VARCHAR2(100)) AS "CHAVE"
, CAST(CASE
    WHEN DPD.GRAUPARENTESCO = 1 THEN 3
    WHEN DPD.GRAUPARENTESCO = 2 THEN 1
    WHEN DPD.GRAUPARENTESCO = 3 THEN 9
    WHEN DPD.GRAUPARENTESCO = 6 THEN 11
    WHEN DPD.GRAUPARENTESCO = 9 THEN 6
    WHEN DPD.GRAUPARENTESCO = 11 THEN 10
    WHEN DPD.GRAUPARENTESCO = 12 THEN 2
    WHEN DPD.GRAUPARENTESCO = 13 THEN 4
    WHEN DPD.GRAUPARENTESCO = 14 THEN 12
    ELSE 99 END AS VARCHAR2(2)) AS TPDEP
, DPD.CPF AS CPFDEP
, CAST(DPD.NOMEDEPEND AS VARCHAR2(70)) AS NMDEP
, DPD.DTNASC AS DTNASCTO
, CAST(SUM(CASE WHEN VPS.SEQUENCIA <> 0 THEN VPS.VALOR ELSE 0 END) AS FLOAT) AS VLRPGDEP
       FROM VGF_EVENTO_S2299_BASE BASE, TFPTVPS VPS, TFPCON CON, TFPDPD DPD
      WHERE VPS.CODEMP = BASE.CODEMPFUNC
        AND VPS.CODFUNC = BASE.CODFUNC
        AND VPS.REFERENCIA = BASE.DTREF
        AND VPS.CODPARC = BASE.CODPARC
        AND CON.CODCONVENIO = VPS.CODCONVENIO
        AND EXISTS ( SELECT 1 FROM TFPFOL FOL
                      WHERE CODEVENTO IN (SELECT CODEVENTO FROM TFPEVE WHERE CODNATRUBRICA = 9219 AND USADOESOCIAL = 'S')
                        AND FOL.CODEMP = BASE.CODEMPFUNC
                        AND FOL.CODFUNC = BASE.CODFUNC
                        AND FOL.REFERENCIA = BASE.DTREF
                        AND FOL.TIPFOLHA = BASE.IDEDMDEV )
    AND VPS.CODEMP = DPD.CODEMP
    AND VPS.CODFUNC = DPD.CODFUNC
    AND VPS.SEQUENCIA = DPD.SEQUENCIA
GROUP BY CON.CNPJ
, BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE2299
, BASE.IDEDMDEV
, BASE.CODLOTACAO
, CON.REGANS
, VPS.CODEMP
, VPS.CODFUNC
, VPS.REFERENCIA
, CASE
    WHEN DPD.GRAUPARENTESCO = 1 THEN 3
    WHEN DPD.GRAUPARENTESCO = 2 THEN 1
    WHEN DPD.GRAUPARENTESCO = 3 THEN 9
    WHEN DPD.GRAUPARENTESCO = 6 THEN 11
    WHEN DPD.GRAUPARENTESCO = 9 THEN 6
    WHEN DPD.GRAUPARENTESCO = 11 THEN 10
    WHEN DPD.GRAUPARENTESCO = 12 THEN 2
    WHEN DPD.GRAUPARENTESCO = 13 THEN 4
    WHEN DPD.GRAUPARENTESCO = 14 THEN 12
    ELSE 99 END
, DPD.CPF
, DPD.SEQUENCIA
, DPD.NOMEDEPEND
, DPD.DTNASC
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54132-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS2299_DMDEV_RPA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS2299_DMDEV_RPA
NomeObjeto: TFPS2299_DMDEV_RPA
TipoObjeto: TABLE
NomeTabela: TFPS2299_DMDEV_RPA
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS2299_DMDEV_RPA( /* INFORMA??ES RELATIVAS A REMUNERA??O DO TRABALHADOR NO PER?ODO DE APURA??O*/
    CODEMP            NUMBER(5),
    DTREF            DATE,
    TPAMB            CHAR(1),
    SEQUENCIA        NUMBER(5),
    CHAVE2299        VARCHAR2(100),         /*CHAVEBAVO*/
    IDEDMDEV         VARCHAR2(100),        /*CHAVEAVO*/
    CODLOTACAO       VARCHAR2(100),        /*CHAVEPAI*/
    CHAVE            VARCHAR2(100),        /*MATRICULA*/
    MATRICULA        VARCHAR2(30),
    INDSIMPLES        NUMBER(5),
    GRAUEXP            NUMBER(5),
    CONSTRAINT PK_TFPS2299_DMDEV_RPA PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, IDEDMDEV, CODLOTACAO, CHAVE),
    CONSTRAINT FK_RPA_TFPS2299_DMDEV_EL FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, IDEDMDEV, CODLOTACAO) REFERENCES TFPS2299_DMDEV_EL(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, IDEDMDEV, CHAVE) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54133-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS2299_DMDEV_TRPA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS2299_DMDEV_TRPA
NomeObjeto: TFPS2299_DMDEV_TRPA
TipoObjeto: TABLE
NomeTabela: TFPS2299_DMDEV_TRPA
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS2299_DMDEV_TRPA( /* Informações da(s) convocação(ões) de trabalho intermitente */
    CODEMP            NUMBER(5),
    DTREF            DATE,
    TPAMB            CHAR(1),
    SEQUENCIA        NUMBER(5),
    CHAVE2299        VARCHAR2(100),
    IDEDMDEV        VARCHAR2(100),
    CODLOTACAO        VARCHAR2(100),
    MATRICULA        VARCHAR2(100),    /*CHAVEPAI*/
    CHAVE            VARCHAR2(100), /*codConv*/
    CODCONV         VARCHAR2(30),
    CONSTRAINT PK_TFPS2299_DMDEV_TRPA PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, IDEDMDEV, CODLOTACAO, MATRICULA, CHAVE),
    CONSTRAINT FK_T_TFPS2299_DMDEV_RPA FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, IDEDMDEV, CODLOTACAO, MATRICULA) REFERENCES TFPS2299_DMDEV_RPA(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, IDEDMDEV, CODLOTACAO, CHAVE) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54134-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S2299_DMDEV_TRPA 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S2299_DMDEV_TRPA 
NomeObjeto: VGF_EVENTO_S2299_DMDEV_TRPA 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2299_DMDEV_TRPA /* infoInterm */
AS
SELECT DISTINCT
  BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE2299
, BASE.IDEDMDEV
, BASE.CODLOTACAO
, BASE.MATRICULA
, CAST(BASE.CODCONV AS VARCHAR2(100)) AS CHAVE
, BASE.CODCONV
FROM VGF_EVENTO_S2299_BASE BASE
WHERE BASE.CODCONV IS NOT NULL
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54135-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S2299_DMDEV_RPA 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S2299_DMDEV_RPA 
NomeObjeto: VGF_EVENTO_S2299_DMDEV_RPA 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2299_DMDEV_RPA /* REMUNPERAPUR */
AS
SELECT DISTINCT
  BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE2299
, BASE.IDEDMDEV
, BASE.CODLOTACAO
, BASE.MATRICULA AS CHAVE
, CAST(BASE.MATRICULA AS VARCHAR2(30)) AS MATRICULA
, (SELECT INDSIMPLES FROM TFPEMP E WHERE E.CODEMP = BASE.CODEMP) AS INDSIMPLES
, BASE.GRAUEXP
FROM VGF_EVENTO_S2299_BASE BASE            
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54136-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS2299_DMDEV_ADC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS2299_DMDEV_ADC
NomeObjeto: TFPS2299_DMDEV_ADC
TipoObjeto: TABLE
NomeTabela: TFPS2299_DMDEV_ADC
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS2299_DMDEV_ADC( /* IDENTIFICA??O DO INSTRUMENTO OU SITUA??O ENSEJADORA DA REMUNERA??O RELATIVA A PER?ODOS DE APURA??O ANTERIORES. */
    CODEMP            NUMBER(5),
    DTREF             DATE,
    TPAMB             CHAR(1),
    SEQUENCIA         NUMBER(5),
    CHAVE2299         VARCHAR2(100),
    IDEDMDEV          VARCHAR2(100),     
    CHAVE             VARCHAR2(100), /*TPACCONV : CODSIND : PROCESSO*/
    DTACCONV          DATE,
    TPACCONV          CHAR(1),
    COMPACCONV        VARCHAR2(7),
    DTEFACCONV        DATE,
    DSC               VARCHAR2(255),
    REMUNSUC          CHAR(1),
    CONSTRAINT PK_TFPS2299_DMDEV_ADC PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, IDEDMDEV, CHAVE), /*TPACCONV : CODSIND : PROCESSO*/
    CONSTRAINT FK_ADC_TFPS2299_DMDEV FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, IDEDMDEV) REFERENCES TFPS2299_DMDEV(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, CHAVE) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54137-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S2299_DMDEV_ADC 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S2299_DMDEV_ADC 
NomeObjeto: VGF_EVENTO_S2299_DMDEV_ADC 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2299_DMDEV_ADC /* ideADC/infoPerAnt */
AS
SELECT DISTINCT
  BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE2299
, BASE.IDEDMDEV  
, BASE.CHAVE2299_PA_ADC AS CHAVE
, BASE.DTACCONV
, BASE.TPACCONV
, BASE.COMPACCONV
, BASE.DTEFACCONV
, BASE.DSC 
, BASE.REMUNSUC
FROM VGF_EVENTO_S2299_BASE_PA BASE
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54138-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS2299_DMDEV_PADC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS2299_DMDEV_PADC
NomeObjeto: TFPS2299_DMDEV_PADC
TipoObjeto: TABLE
NomeTabela: TFPS2299_DMDEV_PADC
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS2299_DMDEV_PADC( /* IDENTIFICA??O DO PER?ODO AO QUAL SE REFEREM AS DIFEREN?AS DE REMUNERA??O.  PRREF */
    CODEMP             NUMBER(5),
    DTREF              DATE,
    TPAMB              CHAR(1),
    SEQUENCIA          NUMBER(5),
    CHAVE2299          VARCHAR2(100),
    IDEDMDEV           VARCHAR2(100),
    CHAVE2299_PA_ADC   VARCHAR2(100),    
    CHAVE              VARCHAR2(100), /*PERREF*/
    PERREF             VARCHAR2(7),
    CONSTRAINT PK_TFPS2299_DMDEV_PADC PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, IDEDMDEV, CHAVE2299_PA_ADC, CHAVE),/*PERREF*/
    CONSTRAINT FK_P_TFPS2299_DMDEV_ADC FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, IDEDMDEV, CHAVE2299_PA_ADC) REFERENCES TFPS2299_DMDEV_ADC(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, IDEDMDEV, CHAVE) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54139-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S2299_DMDEV_PADC 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S2299_DMDEV_PADC 
NomeObjeto: VGF_EVENTO_S2299_DMDEV_PADC 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2299_DMDEV_PADC /* ideADC/infoPerAnt/idePeriodo  */
AS
SELECT DISTINCT
  BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE2299
, BASE.IDEDMDEV  
, BASE.CHAVE2299_PA_ADC
, BASE.PERREF AS CHAVE
, CAST(BASE.PERREF AS VARCHAR2(7)) AS PERREF
FROM VGF_EVENTO_S2299_BASE_PA BASE
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54140-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS2299_DMDEV_IPADC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS2299_DMDEV_IPADC
NomeObjeto: TFPS2299_DMDEV_IPADC
TipoObjeto: TABLE
NomeTabela: TFPS2299_DMDEV_IPADC
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS2299_DMDEV_IPADC( /*O REGISTRO IDENTIFICA O ESTABELECIMENTO E LOTA??O AO QUAL SE REFEREM AS DIFEREN?AS DE REMUNERA??O DO M?S IDENTIFICADO NO REGISTRO SUPERIOR  IDEESTABLOT */
    CODEMP             NUMBER(5),
    DTREF              DATE,
    TPAMB              CHAR(1),
    SEQUENCIA          NUMBER(5),
    CHAVE2299          VARCHAR2(100),
    IDEDMDEV           VARCHAR2(100),
    CHAVE2299_PA_ADC   VARCHAR2(100),
    PERREF             VARCHAR2(100),    
    CHAVE              VARCHAR2(100), /*CODLOTACAO*/
    TPINSC             NUMBER(5),
    NRINSC             VARCHAR2(15),
    CODLOTACAO         VARCHAR2(100),
    CONSTRAINT PK_TFPS2299_DMDEV_IPADC PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, IDEDMDEV, CHAVE2299_PA_ADC, PERREF, CHAVE), /*CODLOTACAO*/
    CONSTRAINT FK_I_TFPS2299_DMDEV_PADC FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, IDEDMDEV, CHAVE2299_PA_ADC, PERREF) REFERENCES TFPS2299_DMDEV_PADC(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, IDEDMDEV, CHAVE2299_PA_ADC, CHAVE) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54141-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S2299_DMDEV_IPADC 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S2299_DMDEV_IPADC 
NomeObjeto: VGF_EVENTO_S2299_DMDEV_IPADC 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2299_DMDEV_IPADC /* ideADC/infoPerAnt/idePeriodo/ideEstabLot   */
AS
SELECT DISTINCT
  BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE2299
, BASE.IDEDMDEV  
, BASE.CHAVE2299_PA_ADC
, BASE.PERREF
, CAST(BASE.CODLOTACAO AS VARCHAR2(100)) AS CHAVE
, BASE.TPINSCESTABELECIMENTO AS TPINSC
, BASE.NRINSCESTABELECIMENTO AS NRINSC
, BASE.CODLOTACAO      
FROM VGF_EVENTO_S2299_BASE_PA BASE
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54142-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS2299_DMDEV_RPADC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS2299_DMDEV_RPADC
NomeObjeto: TFPS2299_DMDEV_RPADC
TipoObjeto: TABLE
NomeTabela: TFPS2299_DMDEV_RPADC
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS2299_DMDEV_RPADC( /*INFORMA??ES RELATIVAS A REMUNERA??O DO TRABALHADOR EM PER?ODOS ANTERIORES AO PER?ODO DE APURA??O   REMUNPERANT */
    CODEMP             NUMBER(5),
    DTREF             DATE,
    TPAMB             CHAR(1),
    SEQUENCIA         NUMBER(5),
    CHAVE2299         VARCHAR2(100),
    IDEDMDEV         VARCHAR2(100),
    CHAVE2299_PA_ADC VARCHAR2(100),
    PERREF             VARCHAR2(100),
    CODLOTACAO         VARCHAR2(100),    
    CHAVE             VARCHAR2(100), /*MATRICULA*/
    MATRICULA         VARCHAR2(30),
    INDSIMPLES         NUMBER(5),
    GRAUEXP             NUMBER(5),
    CONSTRAINT PK_TFPS2299_DMDEV_RPADC PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, IDEDMDEV, CHAVE2299_PA_ADC, PERREF, CODLOTACAO, CHAVE), /*MATRICULA*/
    CONSTRAINT FK_R_TFPS2299_DMDEV_IPADC FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, IDEDMDEV, CHAVE2299_PA_ADC, PERREF, CODLOTACAO) REFERENCES TFPS2299_DMDEV_IPADC(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, IDEDMDEV, CHAVE2299_PA_ADC, PERREF, CHAVE) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54143-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S2299_DMDEV_RPADC 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S2299_DMDEV_RPADC 
NomeObjeto: VGF_EVENTO_S2299_DMDEV_RPADC 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2299_DMDEV_RPADC /* ideADC/infoPerAnt/idePeriodo/ideEstabLo/remunPerAnt  */
AS
SELECT DISTINCT
  BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE2299
, BASE.IDEDMDEV  
, BASE.CHAVE2299_PA_ADC
, BASE.PERREF
, BASE.CODLOTACAO      
, BASE.MATRICULA AS CHAVE
, CAST(BASE.MATRICULA AS VARCHAR2(30)) AS MATRICULA
, BASE.INDSIMPLES
, BASE.GRAUEXP
FROM VGF_EVENTO_S2299_BASE_PA BASE
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54144-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS2299_DMDEV_IRPADC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS2299_DMDEV_IRPADC
NomeObjeto: TFPS2299_DMDEV_IRPADC
TipoObjeto: TABLE
NomeTabela: TFPS2299_DMDEV_IRPADC
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS2299_DMDEV_IRPADC( /*INFORMA??ES RELATIVAS A REMUNERA??O DO TRABALHADOR EM PER?ODOS ANTERIORES AO PER?ODO DE APURA??O   REMUNPERANT */
    CODEMP             NUMBER(5),
    DTREF              DATE,
    TPAMB              CHAR(1),
    SEQUENCIA          NUMBER(5),
    CHAVE2299          VARCHAR2(100),
    IDEDMDEV           VARCHAR2(100),
    CHAVE2299_PA_ADC   VARCHAR2(100),
    PERREF             VARCHAR2(100),
    CODLOTACAO         VARCHAR2(100),
    MATRICULA          VARCHAR2(100),    
    CHAVE              VARCHAR2(100), /*CODRUBR*/
    CODRUBR            VARCHAR2(30),
    IDETABRUBR         VARCHAR2(8),
    QTDRUBR            FLOAT, /*(6,2)*/
    FATORRUBR          FLOAT,    /*(5,2)*/
    VRUNIT             FLOAT, /*(14,2)*/
    VRRUBR             FLOAT, /*(14,2)*/
    CONSTRAINT PK_TFPS2299_DMDEV_IRPADC PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, IDEDMDEV, CHAVE2299_PA_ADC, PERREF, CODLOTACAO, MATRICULA, CHAVE),
    CONSTRAINT FK_I_TFPS2299_DMDEV_RPADC FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, IDEDMDEV, CHAVE2299_PA_ADC, PERREF, CODLOTACAO, MATRICULA) REFERENCES TFPS2299_DMDEV_RPADC(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, IDEDMDEV, CHAVE2299_PA_ADC, PERREF, CODLOTACAO, CHAVE) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54145-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S2299_DMDEV_IRPADC 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S2299_DMDEV_IRPADC 
NomeObjeto: VGF_EVENTO_S2299_DMDEV_IRPADC 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2299_DMDEV_IRPADC /* ideADC/infoPerAnt/idePeriodo/ideEstabLo/remunPerAnt/itensRemun   */
AS
     SELECT RUB.CODEMP,
            RUB.DTREF,
            RUB.CHAVEDESLIG AS CHAVE2299,
            RUB.IDEDMDEV,
            RUB.CHAVE2299_PA_ADC,
            RUB.PERREF,
            RUB.CODLOTACAO,
            RUB.MATRICULA,
            CAST (RUB.CODRUBR AS VARCHAR2 (100)) AS CHAVE,
            CAST (RUB.CODRUBR AS VARCHAR2 (30)) AS CODRUBR,
            CAST (RUB.IDETABRUBR AS VARCHAR2 (8)) AS IDETABRUBR,
            CAST (MAX (RUB.QTDRUBR) AS FLOAT) AS QTDRUBR,
            CAST (RUB.FATORRUBR AS FLOAT) AS FATORRUBR,
            CAST (RUB.VRUNIT AS FLOAT) AS VRUNIT,
            CAST (SUM (RUB.VRRUBR) AS FLOAT) AS VRRUBR
       FROM VGF_EVENTO_BASERUBRICA_PA RUB
      WHERE GERARPARESCISAO = 'S'
        AND RUB.CODCATEG < 701
        AND RUB.DTTERCEIRAFASE IS NOT NULL
        AND RUB.DTDEM >= RUB.DTTERCEIRAFASE /* DEMAIS EVENTOS DO S-2299 SÓ ENTRAM NA TERCEIRA FASE */
        AND RUB.DTDEM >= SYSDATE - 60
   GROUP BY RUB.CODEMP,
            RUB.DTREF,
            RUB.CHAVEDESLIG,
            RUB.IDEDMDEV,
            RUB.CHAVE2299_PA_ADC,
            RUB.PERREF,
            RUB.CODLOTACAO,
            RUB.MATRICULA,
            RUB.CODRUBR,
            RUB.IDETABRUBR,
            RUB.FATORRUBR,
            RUB.VRUNIT,
            RUB.CODEMPFUNC,
            RUB.CODFUNC
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54146-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS2299_DMDEV_TRPADC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS2299_DMDEV_TRPADC
NomeObjeto: TFPS2299_DMDEV_TRPADC
TipoObjeto: TABLE
NomeTabela: TFPS2299_DMDEV_TRPADC
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS2299_DMDEV_TRPADC( /*INFORMA??ES DA(S) CONVOCA??O(?ES) DE TRABALHO INTERMITENTE INFOTRABINTERM */
    CODEMP             NUMBER(5),
    DTREF             DATE,
    TPAMB             CHAR(1),
    SEQUENCIA         NUMBER(5),
    CHAVE2299         VARCHAR2(100),
    IDEDMDEV         VARCHAR2(100),
    CHAVE2299_PA_ADC VARCHAR2(100),
    PERREF             VARCHAR2(100),
    CODLOTACAO         VARCHAR2(100),
    MATRICULA         VARCHAR2(100),    
    CHAVE             VARCHAR2(100), /*CODCONV*/
    CODCONV             VARCHAR2(30),
    CONSTRAINT PK_TFPS2299_DMDEV_TRPADC PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, IDEDMDEV, CHAVE2299_PA_ADC, PERREF, CODLOTACAO, MATRICULA, CHAVE),
    CONSTRAINT FK_T_TFPS2299_DMDEV_RPADC FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, IDEDMDEV, CHAVE2299_PA_ADC, PERREF, CODLOTACAO, MATRICULA) REFERENCES TFPS2299_DMDEV_RPADC(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, IDEDMDEV, CHAVE2299_PA_ADC, PERREF, CODLOTACAO, CHAVE) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54147-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S2299_DMDEV_TRPADC 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S2299_DMDEV_TRPADC 
NomeObjeto: VGF_EVENTO_S2299_DMDEV_TRPADC 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2299_DMDEV_TRPADC /* infoInterm  */
AS
SELECT DISTINCT
  BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE2299
, BASE.IDEDMDEV  
, BASE.CHAVE2299_PA_ADC
, BASE.PERREF
, BASE.CODLOTACAO
, BASE.MATRICULA      
, CAST(BASE.CODCONV AS VARCHAR2(100)) AS CHAVE
, BASE.CODCONV
FROM VGF_EVENTO_S2299_BASE_PA BASE
WHERE BASE.CODCONV IS NOT NULL
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54148-0-0
Nro. O.S. : 1175714
Nome      : Cria - TFPS2299 QTDDIASINTERM
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: QTDDIASINTERM
TipoObjeto: COLUMN
NomeTabela: TFPS2299
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPS2299 ADD QTDDIASINTERM VARCHAR2(10)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54149-0-0
Nro. O.S. : 1175714
Nome      : Cria - TFPS2299 INDMV
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: INDMV
TipoObjeto: COLUMN
NomeTabela: TFPS2299
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TFPS2299 ADD INDMV NUMBER(5)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54150-0-0
Nro. O.S. : 1175714
Nome      : Criar - TFPS2299_CONSIGFGTS 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TFPS2299_CONSIGFGTS 
NomeObjeto: TFPS2299_CONSIGFGTS 
TipoObjeto: TABLE
NomeTabela: TFPS2299_CONSIGFGTS 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TFPS2299_CONSIGFGTS ( 
    CODEMP            NUMBER(5),
    DTREF             DATE,
    TPAMB             CHAR(1),
    SEQUENCIA         NUMBER(5),
    CHAVE2299         VARCHAR2(100), /*CHAVEPAI*/
    CHAVE             VARCHAR2(100), 
    INSCONSIG         VARCHAR2(5),
    NRCONTR           VARCHAR2(40),
    CONSTRAINT PK_TFPS2299_CONSIGFGTS PRIMARY KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299, CHAVE),
    CONSTRAINT FK_CONSIGFGTS_TFPS2299 FOREIGN KEY (CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE2299) REFERENCES TFPS2299(CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE) ON DELETE CASCADE
)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54151-0-0
Nro. O.S. : 1175714
Nome      : Criar - VGF_EVENTO_S2299_CONSIGFGTS
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - VGF_EVENTO_S2299_CONSIGFGTS
NomeObjeto: VGF_EVENTO_S2299_CONSIGFGTS
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2299_CONSIGFGTS
AS
SELECT DISTINCT 
  BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE2299
, CAST (FOL.INSCONSIG || ':' || FOL.NRCONTR AS VARCHAR2 (100)) AS CHAVE
, FOL.INSCONSIG
, FOL.NRCONTR
FROM VGF_EVENTO_S2299_BASE BASE, TFPFOL FOL
WHERE FOL.CODEMP = BASE.CODEMPFUNC 
  AND FOL.CODFUNC = BASE.CODFUNC
  AND FOL.REFERENCIA = BASE.DTREF
  AND FOL.TIPFOLHA = BASE.IDEDMDEV
  AND FOL.CODEVENTO IN (SELECT EVE.CODEVENTO FROM TFPEVE EVE WHERE EVE.IDENTIFICACAO = 181) /* EVENTO DE EMP.CONSIGNADO FGTS */
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 08/05/2018 15:40:11
Num.Script: 54152-0-0
Nro. O.S. : 1175714
Nome      : Script - TFPMON
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - TFPMON
NomeObjeto: TFPMON
TipoObjeto: TABLE
NomeTabela: TFPMON
Executar  : SE_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
    P_COUNT     NUMBER(5);
BEGIN

    SELECT COUNT(*) INTO P_COUNT
        FROM TFPMON
        WHERE NOMEEVENTO = 'S-2299'
            AND NOMETAB = 'TFPS2299'
            AND NOMECOLUNA = 'NRORECIBO'
            AND TIPO = 'R';
            
        IF P_COUNT = 0 THEN
            INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO)
            VALUES ('S-2299', 'TFPS2299', 'NRORECIBO', 'R'); 
        END IF;
     
    SELECT COUNT(*) INTO P_COUNT
        FROM TFPMON
        WHERE NOMEEVENTO = 'S-2299'
            AND NOMETAB = 'TFPS2299'
            AND NOMECOLUNA = 'NRORECIBO'
            AND TIPO = 'M';
            
        IF P_COUNT = 0 THEN
            INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, AMBPRODUCAO)
            VALUES ('S-2299', 'TFPS2299', 'NRORECIBO', 'M','VGF_EVENTO_S2299', 'L');
        END IF;
    
    SELECT COUNT(*) INTO P_COUNT
        FROM TFPMON
        WHERE NOMEEVENTO = 'S-2299'
            AND NOMETAB = 'TFPS2299_PROCJUD'
            AND NOMECOLUNA = 'NRORECIBO'
            AND TIPO = 'M';
            
        IF P_COUNT = 0 THEN
            INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
            VALUES ('S-2299', 'TFPS2299_PROCJUD', 'NRORECIBO', 'M','VGF_EVENTO_S2299_PROCJUD', 'TFPS2299'); 
        END IF;
        
    SELECT COUNT(*) INTO P_COUNT
        FROM TFPMON
        WHERE NOMEEVENTO = 'S-2299'
            AND NOMETAB = 'TFPS2299_REMOUTREMPRE'
            AND NOMECOLUNA = 'NRORECIBO'
            AND TIPO = 'M';
            
        IF P_COUNT = 0 THEN
            INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
            VALUES ('S-2299', 'TFPS2299_REMOUTREMPRE', 'NRORECIBO', 'M','VGF_EVENTO_S2299_REMOUTREMPRE', 'TFPS2299'); 
        END IF;
        
    SELECT COUNT(*) INTO P_COUNT
        FROM TFPMON
        WHERE NOMEEVENTO = 'S-2299'
            AND NOMETAB = 'TFPS2299_DMDEV'
            AND NOMECOLUNA = 'NRORECIBO'
            AND TIPO = 'M';
            
        IF P_COUNT = 0 THEN
            INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
            VALUES ('S-2299', 'TFPS2299_DMDEV', 'NRORECIBO', 'M','VGF_EVENTO_S2299_DMDEV', 'TFPS2299');
        END IF;
        
    SELECT COUNT(*) INTO P_COUNT
        FROM TFPMON
        WHERE NOMEEVENTO = 'S-2299'
            AND NOMETAB = 'TFPS2299_DMDEV_EL'
            AND NOMECOLUNA = 'NRORECIBO'
            AND TIPO = 'M';
            
        IF P_COUNT = 0 THEN
            INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
            VALUES ('S-2299', 'TFPS2299_DMDEV_EL', 'NRORECIBO', 'M','VGF_EVENTO_S2299_DMDEV_EL', 'TFPS2299_DMDEV');
        END IF;
        
    SELECT COUNT(*) INTO P_COUNT
        FROM TFPMON
        WHERE NOMEEVENTO = 'S-2299'
            AND NOMETAB = 'TFPS2299_DMDEV_IRPA'
            AND NOMECOLUNA = 'NRORECIBO'
            AND TIPO = 'M';
            
        IF P_COUNT = 0 THEN
            INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
            VALUES ('S-2299', 'TFPS2299_DMDEV_IRPA', 'NRORECIBO', 'M','VGF_EVENTO_S2299_DMDEV_IRPA', 'TFPS2299_DMDEV_EL'); 
        END IF;
          
    SELECT COUNT(*) INTO P_COUNT
        FROM TFPMON
        WHERE NOMEEVENTO = 'S-2299'
            AND NOMETAB = 'TFPS2299_DMDEV_DRPA'
            AND NOMECOLUNA = 'NRORECIBO'
            AND TIPO = 'M';
            
        IF P_COUNT = 0 THEN
            INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
            VALUES ('S-2299', 'TFPS2299_DMDEV_DRPA', 'NRORECIBO', 'M','VGF_EVENTO_S2299_DMDEV_DRPA', 'TFPS2299_DMDEV_EL'); 
        END IF;
        
    SELECT COUNT(*) INTO P_COUNT
        FROM TFPMON
        WHERE NOMEEVENTO = 'S-2299'
            AND NOMETAB = 'TFPS2299_DMDEV_DDRPA'
            AND NOMECOLUNA = 'NRORECIBO'
            AND TIPO = 'M';
            
        IF P_COUNT = 0 THEN
            INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
            VALUES ('S-2299', 'TFPS2299_DMDEV_DDRPA', 'NRORECIBO', 'M','VGF_EVENTO_S2299_DMDEV_DDRPA', 'TFPS2299_DMDEV_DRPA'); 
        END IF;
        
    SELECT COUNT(*) INTO P_COUNT
        FROM TFPMON
        WHERE NOMEEVENTO = 'S-2299'
            AND NOMETAB = 'TFPS2299_DMDEV_RPA'
            AND NOMECOLUNA = 'NRORECIBO'
            AND TIPO = 'M';
            
        IF P_COUNT = 0 THEN
            INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
            VALUES ('S-2299', 'TFPS2299_DMDEV_RPA', 'NRORECIBO', 'M','VGF_EVENTO_S2299_DMDEV_RPA', 'TFPS2299_DMDEV_EL');
        END IF;
        
    SELECT COUNT(*) INTO P_COUNT
        FROM TFPMON
        WHERE NOMEEVENTO = 'S-2299'
            AND NOMETAB = 'TFPS2299_DMDEV_TRPA'
            AND NOMECOLUNA = 'NRORECIBO'
            AND TIPO = 'M';
            
        IF P_COUNT = 0 THEN
            INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
            VALUES ('S-2299', 'TFPS2299_DMDEV_TRPA', 'NRORECIBO', 'M','VGF_EVENTO_S2299_DMDEV_TRPA', 'TFPS2299_DMDEV_RPA');
        END IF;
        
    SELECT COUNT(*) INTO P_COUNT
        FROM TFPMON
        WHERE NOMEEVENTO = 'S-2299'
            AND NOMETAB = 'TFPS2299_DMDEV_ADC'
            AND NOMECOLUNA = 'NRORECIBO'
            AND TIPO = 'M';
            
        IF P_COUNT = 0 THEN
            INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
            VALUES ('S-2299', 'TFPS2299_DMDEV_ADC', 'NRORECIBO', 'M','VGF_EVENTO_S2299_DMDEV_ADC', 'TFPS2299_DMDEV'); 
        END IF;
    
    SELECT COUNT(*) INTO P_COUNT
        FROM TFPMON
        WHERE NOMEEVENTO = 'S-2299'
            AND NOMETAB = 'TFPS2299_DMDEV_PADC'
            AND NOMECOLUNA = 'NRORECIBO'
            AND TIPO = 'M';
            
        IF P_COUNT = 0 THEN
            INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
            VALUES ('S-2299', 'TFPS2299_DMDEV_PADC', 'NRORECIBO', 'M','VGF_EVENTO_S2299_DMDEV_PADC', 'TFPS2299_DMDEV_ADC'); 
        END IF;
        
    SELECT COUNT(*) INTO P_COUNT
        FROM TFPMON
        WHERE NOMEEVENTO = 'S-2299'
            AND NOMETAB = 'TFPS2299_DMDEV_IPADC'
            AND NOMECOLUNA = 'NRORECIBO'
            AND TIPO = 'M';
            
        IF P_COUNT = 0 THEN
            INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
            VALUES ('S-2299', 'TFPS2299_DMDEV_IPADC', 'NRORECIBO', 'M','VGF_EVENTO_S2299_DMDEV_IPADC', 'TFPS2299_DMDEV_PADC'); 
        END IF;
        
    SELECT COUNT(*) INTO P_COUNT
        FROM TFPMON
        WHERE NOMEEVENTO = 'S-2299'
            AND NOMETAB = 'TFPS2299_DMDEV_RPADC'
            AND NOMECOLUNA = 'NRORECIBO'
            AND TIPO = 'M';
            
        IF P_COUNT = 0 THEN
            INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
            VALUES ('S-2299', 'TFPS2299_DMDEV_RPADC', 'NRORECIBO', 'M','VGF_EVENTO_S2299_DMDEV_RPADC', 'TFPS2299_DMDEV_IPADC'); 
        END IF;
        
    SELECT COUNT(*) INTO P_COUNT
        FROM TFPMON
        WHERE NOMEEVENTO = 'S-2299'
            AND NOMETAB = 'TFPS2299_DMDEV_IRPADC'
            AND NOMECOLUNA = 'NRORECIBO'
            AND TIPO = 'M';
            
        IF P_COUNT = 0 THEN
            INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
            VALUES ('S-2299', 'TFPS2299_DMDEV_IRPADC', 'NRORECIBO', 'M','VGF_EVENTO_S2299_DMDEV_IRPADC', 'TFPS2299_DMDEV_RPADC'); 
        END IF;
        
    SELECT COUNT(*) INTO P_COUNT
        FROM TFPMON
        WHERE NOMEEVENTO = 'S-2299'
            AND NOMETAB = 'TFPS2299_DMDEV_TRPADC'
            AND NOMECOLUNA = 'NRORECIBO'
            AND TIPO = 'M';
            
        IF P_COUNT = 0 THEN
            INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
            VALUES ('S-2299', 'TFPS2299_DMDEV_TRPADC', 'NRORECIBO', 'M','VGF_EVENTO_S2299_DMDEV_TRPADC', 'TFPS2299_DMDEV_RPADC'); 
        END IF;
        
    SELECT COUNT(*) INTO P_COUNT
        FROM TFPMON
        WHERE NOMEEVENTO = 'S-2299'
            AND NOMETAB = 'TFPS2299_CONSIGFGTS'
            AND NOMECOLUNA = 'NRORECIBO'
            AND TIPO = 'M';
            
        IF P_COUNT = 0 THEN
            INSERT INTO TFPMON (NOMEEVENTO, NOMETAB, NOMECOLUNA, TIPO, NOMEVIEW, NOMEEVEVENTOPAI)
            VALUES ('S-2299', 'TFPS2299_CONSIGFGTS', 'NRORECIBO', 'M','VGF_EVENTO_S2299_CONSIGFGTS', 'TFPS2299');
        END IF;
END;
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 03/05/2018 17:49:37
Num.Script: 54495-0-0
Nro. O.S. : 1168521
Nome      : Altarar - CONTROLE TGFUVC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - CONTROLE  TGFUVC
NomeObjeto: CONTROLE 
TipoObjeto: COLUMN
NomeTabela: TGFUVC
Executar  : SE_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFUVC MODIFY CONTROLE VARCHAR2(200)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 02/05/2018 08:52:50
Num.Script: 54506-0-0
Nro. O.S. : 1171402
Nome      : Alterar - STP_KEYGEN_TGFNUM 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - STP_KEYGEN_TGFNUM 
NomeObjeto: STP_KEYGEN_TGFNUM 
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE STP_KEYGEN_TGFNUM ( P_ARQUIVO IN VARCHAR, P_CODEMP IN INT, P_TABELA IN VARCHAR, P_CAMPO IN VARCHAR, P_DSYNC IN INT, P_ULTCOD OUT NUMBER) 
AS
  PRAGMA AUTONOMOUS_TRANSACTION;
  
  P_LOTE        INT;
  P_CODCHECA    NUMBER(10);
  P_MINCOD      NUMBER(10);
  P_MAXCOD      NUMBER(10);
  P_MAXCODNUM   NUMBER(10);
  P_MINTSDCOD   NUMBER(10);
  P_MAXTSDCOD   NUMBER(10);
  P_COUNT       NUMBER(10);
  P_SERIE       VARCHAR2(3);
  P_LOCAL       VARCHAR2(255);
  P_TABELASEL   VARCHAR2(255);
  P_SQL         VARCHAR2(4000);
  P_BUSCAFAIXA  BOOLEAN;
  P_BUSCASEQ    BOOLEAN;
  P_RECOMECOU   BOOLEAN;
  P_TEMDSYNC    BOOLEAN;
  P_TEMTGFNUM   BOOLEAN;
  ERRORDSYNC    EXCEPTION;
  
  CURSOR P_CUR_FAIXAS IS
    SELECT CODIGOMIN, CODIGOMAX
    FROM TSDNUM NUM
    WHERE NOMETAB = P_ARQUIVO
    AND NOMENO = (SELECT TEXTO FROM TSDPAR WHERE CHAVE = 'DATASYNCNOMENO' AND CODUSU = 0)
    AND CODIGOMAX >= P_ULTCOD
    ORDER BY CODIGOMIN;

  TYPE CUR_TYPE IS REF CURSOR;
  P_CUR_CHECAR  CUR_TYPE;
BEGIN
  P_TEMDSYNC := P_DSYNC > 0;
  P_MINTSDCOD := 1;
  P_ULTCOD := 0;

  IF SUBSTR(P_TABELA, 1, 3) = 'LOT' THEN
    P_TABELASEL := 'TCBLOT';
  ELSIF P_TABELA = 'RENEG' THEN
    P_TABELASEL := 'TGFREN';
  ELSIF P_TABELA = 'TGFMBC_TRF' THEN
    P_TABELASEL := 'TGFMBC';
  ELSE
    P_TABELASEL := P_TABELA;
  END IF;  

  IF P_TABELA = 'TGFCAB' THEN
    P_TABELASEL := '(SELECT NUNOTA FROM TGFCAB UNION SELECT NUNOTA FROM TGFCAN) ' || P_TABELASEL;
  END IF;
  
  BEGIN
    SELECT SERIE
    INTO P_SERIE
    FROM (
      SELECT SERIE
      FROM TGFNUM NUM
      WHERE ARQUIVO = P_ARQUIVO
      AND CODEMP = P_CODEMP
      ORDER BY CASE SERIE 
                 WHEN 'E' THEN 1 
                 WHEN '.' THEN 2 
                 ELSE 3 
               END
    )
    WHERE ROWNUM = 1;   
    
    SELECT (NVL(ULTCOD,0) + 1), NVL(ULTNOTATALAO, 999999999)
    INTO P_ULTCOD, P_MAXCODNUM
    FROM TGFNUM
    WHERE ARQUIVO = P_ARQUIVO
    AND CODEMP = P_CODEMP
    AND SERIE = P_SERIE
    FOR UPDATE;
    
    P_TEMTGFNUM := TRUE;
  EXCEPTION WHEN NO_DATA_FOUND THEN
    P_ULTCOD := 1;
    P_MAXCODNUM := 999999999;
    P_TEMTGFNUM := FALSE;
  END;
  
  IF P_MAXCODNUM > 32767 AND P_TABELA <> 'TGFCAB' THEN
    SELECT COUNT(1)
    INTO P_COUNT
    FROM USER_TAB_COLUMNS
    WHERE TABLE_NAME = P_TABELASEL
    AND COLUMN_NAME = P_CAMPO
    AND DATA_PRECISION = 5;
    IF P_COUNT > 0 THEN
      P_MAXCODNUM := 32767;
    END IF;
  END IF;
  P_MAXTSDCOD := P_MAXCODNUM;
    
  IF P_TEMDSYNC THEN
    SELECT COUNT(1) --VERIFICA SE EXISTE FAIXA DE NUMERAÇÃO CONFIGURADA PARA ESTA TABELA 
    INTO P_COUNT
    FROM TSDNUM NUM
    WHERE NOMETAB = P_ARQUIVO
    AND NOMENO = (SELECT TEXTO FROM TSDPAR WHERE CHAVE = 'DATASYNCNOMENO' AND CODUSU = 0)
    AND ROWNUM = 1;
      
    IF P_COUNT = 0 THEN
      P_TEMDSYNC := FALSE;
    ELSE
      OPEN P_CUR_FAIXAS;
      FETCH P_CUR_FAIXAS INTO P_MINTSDCOD, P_MAXTSDCOD;
      IF P_CUR_FAIXAS%NOTFOUND THEN
        P_LOCAL := 'FAIXA INICIAL';
        RAISE ERRORDSYNC;                                
      END IF;
      
      --SE ENCONTROU, ALTERA PARA O MENOR DA FAIXA, SE FOR MAIOR QUE O ULTICOD ENCONTRADO;
      P_ULTCOD := GREATEST(P_ULTCOD, P_MINTSDCOD);
    END IF;
      
  END IF;
  
  IF NOT P_TEMTGFNUM THEN --TGFNUM AINDA NÃO EXISTE
    P_SERIE := 'E';

    IF P_TEMDSYNC THEN
      LOOP
        P_SQL := 'SELECT NVL(MAX(' || P_CAMPO || '), ' || TO_CHAR(P_MINTSDCOD-1) || ') + 1 FROM ' || P_TABELASEL || ' WHERE ' || P_CAMPO || 
                 ' IS NOT NULL AND ' || P_CAMPO || ' BETWEEN ' || TO_CHAR(P_MINTSDCOD) || ' AND ' || TO_CHAR(P_MAXTSDCOD);
        BEGIN
          EXECUTE IMMEDIATE P_SQL INTO P_ULTCOD;
        EXCEPTION WHEN OTHERS THEN
          RAISE_APPLICATION_ERROR (-20001, 'STP_KEYGEN_TGFNUM - Erro ao tentar criar registro na TGFNUM: ' || SQLERRM);        
        END;
        
        IF P_ULTCOD < P_MAXTSDCOD THEN
          EXIT;
        END IF;
        
         --Se se maior na tabela for igual ao máximo da faixa, muda de faixa.
        FETCH P_CUR_FAIXAS INTO P_MINTSDCOD, P_MAXTSDCOD;
        IF P_CUR_FAIXAS%NOTFOUND THEN
          P_LOCAL := 'SEM TGFNUM';
          RAISE ERRORDSYNC;
        END IF;
        
      END LOOP;
    ELSE
      --PEGAMOS O MAIOR CÓDIGO DA TABELA, ASSIM INICIAMOS A TGFNUM COM ESSE VALOR
      
      P_SQL := 'SELECT NVL(MAX(' || P_CAMPO || '), ' || TO_CHAR(P_MINTSDCOD-1) || ') + 1 FROM ' || P_TABELASEL || ' WHERE ' || P_CAMPO || 
               ' IS NOT NULL AND ' || P_CAMPO || ' BETWEEN ' || TO_CHAR(P_MINTSDCOD) || ' AND ' || TO_CHAR(P_MAXTSDCOD);
      BEGIN
        EXECUTE IMMEDIATE P_SQL INTO P_ULTCOD;
      EXCEPTION WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR (-20001, 'STP_KEYGEN_TGFNUM - Erro ao tentar criar registro na TGFNUM: ' || SQLERRM);        
      END;
    END IF;
    
    INSERT INTO TGFNUM (ARQUIVO, CODEMP, SERIE, ULTCOD, ULTNOTATALAO)
    VALUES (P_ARQUIVO, P_CODEMP, P_SERIE, P_ULTCOD, P_MAXCODNUM);
  ELSE
    P_SQL := 'SELECT COUNT(1) FROM ' || P_TABELASEL || ' WHERE ' || P_CAMPO || ' IS NOT NULL AND ' || P_CAMPO || ' = ' || TO_CHAR(P_ULTCOD) || ' AND ROWNUM = 1';
    BEGIN
      EXECUTE IMMEDIATE P_SQL INTO P_COUNT;
    EXCEPTION WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR (-20001, 'STP_KEYGEN_TGFNUM - Erro ao verificar se registro já existe na tabela: ' || SQLERRM);        
    END;
    
    IF (P_COUNT > 0 OR P_ULTCOD > P_MAXTSDCOD) THEN  --SE O CÓDIGO ENCONTRADO AINDA NÃO FOI UTILIZADO, SAI FORA.
    
      P_RECOMECOU := FALSE;
      P_BUSCAFAIXA := TRUE;
      P_ULTCOD := P_ULTCOD + 1;
      
      IF P_TEMDSYNC THEN
        lOOP
          IF P_ULTCOD > P_MAXTSDCOD THEN
            FETCH P_CUR_FAIXAS INTO P_MINTSDCOD, P_MAXTSDCOD;
            IF P_CUR_FAIXAS%NOTFOUND THEN
              P_LOCAL := 'PRIMEIRA E ÚNICA FAIXA LOTADA';
              RAISE ERRORDSYNC;
            END IF;
            
            P_ULTCOD := GREATEST(P_ULTCOD, P_MINTSDCOD);
          ELSE
            EXIT;
          END IF;
        END LOOP;
      ELSE
        IF P_ULTCOD > P_MAXTSDCOD THEN
          P_ULTCOD := P_MINTSDCOD;
          P_RECOMECOU := TRUE;
        END IF;
      END IF;
      P_LOTE := POWER(10, LENGTH(P_MAXTSDCOD)-1);
      
      --Verifica em lotes se tem algum número faltando
      WHILE P_BUSCAFAIXA LOOP
      
        -- O (P_ULTCOD + P_LOTE) nunca pode ser maior que P_MAXTSDCOD
        IF (P_ULTCOD + P_LOTE - 1) > P_MAXTSDCOD THEN
          P_LOTE := (P_MAXTSDCOD - P_ULTCOD + 1);
        END IF;
        
        P_SQL := 'SELECT NVL(MIN(' || P_CAMPO || '),0)'||
                 ', NVL(MAX(' || P_CAMPO || '), 0), COUNT(DISTINCT ' || P_CAMPO || ') FROM ' || P_TABELASEL || ' ' ||
                 'WHERE ' || P_CAMPO || ' IS NOT NULL AND ' || P_CAMPO || 
                 ' BETWEEN ' || TO_CHAR(P_ULTCOD) || ' AND ' || TO_CHAR(P_ULTCOD + P_LOTE - 1); -- 1 até ((1+100-1) = 100)

        BEGIN
          EXECUTE IMMEDIATE P_SQL INTO P_MINCOD, P_MAXCOD, P_COUNT;
        EXCEPTION WHEN OTHERS THEN
          RAISE_APPLICATION_ERROR (-20001, 'STP_KEYGEN_TGFNUM - Erro ao buscar faixa de numeração: ' || SQLERRM);        
        END;
        
        IF P_MINCOD > P_ULTCOD THEN
          --se MIN(CAMPO) diferente do valor valor pretendido pode sair do loop e utilizá-lo
          P_BUSCAFAIXA := FALSE;
        ELSIF P_COUNT < P_LOTE AND P_ULTCOD < P_MAXTSDCOD THEN
        
         --Se max(campo) for menor que 100 sai do loop, se não, tira um zero do lote até que ele chegue a 100
          IF P_LOTE > 100 AND P_MAXCOD > 100 THEN
            P_LOTE := TRUNC(P_LOTE / 10);
            
            --se o lote for maior que max(campo) diminui do lote o número de zeros necessários para o lote ficar menor que max(campo) 
            IF P_LOTE > P_MAXCOD THEN
              P_LOTE := POWER(10, LENGTH(P_MAXCOD)-1);
            END IF;
            P_ULTCOD := P_ULTCOD + 1;
          ELSIF P_MINCOD = P_ULTCOD THEN
            P_BUSCASEQ := TRUE;
            P_SQL := 'SELECT DISTINCT ' || P_CAMPO || ' FROM ' || P_TABELASEL || ' ' ||
                     'WHERE ' || P_CAMPO || ' IS NOT NULL AND ' || P_CAMPO || 
                     ' BETWEEN :CODINI AND :CODFIM ' ||
                     'ORDER BY 1';
            
            WHILE P_BUSCASEQ 
            LOOP
              P_BUSCASEQ := FALSE; --SE NÃO ECONTRAR NENHUM REGISTRO NO CURSOR SAI DO LOOP
              
              BEGIN
                OPEN P_CUR_CHECAR FOR P_SQL USING P_ULTCOD, P_ULTCOD + 99; -- 1 até ((1+99) = 100)
              EXCEPTION WHEN OTHERS THEN
                RAISE_APPLICATION_ERROR (-20001, 'STP_KEYGEN_TGFNUM - Erro ao criar cursor para busca sequencial: ' || SQLERRM);        
              END;
              LOOP
                FETCH P_CUR_CHECAR INTO P_CODCHECA;
                EXIT WHEN P_CUR_CHECAR%NOTFOUND;
              
                IF P_CODCHECA > P_ULTCOD THEN --ENCONTROU UM CODIGO UTILIZAVEL
                  P_BUSCAFAIXA  := FALSE;
                  P_BUSCASEQ := FALSE;
                  EXIT;
                ELSE
                  P_ULTCOD := P_ULTCOD + 1;
                  IF P_ULTCOD > P_MAXTSDCOD THEN
                    IF P_TEMDSYNC THEN
                      FETCH P_CUR_FAIXAS INTO P_MINTSDCOD, P_MAXTSDCOD;
                      IF P_CUR_FAIXAS%NOTFOUND THEN
                        P_LOCAL := 'BUSCA SEQUENCIAL';
                        RAISE ERRORDSYNC;
                      END IF;
                      P_ULTCOD := P_MINTSDCOD;
                      P_LOTE := POWER(10, LENGTH(P_MAXTSDCOD)-1);
                      --VOLTA AO LOOP DE LOTES COM A PRÓXIMA FAIXA
                    ELSE
                      P_BUSCAFAIXA := FALSE; --SAI DE TODOS OS LOOPS POIS NÃO HÁ MAIS CODIGOS UTILIZAVEIS
                    END IF;
                    
                    P_BUSCASEQ := FALSE;
                    EXIT;
                  END IF;
                  
                  P_BUSCASEQ := TRUE;
                END IF;

              END LOOP;
              CLOSE P_CUR_CHECAR;

            END LOOP;
         
          ELSE  --Se o P_MINCOD for maior que o P_ULTCOD não precisa procurar mais
            P_BUSCAFAIXA := FALSE;
          END IF;
        
        ELSE
          P_ULTCOD := P_ULTCOD + P_LOTE;
          
          IF P_ULTCOD > P_MAXTSDCOD THEN
            IF P_TEMDSYNC THEN
              FETCH P_CUR_FAIXAS INTO P_MINTSDCOD, P_MAXTSDCOD;
              IF P_CUR_FAIXAS%NOTFOUND THEN
                P_LOCAL := 'BUSCA POR LOTE';
                RAISE ERRORDSYNC;
              END IF;
              P_ULTCOD := P_MINTSDCOD;
            ELSE
              IF P_RECOMECOU THEN
                P_BUSCAFAIXA := FALSE;
              ELSE
                P_RECOMECOU := TRUE;
                P_ULTCOD := P_MINTSDCOD;
              END IF;
            END IF;
            
            P_LOTE := POWER(10, LENGTH(P_MAXTSDCOD)-1);
          END IF;
        
        END IF;
      
      END LOOP;
      
    END IF;
    
    IF P_ULTCOD > P_MAXTSDCOD THEN
      IF P_TEMDSYNC THEN
        P_LOCAL := 'ACABARAM AS FAIXAS';
        RAISE ERRORDSYNC;
      END IF;
              
      RAISE_APPLICATION_ERROR (-20101, 'STP_KEYGEN_TGFNUM - Não encontramos número disponível para novos registros na ' || P_TABELA || '.');
    END IF;
    
    UPDATE TGFNUM 
    SET ULTCOD = P_ULTCOD 
    WHERE ARQUIVO = P_ARQUIVO
    AND CODEMP = P_CODEMP
    AND SERIE = P_SERIE;
  
  END IF;
  
  COMMIT;
EXCEPTION
  WHEN ERRORDSYNC THEN
    ROLLBACK;
    IF P_LOCAL = 'FAIXA INICIAL' THEN
      RAISE_APPLICATION_ERROR(-20101, 'STP_KEYGEN_TGFNUM - Não existe registro na TSDNUM para '|| P_ARQUIVO ||
                                      ' com faixa inicial menor que '|| P_ULTCOD ||'.'|| CHR(13) ||
                                      'Local: ' || P_LOCAL);
   ELSE                                   
      RAISE_APPLICATION_ERROR(-20101, 'STP_KEYGEN_TGFNUM - Não encontramos número disponível para novos registros para '|| P_ARQUIVO ||
                                      ' nas faixas da TSDNUM.'|| CHR(13) ||
                                      'Local: ' || P_LOCAL);
    END IF;                                    
  WHEN OTHERS THEN
    ROLLBACK;
    RAISE;    
END;
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 02/05/2018 08:52:50
Num.Script: 54507-0-1000
Nro. O.S. : 1171402
Nome      : INSERE - THOOBJ - 5450600
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE STP_KEYGEN_TGFNUM
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210010
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'STP_KEYGEN_TGFNUM' NOMEOBJ, 54506 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, 'cb535be57916507bfc42a48e0bcd28ff' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'STP_KEYGEN_TGFNUM' and THO.hashcode = 'cb535be57916507bfc42a48e0bcd28ff')
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 04/05/2018 08:02:56
Num.Script: 54515-0-0
Nro. O.S. : 1177405
Nome      : Cria - TGFPAR ORGPUBLNFSE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: ORGPUBLNFSE
TipoObjeto: COLUMN
NomeTabela: TGFPAR
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TGFPAR ADD ORGPUBLNFSE VARCHAR2(1)';
   EXECUTE IMMEDIATE 'ALTER TABLE TGFPAR ADD  CONSTRAINT CKC_ORGPUBLNFSE_TGFPAR CHECK (ORGPUBLNFSE IN (''N'',''S'') OR ORGPUBLNFSE IS NULL )';
END;
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 27/04/2018 13:32:22
Num.Script: 54530-0-0
Nro. O.S. : 1177660
Nome      : Alterar - VRI_EVT_R2020_NFS
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VRI_EVT_R2020_NFS
NomeObjeto: VRI_EVT_R2020_NFS
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2020_NFS
AS 
SELECT 
 INFSP.CODEMP
,INFSP.DTREF
,INFSP.TPAMB
,INFSP.SEQUENCIA
,INFSP.CHAVE
,CAB.NUNOTA
,CAB.SERIENOTA AS SERIE
,CAB.NUMNOTA AS NUMDOCTO
,CAB.DTNEG AS DTEMISSAONF
,SUM(INFSP.VLRTOTALBRUTO) AS VLRBRUTO
,SUBSTR(REPLACE(REPLACE(NVL(CAB.OBSERVACAO, ''), CHR(13), ' '), CHR(10), ' '), 1, 250) AS OBS
FROM TRIINFSP INFSP
    INNER JOIN TGFCAB CAB ON CAB.NUNOTA = INFSP.NUNOTA
GROUP BY 
 INFSP.CODEMP
,INFSP.DTREF
,INFSP.TPAMB
,INFSP.SEQUENCIA
,INFSP.CHAVE
,CAB.NUNOTA
,CAB.SERIENOTA
,CAB.NUMNOTA
,CAB.DTNEG
,SUBSTR(REPLACE(REPLACE(NVL(CAB.OBSERVACAO, ''), CHR(13), ' '), CHR(10), ' '), 1, 250)
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 27/04/2018 13:32:22
Num.Script: 54531-0-0
Nro. O.S. : 1177660
Nome      : Alterar - VRI_EVT_R2010_NFS
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VRI_EVT_R2010_NFS
NomeObjeto: VRI_EVT_R2010_NFS
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2010_NFS
AS
SELECT
 INFST.CODEMP
,INFST.DTREF
,INFST.TPAMB
,INFST.SEQUENCIA 
,INFST.CHAVE
,INFST.NUNOTA
,CAB.SERIENOTA AS SERIE
,CAB.NUMNOTA AS NUMDOCTO
,CAB.DTNEG AS DTEMISSAONF
,SUM(INFST.VLRTOTALBRUTO) AS VLRBRUTO
,SUBSTR(REPLACE(REPLACE(NVL(CAB.OBSERVACAO, ''), CHR(13), ' '), CHR(10), ' '), 1, 250) AS OBS
,INFST.TIPODOCUMENTO
FROM TRIINFST INFST
    INNER JOIN TGFCAB CAB ON CAB.NUNOTA = INFST.NUNOTA
WHERE TIPODOCUMENTO = 'N'
GROUP BY
 INFST.CODEMP
,INFST.DTREF
,INFST.TPAMB
,INFST.SEQUENCIA
,INFST.CHAVE 
,INFST.NUNOTA
,CAB.SERIENOTA
,CAB.NUMNOTA
,CAB.DTNEG
,SUBSTR(REPLACE(REPLACE(NVL(CAB.OBSERVACAO, ''), CHR(13), ' '), CHR(10), ' '), 1, 250)
,INFST.TIPODOCUMENTO
UNION
SELECT
 INFST.CODEMP
,INFST.DTREF
,INFST.TPAMB
,INFST.SEQUENCIA
,INFST.CHAVE 
,INFST.NUNOTA
,FIN.SERIENOTA AS SERIE
,FIN.NUMNOTA AS NUMDOCTO
,FIN.DTNEG AS DTEMISSAONF
,SUM(INFST.VLRTOTALBRUTO) AS VLRBRUTO
,'' AS OBS
,INFST.TIPODOCUMENTO
FROM TRIINFST INFST
    INNER JOIN TGFFIN FIN ON FIN.NUFIN = INFST.NUNOTA
WHERE TIPODOCUMENTO = 'F'
GROUP BY
 INFST.CODEMP
,INFST.DTREF
,INFST.TPAMB
,INFST.SEQUENCIA 
,INFST.CHAVE
,INFST.NUNOTA
,FIN.SERIENOTA
,FIN.NUMNOTA
,FIN.DTNEG
,INFST.TIPODOCUMENTO
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 27/04/2018 13:32:22
Num.Script: 54532-0-0
Nro. O.S. : 1177660
Nome      : Alterar - VRI_EVT_R1070
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VRI_EVT_R1070
NomeObjeto: VRI_EVT_R1070
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R1070
AS
SELECT DISTINCT
 PAJ.NUPROCESSO                                                         AS NUPROCESSO
,CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMP.CODEMP
      WHEN NVL(EMP.CODEMPMATRIZEFD, 0) > 0 THEN EMP.CODEMPMATRIZEFD
      ELSE EMP.CODEMP 
 END                                                                    AS CODEMP
,SYSDATE                                                                AS DTREF
,PAJ.NUPROCESSO                                                         AS CHAVE
,CASE WHEN LENGTH(EMPC.CGC) = 14 
      THEN '1' 
      ELSE '2' 
 END                                                                    AS TPINSC
,CASE WHEN LENGTH(EMPC.CGC) = 14 
      THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
                THEN EMPC.CGC
                ELSE SUBSTR(EMPC.CGC,1,8)
           END
      ELSE EMPC.CGC
 END                                                                    AS NRINSC
,PAJ.TIPO                                                               AS TPPROC
,PAJ.NUMPROCESSO                                                        AS NRPROC
,PAJ.DTINIVALIDADE                                                      AS INIVALID
,PAJ.DTFIMVALIDADE                                                      AS FIMVALID
,PAJ.AUTORIA                                                            AS INDAUTORIA
,UFS.UF                                                                 AS UFVARA
,CID.CODMUNFIS                                                          AS CODMUNIC
,PAJ.CODIDENTVARA                                                       AS IDVARA
FROM TRIPAJ PAJ
    LEFT JOIN TGFEMP EMP ON (NOT EXISTS(SELECT 1
                                        FROM TRIPEMP PEMP                                             
                                        WHERE PEMP.NUPROCESSO = PAJ.NUPROCESSO
                             AND EXISTS(SELECT 1
                                        FROM TRIPISET ISET
                                        WHERE PEMP.NUPROCESSO = PAJ.NUPROCESSO)) OR 
                             EXISTS(SELECT 1
                                    FROM TRIPEMP PEMP
                                    WHERE PEMP.NUPROCESSO = PAJ.NUPROCESSO
                                      AND PEMP.CODEMP = EMP.CODEMP) )
    LEFT JOIN TSIEMP EMPC ON EMPC.CODEMP = EMP.CODEMP 
    LEFT JOIN TSICID CID ON PAJ.CODCID = CID.CODCID
    LEFT JOIN TSIUFS UFS ON UFS.CODUF = CID.UF
WHERE PAJ.ATIVO = 'S'
    AND EMP.ATIVO = 'S'
    AND PAJ.TIPO IS NOT NULL
    AND EXISTS(SELECT 1 
               FROM TRIPIMP PIMP 
               WHERE PIMP.NUPROCESSO = PAJ.NUPROCESSO
                   AND PIMP.TIPOIMPOSTO IN (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    AND PAJ.DTINIVALIDADE IS NOT NULL
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 27/04/2018 13:32:22
Num.Script: 54533-0-0
Nro. O.S. : 1177660
Nome      : Alterar - VRI_EVT_R2010_NFS_INFOTPSERV
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VRI_EVT_R2010_NFS_INFOTPSERV
NomeObjeto: VRI_EVT_R2010_NFS_INFOTPSERV
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2010_NFS_INFOTPSERV
AS
SELECT 
 TABX.CODEMP
,TABX.DTREF
,TABX.CHAVE
,TABX.NUNOTA
,TABX.TPSERVICO
,TABX.TIPODOCUMENTO
,TABX.TPINSC
,TABX.NRINSC
,TABX.TPINSCESTAB
,TABX.NRINSCESTAB
,TABX.INDOBRA
,TABX.CNPJPRESTADOR
,TABX.INDCPRB
,(TABX.VLRNRETADIC15 + TABX.VLRNRETADIC20 + TABX.VLRNRETADIC25) AS VLRNRETADIC
,TABX.VLRTOTALBRUTO 
,TABX.VLRBASERET
,TABX.VLRRETENCAO
,TABX.VLRRETSUB
,TABX.VLRNRETPRINC
,TABX.VLRSERVICOS15
,TABX.VLRSERVICOS20
,TABX.VLRSERVICOS25
,TABX.VLRADICIONAL
,TABX.NUPROCESSO_INSS_PRINC
,TABX.SEQPROCESSO_INSS_PRINC
,TABX.NUPROCESSO_INSS_15
,TABX.SEQPROCESSO_INSS_15
,TABX.VLRNRETADIC15
,TABX.NUPROCESSO_INSS_20
,TABX.SEQPROCESSO_INSS_20
,TABX.VLRNRETADIC20
,TABX.NUPROCESSO_INSS_25
,TABX.SEQPROCESSO_INSS_25
,TABX.VLRNRETADIC25
FROM (
	SELECT
	 TAB.CODEMP
	,TAB.DTREF
	,TAB.TPINSC||','||TAB.NRINSC||','||TAB.TPINSCESTAB||','||TAB.NRINSCESTAB||','||TAB.INDOBRA||','||TAB.CNPJPRESTADOR||','||TAB.INDCPRB AS CHAVE
	,TAB.NUDOCUMENTO AS NUNOTA
	,TAB.TPSERVICO
	,TAB.TIPODOCUMENTO
	,TAB.TPINSC
	,TAB.NRINSC
	,TAB.TPINSCESTAB
	,TAB.NRINSCESTAB
	,TAB.INDOBRA
	,TAB.CNPJPRESTADOR
	,TAB.INDCPRB
	,TRUNC(SUM(TAB.VLRTOTALBRUTO), 2) AS VLRTOTALBRUTO 
	,TRUNC(SUM(TAB.VLRBASERET), 2) AS VLRBASERET
	,TRUNC(SUM(TAB.VLRRETENCAO), 2) AS VLRRETENCAO
	,TRUNC(SUM(TAB.VLRRETSUB), 2) AS VLRRETSUB
	,TRUNC(SUM(TAB.VLRRETENCAO * NVL(ISET_INSS_PRINC.PERCSUSPIMP, 0) / 100), 2) AS VLRNRETPRINC
	,TRUNC(SUM(TAB.VLRSERVICOS15), 2) AS VLRSERVICOS15
	,TRUNC(SUM(TAB.VLRSERVICOS20), 2) AS VLRSERVICOS20
	,TRUNC(SUM(TAB.VLRSERVICOS25), 2) AS VLRSERVICOS25
	,TRUNC(SUM(TAB.VLRADICIONAL), 2) AS VLRADICIONAL
	,MAX(TAB.NUPROCESSO_INSS_PRINC) AS NUPROCESSO_INSS_PRINC
	,MAX(TAB.SEQPROCESSO_INSS_PRINC) AS SEQPROCESSO_INSS_PRINC
	,MAX(TAB.NUPROCESSO_INSS_15) AS NUPROCESSO_INSS_15
	,MAX(TAB.SEQPROCESSO_INSS_15) AS SEQPROCESSO_INSS_15
	,TRUNC(SUM(CASE WHEN TAB.VLRSERVICOS15 > 0 THEN TAB.VLRADICIONAL * NVL(ISET_INSS_15.PERCSUSPIMP, 0) / 100 ELSE 0 END), 2) AS VLRNRETADIC15
	,MAX(TAB.NUPROCESSO_INSS_20) AS NUPROCESSO_INSS_20
	,MAX(TAB.SEQPROCESSO_INSS_20) AS SEQPROCESSO_INSS_20
	,TRUNC(SUM(CASE WHEN TAB.VLRSERVICOS20 > 0 THEN TAB.VLRADICIONAL * NVL(ISET_INSS_20.PERCSUSPIMP, 0) / 100 ELSE 0 END), 2) AS VLRNRETADIC20
	,MAX(TAB.NUPROCESSO_INSS_25) AS NUPROCESSO_INSS_25
	,MAX(TAB.SEQPROCESSO_INSS_25) AS SEQPROCESSO_INSS_25
	,TRUNC(SUM(CASE WHEN TAB.VLRSERVICOS25 > 0 THEN TAB.VLRADICIONAL * NVL(ISET_INSS_25.PERCSUSPIMP, 0) / 100 ELSE 0 END), 2) AS VLRNRETADIC25
	FROM (
		/*Busca pelas notas de serviÃ§os tomados*/
		SELECT 
		 CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMP.CODEMP
			  WHEN NVL(EMP.CODEMPMATRIZEFD, 0) > 0 THEN EMP.CODEMPMATRIZEFD
			  ELSE EMP.CODEMP 
		 END AS CODEMP
		,TRUNC(CAB.DTNEG, 'MM') AS DTREF
		,CASE WHEN LENGTH(EMPC.CGC) = 14 
			  THEN '1' 
			  ELSE '2' 
		 END AS TPINSC
		,CASE WHEN LENGTH(EMPC.CGC) = 14 
			  THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
						THEN EMPC.CGC
						ELSE SUBSTR(EMPC.CGC,1,8)
				   END
			  ELSE EMPC.CGC
		 END AS NRINSC
		,ITE.NUNOTA AS NUDOCUMENTO
		,'N' AS TIPODOCUMENTO
		,CASE WHEN CAB.CODOBRA IS NOT NULL THEN 4 ELSE 1 END AS TPINSCESTAB
		,CASE WHEN CAB.CODOBRA IS NOT NULL THEN CAB.CODOBRA ELSE EMPC.CGC END AS NRINSCESTAB
		,CASE WHEN PRO.OBRACONSTCIVIL IS NULL THEN 0 ELSE PRO.OBRACONSTCIVIL END AS INDOBRA
		,PAR.CGC_CPF AS CNPJPRESTADOR
		,CASE WHEN NVL(DIN.ALIQUOTA, IMN.ALIQUOTA) = 11 THEN 0 ELSE 1 END AS INDCPRB
		,PRO.CLASSIFCESSAOOBRA AS TPSERVICO
		,ITE.VLRTOT AS VLRTOTALBRUTO
		,NVL(DIN.BASERED, IMN.BASE) AS VLRBASERET
		,CASE WHEN DIN.NUNOTA IS NOT NULL THEN CASE WHEN NVL(DIN.TIPOINSSESPECIAL, ' ') <> ' ' THEN NVL(DIN.VALOR, 0) - NVL(DIN.VLRINSSESPECIAL, 0) ELSE NVL(DIN.VALOR, 0) END
			  ELSE CASE WHEN NVL(IMN.TIPOINSSESPECIAL, ' ') <> ' ' THEN NVL(IMN.VALOR, 0) - NVL(IMN.VLRINSSESPECIAL, 0) ELSE NVL(IMN.VALOR, 0) END END AS VLRRETENCAO
		,0 AS VLRRETSUB /*Por enquanto nÃ£o vamos gerar essa tag*/
		,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, ' ') = '1' AND NVL(DIN.VLRINSSESPECIAL, 0) > 0 OR
				   NVL(IMN.TIPOINSSESPECIAL, ' ') = '1' AND NVL(IMN.VLRINSSESPECIAL, 0) > 0 THEN NVL(DIN.BASERED, IMN.BASE) ELSE 0 END AS VLRSERVICOS15
		,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, ' ') = '2' AND NVL(DIN.VLRINSSESPECIAL, 0) > 0 OR
				   NVL(IMN.TIPOINSSESPECIAL, ' ') = '2' AND NVL(IMN.VLRINSSESPECIAL, 0) > 0 THEN NVL(DIN.BASERED, IMN.BASE) ELSE 0 END AS VLRSERVICOS20
		,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, ' ') = '3' AND NVL(DIN.VLRINSSESPECIAL, 0) > 0 OR
				   NVL(IMN.TIPOINSSESPECIAL, ' ') = '3' AND NVL(IMN.VLRINSSESPECIAL, 0) > 0 THEN NVL(DIN.BASERED, IMN.BASE) ELSE 0 END AS VLRSERVICOS25
		,NVL(DIN.VLRINSSESPECIAL, NVL(IMN.VLRINSSESPECIAL, 0)) AS VLRADICIONAL
		,SNK_GET_IDPROCESSO_IMP_EFD(1, 
									EMP.CODEMP, 
									PAR.CODPARC, 
									ITE.CODPROD, 
									PRO.CODLST, 
									CAB.DTNEG) AS NUPROCESSO_INSS_PRINC
		,SNK_GET_IDPROCESSO_IMP_EFD(1, 
									EMP.CODEMP, 
									PAR.CODPARC, 
									ITE.CODPROD, 
									PRO.CODLST, 
									CAB.DTNEG,
									'S') AS SEQPROCESSO_INSS_PRINC
		,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, IMN.TIPOINSSESPECIAL) = '1' THEN SNK_GET_IDPROCESSO_IMP_EFD(9, 
																										 EMP.CODEMP, 
																										 PAR.CODPARC, 
																										 ITE.CODPROD, 
																										 PRO.CODLST, 
																										 CAB.DTNEG)
			  ELSE NULL END AS NUPROCESSO_INSS_15
		,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, IMN.TIPOINSSESPECIAL) = '1' THEN SNK_GET_IDPROCESSO_IMP_EFD(9, 
																										 EMP.CODEMP, 
																										 PAR.CODPARC, 
																										 ITE.CODPROD, 
																										 PRO.CODLST, 
																										 CAB.DTNEG,
																										 'S')
			  ELSE NULL END AS SEQPROCESSO_INSS_15
		,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, IMN.TIPOINSSESPECIAL) = '2' THEN SNK_GET_IDPROCESSO_IMP_EFD(10, 
																										 EMP.CODEMP, 
																										 PAR.CODPARC, 
																										 ITE.CODPROD, 
																										 PRO.CODLST, 
																										 CAB.DTNEG)
			  ELSE NULL END AS NUPROCESSO_INSS_20
		,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, IMN.TIPOINSSESPECIAL) = '2' THEN SNK_GET_IDPROCESSO_IMP_EFD(10, 
																										 EMP.CODEMP, 
																										 PAR.CODPARC, 
																										 ITE.CODPROD, 
																										 PRO.CODLST, 
																										 CAB.DTNEG,
																										 'S')
			  ELSE NULL END AS SEQPROCESSO_INSS_20
		,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, IMN.TIPOINSSESPECIAL) = '3' THEN SNK_GET_IDPROCESSO_IMP_EFD(11, 
																										 EMP.CODEMP, 
																										 PAR.CODPARC, 
																										 ITE.CODPROD, 
																										 PRO.CODLST, 
																										 CAB.DTNEG)
			  ELSE NULL END AS NUPROCESSO_INSS_25
		,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, IMN.TIPOINSSESPECIAL) = '3' THEN SNK_GET_IDPROCESSO_IMP_EFD(11, 
																										 EMP.CODEMP, 
																										 PAR.CODPARC, 
																										 ITE.CODPROD, 
																										 PRO.CODLST, 
																										 CAB.DTNEG,
																										 'S')
			  ELSE NULL END AS SEQPROCESSO_INSS_25
		FROM TGFITE ITE
			INNER JOIN TGFCAB CAB  ON CAB.NUNOTA = ITE.NUNOTA
			INNER JOIN (SELECT CODTIPOPER, DHALTER, TIPMOV, ATUALLIVISS, DESCROPER FROM TGFTOP) TPO  ON TPO.CODTIPOPER = CAB.CODTIPOPER AND TPO.DHALTER = CAB.DHTIPOPER
			INNER JOIN (SELECT CODEMP, CODEMPMATRIZEFD, EMPADMPUBDIR, ATIVO FROM TGFEMP) EMP  ON EMP.CODEMP = CAB.CODEMP
			INNER JOIN (SELECT CODEMP, RAZAOSOCIAL, NOMEFANTASIA, CGC FROM TSIEMP) EMPC ON EMPC.CODEMP = EMP.CODEMP
			INNER JOIN (SELECT CODPARC, NOMEPARC, CGC_CPF FROM TGFPAR) PAR  ON PAR.CODPARC = CAB.CODPARC
			INNER JOIN (SELECT CODPROD, OBRACONSTCIVIL, CLASSIFCESSAOOBRA, CODLST FROM TGFPRO) PRO  ON PRO.CODPROD = ITE.CODPROD
			LEFT JOIN  TGFDIN DIN  ON DIN.NUNOTA = ITE.NUNOTA AND DIN.SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 5 AND DIN.TIPO = -1 AND ((NVL(DIN.ALIQUOTA, 0) - NVL(DIN.PERCINSSESPECIAL, 0)) IN (3.5, 11))
			LEFT JOIN  TGFIMN IMN  ON IMN.NUNOTA = ITE.NUNOTA AND IMN.SEQUENCIA = ITE.SEQUENCIA AND IMN.TIPOIMPOSTO = 5 AND IMN.TIPIMP = -1 AND ((NVL(IMN.ALIQUOTA, 0) - NVL(IMN.PERCINSSESPECIAL, 0)) IN (3.5, 11))
		WHERE EMP.ATIVO = 'S'
			AND PRO.CLASSIFCESSAOOBRA IS NOT NULL
			AND ITE.USOPROD = 'S'
			AND TPO.TIPMOV = 'C'
			AND TPO.ATUALLIVISS = 'E'
			AND CAB.STATUSNOTA = 'L'
			AND (EXISTS (SELECT 1 FROM TGFDIN DIN WHERE DIN.NUNOTA = ITE.NUNOTA AND DIN.SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 5 AND DIN.TIPO = -1 AND ((NVL(DIN.ALIQUOTA, 0) - NVL(DIN.PERCINSSESPECIAL, 0)) IN (3.5, 11))) OR 
				 EXISTS (SELECT 1 FROM TGFIMN IMN WHERE IMN.NUNOTA = ITE.NUNOTA AND IMN.SEQUENCIA = ITE.SEQUENCIA AND IMN.TIPOIMPOSTO = 5 AND IMN.TIPIMP = -1 AND ((NVL(IMN.ALIQUOTA, 0) - NVL(IMN.PERCINSSESPECIAL, 0)) IN (3.5, 11))))
		UNION ALL
		/*Busca pelo financeiros que representam serviÃ§os tomados*/
		SELECT 
		 CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMP.CODEMP
			  WHEN NVL(EMP.CODEMPMATRIZEFD, 0) > 0 THEN EMP.CODEMPMATRIZEFD
			  ELSE EMP.CODEMP 
		 END AS CODEMP
		,TRUNC(FIN.DTNEG, 'MM') AS DTREF
		,CASE WHEN LENGTH(EMPC.CGC) = 14 
			  THEN '1' 
			  ELSE '2' 
		 END AS TPINSC
		,CASE WHEN LENGTH(EMPC.CGC) = 14 
			  THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
						THEN EMPC.CGC
						ELSE SUBSTR(EMPC.CGC,1,8)
				   END
			  ELSE EMPC.CGC
		 END AS NRINSC
		,FIN.NUFIN AS NUDOCUMENTO
		,'F' AS TIPODOCUMENTO
		,CASE WHEN FIN.CODOBRA IS NOT NULL THEN 4 ELSE 1 END AS TPINSCESTAB
		,CASE WHEN FIN.CODOBRA IS NOT NULL THEN FIN.CODOBRA ELSE EMPC.CGC END AS NRINSCESTAB
		,CASE WHEN FIN.OBRACONSTCIVIL IS NULL THEN 0 ELSE FIN.OBRACONSTCIVIL END AS INDOBRA
		,PAR.CGC_CPF AS CNPJPRESTADOR
		,CASE WHEN NVL(IMF.ALIQUOTA, 0) = 11 THEN 0 ELSE 1 END AS INDCPRB
		,FIN.CLASSIFCESSAOOBRA AS TPSERVICO
		,FIN.VLRDESDOB AS VLRTOTALBRUTO
		,NVL(IMF.BASE, 0) AS VLRBASERET
		,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') <> ' ' THEN NVL(IMF.VALOR, 0) - NVL(IMF.VLRINSSESPECIAL, 0) ELSE NVL(IMF.VALOR, 0) END AS VLRRETENCAO
		,0 AS VLRRETSUB /*Por enquanto nÃ£o vamos gerar essa tag*/
		,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') = '1' AND NVL(IMF.VLRINSSESPECIAL, 0) > 0 THEN NVL(IMF.BASE, 0) ELSE 0 END AS VLRSERVICOS15
		,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') = '2' AND NVL(IMF.VLRINSSESPECIAL, 0) > 0 THEN NVL(IMF.BASE, 0) ELSE 0 END AS VLRSERVICOS20
		,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') = '3' AND NVL(IMF.VLRINSSESPECIAL, 0) > 0 THEN NVL(IMF.BASE, 0) ELSE 0 END AS VLRSERVICOS25
		,NVL(IMF.VLRINSSESPECIAL, 0) AS VLRADICIONAL
		,SNK_GET_IDPROCESSO_IMP_EFD(1, 
									EMP.CODEMP, 
									PAR.CODPARC, 
									NULL, 
									FIN.CODLST, 
									FIN.DTNEG) AS NUPROCESSO_INSS_PRINC
		,SNK_GET_IDPROCESSO_IMP_EFD(1, 
									EMP.CODEMP, 
									PAR.CODPARC, 
									NULL, 
									FIN.CODLST, 
									FIN.DTNEG,
									'S') AS SEQPROCESSO_INSS_PRINC
		,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') = '1' THEN SNK_GET_IDPROCESSO_IMP_EFD(9, 
																						EMP.CODEMP, 
																						PAR.CODPARC, 
																						NULL, 
																						FIN.CODLST, 
																						FIN.DTNEG)
			  ELSE NULL END AS NUPROCESSO_INSS_15
		,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') = '1' THEN SNK_GET_IDPROCESSO_IMP_EFD(9, 
																						EMP.CODEMP, 
																						PAR.CODPARC, 
																						NULL, 
																						FIN.CODLST, 
																						FIN.DTNEG,
																						'S')
			  ELSE NULL END AS SEQPROCESSO_INSS_15
		,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') = '2' THEN SNK_GET_IDPROCESSO_IMP_EFD(10, 
																						EMP.CODEMP, 
																						PAR.CODPARC, 
																						NULL, 
																						FIN.CODLST, 
																						FIN.DTNEG)
			  ELSE NULL END AS NUPROCESSO_INSS_20
		,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') = '2' THEN SNK_GET_IDPROCESSO_IMP_EFD(10, 
																						EMP.CODEMP, 
																						PAR.CODPARC, 
																						NULL, 
																						FIN.CODLST, 
																						FIN.DTNEG,
																						'S')
			  ELSE NULL END AS SEQPROCESSO_INSS_20
		,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') = '3' THEN SNK_GET_IDPROCESSO_IMP_EFD(11, 
																						EMP.CODEMP, 
																						PAR.CODPARC, 
																						NULL, 
																						FIN.CODLST, 
																						FIN.DTNEG)
			  ELSE NULL END AS NUPROCESSO_INSS_25
		,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') = '3' THEN SNK_GET_IDPROCESSO_IMP_EFD(11, 
																						EMP.CODEMP, 
																						PAR.CODPARC, 
																						NULL, 
																						FIN.CODLST, 
																						FIN.DTNEG,
																						'S')
			  ELSE NULL END AS SEQPROCESSO_INSS_25
		FROM TGFFIN FIN
			INNER JOIN (SELECT CODTIPOPER, DHALTER, TIPMOV, ATUALLIVISS, DESCROPER FROM TGFTOP)  TPO  ON TPO.CODTIPOPER = FIN.CODTIPOPER AND TPO.DHALTER = FIN.DHTIPOPER
			INNER JOIN (SELECT CODEMP, CODEMPMATRIZEFD, EMPADMPUBDIR, ATIVO FROM TGFEMP) EMP  ON EMP.CODEMP = FIN.CODEMP
			INNER JOIN (SELECT CODEMP, RAZAOSOCIAL, NOMEFANTASIA, CGC FROM TSIEMP) EMPC ON EMPC.CODEMP = EMP.CODEMP
			INNER JOIN (SELECT CODPARC, NOMEPARC, CGC_CPF FROM TGFPAR) PAR  ON PAR.CODPARC = FIN.CODPARC
			INNER JOIN TGFIMF IMF ON IMF.NUFIN = FIN.NUFIN AND IMF.TIPIMP = -1 AND ((NVL(IMF.ALIQUOTA, 0) - NVL(IMF.PERCINSSESPECIAL, 0)) IN (3.5, 11))
			INNER JOIN TGFIMC IMC ON IMC.CODIMP = IMF.CODIMP AND IMC.TIPOIMPOSTO = 5
		WHERE EMP.ATIVO = 'S'
			AND FIN.CLASSIFCESSAOOBRA IS NOT NULL
			AND TPO.TIPMOV = 'I'
			AND TPO.ATUALLIVISS = 'E'
	) TAB
		LEFT JOIN  TRIPISET ISET_INSS_PRINC ON ISET_INSS_PRINC.NUPROCESSO = NUPROCESSO_INSS_PRINC AND ISET_INSS_PRINC.SEQUENCIA = SEQPROCESSO_INSS_PRINC 
		LEFT JOIN  TRIPISET ISET_INSS_15 ON ISET_INSS_15.NUPROCESSO = NUPROCESSO_INSS_15 AND ISET_INSS_15.SEQUENCIA = SEQPROCESSO_INSS_15
		LEFT JOIN  TRIPISET ISET_INSS_20 ON ISET_INSS_20.NUPROCESSO = NUPROCESSO_INSS_20 AND ISET_INSS_20.SEQUENCIA = SEQPROCESSO_INSS_20
		LEFT JOIN  TRIPISET ISET_INSS_25 ON ISET_INSS_25.NUPROCESSO = NUPROCESSO_INSS_25 AND ISET_INSS_25.SEQUENCIA = SEQPROCESSO_INSS_25
	GROUP BY
	 TAB.CODEMP
	,TAB.DTREF
	,TAB.TPINSC
	,TAB.NRINSC
	,TAB.NUDOCUMENTO
	,TAB.TIPODOCUMENTO
	,TAB.TPINSCESTAB
	,TAB.NRINSCESTAB
	,TAB.INDOBRA
	,TAB.CNPJPRESTADOR
	,TAB.INDCPRB
	,TAB.TPSERVICO
) TABX
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 27/04/2018 13:32:22
Num.Script: 54534-0-0
Nro. O.S. : 1177660
Nome      : Alterar - VRI_EVT_R2020_NFS_INFOTPSERV
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VRI_EVT_R2020_NFS_INFOTPSERV
NomeObjeto: VRI_EVT_R2020_NFS_INFOTPSERV
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2020_NFS_INFOTPSERV
AS 
SELECT 
 TABX.CODEMP
,TABX.DTREF
,TABX.CHAVE
,TABX.NUNOTA
,TABX.TPSERVICO
,TABX.TPINSC
,TABX.NRINSC
,TABX.TPINSCESTABPREST
,TABX.NRINSCESTABPREST
,TABX.TPINSCTOMADOR
,TABX.NRINSCTOMADOR
,TABX.INDOBRA
,TABX.VLRTOTALBRUTO 
,TABX.VLRBASERET
,TABX.VLRRETENCAO
,TABX.VLRRETSUB
,TABX.VLRNRETPRINC
,TABX.VLRSERVICOS15
,TABX.VLRSERVICOS20
,TABX.VLRSERVICOS25
,TABX.VLRADICIONAL
,(TABX.VLRNRETADIC15 + TABX.VLRNRETADIC20 + TABX.VLRNRETADIC25) AS VLRNRETADIC
,TABX.NUPROCESSO_INSS_PRINC
,TABX.SEQPROCESSO_INSS_PRINC
,TABX.NUPROCESSO_INSS_15
,TABX.SEQPROCESSO_INSS_15
,TABX.VLRNRETADIC15
,TABX.NUPROCESSO_INSS_20
,TABX.SEQPROCESSO_INSS_20
,TABX.VLRNRETADIC20
,TABX.NUPROCESSO_INSS_25
,TABX.SEQPROCESSO_INSS_25
,TABX.VLRNRETADIC25
FROM (
    SELECT 
     TAB.CODEMP
    ,TAB.DTREF
    ,TAB.TPINSC||','||TAB.NRINSC||','||TAB.TPINSCESTABPREST||','||TAB.NRINSCESTABPREST||','||TAB.TPINSCTOMADOR||','||TAB.NRINSCTOMADOR||','||TAB.INDOBRA AS CHAVE
    ,TAB.NUNOTA
    ,TAB.TPSERVICO
    ,TAB.TPINSC
    ,TAB.NRINSC
    ,TAB.TPINSCESTABPREST
    ,TAB.NRINSCESTABPREST
    ,TAB.TPINSCTOMADOR
    ,TAB.NRINSCTOMADOR
    ,TAB.INDOBRA
    ,TRUNC(SUM(TAB.VLRTOTALBRUTO), 2) AS VLRTOTALBRUTO 
    ,TRUNC(SUM(TAB.VLRBASERET), 2) AS VLRBASERET
    ,TRUNC(SUM(TAB.VLRRETENCAO), 2) AS VLRRETENCAO
    ,TRUNC(SUM(TAB.VLRRETSUB), 2) AS VLRRETSUB
    ,TRUNC(SUM(TAB.VLRRETENCAO * NVL(ISET_INSS_PRINC.PERCSUSPIMP, 0) / 100), 2) AS VLRNRETPRINC
    ,TRUNC(SUM(TAB.VLRSERVICOS15), 2) AS VLRSERVICOS15
    ,TRUNC(SUM(TAB.VLRSERVICOS20), 2) AS VLRSERVICOS20
    ,TRUNC(SUM(TAB.VLRSERVICOS25), 2) AS VLRSERVICOS25
    ,TRUNC(SUM(TAB.VLRADICIONAL), 2) AS VLRADICIONAL
    ,MAX(TAB.NUPROCESSO_INSS_PRINC) AS NUPROCESSO_INSS_PRINC
    ,MAX(TAB.SEQPROCESSO_INSS_PRINC) AS SEQPROCESSO_INSS_PRINC
    ,MAX(TAB.NUPROCESSO_INSS_15) AS NUPROCESSO_INSS_15
    ,MAX(TAB.SEQPROCESSO_INSS_15) AS SEQPROCESSO_INSS_15
    ,TRUNC(SUM(CASE WHEN TAB.VLRSERVICOS15 > 0 THEN TAB.VLRADICIONAL * NVL(ISET_INSS_15.PERCSUSPIMP, 0) / 100 ELSE 0 END), 2) AS VLRNRETADIC15
    ,MAX(TAB.NUPROCESSO_INSS_20) AS NUPROCESSO_INSS_20
    ,MAX(TAB.SEQPROCESSO_INSS_20) AS SEQPROCESSO_INSS_20
    ,TRUNC(SUM(CASE WHEN TAB.VLRSERVICOS20 > 0 THEN TAB.VLRADICIONAL * NVL(ISET_INSS_20.PERCSUSPIMP, 0) / 100 ELSE 0 END), 2) AS VLRNRETADIC20
    ,MAX(TAB.NUPROCESSO_INSS_25) AS NUPROCESSO_INSS_25
    ,MAX(TAB.SEQPROCESSO_INSS_25) AS SEQPROCESSO_INSS_25
    ,TRUNC(SUM(CASE WHEN TAB.VLRSERVICOS25 > 0 THEN TAB.VLRADICIONAL * NVL(ISET_INSS_25.PERCSUSPIMP, 0) / 100 ELSE 0 END), 2) AS VLRNRETADIC25
    FROM (
        SELECT 
         CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMP.CODEMP
              WHEN NVL(EMP.CODEMPMATRIZEFD, 0) > 0 THEN EMP.CODEMPMATRIZEFD
              ELSE EMP.CODEMP 
         END AS CODEMP
        ,TRUNC(CAB.DTNEG, 'MM') AS DTREF
        ,CASE WHEN LENGTH(EMPC.CGC) = 14 
              THEN '1' 
              ELSE '2' 
         END AS TPINSC
        ,CASE WHEN LENGTH(EMPC.CGC) = 14 
              THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
                        THEN EMPC.CGC
                        ELSE SUBSTR(EMPC.CGC,1,8)
                   END
              ELSE EMPC.CGC
         END AS NRINSC
        ,1 AS TPINSCESTABPREST
        ,EMPC.CGC AS NRINSCESTABPREST
        ,ITE.NUNOTA AS NUNOTA
        ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN 4 ELSE 1 END AS TPINSCTOMADOR
        ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN CAB.CODOBRA ELSE PAR.CGC_CPF END AS NRINSCTOMADOR
        ,CASE WHEN PRO.OBRACONSTCIVIL IS NULL THEN 0 ELSE PRO.OBRACONSTCIVIL END AS INDOBRA
        ,PRO.CLASSIFCESSAOOBRA AS TPSERVICO
        ,ITE.VLRTOT AS VLRTOTALBRUTO
        ,NVL(DIN.BASERED, IMN.BASE) AS VLRBASERET
        ,CASE WHEN DIN.NUNOTA IS NOT NULL THEN CASE WHEN NVL(DIN.TIPOINSSESPECIAL, ' ') <> ' ' THEN NVL(DIN.VALOR, 0) - NVL(DIN.VLRINSSESPECIAL, 0) ELSE NVL(DIN.VALOR, 0) END
              ELSE CASE WHEN NVL(IMN.TIPOINSSESPECIAL, ' ') <> ' ' THEN NVL(IMN.VALOR, 0) - NVL(IMN.VLRINSSESPECIAL, 0) ELSE NVL(IMN.VALOR, 0) END END AS VLRRETENCAO
        ,0 AS VLRRETSUB /*Por enquanto nÃ£o vamos gerar essa tag*/
        ,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, ' ') = '1' AND NVL(DIN.VLRINSSESPECIAL, 0) > 0 OR
                   NVL(IMN.TIPOINSSESPECIAL, ' ') = '1' AND NVL(IMN.VLRINSSESPECIAL, 0) > 0 THEN NVL(DIN.BASERED, IMN.BASE) ELSE 0 END AS VLRSERVICOS15
        ,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, ' ') = '2' AND NVL(DIN.VLRINSSESPECIAL, 0) > 0 OR
                   NVL(IMN.TIPOINSSESPECIAL, ' ') = '2' AND NVL(IMN.VLRINSSESPECIAL, 0) > 0 THEN NVL(DIN.BASERED, IMN.BASE) ELSE 0 END AS VLRSERVICOS20
        ,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, ' ') = '3' AND NVL(DIN.VLRINSSESPECIAL, 0) > 0 OR
                   NVL(IMN.TIPOINSSESPECIAL, ' ') = '3' AND NVL(IMN.VLRINSSESPECIAL, 0) > 0 THEN NVL(DIN.BASERED, IMN.BASE) ELSE 0 END AS VLRSERVICOS25
        ,NVL(DIN.VLRINSSESPECIAL, NVL(IMN.VLRINSSESPECIAL, 0)) AS VLRADICIONAL
        ,SNK_GET_IDPROCESSO_IMP_EFD(1, 
                                    EMP.CODEMP, 
                                    PAR.CODPARC, 
                                    ITE.CODPROD, 
                                    PRO.CODLST, 
                                    CAB.DTNEG) AS NUPROCESSO_INSS_PRINC
        ,SNK_GET_IDPROCESSO_IMP_EFD(1, 
                                    EMP.CODEMP, 
                                    PAR.CODPARC, 
                                    ITE.CODPROD, 
                                    PRO.CODLST, 
                                    CAB.DTNEG,
                                    'S') AS SEQPROCESSO_INSS_PRINC
        ,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, IMN.TIPOINSSESPECIAL) = '1' THEN SNK_GET_IDPROCESSO_IMP_EFD(9, 
                                                                                                         EMP.CODEMP, 
                                                                                                         PAR.CODPARC, 
                                                                                                         ITE.CODPROD, 
                                                                                                         PRO.CODLST, 
                                                                                                         CAB.DTNEG) 
              ELSE NULL END AS NUPROCESSO_INSS_15
        ,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, IMN.TIPOINSSESPECIAL) = '1' THEN SNK_GET_IDPROCESSO_IMP_EFD(9, 
                                                                                                         EMP.CODEMP, 
                                                                                                         PAR.CODPARC, 
                                                                                                         ITE.CODPROD, 
                                                                                                         PRO.CODLST, 
                                                                                                         CAB.DTNEG,
                                                                                                         'S')
              ELSE NULL END AS SEQPROCESSO_INSS_15
        ,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, IMN.TIPOINSSESPECIAL) = '2' THEN SNK_GET_IDPROCESSO_IMP_EFD(10, 
                                                                                                         EMP.CODEMP, 
                                                                                                         PAR.CODPARC, 
                                                                                                         ITE.CODPROD, 
                                                                                                         PRO.CODLST, 
                                                                                                         CAB.DTNEG)
              ELSE NULL END AS NUPROCESSO_INSS_20
        ,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, IMN.TIPOINSSESPECIAL) = '2' THEN SNK_GET_IDPROCESSO_IMP_EFD(10, 
                                                                                                         EMP.CODEMP, 
                                                                                                         PAR.CODPARC, 
                                                                                                         ITE.CODPROD, 
                                                                                                         PRO.CODLST, 
                                                                                                         CAB.DTNEG,
                                                                                                         'S')
              ELSE NULL END AS SEQPROCESSO_INSS_20
        ,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, IMN.TIPOINSSESPECIAL) = '3' THEN SNK_GET_IDPROCESSO_IMP_EFD(11, 
                                                                                                         EMP.CODEMP, 
                                                                                                         PAR.CODPARC, 
                                                                                                         ITE.CODPROD, 
                                                                                                         PRO.CODLST, 
                                                                                                         CAB.DTNEG)
              ELSE NULL END AS NUPROCESSO_INSS_25
        ,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, IMN.TIPOINSSESPECIAL) = '3' THEN SNK_GET_IDPROCESSO_IMP_EFD(11, 
                                                                                                         EMP.CODEMP, 
                                                                                                         PAR.CODPARC, 
                                                                                                         ITE.CODPROD, 
                                                                                                          PRO.CODLST, 
                                                                                                          CAB.DTNEG,
                                                                                                         'S')
              ELSE NULL END AS SEQPROCESSO_INSS_25
        FROM TGFITE ITE
            INNER JOIN TGFCAB CAB  ON CAB.NUNOTA = ITE.NUNOTA
            INNER JOIN (SELECT CODTIPOPER, DHALTER, TIPMOV, ATUALLIVISS, DESCROPER FROM TGFTOP) TPO  ON TPO.CODTIPOPER = CAB.CODTIPOPER AND TPO.DHALTER = CAB.DHTIPOPER
            INNER JOIN (SELECT CODEMP, CODEMPMATRIZEFD, EMPADMPUBDIR, ATIVO FROM TGFEMP) EMP  ON EMP.CODEMP = CAB.CODEMP
            INNER JOIN (SELECT CODEMP, RAZAOSOCIAL, NOMEFANTASIA, CGC FROM TSIEMP) EMPC ON EMPC.CODEMP = EMP.CODEMP
            INNER JOIN (SELECT CODPARC, NOMEPARC, CGC_CPF FROM TGFPAR) PAR  ON PAR.CODPARC = CAB.CODPARC
            INNER JOIN (SELECT CODPROD, OBRACONSTCIVIL, CLASSIFCESSAOOBRA, CODLST FROM TGFPRO) PRO  ON PRO.CODPROD = ITE.CODPROD
            LEFT JOIN  TGFDIN DIN  ON DIN.NUNOTA = ITE.NUNOTA AND DIN.SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 5 AND DIN.TIPO = -1 AND ((NVL(DIN.ALIQUOTA, 0) - NVL(DIN.PERCINSSESPECIAL, 0)) IN (3.5, 11))
            LEFT JOIN  TGFIMN IMN  ON IMN.NUNOTA = ITE.NUNOTA AND IMN.SEQUENCIA = ITE.SEQUENCIA AND IMN.TIPOIMPOSTO = 5 AND IMN.TIPIMP = -1 AND ((NVL(IMN.ALIQUOTA, 0) - NVL(IMN.PERCINSSESPECIAL, 0)) IN (3.5, 11))
        WHERE EMP.ATIVO = 'S'
            AND PRO.CLASSIFCESSAOOBRA IS NOT NULL
            AND ITE.USOPROD = 'S'
            AND TPO.TIPMOV = 'V'
            AND TPO.ATUALLIVISS = 'S'
            AND CAB.STATUSNOTA = 'L'
            AND (EXISTS (SELECT 1 FROM TGFDIN WHERE NUNOTA = ITE.NUNOTA AND SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 5 AND DIN.TIPO = -1 AND ((NVL(DIN.ALIQUOTA, 0) - NVL(DIN.PERCINSSESPECIAL, 0)) IN (3.5, 11))) OR 
                 EXISTS (SELECT 1 FROM TGFIMN WHERE NUNOTA = ITE.NUNOTA AND SEQUENCIA = ITE.SEQUENCIA AND IMN.TIPOIMPOSTO = 5 AND IMN.TIPIMP = -1 AND ((NVL(IMN.ALIQUOTA, 0) - NVL(IMN.PERCINSSESPECIAL, 0)) IN (3.5, 11))))
    ) TAB
        LEFT JOIN  TRIPISET ISET_INSS_PRINC ON ISET_INSS_PRINC.NUPROCESSO = NUPROCESSO_INSS_PRINC AND ISET_INSS_PRINC.SEQUENCIA = SEQPROCESSO_INSS_PRINC
        LEFT JOIN  TRIPISET ISET_INSS_15 ON ISET_INSS_15.NUPROCESSO = NUPROCESSO_INSS_15 AND ISET_INSS_15.SEQUENCIA = SEQPROCESSO_INSS_15
        LEFT JOIN  TRIPISET ISET_INSS_20 ON ISET_INSS_20.NUPROCESSO = NUPROCESSO_INSS_20 AND ISET_INSS_20.SEQUENCIA = SEQPROCESSO_INSS_20
        LEFT JOIN  TRIPISET ISET_INSS_25 ON ISET_INSS_25.NUPROCESSO = NUPROCESSO_INSS_25 AND ISET_INSS_25.SEQUENCIA = SEQPROCESSO_INSS_25
    GROUP BY
     TAB.CODEMP
    ,TAB.DTREF
    ,TAB.TPINSC
    ,TAB.NRINSC
    ,TAB.TPINSCESTABPREST
    ,TAB.NRINSCESTABPREST
    ,TAB.NUNOTA
    ,TAB.TPINSCTOMADOR
    ,TAB.NRINSCTOMADOR
    ,TAB.INDOBRA
    ,TAB.TPSERVICO
) TABX
/
 
 
 
/*
Requer    : 4210009
Conexao   : ORCL
Data      : 27/04/2018 13:32:22
Num.Script: 54535-0-0
Nro. O.S. : 1177660
Nome      : Alterar - VRI_EVT_R2060_NFS
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VRI_EVT_R2060_NFS
NomeObjeto: VRI_EVT_R2060_NFS
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210010
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2060_NFS
AS
SELECT 
 TABX.CODEMP
,TABX.DTREF
,TABX.TPINSC
,TABX.NRINSC
,TABX.TPINSCESTAB
,TABX.NRINSCESTAB
,TABX.TPINSC||','||TABX.NRINSC||','||TABX.TPINSCESTAB||','||TABX.NRINSCESTAB AS CHAVE
,CASE WHEN LENGTH(CAST(TABX.CODATIVECON AS VARCHAR(10))) > 8 THEN SUBSTR(CAST(TABX.CODATIVECON AS VARCHAR(10)), 1, 8) 
      ELSE CAST(TABX.CODATIVECON AS VARCHAR(10)) 
 END AS CODATIVECON
,TABX.NUNOTA
,TABX.NUPROCESSO_INSS
,TABX.SEQPROCESSO_INSS
,MAX(TABX.CODREC) AS CODRECOLHIMENTO
,TRUNC(SUM(TABX.VLRRECEITABRUTAESTAB), 2) AS VLRRECEITABRUTAESTAB
,TRUNC(SUM(TABX.VLRRECEITABRUTAATIV), 2) AS VLRRECEITABRUTAATIV
,TRUNC(SUM(TABX.VLRABATIMENTOBRUTOATIV), 2) AS VLRABATIMENTOBRUTOATIV
,TRUNC(SUM(TABX.VLREXCLUSAOBRUTAATIV), 2) AS VLREXCLUSAOBRUTAATIV
,TRUNC(SUM(TABX.VLREXCRECBRUTA), 2) AS VLREXCRECBRUTA
,TRUNC(SUM(TABX.VLRCPRBAPUR), 2) AS VLRCPRBAPUR
,TRUNC(SUM(TABX.VLRBCCPRB), 2) AS VLRBCCPRB
,TRUNC(SUM(TABX.VLRCPRBAPUR * NVL(ISET_INSS.PERCSUSPIMP, 0) / 100), 2) AS VLRCPRBSUSP
FROM (
    SELECT 
     TAB.CODEMP
    ,TAB.DTREF
    ,TAB.TPINSC
    ,TAB.NRINSC
    ,TAB.TPINSCESTAB
    ,TAB.NRINSCESTAB
    ,CASE WHEN NVL(TAB.ENQREINTEGRA, 'N') = 'S' THEN CASE WHEN TAB.CODATIVREINTEGRA IS NOT NULL THEN TAB.CODATIVREINTEGRA 
                                                          ELSE TAB.CODATIVIDADE END
          ELSE TAB.CNAE END AS CODATIVECON
    ,TAB.NUNOTA
    ,TAB.NUPROCESSO_INSS
    ,TAB.SEQPROCESSO_INSS
    ,NVL(TAB.CODREC, '-1') AS CODREC /*SE NÃO ESTIVER INFORMADO IREMOS CRIAR UM AGRUPAMENTO NA TABELA DE RESUMO DO EVENTO R-2060 COM CODRECOLHIMENTO IGUAL A -1*/
    ,TAB.RECEITABRUTAESTAB AS VLRRECEITABRUTAESTAB
    ,TAB.RECEITABRUTAATIV AS VLRRECEITABRUTAATIV
    ,TAB.ABATIMENTOBRUTOATIV AS VLRABATIMENTOBRUTOATIV
    ,TAB.EXCLUSAOBRUTAATIV AS VLREXCLUSAOBRUTAATIV
    ,(TAB.RECEITABRUTAATIV - (TAB.ABATIMENTOBRUTOATIV + TAB.EXCLUSAOBRUTAATIV)) * ALIQDESONERACAO / 100 AS VLRCPRBAPUR
    ,TAB.ABATIMENTOBRUTOATIV + TAB.EXCLUSAOBRUTAATIV AS VLREXCRECBRUTA
    ,TAB.RECEITABRUTAATIV - (TAB.ABATIMENTOBRUTOATIV + TAB.EXCLUSAOBRUTAATIV) AS VLRBCCPRB
    FROM (
        SELECT 
         LID.CODEMP
        ,LID.DTREF
        ,LID.TPINSC
        ,LID.NRINSC
        ,LID.TPINSCESTAB
        ,LID.NRINSCESTAB
        ,LID.CODATIVIDADE
        ,LID.ENQREINTEGRA
        ,LID.CODATIVREINTEGRA
        ,LID.USOPROD
        ,LID.CNAE
        ,LID.ALIQDESONERACAO
        ,LID.CODCTA
        ,LID.CTACTB
        ,LID.DTDOC
        ,LID.NUNOTA
        ,LID.NUPROCESSO_INSS
        ,LID.SEQPROCESSO_INSS
        ,LID.CODREC
        ,SUM(LID.RECEITABRUTAESTAB) AS RECEITABRUTAESTAB
        ,SUM(LID.RECEITABRUTAATIV) AS RECEITABRUTAATIV
        ,SUM(LID.ABATIMENTOBRUTOATIV) AS ABATIMENTOBRUTOATIV
        ,SUM(LID.EXCLUSAOBRUTAATIV) AS EXCLUSAOBRUTAATIV
        FROM (
            SELECT 
             CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMP.CODEMP
                  WHEN NVL(EMP.CODEMPMATRIZEFD, 0) > 0 THEN EMP.CODEMPMATRIZEFD
                  ELSE EMP.CODEMP 
             END AS CODEMP
            ,TRUNC(LIV.DTDOC, 'MM') AS DTREF
            ,CASE WHEN LENGTH(EMPC.CGC) = 14 
                  THEN '1' 
                  ELSE '2' 
             END AS TPINSC
            ,CASE WHEN LENGTH(EMPC.CGC) = 14 
                  THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
                            THEN EMPC.CGC
                            ELSE SUBSTR(EMPC.CGC,1,8)
                       END
                  ELSE EMPC.CGC
             END AS NRINSC
            ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN 4 ELSE 1 END AS TPINSCESTAB
            ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN CAB.CODOBRA ELSE EMPC.CGC END AS NRINSCESTAB
            ,CAST(PRO.NCM AS VARCHAR(10)) AS CODATIVIDADE
            ,PRO.ENQREINTEGRA
            ,NVL(PRO.CODCPRB, PRO.CODATIVREINTEGRA) AS CODATIVREINTEGRA
            ,PRO.USOPROD
            ,RNT.CNAE
            ,CASE WHEN NVL(PRO.CODCPRB, 0) > 0 THEN CPRB.ALIQUOTA ELSE RNT.ALIQCONT END AS ALIQDESONERACAO
            ,RNT.CODCTACTB AS CODCTA
            ,(SELECT CTACTB FROM TCBPLA PLA WHERE PLA.CODCTACTB = RNT.CODCTACTB) AS CTACTB
            ,LIV.DTDOC
            ,LIV.NUNOTA
            ,SNK_GET_IDPROCESSO_IMP_EFD(8, 
                                        LIV.CODEMP, 
                                        CASE WHEN LIV.EMPPARC = 'P' THEN LIV.CODPARC ELSE NULL END, 
                                        CASE WHEN ITE.USOPROD = 'S' THEN NULL ELSE ITE.CODPROD END, 
                                        CASE WHEN ITE.USOPROD <> 'S' THEN NULL WHEN DIN.CODLST IS NULL THEN PRO.CODLST ELSE DIN.CODLST END, 
                                        LIV.DTDOC,
                                        'N') AS NUPROCESSO_INSS
            ,SNK_GET_IDPROCESSO_IMP_EFD(8, 
                                        LIV.CODEMP, 
                                        CASE WHEN LIV.EMPPARC = 'P' THEN LIV.CODPARC ELSE NULL END, 
                                        CASE WHEN ITE.USOPROD = 'S' THEN NULL ELSE ITE.CODPROD END, 
                                        CASE WHEN ITE.USOPROD <> 'S' THEN NULL WHEN DIN.CODLST IS NULL THEN PRO.CODLST ELSE DIN.CODLST END, 
                                        LIV.DTDOC,
                                        'S') AS SEQPROCESSO_INSS
            ,CASE WHEN CFO.RECBRUTAEFDBLOCOP = 'S' THEN LIV.VLRCTB ELSE 0 END AS RECEITABRUTAESTAB
            ,CASE WHEN PRO.ENQREINTEGRA = 'S' THEN
                       CASE WHEN CFO.RECBRUTAEFDBLOCOP = 'S' THEN LIV.VLRCTB ELSE 0 END
                  ELSE 0 END AS RECEITABRUTAATIV
            ,CASE WHEN PRO.ENQREINTEGRA = 'S' THEN
                       CASE WHEN CFO.RECBRUTAEFDBLOCOP = 'S' THEN 0 ELSE LIV.VLRCTB END
                  ELSE 0 END AS ABATIMENTOBRUTOATIV
            ,CASE WHEN PRO.ENQREINTEGRA = 'S' THEN
                       CASE WHEN UFS.CODPAIS = NVL((SELECT INTEIRO FROM TSIPAR WHERE CHAVE = 'CODPAISBRASIL'), 55) THEN
                                 CASE WHEN CFO.RECBRUTAEFDBLOCOP = 'S' THEN LIV.VLRIPI + LIV.ICMSRETENCAO
                                      ELSE (LIV.VLRIPI + LIV.ICMSRETENCAO) * (-1) END
                            ELSE CASE WHEN CFO.RECBRUTAEFDBLOCOP = 'S' THEN LIV.VLRCTB ELSE LIV.VLRCTB * (-1) END END
                  ELSE 0 END AS EXCLUSAOBRUTAATIV
            ,CASE WHEN NVL(PRO.CODCPRB, 0) > 0 THEN CPRB.CODRECOLHIMENTO ELSE RNT.CODREC END AS CODREC
            FROM TGFLIV LIV
                INNER JOIN (SELECT NUNOTA, CODOBRA, DTNEG, CODMAQ, NROREDZ FROM TGFCAB) CAB ON CAB.NUNOTA = LIV.NUNOTA
                INNER JOIN (SELECT NUNOTA, SEQUENCIA, CODPROD, VLRTOT, VLRDESC, USOPROD FROM TGFITE) ITE ON ITE.NUNOTA = LIV.NUNOTA AND ITE.SEQUENCIA = LIV.SEQUENCIA
                INNER JOIN (SELECT CODPROD, DESCRPROD, NCM, ENQREINTEGRA, CODCPRB, CODATIVREINTEGRA, CODLST, USOPROD, CNAE FROM TGFPRO) PRO ON PRO.CODPROD = ITE.CODPROD
                INNER JOIN TGFCFO CFO ON CFO.CODCFO = LIV.CODCFO
                INNER JOIN (SELECT CODEMP, EMPADMPUBDIR, CODEMPMATRIZEFD FROM TGFEMP) EMP ON EMP.CODEMP = LIV.CODEMP
                INNER JOIN (SELECT CODEMP, RAZAOSOCIAL, NOMEFANTASIA, CGC FROM TSIEMP) EMPC ON EMPC.CODEMP = EMP.CODEMP
                INNER JOIN (SELECT CODPARC, NOMEPARC, CODCID FROM TGFPAR) PAR ON PAR.CODPARC = LIV.CODPARC
                INNER JOIN TSICID CID ON CID.CODCID = PAR.CODCID
                INNER JOIN TSIUFS UFS ON UFS.CODUF = CID.UF
                LEFT JOIN TGFRNT RNT ON LIV.CODEMP = RNT.CODEMP AND LIV.DHMOV BETWEEN RNT.DTINI AND NVL(RNT.DTFIM, SYSDATE)
                LEFT JOIN TGFCPRB CPRB ON CPRB.CODCPRB = PRO.CODCPRB
                LEFT JOIN TGFDIN DIN ON DIN.NUNOTA = ITE.NUNOTA AND DIN.SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 4 AND DIN.CODINC = 2
            WHERE LIV.ORIGEM IN ('E','A','D') 
                AND ((PRO.USOPROD <> 'S') OR (LIV.CODMODDOC IN (7, 8, 9, 10, 11, 26, 27, 57, 67)))
                AND (CPRB.CODCPRB IS NOT NULL OR RNT.CODEMP IS NOT NULL)
                AND CFO.RECBRUTAEFDBLOCOP <> 'N'
            UNION ALL
            SELECT 
             CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMP.CODEMP
                  WHEN NVL(EMP.CODEMPMATRIZEFD, 0) > 0 THEN EMP.CODEMPMATRIZEFD
                  ELSE EMP.CODEMP 
             END AS CODEMP
            ,TRUNC(LIS.DTDOC, 'MM') AS DTREF
            ,CASE WHEN LENGTH(EMPC.CGC) = 14 
                  THEN '1' 
                  ELSE '2' 
             END AS TPINSC
            ,CASE WHEN LENGTH(EMPC.CGC) = 14 
                  THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
                            THEN EMPC.CGC
                            ELSE SUBSTR(EMPC.CGC,1,8)
                       END
                  ELSE EMPC.CGC
             END AS NRINSC
            ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN 4 ELSE 1 END AS TPINSCESTAB
            ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN CAB.CODOBRA ELSE EMPC.CGC END AS NRINSCESTAB
            ,CASE WHEN ((PRO.CNAE = 0) OR (PRO.CNAE IS NULL)) THEN CAST(RNT.CNAE AS VARCHAR(10))
                  ELSE CAST(PRO.CNAE AS VARCHAR(10)) END AS CODATIVIDADE
            ,PRO.ENQREINTEGRA
            ,NVL(PRO.CODCPRB, PRO.CODATIVREINTEGRA) AS CODATIVREINTEGRA
            ,PRO.USOPROD
            ,RNT.CNAE
            ,CASE WHEN NVL(PRO.CODCPRB, 0) > 0 THEN CPRB.ALIQUOTA ELSE RNT.ALIQCONT END AS ALIQDESONERACAO
            ,RNT.CODCTACTB AS CODCTA
            ,(SELECT CTACTB FROM TCBPLA PLA WHERE PLA.CODCTACTB = RNT.CODCTACTB) AS CTACTB
            ,LIS.DTDOC
            ,LIS.NUNOTA
            ,SNK_GET_IDPROCESSO_IMP_EFD(8, 
                                        LIS.CODEMP, 
                                        LIS.CODPARC, 
                                        NULL, 
                                        CASE WHEN DIN.CODLST IS NULL THEN PRO.CODLST ELSE DIN.CODLST END, 
                                        LIS.DTDOC,
                                        'N') AS NUPROCESSO_INSS
            ,SNK_GET_IDPROCESSO_IMP_EFD(8, 
                                        LIS.CODEMP, 
                                        LIS.CODPARC, 
                                        NULL, 
                                        CASE WHEN DIN.CODLST IS NULL THEN PRO.CODLST ELSE DIN.CODLST END, 
                                        LIS.DTDOC,
                                        'S') AS SEQPROCESSO_INSS
            ,LIS.VLRCTB AS RECEITABRUTAESTAB
            ,CASE WHEN PRO.ENQREINTEGRA = 'S' THEN LIS.VLRCTB ELSE 0 END AS RECEITABRUTAATIV
            ,0 AS ABATIMENTOBRUTOATIV
            ,CASE WHEN ((PRO.ENQREINTEGRA = 'S') AND (UFS.CODPAIS <> NVL((SELECT INTEIRO FROM TSIPAR WHERE CHAVE = 'CODPAISBRASIL'), 55))) THEN
                            LIS.VLRCTB ELSE 0 END AS EXCLUSAOBRUTAATIV
            ,CASE WHEN NVL(PRO.CODCPRB, 0) > 0 THEN CPRB.CODRECOLHIMENTO ELSE RNT.CODREC END AS CODREC 
            FROM TGFLIS LIS
                INNER JOIN (SELECT NUNOTA, CODOBRA, DTNEG, CODMAQ, NROREDZ FROM TGFCAB) CAB ON CAB.NUNOTA = LIS.NUNOTA
                INNER JOIN (SELECT NUNOTA, SEQUENCIA, CODPROD, VLRTOT, VLRDESC, USOPROD FROM TGFITE) ITE ON ITE.NUNOTA = LIS.NUNOTA AND ITE.SEQUENCIA = LIS.SEQUENCIA
                INNER JOIN (SELECT CODPROD, DESCRPROD, NCM, ENQREINTEGRA, CODCPRB, CODATIVREINTEGRA, CODLST, USOPROD, CNAE FROM TGFPRO) PRO ON PRO.CODPROD = ITE.CODPROD
                INNER JOIN (SELECT CODEMP, EMPADMPUBDIR, CODEMPMATRIZEFD FROM TGFEMP) EMP ON EMP.CODEMP = LIS.CODEMP
                INNER JOIN (SELECT CODEMP, RAZAOSOCIAL, NOMEFANTASIA, CGC FROM TSIEMP) EMPC ON EMPC.CODEMP = EMP.CODEMP
                INNER JOIN (SELECT CODPARC, NOMEPARC, CODCID FROM TGFPAR) PAR ON PAR.CODPARC = LIS.CODPARC
                INNER JOIN TSICID CID ON CID.CODCID = PAR.CODCID
                INNER JOIN TSIUFS UFS ON UFS.CODUF = CID.UF
                LEFT JOIN TGFRNT RNT ON LIS.CODEMP = RNT.CODEMP AND LIS.DTMOV BETWEEN RNT.DTINI AND NVL(RNT.DTFIM, SYSDATE)
                LEFT JOIN TGFCPRB CPRB ON CPRB.CODCPRB = PRO.CODCPRB
                LEFT JOIN TGFDIN DIN ON DIN.NUNOTA = ITE.NUNOTA AND DIN.SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 4 AND DIN.CODINC = 2
            WHERE LIS.ORIGEM = 'E' 
                AND PRO.USOPROD = 'S'
                AND (CPRB.CODCPRB IS NOT NULL OR RNT.CODEMP IS NOT NULL)
            UNION ALL
            SELECT 
             CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMP.CODEMP
                  WHEN NVL(EMP.CODEMPMATRIZEFD, 0) > 0 THEN EMP.CODEMPMATRIZEFD
                  ELSE EMP.CODEMP 
             END AS CODEMP
            ,TRUNC(LIVZ.DTDOC, 'MM') AS DTREF
            ,CASE WHEN LENGTH(EMPC.CGC) = 14 
                  THEN '1' 
                  ELSE '2' 
             END AS TPINSC
            ,CASE WHEN LENGTH(EMPC.CGC) = 14 
                  THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
                            THEN EMPC.CGC
                            ELSE SUBSTR(EMPC.CGC,1,8)
                       END
                  ELSE EMPC.CGC
             END AS NRINSC
            ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN 4 ELSE 1 END AS TPINSCESTAB
            ,CASE WHEN CAB.CODOBRA IS NOT NULL THEN CAB.CODOBRA ELSE EMPC.CGC END AS NRINSCESTAB
            ,CAST(PRO.NCM AS VARCHAR(10)) AS CODATIVIDADE
            ,PRO.ENQREINTEGRA
            ,PRO.CODATIVREINTEGRA
            ,PRO.USOPROD
            ,RNT.CNAE
            ,CASE WHEN NVL(PRO.CODCPRB, 0) > 0 THEN CPRB.ALIQUOTA ELSE RNT.ALIQCONT END AS ALIQDESONERACAO
            ,RNT.CODCTACTB AS CODCTA
            ,(SELECT CTACTB FROM TCBPLA PLA WHERE RNT.CODCTACTB > 0 AND PLA.CODCTACTB = RNT.CODCTACTB) AS CTACTB
            ,LIVZ.DTDOC
            ,LIVZ.NUNOTA
            ,SNK_GET_IDPROCESSO_IMP_EFD(8, 
                                        LIVZ.CODEMP, 
                                        LIVZ.CODPARC, 
                                        CASE WHEN ITE.USOPROD = 'S' THEN NULL ELSE ITE.CODPROD END, 
                                        CASE WHEN ITE.USOPROD <> 'S' THEN NULL WHEN DIN.CODLST IS NULL THEN PRO.CODLST ELSE DIN.CODLST END, 
                                        LIVZ.DTDOC,
                                        'N') AS NUPROCESSO_INSS
            ,SNK_GET_IDPROCESSO_IMP_EFD(8, 
                                        LIVZ.CODEMP, 
                                        LIVZ.CODPARC, 
                                        CASE WHEN ITE.USOPROD = 'S' THEN NULL ELSE ITE.CODPROD END, 
                                        CASE WHEN ITE.USOPROD <> 'S' THEN NULL WHEN DIN.CODLST IS NULL THEN PRO.CODLST ELSE DIN.CODLST END, 
                                        LIVZ.DTDOC,
                                        'S') AS SEQPROCESSO_INSS
            ,CASE WHEN CFO.RECBRUTAEFDBLOCOP = 'S' THEN (ITE.VLRTOT - ITE.VLRDESC) ELSE 0 END AS RECEITABRUTAESTAB
            ,CASE WHEN PRO.ENQREINTEGRA = 'S' THEN
                       CASE WHEN CFO.RECBRUTAEFDBLOCOP = 'S' THEN (ITE.VLRTOT - ITE.VLRDESC) ELSE 0 END
                  ELSE 0 END AS RECEITABRUTAATIV
            ,CASE WHEN PRO.ENQREINTEGRA = 'S' THEN
                       CASE WHEN CFO.RECBRUTAEFDBLOCOP = 'S' THEN 0 ELSE (ITE.VLRTOT - ITE.VLRDESC) END
                  ELSE 0 END AS ABATIMENTOBRUTOATIV
            ,0 AS EXCLUSAOBRUTAATIV
            ,CASE WHEN NVL(PRO.CODCPRB, 0) > 0 THEN CPRB.CODRECOLHIMENTO ELSE RNT.CODREC END AS CODREC 
            FROM TGFLIV LIVZ
                INNER JOIN (SELECT NUNOTA, CODOBRA, DTNEG, CODMAQ, NROREDZ, CODPARC FROM TGFCAB) CAB ON CAB.DTNEG = LIVZ.DTDOC
                INNER JOIN (SELECT NUNOTA, SEQUENCIA, CODPROD, VLRTOT, VLRDESC, USOPROD FROM TGFITE) ITE ON ITE.NUNOTA = CAB.NUNOTA
                INNER JOIN TGFECF ECF ON ECF.NUECF = LIVZ.NUNOTA AND ECF.CODMAQ = CAB.CODMAQ AND ECF.CONTZ = CAB.NROREDZ
                INNER JOIN (SELECT CODPROD, DESCRPROD, NCM, ENQREINTEGRA, CODCPRB, CODATIVREINTEGRA, CODLST, USOPROD, CNAE FROM TGFPRO) PRO ON PRO.CODPROD = ITE.CODPROD
                INNER JOIN TGFCFO CFO ON CFO.CODCFO = LIVZ.CODCFO
                INNER JOIN (SELECT CODEMP, EMPADMPUBDIR, CODEMPMATRIZEFD FROM TGFEMP) EMP ON EMP.CODEMP = LIVZ.CODEMP
                INNER JOIN (SELECT CODEMP, RAZAOSOCIAL, NOMEFANTASIA, CGC FROM TSIEMP) EMPC ON EMPC.CODEMP = EMP.CODEMP
                INNER JOIN (SELECT CODPARC, NOMEPARC, CODCID FROM TGFPAR) PAR ON PAR.CODPARC = CAB.CODPARC
                INNER JOIN TSICID CID ON CID.CODCID = PAR.CODCID
                INNER JOIN TSIUFS UFS ON UFS.CODUF = CID.UF
                LEFT JOIN TGFRNT RNT ON LIVZ.CODEMP = RNT.CODEMP AND LIVZ.DHMOV BETWEEN RNT.DTINI AND NVL(RNT.DTFIM, SYSDATE)
                LEFT JOIN TGFCPRB CPRB ON CPRB.CODCPRB = PRO.CODCPRB
                LEFT JOIN TGFDIN DIN ON DIN.NUNOTA = ITE.NUNOTA AND DIN.SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 4 AND CODINC = 2
            WHERE LIVZ.ORIGEM = 'Z'
                AND LIVZ.SEQUENCIA = (SELECT MIN(LIV2.SEQUENCIA)
                                      FROM TGFLIV LIV2
                                      WHERE LIV2.CODEMP = LIVZ.CODEMP
                                          AND LIV2.DHMOV = LIVZ.DHMOV
                                          AND LIV2.ORIGEM = 'Z'
                                          AND LIV2.NUNOTA = LIVZ.NUNOTA) 
                AND PRO.USOPROD NOT IN ('S', 'D', 'M')
                AND CFO.RECBRUTAEFDBLOCOP <> 'N'
        ) LID
        GROUP BY 
         LID.CODEMP
        ,LID.DTREF
        ,LID.TPINSC
        ,LID.NRINSC
        ,LID.TPINSCESTAB
        ,LID.NRINSCESTAB
        ,LID.CODATIVIDADE
        ,LID.ENQREINTEGRA
        ,LID.CODATIVREINTEGRA
        ,LID.USOPROD
        ,LID.CNAE
        ,LID.ALIQDESONERACAO
        ,LID.CODCTA
        ,LID.CTACTB
        ,LID.DTDOC
        ,LID.NUNOTA
        ,LID.NUPROCESSO_INSS
        ,LID.SEQPROCESSO_INSS
        ,LID.CODREC
    ) TAB
)TABX
    LEFT JOIN TRIPISET ISET_INSS ON ISET_INSS.NUPROCESSO = TABX.NUPROCESSO_INSS AND ISET_INSS.SEQUENCIA = TABX.SEQPROCESSO_INSS
GROUP BY 
 TABX.CODEMP
,TABX.DTREF
,TABX.TPINSC
,TABX.NRINSC
,TABX.TPINSCESTAB
,TABX.NRINSCESTAB
,TABX.CODATIVECON
,TABX.NUNOTA
,TABX.NUPROCESSO_INSS
,TABX.SEQPROCESSO_INSS
/
 
 
 
/*
Conexao   : ORCL
NomeObjeto: UPDATE TSIPAR INTEIRO
TipoObjeto: TABLE
NomeTabela: 
Executar  : SEMPRE
Ocorrencia: 4210011
FullVersao: Sim
*/
 
 
UPDATE TSIPAR SET INTEIRO = 4210010 WHERE CHAVE = 'VERSAOATUALDB'
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 30/04/2018 09:38:16
Num.Script: 54558-0-0
Nro. O.S. : 1177973
Nome      : Alterar - TRG_UPD_TGFCAB_REINF2 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - TRG_UPD_TGFCAB_REINF2 
NomeObjeto: TRG_UPD_TGFCAB_REINF2 
TipoObjeto: TRIGGER
NomeTabela: TFGCAB
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_UPD_TGFCAB_REINF2 
AFTER UPDATE ON TGFCAB
DECLARE P_COUNT         NUMBER(10) := 0;
        queSql          VARCHAR2(4000);
        queUpd          VARCHAR2(4000);
BEGIN
    SELECT COUNT(1) INTO P_COUNT
    FROM TBTEMP_REINF;

    IF P_COUNT = 0 THEN
        RETURN;
    END IF;

    FOR CUR IN (SELECT (SELECT NOMETAB FROM TRIMON WHERE NOMETABPAI IS NULL AND NOMEEVENTO = M.NOMEEVENTO) AS NOMETAB,
                        NOMEVIEW
                FROM TRIMON M
                WHERE VIEWDETALHE = 'S')
    LOOP
        queSql:= '  SELECT COUNT(1)
                    FROM '||CUR.NOMETAB||' P
                    WHERE EXISTS (SELECT 1
                                  FROM TBTEMP_REINF T
                                      INNER JOIN '||CUR.NOMEVIEW||' V ON V.NUNOTA = T.NUNOTA AND
                                                                         V.CODEMP = T.CODEMP AND
                                                                         V.DTREF = T.DTREF
                                  WHERE V.CODEMP = P.CODEMP
                                     AND V.DTREF = P.DTREF
                                     AND V.CHAVE = P.CHAVE) 
                       AND EXISTS (SELECT 1
                                   FROM TRICAB CAB 
                                   WHERE CAB.CODEMP = P.CODEMP
                                      AND CAB.DTREF = P.DTREF
                                      AND CAB.TPAMB = P.TPAMB
                                      AND CAB.SEQUENCIAATUAL = P.SEQUENCIA)
                       AND P.CONTROLE = ''I''';

        EXECUTE IMMEDIATE queSql INTO P_COUNT;

        IF P_COUNT > 0 THEN 
            queUpd := ' UPDATE '||CUR.NOMETAB||'
                        SET CONTROLE = ''A''
                        WHERE EXISTS (SELECT 1
                                      FROM TBTEMP_REINF T
                                          INNER JOIN '||CUR.NOMEVIEW||' V ON V.NUNOTA = T.NUNOTA AND
                                                                        V.CODEMP = T.CODEMP AND
                                                                        V.DTREF = T.DTREF 
                                      WHERE V.CODEMP = '||CUR.NOMETAB||'.CODEMP
                                         AND V.DTREF = '||CUR.NOMETAB||'.DTREF
                                         AND V.CHAVE = '||CUR.NOMETAB||'.CHAVE) 
                           AND EXISTS (SELECT 1
                                       FROM TRICAB CAB 
                                       WHERE CAB.CODEMP = '||CUR.NOMETAB||'.CODEMP
                                          AND CAB.DTREF = '||CUR.NOMETAB||'.DTREF
                                          AND CAB.TPAMB = '||CUR.NOMETAB||'.TPAMB
                                          AND CAB.SEQUENCIAATUAL = '||CUR.NOMETAB||'.SEQUENCIA)
                           AND '||CUR.NOMETAB||'.CONTROLE = ''I''';     

            EXECUTE IMMEDIATE queUpd;   
        END IF; 

        queSql:= '  SELECT COUNT(1)
                    FROM TRICAB CAB
                    WHERE EXISTS (SELECT 1
                                  FROM TBTEMP_REINF T
                                      INNER JOIN '||CUR.NOMEVIEW||' V ON T.NUNOTA = V.NUNOTA
                                  WHERE V.CODEMP = CAB.CODEMP
                                     AND V.DTREF = CAB.DTREF)
                       AND NOT EXISTS (SELECT 1
                                       FROM '||CUR.NOMETAB||' P
                                       WHERE P.CODEMP = CAB.CODEMP
                                          AND P.DTREF = CAB.DTREF
                                          AND P.TPAMB = CAB.TPAMB
                                          AND P.SEQUENCIA = CAB.SEQUENCIAATUAL)'; 

        EXECUTE IMMEDIATE queSql INTO P_COUNT;

        IF P_COUNT > 0 THEN
            queUpd := ' UPDATE TRICAB
                        SET STATUS = CASE WHEN STATUS = ''7'' THEN ''5'' ELSE ''10'' END
                        WHERE EXISTS (SELECT 1
                                      FROM TBTEMP_REINF T
                                          INNER JOIN '||CUR.NOMEVIEW||' V ON V.NUNOTA = T.NUNOTA AND
                                                                             V.CODEMP = T.CODEMP AND
                                                                             V.DTREF = T.DTREF
                                      WHERE V.CODEMP = TRICAB.CODEMP
                                         AND V.DTREF = TRICAB.DTREF)
                           AND NOT EXISTS (SELECT 1
                                           FROM '||CUR.NOMETAB||' P
                                           WHERE P.CODEMP = TRICAB.CODEMP
                                              AND P.DTREF = TRICAB.DTREF
                                              AND P.TPAMB = TRICAB.TPAMB
                                              AND P.SEQUENCIA = TRICAB.SEQUENCIAATUAL
                                              AND P.CHAVE = (SELECT CHAVE
                                                             FROM TBTEMP_REINF T
                                                                INNER JOIN '||CUR.NOMEVIEW||' V ON V.NUNOTA = T.NUNOTA AND
                                                                             V.CODEMP = T.CODEMP AND
                                                                             V.DTREF = T.DTREF
                                                             WHERE V.CODEMP = P.CODEMP
                                                                AND V.DTREF = P.DTREF))'; 

            EXECUTE IMMEDIATE queUpd;
        END IF;
    END LOOP;

    DELETE TBTEMP_REINF;
END;
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 30/04/2018 09:38:16
Num.Script: 54559-0-1000
Nro. O.S. : 1177973
Nome      : INSERE - THOOBJ - 5455800
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_UPD_TGFCAB_REINF2
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210011
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_UPD_TGFCAB_REINF2' NOMEOBJ, 54558 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '100f4f620829b6215b96eb3b60b43cca' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_UPD_TGFCAB_REINF2' and THO.hashcode = '100f4f620829b6215b96eb3b60b43cca')
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 08/05/2018 15:17:16
Num.Script: 54578-0-0
Nro. O.S. : 1178708
Nome      : Alterar - SNK_CLEAR_ROW_PENDENTE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - SNK_CLEAR_ROW_PENDENTE
NomeObjeto: SNK_CLEAR_ROW_PENDENTE
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_CLEAR_ROW_PENDENTE(P_NOMETAB               VARCHAR2,
                                                   P_CODEMPMATRIZ          NUMBER,
                                                   P_DTREF                 DATE,
                                                   P_TPAMB                 CHAR,
                                                   P_SEQUENCIA OUT         NUMBER)
AS
    queSql      VARCHAR2(4000) := ' ';
BEGIN
    queSql := ' SELECT NVL(MAX(SEQUENCIA), 0) '||  
              ' FROM ' || P_NOMETAB || 
              ' WHERE CODEMP = :CODEMP '||
              '  AND DTREF = :DTREF '||
              '  AND TPAMB = :TPAMB '||
              '  AND STATUS = ''P''';

     EXECUTE IMMEDIATE queSql INTO P_SEQUENCIA USING P_CODEMPMATRIZ, P_DTREF, P_TPAMB;

     IF P_SEQUENCIA > 0 THEN /* SE EXISTE STATUS IGUAL A 'P' PODEMOS DELETAR, JA QUE MANDAMOS TODAS AS INFORMACOES DE UMA SO VEZ! */
        FOR CUR_DEL IN (SELECT NOMETAB
                        FROM TFPMON
                        WHERE NOMEEVEVENTOPAI IS NULL 
                          AND TIPO IN ('C', 'M')) LOOP
           queSql := ' DELETE FROM ' || CUR_DEL.NOMETAB || '
                       WHERE CODEMP = :CODEMP
                       AND DTREF = :DTREF
                       AND TPAMB = :TPAMB
                       AND SEQUENCIA = :SEQUENCIA';

           EXECUTE IMMEDIATE queSql USING P_CODEMPMATRIZ, P_DTREF, P_TPAMB, P_SEQUENCIA;
        END LOOP;
     END IF;
END;
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 08/05/2018 15:17:17
Num.Script: 54579-0-1000
Nro. O.S. : 1178708
Nome      : INSERE - THOOBJ - 5457800
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_CLEAR_ROW_PENDENTE
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210011
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_CLEAR_ROW_PENDENTE' NOMEOBJ, 54578 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, '65501d3b3643a68b3a024af30aa20e29' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_CLEAR_ROW_PENDENTE' and THO.hashcode = '65501d3b3643a68b3a024af30aa20e29')
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 08/05/2018 15:17:16
Num.Script: 54580-0-0
Nro. O.S. : 1178708
Nome      : Alterar - SNK_GET_VALID_ALTER_ESOCIAL
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - SNK_GET_VALID_ALTER_ESOCIAL
NomeObjeto: SNK_GET_VALID_ALTER_ESOCIAL
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_GET_VALID_ALTER_ESOCIAL(P_EVENTO            VARCHAR2,
                                                        P_COLUNAS_PADRAO    VARCHAR2,
                                                        P_CODEMPMATRIZ      NUMBER,
                                                        P_DTREF             DATE,
                                                        P_SEQUENCIA         NUMBER,
                                                        P_TPAMB             CHAR,
                                                        P_NOMETAB_PAI       VARCHAR2 := NULL,
                                                        P_NOMETAB           VARCHAR2,
                                                        P_NOMEVIEW          VARCHAR2,
                                                        P_TIPO              CHAR)
IS
   TYPE CURTYPE        IS REF CURSOR;
   CURVAL              CURTYPE;
   P_CONDITION         VARCHAR2(4000);
   queSql              VARCHAR2(4000);
   queUpd              VARCHAR2(4000);
   P_RESULT_QUERY      NUMBER;
   P_TABLE_PAI         VARCHAR2(100);
   P_CHAVES            VARCHAR2(4000);
   P_CHAVES_ALT        VARCHAR2(4000);
   P_CHAVE             VARCHAR2(50);
   P_VALIDACAO         VARCHAR2(50);
   P_NOMETAB_UTIL      VARCHAR2(100);
   P_COL_PAD_FILHOS    VARCHAR2(100) := 'CODEMP, DTREF, CHAVE, SEQUENCIA, TPAMB';
   P_FILTRO_FILHOS     VARCHAR2(4000);
   P_COUNT             NUMBER(10);
   P_DTLOG             DATE;
   P_SEQLOG            NUMBER(10);
   P_MSG               VARCHAR2(4000);
BEGIN
   
    P_CHAVES := NULL;
    P_CHAVES_ALT := NULL;

    IF P_NOMETAB = 'TFPS2200' THEN
        P_NOMETAB_UTIL := 'TFPS2200';
        INSERT INTO TFPVAES (CHAVE, VALIDACAO, DTREF, SEQUENCIA, CONTROLE)
        SELECT CHAVE, VALIDACAO, DTREF, SEQUENCIA, CONTROLE
                      FROM ( SELECT O.CHAVE
                                  , CASE WHEN N.CODEMP IS NULL AND O.ACAO <> 'E' THEN 'E'
                                         WHEN (N.CODEMP IS NULL AND O.ACAO = 'E') OR (NVL(N.INFOCOTA, ' ') = NVL(O.INFOCOTA, ' ') AND NVL(N.OBSERVACAO, ' ') = NVL(O.OBSERVACAO, ' ') AND NVL(N.TRABAPOSENT, ' ') = NVL(O.TRABAPOSENT, ' ') AND 
                                                                                        NVL(N.FONEPRINC, ' ') = NVL(O.FONEPRINC, ' ') AND NVL(N.FONEALTERNAT, ' ') = NVL(O.FONEALTERNAT, ' ') AND 
                                                                                        NVL(N.EMAILPRINC, ' ') = NVL(O.EMAILPRINC, ' ') AND NVL(N.MATRICULA, ' ') = NVL(O.MATRICULA, ' ') AND NVL(N.TPREGTRAB, 0) = NVL(O.TPREGTRAB, 0) AND 
                                                                                        NVL(N.TPREGPREV, 0) = NVL(O.TPREGPREV, 0) AND NVL(N.NRRECINFPRELIM, ' ') = NVL(O.NRRECINFPRELIM, ' ') AND NVL(N.CADINI, ' ') = NVL(O.CADINI, ' ') AND 
                                                                                        NVL(N.DTADM, SYSDATE) = NVL(O.DTADM, SYSDATE) AND NVL(N.TPADMISSAO, 0) = NVL(O.TPADMISSAO, 0) AND NVL(N.INDADMISSAO, 0) = NVL(O.INDADMISSAO, 0) AND 
                                                                                        NVL(N.TPREGJOR, 0) = NVL(O.TPREGJOR, 0) AND NVL(N.NATATIVIDADE, 0) = NVL(O.NATATIVIDADE, 0) AND NVL(N.DTBASE, 0) = NVL(O.DTBASE, 0) AND 
                                                                                        NVL(N.CNPJSINDCATEGPROF, ' ') = NVL(O.CNPJSINDCATEGPROF, ' ') AND NVL(N.OPCFGTS, 0) = NVL(O.OPCFGTS, 0) AND 
                                                                                        NVL(N.DTOPCFGTS, SYSDATE) = NVL(O.DTOPCFGTS, SYSDATE) AND NVL(N.HIPLEG, 0) = NVL(O.HIPLEG, 0) AND NVL(N.JUSTCONTR, ' ') = NVL(O.JUSTCONTR, ' ') AND 
                                                                                        NVL(N.TPINCLCONTR, 0) = NVL(O.TPINCLCONTR, 0) AND NVL(N.TPINSCIDETOMADORSERV, 0) = NVL(O.TPINSCIDETOMADORSERV, 0) AND 
                                                                                        NVL(N.NRINSCIDETOMADORSERV, ' ') = NVL(O.NRINSCIDETOMADORSERV, ' ') AND NVL(N.TPINSCIDEESTABVINC, 0) = NVL(O.TPINSCIDEESTABVINC, 0) AND 
                                                                                        NVL(N.NRINSCIDEESTABVINC, ' ') = NVL(O.NRINSCIDEESTABVINC, ' ') AND NVL(N.CPFTRABSUBST, ' ') = NVL(O.CPFTRABSUBST, ' ') AND 
                                                                                        NVL(N.INDPROVIM, 0) = NVL(O.INDPROVIM, 0) AND NVL(N.TPPROV, 0) = NVL(O.TPPROV, 0) AND NVL(N.DTNOMEACAO, SYSDATE) = NVL(O.DTNOMEACAO, SYSDATE) AND 
                                                                                        NVL(N.DTPOSSE, SYSDATE) = NVL(O.DTPOSSE, SYSDATE) AND NVL(N.DTEXERCICIO, SYSDATE) = NVL(O.DTEXERCICIO, SYSDATE) AND 
                                                                                        NVL(N.TPPLANRP, 0) = NVL(O.TPPLANRP, 0) AND NVL(N.NRPROCJUDINFODECJUD, ' ') = NVL(O.NRPROCJUDINFODECJUD, ' ') AND 
                                                                                        NVL(N.CODCARGO, ' ') = NVL(O.CODCARGO, ' ') AND NVL(N.CODFUNCAO, ' ') = NVL(O.CODFUNCAO, ' ') AND NVL(N.CODCATEG, 0) = NVL(O.CODCATEG, 0) AND 
                                                                                        NVL(N.CODCATEG2, 0) = NVL(O.CODCATEG2, 0) AND NVL(N.CODCARREIRA, ' ') = NVL(O.CODCARREIRA, ' ') AND 
                                                                                        NVL(N.DTINGRCARR, SYSDATE) = NVL(O.DTINGRCARR, SYSDATE) AND NVL(N.VRSALFX, 0) = NVL(O.VRSALFX, 0) AND NVL(N.UNDSALFIXO, 0) = NVL(O.UNDSALFIXO, 0) AND 
                                                                                        NVL(N.DSCSALVAR, ' ') = NVL(O.DSCSALVAR, ' ') AND NVL(N.TPCONTR, 0) = NVL(O.TPCONTR, 0) AND NVL(N.DTTERM, SYSDATE) = NVL(O.DTTERM, SYSDATE) AND 
                                                                                        NVL(N.CLAUASSEG, ' ') = NVL(O.CLAUASSEG, ' ') AND NVL(N.TPINSCLOCALTRABGERAL, 0) = NVL(O.TPINSCLOCALTRABGERAL, 0) AND 
                                                                                        NVL(N.NRINSCLOCALTRABGERAL, ' ') = NVL(O.NRINSCLOCALTRABGERAL, ' ') AND NVL(N.TPLOGRADLOCALTRABDOM, ' ') = NVL(O.TPLOGRADLOCALTRABDOM, ' ') AND 
                                                                                        NVL(N.DSCLOGRADLOCALTRABDOM, ' ') = NVL(O.DSCLOGRADLOCALTRABDOM, ' ') AND NVL(N.NRLOGRADLOCALTRABDOM, ' ') = NVL(O.NRLOGRADLOCALTRABDOM, ' ') AND 
                                                                                        NVL(N.COMPLEMENTOLOCALTRABDOM, ' ') = NVL(O.COMPLEMENTOLOCALTRABDOM, ' ') AND NVL(N.BAIRROLOCALTRABDOM, ' ') = NVL(O.BAIRROLOCALTRABDOM, ' ') AND 
                                                                                        NVL(N.CEPLOCALTRABDOM, ' ') = NVL(O.CEPLOCALTRABDOM, ' ') AND NVL(N.CODMUNICLOCALTRABDOM, 0) = NVL(O.CODMUNICLOCALTRABDOM, 0) AND 
                                                                                        NVL(N.UFLOCALTRABDOM, ' ') = NVL(O.UFLOCALTRABDOM, ' ') AND NVL(N.QTDHRSSEM, 0) = NVL(O.QTDHRSSEM, 0) AND NVL(N.TPJORNADA, 0) = 
                                                                                        NVL(O.TPJORNADA, 0) AND NVL(N.DSCTPJORN, ' ') = NVL(O.DSCTPJORN, ' ') AND NVL(N.TMPPARC, ' ') = NVL(O.TMPPARC, ' ') AND 
                                                                                        NVL(N.CNPJSINDTRAB, ' ') = NVL(O.CNPJSINDTRAB, ' ') AND NVL(N.NRPROCJUDALVARAJUDICIAL, ' ') = NVL(O.NRPROCJUDALVARAJUDICIAL, ' ') AND 
                                                                                        NVL(N.CNPJEMPREGANT, ' ') = NVL(O.CNPJEMPREGANT, ' ') AND NVL(N.MATRICANT, ' ') = NVL(O.MATRICANT, ' ') AND 
                                                                                        NVL(N.DTINIVINCULO, SYSDATE) = NVL(O.DTINIVINCULO, SYSDATE) AND NVL(N.OBSERVACAOSUCESSAOVINC, ' ') = NVL(O.OBSERVACAOSUCESSAOVINC, ' ') AND 
                                                                                        NVL(N.DTINIAFAST, SYSDATE) = NVL(O.DTINIAFAST, SYSDATE) AND NVL(N.CODMOTAFAST, ' ') = NVL(O.CODMOTAFAST, ' ') AND 
                                                                                        NVL(N.DTDESLIG, SYSDATE) = NVL(O.DTDESLIG, SYSDATE) AND N.CHAVE = O.CHAVE AND NVL(N.DTEXPEDRIC, SYSDATE) = NVL(O.DTEXPEDRIC, SYSDATE) AND 
                                                                                        NVL(N.TPINSCEMPREGADOR, 0) = NVL(O.TPINSCEMPREGADOR, 0) AND NVL(N.NRINSCEMPREGADOR, ' ') = NVL(O.NRINSCEMPREGADOR, ' ') AND 
                                                                                        NVL(N.CPFTRAB, ' ') = NVL(O.CPFTRAB, ' ') AND NVL(N.NISTRAB, ' ') = NVL(O.NISTRAB, ' ') AND NVL(N.NMTRAB, ' ') = NVL(O.NMTRAB, ' ') AND 
                                                                                        NVL(N.SEXO, ' ') = NVL(O.SEXO, ' ') AND NVL(N.RACACOR, 0) = NVL(O.RACACOR, 0) AND NVL(N.ESTCIV, 0) = NVL(O.ESTCIV, 0) AND 
                                                                                        NVL(N.GRAUINSTR, ' ') = NVL(O.GRAUINSTR, ' ') AND NVL(N.INDPRIEMPR, ' ') = NVL(O.INDPRIEMPR, ' ') AND NVL(N.NMSOC, ' ') = NVL(O.NMSOC, ' ') AND 
                                                                                        NVL(N.DTNASCTONASCIMENTO, SYSDATE) = NVL(O.DTNASCTONASCIMENTO, SYSDATE) AND NVL(N.CODMUNICNASCIMENTO, 0) = NVL(O.CODMUNICNASCIMENTO, 0) AND 
                                                                                        NVL(N.UFNASCIMENTO, ' ') = NVL(O.UFNASCIMENTO, ' ') AND NVL(N.PAISNASCTONASCIMENTO, ' ') = NVL(O.PAISNASCTONASCIMENTO, ' ') AND 
                                                                                        NVL(N.PAISNACNASCIMENTO, ' ') = NVL(O.PAISNACNASCIMENTO, ' ') AND NVL(N.NMMAENASCIMENTO, ' ') = NVL(O.NMMAENASCIMENTO, ' ') AND 
                                                                                        NVL(N.NMPAINASCIMENTO, ' ') = NVL(O.NMPAINASCIMENTO, ' ') AND NVL(N.NRCTPS, ' ') = NVL(O.NRCTPS, ' ') AND 
                                                                                        NVL(N.SERIECTPS, ' ') = NVL(O.SERIECTPS, ' ') AND NVL(N.UFCTPS, ' ') = NVL(O.UFCTPS, ' ') AND NVL(N.NRRIC, ' ') = NVL(O.NRRIC, ' ') AND 
                                                                                        NVL(N.ORGAOEMISSORRIC, ' ') = NVL(O.ORGAOEMISSORRIC, ' ') AND NVL(N.NRRG, ' ') = NVL(O.NRRG, ' ') AND 
                                                                                        NVL(N.ORGAOEMISSORRG, ' ') = NVL(O.ORGAOEMISSORRG, ' ') AND NVL(N.DTEXPEDRG, SYSDATE) = NVL(O.DTEXPEDRG, SYSDATE) AND 
                                                                                        NVL(N.NRRNE, ' ') = NVL(O.NRRNE, ' ') AND NVL(N.ORGAOEMISSORRNE, ' ') = NVL(O.ORGAOEMISSORRNE, ' ') AND 
                                                                                        NVL(N.DTEXPEDRNE, SYSDATE) = NVL(O.DTEXPEDRNE, SYSDATE) AND NVL(N.NROC, ' ') = NVL(O.NROC, ' ') AND 
                                                                                        NVL(N.ORGAOEMISSOROC, ' ') = NVL(O.ORGAOEMISSOROC, ' ') AND NVL(N.DTEXPEDOC, SYSDATE) = NVL(O.DTEXPEDOC, SYSDATE) AND 
                                                                                        NVL(N.DTVALIDOC, SYSDATE) = NVL(O.DTVALIDOC, SYSDATE) AND NVL(N.NRREGCNH, ' ') = NVL(O.NRREGCNH, ' ') AND 
                                                                                        NVL(N.DTEXPEDCNH, SYSDATE) = NVL(O.DTEXPEDCNH, SYSDATE) AND NVL(N.UFCNH, ' ') = NVL(O.UFCNH, ' ') AND 
                                                                                        NVL(N.DTVALIDCNH, SYSDATE) = NVL(O.DTVALIDCNH, SYSDATE) AND NVL(N.DTPRIHAB, SYSDATE) = NVL(O.DTPRIHAB, SYSDATE) AND 
                                                                                        NVL(N.CATEGORIACNH, ' ') = NVL(O.CATEGORIACNH, ' ') AND NVL(N.TPLOGRADBRASIL, ' ') = NVL(O.TPLOGRADBRASIL, ' ') AND 
                                                                                        NVL(N.DSCLOGRADBRASIL, ' ') = NVL(O.DSCLOGRADBRASIL, ' ') AND NVL(N.NRLOGRADBRASIL, ' ') = NVL(O.NRLOGRADBRASIL, ' ') AND 
                                                                                        NVL(N.COMPLEMENTOBRASIL, ' ') = NVL(O.COMPLEMENTOBRASIL, ' ') AND NVL(N.BAIRROBRASIL, ' ') = NVL(O.BAIRROBRASIL, ' ') AND
                                                                                         NVL(N.CEPBRASIL, ' ') = NVL(O.CEPBRASIL, ' ') AND NVL(N.CODMUNICBRASIL, ' ') = NVL(O.CODMUNICBRASIL, ' ') AND 
                                                                                         NVL(N.UFBRASIL, ' ') = NVL(O.UFBRASIL, ' ') AND NVL(N.PAISRESID, ' ') = NVL(O.PAISRESID, ' ') AND 
                                                                                         NVL(N.DSCLOGRADEXTERIOR, ' ') = NVL(O.DSCLOGRADEXTERIOR, ' ') AND NVL(N.NRLOGRADEXTERIOR, ' ') = NVL(O.NRLOGRADEXTERIOR, ' ') AND 
                                                                                         NVL(N.COMPLEMENTOEXTERIOR, ' ') = NVL(O.COMPLEMENTOEXTERIOR, ' ') AND NVL(N.BAIRROEXTERIOR, ' ') = NVL(O.BAIRROEXTERIOR, ' ') AND 
                                                                                         NVL(N.NMCIDEXTERIOR, ' ') = NVL(O.NMCIDEXTERIOR, ' ') AND NVL(N.CODPOSTALEXTERIOR, ' ') = NVL(O.CODPOSTALEXTERIOR, ' ') AND 
                                                                                        NVL(N.DTCHEGADA, SYSDATE) = NVL(O.DTCHEGADA, SYSDATE) AND NVL(N.CLASSTRABESTRANG, 0) = NVL(O.CLASSTRABESTRANG, 0) AND 
                                                                                        NVL(N.CASADOBR, ' ') = NVL(O.CASADOBR, ' ') AND NVL(N.FILHOSBR, ' ') = NVL(O.FILHOSBR, ' ') AND NVL(N.DEFFISICA, ' ') = NVL(O.DEFFISICA, ' ') AND 
                                                                                        NVL(N.DEFVISUAL, ' ') = NVL(O.DEFVISUAL, ' ') AND NVL(N.DEFAUDITIVA, ' ') = NVL(O.DEFAUDITIVA, ' ') AND NVL(N.DEFMENTAL, ' ') = NVL(O.DEFMENTAL, ' ') AND 
                                                                                        NVL(N.DEFINTELECTUAL, ' ') = NVL(O.DEFINTELECTUAL, ' ') AND NVL(N.REABREADAP, ' ') = NVL(O.REABREADAP, ' ')) THEN 'I'
                                         ELSE 'A'
                                    END AS VALIDACAO
                                  , O.DTREF
                                  , O.SEQUENCIA
                                  , O.CONTROLE
                             FROM TFPS2200 O
                                  LEFT JOIN VGF_EVENTO_S2200 N ON O.CODEMP = N.CODEMP AND O.CHAVE = N.CHAVE
                             WHERE O.CODEMP = P_CODEMPMATRIZ
                               AND O.DTREF = (SELECT MAX(DTREF)
                                              FROM TFPS2200 D
                                              WHERE D.CODEMP = O.CODEMP
                                                AND D.TPAMB = O.TPAMB
                                                AND D.CHAVE = O.CHAVE
                                                AND D.STATUS = 'F'
                                                AND D.NRORECIBO IS NOT NULL
                                                AND D.ACAO <> 'E'
                                              )
                               AND O.TPAMB = P_TPAMB
                               AND O.SEQUENCIA = (SELECT MAX(SEQUENCIA)
                                                  FROM TFPS2200 S
                                                  WHERE S.CODEMP = O.CODEMP
                                                    AND S.TPAMB = O.TPAMB
                                                    AND S.CHAVE = O.CHAVE
                                                    AND S.DTREF = (SELECT MAX(DTREF)
                                                                   FROM TFPS2200 D
                                                                   WHERE D.CODEMP = O.CODEMP
                                                                     AND D.TPAMB = O.TPAMB
                                                                     AND D.CHAVE = O.CHAVE
                                                                     AND D.STATUS = 'F'
                                                                     AND D.NRORECIBO IS NOT NULL
                                                                     AND D.ACAO <> 'E'
                                                                  )
                                                    AND S.STATUS = 'F'
                                                    AND S.NRORECIBO IS NOT NULL
                                                    AND S.ACAO <> 'E'
                                                  )
                               AND NOT EXISTS(SELECT 1
                                              FROM TFPS2200 R
                                              WHERE R.CODEMP = O.CODEMP
                                                AND R.TPAMB = O.TPAMB
                                                AND R.CHAVE = O.CHAVE
                                                AND R.STATUS = 'F'
                                                AND R.NRORECIBO IS NOT NULL
                                                AND R.ACAO = 'E'
                                                AND (R.DTREF > O.DTREF OR (R.DTREF = O.DTREF AND R.SEQUENCIA > O.SEQUENCIA)))
                               
                          ) DTALT
                      WHERE DTALT.VALIDACAO <> 'E';

    ELSIF P_NOMETAB = 'TFPS2300' THEN
        P_NOMETAB_UTIL := 'TFPS2300';

        INSERT INTO TFPVAES (CHAVE, VALIDACAO, DTREF, SEQUENCIA, CONTROLE)
            SELECT CHAVE, VALIDACAO, DTREF, SEQUENCIA, CONTROLE
                      FROM ( SELECT O.CHAVE
                                  , CASE WHEN N.CODEMP IS NULL AND O.ACAO <> 'E' THEN 'E'
                                         WHEN (N.CODEMP IS NULL AND O.ACAO = 'E') OR (NVL(N.NRLOGRADAGNTINTEG, ' ') = NVL(O.NRLOGRADAGNTINTEG, ' ') AND NVL(N.BAIRROAGNTINTEG, ' ') = NVL(O.BAIRROAGNTINTEG, ' ')
                                           AND NVL(N.CEPAGNTINTEG, ' ') = NVL(O.CEPAGNTINTEG, ' ') AND NVL(N.CODMUNICAGNTINTEG, 0) = NVL(O.CODMUNICAGNTINTEG, 0)
                                           AND NVL(N.UFAGNTINTEG, ' ') = NVL(O.UFAGNTINTEG, ' ') AND NVL(N.CPFSUPERVISOR, ' ') = NVL(O.CPFSUPERVISOR, ' ')
                                           AND NVL(N.NMSUPERV, ' ') = NVL(O.NMSUPERV, ' ') AND NVL(N.DTINIAFAST, SYSDATE) = NVL(O.DTINIAFAST, SYSDATE)
                                           AND NVL(N.CODMOTAFAST, ' ') = NVL(O.CODMOTAFAST, ' ') AND NVL(N.DTTERM, SYSDATE) = NVL(O.DTTERM, SYSDATE) AND N.CHAVE = O.CHAVE AND NVL(N.TPINSCEMPREGADOR, 0) = NVL(O.TPINSCEMPREGADOR, 0) AND NVL(N.NRINSCEMPREGADOR, ' ') = NVL(O.NRINSCEMPREGADOR, ' ') AND NVL(N.CPFTRAB, ' ') = NVL(O.CPFTRAB, ' ') AND NVL(N.NISTRAB, ' ') = NVL(O.NISTRAB, ' ') AND NVL(N.NMTRAB, ' ') = NVL(O.NMTRAB, ' ') AND NVL(N.SEXO, ' ') = NVL(O.SEXO, ' ') AND NVL(N.RACACOR, 0) = NVL(O.RACACOR, 0) AND NVL(N.ESTCIV, 0) = NVL(O.ESTCIV, 0) AND NVL(N.GRAUINSTR, ' ') = NVL(O.GRAUINSTR, ' ') AND NVL(N.NMSOC, ' ') = NVL(O.NMSOC, ' ') AND NVL(N.DTNASCTONASCIMENTO, SYSDATE) = NVL(O.DTNASCTONASCIMENTO, SYSDATE) AND NVL(N.CODMUNICNASCIMENTO, 0) = NVL(O.CODMUNICNASCIMENTO, 0) AND NVL(N.UFNASCIMENTO, ' ') = NVL(O.UFNASCIMENTO, ' ') AND NVL(N.PAISNASCTONASCIMENTO, ' ') = NVL(O.PAISNASCTONASCIMENTO, ' ') AND NVL(N.PAISNACNASCIMENTO, ' ') = NVL(O.PAISNACNASCIMENTO, ' ') AND NVL(N.NMMAENASCIMENTO, ' ') = NVL(O.NMMAENASCIMENTO, ' ') AND NVL(N.NMPAINASCIMENTO, ' ') = NVL(O.NMPAINASCIMENTO, ' ') AND NVL(N.NRCTPS, ' ') = NVL(O.NRCTPS, ' ') AND NVL(N.SERIECTPS, ' ') = NVL(O.SERIECTPS, ' ') AND NVL(N.UFCTPS, ' ') = NVL(O.UFCTPS, ' ') AND NVL(N.NRRIC, ' ') = NVL(O.NRRIC, ' ') AND NVL(N.ORGAOEMISSORRIC, ' ') = NVL(O.ORGAOEMISSORRIC, ' ') AND NVL(N.DTEXPEDRIC, SYSDATE) = NVL(O.DTEXPEDRIC, SYSDATE) AND NVL(N.NRRG, ' ') = NVL(O.NRRG, ' ') AND NVL(N.ORGAOEMISSORRG, ' ') = NVL(O.ORGAOEMISSORRG, ' ') AND NVL(N.DTEXPEDRG, SYSDATE) = NVL(O.DTEXPEDRG, SYSDATE) AND NVL(N.NRRNE, ' ') = NVL(O.NRRNE, ' ') AND NVL(N.ORGAOEMISSORRNE, ' ') = NVL(O.ORGAOEMISSORRNE, ' ') AND NVL(N.DTEXPEDRNE, SYSDATE) = NVL(O.DTEXPEDRNE, SYSDATE) AND NVL(N.NROC, ' ') = NVL(O.NROC, ' ') AND NVL(N.ORGAOEMISSOROC, ' ') = NVL(O.ORGAOEMISSOROC, ' ') AND NVL(N.DTEXPEDOC, SYSDATE) = NVL(O.DTEXPEDOC, SYSDATE) AND NVL(N.DTVALIDOC, SYSDATE) = NVL(O.DTVALIDOC, SYSDATE) AND NVL(N.NRREGCNH, ' ') = NVL(O.NRREGCNH, ' ') AND NVL(N.DTEXPEDCNH, SYSDATE) = NVL(O.DTEXPEDCNH, SYSDATE) AND NVL(N.UFCNH, ' ') = NVL(O.UFCNH, ' ') AND NVL(N.DTVALIDCNH, SYSDATE) = NVL(O.DTVALIDCNH, SYSDATE) AND NVL(N.DTPRIHAB, SYSDATE) = NVL(O.DTPRIHAB, SYSDATE) AND NVL(N.CATEGORIACNH, ' ') = NVL(O.CATEGORIACNH, ' ') AND NVL(N.TPLOGRADBRASIL, ' ') = NVL(O.TPLOGRADBRASIL, ' ') AND NVL(N.DSCLOGRADBRASIL, ' ') = NVL(O.DSCLOGRADBRASIL, ' ') AND NVL(N.NRLOGRADBRASIL, ' ') = NVL(O.NRLOGRADBRASIL, ' ') AND NVL(N.COMPLEMENTOBRASIL, ' ') = NVL(O.COMPLEMENTOBRASIL, ' ') AND NVL(N.BAIRROBRASIL, ' ') = NVL(O.BAIRROBRASIL, ' ') AND NVL(N.CEPBRASIL, ' ') = NVL(O.CEPBRASIL, ' ') AND NVL(N.CODMUNICBRASIL, 0) = NVL(O.CODMUNICBRASIL, 0) AND NVL(N.UFBRASIL, ' ') = NVL(O.UFBRASIL, ' ') AND NVL(N.PAISRESID, ' ') = NVL(O.PAISRESID, ' ') AND NVL(N.DSCLOGRADEXTERIOR, ' ') = NVL(O.DSCLOGRADEXTERIOR, ' ') AND NVL(N.NRLOGRADEXTERIOR, ' ') = NVL(O.NRLOGRADEXTERIOR, ' ') AND NVL(N.COMPLEMENTOEXTERIOR, ' ') = NVL(O.COMPLEMENTOEXTERIOR, ' ') AND NVL(N.BAIRROEXTERIOR, ' ') = NVL(O.BAIRROEXTERIOR, ' ')
                                           AND NVL(N.NMCIDEXTERIOR, ' ') = NVL(O.NMCIDEXTERIOR, ' ') AND NVL(N.CODPOSTALEXTERIOR, ' ') = NVL(O.CODPOSTALEXTERIOR, ' ') AND NVL(N.DTCHEGADA, SYSDATE) = NVL(O.DTCHEGADA, SYSDATE) AND NVL(N.CLASSTRABESTRANG, 0) = NVL(O.CLASSTRABESTRANG, 0) AND NVL(N.CASADOBR, ' ') = NVL(O.CASADOBR, ' ') AND NVL(N.FILHOSBR, ' ') = NVL(O.FILHOSBR, ' ') AND NVL(N.DEFFISICA, ' ') = NVL(O.DEFFISICA, ' ') AND NVL(N.DEFVISUAL, ' ') = NVL(O.DEFVISUAL, ' ') AND NVL(N.DEFAUDITIVA, ' ') = NVL(O.DEFAUDITIVA, ' ') AND NVL(N.DEFMENTAL, ' ') = NVL(O.DEFMENTAL, ' ') AND NVL(N.DEFINTELECTUAL, ' ') = NVL(O.DEFINTELECTUAL, ' ') AND NVL(N.REABREADAP, ' ') = NVL(O.REABREADAP, ' ') AND NVL(N.OBSERVACAO, ' ') = NVL(O.OBSERVACAO, ' ') AND NVL(N.FONEPRINC, ' ') = NVL(O.FONEPRINC, ' ') AND NVL(N.FONEALTERNAT, ' ') = NVL(O.FONEALTERNAT, ' ') AND NVL(N.EMAILPRINC, ' ') = NVL(O.EMAILPRINC, ' ') AND NVL(N.EMAILALTERNAT, ' ') = NVL(O.EMAILALTERNAT, ' ') AND NVL(N.CADINI, ' ') = NVL(O.CADINI, ' ') AND NVL(N.CODCATEG, 0) = NVL(O.CODCATEG, 0) AND NVL(N.DTINICIO, SYSDATE) = NVL(O.DTINICIO, SYSDATE) AND NVL(N.NATATIVIDADE, 0) = NVL(O.NATATIVIDADE, 0) AND NVL(N.CODCARGO, ' ') = NVL(O.CODCARGO, ' ') AND NVL(N.CODFUNCAO, ' ') = NVL(O.CODFUNCAO, ' ') AND NVL(N.VRSALFX, 0) = NVL(O.VRSALFX, 0) AND NVL(N.UNDSALFIXO, 0) = NVL(O.UNDSALFIXO, 0) AND NVL(N.DSCSALVAR, ' ') = NVL(O.DSCSALVAR, ' ') AND NVL(N.OPCFGTS, 0) = NVL(O.OPCFGTS, 0) AND NVL(N.DTOPCFGTS, SYSDATE) = NVL(O.DTOPCFGTS, SYSDATE) AND NVL(N.CATEGORIGDIRSIND, 0) = NVL(O.CATEGORIGDIRSIND, 0) AND NVL(N.CNPJORIGDIRSIND, ' ') = NVL(O.CNPJORIGDIRSIND, ' ') AND NVL(N.DTADMORIGDIRSIND, SYSDATE) = NVL(O.DTADMORIGDIRSIND, SYSDATE) AND NVL(N.MATRICORIGDIRSIND, ' ') = NVL(O.MATRICORIGDIRSIND, ' ') AND NVL(N.CATEGORIGCED, 0) = NVL(O.CATEGORIGCED, 0) AND NVL(N.CNPJCED, ' ') = NVL(O.CNPJCED, ' ') AND NVL(N.MATRICCED, ' ') = NVL(O.MATRICCED, ' ') AND NVL(N.DTADMCED, SYSDATE) = NVL(O.DTADMCED, SYSDATE) AND NVL(N.TPREGTRABCED, 0) = NVL(O.TPREGTRABCED, 0) AND NVL(N.TPREGPREVCED, 0) = NVL(O.TPREGPREVCED, 0) AND NVL(N.INFONUSCED, 0) = NVL(O.INFONUSCED, 0) AND NVL(N.NATESTAGIO, ' ') = NVL(O.NATESTAGIO, ' ') AND NVL(N.NIVESTAGIO, ' ') = NVL(O.NIVESTAGIO, ' ') AND NVL(N.AREAATUACAO, ' ') = NVL(O.AREAATUACAO, ' ') AND NVL(N.NRAPOL, ' ') = NVL(O.NRAPOL, ' ') AND NVL(N.VLRBOLSA, 0) = NVL(O.VLRBOLSA, 0) AND NVL(N.DTPREVTERM, SYSDATE) = NVL(O.DTPREVTERM, SYSDATE) AND NVL(N.CNPJINSTENSINO, ' ') = NVL(O.CNPJINSTENSINO, ' ') AND NVL(N.NMRAZAOINSTENS, ' ') = NVL(O.NMRAZAOINSTENS, ' ') AND NVL(N.DSCLOGRADINSTENS, ' ') = NVL(O.DSCLOGRADINSTENS, ' ') AND NVL(N.NRLOGRADINSTENS, ' ') = NVL(O.NRLOGRADINSTENS, ' ') AND NVL(N.BAIRROINSTENS, ' ') = NVL(O.BAIRROINSTENS, ' ') AND NVL(N.CEPINSTENS, ' ') = NVL(O.CEPINSTENS, ' ') AND NVL(N.CODMUNICINSTENS, 0) = NVL(O.CODMUNICINSTENS, 0) AND NVL(N.UFINSTENS, ' ') = NVL(O.UFINSTENS, ' ') AND NVL(N.CNPJAGNTINTEG, ' ') = NVL(O.CNPJAGNTINTEG, ' ') AND NVL(N.NMRAZAOAGNTINTEG, ' ') = NVL(O.NMRAZAOAGNTINTEG, ' ') AND NVL(N.DSCLOGRADAGNTINTEG, ' ') = NVL(O.DSCLOGRADAGNTINTEG, ' ')) THEN 'I'
                                         ELSE 'A'
                                    END AS VALIDACAO 
                                  , O.DTREF
                                  , O.SEQUENCIA
                                  , O.CONTROLE
                             FROM TFPS2300 O
                                 LEFT JOIN VGF_EVENTO_S2300 N ON O.CODEMP = N.CODEMP AND O.CHAVE = N.CHAVE
                             WHERE O.CODEMP = P_CODEMPMATRIZ
                               AND O.DTREF = (SELECT MAX(DTREF)
                                              FROM TFPS2300 D
                                              WHERE D.CODEMP = O.CODEMP
                                                AND D.TPAMB = O.TPAMB
                                                AND D.CHAVE = O.CHAVE
                                                AND D.STATUS = 'F'
                                                AND D.NRORECIBO IS NOT NULL
                                                AND D.ACAO <> 'E'
                                              )
                               AND O.SEQUENCIA = (SELECT MAX(SEQUENCIA)
                                                  FROM TFPS2300 S
                                                  WHERE S.CODEMP = O.CODEMP
                                                    AND S.TPAMB = O.TPAMB
                                                    AND S.CHAVE = O.CHAVE
                                                    AND S.DTREF = (SELECT MAX(DTREF)
                                                                   FROM TFPS2300 D
                                                                   WHERE D.CODEMP = O.CODEMP
                                                                     AND D.TPAMB = O.TPAMB
                                                                     AND D.CHAVE = O.CHAVE
                                                                     AND D.STATUS = 'F'
                                                                     AND D.NRORECIBO IS NOT NULL
                                                                     AND D.ACAO <> 'E'
                                                                  )
                                                    AND S.STATUS = 'F'
                                                    AND S.NRORECIBO IS NOT NULL
                                                    AND S.ACAO <> 'E'
                                                  )
                               AND NOT EXISTS(SELECT 1
                                              FROM TFPS2300 R
                                              WHERE R.CODEMP = O.CODEMP
                                                AND R.TPAMB = O.TPAMB
                                                AND R.CHAVE = O.CHAVE
                                                AND R.STATUS = 'F'
                                                AND R.NRORECIBO IS NOT NULL
                                                AND R.ACAO = 'E'
                                                AND (R.DTREF > O.DTREF OR (R.DTREF = O.DTREF AND R.SEQUENCIA > O.SEQUENCIA)))
                               AND O.TPAMB = P_TPAMB

                          ) DTALT
                      WHERE DTALT.VALIDACAO <> 'E';
    ELSIF P_NOMETAB = 'TFPS2205' THEN
        P_NOMETAB_UTIL := 'TFPS2205';
        INSERT INTO TFPVAES (CHAVE, VALIDACAO, DTREF, SEQUENCIA, CONTROLE)
            SELECT CHAVE, VALIDACAO, DTREF, SEQUENCIA, CONTROLE
            FROM ( SELECT O.CHAVE
                                  , CASE WHEN N.CODEMP IS NULL AND O.ACAO <> 'E' THEN 'E'
                                         WHEN (NVL(N.TPINSCEMPREGADOR, 0) = NVL(O.TPINSCEMPREGADOR, 0) AND NVL(N.NRINSCEMPREGADOR, ' ') = NVL(O.NRINSCEMPREGADOR, ' ') AND NVL(N.CPFTRAB, ' ') = NVL(O.CPFTRAB, ' ') AND
                                               NVL(N.NISTRAB, ' ') = NVL(O.NISTRAB, ' ') AND NVL(N.NMTRAB, ' ') = NVL(O.NMTRAB, ' ') AND NVL(N.SEXO, ' ') = NVL(O.SEXO, ' ') AND NVL(N.RACACOR, 0) = NVL(O.RACACOR, 0) AND 
                                               NVL(N.ESTCIV, 0) = NVL(O.ESTCIV, 0) AND NVL(N.NMSOC, ' ') = NVL(O.NMSOC, ' ') AND NVL(N.NRCTPS, ' ') = NVL(O.NRCTPS, ' ') AND NVL(N.SERIECTPS, ' ') = NVL(O.SERIECTPS, ' ') AND 
                                               NVL(N.UFCTPS, ' ') = NVL(O.UFCTPS, ' ') AND NVL(N.NRRIC, ' ') = NVL(O.NRRIC, ' ') AND NVL(N.ORGAOEMISSORRIC, ' ') = NVL(O.ORGAOEMISSORRIC, ' ') AND 
                                               NVL(N.DTEXPEDRIC, SYSDATE) = NVL(O.DTEXPEDRIC, SYSDATE) AND NVL(N.NRRG, ' ') = NVL(O.NRRG, ' ') AND NVL(N.ORGAOEMISSORRG, ' ') = NVL(O.ORGAOEMISSORRG, ' ') AND 
                                               NVL(N.DTEXPEDRG, SYSDATE) = NVL(O.DTEXPEDRG, SYSDATE) AND NVL(N.NRRNE, ' ') = NVL(O.NRRNE, ' ') AND NVL(N.ORGAOEMISSORRNE, ' ') = NVL(O.ORGAOEMISSORRNE, ' ') AND 
                                               NVL(N.DTEXPEDRNE, SYSDATE) = NVL(O.DTEXPEDRNE, SYSDATE) AND NVL(N.NROC, ' ') = NVL(O.NROC, ' ') AND NVL(N.ORGAOEMISSOROC, ' ') = NVL(O.ORGAOEMISSOROC, ' ') AND 
                                               NVL(N.DTEXPEDOC, SYSDATE) = NVL(O.DTEXPEDOC, SYSDATE) AND NVL(N.DTVALIDOC, SYSDATE) = NVL(O.DTVALIDOC, SYSDATE) AND NVL(N.NRREGCNH, ' ') = NVL(O.NRREGCNH, ' ') AND 
                                               NVL(N.DTEXPEDCNH, SYSDATE) = NVL(O.DTEXPEDCNH, SYSDATE) AND NVL(N.UFCNH, ' ') = NVL(O.UFCNH, ' ') AND NVL(N.DTVALIDCNH, SYSDATE) = NVL(O.DTVALIDCNH, SYSDATE) AND 
                                               NVL(N.DTPRIHAB, SYSDATE) = NVL(O.DTPRIHAB, SYSDATE) AND NVL(N.CATEGORIACNH, ' ') = NVL(O.CATEGORIACNH, ' ') AND NVL(N.TPLOGRADBRASIL, ' ') = NVL(O.TPLOGRADBRASIL, ' ') AND 
                                               NVL(N.DSCLOGRADBRASIL, ' ') = NVL(O.DSCLOGRADBRASIL, ' ') AND NVL(N.NRLOGRADBRASIL, ' ') = NVL(O.NRLOGRADBRASIL, ' ') AND 
                                               NVL(N.COMPLEMENTOBRASIL, ' ') = NVL(O.COMPLEMENTOBRASIL, ' ') AND NVL(N.BAIRROBRASIL, ' ') = NVL(O.BAIRROBRASIL, ' ') AND NVL(N.CEPBRASIL, ' ') = NVL(O.CEPBRASIL, ' ') AND 
                                               NVL(N.CODMUNICBRASIL, 0) = NVL(O.CODMUNICBRASIL, 0) AND NVL(N.UFBRASIL, ' ') = NVL(O.UFBRASIL, ' ') AND NVL(N.PAISRESID, ' ') = NVL(O.PAISRESID, ' ') AND 
                                               NVL(N.DSCLOGRADEXTERIOR, ' ') = NVL(O.DSCLOGRADEXTERIOR, ' ') AND NVL(N.NRLOGRADEXTERIOR, ' ') = NVL(O.NRLOGRADEXTERIOR, ' ') AND 
                                               NVL(N.COMPLEMENTOEXTERIOR, ' ') = NVL(O.COMPLEMENTOEXTERIOR, ' ') AND NVL(N.BAIRROEXTERIOR, ' ') = NVL(O.BAIRROEXTERIOR, ' ') AND 
                                               NVL(N.NMCIDEXTERIOR, ' ') = NVL(O.NMCIDEXTERIOR, ' ') AND NVL(N.CODPOSTALEXTERIOR, ' ') = NVL(O.CODPOSTALEXTERIOR, ' ') AND 
                                               NVL(N.DTCHEGADA, SYSDATE) = NVL(O.DTCHEGADA, SYSDATE) AND NVL(N.CLASSTRABESTRANG, 0) = NVL(O.CLASSTRABESTRANG, 0) AND NVL(N.CASADOBR, ' ') = NVL(O.CASADOBR, ' ') AND 
                                               NVL(N.FILHOSBR, ' ') = NVL(O.FILHOSBR, ' ') AND NVL(N.DEFFISICA, ' ') = NVL(O.DEFFISICA, ' ') AND NVL(N.DEFVISUAL, ' ') = NVL(O.DEFVISUAL, ' ') AND 
                                               NVL(N.DEFAUDITIVA, ' ') = NVL(O.DEFAUDITIVA, ' ') AND NVL(N.DEFMENTAL, ' ') = NVL(O.DEFMENTAL, ' ') AND NVL(N.DEFINTELECTUAL, ' ') = NVL(O.DEFINTELECTUAL, ' ') AND 
                                               NVL(N.REABREADAP, ' ') = NVL(O.REABREADAP, ' ') AND NVL(N.INFOCOTA, ' ') = NVL(O.INFOCOTA, ' ') AND NVL(N.OBSERVACAO, ' ') = NVL(O.OBSERVACAO, ' ') AND 
                                               NVL(N.TRABAPOSENT, ' ') = NVL(O.TRABAPOSENT, ' ') AND NVL(N.FONEPRINC, ' ') = NVL(O.FONEPRINC, ' ') AND NVL(N.FONEALTERNAT, ' ') = NVL(O.FONEALTERNAT, ' ') AND 
                                               NVL(N.EMAILPRINC, ' ') = NVL(O.EMAILPRINC, ' ') AND N.CHAVE = O.CHAVE) THEN 'I'
                                         ELSE 'A'
                                    END AS VALIDACAO 
                                  , O.DTREF
                                  , O.SEQUENCIA
                                  , O.CONTROLE
                             FROM TFPS2205 O
                                 LEFT JOIN VGF_EVENTO_S2205 N ON O.CODEMP = N.CODEMP AND O.CHAVE = N.CHAVE
                             WHERE O.CODEMP = P_CODEMPMATRIZ
                               AND O.DTREF = (SELECT MAX(DTREF)
                                              FROM TFPS2205 D
                                              WHERE D.CODEMP = O.CODEMP
                                                AND D.TPAMB = O.TPAMB
                                                AND D.CHAVE = O.CHAVE
                                                AND D.STATUS = 'F'
                                                AND D.NRORECIBO IS NOT NULL
                                                AND D.ACAO <> 'E'
                                              )
                               AND O.SEQUENCIA = (SELECT MAX(SEQUENCIA)
                                                  FROM TFPS2205 S
                                                  WHERE S.CODEMP = O.CODEMP
                                                    AND S.TPAMB = O.TPAMB
                                                    AND S.CHAVE = O.CHAVE
                                                    AND S.DTREF = (SELECT MAX(DTREF)
                                                                   FROM TFPS2205 D
                                                                   WHERE D.CODEMP = O.CODEMP
                                                                     AND D.TPAMB = O.TPAMB
                                                                     AND D.CHAVE = O.CHAVE
                                                                     AND D.STATUS = 'F'
                                                                     AND D.NRORECIBO IS NOT NULL
                                                                     AND D.ACAO <> 'E'
                                                                  )
                                                    AND S.STATUS = 'F'
                                                    AND S.NRORECIBO IS NOT NULL
                                                    AND S.ACAO <> 'E'
                                                  )
                               AND NOT EXISTS(SELECT 1
                                              FROM TFPS2205 R
                                              WHERE R.CODEMP = O.CODEMP
                                                AND R.TPAMB = O.TPAMB
                                                AND R.CHAVE = O.CHAVE
                                                AND R.STATUS = 'F'
                                                AND R.NRORECIBO IS NOT NULL
                                                AND R.ACAO = 'E'
                                                AND (R.DTREF > O.DTREF OR (R.DTREF = O.DTREF AND R.SEQUENCIA > O.SEQUENCIA)))
                               AND O.TPAMB = P_TPAMB
                          ) DTALT
                      WHERE DTALT.VALIDACAO <> 'E';
    ELSE
        P_CONDITION := SNK_GET_COLUMNS_ESOCIAL(P_NOMETAB, P_COLUNAS_PADRAO);

        IF P_NOMETAB_PAI IS NULL THEN   /*TABELAS PAI*/
            P_NOMETAB_UTIL := P_NOMETAB;
            queSql :=   'INSERT INTO TFPVAES (CHAVE, VALIDACAO, DTREF, SEQUENCIA, CONTROLE) '||
                        'SELECT CHAVE, VALIDACAO, DTREF, SEQUENCIA, CONTROLE '||
                        'FROM (  SELECT O.CHAVE '||
                                '     , CASE WHEN N.CODEMP IS NULL AND O.ACAO <> ''E'' THEN ''E'' '||
                                '            WHEN (N.CODEMP IS NULL AND O.ACAO = ''E'') OR ('||P_CONDITION||') THEN ''I'' '||
                                '            ELSE ''A''  '||
                                '       END AS VALIDACAO '||
                                '     , O.DTREF '||
                                '     , O.SEQUENCIA '||
                                '     , O.CONTROLE  '||
                                'FROM '||P_NOMETAB||' O '||
                                '    LEFT JOIN '||P_NOMEVIEW||' N ON O.CODEMP = N.CODEMP AND O.CHAVE = N.CHAVE '||
                                CASE WHEN P_TIPO = 'M' THEN ' AND N.DTREF = :DTREF ' ELSE ' ' END||
                                'WHERE O.CODEMP = :CODEMP '||
                                '  AND O.TPAMB = :TPAMB '||
                                '  AND O.DTREF = (SELECT MAX(DTREF) '||
                                                 'FROM '||P_NOMETAB||' D '||
                                                 'WHERE D.CODEMP = O.CODEMP '||
                                                   'AND D.TPAMB = O.TPAMB '||
                                                   'AND D.CHAVE = O.CHAVE '||
                                                   'AND D.STATUS = ''F'' '||
                                                   'AND D.NRORECIBO IS NOT NULL '||
                                                   'AND D.ACAO <> ''E'' '||
                                                 ') '||
                                '  AND O.SEQUENCIA = (SELECT MAX(SEQUENCIA) '||
                                                     'FROM '||P_NOMETAB||' S '||
                                                     'WHERE S.CODEMP = O.CODEMP '||
                                                       'AND S.TPAMB = O.TPAMB '||
                                                       'AND S.CHAVE = O.CHAVE '||
                                                       'AND S.DTREF = (SELECT MAX(DTREF) '||
                                                                      'FROM '||P_NOMETAB||' D '||
                                                                      'WHERE D.CODEMP = O.CODEMP '||
                                                                        'AND D.TPAMB = O.TPAMB '||
                                                                        'AND D.CHAVE = O.CHAVE '||
                                                                        'AND D.STATUS = ''F'' '||
                                                                        'AND D.NRORECIBO IS NOT NULL '||
                                                                        'AND D.ACAO <> ''E'' '||
                                                                     ') '||
                                                       'AND S.STATUS = ''F'' '||
                                                       'AND S.NRORECIBO IS NOT NULL '||
                                                       'AND S.ACAO <> ''E'' '||
                                                     ') '||
                                  'AND NOT EXISTS(SELECT 1 '||
                                                 'FROM '||P_NOMETAB||' R '||
                                                 'WHERE R.CODEMP = O.CODEMP '||
                                                   'AND R.TPAMB = O.TPAMB '||
                                                   'AND R.CHAVE = O.CHAVE '||
                                                   'AND R.STATUS = ''F'' '||
                                                   'AND R.NRORECIBO IS NOT NULL '||
                                                   'AND R.ACAO = ''E'' '||
                                                   'AND (R.DTREF > O.DTREF OR (R.DTREF = O.DTREF AND R.SEQUENCIA > O.SEQUENCIA))) '||
                             ') DTALT '||
                        ' WHERE DTALT.VALIDACAO = ''E'' ';
            IF P_TIPO = 'M' THEN
                EXECUTE IMMEDIATE queSql USING P_DTREF, P_CODEMPMATRIZ, P_TPAMB;
            ELSE
                EXECUTE IMMEDIATE queSql USING P_CODEMPMATRIZ, P_TPAMB;
            END IF;
        ELSE  /*TABELAS FILHAS*/
            P_NOMETAB_UTIL := P_NOMETAB_PAI;
            P_FILTRO_FILHOS := NVL(SNK_GET_PK_FOR_ESOCIAL(P_NOMETAB, P_COL_PAD_FILHOS), ' ');

            queSql :=   'INSERT INTO TFPVAES (CHAVE, VALIDACAO, DTREF, SEQUENCIA, CONTROLE)'||
                        'SELECT CHAVE, VALIDACAO, DTREF, SEQUENCIA, CONTROLE '||
                        'FROM (  SELECT O.CHAVE '||
                                    ' , CASE WHEN (N.CODEMP IS NULL AND P.ACAO = ''E'') OR ('||P_CONDITION||') THEN ''I'' '||
                                            'ELSE ''A''  '||
                                      ' END AS VALIDACAO  '||
                                    ' , O.DTREF '||
                                    ' , O.SEQUENCIA '||
                                    ' , P.CONTROLE '||
                                'FROM '||P_NOMETAB||' O '||
                                    'LEFT JOIN '||P_NOMEVIEW||' N ON O.CODEMP = N.CODEMP AND O.CHAVE = N.CHAVE '||P_FILTRO_FILHOS||' '||
                                     CASE WHEN P_TIPO = 'M' THEN ' AND N.DTREF = :DTREF ' ELSE ' ' END||
                                    'INNER JOIN '||P_NOMETAB_PAI||' P ON P.CODEMP = O.CODEMP AND P.DTREF = O.DTREF AND P.SEQUENCIA = O.SEQUENCIA AND O.CHAVE = P.CHAVE AND P.TPAMB = O.TPAMB '||
                                'WHERE O.CODEMP = :CODEMP '||
                                  'AND O.DTREF = (SELECT MAX(DTREF) '||
                                                 'FROM '||P_NOMETAB_PAI||' D '||
                                                 'WHERE D.CODEMP = O.CODEMP '||
                                                   'AND D.TPAMB = O.TPAMB '||
                                                   'AND D.CHAVE = O.CHAVE '||
                                                   'AND D.STATUS = ''F'' '||
                                                   'AND D.NRORECIBO IS NOT NULL '||
                                                   'AND D.ACAO <> ''E'' '||
                                                 ') '||
                                  'AND O.SEQUENCIA = (SELECT MAX(SEQUENCIA) '||
                                                     'FROM '||P_NOMETAB_PAI||' S '||
                                                     'WHERE S.CODEMP = O.CODEMP '||
                                                       'AND S.TPAMB = O.TPAMB '||
                                                       'AND S.CHAVE = O.CHAVE '||
                                                       'AND S.DTREF = (SELECT MAX(DTREF) '||
                                                                      'FROM '||P_NOMETAB_PAI||' D '||
                                                                      'WHERE D.CODEMP = O.CODEMP '||
                                                                        'AND D.TPAMB = O.TPAMB '||
                                                                        'AND D.CHAVE = O.CHAVE '||
                                                                        'AND D.STATUS = ''F'' '||
                                                                        'AND D.NRORECIBO IS NOT NULL '||
                                                                        'AND D.ACAO <> ''E'' '||
                                                                     ') '||
                                                       'AND S.STATUS = ''F'' '||
                                                       'AND S.NRORECIBO IS NOT NULL '||
                                                       'AND S.ACAO <> ''E'' '||
                                                     ') '||
                                  'AND NOT EXISTS(SELECT 1 '||
                                                 'FROM '||P_NOMETAB_PAI||' R '||
                                                 'WHERE R.CODEMP = O.CODEMP '||
                                                   'AND R.TPAMB = O.TPAMB '||
                                                   'AND R.CHAVE = O.CHAVE '||
                                                   'AND R.STATUS = ''F'' '||
                                                   'AND R.NRORECIBO IS NOT NULL '||
                                                   'AND R.ACAO = ''E'' '||
                                                   'AND (R.DTREF > O.DTREF OR (R.DTREF = O.DTREF AND R.SEQUENCIA > O.SEQUENCIA))) '||
                                'AND O.TPAMB = :TPAMB '||
                                   'AND NOT EXISTS(SELECT 1 '||
                                                  'FROM TFPVAES '||
                                                  'WHERE CHAVE = O.CHAVE) '||
                             ' ) DTALT '||
                         ' WHERE DTALT.VALIDACAO = ''E'' ';
            
            IF P_TIPO = 'M' THEN
                EXECUTE IMMEDIATE queSql USING P_DTREF, P_CODEMPMATRIZ, P_TPAMB;
            ELSE 
                EXECUTE IMMEDIATE queSql USING P_CODEMPMATRIZ, P_TPAMB;
            END IF;
        END IF;
    END IF;

    FOR EVEF IN (SELECT MON.NOMETAB, MON.NOMEVIEW
             FROM TFPMON MON
             WHERE MON.NOMEEVEVENTOPAI = P_NOMETAB 
               AND ((P_TPAMB = 'P' AND MON.AMBPRODUCAO = 'L') OR
                    (P_TPAMB = 'T' AND MON.AMBTESTE = 'L')) 
             GROUP BY MON.NOMETAB, MON.NOMEVIEW
             ORDER BY MON.NOMETAB
      ) LOOP
        SNK_GET_VALID_ALTER_ESOCIAL (P_EVENTO, P_COLUNAS_PADRAO, P_CODEMPMATRIZ, P_DTREF, P_SEQUENCIA, P_TPAMB, P_NOMETAB_UTIL, EVEF.NOMETAB, EVEF.NOMEVIEW, P_TIPO);
    END LOOP;
    
    SELECT COUNT(1) INTO P_COUNT
    FROM TFPVAES;
    
    IF P_NOMETAB_PAI IS NULL AND P_COUNT > 0 THEN
        queUpd := ' UPDATE '||P_NOMETAB||
                  ' SET CONTROLE = CASE WHEN EXISTS (SELECT 1 '||
                                                    'FROM TFPVAES '||
                                                    'WHERE DTREF = '||P_NOMETAB||'.DTREF '||
                                                     'AND SEQUENCIA = '||P_NOMETAB||'.SEQUENCIA '||
                                                     'AND CHAVE = '||P_NOMETAB||'.CHAVE '||
                                                     'AND VALIDACAO = ''A'' '||
                                                     'AND CONTROLE = ''I'') THEN ''A'' '|| 
                                       'ELSE ''I'' END '||
                  ' WHERE EXISTS (SELECT 1 '||
                                 'FROM TFPVAES '||
                                 'WHERE DTREF = '||P_NOMETAB||'.DTREF '||
                                   'AND SEQUENCIA = '||P_NOMETAB||'.SEQUENCIA '||
                                   'AND CHAVE = '||P_NOMETAB||'.CHAVE '||
                                   'AND ((VALIDACAO = ''A'' AND CONTROLE = ''I'') OR  '||
                                       ' (VALIDACAO = ''I'' AND CONTROLE <> ''I'')) '||
                                   ') '||
                     'AND CODEMP = :CODEMP '||
                     'AND TPAMB = :TPAMB ';
        EXECUTE IMMEDIATE queUpd USING P_CODEMPMATRIZ, P_TPAMB;
        --DELETE FROM TFPVAES;
    END IF;
    
EXCEPTION WHEN OTHERS THEN
  ROLLBACK;
  P_DTLOG := SYSDATE;
  IF queSql IS NOT NULL THEN
    SELECT COUNT(1) + 1 INTO P_SEQLOG
    FROM LOGESOCIAL
    WHERE DTLOG = P_DTLOG; 

      INSERT INTO LOGESOCIAL(DTLOG, SEQUENCIA, COMANDO)
           SELECT P_DTLOG, P_SEQLOG, SUBSTR(queSql, 1, 4000) from dual;
      IF LENGTH(queSql) > 4000 THEN
        INSERT INTO LOGESOCIAL(DTLOG, SEQUENCIA, COMANDO)
           SELECT P_DTLOG, P_SEQLOG + 1, SUBSTR(queSql, 4001) from dual;
      END IF;
           
        COMMIT;
   END IF;
   
   IF queUpd IS NOT NULL THEN
    SELECT COUNT(1) + 1 INTO P_SEQLOG
    FROM LOGESOCIAL
    WHERE DTLOG = P_DTLOG; 

      INSERT INTO LOGESOCIAL(DTLOG, SEQUENCIA, COMANDO)
           SELECT P_DTLOG, P_SEQLOG, SUBSTR(queUpd, 1, 4000) from dual;
      IF LENGTH(queUpd) > 4000 THEN
              INSERT INTO LOGESOCIAL(DTLOG, SEQUENCIA, COMANDO)
                              SELECT P_DTLOG, P_SEQLOG + 1, SUBSTR(queUpd, 4001) from dual;
      END IF;
           
        COMMIT; 
   END IF;
   
   P_MSG := P_MSG|| SUBSTR(SQLERRM, 1, 3950);
   RAISE_APPLICATION_ERROR(-20101, P_MSG);
END;
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 08/05/2018 15:17:16
Num.Script: 54581-0-1000
Nro. O.S. : 1178708
Nome      : INSERE - THOOBJ - 5458000
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_GET_VALID_ALTER_ESOCIAL
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210011
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_GET_VALID_ALTER_ESOCIAL' NOMEOBJ, 54580 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, 'e65f551769bc33a89222ce59844cd9ba' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_GET_VALID_ALTER_ESOCIAL' and THO.hashcode = 'e65f551769bc33a89222ce59844cd9ba')
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 08/05/2018 15:17:16
Num.Script: 54582-0-0
Nro. O.S. : 1178708
Nome      : Alterar - SNK_PROCESSA_DADOS_ESOCIAL
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - SNK_PROCESSA_DADOS_ESOCIAL
NomeObjeto: SNK_PROCESSA_DADOS_ESOCIAL
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_PROCESSA_DADOS_ESOCIAL (
   P_CODEMPMATRIZ          NUMBER,
   P_DTREF                 DATE,
   P_TPAMB                 CHAR,                       /*P= PRODUCAO T=TESTE*/
   P_TIPDADOS              CHAR, /*P_TIPDADOS T= TODOS C=CADOSTRO M=MOVIMENTO*/
   P_EVENTO                VARCHAR2 := 'TODOS',
   P_SEQUENCIA_ATUAL       NUMBER,
   P_NOMETAB               VARCHAR2 := NULL,    /*UTILIZADO NA RECURSIVIDADE*/
   P_SEQUENCIA_PAI         VARCHAR2 := NULL,    /*UTILIZADO NA RECURSIVIDADE*/
   P_RESULT            OUT NUMBER)
AS
   P_SEQUENCIA_OLD          NUMBER (10);
   P_SEQUENCIA_NEW          NUMBER (10);
   P_DTREF_NEXT_MONTH       DATE;
   P_DTREF_OLD_MONTH        DATE;
   P_DTREF_OLD              DATE;
   P_COLUNAS_PADRAO         VARCHAR2 (4000) := 'CODEMP, DTREF, STATUS, ACAO, NRORECIBO, NRORECIBO_ANT, SEQUENCIA, DTALTERACAO, DTEF, DSCALT, JUSTPRORR, MTVALTER, CONTROLE, TPAMB';
   queSql                   VARCHAR2 (8000);
   P_SEQUENCIA_DEL          NUMBER (10) := 0;
   P_SEQ_OLD_MONTH          NUMBER (10) := 0;
   P_COLUMNS                VARCHAR2 (4000);
   P_INSERT_COLUMNS         VARCHAR2 (4000);
   P_INSERT_VALUES          VARCHAR2 (4000);
   P_COLUMNS_PARAMETER      VARCHAR2 (4000)  := 'CODEMP, DTREF, SEQUENCIA, STATUS, ACAO,NRORECIBO, NRORECIBO_ANT, ';
   P_COLUMNS_TO_PARAMETER   VARCHAR2 (4000) := 'CODEMP;, :DTREF, :SEQUENCIA, :STATUS, :ACAO,:NRORECIBO, :NRORECIBO_ANT, ';
   P_COL_PAD_FILHOS         VARCHAR2 (4000) := 'CODEMP, DTREF, SEQUENCIA, ';
   P_COL_PAD_FILHOS_PARAM   VARCHAR2 (4000) := 'CODEMP, :DTREF, :SEQUENCIA, ';
   P_TABLE_PAI              VARCHAR2 (100);
   P_VALID_ALTER            BOOLEAN := FALSE;
   P_COUNT                  NUMBER (10);
   P_DTLOG                  DATE;
   P_SEQLOG                 NUMBER (10);
   P_MSG                    VARCHAR2 (4000) := ' ';
   P_ERRMSG                 VARCHAR2 (4000) := ' ';
BEGIN
   IF P_NOMETAB IS NULL THEN
      SELECT MAX(DTREF) INTO P_DTREF_NEXT_MONTH
      FROM TFPS1000
      WHERE CODEMP = P_CODEMPMATRIZ
        AND DTREF > P_DTREF
        AND TPAMB = P_TPAMB;

      IF P_DTREF_NEXT_MONTH IS NOT NULL THEN
        P_ERRMSG := 'Existe movimento para referência '||TO_CHAR(P_DTREF_NEXT_MONTH, 'DD/MM/YYYY')||'. A referência atual não pode ser gerada.';
        RAISE_APPLICATION_ERROR ( -20101, P_ERRMSG);
      END IF;

      FOR EVE IN (SELECT NOMETAB,
                      NOMEEVENTO,
                      NOMEVIEW,
                      NOMEEVEVENTOPAI
                  FROM TFPMON
                  WHERE TIPO IN ('C', 'M')
                    AND (P_EVENTO = 'TODOS' OR NOMEEVENTO = P_EVENTO)
                    AND NOMEEVEVENTOPAI IS NULL
                    AND ((P_TPAMB = 'P' AND AMBPRODUCAO = 'L') OR (P_TPAMB = 'T' AND AMBTESTE = 'L'))
                  ORDER BY NOMETAB--GROUP BY NOMETAB, NOMEEVENTO, NOMEVIEW, NOMEEVEVENTOPAI
            ) LOOP
         queSql := ' SELECT COUNT(1) '||  
                   ' FROM ' || EVE.NOMETAB ||
                   ' WHERE CODEMP = :CODEMP '||
                   ' AND DTREF = :DTREF '||
                   ' AND TPAMB = :TPAMB '||
                   ' AND STATUS = ''I'' ';

         EXECUTE IMMEDIATE queSql INTO P_COUNT USING P_CODEMPMATRIZ, P_DTREF, P_TPAMB;

         IF P_COUNT > 0 THEN
            RAISE_APPLICATION_ERROR ( -20101, 'Não é possivel gerar dados do e-social se existir eventos em processo de envio.');
         END IF;
        
        IF P_SEQUENCIA_DEL = 0 THEN
            SNK_CLEAR_ROW_PENDENTE(EVE.NOMETAB, P_CODEMPMATRIZ, P_DTREF, P_TPAMB, P_SEQUENCIA_DEL);
            IF P_SEQUENCIA_DEL > 0 THEN
                P_SEQUENCIA_NEW := P_SEQUENCIA_ATUAL;
            END IF;
        END IF;
        
        LOOP
            queSql := ' SELECT MAX(DTREF) '||  
                      ' FROM ' || EVE.NOMETAB || 
                      ' WHERE CODEMP = :CODEMP '||
                      '  AND DTREF < :DTREF '||
                      '  AND TPAMB = :TPAMB '||
                      '  AND STATUS = ''P''';
            EXECUTE IMMEDIATE queSql INTO P_DTREF_OLD_MONTH USING P_CODEMPMATRIZ, P_DTREF, P_TPAMB;
                
            EXIT WHEN P_DTREF_OLD_MONTH IS NULL;
            SNK_CLEAR_ROW_PENDENTE(EVE.NOMETAB, P_CODEMPMATRIZ, P_DTREF_OLD_MONTH, P_TPAMB, P_SEQ_OLD_MONTH);
        END LOOP;

      END LOOP;
   ELSE
      P_SEQUENCIA_NEW := P_SEQUENCIA_PAI;
   END IF;

   IF P_SEQUENCIA_NEW IS NULL THEN /*SE P_SEQUENCIA_NEW ESTA NULL, E PORQUE NAO DELETOU DAGOS, LOGO TEMOS QUE GERAR UMA SEQUENCIA NOVA.*/
      P_SEQUENCIA_NEW := P_SEQUENCIA_ATUAL + 1;
   END IF;
   
   IF P_NOMETAB IS NULL THEN
    SNK_SET_ESOCIAL_PKG(P_TPAMB, P_DTREF, CASE WHEN NVL(P_SEQUENCIA_DEL, 0) > 0 THEN P_SEQUENCIA_ATUAL - 1 ELSE P_SEQUENCIA_ATUAL END);
   END IF;

   FOR EVE
      IN (  SELECT MON.NOMETAB,
                   MON.NOMEEVENTO,
                   MON.NOMEVIEW,
                   MON.NOMEEVEVENTOPAI,
                   MON.TIPO
              FROM TFPMON MON
             WHERE (P_NOMETAB IS NOT NULL AND MON.NOMETAB = P_NOMETAB) OR     
                   (P_NOMETAB IS NULL AND NOMEEVEVENTOPAI IS NULL AND 
                    (P_EVENTO = 'TODOS' OR MON.NOMEEVENTO = P_EVENTO) AND 
                    (P_TIPDADOS = 'T' OR MON.TIPO = P_TIPDADOS)) 
               AND TIPO IN ('C', 'M')
               AND ((P_TPAMB = 'P' AND MON.AMBPRODUCAO = 'L') OR
                    (P_TPAMB = 'T' AND MON.AMBTESTE = 'L'))
          GROUP BY MON.NOMETAB,
                   MON.NOMEEVENTO,
                   MON.NOMEVIEW,
                   MON.NOMEEVEVENTOPAI,
                   MON.TIPO
          ORDER BY MON.NOMETAB)
   LOOP
      DELETE FROM TFPVAES;
      P_MSG := 'EVENTO: ' || EVE.NOMEEVENTO;
      IF EVE.TIPO IN ('T', 'C', 'M') THEN
         P_INSERT_COLUMNS := SNK_GET_COLUMNS_TABLE (EVE.NOMETAB);
         P_INSERT_VALUES := P_INSERT_COLUMNS;
         P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'SEQUENCIA', TO_CHAR (P_SEQUENCIA_NEW));
         P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'DTREF', 'TO_DATE(''' || SNK_FORMAT_DATE (P_DTREF, 'DD/MM/YYYY HH24:MI:SS') || ''', ''DD/MM/YYYY HH24:MI:SS'')');
         P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'TPAMB', '''' || P_TPAMB || '''');

         IF EVE.NOMEEVEVENTOPAI IS NULL THEN
            P_TABLE_PAI := EVE.NOMETAB;

            IF P_SEQUENCIA_NEW > 1 THEN
               --P_SEQUENCIA_OLD := P_SEQUENCIA_NEW - 1; --Nao pode ser assim, pois na primeira geracao, pode nao ter gerado algum evento.
               queSql := ' SELECT NVL(MAX(SEQUENCIA),0) '||  
                         ' FROM ' || EVE.NOMETAB ||
                         ' WHERE CODEMP = :CODEMP '||
                         '   AND DTREF = :DTREF '||
                         '   AND TPAMB = :TPAMB '||
                         '   AND SEQUENCIA < :SEQUENCIA_NEW';

               EXECUTE IMMEDIATE queSql INTO P_SEQUENCIA_OLD USING P_CODEMPMATRIZ, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW;
               P_DTREF_OLD := P_DTREF;
            ELSE
               queSql := ' SELECT NVL(MAX(DTREF), :DTMOV) '||
                         ' FROM ' || EVE.NOMETAB ||
                         ' WHERE CODEMP = :CODEMP '||
                         '   AND DTREF < :DTREF '||
                         '   AND TPAMB = :TPAMB';

               EXECUTE IMMEDIATE queSql INTO P_DTREF_OLD USING P_DTREF, P_CODEMPMATRIZ, P_DTREF, P_TPAMB;
               P_DTREF_OLD := NVL (P_DTREF_OLD, P_DTREF);

               IF P_DTREF_OLD <> P_DTREF THEN
                  queSql := ' SELECT NVL(MAX(SEQUENCIA),0) '||
                            ' FROM ' || EVE.NOMETAB ||
                            ' WHERE CODEMP = :CODEMP '||
                            '   AND DTREF = :DTREF '||
                            '   AND TPAMB = :TPAMB';

                  EXECUTE IMMEDIATE queSql INTO P_SEQUENCIA_OLD USING P_CODEMPMATRIZ, P_DTREF_OLD, P_TPAMB;
               ELSE
                  P_SEQUENCIA_OLD := P_SEQUENCIA_NEW;
               END IF;
            END IF;

            IF P_DTREF_OLD <> P_DTREF OR P_SEQUENCIA_OLD <> P_SEQUENCIA_NEW THEN
               queSql := NULL;
               SNK_GET_VALID_ALTER_ESOCIAL (P_EVENTO, P_COLUNAS_PADRAO, P_CODEMPMATRIZ, P_DTREF_OLD, P_SEQUENCIA_OLD, P_TPAMB, NULL/*NOMETABPAI*/, EVE.NOMETAB, EVE.NOMEVIEW, EVE.TIPO);
            END IF;

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'CONTROLE', '''I'' AS CONTROLE');
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'CHAVE', 'V.CHAVE');
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES,'STATUS','CASE WHEN NVL(ANT.CONTROLE, '' '') = ''I'' AND NVL(ANT.STATUS, '' '') = ''F'' AND NVL(ANT.ACAO, ''I'') <> ''E'' THEN ''F'' ELSE ''P'' END');
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES,'NRORECIBO,','CASE WHEN ANT.CHAVE IS NULL OR (ANT.CONTROLE = ''I'' AND (ANT.ACAO <> ''E'' OR ANT.STATUS <> ''F'')) THEN ANT.NRORECIBO ELSE NULL END,');            
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES,'NRORECIBO_ANT,','CASE WHEN ANT.CHAVE IS NULL OR (ANT.CONTROLE = ''I'' AND (ANT.ACAO <> ''E'' OR ANT.STATUS <> ''F'')) THEN ANT.NRORECIBO_ANT WHEN (ANT.CONTROLE = ''I'' AND ANT.ACAO = ''E'' AND ANT.STATUS = ''F'') THEN NULL ELSE ANT.NRORECIBO END,');
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES,' ACAO','CASE WHEN EXISTS(SELECT 1 FROM TFPEVT WHERE GRUPOESOCIAL = 1 AND TIPOEVENTO = '''||EVE.NOMEEVENTO||''') THEN CASE WHEN (ANT.NRORECIBO IS NULL AND ANT.NRORECIBO_ANT IS NULL) OR EXISTS(SELECT 1 FROM ' || EVE.NOMETAB ||'  WHERE CODEMP = V.CODEMP AND CHAVE = V.CHAVE AND DTREF < :DTREF AND NRORECIBO = NVL(ANT.NRORECIBO, ANT.NRORECIBO_ANT)) THEN ''I'' WHEN ANT.STATUS = ''F'' THEN NVL(ANT.CONTROLE, ''I'') ELSE NVL(ANT.ACAO, ''I'') END WHEN ANT.NRORECIBO IS NULL AND ANT.NRORECIBO_ANT IS NULL THEN ''I'' WHEN ANT.STATUS = ''F'' THEN NVL(ANT.CONTROLE, ''I'') ELSE NVL(ANT.ACAO, ''I'') END');

            queSql := 'INSERT INTO ' || EVE.NOMETAB || ' 
                               SELECT ' || P_INSERT_VALUES || '
                               FROM ' || EVE.NOMEVIEW || ' V '||
                                   ' LEFT JOIN (SELECT OLD.CHAVE '||
                                                    ', STATUS '||
                                                    ', NRORECIBO '||
                                                    ', NRORECIBO_ANT '||
                                                    ', ACAO '||
                                                    ', OLD.CONTROLE '||
                                               'FROM ' || EVE.NOMETAB || ' OLD '||
                                               '     LEFT JOIN TFPVAES VAES ON VAES.CHAVE = OLD.CHAVE AND OLD.DTREF = VAES.DTREF AND VAES.SEQUENCIA = OLD.SEQUENCIA '||
                                               'WHERE OLD.CODEMP = ' || TO_CHAR (P_CODEMPMATRIZ) ||
                                               '  AND OLD.TPAMB = ''' || P_TPAMB || ''' '||
                                               '  AND (VAES.CHAVE IS NOT NULL OR '||
                                               '       (NOT EXISTS(SELECT 1 '||
                                                                  'FROM TFPVAES V '|| 
                                                                  'WHERE CHAVE = OLD.CHAVE) AND OLD.DTREF = :DTREF AND OLD.SEQUENCIA = :SEQUENCIA)) '||
                                                 ') ANT ON ANT.CHAVE = V.CHAVE '||
                               'WHERE CODEMP = ' || TO_CHAR (P_CODEMPMATRIZ);
           
            IF EVE.TIPO = 'M' THEN
                queSql := queSql || ' AND V.DTREF = :DTREF';
                EXECUTE IMMEDIATE queSql USING P_DTREF, P_DTREF_OLD, P_SEQUENCIA_OLD, P_DTREF;
            ELSE
                EXECUTE IMMEDIATE queSql USING P_DTREF, P_DTREF_OLD, P_SEQUENCIA_OLD;
            END IF;

            
         ELSE                                 /*SO ENTRA AQUI PARA OS FILHOS*/
            queSql := ' INSERT INTO ' || EVE.NOMETAB || ' 
                              SELECT ' || P_INSERT_VALUES || '
                              FROM ' || EVE.NOMEVIEW || '
                              WHERE CODEMP = :CODEMPMATRIZ';
            IF EVE.TIPO = 'M' THEN
                queSql := queSql || ' AND DTREF = :DTREF';
                EXECUTE IMMEDIATE queSql USING P_CODEMPMATRIZ, P_DTREF;
            ELSE
                EXECUTE IMMEDIATE queSql USING P_CODEMPMATRIZ;
            END IF;
         END IF;
      END IF;

      -- IF P_TIPDADOS IN ('T', 'M') THEN

      --END IF;

      /* INCLUSAO DAS LINHAS DE EXCLUSAO */
      IF     (P_DTREF_OLD <> P_DTREF OR P_SEQUENCIA_OLD <> P_SEQUENCIA_NEW)
         AND (P_DTREF_OLD IS NOT NULL AND P_SEQUENCIA_OLD IS NOT NULL) THEN
         P_INSERT_COLUMNS := SNK_GET_COLUMNS_TABLE (EVE.NOMETAB);
         P_INSERT_VALUES := P_INSERT_COLUMNS;
         P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' ', '');
         P_INSERT_VALUES := 'O.' || REPLACE (P_INSERT_VALUES, ',', ',O.');
         P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.SEQUENCIA', TO_CHAR (P_SEQUENCIA_NEW));
         P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.TPAMB', '''' || P_TPAMB || '''');
         P_INSERT_VALUES := REPLACE ( P_INSERT_VALUES, 'O.DTREF', 'TO_DATE(''' || SNK_FORMAT_DATE (P_DTREF, 'DD/MM/YYYY HH24:MI:SS') || ''', ''DD/MM/YYYY HH24:MI:SS'')');

         IF EVE.NOMEEVEVENTOPAI IS NULL THEN
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.CONTROLE', '''I''');
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.CHAVE', 'O.CHAVE');
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.NRORECIBO,', 'NULL,');
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.STATUS', '''P''');
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.NRORECIBO_ANT,', 'CASE WHEN O.STATUS = ''F'' THEN O.NRORECIBO ELSE O.NRORECIBO_ANT END,');
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.ACAO', '''E''');

            queSql := ' MERGE INTO ' || EVE.NOMETAB || ' N
                            USING (SELECT ' || P_INSERT_COLUMNS || ' 
                                   FROM ' || EVE.NOMETAB || ' 
                                   WHERE CODEMP = ' || TO_CHAR (P_CODEMPMATRIZ) || '
                                     AND DTREF = TO_DATE('''|| SNK_FORMAT_DATE (P_DTREF_OLD, 'DD/MM/YYYY HH24:MI:SS') || ''', ''DD/MM/YYYY HH24:MI:SS'')
                                     AND SEQUENCIA = ' || TO_CHAR (P_SEQUENCIA_OLD)|| '
                                     AND TPAMB = '''|| P_TPAMB || '''
                                     AND (('''|| EVE.NOMEEVENTO|| ''' NOT IN (''S-2205'', ''S-2206'', ''S-2306'')) OR
                                          ('''|| EVE.NOMEEVENTO|| ''' = ''S-2205'' AND EXISTS(SELECT 1 FROM TFPFUN WHERE CODEMP||'':''||CODFUNC = CHAVE AND SITESOCIAL IN (''5'', ''T'') )) OR 
                                          ('''|| EVE.NOMEEVENTO|| ''' IN (''S-2206'', ''S-2306'') AND EXISTS(SELECT 1 FROM TFPFUN WHERE CODEMP||'':''||CODFUNC = CHAVE AND SITESOCIAL IN (''6'', ''T'') ))
                                         )
                                      AND ((STATUS = ''F'' AND NRORECIBO IS NOT NULL AND ACAO <> ''E'') OR (STATUS <> ''F'' AND ACAO = ''E'' AND NRORECIBO IS NULL) OR (STATUS <> ''F'' AND ACAO <> ''E'' AND NRORECIBO_ANT IS NOT NULL) )
                                   ) O 
                                ON (N.CODEMP = O.CODEMP 
                                AND N.DTREF = TO_DATE(''' || SNK_FORMAT_DATE (P_DTREF, 'DD/MM/YYYY HH24:MI:SS') || ''', ''DD/MM/YYYY HH24:MI:SS'') 
                                AND N.SEQUENCIA = '|| TO_CHAR (P_SEQUENCIA_NEW) || ' 
                                AND N.TPAMB = '''|| P_TPAMB|| ''' 
                                AND N.CHAVE = O.CHAVE 
                                )
                                WHEN NOT MATCHED THEN INSERT (' || P_INSERT_COLUMNS || ')
                                       VALUES (' || P_INSERT_VALUES || ' ) ';

            EXECUTE IMMEDIATE queSql;
         ELSE                                 /*SO ENTRA AQUI PARA OS FILHOS*/
            queSql := ' MERGE INTO ' || EVE.NOMETAB || ' N
                                USING (SELECT ' || P_INSERT_COLUMNS || ' 
                                       FROM ' || EVE.NOMETAB || ' 
                                       WHERE CODEMP = ' || TO_CHAR (P_CODEMPMATRIZ) || '
                                         AND DTREF = TO_DATE(''' || SNK_FORMAT_DATE (P_DTREF_OLD, 'DD/MM/YYYY HH24:MI:SS') || ''', ''DD/MM/YYYY HH24:MI:SS'')
                                         AND SEQUENCIA = ' || TO_CHAR (P_SEQUENCIA_OLD) || '
                                         AND TPAMB = ''' || P_TPAMB|| '''
                                          ) O 
                                ON (N.CODEMP = O.CODEMP AND
                                    N.DTREF = TO_DATE(''' || SNK_FORMAT_DATE (P_DTREF, 'DD/MM/YYYY HH24:MI:SS') || ''', ''DD/MM/YYYY HH24:MI:SS'') AND
                                    N.SEQUENCIA = ' || TO_CHAR (P_SEQUENCIA_NEW) || ' AND
                                    N.TPAMB = O.TPAMB AND
                                    N.CHAVE = O.CHAVE AND 
                                    EXISTS(SELECT 1
                                            FROM '||EVE.NOMEEVEVENTOPAI||' P
                                            WHERE P.CODEMP = O.CODEMP
                                              AND P.DTREF = TO_DATE(''' || SNK_FORMAT_DATE (P_DTREF, 'DD/MM/YYYY HH24:MI:SS') || ''', ''DD/MM/YYYY HH24:MI:SS'') 
                                              AND P.SEQUENCIA = ' || TO_CHAR (P_SEQUENCIA_NEW)|| '
                                              AND P.TPAMB = O.TPAMB
                                              AND P.CHAVE = O.CHAVE
                                              AND P.ACAO = ''E'') )
                                WHEN NOT MATCHED THEN INSERT (' || P_INSERT_COLUMNS || ')
                                                      VALUES (' || P_INSERT_VALUES || ' ) ';

            EXECUTE IMMEDIATE queSql;
         END IF;
      END IF;

      FOR EVEF IN (SELECT NOMETAB,
                      NOMEEVENTO,
                      NOMEVIEW,
                      NOMEEVEVENTOPAI
                   FROM TFPMON
                   WHERE TIPO IN ('C', 'M')
                     AND NOMEEVEVENTOPAI = EVE.NOMETAB
                     AND ( (P_TPAMB = 'P' AND AMBPRODUCAO = 'L') OR 
                           (P_TPAMB = 'T' AND AMBTESTE = 'L'))
                   ORDER BY NOMETAB) LOOP
         queSql := NULL;

         SNK_PROCESSA_DADOS_ESOCIAL (P_CODEMPMATRIZ,
                                     P_DTREF,
                                     P_TPAMB,
                                     P_TIPDADOS,
                                     EVEF.NOMEEVENTO,
                                     P_SEQUENCIA_NEW,
                                     EVEF.NOMETAB,
                                     P_SEQUENCIA_NEW,
                                     P_RESULT);
      END LOOP;

      P_RESULT := P_SEQUENCIA_NEW;
   END LOOP; 
   DELETE FROM TFPVAES;
EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK;
      DELETE FROM TFPVAES;

      IF queSql IS NOT NULL
      THEN
         P_DTLOG := SYSDATE;

         SELECT COUNT (1) + 1
           INTO P_SEQLOG
           FROM LOGESOCIAL
          WHERE DTLOG = P_DTLOG;

         INSERT INTO LOGESOCIAL (DTLOG, SEQUENCIA, COMANDO)
            SELECT P_DTLOG, P_SEQLOG, SUBSTR (queSql, 1, 4000) FROM DUAL;

         IF LENGTH (queSql) > 4000
         THEN
            INSERT INTO LOGESOCIAL (DTLOG, SEQUENCIA, COMANDO)
               SELECT P_DTLOG, P_SEQLOG + 1, SUBSTR (queSql, 4001) FROM DUAL;
         END IF;

         COMMIT;
      END IF;

      P_MSG := P_MSG || SUBSTR (SQLERRM, 1, 3950);
      RAISE_APPLICATION_ERROR (-20101, P_MSG);
END;
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 08/05/2018 15:17:17
Num.Script: 54583-0-1000
Nro. O.S. : 1178708
Nome      : INSERE - THOOBJ - 5458200
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_PROCESSA_DADOS_ESOCIAL
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210011
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_PROCESSA_DADOS_ESOCIAL' NOMEOBJ, 54582 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, '3fc1fb8fe55dfae48e24ec5915a954f5' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_PROCESSA_DADOS_ESOCIAL' and THO.hashcode = '3fc1fb8fe55dfae48e24ec5915a954f5')
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 08/05/2018 15:17:16
Num.Script: 54584-0-0
Nro. O.S. : 1178708
Nome      : Alterar - VGF_EVENTO_S1200_DMDEV_RPA 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VGF_EVENTO_S1200_DMDEV_RPA 
NomeObjeto: VGF_EVENTO_S1200_DMDEV_RPA 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1200_DMDEV_RPA /* REMUNPERAPUR */
AS
/* INFORMAÇÕES RELATIVAS A REMUNERAÇÃO DO TRABALHADOR NO PERÍODO DE APURAÇÃO (REMUNPERAPUR) */

SELECT DISTINCT
  BASE.CODEMP
, BASE.DTREF
, BASE.CHAVE1200
, BASE.IDEDMDEV
, BASE.CODLOTACAO
, CASE WHEN BASE.MATRICULA IS NULL THEN BASE.CPF ELSE BASE.MATRICULA END AS CHAVE
, CAST(BASE.MATRICULA AS VARCHAR2(30)) AS MATRICULA
, (SELECT INDSIMPLES FROM TFPEMP E WHERE E.CODEMP = BASE.CODEMP) AS INDSIMPLES
, BASE.GRAUEXP
FROM VGF_EVENTO_S1200_BASE BASE
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 08/05/2018 15:17:16
Num.Script: 54585-0-0
Nro. O.S. : 1178708
Nome      : Alterar - VGF_EVENTO_S1200_DMDEV_IRPA 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VGF_EVENTO_S1200_DMDEV_IRPA 
NomeObjeto: VGF_EVENTO_S1200_DMDEV_IRPA 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1200_DMDEV_IRPA /* ITENSREMUN */
AS
 /* REGISTRO QUE RELACIONA AS RUBRICAS QUE COMPÕEM A REMUNERAÇÃO DO TRABALHADOR.(ITENSREMUN) */
SELECT   
  RUB.CODEMP
, RUB.DTREF
, RUB.CHAVE1200
, RUB.IDEDMDEV
, RUB.CODLOTACAO
, RUB.MATRICULA
, RUB.CODRUBR AS CHAVE
, CAST(RUB.CODRUBR AS VARCHAR2(30)) AS CODRUBR
, CAST(RUB.IDETABRUBR AS VARCHAR2(8)) AS IDETABRUBR
, CAST(MAX(RUB.QTDRUBR) AS FLOAT) AS QTDRUBR
, CAST(RUB.FATORRUBR AS FLOAT) AS FATORRUBR
, CAST(RUB.VRUNIT AS FLOAT) AS VRUNIT
, CAST(SUM(RUB.VRRUBR) AS FLOAT) AS VRRUBR
FROM VGF_EVENTO_BASERUBRICA RUB
WHERE RUB.IDEDMDEV <> 'R'
  AND RUB.DTREF >= TRUNC(RUB.DTTERCEIRAFASE,'MM')
GROUP BY
  RUB.CODEMP
, RUB.DTREF
, RUB.CHAVE1200
, RUB.IDEDMDEV
, RUB.CODLOTACAO
, RUB.MATRICULA
, RUB.CODRUBR
, RUB.IDETABRUBR
, RUB.FATORRUBR
, RUB.VRUNIT
, RUB.CODEMPFUNC 
, RUB.CODFUNC
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 08/05/2018 15:17:15
Num.Script: 54586-0-0
Nro. O.S. : 1178708
Nome      : Alterar -VGF_EVENTO_S2230
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VGF_EVENTO_S2230
NomeObjeto: VGF_EVENTO_S2230
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2230
AS
SELECT DISTINCT
  VEMP.TPINSCEMPREGADOR
, VEMP.NRINSCEMPREGADOR
, CAST(FUN.CPF AS VARCHAR2(11)) AS cpfTrab
, CAST(FUN.PIS AS VARCHAR2(11)) AS nisTrab
, CAST(FUN.MATRICULA AS VARCHAR2(30))  AS matricula
, FUN.CODCATEGESOCIAL AS codCateg
, CASE WHEN FUN.CODCATEGESOCIAL IN (701,711,712,721,722,723,731,734,738,741,751,761,771,781) THEN 1 ELSE 0 END AS tem2300
, OCO.DTINICOCOR AS dtIniAfast
, HIS.CODMOTAFAST AS codMotAfast
, CASE WHEN OCO.NUREINCID <> 0 THEN 'S' ELSE 'N' END AS infoMesmoMtv
, AFT.TIPACIDTRANSITO AS tpAcidTransito
, OCO.DESCROCOR AS observacao
, CASE WHEN HIS.CODMOTAFAST = 14 THEN AFT.CNPJCESSIONARIO ELSE NULL END AS cnpjCess
, CASE WHEN HIS.CODMOTAFAST = 14 THEN AFT.INFOONUS ELSE NULL END AS infOnus
, CASE WHEN HIS.CODMOTAFAST = 24 THEN AFT.CNPJSINDICATO ELSE NULL END AS cnpjSind
, CASE WHEN HIS.CODMOTAFAST = 24 THEN AFT.INFOONUSREMUN ELSE NULL END AS infOnusRemun
, CASE WHEN OCO.ORIGRETIF = '' THEN 0 WHEN OCO.ORIGRETIF IS NULL THEN 0 ELSE OCO.ORIGRETIF END AS origRetif  
, (SELECT CASE WHEN TIPOPROCESSO IS NULL THEN NULL
               WHEN TIPOPROCESSO = 'A' THEN '1' ELSE '2' END FROM TFPPSS PSS WHERE PSS.NUPROCESSO = OCO.NUPROCESSO) AS tpProc               
, (SELECT NUMPROCESSO FROM TFPPSS PSS WHERE PSS.NUPROCESSO = OCO.NUPROCESSO) AS nrProc               
, case when OCO.DTFINALOCOR <= sysdate + 10 then OCO.DTFINALOCOR  ELSE NULL END AS dtTermAfast
, VEMP.CODEMPMATRIZ AS CODEMP
, CAST(OCO.NUOCOR AS VARCHAR2(100)) AS CHAVE
, CAST(FUN.CODEMP || ':' || FUN.CODFUNC AS VARCHAR2(100)) AS "CHAVE2200"
FROM TFPFUN FUN
, TFPOCO OCO LEFT JOIN TFPAFT AFT  ON OCO.NUOCOR = AFT.NUOCOR 
, TFPHIS HIS
, VGF_EVENTO_EMPREGADOR VEMP
WHERE OCO.CODEMP = FUN.CODEMP
AND OCO.CODFUNC = FUN.CODFUNC
AND VEMP.CODEMP = FUN.CODEMP
AND OCO.CODHISTOCOR = HIS.CODHISTOCOR
AND VEMP.DTCARGAINICIAL IS NOT NULL
AND FUN.SITESOCIAL IS NOT NULL
AND OCO.DTINICOCOR >= VEMP.DTCARGAINICIAL
AND HIS.CODMOTAFAST IS NOT NULL
AND (OCO.DTINICOCOR >= SYSDATE - 38 OR OCO.DTFINALOCOR >= SYSDATE - 38 OR OCO.DTFINALOCOR IS NULL OR 
     EXISTS (SELECT 1 FROM TFPATT ATT  WHERE ATT.NUOCOR  = OCO.NUOCOR AND ATT.DHALTER  >= SYSDATE - 38) OR
     EXISTS (SELECT 1 FROM TFPAFT AFT2 WHERE AFT2.NUOCOR = OCO.NUOCOR AND AFT2.DHALTER >= SYSDATE - 38))
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 11/05/2018 16:13:50
Num.Script: 54588-0-0
Nro. O.S. : 1178708
Nome      : Alterar - VGF_EVENTO_S2300_BASE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VGF_EVENTO_S2300_BASE
NomeObjeto: VGF_EVENTO_S2300_BASE
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2300_BASE
AS
   SELECT VEMP.TPINSCEMPREGADOR,
          VEMP.NRINSCEMPREGADOR,
          FUN.CPF AS "CPFTRAB",
          FUN.PIS AS "NISTRAB",
          FUN.NOMEFUNC AS "NMTRAB",
          FUN.DTALTER AS DTALTERACAO,
          CAST (NULL AS DATE) AS DTREF,
          CAST (FUN.SEXO AS CHAR (1)) AS "SEXO",
         CASE
             WHEN RACAFUNCIONARIO = 2 THEN 1
             WHEN RACAFUNCIONARIO = 4 THEN 2
             WHEN RACAFUNCIONARIO = 8 THEN 3
             WHEN RACAFUNCIONARIO = 6 THEN 4
             WHEN RACAFUNCIONARIO = 0 THEN 5
             ELSE 6
          END
             AS "RACACOR",
          CASE
             WHEN FUN.ESTADOCIVIL = 3 THEN 5
             WHEN FUN.ESTADOCIVIL IN (5, 6) THEN 3
             WHEN FUN.ESTADOCIVIL = 7 THEN 2
             ELSE FUN.ESTADOCIVIL
          END
             AS "ESTCIV",
          CAST (
             CASE
                WHEN FUN.NIVESC = 10 THEN 11
                WHEN FUN.NIVESC = 11 THEN 12
                ELSE FUN.NIVESC
             END AS VARCHAR2 (2))
             AS "GRAUINSTR",
          FUN.NMSOCIAL AS "NMSOC",
          FUN.DTNASC AS "DTNASCTONASCIMENTO",
          (SELECT CODMUNFIS
             FROM TSICID
            WHERE CODCID = FUN.CIDNASC)
             AS "CODMUNICNASCIMENTO",
          (SELECT UFS.UF
             FROM TSIUFS UFS, TSICID CID
            WHERE UFS.CODUF = CID.UF AND CID.CODCID = FUN.CIDNASC)
             AS "UFNASCIMENTO",
          (SELECT SUBSTR (CAST (CODPAISFIS AS VARCHAR2(5)), 1, 3)
             FROM TSIPAI PAI, TSIUFS UFS, TSICID CID
            WHERE     UFS.CODUF = CID.UF
                  AND CID.CODCID = FUN.CIDNASC
                  AND PAI.CODPAIS = UFS.CODPAIS)
             AS "PAISNASCTONASCIMENTO",
          (SELECT SUBSTR (CAST (CODPAISFIS AS VARCHAR2(5)), 1, 3)
             FROM TSIPAI PAI
            WHERE PAI.CODPAIS = FUN.CODPAISNAC)
             AS "PAISNACNASCIMENTO",
          FUN.NOMEMAE AS "NMMAENASCIMENTO",
          FUN.NOMEPAI AS "NMPAINASCIMENTO",
          CAST (FUN.NUMCPS AS VARCHAR2 (11)) AS "NRCTPS",
          FUN.SERIECPS AS "SERIECTPS",
          (SELECT UF
             FROM TSIUFS
            WHERE CODUF = FUN.UFCPS)
             AS "UFCTPS",
          FUN.NRORIC AS "NRRIC",
          FUN.ORGAORIC AS "ORGAOEMISSORRIC",
          FUN.DTEMIRIC AS "DTEXPEDRIC",
          REPLACE (
             REPLACE (REPLACE (REPLACE (FUN.IDENTIDADE, '-', ''), '/', ''),
                      '.',
                      ''),
             ' ',
             '')			
             AS "NRRG",
          FUN.ORGAORG AS "ORGAOEMISSORRG",
          FUN.DTRG AS "DTEXPEDRG",
          SUBSTR (FUN.RNE, 1, 14) AS NRRNE,
          FUN.ORGAORNE AS "ORGAOEMISSORRNE",
          FUN.DTEXPRNE AS "DTEXPEDRNE",
          FUN.NROC AS "NROC",
          FUN.ORGAOOC AS "ORGAOEMISSOROC",
          FUN.DTEXPOC AS "DTEXPEDOC",
          FUN.DTVALOC AS "DTVALIDOC",
          case when FUN.NROCNH = '' then null else FUN.NROCNH end AS "NRREGCNH",
          FUN.DTEXPCNH AS "DTEXPEDCNH",
          (SELECT UF
             FROM TSIUFS
            WHERE CODUF = FUN.UFCNH)
             AS "UFCNH",
          FUN.VENCIMENTOCNH AS "DTVALIDCNH",
          FUN.PRIMEIRACNH AS "DTPRIHAB",
          SUBSTR (FUN.CATEGORIACNH, 1, 2) AS "CATEGORIACNH",
          EN.CODLOGRADOURO AS "TPLOGRADBRASIL",
          EN.NOMEEND AS "DSCLOGRADBRASIL",
          FUN.NUMEND AS "NRLOGRADBRASIL",
          FUN.COMPLEMENTO AS "COMPLEMENTOBRASIL",
          BAI.NOMEBAI AS "BAIRROBRASIL",
          FUN.CEP AS "CEPBRASIL",
          CAST (CID.CODMUNFIS AS NUMBER(10)) AS "CODMUNICBRASIL",
          UFS.UF AS "UFBRASIL",
          CASE
             WHEN SUBSTR (CAST(PA.CODPAISFIS AS VARCHAR2(10)), 1, 3) <> 105
             THEN
                SUBSTR (CAST(PA.CODPAISFIS AS VARCHAR2(10)), 1, 3)
             ELSE
                NULL
          END
             AS "PAISRESID",
          CASE
             WHEN SUBSTR (CAST(PA.CODPAISFIS AS VARCHAR2(10)), 1, 3) <> 105 THEN EN.NOMEEND
             ELSE NULL
          END
             AS "DSCLOGRADEXTERIOR",
          CASE
             WHEN SUBSTR (CAST(PA.CODPAISFIS AS VARCHAR2(10)), 1, 3) <> 105 THEN FUN.NUMEND
             ELSE NULL
          END
             AS "NRLOGRADEXTERIOR",
          CASE
             WHEN SUBSTR (CAST(PA.CODPAISFIS AS VARCHAR2(10)), 1, 3) <> 105 THEN FUN.COMPLEMENTO
             ELSE NULL
          END
             AS "COMPLEMENTOEXTERIOR",
          CASE
             WHEN SUBSTR (CAST(PA.CODPAISFIS AS VARCHAR2(10)), 1, 3) <> 105 THEN BAI.NOMEBAI
             ELSE NULL
          END
             AS "BAIRROEXTERIOR",
          CASE
             WHEN SUBSTR (CAST(PA.CODPAISFIS AS VARCHAR2(10)), 1, 3) <> 105 THEN CID.NOMECID
             ELSE NULL
          END
             AS "NMCIDEXTERIOR",
          CASE
             WHEN SUBSTR (CAST(PA.CODPAISFIS AS VARCHAR2(10)), 1, 3) <> 105 THEN FUN.CAIXAPOSTAL
             ELSE NULL
          END
             AS "CODPOSTALEXTERIOR",
          FUN.DTCHEGPAIS AS "DTCHEGADA",
          FUN.CLASSTRABESTRANG,
          FUN.CASADOBR AS "CASADOBR",
          FUN.FILHOSBR AS "FILHOSBR",
          CASE WHEN FUN.TIPDEFICIENCIA IN (0, 5, 7) THEN 'N' ELSE 'S' END
             AS "DEFFISICA",
          CASE WHEN FUN.TIPDEFICIENCIA = 3 THEN 'S' ELSE 'N' END
             AS "DEFVISUAL",
          CASE WHEN FUN.TIPDEFICIENCIA = 2 THEN 'S' ELSE 'N' END
             AS "DEFAUDITIVA",
          CASE WHEN FUN.TIPDEFICIENCIA = 8 THEN 'S' ELSE 'N' END
             AS "DEFMENTAL",
          CASE WHEN FUN.TIPDEFICIENCIA = 4 THEN 'S' ELSE 'N' END
             AS "DEFINTELECTUAL",
          CASE WHEN FUN.TIPDEFICIENCIA = 6 THEN 'S' ELSE 'N' END
             AS "REABREADAP",
          NULL AS "OBSERVACAO",
          CASE
             WHEN LENGTH (TRIM (FUN.TELEFONE)) < 10 THEN NULL
             ELSE REPLACE (FUN.TELEFONE, ' ', '')
          END
             AS "FONEPRINC",
          CASE
             WHEN LENGTH (TRIM(FUN.CELULAR)) < 10 THEN NULL
             ELSE REPLACE (FUN.CELULAR, ' ', '')
          END
             AS "FONEALTERNAT",
          REPLACE (FUN.EMAIL, ' ', '') AS "EMAILPRINC",
          NULL AS EMAILALTERNAT,
          CASE WHEN FUN.DTADM < VEMP.DTCARGAINICIAL THEN 'S' ELSE 'N' END
             AS CADINI,
          FUN.CODCATEGESOCIAL AS CODCATEG,
          FUN.DTADM AS DTINICIO,
          CASE
             WHEN FUN.CODCATEGESOCIAL IN (305, 721, 722, 771, 901)
             THEN
                NULL
             ELSE
                (SELECT CASE WHEN TIPHORANOTURNA = 'U' THEN 1 ELSE 2 END
                   FROM TFPCBO CBO
                  WHERE CBO.CODCBO =
                           CASE
                              WHEN (SELECT 1
                                      FROM TSIPAR
                                     WHERE     CHAVE =
                                                  'FPUTILIZACBO'
                                           AND INTEIRO = 0) > 0
                              THEN
                                 (SELECT CODCBO
                                    FROM TFPCAR C
                                   WHERE C.CODCARGO = FUN.CODCARGO)
                              ELSE
                                 (SELECT CODCBO
                                    FROM TFPFCO F
                                   WHERE F.CODFUNCAO = FUN.CODFUNCAO)
                           END)
          END
             AS "NATATIVIDADE",
           CAST (CASE
                   WHEN (SELECT 1
                           FROM TSIPAR
                          WHERE     CHAVE = 'FPUTILIZACBO'
                                AND NVL (INTEIRO, 0) = 0) > 0
                   THEN
                      FUN.CODCARGO
                   ELSE
                      FUN.CODFUNCAO
                END AS VARCHAR2 (30))
             AS "CODCARGO",
          CAST (CASE
                   WHEN (SELECT LOGICO
                           FROM TSIPAR
                          WHERE CHAVE = 'FPTRIBUNAL') = 'S'
                   THEN
                      (SELECT CODFUNCAO
                         FROM TFPFCO
                        WHERE CODFUNCAO = FUN.CODFUNCAO)
                   ELSE
                      0
                END AS VARCHAR2 (30))
             AS "CODFUNCAO",
          CAST (
             CASE
                WHEN FUN.TIPSAL = 5 AND NVL (FUN.SALBASE, 0) = 0 THEN 0
                ELSE FUN.SALBASE
             END AS FLOAT)
             AS "VRSALFX",
          CASE
             WHEN FUN.TIPSAL = 1 THEN 5
             WHEN FUN.TIPSAL = 2 THEN 4
             WHEN FUN.TIPSAL = 3 THEN 3
             WHEN FUN.TIPSAL = 4 THEN 2
             WHEN FUN.TIPSAL = 5 AND NVL (FUN.SALBASE, 0) > 0 THEN 1
             WHEN FUN.TIPSAL = 5 AND NVL (FUN.SALBASE, 0) = 0 THEN 7
             WHEN FUN.COMPSALARIO = 2 THEN 8
             ELSE 6
          END
             AS "UNDSALFIXO",
         CASE
             WHEN FUN.TIPSAL = 5 AND NVL (FUN.SALBASE, 0) = 0
             THEN
                FUN.OBSVARIAVEL
             ELSE
                NULL
          END
             AS "DSCSALVAR",
          1 AS "OPCFGTS",          -- pensao que estagiario nao devamos mandar
          FUN.DTOPTFGTS AS "DTOPCFGTS",
          /* infoDirigenteSindical -  NÃ£o temos caso de uso no sistema */
          CAST (NULL AS NUMBER(5)) AS CATEGORIGDIRSIND,
          NULL AS CNPJORIGDIRSIND,
          CAST (NULL AS DATE) AS DTADMORIGDIRSIND,
          NULL AS MATRICORIGDIRSIND,
          FUN.CODCATEGTRABCEDIDO AS CATEGORIGCED,
          FUN.CNPJEMPCED AS CNPJCED,
          FUN.MATRICULAEMPCED AS MATRICCED,
          FUN.DTADMEMPCED AS DTADMCED,
          FUN.TPREGTRABCED,
          FUN.TPREGPREVCED,
          FUN.INFOONUS AS INFONUSCED,
          EST.NATESTAGIO AS natEstagio,
          CAST (EST.NIVESTAGIO AS CHAR (1)) AS nivEstagio,
          EST.AREAATUACAO AS areaAtuacao,
          EST.NRAPOL AS nrApol,
          EST.VLRBOLSA AS vlrBolsa,
          EST.DTPREVTERM AS dtPrevTerm,
          EST.CNPJINSTENSINO AS cnpjInstEnsino,
          SUBSTR (EST.NMRAZAOINSTENS, 1, 100) AS nmRazaoinstens,
          (SELECT NOMEEND
             FROM TSIEND
            WHERE CODEND = EST.CODENDINSTENS)
             AS dscLogradinstens,
          EST.NRLOGRADINSTENS AS nrLogradinstens,
          (SELECT NOMEBAI
             FROM TSIBAI
            WHERE CODBAI = EST.CODBAIINSTENS)
             AS bairroinstens,
          EST.CEPINSTENS AS cepinstens,
          (SELECT CODMUNFIS
             FROM TSICID
            WHERE CODCID = EST.CODCIDINSTENS)
             AS codMunicinstens,
          (SELECT UFS.UF
             FROM TSICID CID, TSIUFS UFS
            WHERE CID.UF = UFS.CODUF AND CID.CODCID = EST.CODCIDINSTENS)
             AS ufinstens,
          EST.CNPJAGTINTEG AS cnpjAgntInteg,
          SUBSTR (EST.NMRAZAOAGTINTEG, 1, 100) AS nmRazaoAgntInteg,
          (SELECT NOMEEND
             FROM TSIEND
            WHERE CODEND = EST.CODENDAGTINTEG)
             AS dscLogradAgntInteg,
          EST.NRLOGRADAGTINTEG AS nrLogradAgntInteg,
          (SELECT NOMEBAI
             FROM TSIBAI
            WHERE CODBAI = EST.CODBAIAGTINTEG)
             AS bairroAgntInteg,
          EST.CEPAGTINTEG AS cepAgntInteg,
          (SELECT CODMUNFIS
             FROM TSICID
            WHERE CODCID = EST.CODCIDAGTINTEG)
             AS codMunicAgntInteg,
          (SELECT UFS.UF
             FROM TSICID CID, TSIUFS UFS
            WHERE CID.UF = UFS.CODUF AND CID.CODCID = EST.CODCIDAGTINTEG)
             AS ufAgntInteg,
          EST.CPFSUPERVISOR AS cpfSupervisor,
          EST.NMSUPERVISOR AS nmSuperv,
          CASE
             WHEN ( (SELECT NVL (OCO.DTINICOCOR, '')
                       FROM TFPOCO OCO, TFPHIS H
                      WHERE     OCO.CODEMP = FUN.CODEMP
                            AND OCO.CODFUNC = FUN.CODFUNC
                            AND OCO.CODHISTOCOR = H.CODHISTOCOR
                            AND H.AFASTAMENTO IN ('A', 'D', 'M', 'G', 'Y')
                            AND H.CODMOTAFAST IS NOT NULL
                            AND OCO.DTFINALOCOR IS NULL) <
                      VEMP.DTCARGAINICIAL)
             THEN
                (SELECT NVL (OCO.DTINICOCOR, '')
                   FROM TFPOCO OCO, TFPHIS H
                  WHERE     OCO.CODEMP = FUN.CODEMP
                        AND OCO.CODFUNC = FUN.CODFUNC
                        AND OCO.CODHISTOCOR = H.CODHISTOCOR
                        AND H.AFASTAMENTO IN ('A', 'D', 'M', 'G', 'Y')
                        AND H.CODMOTAFAST IS NOT NULL
                        AND OCO.DTFINALOCOR IS NULL)
             ELSE
                NULL
          END
             AS "DTINIAFAST",
          CASE
             WHEN ( (SELECT NVL (OCO.DTINICOCOR, '')
                       FROM TFPOCO OCO, TFPHIS H
                      WHERE     OCO.CODEMP = FUN.CODEMP
                            AND OCO.CODFUNC = FUN.CODFUNC
                            AND OCO.CODHISTOCOR = H.CODHISTOCOR
                            AND H.AFASTAMENTO IN ('A', 'D', 'M', 'G', 'Y')
                            AND H.CODMOTAFAST IS NOT NULL
                            AND OCO.DTFINALOCOR IS NULL) <
                      VEMP.DTCARGAINICIAL)
             THEN
                (SELECT NVL (H.CODMOTAFAST, '')
                   FROM TFPOCO OCO, TFPHIS H
                  WHERE     OCO.CODEMP = FUN.CODEMP
                        AND OCO.CODFUNC = FUN.CODFUNC
                        AND OCO.CODHISTOCOR = H.CODHISTOCOR
                        AND H.AFASTAMENTO IN ('A', 'D', 'M', 'G', 'Y')
                        AND H.CODMOTAFAST IS NOT NULL
                        AND OCO.DTFINALOCOR IS NULL)
             ELSE
                NULL
          END
             AS "CODMOTAFAST",
          CASE
             WHEN (FUN.DTDEM < VEMP.DTCARGAINICIAL) THEN FUN.DTDEM
             ELSE NULL
          END
             AS "DTTERM",
          VEMP.CODEMPMATRIZ AS CODEMP,
          CAST (CAST(FUN.CODEMP AS VARCHAR2(10)) ||':'|| CAST(FUN.CODFUNC AS VARCHAR2(10)) AS VARCHAR2 (100))
             AS "CHAVE",
          FUN.SITESOCIAL,
          SNK_GET_TPAMB_ESOCIAL AS TPAMB
     FROM TFPFUN FUN
          LEFT JOIN TFPEST EST
             ON FUN.CODEMP = EST.CODEMP AND FUN.CODFUNC = EST.CODFUNC
          LEFT JOIN TSIBAI BAI ON BAI.CODBAI = FUN.CODBAI
          LEFT JOIN TSICID CID ON CID.CODCID = FUN.CODCID
          LEFT JOIN TSIUFS UFS ON UFS.CODUF = CID.UF
          LEFT JOIN TSIPAI PA ON PA.CODPAIS = UFS.CODPAIS
          LEFT JOIN TSIEND EN ON EN.CODEND = FUN.CODEND,
          VGF_EVENTO_EMPREGADOR VEMP
    WHERE     FUN.CODEMP = VEMP.CODEMP
          AND VEMP.DTCARGAINICIAL IS NOT NULL
          AND FUN.CODCATEGESOCIAL >= 701
          AND FUN.SITESOCIAL IN ('O', '5', '6', 'T')
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 07/05/2018 11:13:47
Num.Script: 54606-0-0
Nro. O.S. : 1115898
Nome      : Alterar - STP_KEYGEN_TGFNUM 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - STP_KEYGEN_TGFNUM 
NomeObjeto: STP_KEYGEN_TGFNUM 
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE STP_KEYGEN_TGFNUM ( P_ARQUIVO IN VARCHAR, P_CODEMP IN INT, P_TABELA IN VARCHAR, P_CAMPO IN VARCHAR, P_DSYNC IN INT, P_ULTCOD OUT NUMBER) 
AS
  PRAGMA AUTONOMOUS_TRANSACTION;

  P_LOTE        INT;
  P_CODCHECA    NUMBER(10);
  P_MINCOD      NUMBER(10);
  P_MAXCOD      NUMBER(10);
  P_MAXCODNUM   NUMBER(10);
  P_MINTSDCOD   NUMBER(10);
  P_MAXTSDCOD   NUMBER(10);
  P_COUNT       NUMBER(10);
  P_SERIE       VARCHAR2(3);
  P_LOCAL       VARCHAR2(255);
  P_TABELASEL   VARCHAR2(255);
  P_SQL         VARCHAR2(4000);
  P_FILTRO      VARCHAR2(4000);
  P_BUSCAFAIXA  BOOLEAN;
  P_BUSCASEQ    BOOLEAN;
  P_RECOMECOU   BOOLEAN;
  P_TEMDSYNC    BOOLEAN;
  P_TEMTGFNUM   BOOLEAN;
  ERRORDSYNC    EXCEPTION;


  CURSOR P_CUR_FAIXAS IS
    SELECT CODIGOMIN, CODIGOMAX
    FROM TSDNUM NUM
    WHERE NOMETAB = P_ARQUIVO
    AND NOMENO = (SELECT TEXTO FROM TSDPAR WHERE CHAVE = 'DATASYNCNOMENO' AND CODUSU = 0)
    AND CODIGOMAX >= P_ULTCOD
    ORDER BY CODIGOMIN;

  TYPE CUR_TYPE IS REF CURSOR;
  P_CUR_CHECAR  CUR_TYPE;
BEGIN

  P_TEMDSYNC := P_DSYNC > 0;
  P_MINTSDCOD := 1;
  P_ULTCOD := 0;
  
  IF SUBSTR(P_TABELA, 1, 3) = 'LOT' THEN
    P_TABELASEL := 'TCBLOT';
  ELSIF P_TABELA = 'RENEG' THEN
    P_TABELASEL := 'TGFREN';
  ELSIF P_TABELA = 'TGFMBC_TRF' THEN
    P_TABELASEL := 'TGFMBC';
  ELSE
    P_TABELASEL := P_TABELA;
  END IF;  

  IF P_TABELA = 'TGFCAB' THEN
    P_TABELASEL := '(SELECT NUNOTA FROM TGFCAB UNION SELECT NUNOTA FROM TGFCAN) ' || P_TABELASEL;
  END IF;
  
  BEGIN

    SELECT SERIE
    INTO P_SERIE
    FROM (
      SELECT SERIE
      FROM TGFNUM NUM
      WHERE ARQUIVO = P_ARQUIVO
      AND CODEMP = P_CODEMP
      ORDER BY CASE SERIE 
                 WHEN 'E' THEN 1 
                 WHEN '.' THEN 2 
                 ELSE 3 
               END
    )
    WHERE ROWNUM = 1;   
     
    SELECT (NVL(ULTCOD,0) + 1), NVL(ULTNOTATALAO, 999999999)
    INTO P_ULTCOD, P_MAXCODNUM
    FROM TGFNUM
    WHERE ARQUIVO = P_ARQUIVO
    AND CODEMP = P_CODEMP
    AND SERIE = P_SERIE
    FOR UPDATE;
    
    P_TEMTGFNUM := TRUE;
  EXCEPTION WHEN NO_DATA_FOUND THEN
    P_ULTCOD := 1;
    P_MAXCODNUM := 999999999;
    P_TEMTGFNUM := FALSE;
  END;
  
  IF P_ARQUIVO = 'NUMNOTAZZ' THEN
    P_FILTRO := ' AND DESDOBDUPL = ''ZZ'' ';
    P_MAXCODNUM := 9999999999;
  END IF;
  
  IF P_MAXCODNUM > 32767 AND P_TABELA <> 'TGFCAB' THEN
    SELECT COUNT(1)
    INTO P_COUNT
    FROM USER_TAB_COLUMNS
    WHERE TABLE_NAME = P_TABELASEL
    AND COLUMN_NAME = P_CAMPO
    AND DATA_PRECISION = 5;
    IF P_COUNT > 0 THEN
      P_MAXCODNUM := 32767;
    END IF;
  END IF;
  P_MAXTSDCOD := P_MAXCODNUM;
    
  IF P_TEMDSYNC THEN
    SELECT COUNT(1) --VERIFICA SE EXISTE FAIXA DE NUMERAÇÃO CONFIGURADA PARA ESTA TABELA 
    INTO P_COUNT
    FROM TSDNUM NUM
    WHERE NOMETAB = P_ARQUIVO
    AND NOMENO = (SELECT TEXTO FROM TSDPAR WHERE CHAVE = 'DATASYNCNOMENO' AND CODUSU = 0)
    AND ROWNUM = 1;
      
    IF P_COUNT = 0 THEN
      P_TEMDSYNC := FALSE;
    ELSE
      OPEN P_CUR_FAIXAS;
      FETCH P_CUR_FAIXAS INTO P_MINTSDCOD, P_MAXTSDCOD;
      IF P_CUR_FAIXAS%NOTFOUND THEN
        P_LOCAL := 'FAIXA INICIAL';
        RAISE ERRORDSYNC;                                
      END IF;
      
      --SE ENCONTROU, ALTERA PARA O MENOR DA FAIXA, SE FOR MAIOR QUE O ULTICOD ENCONTRADO;
      P_ULTCOD := GREATEST(P_ULTCOD, P_MINTSDCOD);
    END IF;
      
  END IF;
  
  IF NOT P_TEMTGFNUM THEN --TGFNUM AINDA NÃO EXISTE
    P_SERIE := 'E';

    IF P_TEMDSYNC THEN
      LOOP
        P_SQL := 'SELECT NVL(MAX(' || P_CAMPO || '), ' || TO_CHAR(P_MINTSDCOD-1) || ') + 1 FROM ' || P_TABELASEL || ' WHERE ' || P_CAMPO || 
                 ' IS NOT NULL AND ' || P_CAMPO || ' BETWEEN ' || TO_CHAR(P_MINTSDCOD) || ' AND ' || TO_CHAR(P_MAXTSDCOD) || P_FILTRO;
        BEGIN
          EXECUTE IMMEDIATE P_SQL INTO P_ULTCOD;
        EXCEPTION WHEN OTHERS THEN
          RAISE_APPLICATION_ERROR (-20001, 'STP_KEYGEN_TGFNUM - Erro ao tentar criar registro na TGFNUM: ' || SQLERRM);        
        END;
        
        IF P_ULTCOD < P_MAXTSDCOD THEN
          EXIT;
        END IF;
        
         --Se se maior na tabela for igual ao máximo da faixa, muda de faixa.
        FETCH P_CUR_FAIXAS INTO P_MINTSDCOD, P_MAXTSDCOD;
        IF P_CUR_FAIXAS%NOTFOUND THEN
          P_LOCAL := 'SEM TGFNUM';
          RAISE ERRORDSYNC;
        END IF;
        
      END LOOP;
    ELSE
      --PEGAMOS O MAIOR CÓDIGO DA TABELA, ASSIM INICIAMOS A TGFNUM COM ESSE VALOR
      
      P_SQL := 'SELECT NVL(MAX(' || P_CAMPO || '), ' || TO_CHAR(P_MINTSDCOD-1) || ') + 1 FROM ' || P_TABELASEL || ' WHERE ' || P_CAMPO || 
               ' IS NOT NULL AND ' || P_CAMPO || ' BETWEEN ' || TO_CHAR(P_MINTSDCOD) || ' AND ' || TO_CHAR(P_MAXTSDCOD) || P_FILTRO;
      BEGIN
        EXECUTE IMMEDIATE P_SQL INTO P_ULTCOD;
      EXCEPTION WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR (-20001, 'STP_KEYGEN_TGFNUM - Erro ao tentar criar registro na TGFNUM: ' || SQLERRM);        
      END;
    END IF;

    INSERT INTO TGFNUM (ARQUIVO, CODEMP, SERIE, ULTCOD, ULTNOTATALAO)
    VALUES (P_ARQUIVO, P_CODEMP, P_SERIE, P_ULTCOD, P_MAXCODNUM);
  ELSE
    P_SQL := 'SELECT COUNT(1) FROM ' || P_TABELASEL || ' WHERE ' || P_CAMPO || ' IS NOT NULL AND ' || P_CAMPO || ' = ' || TO_CHAR(P_ULTCOD) || ' AND ROWNUM = 1' || P_FILTRO;
    BEGIN
      EXECUTE IMMEDIATE P_SQL INTO P_COUNT;
    EXCEPTION WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR (-20001, 'STP_KEYGEN_TGFNUM - Erro ao verificar se registro já existe na tabela: ' || SQLERRM);        
    END;
    
    IF (P_COUNT > 0 OR P_ULTCOD > P_MAXTSDCOD) THEN  --SE O CÓDIGO ENCONTRADO AINDA NÃO FOI UTILIZADO, SAI FORA.
    
      P_RECOMECOU := FALSE;
      P_BUSCAFAIXA := TRUE;
      P_ULTCOD := P_ULTCOD + 1;
      
      IF P_TEMDSYNC THEN
        lOOP
          IF P_ULTCOD > P_MAXTSDCOD THEN
            FETCH P_CUR_FAIXAS INTO P_MINTSDCOD, P_MAXTSDCOD;
            IF P_CUR_FAIXAS%NOTFOUND THEN
              P_LOCAL := 'PRIMEIRA E ÚNICA FAIXA LOTADA';
              RAISE ERRORDSYNC;
            END IF;
            
            P_ULTCOD := GREATEST(P_ULTCOD, P_MINTSDCOD);
          ELSE
            EXIT;
          END IF;
        END LOOP;
      ELSE
        IF P_ULTCOD > P_MAXTSDCOD THEN
          P_ULTCOD := P_MINTSDCOD;
          P_RECOMECOU := TRUE;
        END IF;
      END IF;
      P_LOTE := POWER(10, LENGTH(P_MAXTSDCOD)-1);
      
      --Verifica em lotes se tem algum número faltando
      WHILE P_BUSCAFAIXA LOOP
      
        -- O (P_ULTCOD + P_LOTE) nunca pode ser maior que P_MAXTSDCOD
        IF (P_ULTCOD + P_LOTE - 1) > P_MAXTSDCOD THEN
          P_LOTE := (P_MAXTSDCOD - P_ULTCOD + 1);
        END IF;
        
        P_SQL := 'SELECT NVL(MIN(' || P_CAMPO || '),0)'||
                 ', NVL(MAX(' || P_CAMPO || '), 0), COUNT(DISTINCT ' || P_CAMPO || ') FROM ' || P_TABELASEL || ' ' ||
                 'WHERE ' || P_CAMPO || ' IS NOT NULL AND ' || P_CAMPO || 
                 ' BETWEEN ' || TO_CHAR(P_ULTCOD) || ' AND ' || TO_CHAR(P_ULTCOD + P_LOTE - 1) || P_FILTRO; -- 1 até ((1+100-1) = 100)

        BEGIN
          EXECUTE IMMEDIATE P_SQL INTO P_MINCOD, P_MAXCOD, P_COUNT;
        EXCEPTION WHEN OTHERS THEN
          RAISE_APPLICATION_ERROR (-20001, 'STP_KEYGEN_TGFNUM - Erro ao buscar faixa de numeração: ' || SQLERRM);        
        END;
        
        IF P_MINCOD > P_ULTCOD THEN
          --se MIN(CAMPO) diferente do valor valor pretendido pode sair do loop e utilizá-lo
          P_BUSCAFAIXA := FALSE;
        ELSIF P_COUNT < P_LOTE AND P_ULTCOD < P_MAXTSDCOD THEN
        
         --Se max(campo) for menor que 100 sai do loop, se não, tira um zero do lote até que ele chegue a 100
          IF P_LOTE > 100 AND P_MAXCOD > 100 THEN
            P_LOTE := TRUNC(P_LOTE / 10);
            
            --se o lote for maior que max(campo) diminui do lote o número de zeros necessários para o lote ficar menor que max(campo) 
            IF P_LOTE > P_MAXCOD THEN
              P_LOTE := POWER(10, LENGTH(P_MAXCOD)-1);
            END IF;
            P_ULTCOD := P_ULTCOD + 1;
          ELSIF P_MINCOD = P_ULTCOD THEN
            P_BUSCASEQ := TRUE;
            P_SQL := 'SELECT DISTINCT ' || P_CAMPO || ' FROM ' || P_TABELASEL || ' ' ||
                     'WHERE ' || P_CAMPO || ' IS NOT NULL AND ' || P_CAMPO || 
                     ' BETWEEN :CODINI AND :CODFIM ' || P_FILTRO ||
                     'ORDER BY 1';
            
            WHILE P_BUSCASEQ 
            LOOP
              P_BUSCASEQ := FALSE; --SE NÃO ECONTRAR NENHUM REGISTRO NO CURSOR SAI DO LOOP
              
              BEGIN
                OPEN P_CUR_CHECAR FOR P_SQL USING P_ULTCOD, P_ULTCOD + 99; -- 1 até ((1+99) = 100)
              EXCEPTION WHEN OTHERS THEN
                RAISE_APPLICATION_ERROR (-20001, 'STP_KEYGEN_TGFNUM - Erro ao criar cursor para busca sequencial: ' || SQLERRM);        
              END;
              LOOP
                FETCH P_CUR_CHECAR INTO P_CODCHECA;
                EXIT WHEN P_CUR_CHECAR%NOTFOUND;
              
                IF P_CODCHECA > P_ULTCOD THEN --ENCONTROU UM CODIGO UTILIZAVEL
                  P_BUSCAFAIXA  := FALSE;
                  P_BUSCASEQ := FALSE;
                  EXIT;
                ELSE
                  P_ULTCOD := P_ULTCOD + 1;
                  IF P_ULTCOD > P_MAXTSDCOD THEN
                    IF P_TEMDSYNC THEN
                      FETCH P_CUR_FAIXAS INTO P_MINTSDCOD, P_MAXTSDCOD;
                      IF P_CUR_FAIXAS%NOTFOUND THEN
                        P_LOCAL := 'BUSCA SEQUENCIAL';
                        RAISE ERRORDSYNC;
                      END IF;
                      P_ULTCOD := P_MINTSDCOD;
                      P_LOTE := POWER(10, LENGTH(P_MAXTSDCOD)-1);
                      --VOLTA AO LOOP DE LOTES COM A PRÓXIMA FAIXA
                    ELSE
                      P_BUSCAFAIXA := FALSE; --SAI DE TODOS OS LOOPS POIS NÃO HÁ MAIS CODIGOS UTILIZAVEIS
                    END IF;
                    
                    P_BUSCASEQ := FALSE;
                    EXIT;
                  END IF;
                  
                  P_BUSCASEQ := TRUE;
                END IF;

              END LOOP;
              CLOSE P_CUR_CHECAR;

            END LOOP;
         
          ELSE  --Se o P_MINCOD for maior que o P_ULTCOD não precisa procurar mais
            P_BUSCAFAIXA := FALSE;
          END IF;
        
        ELSE
          P_ULTCOD := P_ULTCOD + P_LOTE;
          
          IF P_ULTCOD > P_MAXTSDCOD THEN
            IF P_TEMDSYNC THEN
              FETCH P_CUR_FAIXAS INTO P_MINTSDCOD, P_MAXTSDCOD;
              IF P_CUR_FAIXAS%NOTFOUND THEN
                P_LOCAL := 'BUSCA POR LOTE';
                RAISE ERRORDSYNC;
              END IF;
              P_ULTCOD := P_MINTSDCOD;
            ELSE
              IF P_RECOMECOU THEN
                P_BUSCAFAIXA := FALSE;
              ELSE
                P_RECOMECOU := TRUE;
                P_ULTCOD := P_MINTSDCOD;
              END IF;
            END IF;
            
            P_LOTE := POWER(10, LENGTH(P_MAXTSDCOD)-1);
          END IF;
        
        END IF;
      
      END LOOP;
      
    END IF;
    
    IF P_ULTCOD > P_MAXTSDCOD THEN
      IF P_TEMDSYNC THEN
        P_LOCAL := 'ACABARAM AS FAIXAS';
        RAISE ERRORDSYNC;
      END IF;
              
      RAISE_APPLICATION_ERROR (-20101, 'STP_KEYGEN_TGFNUM - Não encontramos número disponível para novos registros na ' || P_TABELA || '.');
    END IF;
    
    UPDATE TGFNUM 
    SET ULTCOD = P_ULTCOD 
    WHERE ARQUIVO = P_ARQUIVO
    AND CODEMP = P_CODEMP
    AND SERIE = P_SERIE;
  
  END IF;
  
  COMMIT;
EXCEPTION
  WHEN ERRORDSYNC THEN
    ROLLBACK;
    IF P_LOCAL = 'FAIXA INICIAL' THEN
      RAISE_APPLICATION_ERROR(-20101, 'STP_KEYGEN_TGFNUM - Não existe registro na TSDNUM para '|| P_ARQUIVO ||
                                      ' com faixa inicial menor que '|| P_ULTCOD ||'.'|| CHR(13) ||
                                      'Local: ' || P_LOCAL);
   ELSE                                   
      RAISE_APPLICATION_ERROR(-20101, 'STP_KEYGEN_TGFNUM - Não encontramos número disponível para novos registros para '|| P_ARQUIVO ||
                                      ' nas faixas da TSDNUM.'|| CHR(13) ||
                                      'Local: ' || P_LOCAL);
    END IF;                                    
  WHEN OTHERS THEN
    ROLLBACK;
    RAISE;    
END;
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 07/05/2018 11:13:48
Num.Script: 54607-0-1000
Nro. O.S. : 1115898
Nome      : INSERE - THOOBJ - 5460600
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE STP_KEYGEN_TGFNUM
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210011
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'STP_KEYGEN_TGFNUM' NOMEOBJ, 54606 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, '80718d6cf1040ba9fea31d4ca96664e8' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'STP_KEYGEN_TGFNUM' and THO.hashcode = '80718d6cf1040ba9fea31d4ca96664e8')
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 04/05/2018 09:08:12
Num.Script: 54614-0-0
Nro. O.S. : 1169807
Nome      : Dropar - CKC_PJSUJEITACSLL_TCBEMP 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - CKC_PJSUJEITACSLL_TCBEMP 
NomeObjeto: CKC_PJSUJEITACSLL_TCBEMP 
TipoObjeto: CONSTRAINT
NomeTabela: TCBEMP
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
   L_NULL USER_TAB_COLUMNS.NULLABLE%TYPE;
BEGIN
   SELECT NULLABLE INTO L_NULL
     FROM USER_TAB_COLUMNS
    WHERE TABLE_NAME = 'TCBEMP'
      AND COLUMN_NAME = 'PJSUJEITACSLL';

   IF L_NULL = 'N' THEN
      EXECUTE IMMEDIATE 'ALTER TABLE TCBEMP MODIFY PJSUJEITACSLL CHAR(1) NULL';
   END IF;
   
   EXECUTE IMMEDIATE 'ALTER TABLE TCBEMP DROP CONSTRAINT CKC_PJSUJEITACSLL_TCBEMP';

END;
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 04/05/2018 09:15:33
Num.Script: 54614-0-1
Nro. O.S. : 1169807
Nome      : Criar - CKC_PJSUJEITACSLL_TCBEMP 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - CKC_PJSUJEITACSLL_TCBEMP 
NomeObjeto: CKC_PJSUJEITACSLL_TCBEMP 
TipoObjeto: CONSTRAINT
NomeTabela: TCBEMP 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TCBEMP ADD CONSTRAINT CKC_PJSUJEITACSLL_TCBEMP CHECK (PJSUJEITACSLL IN ('1','2','3') OR PJSUJEITACSLL IS NULL )
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54672-0-0
Nro. O.S. : 1148508
Nome      : Criar - TRIRCST TIPO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TRIRCST  TIPO
NomeObjeto: TIPO
TipoObjeto: COLUMN
NomeTabela: TRIRCST 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TRIRCST ADD TIPO CHAR(1)';
   EXECUTE IMMEDIATE 'UPDATE TRIRCST SET TIPO = CASE WHEN NRORECIBOANT IS NOT NULL THEN ''A'' ELSE ''I'' END';
   EXECUTE IMMEDIATE 'ALTER TABLE TRIRCST ADD  CONSTRAINT CKC_TIPO_TRIRCST CHECK (TIPO IN ( ''I'', ''A'',''E''))';
   EXECUTE IMMEDIATE 'ALTER TABLE TRIRCST MODIFY TIPO DEFAULT ''I'' NOT NULL';
END;
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54673-0-0
Nro. O.S. : 1148508
Nome      : Criar - TRIRCSP TIPO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TRIRCSP TIPO
NomeObjeto: TIPO
TipoObjeto: COLUMN
NomeTabela: TRIRCSP 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TRIRCSP ADD TIPO CHAR(1)';
   EXECUTE IMMEDIATE 'UPDATE TRIRCSP SET TIPO = CASE WHEN NRORECIBOANT IS NOT NULL THEN ''A'' ELSE ''I'' END';
   EXECUTE IMMEDIATE 'ALTER TABLE TRIRCSP ADD  CONSTRAINT CKC_TIPO_TRIRCSP CHECK (TIPO IN ( ''I'', ''A'',''E''))';
   EXECUTE IMMEDIATE 'ALTER TABLE TRIRCSP MODIFY TIPO DEFAULT ''I'' NOT NULL';
END;
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54674-0-0
Nro. O.S. : 1148508
Nome      : Criar - TRICPPR TIPO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TRICPPR TIPO
NomeObjeto: TIPO
TipoObjeto: COLUMN
NomeTabela: TRICPPR 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TRICPPR ADD TIPO CHAR(1)';
   EXECUTE IMMEDIATE 'UPDATE TRICPPR SET TIPO = CASE WHEN NRORECIBOANT IS NOT NULL THEN ''A'' ELSE ''I'' END';
   EXECUTE IMMEDIATE 'ALTER TABLE TRICPPR ADD  CONSTRAINT CKC_TIPO_TRICPPR CHECK (TIPO IN ( ''I'', ''A'',''E''))';
   EXECUTE IMMEDIATE 'ALTER TABLE TRICPPR MODIFY TIPO DEFAULT ''I'' NOT NULL';
END;
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54675-0-0
Nro. O.S. : 1148508
Nome      : Criar - TRICPRB TIPO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TRICPRB TIPO
NomeObjeto: TIPO
TipoObjeto: COLUMN
NomeTabela: TRICPRB 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TRICPRB ADD TIPO CHAR(1)';
   EXECUTE IMMEDIATE 'UPDATE TRICPRB SET TIPO = CASE WHEN NRORECIBOANT IS NOT NULL THEN ''A'' ELSE ''I'' END';
   EXECUTE IMMEDIATE 'ALTER TABLE TRICPRB ADD  CONSTRAINT CKC_TIPO_TRICPRB CHECK (TIPO IN ( ''I'', ''A'',''E''))';
   EXECUTE IMMEDIATE 'ALTER TABLE TRICPRB MODIFY TIPO DEFAULT ''I'' NOT NULL';
END;
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54676-0-0
Nro. O.S. : 1148508
Nome      : Script - AMBIENTEREINF 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - AMBIENTEREINF 
NomeObjeto: AMBIENTEREINF 
TipoObjeto: COLUMN
NomeTabela: TGFEMP
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
    P_COUNT         INT;
BEGIN
    SELECT COUNT(*)
    INTO P_COUNT
    FROM TSISCR
    WHERE NME_SCRIPT = '1148508-1';
    
    IF P_COUNT = 0 THEN
    
        BEGIN
        
            EXECUTE IMMEDIATE 'INSERT INTO TSISCR VALUES(''1148508-1'',''1148508-1'')';
            
            EXECUTE IMMEDIATE  'UPDATE TGFEMP
                                SET AMBIENTEREINF = CASE WHEN AMBIENTEREINF = 3 THEN 2 ELSE AMBIENTEREINF END
                                WHERE AMBIENTEREINF IS NOT NULL';
            
        EXCEPTION        
            WHEN OTHERS THEN
                RAISE_APPLICATION_ERROR(-20010,'Problema na alteração do campo AMBIENTEREINF');                
        END;
    
    END IF;
 
END;
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54677-0-0
Nro. O.S. : 1148508
Nome      : Dropar - CKC_AMBIENTEREINF_TGFEMP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - CKC_AMBIENTEREINF_TGFEMP
NomeObjeto: CKC_AMBIENTEREINF_TGFEMP
TipoObjeto: CONSTRAINT
NomeTabela: TGFEMP
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFEMP DROP CONSTRAINT CKC_AMBIENTEREINF_TGFEMP
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54678-0-0
Nro. O.S. : 1148508
Nome      : Criar - CKC_AMBIENTEREINF_TGFEMP 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - CKC_AMBIENTEREINF_TGFEMP 
NomeObjeto: CKC_AMBIENTEREINF_TGFEMP 
TipoObjeto: CONSTRAINT
NomeTabela: TGFEMP 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFEMP ADD  CONSTRAINT CKC_AMBIENTEREINF_TGFEMP CHECK (AMBIENTEREINF IN (1,2) OR AMBIENTEREINF IS NULL)
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54684-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRCST VLRCRTOM
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRCRTOM
TipoObjeto: COLUMN
NomeTabela: TRIRCST
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCST ADD VLRCRTOM FLOAT
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54685-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRCST VLRCRTOMSUSP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRCRTOMSUSP
TipoObjeto: COLUMN
NomeTabela: TRIRCST
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCST ADD VLRCRTOMSUSP FLOAT
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54686-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRCST VLRCRTOMRET
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRCRTOMRET
TipoObjeto: COLUMN
NomeTabela: TRIRCST
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCST ADD VLRCRTOMRET FLOAT
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54687-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRCST VLRCRTOMSUSPRET
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRCRTOMSUSPRET
TipoObjeto: COLUMN
NomeTabela: TRIRCST
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCST ADD VLRCRTOMSUSPRET FLOAT
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54688-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRCSTRES VLRCRTOMSIS
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRCRTOMSIS
TipoObjeto: COLUMN
NomeTabela: TRIRCSTRES
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCSTRES ADD VLRCRTOMSIS FLOAT
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54689-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRCSTRES VLRCRTOMSUSPSIS
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRCRTOMSUSPSIS
TipoObjeto: COLUMN
NomeTabela: TRIRCSTRES
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCSTRES ADD VLRCRTOMSUSPSIS FLOAT
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54690-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRCSTRES VLRCRTOMRET
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRCRTOMRET
TipoObjeto: COLUMN
NomeTabela: TRIRCSTRES
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCSTRES ADD VLRCRTOMRET FLOAT
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54691-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRCSTRES VLRCRTOMSUSPRET
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRCRTOMSUSPRET
TipoObjeto: COLUMN
NomeTabela: TRIRCSTRES
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCSTRES ADD VLRCRTOMSUSPRET FLOAT
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54692-0-0
Nro. O.S. : 1148508
Nome      : Criar - TRIVAR 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TRIVAR 
NomeObjeto: TRIVAR 
TipoObjeto: TABLE
NomeTabela: TRIVAR 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE GLOBAL TEMPORARY TABLE TRIVAR (
    CHAVE           VARCHAR2(100), 
    VALIDACAO       CHAR(1),         
    DTREF           DATE,      
    SEQUENCIA       NUMBER(5), 
    CONTROLE        CHAR(1),
    CONSTRAINT PK_TRIVAR PRIMARY KEY (CHAVE, VALIDACAO)
)
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54693-0-0
Nro. O.S. : 1148508
Nome      : Alterar - SNK_VERIF_ALTER_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - SNK_VERIF_ALTER_REINF
NomeObjeto: SNK_VERIF_ALTER_REINF
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_VERIF_ALTER_REINF(P_CODEMP          NUMBER, 
                                                  P_DTREF           DATE, 
                                                  P_TPAMB           VARCHAR2, 
                                                  P_SEQUENCIAATUAL  NUMBER,
                                                  P_NOMETAB_PAI     VARCHAR2 := NULL,
                                                  P_NOMETAB         VARCHAR2,
                                                  P_NOMEVIEW        VARCHAR2,
                                                  P_GRUPO           VARCHAR2,
                                                  P_VIEWDETALHE     VARCHAR2 := 'N')
IS
    P_CONDITION         VARCHAR2(4000);
    queSql              VARCHAR2(4000);
    TYPE CURTYPE        IS REF CURSOR;
    CURVAL              CURTYPE;
    P_COLUNAS_PADRAO    VARCHAR2(4000) := 'CODEMP, DTREF, TPAMB, SEQUENCIA, STATUSREG, TIPO, NRORECIBO, NRORECIBOANT, IDEVENTO, CONTROLE, MSG, XMLEVENTO, XMLRETORNO, INIVALIDNOVO, FIMVALIDNOVO ';
    P_COL_PAD_FILHOS    VARCHAR2(4000) := 'CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE';
    P_FILTRO_FILHOS     VARCHAR2(4000);
    P_COUNT             NUMBER(10);
BEGIN
    P_CONDITION := SNK_GET_COLUMNS_REINF(P_NOMETAB, P_COLUNAS_PADRAO);

    IF P_NOMETAB_PAI IS NULL THEN 
        queSql :=                 'SELECT CHAVE, VALIDACAO, DTREF, SEQUENCIA, CONTROLE '||
                                  'FROM (  SELECT O.CHAVE '||
                                                ', CASE WHEN (O.TIPO = ''E'') OR ('||P_CONDITION||') THEN ''I'' '||
                                                       'ELSE ''A'' '||
                                                  'END AS VALIDACAO '||
                                                ', O.DTREF '||
                                                ', O.SEQUENCIA '||
                                                ', O.CONTROLE  '||
                                          'FROM '||P_NOMETAB||' O '||
                                              'INNER JOIN '||P_NOMEVIEW||' N ON O.CODEMP = N.CODEMP '||
                                                                           'AND O.CHAVE = N.CHAVE ';

        IF P_GRUPO = 'M' THEN
            queSql := queSql ||                                            'AND O.DTREF = N.DTREF '||
                                                                           'AND N.SEQUENCIA = :SEQUENCIA ';
        END IF;

        queSql := queSql ||               'WHERE O.CODEMP = :CODEMP ';

        IF P_GRUPO = 'M' THEN
            queSql := queSql ||               'AND O.DTREF = :DTREF '; /* MOVIMENTO NÃO PRECISA OLHAR OUTRAS REFERÊNCIAS*/
        ELSE 
            queSql := queSql ||               'AND O.DTREF = (SELECT MAX(DTREF) '||
                                                             'FROM '||P_NOMETAB||' D '||
                                                             'WHERE D.CODEMP = O.CODEMP '||
                                                                 'AND D.TPAMB = O.TPAMB '||
                                                                 'AND D.CHAVE = O.CHAVE '||
                                                                 'AND D.STATUSREG = ''F'' '||
                                                                 'AND D.NRORECIBO IS NOT NULL '||
                                                             ') ';
        END IF;

        queSql := queSql ||                   'AND O.TPAMB = :TPAMB '||
                                              'AND O.SEQUENCIA = (SELECT MAX(SEQUENCIA) '||
                                                                 'FROM '||P_NOMETAB||' S '||
                                                                 'WHERE S.CODEMP = O.CODEMP '||
                                                                     'AND S.TPAMB = O.TPAMB '||
                                                                     'AND S.CHAVE = O.CHAVE '||
                                                                     'AND S.DTREF = O.DTREF '||
                                                                     'AND S.STATUSREG = ''F'' '||
                                                                     'AND S.NRORECIBO IS NOT NULL '||
                                                                 ') '||
                                              'AND O.STATUSREG = ''F'' '||
                                        ') DTALT ';

        queSql :=   'INSERT INTO TRIVAR (CHAVE, VALIDACAO, DTREF, SEQUENCIA, CONTROLE) '||queSql;

        IF P_GRUPO = 'M' THEN
            EXECUTE IMMEDIATE queSql USING P_SEQUENCIAATUAL, P_CODEMP, P_DTREF, P_TPAMB;
        ELSE
            EXECUTE IMMEDIATE queSql USING P_CODEMP, P_TPAMB;
        END IF;
    ELSE 
        P_FILTRO_FILHOS := NVL(SNK_GET_PK_FOR_REINF(P_NOMETAB, P_COL_PAD_FILHOS), ' ');

        queSql :=                 'SELECT CHAVE, VALIDACAO, DTREF, SEQUENCIA, CONTROLE '||
                                  'FROM (  SELECT O.CHAVE '||
                                               ', CASE WHEN (N.CODEMP IS NOT NULL) AND (P.TIPO = ''E'' OR ('||P_CONDITION||')) THEN ''I'' '||
                                                      'ELSE ''A'' '||
                                                 'END AS VALIDACAO '||
                                               ', O.DTREF '||
                                               ', O.SEQUENCIA '||
                                               ', P.CONTROLE  '||
                                          'FROM '||P_NOMETAB||' O '||
                                              'LEFT JOIN '||P_NOMEVIEW||' N ON N.CODEMP = O.CODEMP '||
                                                                          'AND N.CHAVE = O.CHAVE '||
                                                                          P_FILTRO_FILHOS||' ';

        IF P_GRUPO = 'M' THEN
            queSql := queSql ||                                           'AND N.DTREF = O.DTREF ';

            IF P_VIEWDETALHE = 'N' THEN
                queSql := queSql ||                                       'AND N.SEQUENCIA = :SEQUENCIA ';
            END IF;
        END IF;

        queSql := queSql ||                   'INNER JOIN '||P_NOMETAB_PAI||' P ON P.CODEMP = O.CODEMP '||
                                                                              'AND P.DTREF = O.DTREF '||
                                                                              'AND P.TPAMB = O.TPAMB '||
                                                                              'AND P.SEQUENCIA = O.SEQUENCIA '||
                                                                              'AND P.CHAVE = O.CHAVE '||
                                          'WHERE O.CODEMP = :CODEMP ';
                                          
        IF P_GRUPO = 'M' THEN
            queSql := queSql ||               'AND O.DTREF = :DTREF '; /* MOVIMENTO NÃO PRECISA OLHAR OUTRAS REFERÊNCIAS*/
        ELSE
            queSql := queSql ||               'AND O.DTREF = (SELECT MAX(DTREF) '||
                                                             'FROM '||P_NOMETAB_PAI||' D '||
                                                             'WHERE D.CODEMP = O.CODEMP '||
                                                                 'AND D.TPAMB = O.TPAMB '||
                                                                 'AND D.CHAVE = O.CHAVE '||
                                                                 'AND D.STATUSREG = ''F'' '||
                                                                 'AND D.NRORECIBO IS NOT NULL '||
                                                             ')';
        END IF;

        queSql := queSql ||                   'AND O.TPAMB = :TPAMB '||
                                              'AND O.SEQUENCIA = (SELECT MAX(SEQUENCIA) '||
                                                                 'FROM '||P_NOMETAB_PAI||' S '||
                                                                 'WHERE S.CODEMP = O.CODEMP '||
                                                                     'AND S.DTREF = O.DTREF '||
                                                                     'AND S.TPAMB = O.TPAMB '||
                                                                     'AND S.CHAVE = O.CHAVE '||
                                                                     'AND S.STATUSREG = ''F'' '||
                                                                     'AND S.NRORECIBO IS NOT NULL '||
                                                                 ') '||
                                              'AND P.STATUSREG = ''F'' '|| 
                                          'UNION '||
                                          'SELECT P.CHAVE '||
                                               ', ''A'' AS VALIDACAO '||
                                               ', P.DTREF '||
                                               ', P.SEQUENCIA '||
                                               ', P.CONTROLE '||
                                          'FROM '||P_NOMEVIEW||' N '||
                                              'INNER JOIN '||P_NOMETAB_PAI||' P ON P.CODEMP = N.CODEMP '||
                                                                         'AND P.CHAVE = N.CHAVE '||
                                          'WHERE N.CODEMP = :CODEMP ';

        IF P_GRUPO = 'M' THEN
            queSql := queSql ||               'AND P.DTREF = :DTREF ';

            IF P_VIEWDETALHE = 'N' THEN
                queSql := queSql ||           'AND N.DTREF = P.DTREF '||
                                              'AND N.SEQUENCIA = :SEQUENCIA ';
            END IF;
        ELSE
            queSql := queSql ||               'AND P.DTREF = (SELECT MAX(DTREF) '||
                                                             'FROM '||P_NOMETAB_PAI||' D '||
                                                             'WHERE D.CODEMP = P.CODEMP '||
                                                                 'AND D.TPAMB = P.TPAMB '||
                                                                 'AND D.CHAVE = P.CHAVE '||
                                                                 'AND D.STATUSREG = ''F'' '||
                                                                 'AND D.NRORECIBO IS NOT NULL '||
                                                             ') ';
        END IF;

        queSql := queSql ||                   'AND P.TPAMB = :TPAMB '||
                                              'AND P.SEQUENCIA = (SELECT MAX(SEQUENCIA) '||
                                                                 'FROM '||P_NOMETAB_PAI||' S '||
                                                                 'WHERE S.CODEMP = P.CODEMP '||
                                                                     'AND S.TPAMB = P.TPAMB '||
                                                                     'AND S.CHAVE = P.CHAVE '||
                                                                     'AND S.DTREF = P.DTREF '||
                                                                     'AND S.STATUSREG = ''F'' '||
                                                                     'AND S.NRORECIBO IS NOT NULL '||
                                                                ') '||
                                              'AND NOT EXISTS(SELECT 1 '||
                                                             'FROM '||P_NOMETAB||' O '||
                                                             'WHERE O.CODEMP = P.CODEMP '||
                                                                 'AND O.TPAMB = P.TPAMB '||
                                                                 'AND O.SEQUENCIA = P.SEQUENCIA '||
                                                                 'AND O.CHAVE = P.CHAVE '||
                                                                 P_FILTRO_FILHOS||' '||
                                                             ') '||
                                        ') DTALT '||
                                  'WHERE NOT EXISTS(SELECT 1 '||
                                                   'FROM TRIVAR '||
                                                   'WHERE CHAVE = DTALT.CHAVE '||
                                                       'AND VALIDACAO = DTALT.VALIDACAO '||
                                                   ') ';

        queSql :=   'INSERT INTO TRIVAR (CHAVE, VALIDACAO, DTREF, SEQUENCIA, CONTROLE) '||queSql;

        IF P_GRUPO = 'M' THEN
            IF P_VIEWDETALHE = 'N' THEN
                EXECUTE IMMEDIATE queSql USING P_SEQUENCIAATUAL, P_CODEMP, P_DTREF, P_TPAMB, P_CODEMP, P_DTREF, P_SEQUENCIAATUAL, P_TPAMB;
            ELSE 
                EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF, P_TPAMB, P_CODEMP, P_DTREF, P_TPAMB;
            END IF;
        ELSE
            EXECUTE IMMEDIATE queSql USING P_CODEMP, P_TPAMB, P_CODEMP, P_TPAMB;
        END IF;
    END IF;

    FOR EVEF IN (SELECT MON.NOMETAB, MON.NOMEVIEW, MON.VIEWDETALHE
                         FROM TRIMON MON
                         WHERE MON.NOMETABPAI = P_NOMETAB 
                         GROUP BY MON.NOMETAB, MON.NOMEVIEW, MON.VIEWDETALHE
                         ORDER BY MON.NOMETAB
                  ) LOOP
            SNK_VERIF_ALTER_REINF(P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIAATUAL, NVL(P_NOMETAB_PAI, P_NOMETAB), EVEF.NOMETAB, EVEF.NOMEVIEW, EVEF.VIEWDETALHE);
    END LOOP;

    IF P_NOMETAB_PAI IS NULL THEN
        SELECT COUNT(1) INTO P_COUNT
        FROM TRIVAR;

        IF P_COUNT > 0 THEN
            SELECT COUNT(1) INTO P_COUNT
            FROM TRIVAR VAR
            WHERE VALIDACAO = 'I'
              AND EXISTS(SELECT 1
                        FROM TRIVAR V
                        WHERE V.CHAVE = VAR.CHAVE
                          AND V.VALIDACAO <> VAR.VALIDACAO);

            IF P_COUNT > 0 THEN
                DELETE FROM TRIVAR VAR
                WHERE VALIDACAO = 'I'
                  AND EXISTS(SELECT 1
                            FROM TRIVAR V
                            WHERE V.CHAVE = VAR.CHAVE
                              AND V.VALIDACAO <> VAR.VALIDACAO);
            END IF;

            queSql :=           'UPDATE '||P_NOMETAB||' '||
                                'SET CONTROLE = CASE WHEN EXISTS (SELECT 1 '||
                                                                 'FROM TRIVAR '||
                                                                 'WHERE DTREF = '||P_NOMETAB||'.DTREF '||
                                                                     'AND SEQUENCIA = '||P_NOMETAB||'.SEQUENCIA '||
                                                                     'AND CHAVE = '||P_NOMETAB||'.CHAVE '||
                                                                     'AND VALIDACAO = ''A'' '||
                                                                     'AND CONTROLE = ''I'') THEN ''A'' '|| 
                                                    'ELSE ''I'' '||
                                               'END '||
                                'WHERE CODEMP = :CODEMP '||
                                    'AND TPAMB = :TPAMB '||
                                    'AND EXISTS (SELECT 1 '||
                                                'FROM TRIVAR '||
                                                'WHERE DTREF = '||P_NOMETAB||'.DTREF '||
                                                    'AND SEQUENCIA = '||P_NOMETAB||'.SEQUENCIA '||
                                                    'AND CHAVE = '||P_NOMETAB||'.CHAVE '||
                                                    'AND ( (VALIDACAO = ''A'' AND CONTROLE = ''I'') OR  '||
                                                          '(VALIDACAO = ''I'' AND CONTROLE <> ''I'') '||
                                                         ') '||
                                                ') ';

            EXECUTE IMMEDIATE queSql USING P_CODEMP, P_TPAMB;
        END IF;
    END IF;
EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    IF queSql IS NOT NULL THEN
        SELECT COUNT(1) INTO P_COUNT
        FROM LOGREINF
        WHERE DTOCOR = SYSDATE
         AND CODUSU = STP_GET_CODUSULOGADO();
        IF P_COUNT = 0 THEN
            INSERT INTO LOGREINF(DTOCOR, CODUSU, SQLERR)
                SELECT SYSDATE, STP_GET_CODUSULOGADO(), queSql FROM DUAL; 
        END IF;
    END IF;
    COMMIT;
    RAISE_APPLICATION_ERROR(-20101, SQLERRM);
END;
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54694-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5469300
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_VERIF_ALTER_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210011
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_VERIF_ALTER_REINF' NOMEOBJ, 54693 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, 'd92578b1c0a408a2233e8b25b858b3b7' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_VERIF_ALTER_REINF' and THO.hashcode = 'd92578b1c0a408a2233e8b25b858b3b7')
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 15:58:29
Num.Script: 54695-0-0
Nro. O.S. : 1148508
Nome      : Alterar - SNK_PROCESSA_DADOS_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - SNK_PROCESSA_DADOS_REINF
NomeObjeto: SNK_PROCESSA_DADOS_REINF
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SEMPRE
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_PROCESSA_DADOS_REINF(P_CODEMP           NUMBER,
                                                     P_DTREF            DATE,
                                                     P_TPAMB            VARCHAR2,
                                                     P_SEQUENCIA_ATUAL  NUMBER, 
                                                     P_TIPDADOS         CHAR,                   /*T=TODOS, C=CADOSTRO, M=MOVIMENTO*/
                                                     P_EVENTO           VARCHAR2 := 'TODOS',    /*TODOS, NOMEEVENTO*/
                                                     P_NOMETAB          VARCHAR2 := NULL,       /*UTILIZADO NA RECURSIVIDADE*/
                                                     P_SEQUENCIA_PAI    NUMBER := NULL,         /*UTILIZADO NA RECURSIVIDADE*/
                                                     P_RESULT           OUT NUMBER)     
AS
    P_SEQUENCIA_OLD             NUMBER;
    P_SEQUENCIA_NEW             NUMBER;
    P_SEQUENCIA_DEL             NUMBER;
    P_DTREF_OLD                 DATE;
    P_DTREF_OLD_PENDENTE        DATE;
    P_NRORECIBO                 VARCHAR2(50);
    P_NRO_RECIBO_OLD             VARCHAR2(50) := NULL;
    P_INSERT_COLUMNS            VARCHAR2(4000);
    P_INSERT_VALUES             VARCHAR2(4000);
    P_COUNT                     NUMBER(10);
    queSql                      VARCHAR2(4000);
    P_FILTRO_MERGE              VARCHAR2(4000) := '';
    queSqlTeste                 VARCHAR2(4000) := '';
BEGIN
    SELECT MAX(DTREF) INTO P_DTREF_OLD_PENDENTE
    FROM TRICAB CAB
    WHERE CAB.CODEMP = P_CODEMP
        AND CAB.DTREF < P_DTREF
        AND CAB.TPAMB = P_TPAMB
        AND NOT EXISTS( SELECT 1
                        FROM TRIFEP FEP
                        WHERE FEP.CODEMP = CAB.CODEMP
                            AND FEP.DTREF = CAB.DTREF
                            AND FEP.TPAMB = CAB.TPAMB
                            AND FEP.SEQUENCIA = CAB.SEQUENCIAATUAL);

    IF P_DTREF_OLD_PENDENTE IS NOT NULL THEN
        RAISE_APPLICATION_ERROR(-20101, 'Existe movimento para referÃªncia '''||TO_CHAR(P_DTREF_OLD_PENDENTE, 'DD/MM/YYYY')||''' que nÃ£o foi fechada. Para gerar esta referÃªncia Ã© necessÃ¡rio seu fechamento.');
    END IF;

    IF P_NOMETAB IS NULL THEN
        FOR EVE IN (SELECT MON.NOMETAB, MON.NOMEEVENTO
                    FROM TRIMON MON
                        INNER JOIN TRIEVT EVT ON EVT.TIPOEVENTO = MON.NOMEEVENTO
                    WHERE (P_EVENTO = 'TODOS' OR MON.NOMEEVENTO = P_EVENTO)
                        AND MON.NOMETABPAI IS NULL
                        AND (P_EVENTO <> 'TODOS' OR P_TIPDADOS = 'T' OR EVT.GRUPO = P_TIPDADOS)
                        AND (EXISTS(SELECT 1
                                   FROM TGFEPS
                                   WHERE EVENTO = EVT.TIPOEVENTO
                                     AND CODEMP = P_CODEMP
                                     AND GERAREVENTO = 'S') OR 
                             EVT.GRUPO = 'C') /*EVENTOS DE CADASTRO NÃO ESTÃO NA TABELA TGFEPS*/
                    GROUP BY MON.NOMEEVENTO, MON.NOMETAB, MON.ORDEM
                    ORDER BY MON.ORDEM
                    ) 
        LOOP
            queSql := ' SELECT COUNT(1)  
                        FROM '||EVE.NOMETAB||'
                        WHERE CODEMP = :CODEMP
                          AND DTREF = :DTREF
                          AND TPAMB = :TPAMB
                          AND STATUSREG = ''E'' ';

            EXECUTE IMMEDIATE queSql INTO P_COUNT USING P_CODEMP, P_DTREF, P_TPAMB;

            IF P_COUNT > 0 THEN
                RAISE_APPLICATION_ERROR(-20101, 'NÃ£o Ã© possÃ­vel gerar dados do REINF se existir eventos enviados para esta empresa/referÃªncia.');
            END IF;

            queSql := ' SELECT MAX(SEQUENCIA)
                        FROM '||EVE.NOMETAB||'
                        WHERE CODEMP = :CODEMP
                          AND DTREF = :DTREF
                          AND TPAMB = :TPAMB
                          AND STATUSREG = ''P''';

            EXECUTE IMMEDIATE queSql INTO P_SEQUENCIA_DEL USING P_CODEMP, P_DTREF, P_TPAMB;

            IF NVL(P_SEQUENCIA_DEL, 0) > 0 THEN
                FOR CUR_DEL IN (SELECT NOMETAB
                                FROM TRIMON
                                WHERE NOMETABPAI IS NULL
                                ORDER BY ORDEM DESC /*NÃO ALTERAR ESSA ORDEM: OS MOVIMENTOS DEVEM SER DELETADOS ANTES DOS PROCESSOS, POIS EXISTE FK ENTRE ELES*/
                                ) 
                LOOP
                    queSql := ' DELETE FROM '||CUR_DEL.NOMETAB||'
                                WHERE CODEMP = :CODEMP
                                  AND DTREF = :DTREF
                                  AND TPAMB = :TPAMB
                                  AND SEQUENCIA = :SEQUENCIA';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_DEL;

                END LOOP;
                P_SEQUENCIA_NEW := P_SEQUENCIA_ATUAL;
                EXIT; /*COMO JÃ DELETEI TODOS OS REGISTROS PARA A ULTIMA SEQUENCIA PENDENTE, POSSO SAIR DO LOOP*/
            END IF;
        END LOOP;
    ELSE
        P_SEQUENCIA_NEW := P_SEQUENCIA_PAI;
    END IF;

    IF P_SEQUENCIA_NEW IS NULL THEN /*SE A SEQUENCIA ESTÃ NULL, NENHUM REGISTRO FOI DELETADO, LOGO A SEQUENCIA SERÃ A SEQUENCIA ATUAL + 1*/
        P_SEQUENCIA_NEW := P_SEQUENCIA_ATUAL + 1;
    END IF;

    FOR EVE IN (SELECT MON.NOMETAB, MON.NOMEEVENTO, MON.NOMEVIEW
                     , CASE WHEN P_NOMETAB IS NULL THEN MON.NOMETABPAI ELSE (SELECT MIN(NOMETAB) FROM TRIMON WHERE NOMEEVENTO = P_EVENTO AND NOMETABPAI IS NULL) END AS NOMETABPAI
                     , MON.VIEWDETALHE, EVT.GRUPO, MON.ORDEM
                FROM TRIMON MON
                    INNER JOIN TRIEVT EVT ON EVT.TIPOEVENTO = MON.NOMEEVENTO
                WHERE (P_NOMETAB IS NOT NULL AND MON.NOMETAB = P_NOMETAB) /*BUSCA O PRÃPRIO EVENTO*/ OR 
                         (  P_NOMETAB IS NULL
                         AND MON.NOMETABPAI IS NULL 
                         AND (P_EVENTO = 'TODOS' OR MON.NOMEEVENTO = P_EVENTO)                      
                         AND (P_EVENTO <> 'TODOS' OR P_TIPDADOS = 'T' OR EVT.GRUPO = P_TIPDADOS)
                         AND (EXISTS(SELECT 1
                                       FROM TGFEPS
                                     WHERE EVENTO = EVT.TIPOEVENTO
                                        AND CODEMP = P_CODEMP
                                        AND GERAREVENTO = 'S') OR
                              EVT.GRUPO = 'C') /*EVENTOS DE CADASTRO NÃO ESTÃO NA TABELA TGFEPS*/
                      )
                ORDER BY MON.ORDEM  
               )
    LOOP
        P_NRORECIBO := NULL;
        P_NRO_RECIBO_OLD := NULL;

        IF P_SEQUENCIA_NEW > 1 THEN
            queSql := ' SELECT MAX(SEQUENCIA)
                        FROM '||EVE.NOMETAB||'
                        WHERE CODEMP = :CODEMP
                          AND DTREF = :DTREF
                          AND TPAMB = :TPAMB
                          AND SEQUENCIA < :SEQUENCIA_NEW';

            EXECUTE IMMEDIATE queSql INTO P_SEQUENCIA_OLD USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW;

            P_DTREF_OLD := P_DTREF;
        ELSIF EVE.GRUPO <> 'M' THEN
            queSql := ' SELECT NVL(MAX(DTREF), :DTREF)
                        FROM '||EVE.NOMETAB||'
                        WHERE CODEMP = :CODEMP
                          AND DTREF < :DTREF
                          AND TPAMB = :TPAMB';
            EXECUTE IMMEDIATE queSql INTO P_DTREF_OLD USING P_DTREF, P_CODEMP, P_DTREF, P_TPAMB;

            IF P_DTREF_OLD <> P_DTREF THEN
                queSql := ' SELECT NVL(MAX(SEQUENCIA),0)
                            FROM '||EVE.NOMETAB||'
                            WHERE CODEMP = :CODEMP
                              AND DTREF = :DTREF
                              AND TPAMB = :TPAMB';

                EXECUTE IMMEDIATE queSql INTO P_SEQUENCIA_OLD USING P_CODEMP, P_DTREF_OLD, P_TPAMB;
            ELSE
                P_SEQUENCIA_OLD := P_SEQUENCIA_NEW;
            END IF;
        ELSE
            P_SEQUENCIA_OLD := P_SEQUENCIA_NEW;
            P_DTREF_OLD := P_DTREF;
        END IF;
        
        IF EVE.GRUPO = 'M' THEN  /*MOVIMENTOS GRAVAM OS EVENTOS FILHOS PRIMEIRO*/     
            FOR EVEF IN (SELECT NOMEEVENTO, NOMETAB
                         FROM TRIMON
                         WHERE NOMETABPAI = EVE.NOMETAB
                         GROUP BY NOMEEVENTO, NOMETAB
                         ORDER BY NOMEEVENTO 
                        ) 
            LOOP
                SNK_PROCESSA_DADOS_REINF(P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_ATUAL, P_TIPDADOS, EVEF.NOMEEVENTO, EVEF.NOMETAB, P_SEQUENCIA_NEW, P_RESULT);
            END LOOP;
        END IF;

        IF EVE.NOMETABPAI IS NULL THEN
            DELETE FROM TRIVAR; 
            SNK_VERIF_ALTER_REINF(P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW, NULL /*NOME TAB PAI*/, EVE.NOMETAB, EVE.NOMEVIEW, EVE.GRUPO);
        END IF;

        P_INSERT_COLUMNS := ' ' || SNK_GET_COLUMNS_TABLE(EVE.NOMETAB, ' ');
        P_INSERT_VALUES  := P_INSERT_COLUMNS;

        P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' CODEMP', TO_CHAR (P_CODEMP)|| ' AS CODEMP');

        P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' DTREF', ' TO_DATE(SNK_FORMAT_DATE('''||P_DTREF||''', ''DD/MM/YYYY''), ''DD/MM/YYYY'') AS DTREF');

        P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' TPAMB', ' '''||P_TPAMB||''' AS TPAMB');

        P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' SEQUENCIA', ' ' ||TO_CHAR (P_SEQUENCIA_NEW)|| ' AS SEQUENCIA');

        IF EVE.NOMETABPAI IS NULL THEN
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' STATUSREG', ' CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E''  THEN ''F'' ' 
                                                              ||             'ELSE ''P'' ' 
                                                              ||        'END AS STATUSREG');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' TIPO', ' CASE WHEN ( (DADOS.NRO_RECIBO_OLD IS NULL AND DADOS.NRO_RECIBOANT_OLD IS NULL) OR '
                                                              ||               '(DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD = ''E'') )THEN ''I'' ' 
                                                              ||        'WHEN DADOS.STATUS_REG_OLD = ''F'' AND DADOS.CONTROLE_OLD <> ''I'' THEN DADOS.CONTROLE_OLD ' 
                                                              ||        'ELSE DADOS.TIPO_OLD ' 
                                                              ||   'END AS TIPO');

            IF EVE.GRUPO = 'C' THEN
                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' INIVALIDNOVO', ' CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E'' THEN DADOS.INI_VALIDNOVO_OLD '
                                                              ||                    'ELSE NULL '
                                                              ||               'END AS INIVALIDNOVO');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' FIMVALIDNOVO', ' CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E'' THEN DADOS.FIM_VALIDNOVO_OLD '
                                                              ||                    'ELSE NULL '
                                                              ||               'END AS FIMVALIDNOVO');
            END IF;

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' NRORECIBO,', ' CASE WHEN DADOS.CHAVE_OLD IS NOT NULL AND DADOS.CONTROLE_OLD = ''I'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E'' THEN DADOS.NRO_RECIBO_OLD '
                                                              ||              'ELSE NULL ' 
                                                              ||         'END AS NRORECIBO,');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' NRORECIBOANT,', ' CASE WHEN DADOS.CHAVE_OLD IS NOT NULL AND DADOS.CONTROLE_OLD = ''I'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E'' THEN DADOS.NRO_RECIBOANT_OLD ' 
                                                              ||                 'WHEN DADOS.CHAVE_OLD IS NOT NULL AND DADOS.CONTROLE_OLD = ''A'' AND DADOS.STATUS_REG_OLD = ''F'' THEN DADOS.NRO_RECIBO_OLD '
                                                              ||                 'ELSE NULL '
                                                              ||            'END AS NRORECIBOANT,');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' IDEVENTO', ' CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E'' THEN ID_EVENTO_OLD ' 
                                                              ||            'ELSE NULL '
                                                              ||       'END AS IDEEVENTO');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' CONTROLE', ' ''I'' AS CONTROLE');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' MSG', ' CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E'' THEN DADOS.MENSAGEM_OLD '
                                                              ||       'ELSE NULL '
                                                              ||  'END AS MSG');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' XMLEVENTO', ' CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E'' THEN DADOS.XML_EVENTO_OLD '
                                                              ||             'ELSE NULL '
                                                              ||        'END AS XMLEVENTO');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' XMLRETORNO', ' CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E'' THEN DADOS.XML_RETORNO_OLD '
                                                              ||              'ELSE NULL '
                                                              ||         'END AS XMLRETORNO');

            queSql :=                    'INSERT INTO '||EVE.NOMETAB||' ' 
                                      || 'SELECT '||P_INSERT_VALUES||' '     
                                      || 'FROM (SELECT '
                                      ||          'NVL(ANT.CONTROLE, '' '') AS CONTROLE_OLD ' 
                                      ||        ', ANT.NRORECIBO AS NRO_RECIBO_OLD '
                                      ||        ', ANT.NRORECIBOANT AS NRO_RECIBOANT_OLD '
                                      ||        ', ANT.TIPO AS TIPO_OLD '
                                      ||        ', ANT.CHAVE AS CHAVE_OLD ';

            IF EVE.GRUPO = 'C' THEN  
                queSql := queSql      ||        ', ANT.INIVALIDNOVO AS INI_VALIDNOVO_OLD '
                                      ||        ', ANT.FIMVALIDNOVO AS FIM_VALIDNOVO_OLD ';
            END IF;

            queSql := queSql          ||        ', ANT.STATUSREG AS STATUS_REG_OLD '
                                      ||        ', ANT.IDEVENTO AS ID_EVENTO_OLD '
                                      ||        ', ANT.MSG AS MENSAGEM_OLD '
                                      ||        ', ANT.XMLEVENTO AS XML_EVENTO_OLD '
                                      ||        ', ANT.XMLRETORNO AS XML_RETORNO_OLD '
                                      ||        ', V.* '
                                      ||       'FROM '||EVE.NOMEVIEW||' V '
                                      ||           'LEFT JOIN (SELECT '
                                      ||                         'OLD.CHAVE '
                                      ||                       ', OLD.CONTROLE '
                                      ||                       ', NRORECIBO '
                                      ||                       ', NRORECIBOANT '
                                      ||                       ', TIPO ';

            IF EVE.GRUPO = 'C' THEN
                queSql := queSql      ||                       ', INIVALIDNOVO '
                                      ||                       ', FIMVALIDNOVO ';
            END IF;

            queSql := queSql          ||                       ', STATUSREG '
                                      ||                       ', IDEVENTO '
                                      ||                       ', MSG '
                                      ||                       ', XMLEVENTO '
                                      ||                       ', XMLRETORNO '
                                      ||                      'FROM '||EVE.NOMETAB||' OLD '
                                      ||                      '  LEFT JOIN TRIVAR VAR ON VAR.CHAVE = OLD.CHAVE AND VAR.DTREF = OLD.DTREF AND VAR.SEQUENCIA = OLD.SEQUENCIA '
                                      ||                      'WHERE OLD.CODEMP = :CODEMP '
                                      ||                         'AND OLD.TPAMB = :TPAMB '
                                      ||                         'AND (VAR.CHAVE IS NOT NULL OR '
                                      ||                         '       (NOT EXISTS(SELECT 1 '
                                      ||                                            'FROM TRIVAR V '
                                      ||                                            'WHERE CHAVE = OLD.CHAVE) AND OLD.DTREF = :DTREF_OLD AND OLD.SEQUENCIA = :SEQUENCIA_OLD)) '
                                      ||                         ') ANT ON ANT.CHAVE = V.CHAVE '
                                      ||       'WHERE V.CODEMP = :CODEMP ';

            IF EVE.GRUPO = 'C' THEN
                queSql := queSql      ||          'AND :GRUPO = ''C'' ' 
                                      ||          'AND :DTREF BETWEEN V.INIVALID AND NVL(V.FIMVALID, :DTREF) '
                                      ||       ') DADOS ';

                EXECUTE IMMEDIATE queSql USING P_CODEMP, P_TPAMB, P_DTREF_OLD, P_SEQUENCIA_OLD, P_CODEMP, EVE.GRUPO, P_DTREF, P_DTREF;
            ELSE
                IF EVE.VIEWDETALHE = 'S' THEN /*A VIEW QUE Ã DETALHADA NÃO PRECISA PASSAR OS DADOS 'TPAMB' E 'SEQUENCIA' COMO PARAMETROS*/
                    queSql := queSql  ||          'AND DTREF = :DTREF ' 
                                      ||       ') DADOS';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_TPAMB, P_DTREF_OLD, P_SEQUENCIA_OLD, P_CODEMP, P_DTREF;
                ELSE
                    queSql := queSql  ||          'AND DTREF = :DTREF ' 
                                      ||          'AND TPAMB = :TPAMB '
                                      ||          'AND SEQUENCIA = :SEQUENCIA '
                                      ||       ') DADOS';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_TPAMB, P_DTREF_OLD, P_SEQUENCIA_OLD, P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW;
                END IF; 
            END IF;
        ELSE
            /*SÃ ENTRA AQUI PARA OS FILHOS*/
            queSql :=                    'INSERT INTO '||EVE.NOMETAB||' '
                                      || 'SELECT '||P_INSERT_VALUES||' '
                                      || 'FROM '||EVE.NOMEVIEW||' '
                                      || 'WHERE CODEMP = :CODEMP ';

            IF EVE.GRUPO = 'C' THEN
                queSql :=  queSql     /*||    'AND DTREF = :DTREF '*/
                                      ||    'AND :GRUPO = ''C'' ';

                --EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF, EVE.GRUPO;
                EXECUTE IMMEDIATE queSql USING P_CODEMP, EVE.GRUPO;
            ELSE
                IF EVE.VIEWDETALHE = 'S' THEN /*A VIEW QUE Ã DETALHADA NÃO PRECISA PASSAR OS DADOS 'TPAMB' E 'SEQUENCIA' COMO PARAMETROS*/
                    queSql :=  queSql ||    'AND DTREF = :DTREF ';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF;
                ELSE
                    queSql :=  queSql ||    'AND DTREF = :DTREF ' 
                                      ||    'AND TPAMB = :TPAMB '
                                      ||    'AND SEQUENCIA = :SEQUENCIA ';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW;
                END IF; 
            END IF;
        END IF;

        /*UTILIZADO QUANDO O INSERT NÃO FOI FEITO POR CONTA DE EXCLUSÃO, ASSIM PRECISAMOS CRIAR UMA NOVA LINHA PARA SE FAZER A EXCLUSÃO*/
        IF P_DTREF <> P_DTREF_OLD  OR P_SEQUENCIA_NEW <> P_SEQUENCIA_OLD THEN
            P_INSERT_COLUMNS := SNK_GET_COLUMNS_TABLE(EVE.NOMETAB, ' ');
            P_INSERT_VALUES := P_INSERT_COLUMNS; 

            P_INSERT_VALUES := REPLACE(P_INSERT_VALUES, ' ', '');
            P_INSERT_VALUES := 'O.'||REPLACE(P_INSERT_VALUES, ',', ',O.');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.CODEMP,', 'O.CODEMP,');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.DTREF,', ':DTREF,');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.TPAMB,', 'O.TPAMB,');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.SEQUENCIA,', ':SEQUENCIA,');

            IF EVE.NOMETABPAI IS NULL THEN
                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.STATUSREG,', '''P'',');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.TIPO,', '''E'',');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.NRORECIBO,', 'NULL,');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.NRORECIBOANT,', 'O.NRORECIBO,');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.IDEVENTO,', 'NULL,');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.CONTROLE,', '''I'',');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.MSG,', 'NULL,');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.XMLEVENTO,', 'NULL,');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.XMLRETORNO', 'NULL');

                P_FILTRO_MERGE := ' AND ( (STATUSREG = ''F'' AND NRORECIBO IS NOT NULL AND TIPO <> ''E'') OR '||
                                         '(STATUSREG <> ''F'' AND TIPO = ''E'' AND NRORECIBO IS NULL) OR '||
                                         '(STATUSREG <> ''F'' AND TIPO <> ''E'' AND NRORECIBOANT IS NOT NULL) '||
                                        ')';
            ELSE
                P_FILTRO_MERGE := ' AND EXISTS(SELECT 1 '||
                                              'FROM '||EVE.NOMETABPAI||' P '||
                                              'WHERE P.CODEMP = '||EVE.NOMETAB||'.CODEMP '||
                                                  'AND P.DTREF = :DTREF '||
                                                  'AND P.TPAMB = '||EVE.NOMETAB||'.TPAMB '||
                                                  'AND P.SEQUENCIA = :SEQUENCIA ' ||
                                                  'AND P.CHAVE = '||EVE.NOMETAB||'.CHAVE '||
                                                  'AND P.TIPO = ''E'') ';
            END IF; 

            queSql :=      'MERGE INTO '||EVE.NOMETAB||' N '
                        || 'USING (SELECT '||P_INSERT_COLUMNS||' '
                        ||        'FROM '||EVE.NOMETAB||' ' 
                        ||        'WHERE CODEMP = :CODEMP '
                        ||            'AND DTREF = :DTREF_OLD '
                        ||            'AND TPAMB = :TPAMB '
                        ||            'AND SEQUENCIA = :SEQUENCIA_OLD '
                        ||            P_FILTRO_MERGE
                        ||        ') O ' 
                        || 'ON (N.CODEMP = O.CODEMP '
                        || 'AND N.DTREF = :DTREF '
                        || 'AND N.TPAMB = O.TPAMB '
                        || 'AND N.SEQUENCIA = :SEQUENCIA ' 
                        || 'AND N.CHAVE = O.CHAVE )'
                        || 'WHEN NOT MATCHED THEN INSERT ('||P_INSERT_COLUMNS||') '
                        || 'VALUES ('||P_INSERT_VALUES||')';

            IF EVE.NOMETABPAI IS NULL THEN
                EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF_OLD, P_TPAMB, P_SEQUENCIA_OLD, P_DTREF, P_SEQUENCIA_NEW, P_DTREF, P_SEQUENCIA_NEW;
            ELSE 
                EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF_OLD, P_TPAMB, P_SEQUENCIA_OLD, P_DTREF, P_SEQUENCIA_NEW, P_DTREF, P_SEQUENCIA_NEW, P_DTREF, P_SEQUENCIA_NEW;
            END IF;
        END IF;

        IF EVE.GRUPO = 'C' THEN  /*MOVIMENTOS GRAVAM OS EVENTOS FILHOS PRIMEIRO*/     
            FOR EVEF IN (SELECT NOMEEVENTO, NOMETAB
                         FROM TRIMON
                         WHERE NOMETABPAI = EVE.NOMETAB
                         GROUP BY NOMEEVENTO, NOMETAB
                         ORDER BY NOMEEVENTO 
                        ) 
            LOOP
                SNK_PROCESSA_DADOS_REINF(P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_ATUAL, P_TIPDADOS, EVEF.NOMEEVENTO, EVEF.NOMETAB, P_SEQUENCIA_NEW, P_RESULT);
            END LOOP;
        END IF;

        P_RESULT := P_SEQUENCIA_NEW;
    END LOOP;

    /*CHAMANDO A TOTALIZAÃÃO DO RESUMO PARA A SEQUÃNCIA GERADA*/
    IF P_NOMETAB IS NULL THEN
        SNK_TOTALIZA_RESUMO_REINF(P_CODEMP, P_DTREF, P_TPAMB, P_RESULT);
    END IF;    
EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    IF queSql IS NOT NULL THEN
        SELECT COUNT(1) INTO P_COUNT
        FROM LOGREINF
        WHERE DTOCOR = SYSDATE
         AND CODUSU = STP_GET_CODUSULOGADO();
        IF P_COUNT = 0 THEN
            INSERT INTO LOGREINF(DTOCOR, CODUSU, SQLERR)
                SELECT SYSDATE, STP_GET_CODUSULOGADO(), queSql FROM DUAL; 
        END IF;
    END IF;
    COMMIT;
    RAISE_APPLICATION_ERROR(-20101, SQLERRM);
END;
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54696-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5469500
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_PROCESSA_DADOS_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210011
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_PROCESSA_DADOS_REINF' NOMEOBJ, 54695 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, '4ca987755e10eff16bd1e11d12785007' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_PROCESSA_DADOS_REINF' and THO.hashcode = '4ca987755e10eff16bd1e11d12785007')
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54697-0-0
Nro. O.S. : 1148508
Nome      : Alterar - VRI_EVT_R2050_NFS
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VRI_EVT_R2050_NFS
NomeObjeto: VRI_EVT_R2050_NFS
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2050_NFS 
AS
SELECT 
 TAB.CODEMP
,TAB.DTREF
,TAB.TPINSC||','||TAB.NRINSC||','||TAB.TPINSCESTAB||','||TAB.NRINSCESTAB AS CHAVE
,TAB.TPINSC
,TAB.NRINSC
,TAB.TPINSCESTAB
,TAB.NRINSCESTAB
,TAB.INDCOM
,TAB.NUNOTA
,TRUNC(SUM(TAB.VLRRECBRUTA), 2) AS VLRRECBRUTA
,TRUNC(SUM(TAB.VLRCPAPUR), 2) AS VLRCPAPUR
,TRUNC(SUM(TAB.VLRRATAPUR), 2) AS VLRRATAPUR
,TRUNC(SUM(TAB.VLRSENARAPUR), 2) AS VLRSENARAPUR    
,MAX(TAB.NUPROCESSO_INSS) AS NUPROCESSO_INSS
,MAX(TAB.SEQPROCESSO_INSS) AS SEQPROCESSO_INSS
,TRUNC(SUM(TAB.VLRCPAPUR * NVL(ISET_INSS.PERCSUSPIMP, 0) / 100), 2) AS VLRCPSUSP
,MAX(TAB.NUPROCESSO_SENAR) AS NUPROCESSO_SENAR
,MAX(TAB.SEQPROCESSO_SENAR) AS SEQPROCESSO_SENAR
,TRUNC(SUM(TAB.VLRSENARAPUR * NVL(ISET_SENAR.PERCSUSPIMP, 0) / 100), 2) AS VLRSENARSUSP
,MAX(TAB.NUPROCESSO_GILRAT) AS NUPROCESSO_GILRAT
,MAX(TAB.SEQPROCESSO_GILRAT) AS SEQPROCESSO_GILRAT 
,TRUNC(SUM(TAB.VLRRATAPUR * NVL(ISET_GILRAT.PERCSUSPIMP, 0) / 100), 2) AS VLRRATSUSP
FROM (    
    SELECT 
     CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMP.CODEMP
          WHEN NVL(EMP.CODEMPMATRIZEFD, 0) > 0 THEN EMP.CODEMPMATRIZEFD
          ELSE EMP.CODEMP 
     END AS CODEMP
    ,TRUNC(CAB.DTNEG, 'MM') AS DTREF
    ,CASE WHEN LENGTH(EMPC.CGC) = 14 
          THEN '1' 
          ELSE '2' 
     END AS TPINSC
    ,CASE WHEN LENGTH(EMPC.CGC) = 14 
          THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
                    THEN EMPC.CGC
                    ELSE SUBSTR(EMPC.CGC,1,8)
               END
          ELSE EMPC.CGC
     END AS NRINSC
    ,1 AS TPINSCESTAB
    ,EMPC.CGC AS NRINSCESTAB
    ,PAR.INDCOMERCIALIZACAO AS INDCOM
    ,CAB.NUNOTA
    ,ITE.VLRTOT AS VLRRECBRUTA --> segundo Manoel, deve ser assim: VLRTOT + VLRIPI - VLRDESC - VLRREPRED  (conferir)
    ,NVL(DIN.VALOR, NVL(IMN.VALOR, 0)) AS VLRCPAPUR
    ,0 AS VLRRATAPUR /*Posteriormente iremos atrás dessas regras*/
    ,0 AS VLRSENARAPUR /*Posteriormente iremos atrás dessas regras*/
    ,SNK_GET_IDPROCESSO_IMP_EFD(1, 
                                EMP.CODEMP, 
                                PAR.CODPARC, 
                                ITE.CODPROD, 
                                PRO.CODLST, 
                                CAB.DTNEG) AS NUPROCESSO_INSS
    ,SNK_GET_IDPROCESSO_IMP_EFD(1, 
                                EMP.CODEMP, 
                                PAR.CODPARC, 
                                ITE.CODPROD, 
                                PRO.CODLST, 
                                CAB.DTNEG,
                                'S') AS SEQPROCESSO_INSS
    ,NULL /*SNK_GET_IDPROCESSO_IMP_EFD(3, 
                                EMP.CODEMP, 
                                PAR.CODPARC, 
                                ITE.CODPROD, 
                                PRO.CODLST, 
                                CAB.DTNEG)*/ AS NUPROCESSO_SENAR
    ,NULL /*SNK_GET_IDPROCESSO_IMP_EFD(3, 
                                EMP.CODEMP, 
                                PAR.CODPARC, 
                                ITE.CODPROD, 
                                PRO.CODLST, 
                                CAB.DTNEG,
                                'S')*/ AS SEQPROCESSO_SENAR
    ,NULL /*SNK_GET_IDPROCESSO_IMP_EFD(4, 
                                EMP.CODEMP, 
                                PAR.CODPARC, 
                                ITE.CODPROD, 
                                PRO.CODLST, 
                                CAB.DTNEG)*/ AS NUPROCESSO_GILRAT
    ,NULL /*SNK_GET_IDPROCESSO_IMP_EFD(4, 
                                EMP.CODEMP, 
                                PAR.CODPARC, 
                                ITE.CODPROD, 
                                PRO.CODLST, 
                                CAB.DTNEG,
                                'S')*/ AS SEQPROCESSO_GILRAT
    FROM TGFITE ITE
        INNER JOIN TGFCAB CAB  ON CAB.NUNOTA = ITE.NUNOTA
        INNER JOIN (SELECT CODTIPOPER, DHALTER, DESCROPER, TIPMOV, CODMODDOC FROM TGFTOP) TPO  ON TPO.CODTIPOPER = CAB.CODTIPOPER AND TPO.DHALTER = CAB.DHTIPOPER
        INNER JOIN (SELECT CODEMP, CODEMPMATRIZEFD, EMPADMPUBDIR, ATIVO FROM TGFEMP) EMP  ON EMP.CODEMP = CAB.CODEMP
        INNER JOIN (SELECT CODEMP, RAZAOSOCIAL, NOMEFANTASIA, CGC FROM TSIEMP) EMPC ON EMPC.CODEMP = EMP.CODEMP
        INNER JOIN (SELECT CODPARC, NOMEPARC, INDCOMERCIALIZACAO FROM TGFPAR) PAR  ON PAR.CODPARC = CAB.CODPARC
        INNER JOIN (SELECT CODPROD, DESCRPROD, CODLST, COMERCIALIZACAOAGRI FROM TGFPRO) PRO  ON PRO.CODPROD = ITE.CODPROD
        LEFT JOIN  TGFDIN DIN  ON DIN.NUNOTA = ITE.NUNOTA AND DIN.SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 5
        LEFT JOIN  TGFIMN IMN  ON IMN.NUNOTA = ITE.NUNOTA AND IMN.SEQUENCIA = ITE.SEQUENCIA AND IMN.TIPOIMPOSTO = 5
    WHERE EMP.ATIVO = 'S'
        AND NVL(PAR.INDCOMERCIALIZACAO, '0') IN ('1', '8', '9')
        AND NVL(PRO.COMERCIALIZACAOAGRI, 'N') = 'S'
        AND TPO.TIPMOV = 'V'
        AND CAB.STATUSNOTA = 'L' 
        AND TPO.CODMODDOC = 55
        AND CAB.STATUSNFE = 'A'
		AND LENGTH(EMPC.CGC) = 14
        AND (EXISTS (SELECT 1 FROM TGFDIN WHERE NUNOTA = ITE.NUNOTA AND SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 5) OR 
             EXISTS (SELECT 1 FROM TGFIMN WHERE NUNOTA = ITE.NUNOTA AND SEQUENCIA = ITE.SEQUENCIA AND IMN.TIPOIMPOSTO = 5))
) TAB
    LEFT JOIN TRIPISET ISET_INSS ON ISET_INSS.NUPROCESSO = NUPROCESSO_INSS AND ISET_INSS.SEQUENCIA = SEQPROCESSO_INSS
    LEFT JOIN TRIPISET ISET_SENAR ON ISET_SENAR.NUPROCESSO = NUPROCESSO_SENAR AND ISET_SENAR.SEQUENCIA = SEQPROCESSO_SENAR
    LEFT JOIN TRIPISET ISET_GILRAT ON ISET_GILRAT.NUPROCESSO = NUPROCESSO_GILRAT AND ISET_GILRAT.SEQUENCIA = SEQPROCESSO_GILRAT
GROUP BY  
 TAB.CODEMP
,TAB.DTREF
,TAB.TPINSC
,TAB.NRINSC
,TAB.TPINSCESTAB
,TAB.NRINSCESTAB
,TAB.INDCOM
,TAB.NUNOTA
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54698-0-0
Nro. O.S. : 1148508
Nome      : Alterar - VRI_EVT_R1070_INFOSUSP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VRI_EVT_R1070_INFOSUSP
NomeObjeto: VRI_EVT_R1070_INFOSUSP
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R1070_INFOSUSP
AS  
SELECT
 V.CODEMP                            AS CODEMP
,V.DTREF                             AS DTREF
,ISET.NUPROCESSO                     AS CHAVE
,ISET.NUPROCESSO                     AS NUPROCESSO
,ISET.SEQUENCIA                      AS SEQPRISET
,ISET.CODSUSP                        AS CODSUSP
,ISET.INDSUSPREINF                   AS INDSUSP  
,ISET.DTDECISAO                      AS DTDECISAO
,ISET.INDDEPOSITO                    AS INDDEPOSITO
FROM TRIPISET ISET
    INNER JOIN VRI_EVT_R1070 V ON V.NUPROCESSO = ISET.NUPROCESSO
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54699-0-0
Nro. O.S. : 1148508
Nome      : Alterar - VRI_EVT_R2010
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VRI_EVT_R2010
NomeObjeto: VRI_EVT_R2010
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2010
AS
SELECT 
 INFST.CODEMP
,INFST.DTREF
,INFST.TPAMB
,INFST.SEQUENCIA
,INFST.CHAVE
,INFST.TPINSC
,INFST.NRINSC
,INFST.TPINSCESTAB
,INFST.NRINSCESTAB
,INFST.INDOBRA
,INFST.CNPJPRESTADOR
,SUM(INFST.VLRTOTALBRUTO) AS VLRTOTALBRUTO
,SUM(INFST.VLRBASERET) AS VLRTOTALBASERET
,SUM(INFST.VLRRETENCAO) AS VLRTOTALRETPRINC 
,SUM(INFST.VLRADICIONAL) AS VLRTOTALRETADIC
,SUM(INFST.VLRNRETPRINC) AS VLRTOTALNRETPRINC
,SUM(INFST.VLRNRETADIC) AS VLRTOTALNRETADIC
,INFST.INDCPRB
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.CNPJPRESTADORRET ELSE NULL END AS CNPJPRESTADORRET 
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALBASERETRET ELSE NULL END AS VLRTOTALBASERETRET
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALRETPRINCRET ELSE NULL END AS VLRTOTALRETPRINCRET
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALRETADICRET ELSE NULL END AS VLRTOTALRETADICRET
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALNRETPRINCRET ELSE NULL END AS VLRTOTALNRETPRINCRET
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALNRETADICRET ELSE NULL END AS VLRTOTALNRETADICRET
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRCRTOM ELSE NULL END AS VLRCRTOM
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRCRTOMSUSP ELSE NULL END AS VLRCRTOMSUSP
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRCRTOMRET ELSE NULL END AS VLRCRTOMRET
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRCRTOMSUSPRET ELSE NULL END AS VLRCRTOMSUSPRET
FROM TRIINFST INFST
    LEFT JOIN TRIRCST RCST ON RCST.CODEMP = INFST.CODEMP
                          AND RCST.DTREF = INFST.DTREF
                          AND RCST.TPAMB = INFST.TPAMB
                          AND RCST.SEQUENCIA = (INFST.SEQUENCIA - 1)
                          AND RCST.CHAVE = INFST.CHAVE
GROUP BY 
 INFST.CODEMP
,INFST.DTREF
,INFST.TPAMB
,INFST.SEQUENCIA
,INFST.CHAVE
,INFST.TPINSC
,INFST.NRINSC
,INFST.TPINSCESTAB
,INFST.NRINSCESTAB
,INFST.INDOBRA
,INFST.CNPJPRESTADOR
,INFST.INDCPRB
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.CNPJPRESTADORRET ELSE NULL END 
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALBASERETRET ELSE NULL END
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALRETPRINCRET ELSE NULL END
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALRETADICRET ELSE NULL END
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALNRETPRINCRET ELSE NULL END
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALNRETADICRET ELSE NULL END
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRCRTOM ELSE NULL END
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRCRTOMSUSP ELSE NULL END
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRCRTOMRET ELSE NULL END
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRCRTOMSUSPRET ELSE NULL END
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54700-0-0
Nro. O.S. : 1148508
Nome      : Dropar - TRG_UPD_DLT_TGFCAB_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - TRG_UPD_DLT_TGFCAB_REINF
NomeObjeto: TRG_UPD_DLT_TGFCAB_REINF
TipoObjeto: TRIGGER
NomeTabela: TGFCAB
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DROP TRIGGER TRG_UPD_DLT_TGFCAB_REINF
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54701-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5470000
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_UPD_DLT_TGFCAB_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210011
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_UPD_DLT_TGFCAB_REINF' NOMEOBJ, 54700 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '5224b43782c4179ca451257b0aa26107' HASHCODE, 'Drop Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_UPD_DLT_TGFCAB_REINF' and THO.hashcode = '5224b43782c4179ca451257b0aa26107')
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54702-0-0
Nro. O.S. : 1148508
Nome      : Dropar - TRG_UPD_DLT_TGFITE_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - TRG_UPD_DLT_TGFITE_REINF
NomeObjeto: TRG_UPD_DLT_TGFITE_REINF
TipoObjeto: TRIGGER
NomeTabela: TGFITE
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DROP TRIGGER TRG_UPD_DLT_TGFITE_REINF
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54703-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5470200
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_UPD_DLT_TGFITE_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210011
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_UPD_DLT_TGFITE_REINF' NOMEOBJ, 54702 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '5224b43782c4179ca451257b0aa26107' HASHCODE, 'Drop Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_UPD_DLT_TGFITE_REINF' and THO.hashcode = '5224b43782c4179ca451257b0aa26107')
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54704-0-0
Nro. O.S. : 1148508
Nome      : Dropar - TRG_UPD_DLT_TGFDIN_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - TRG_UPD_DLT_TGFDIN_REINF
NomeObjeto: TRG_UPD_DLT_TGFDIN_REINF
TipoObjeto: TRIGGER
NomeTabela: TGFDIN
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DROP TRIGGER TRG_UPD_DLT_TGFDIN_REINF
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54705-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5470400
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_UPD_DLT_TGFDIN_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210011
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_UPD_DLT_TGFDIN_REINF' NOMEOBJ, 54704 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '5224b43782c4179ca451257b0aa26107' HASHCODE, 'Drop Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_UPD_DLT_TGFDIN_REINF' and THO.hashcode = '5224b43782c4179ca451257b0aa26107')
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54706-0-0
Nro. O.S. : 1148508
Nome      : Dropar - TRG_UPD_DLT_TGFIMN_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - TRG_UPD_DLT_TGFIMN_REINF
NomeObjeto: TRG_UPD_DLT_TGFIMN_REINF
TipoObjeto: TRIGGER
NomeTabela: TGFIMN
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DROP TRIGGER TRG_UPD_DLT_TGFIMN_REINF
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54707-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5470600
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_UPD_DLT_TGFIMN_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210011
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_UPD_DLT_TGFIMN_REINF' NOMEOBJ, 54706 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '5224b43782c4179ca451257b0aa26107' HASHCODE, 'Drop Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_UPD_DLT_TGFIMN_REINF' and THO.hashcode = '5224b43782c4179ca451257b0aa26107')
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54708-0-0
Nro. O.S. : 1148508
Nome      : Dropar - TRG_UPD_DLT_TGFFIN_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - TRG_UPD_DLT_TGFFIN_REINF
NomeObjeto: TRG_UPD_DLT_TGFFIN_REINF
TipoObjeto: TRIGGER
NomeTabela: TGFFIN
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DROP TRIGGER TRG_UPD_DLT_TGFFIN_REINF
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54709-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5470800
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_UPD_DLT_TGFFIN_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210011
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_UPD_DLT_TGFFIN_REINF' NOMEOBJ, 54708 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '5224b43782c4179ca451257b0aa26107' HASHCODE, 'Drop Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_UPD_DLT_TGFFIN_REINF' and THO.hashcode = '5224b43782c4179ca451257b0aa26107')
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54710-0-0
Nro. O.S. : 1148508
Nome      : Dropar - TRG_UPD_DLT_TGFIMF_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - TRG_UPD_DLT_TGFIMF_REINF
NomeObjeto: TRG_UPD_DLT_TGFIMF_REINF
TipoObjeto: TRIGGER
NomeTabela: TGFIMF
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DROP TRIGGER TRG_UPD_DLT_TGFIMF_REINF
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54711-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5471000
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_UPD_DLT_TGFIMF_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210011
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_UPD_DLT_TGFIMF_REINF' NOMEOBJ, 54710 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '5224b43782c4179ca451257b0aa26107' HASHCODE, 'Drop Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_UPD_DLT_TGFIMF_REINF' and THO.hashcode = '5224b43782c4179ca451257b0aa26107')
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54712-0-0
Nro. O.S. : 1148508
Nome      : Dropar - TRG_UPD_TGFCAB_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - TRG_UPD_TGFCAB_REINF
NomeObjeto: TRG_UPD_TGFCAB_REINF
TipoObjeto: TRIGGER
NomeTabela: TGFCAB
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DROP TRIGGER TRG_UPD_TGFCAB_REINF
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54713-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5471200
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_UPD_TGFCAB_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210011
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_UPD_TGFCAB_REINF' NOMEOBJ, 54712 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '5224b43782c4179ca451257b0aa26107' HASHCODE, 'Drop Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_UPD_TGFCAB_REINF' and THO.hashcode = '5224b43782c4179ca451257b0aa26107')
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54714-0-0
Nro. O.S. : 1148508
Nome      : Dropar - TRG_UPD_TGFCAB_REINF2
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - TRG_UPD_TGFCAB_REINF2
NomeObjeto: TRG_UPD_TGFCAB_REINF2
TipoObjeto: TRIGGER
NomeTabela: TGFCAB
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DROP TRIGGER TRG_UPD_TGFCAB_REINF2
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54715-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5471400
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_UPD_TGFCAB_REINF2
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210011
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_UPD_TGFCAB_REINF2' NOMEOBJ, 54714 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '5224b43782c4179ca451257b0aa26107' HASHCODE, 'Drop Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_UPD_TGFCAB_REINF2' and THO.hashcode = '5224b43782c4179ca451257b0aa26107')
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54716-0-0
Nro. O.S. : 1148508
Nome      : Alterar - TRG_UPD_TRICAB
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - TRG_UPD_TRICAB
NomeObjeto: TRG_UPD_TRICAB
TipoObjeto: TRIGGER
NomeTabela: TRICAB
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_UPD_TRICAB
BEFORE UPDATE ON TRICAB
FOR EACH ROW
BEGIN
    IF NVL(:OLD.EVTPENDENTE, 0) <> NVL(:NEW.EVTPENDENTE, 0) OR
       NVL(:OLD.EVTENVIADO, 0) <> NVL(:NEW.EVTENVIADO, 0) OR
       NVL(:OLD.EVTAGUARCORRECAO, 0) <> NVL(:NEW.EVTAGUARCORRECAO, 0) OR
       NVL(:OLD.EVTERROEVTPRIOR, 0) <> NVL(:NEW.EVTERROEVTPRIOR, 0) OR
       NVL(:OLD.EVTFINALIZADO, 0) <> NVL(:NEW.EVTFINALIZADO, 0) THEN
        :NEW.EVTTOTAIS := NVL(:NEW.EVTPENDENTE, 0) + NVL(:NEW.EVTENVIADO, 0) + NVL(:NEW.EVTAGUARCORRECAO, 0) + NVL(:NEW.EVTERROEVTPRIOR, 0) + NVL(:NEW.EVTFINALIZADO, 0);

        /*ESSES STATUS REFEREM-SE AO PROCESSO DE FECHAMENTO OU DE REABERTURA, LOGO ELE FOI RESOLVIDO NAS TABELAS DE ORIGEM*/
        /*6 - Em processo de fechamento*/
        /*7 - Referência fechada com sucesso*/
        /*8 - Em processo de reabertura*/
        /*9 - Referência reaberta com sucesso*/
        IF :NEW.STATUS NOT IN (6, 7, 8, 9) THEN
        :NEW.STATUS :=  CASE WHEN NVL(:NEW.EVTPENDENTE, 0) > 0 THEN 1                          /*1 - Eventos pendentes para o envio*/
                             WHEN NVL(:NEW.EVTENVIADO, 0) > 0 THEN 2                           /*2 - Eventos enviados com sucesso - Pendentes de finalização*/
                             WHEN NVL(:NEW.EVTAGUARCORRECAO, 0) > 0 OR 
                                  NVL(:NEW.EVTERROEVTPRIOR, 0) > 0 THEN 3                      /*3 - Eventos aguardando correção*/
                             WHEN NVL(:NEW.EVTTOTAIS, 0) = NVL(:NEW.EVTFINALIZADO, 0) THEN 4   /*4 - Eventos finalizados com sucesso - Pendentes de fechamento*/
                             ELSE 0 END;                                                       /*0 - Referência não iniciada*/
        END IF;
    ELSIF :OLD.CONTROLE <> :NEW.CONTROLE AND :NEW.CONTROLE = 'A' THEN
		:NEW.STATUS := CASE WHEN :NEW.STATUS = '7' THEN '5' 									/*5 - Referência finalizada com alterações após o fechamento*/
							ELSE '10' 															/*10 - Alterações pendentes de geração*/
					   END;
	END IF;
END;
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54717-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5471600
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_UPD_TRICAB
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210011
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_UPD_TRICAB' NOMEOBJ, 54716 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '496ad2d4afbda5ba085b6366f570b817' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_UPD_TRICAB' and THO.hashcode = '496ad2d4afbda5ba085b6366f570b817')
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54882-0-0
Nro. O.S. : 1148508
Nome      : Criar - TRIRCST TIPO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TRIRCST  TIPO
NomeObjeto: TIPO
TipoObjeto: COLUMN
NomeTabela: TRIRCST 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TRIRCST ADD TIPO CHAR(1)';
   EXECUTE IMMEDIATE 'UPDATE TRIRCST SET TIPO = CASE WHEN NRORECIBOANT IS NOT NULL THEN ''A'' ELSE ''I'' END';
   EXECUTE IMMEDIATE 'ALTER TABLE TRIRCST ADD  CONSTRAINT CKC_TIPO_TRIRCST CHECK (TIPO IN ( ''I'', ''A'',''E''))';
   EXECUTE IMMEDIATE 'ALTER TABLE TRIRCST MODIFY TIPO DEFAULT ''I'' NOT NULL';
END;
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54883-0-0
Nro. O.S. : 1148508
Nome      : Criar - TRIRCSP TIPO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TRIRCSP TIPO
NomeObjeto: TIPO
TipoObjeto: COLUMN
NomeTabela: TRIRCSP 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TRIRCSP ADD TIPO CHAR(1)';
   EXECUTE IMMEDIATE 'UPDATE TRIRCSP SET TIPO = CASE WHEN NRORECIBOANT IS NOT NULL THEN ''A'' ELSE ''I'' END';
   EXECUTE IMMEDIATE 'ALTER TABLE TRIRCSP ADD  CONSTRAINT CKC_TIPO_TRIRCSP CHECK (TIPO IN ( ''I'', ''A'',''E''))';
   EXECUTE IMMEDIATE 'ALTER TABLE TRIRCSP MODIFY TIPO DEFAULT ''I'' NOT NULL';
END;
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54884-0-0
Nro. O.S. : 1148508
Nome      : Criar - TRICPPR TIPO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TRICPPR TIPO
NomeObjeto: TIPO
TipoObjeto: COLUMN
NomeTabela: TRICPPR 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TRICPPR ADD TIPO CHAR(1)';
   EXECUTE IMMEDIATE 'UPDATE TRICPPR SET TIPO = CASE WHEN NRORECIBOANT IS NOT NULL THEN ''A'' ELSE ''I'' END';
   EXECUTE IMMEDIATE 'ALTER TABLE TRICPPR ADD  CONSTRAINT CKC_TIPO_TRICPPR CHECK (TIPO IN ( ''I'', ''A'',''E''))';
   EXECUTE IMMEDIATE 'ALTER TABLE TRICPPR MODIFY TIPO DEFAULT ''I'' NOT NULL';
END;
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54885-0-0
Nro. O.S. : 1148508
Nome      : Criar - TRICPRB TIPO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TRICPRB TIPO
NomeObjeto: TIPO
TipoObjeto: COLUMN
NomeTabela: TRICPRB 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE TRICPRB ADD TIPO CHAR(1)';
   EXECUTE IMMEDIATE 'UPDATE TRICPRB SET TIPO = CASE WHEN NRORECIBOANT IS NOT NULL THEN ''A'' ELSE ''I'' END';
   EXECUTE IMMEDIATE 'ALTER TABLE TRICPRB ADD  CONSTRAINT CKC_TIPO_TRICPRB CHECK (TIPO IN ( ''I'', ''A'',''E''))';
   EXECUTE IMMEDIATE 'ALTER TABLE TRICPRB MODIFY TIPO DEFAULT ''I'' NOT NULL';
END;
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54886-0-0
Nro. O.S. : 1148508
Nome      : Script - AMBIENTEREINF 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - AMBIENTEREINF 
NomeObjeto: AMBIENTEREINF 
TipoObjeto: COLUMN
NomeTabela: TGFEMP
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
    P_COUNT         INT;
BEGIN
    SELECT COUNT(*) INTO P_COUNT
    FROM TGFEMP
    WHERE AMBIENTEREINF IS NOT NULL;
	    
    IF P_COUNT > 0 THEN    
        BEGIN
            EXECUTE IMMEDIATE  'UPDATE TGFEMP
                                SET AMBIENTEREINF = CASE WHEN AMBIENTEREINF = 3 THEN 2 ELSE AMBIENTEREINF END
                                WHERE AMBIENTEREINF IS NOT NULL';
            
        EXCEPTION        
            WHEN OTHERS THEN
                RAISE_APPLICATION_ERROR(-20010,'Problema na alteração do campo AMBIENTEREINF');                
        END;
    END IF;
END;
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54887-0-0
Nro. O.S. : 1148508
Nome      : Dropar - CKC_AMBIENTEREINF_TGFEMP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - CKC_AMBIENTEREINF_TGFEMP
NomeObjeto: CKC_AMBIENTEREINF_TGFEMP
TipoObjeto: CONSTRAINT
NomeTabela: TGFEMP
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFEMP DROP CONSTRAINT CKC_AMBIENTEREINF_TGFEMP
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54888-0-0
Nro. O.S. : 1148508
Nome      : Criar - CKC_AMBIENTEREINF_TGFEMP 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - CKC_AMBIENTEREINF_TGFEMP 
NomeObjeto: CKC_AMBIENTEREINF_TGFEMP 
TipoObjeto: CONSTRAINT
NomeTabela: TGFEMP 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFEMP ADD  CONSTRAINT CKC_AMBIENTEREINF_TGFEMP CHECK (AMBIENTEREINF IN (1,2) OR AMBIENTEREINF IS NULL)
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54889-0-0
Nro. O.S. : 1148508
Nome      : Criar - FK_TRIPEMP_TRIPISET 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - FK_TRIPEMP_TRIPISET 
NomeObjeto: FK_TRIPEMP_TRIPISET 
TipoObjeto: FOREIGN KEY
NomeTabela: TRIPEMP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE 
P_COUNT     NUMBER(10);
    BEGIN
        SELECT COUNT(1) INTO P_COUNT
        FROM TRIPEMP
        WHERE NOT EXISTS (SELECT 1
                          FROM TRIPISET ISET
                          WHERE ISET.NUPROCESSO = TRIPEMP.NUPROCESSO
                            AND ISET.SEQUENCIA = TRIPEMP.SEQUENCIA);

        IF P_COUNT > 0 THEN
            EXECUTE IMMEDIATE 'DELETE TRIPEMP
                               WHERE NOT EXISTS (SELECT 1
                                                 FROM TRIPISET ISET
                                                 WHERE ISET.NUPROCESSO = TRIPEMP.NUPROCESSO
                                                    AND ISET.SEQUENCIA = TRIPEMP.SEQUENCIA)';
        END IF;

        EXECUTE IMMEDIATE 'ALTER TABLE TRIPEMP ADD CONSTRAINT FK_TRIPEMP_TRIPISET FOREIGN KEY (NUPROCESSO, SEQUENCIA) REFERENCES TRIPISET (NUPROCESSO, SEQUENCIA)';
    END;
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54890-0-0
Nro. O.S. : 1148508
Nome      : Criar - FK_TRIPIMP_TRIPISET 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - FK_TRIPIMP_TRIPISET 
NomeObjeto: FK_TRIPIMP_TRIPISET 
TipoObjeto: FOREIGN KEY
NomeTabela: TRIPIMP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE 
P_COUNT     NUMBER(10);
    BEGIN
        SELECT COUNT(1) INTO P_COUNT
        FROM TRIPIMP
        WHERE NOT EXISTS (SELECT 1
                          FROM TRIPISET ISET
                          WHERE ISET.NUPROCESSO = TRIPIMP.NUPROCESSO
                            AND ISET.SEQUENCIA = TRIPIMP.SEQUENCIA);

        IF P_COUNT > 0 THEN
            EXECUTE IMMEDIATE 'DELETE TRIPIMP
                               WHERE NOT EXISTS (SELECT 1
                                                 FROM TRIPISET ISET
                                                 WHERE ISET.NUPROCESSO = TRIPIMP.NUPROCESSO
                                                    AND ISET.SEQUENCIA = TRIPIMP.SEQUENCIA)';
        END IF;

        EXECUTE IMMEDIATE 'ALTER TABLE TRIPIMP ADD CONSTRAINT FK_TRIPIMP_TRIPISET FOREIGN KEY (NUPROCESSO, SEQUENCIA) REFERENCES TRIPISET (NUPROCESSO, SEQUENCIA)';
    END;
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54891-0-0
Nro. O.S. : 1148508
Nome      : Criar - FK_TRIPPARC_TRIPISET 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - FK_TRIPPARC_TRIPISET 
NomeObjeto: FK_TRIPPARC_TRIPISET 
TipoObjeto: FOREIGN KEY
NomeTabela: TRIPPARC
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE 
P_COUNT     NUMBER(10);
    BEGIN
        SELECT COUNT(1) INTO P_COUNT
        FROM TRIPPARC
        WHERE NOT EXISTS (SELECT 1
                          FROM TRIPISET ISET
                          WHERE ISET.NUPROCESSO = TRIPPARC.NUPROCESSO
                            AND ISET.SEQUENCIA = TRIPPARC.SEQUENCIA);

        IF P_COUNT > 0 THEN
            EXECUTE IMMEDIATE 'DELETE TRIPPARC
                               WHERE NOT EXISTS (SELECT 1
                                                 FROM TRIPISET ISET
                                                 WHERE ISET.NUPROCESSO = TRIPPARC.NUPROCESSO
                                                    AND ISET.SEQUENCIA = TRIPPARC.SEQUENCIA)';
        END IF;

        EXECUTE IMMEDIATE 'ALTER TABLE TRIPPARC ADD CONSTRAINT FK_TRIPPARC_TRIPISET FOREIGN KEY (NUPROCESSO, SEQUENCIA) REFERENCES TRIPISET (NUPROCESSO, SEQUENCIA)';
    END;
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54892-0-0
Nro. O.S. : 1148508
Nome      : Criar - FK_TRIPPROD_TRIPISET 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - FK_TRIPPROD_TRIPISET 
NomeObjeto: FK_TRIPPROD_TRIPISET 
TipoObjeto: FOREIGN KEY
NomeTabela: TRIPPROD
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE 
P_COUNT     NUMBER(10);
    BEGIN
        SELECT COUNT(1) INTO P_COUNT
        FROM TRIPPROD
        WHERE NOT EXISTS (SELECT 1
                          FROM TRIPISET ISET
                          WHERE ISET.NUPROCESSO = TRIPPROD.NUPROCESSO
                            AND ISET.SEQUENCIA = TRIPPROD.SEQUENCIA);

        IF P_COUNT > 0 THEN
            EXECUTE IMMEDIATE 'DELETE TRIPPROD
                               WHERE NOT EXISTS (SELECT 1
                                                 FROM TRIPISET ISET
                                                 WHERE ISET.NUPROCESSO = TRIPPROD.NUPROCESSO
                                                    AND ISET.SEQUENCIA = TRIPPROD.SEQUENCIA)';
        END IF;

        EXECUTE IMMEDIATE 'ALTER TABLE TRIPPROD ADD CONSTRAINT FK_TRIPPROD_TRIPISET FOREIGN KEY (NUPROCESSO, SEQUENCIA) REFERENCES TRIPISET (NUPROCESSO, SEQUENCIA)';
    END;
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54893-0-0
Nro. O.S. : 1148508
Nome      : Criar - FK_TRIPTPSV_TRIPISET 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - FK_TRIPTPSV_TRIPISET 
NomeObjeto: FK_TRIPTPSV_TRIPISET 
TipoObjeto: FOREIGN KEY
NomeTabela: TRIPTPSV
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE 
P_COUNT     NUMBER(10);
    BEGIN
        SELECT COUNT(1) INTO P_COUNT
        FROM TRIPTPSV
        WHERE NOT EXISTS (SELECT 1
                          FROM TRIPISET ISET
                          WHERE ISET.NUPROCESSO = TRIPTPSV.NUPROCESSO
                            AND ISET.SEQUENCIA = TRIPTPSV.SEQUENCIA);

        IF P_COUNT > 0 THEN
            EXECUTE IMMEDIATE 'DELETE TRIPTPSV
                               WHERE NOT EXISTS (SELECT 1
                                                 FROM TRIPISET ISET
                                                 WHERE ISET.NUPROCESSO = TRIPTPSV.NUPROCESSO
                                                    AND ISET.SEQUENCIA = TRIPTPSV.SEQUENCIA)';
        END IF;

        EXECUTE IMMEDIATE 'ALTER TABLE TRIPTPSV ADD CONSTRAINT FK_TRIPTPSV_TRIPISET FOREIGN KEY (NUPROCESSO, SEQUENCIA) REFERENCES TRIPISET (NUPROCESSO, SEQUENCIA)';
    END;
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54894-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRCST VLRCRTOM
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRCRTOM
TipoObjeto: COLUMN
NomeTabela: TRIRCST
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCST ADD VLRCRTOM FLOAT
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54895-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRCST VLRCRTOMSUSP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRCRTOMSUSP
TipoObjeto: COLUMN
NomeTabela: TRIRCST
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCST ADD VLRCRTOMSUSP FLOAT
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54896-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRCST VLRCRTOMRET
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRCRTOMRET
TipoObjeto: COLUMN
NomeTabela: TRIRCST
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCST ADD VLRCRTOMRET FLOAT
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54897-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRCST VLRCRTOMSUSPRET
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRCRTOMSUSPRET
TipoObjeto: COLUMN
NomeTabela: TRIRCST
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCST ADD VLRCRTOMSUSPRET FLOAT
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54898-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRCSTRES VLRCRTOMSIS
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRCRTOMSIS
TipoObjeto: COLUMN
NomeTabela: TRIRCSTRES
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCSTRES ADD VLRCRTOMSIS FLOAT
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54899-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRCSTRES VLRCRTOMSUSPSIS
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRCRTOMSUSPSIS
TipoObjeto: COLUMN
NomeTabela: TRIRCSTRES
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCSTRES ADD VLRCRTOMSUSPSIS FLOAT
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54900-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRCSTRES VLRCRTOMRET
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRCRTOMRET
TipoObjeto: COLUMN
NomeTabela: TRIRCSTRES
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCSTRES ADD VLRCRTOMRET FLOAT
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54901-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIRCSTRES VLRCRTOMSUSPRET
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRCRTOMSUSPRET
TipoObjeto: COLUMN
NomeTabela: TRIRCSTRES
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIRCSTRES ADD VLRCRTOMSUSPRET FLOAT
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54902-0-0
Nro. O.S. : 1148508
Nome      : Criar - TRIVAR 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TRIVAR 
NomeObjeto: TRIVAR 
TipoObjeto: TABLE
NomeTabela: TRIVAR 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE GLOBAL TEMPORARY TABLE TRIVAR (
    CHAVE           VARCHAR2(100), 
    VALIDACAO       CHAR(1),         
    DTREF           DATE,      
    SEQUENCIA       NUMBER(5), 
    CONTROLE        CHAR(1),
    CONSTRAINT PK_TRIVAR PRIMARY KEY (CHAVE, VALIDACAO)
)
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54903-0-0
Nro. O.S. : 1148508
Nome      : Alterar - SNK_VERIF_ALTER_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - SNK_VERIF_ALTER_REINF
NomeObjeto: SNK_VERIF_ALTER_REINF
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_VERIF_ALTER_REINF(P_CODEMP          NUMBER, 
                                                  P_DTREF           DATE, 
                                                  P_TPAMB           VARCHAR2, 
                                                  P_SEQUENCIAATUAL  NUMBER,
                                                  P_NOMETAB_PAI     VARCHAR2 := NULL,
                                                  P_NOMETAB         VARCHAR2,
                                                  P_NOMEVIEW        VARCHAR2,
                                                  P_GRUPO           VARCHAR2,
                                                  P_VIEWDETALHE     VARCHAR2 := 'N')
IS
    P_CONDITION         VARCHAR2(4000);
    queSql              VARCHAR2(4000);
    TYPE CURTYPE        IS REF CURSOR;
    CURVAL              CURTYPE;
    P_COLUNAS_PADRAO    VARCHAR2(4000) := 'CODEMP, DTREF, TPAMB, SEQUENCIA, STATUSREG, TIPO, NRORECIBO, NRORECIBOANT, IDEVENTO, CONTROLE, MSG, XMLEVENTO, XMLRETORNO, INIVALIDNOVO, FIMVALIDNOVO ';
    P_COL_PAD_FILHOS    VARCHAR2(4000) := 'CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE';
    P_FILTRO_FILHOS     VARCHAR2(4000);
    P_COUNT             NUMBER(10);
BEGIN
    P_CONDITION := SNK_GET_COLUMNS_REINF(P_NOMETAB, P_COLUNAS_PADRAO);

    IF P_NOMETAB_PAI IS NULL THEN 
        queSql :=                 'SELECT CHAVE, VALIDACAO, DTREF, SEQUENCIA, CONTROLE '||
                                  'FROM (  SELECT O.CHAVE '||
                                                ', CASE WHEN (O.TIPO = ''E'') OR ('||P_CONDITION||') THEN ''I'' '||
                                                       'ELSE ''A'' '||
                                                  'END AS VALIDACAO '||
                                                ', O.DTREF '||
                                                ', O.SEQUENCIA '||
                                                ', O.CONTROLE  '||
                                          'FROM '||P_NOMETAB||' O '||
                                              'INNER JOIN '||P_NOMEVIEW||' N ON O.CODEMP = N.CODEMP '||
                                                                           'AND O.CHAVE = N.CHAVE ';

        IF P_GRUPO = 'M' THEN
            queSql := queSql ||                                            'AND O.DTREF = N.DTREF '||
                                                                           'AND N.SEQUENCIA = :SEQUENCIA ';
        END IF;

        queSql := queSql ||               'WHERE O.CODEMP = :CODEMP ';

        IF P_GRUPO = 'M' THEN
            queSql := queSql ||               'AND O.DTREF = :DTREF '; /* MOVIMENTO NÃO PRECISA OLHAR OUTRAS REFERÊNCIAS*/
        ELSE 
            queSql := queSql ||               'AND O.DTREF = (SELECT MAX(DTREF) '||
                                                             'FROM '||P_NOMETAB||' D '||
                                                             'WHERE D.CODEMP = O.CODEMP '||
                                                                 'AND D.TPAMB = O.TPAMB '||
                                                                 'AND D.CHAVE = O.CHAVE '||
                                                                 'AND D.STATUSREG = ''F'' '||
                                                                 'AND D.NRORECIBO IS NOT NULL '||
                                                             ') ';
        END IF;

        queSql := queSql ||                   'AND O.TPAMB = :TPAMB '||
                                              'AND O.SEQUENCIA = (SELECT MAX(SEQUENCIA) '||
                                                                 'FROM '||P_NOMETAB||' S '||
                                                                 'WHERE S.CODEMP = O.CODEMP '||
                                                                     'AND S.TPAMB = O.TPAMB '||
                                                                     'AND S.CHAVE = O.CHAVE '||
                                                                     'AND S.DTREF = O.DTREF '||
                                                                     'AND S.STATUSREG = ''F'' '||
                                                                     'AND S.NRORECIBO IS NOT NULL '||
                                                                 ') '||
                                              'AND O.STATUSREG = ''F'' '||
                                        ') DTALT ';

        queSql :=   'INSERT INTO TRIVAR (CHAVE, VALIDACAO, DTREF, SEQUENCIA, CONTROLE) '||queSql;

        IF P_GRUPO = 'M' THEN
            EXECUTE IMMEDIATE queSql USING P_SEQUENCIAATUAL, P_CODEMP, P_DTREF, P_TPAMB;
        ELSE
            EXECUTE IMMEDIATE queSql USING P_CODEMP, P_TPAMB;
        END IF;
    ELSE 
        P_FILTRO_FILHOS := NVL(SNK_GET_PK_FOR_REINF(P_NOMETAB, P_COL_PAD_FILHOS), ' ');

        queSql :=                 'SELECT CHAVE, VALIDACAO, DTREF, SEQUENCIA, CONTROLE '||
                                  'FROM (  SELECT O.CHAVE '||
                                               ', CASE WHEN (N.CODEMP IS NOT NULL) AND (P.TIPO = ''E'' OR ('||P_CONDITION||')) THEN ''I'' '||
                                                      'ELSE ''A'' '||
                                                 'END AS VALIDACAO '||
                                               ', O.DTREF '||
                                               ', O.SEQUENCIA '||
                                               ', P.CONTROLE  '||
                                          'FROM '||P_NOMETAB||' O '||
                                              'LEFT JOIN '||P_NOMEVIEW||' N ON N.CODEMP = O.CODEMP '||
                                                                          'AND N.CHAVE = O.CHAVE '||
                                                                          P_FILTRO_FILHOS||' ';

        IF P_GRUPO = 'M' THEN
            queSql := queSql ||                                           'AND N.DTREF = O.DTREF ';

            IF P_VIEWDETALHE = 'N' THEN
                queSql := queSql ||                                       'AND N.SEQUENCIA = :SEQUENCIA ';
            END IF;
        END IF;

        queSql := queSql ||                   'INNER JOIN '||P_NOMETAB_PAI||' P ON P.CODEMP = O.CODEMP '||
                                                                              'AND P.DTREF = O.DTREF '||
                                                                              'AND P.TPAMB = O.TPAMB '||
                                                                              'AND P.SEQUENCIA = O.SEQUENCIA '||
                                                                              'AND P.CHAVE = O.CHAVE '||
                                          'WHERE O.CODEMP = :CODEMP ';
                                          
        IF P_GRUPO = 'M' THEN
            queSql := queSql ||               'AND O.DTREF = :DTREF '; /* MOVIMENTO NÃO PRECISA OLHAR OUTRAS REFERÊNCIAS*/
        ELSE
            queSql := queSql ||               'AND O.DTREF = (SELECT MAX(DTREF) '||
                                                             'FROM '||P_NOMETAB_PAI||' D '||
                                                             'WHERE D.CODEMP = O.CODEMP '||
                                                                 'AND D.TPAMB = O.TPAMB '||
                                                                 'AND D.CHAVE = O.CHAVE '||
                                                                 'AND D.STATUSREG = ''F'' '||
                                                                 'AND D.NRORECIBO IS NOT NULL '||
                                                             ')';
        END IF;

        queSql := queSql ||                   'AND O.TPAMB = :TPAMB '||
                                              'AND O.SEQUENCIA = (SELECT MAX(SEQUENCIA) '||
                                                                 'FROM '||P_NOMETAB_PAI||' S '||
                                                                 'WHERE S.CODEMP = O.CODEMP '||
                                                                     'AND S.DTREF = O.DTREF '||
                                                                     'AND S.TPAMB = O.TPAMB '||
                                                                     'AND S.CHAVE = O.CHAVE '||
                                                                     'AND S.STATUSREG = ''F'' '||
                                                                     'AND S.NRORECIBO IS NOT NULL '||
                                                                 ') '||
                                              'AND P.STATUSREG = ''F'' '|| 
                                          'UNION '||
                                          'SELECT P.CHAVE '||
                                               ', ''A'' AS VALIDACAO '||
                                               ', P.DTREF '||
                                               ', P.SEQUENCIA '||
                                               ', P.CONTROLE '||
                                          'FROM '||P_NOMEVIEW||' N '||
                                              'INNER JOIN '||P_NOMETAB_PAI||' P ON P.CODEMP = N.CODEMP '||
                                                                         'AND P.CHAVE = N.CHAVE '||
                                          'WHERE N.CODEMP = :CODEMP ';

        IF P_GRUPO = 'M' THEN
            queSql := queSql ||               'AND P.DTREF = :DTREF ';

            IF P_VIEWDETALHE = 'N' THEN
                queSql := queSql ||           'AND N.DTREF = P.DTREF '||
                                              'AND N.SEQUENCIA = :SEQUENCIA ';
            END IF;
        ELSE
            queSql := queSql ||               'AND P.DTREF = (SELECT MAX(DTREF) '||
                                                             'FROM '||P_NOMETAB_PAI||' D '||
                                                             'WHERE D.CODEMP = P.CODEMP '||
                                                                 'AND D.TPAMB = P.TPAMB '||
                                                                 'AND D.CHAVE = P.CHAVE '||
                                                                 'AND D.STATUSREG = ''F'' '||
                                                                 'AND D.NRORECIBO IS NOT NULL '||
                                                             ') ';
        END IF;

        queSql := queSql ||                   'AND P.TPAMB = :TPAMB '||
                                              'AND P.SEQUENCIA = (SELECT MAX(SEQUENCIA) '||
                                                                 'FROM '||P_NOMETAB_PAI||' S '||
                                                                 'WHERE S.CODEMP = P.CODEMP '||
                                                                     'AND S.TPAMB = P.TPAMB '||
                                                                     'AND S.CHAVE = P.CHAVE '||
                                                                     'AND S.DTREF = P.DTREF '||
                                                                     'AND S.STATUSREG = ''F'' '||
                                                                     'AND S.NRORECIBO IS NOT NULL '||
                                                                ') '||
                                              'AND NOT EXISTS(SELECT 1 '||
                                                             'FROM '||P_NOMETAB||' O '||
                                                             'WHERE O.CODEMP = P.CODEMP '||
                                                                 'AND O.TPAMB = P.TPAMB '||
                                                                 'AND O.SEQUENCIA = P.SEQUENCIA '||
                                                                 'AND O.CHAVE = P.CHAVE '||
                                                                 P_FILTRO_FILHOS||' '||
                                                             ') '||
                                        ') DTALT '||
                                  'WHERE NOT EXISTS(SELECT 1 '||
                                                   'FROM TRIVAR '||
                                                   'WHERE CHAVE = DTALT.CHAVE '||
                                                       'AND VALIDACAO = DTALT.VALIDACAO '||
                                                   ') ';

        queSql :=   'INSERT INTO TRIVAR (CHAVE, VALIDACAO, DTREF, SEQUENCIA, CONTROLE) '||queSql;

        IF P_GRUPO = 'M' THEN
            IF P_VIEWDETALHE = 'N' THEN
                EXECUTE IMMEDIATE queSql USING P_SEQUENCIAATUAL, P_CODEMP, P_DTREF, P_TPAMB, P_CODEMP, P_DTREF, P_SEQUENCIAATUAL, P_TPAMB;
            ELSE 
                EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF, P_TPAMB, P_CODEMP, P_DTREF, P_TPAMB;
            END IF;
        ELSE
            EXECUTE IMMEDIATE queSql USING P_CODEMP, P_TPAMB, P_CODEMP, P_TPAMB;
        END IF;
    END IF;

    FOR EVEF IN (SELECT MON.NOMETAB, MON.NOMEVIEW, MON.VIEWDETALHE
                         FROM TRIMON MON
                         WHERE MON.NOMETABPAI = P_NOMETAB 
                         GROUP BY MON.NOMETAB, MON.NOMEVIEW, MON.VIEWDETALHE
                         ORDER BY MON.NOMETAB
                  ) LOOP
            SNK_VERIF_ALTER_REINF(P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIAATUAL, NVL(P_NOMETAB_PAI, P_NOMETAB), EVEF.NOMETAB, EVEF.NOMEVIEW, EVEF.VIEWDETALHE);
    END LOOP;

    IF P_NOMETAB_PAI IS NULL THEN
        SELECT COUNT(1) INTO P_COUNT
        FROM TRIVAR;

        IF P_COUNT > 0 THEN
            SELECT COUNT(1) INTO P_COUNT
            FROM TRIVAR VAR
            WHERE VALIDACAO = 'I'
              AND EXISTS(SELECT 1
                        FROM TRIVAR V
                        WHERE V.CHAVE = VAR.CHAVE
                          AND V.VALIDACAO <> VAR.VALIDACAO);

            IF P_COUNT > 0 THEN
                DELETE FROM TRIVAR VAR
                WHERE VALIDACAO = 'I'
                  AND EXISTS(SELECT 1
                            FROM TRIVAR V
                            WHERE V.CHAVE = VAR.CHAVE
                              AND V.VALIDACAO <> VAR.VALIDACAO);
            END IF;

            queSql :=           'UPDATE '||P_NOMETAB||' '||
                                'SET CONTROLE = CASE WHEN EXISTS (SELECT 1 '||
                                                                 'FROM TRIVAR '||
                                                                 'WHERE DTREF = '||P_NOMETAB||'.DTREF '||
                                                                     'AND SEQUENCIA = '||P_NOMETAB||'.SEQUENCIA '||
                                                                     'AND CHAVE = '||P_NOMETAB||'.CHAVE '||
                                                                     'AND VALIDACAO = ''A'' '||
                                                                     'AND CONTROLE = ''I'') THEN ''A'' '|| 
                                                    'ELSE ''I'' '||
                                               'END '||
                                'WHERE CODEMP = :CODEMP '||
                                    'AND TPAMB = :TPAMB '||
                                    'AND EXISTS (SELECT 1 '||
                                                'FROM TRIVAR '||
                                                'WHERE DTREF = '||P_NOMETAB||'.DTREF '||
                                                    'AND SEQUENCIA = '||P_NOMETAB||'.SEQUENCIA '||
                                                    'AND CHAVE = '||P_NOMETAB||'.CHAVE '||
                                                    'AND ( (VALIDACAO = ''A'' AND CONTROLE = ''I'') OR  '||
                                                          '(VALIDACAO = ''I'' AND CONTROLE <> ''I'') '||
                                                         ') '||
                                                ') ';

            EXECUTE IMMEDIATE queSql USING P_CODEMP, P_TPAMB;
        END IF;
    END IF;
EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    IF queSql IS NOT NULL THEN
        SELECT COUNT(1) INTO P_COUNT
        FROM LOGREINF
        WHERE DTOCOR = SYSDATE
         AND CODUSU = STP_GET_CODUSULOGADO();
        IF P_COUNT = 0 THEN
            INSERT INTO LOGREINF(DTOCOR, CODUSU, SQLERR)
                SELECT SYSDATE, STP_GET_CODUSULOGADO(), queSql FROM DUAL; 
        END IF;
    END IF;
    COMMIT;
    RAISE_APPLICATION_ERROR(-20101, SQLERRM);
END;
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54904-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5490300
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_VERIF_ALTER_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210011
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_VERIF_ALTER_REINF' NOMEOBJ, 54903 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, 'd92578b1c0a408a2233e8b25b858b3b7' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_VERIF_ALTER_REINF' and THO.hashcode = 'd92578b1c0a408a2233e8b25b858b3b7')
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54906-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5490500
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_PROCESSA_DADOS_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210011
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_PROCESSA_DADOS_REINF' NOMEOBJ, 54905 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, 'df2b4a335a3249fbc2564dd2cf5f1486' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_PROCESSA_DADOS_REINF' and THO.hashcode = 'df2b4a335a3249fbc2564dd2cf5f1486')
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54907-0-0
Nro. O.S. : 1148508
Nome      : Alterar - VRI_EVT_R2050_NFS
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VRI_EVT_R2050_NFS
NomeObjeto: VRI_EVT_R2050_NFS
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2050_NFS 
AS
SELECT 
 TAB.CODEMP
,TAB.DTREF
,TAB.TPINSC||','||TAB.NRINSC||','||TAB.TPINSCESTAB||','||TAB.NRINSCESTAB AS CHAVE
,TAB.TPINSC
,TAB.NRINSC
,TAB.TPINSCESTAB
,TAB.NRINSCESTAB
,TAB.INDCOM
,TAB.NUNOTA
,TRUNC(SUM(TAB.VLRRECBRUTA), 2) AS VLRRECBRUTA
,TRUNC(SUM(TAB.VLRCPAPUR), 2) AS VLRCPAPUR
,TRUNC(SUM(TAB.VLRRATAPUR), 2) AS VLRRATAPUR
,TRUNC(SUM(TAB.VLRSENARAPUR), 2) AS VLRSENARAPUR    
,MAX(TAB.NUPROCESSO_INSS) AS NUPROCESSO_INSS
,MAX(TAB.SEQPROCESSO_INSS) AS SEQPROCESSO_INSS
,TRUNC(SUM(TAB.VLRCPAPUR * NVL(ISET_INSS.PERCSUSPIMP, 0) / 100), 2) AS VLRCPSUSP
,MAX(TAB.NUPROCESSO_SENAR) AS NUPROCESSO_SENAR
,MAX(TAB.SEQPROCESSO_SENAR) AS SEQPROCESSO_SENAR
,TRUNC(SUM(TAB.VLRSENARAPUR * NVL(ISET_SENAR.PERCSUSPIMP, 0) / 100), 2) AS VLRSENARSUSP
,MAX(TAB.NUPROCESSO_GILRAT) AS NUPROCESSO_GILRAT
,MAX(TAB.SEQPROCESSO_GILRAT) AS SEQPROCESSO_GILRAT 
,TRUNC(SUM(TAB.VLRRATAPUR * NVL(ISET_GILRAT.PERCSUSPIMP, 0) / 100), 2) AS VLRRATSUSP
FROM (    
    SELECT 
     CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMP.CODEMP
          WHEN NVL(EMP.CODEMPMATRIZEFD, 0) > 0 THEN EMP.CODEMPMATRIZEFD
          ELSE EMP.CODEMP 
     END AS CODEMP
    ,TRUNC(CAB.DTNEG, 'MM') AS DTREF
    ,CASE WHEN LENGTH(EMPC.CGC) = 14 
          THEN '1' 
          ELSE '2' 
     END AS TPINSC
    ,CASE WHEN LENGTH(EMPC.CGC) = 14 
          THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
                    THEN EMPC.CGC
                    ELSE SUBSTR(EMPC.CGC,1,8)
               END
          ELSE EMPC.CGC
     END AS NRINSC
    ,1 AS TPINSCESTAB
    ,EMPC.CGC AS NRINSCESTAB
    ,PAR.INDCOMERCIALIZACAO AS INDCOM
    ,CAB.NUNOTA
    ,ITE.VLRTOT AS VLRRECBRUTA --> segundo Manoel, deve ser assim: VLRTOT + VLRIPI - VLRDESC - VLRREPRED  (conferir)
    ,NVL(DIN.VALOR, NVL(IMN.VALOR, 0)) AS VLRCPAPUR
    ,0 AS VLRRATAPUR /*Posteriormente iremos atrás dessas regras*/
    ,0 AS VLRSENARAPUR /*Posteriormente iremos atrás dessas regras*/
    ,SNK_GET_IDPROCESSO_IMP_EFD(1, 
                                EMP.CODEMP, 
                                PAR.CODPARC, 
                                ITE.CODPROD, 
                                PRO.CODLST, 
                                CAB.DTNEG) AS NUPROCESSO_INSS
    ,SNK_GET_IDPROCESSO_IMP_EFD(1, 
                                EMP.CODEMP, 
                                PAR.CODPARC, 
                                ITE.CODPROD, 
                                PRO.CODLST, 
                                CAB.DTNEG,
                                'S') AS SEQPROCESSO_INSS
    ,NULL /*SNK_GET_IDPROCESSO_IMP_EFD(3, 
                                EMP.CODEMP, 
                                PAR.CODPARC, 
                                ITE.CODPROD, 
                                PRO.CODLST, 
                                CAB.DTNEG)*/ AS NUPROCESSO_SENAR
    ,NULL /*SNK_GET_IDPROCESSO_IMP_EFD(3, 
                                EMP.CODEMP, 
                                PAR.CODPARC, 
                                ITE.CODPROD, 
                                PRO.CODLST, 
                                CAB.DTNEG,
                                'S')*/ AS SEQPROCESSO_SENAR
    ,NULL /*SNK_GET_IDPROCESSO_IMP_EFD(4, 
                                EMP.CODEMP, 
                                PAR.CODPARC, 
                                ITE.CODPROD, 
                                PRO.CODLST, 
                                CAB.DTNEG)*/ AS NUPROCESSO_GILRAT
    ,NULL /*SNK_GET_IDPROCESSO_IMP_EFD(4, 
                                EMP.CODEMP, 
                                PAR.CODPARC, 
                                ITE.CODPROD, 
                                PRO.CODLST, 
                                CAB.DTNEG,
                                'S')*/ AS SEQPROCESSO_GILRAT
    FROM TGFITE ITE
        INNER JOIN TGFCAB CAB  ON CAB.NUNOTA = ITE.NUNOTA
        INNER JOIN (SELECT CODTIPOPER, DHALTER, DESCROPER, TIPMOV, CODMODDOC FROM TGFTOP) TPO  ON TPO.CODTIPOPER = CAB.CODTIPOPER AND TPO.DHALTER = CAB.DHTIPOPER
        INNER JOIN (SELECT CODEMP, CODEMPMATRIZEFD, EMPADMPUBDIR, ATIVO FROM TGFEMP) EMP  ON EMP.CODEMP = CAB.CODEMP
        INNER JOIN (SELECT CODEMP, RAZAOSOCIAL, NOMEFANTASIA, CGC FROM TSIEMP) EMPC ON EMPC.CODEMP = EMP.CODEMP
        INNER JOIN (SELECT CODPARC, NOMEPARC, INDCOMERCIALIZACAO FROM TGFPAR) PAR  ON PAR.CODPARC = CAB.CODPARC
        INNER JOIN (SELECT CODPROD, DESCRPROD, CODLST, COMERCIALIZACAOAGRI FROM TGFPRO) PRO  ON PRO.CODPROD = ITE.CODPROD
        LEFT JOIN  TGFDIN DIN  ON DIN.NUNOTA = ITE.NUNOTA AND DIN.SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 5
        LEFT JOIN  TGFIMN IMN  ON IMN.NUNOTA = ITE.NUNOTA AND IMN.SEQUENCIA = ITE.SEQUENCIA AND IMN.TIPOIMPOSTO = 5
    WHERE EMP.ATIVO = 'S'
        AND NVL(PAR.INDCOMERCIALIZACAO, '0') IN ('1', '8', '9')
        AND NVL(PRO.COMERCIALIZACAOAGRI, 'N') = 'S'
        AND TPO.TIPMOV = 'V'
        AND CAB.STATUSNOTA = 'L' 
        AND TPO.CODMODDOC = 55
        AND CAB.STATUSNFE = 'A'
		AND LENGTH(EMPC.CGC) = 14
        AND (EXISTS (SELECT 1 FROM TGFDIN WHERE NUNOTA = ITE.NUNOTA AND SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 5) OR 
             EXISTS (SELECT 1 FROM TGFIMN WHERE NUNOTA = ITE.NUNOTA AND SEQUENCIA = ITE.SEQUENCIA AND IMN.TIPOIMPOSTO = 5))
) TAB
    LEFT JOIN TRIPISET ISET_INSS ON ISET_INSS.NUPROCESSO = NUPROCESSO_INSS AND ISET_INSS.SEQUENCIA = SEQPROCESSO_INSS
    LEFT JOIN TRIPISET ISET_SENAR ON ISET_SENAR.NUPROCESSO = NUPROCESSO_SENAR AND ISET_SENAR.SEQUENCIA = SEQPROCESSO_SENAR
    LEFT JOIN TRIPISET ISET_GILRAT ON ISET_GILRAT.NUPROCESSO = NUPROCESSO_GILRAT AND ISET_GILRAT.SEQUENCIA = SEQPROCESSO_GILRAT
GROUP BY  
 TAB.CODEMP
,TAB.DTREF
,TAB.TPINSC
,TAB.NRINSC
,TAB.TPINSCESTAB
,TAB.NRINSCESTAB
,TAB.INDCOM
,TAB.NUNOTA
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54908-0-0
Nro. O.S. : 1148508
Nome      : Alterar - VRI_EVT_R1070_INFOSUSP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VRI_EVT_R1070_INFOSUSP
NomeObjeto: VRI_EVT_R1070_INFOSUSP
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R1070_INFOSUSP
AS  
SELECT
 V.CODEMP                            AS CODEMP
,V.DTREF                             AS DTREF
,ISET.NUPROCESSO                     AS CHAVE
,ISET.NUPROCESSO                     AS NUPROCESSO
,ISET.SEQUENCIA                      AS SEQPRISET
,ISET.CODSUSP                        AS CODSUSP
,ISET.INDSUSPREINF                   AS INDSUSP  
,ISET.DTDECISAO                      AS DTDECISAO
,ISET.INDDEPOSITO                    AS INDDEPOSITO
FROM TRIPISET ISET
    INNER JOIN VRI_EVT_R1070 V ON V.NUPROCESSO = ISET.NUPROCESSO
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54909-0-0
Nro. O.S. : 1148508
Nome      : Alterar - VRI_EVT_R2010
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VRI_EVT_R2010
NomeObjeto: VRI_EVT_R2010
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2010
AS
SELECT 
 INFST.CODEMP
,INFST.DTREF
,INFST.TPAMB
,INFST.SEQUENCIA
,INFST.CHAVE
,INFST.TPINSC
,INFST.NRINSC
,INFST.TPINSCESTAB
,INFST.NRINSCESTAB
,INFST.INDOBRA
,INFST.CNPJPRESTADOR
,SUM(INFST.VLRTOTALBRUTO) AS VLRTOTALBRUTO
,SUM(INFST.VLRBASERET) AS VLRTOTALBASERET
,SUM(INFST.VLRRETENCAO) AS VLRTOTALRETPRINC 
,SUM(INFST.VLRADICIONAL) AS VLRTOTALRETADIC
,SUM(INFST.VLRNRETPRINC) AS VLRTOTALNRETPRINC
,SUM(INFST.VLRNRETADIC) AS VLRTOTALNRETADIC
,INFST.INDCPRB
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.CNPJPRESTADORRET ELSE NULL END AS CNPJPRESTADORRET 
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALBASERETRET ELSE NULL END AS VLRTOTALBASERETRET
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALRETPRINCRET ELSE NULL END AS VLRTOTALRETPRINCRET
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALRETADICRET ELSE NULL END AS VLRTOTALRETADICRET
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALNRETPRINCRET ELSE NULL END AS VLRTOTALNRETPRINCRET
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALNRETADICRET ELSE NULL END AS VLRTOTALNRETADICRET
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRCRTOM ELSE NULL END AS VLRCRTOM
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRCRTOMSUSP ELSE NULL END AS VLRCRTOMSUSP
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRCRTOMRET ELSE NULL END AS VLRCRTOMRET
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRCRTOMSUSPRET ELSE NULL END AS VLRCRTOMSUSPRET
FROM TRIINFST INFST
    LEFT JOIN TRIRCST RCST ON RCST.CODEMP = INFST.CODEMP
                          AND RCST.DTREF = INFST.DTREF
                          AND RCST.TPAMB = INFST.TPAMB
                          AND RCST.SEQUENCIA = (INFST.SEQUENCIA - 1)
                          AND RCST.CHAVE = INFST.CHAVE
GROUP BY 
 INFST.CODEMP
,INFST.DTREF
,INFST.TPAMB
,INFST.SEQUENCIA
,INFST.CHAVE
,INFST.TPINSC
,INFST.NRINSC
,INFST.TPINSCESTAB
,INFST.NRINSCESTAB
,INFST.INDOBRA
,INFST.CNPJPRESTADOR
,INFST.INDCPRB
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.CNPJPRESTADORRET ELSE NULL END 
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALBASERETRET ELSE NULL END
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALRETPRINCRET ELSE NULL END
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALRETADICRET ELSE NULL END
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALNRETPRINCRET ELSE NULL END
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALNRETADICRET ELSE NULL END
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRCRTOM ELSE NULL END
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRCRTOMSUSP ELSE NULL END
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRCRTOMRET ELSE NULL END
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRCRTOMSUSPRET ELSE NULL END
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54910-0-0
Nro. O.S. : 1148508
Nome      : Dropar - TRG_UPD_DLT_TGFCAB_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - TRG_UPD_DLT_TGFCAB_REINF
NomeObjeto: TRG_UPD_DLT_TGFCAB_REINF
TipoObjeto: TRIGGER
NomeTabela: TGFCAB
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DROP TRIGGER TRG_UPD_DLT_TGFCAB_REINF
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54911-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5491000
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_UPD_DLT_TGFCAB_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210011
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_UPD_DLT_TGFCAB_REINF' NOMEOBJ, 54910 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '5224b43782c4179ca451257b0aa26107' HASHCODE, 'Drop Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_UPD_DLT_TGFCAB_REINF' and THO.hashcode = '5224b43782c4179ca451257b0aa26107')
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54912-0-0
Nro. O.S. : 1148508
Nome      : Dropar - TRG_UPD_DLT_TGFITE_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - TRG_UPD_DLT_TGFITE_REINF
NomeObjeto: TRG_UPD_DLT_TGFITE_REINF
TipoObjeto: TRIGGER
NomeTabela: TGFITE
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DROP TRIGGER TRG_UPD_DLT_TGFITE_REINF
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54913-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5491200
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_UPD_DLT_TGFITE_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210011
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_UPD_DLT_TGFITE_REINF' NOMEOBJ, 54912 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '5224b43782c4179ca451257b0aa26107' HASHCODE, 'Drop Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_UPD_DLT_TGFITE_REINF' and THO.hashcode = '5224b43782c4179ca451257b0aa26107')
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54914-0-0
Nro. O.S. : 1148508
Nome      : Dropar - TRG_UPD_DLT_TGFDIN_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - TRG_UPD_DLT_TGFDIN_REINF
NomeObjeto: TRG_UPD_DLT_TGFDIN_REINF
TipoObjeto: TRIGGER
NomeTabela: TGFDIN
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DROP TRIGGER TRG_UPD_DLT_TGFDIN_REINF
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54915-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5491400
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_UPD_DLT_TGFDIN_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210011
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_UPD_DLT_TGFDIN_REINF' NOMEOBJ, 54914 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '5224b43782c4179ca451257b0aa26107' HASHCODE, 'Drop Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_UPD_DLT_TGFDIN_REINF' and THO.hashcode = '5224b43782c4179ca451257b0aa26107')
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54916-0-0
Nro. O.S. : 1148508
Nome      : Dropar - TRG_UPD_DLT_TGFIMN_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - TRG_UPD_DLT_TGFIMN_REINF
NomeObjeto: TRG_UPD_DLT_TGFIMN_REINF
TipoObjeto: TRIGGER
NomeTabela: TGFIMN
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DROP TRIGGER TRG_UPD_DLT_TGFIMN_REINF
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54917-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5491600
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_UPD_DLT_TGFIMN_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210011
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_UPD_DLT_TGFIMN_REINF' NOMEOBJ, 54916 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '5224b43782c4179ca451257b0aa26107' HASHCODE, 'Drop Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_UPD_DLT_TGFIMN_REINF' and THO.hashcode = '5224b43782c4179ca451257b0aa26107')
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54918-0-0
Nro. O.S. : 1148508
Nome      : Dropar - TRG_UPD_DLT_TGFFIN_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - TRG_UPD_DLT_TGFFIN_REINF
NomeObjeto: TRG_UPD_DLT_TGFFIN_REINF
TipoObjeto: TRIGGER
NomeTabela: TGFFIN
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DROP TRIGGER TRG_UPD_DLT_TGFFIN_REINF
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54919-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5491800
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_UPD_DLT_TGFFIN_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210011
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_UPD_DLT_TGFFIN_REINF' NOMEOBJ, 54918 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '5224b43782c4179ca451257b0aa26107' HASHCODE, 'Drop Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_UPD_DLT_TGFFIN_REINF' and THO.hashcode = '5224b43782c4179ca451257b0aa26107')
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54920-0-0
Nro. O.S. : 1148508
Nome      : Dropar - TRG_UPD_DLT_TGFIMF_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - TRG_UPD_DLT_TGFIMF_REINF
NomeObjeto: TRG_UPD_DLT_TGFIMF_REINF
TipoObjeto: TRIGGER
NomeTabela: TGFIMF
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DROP TRIGGER TRG_UPD_DLT_TGFIMF_REINF
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54921-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5492000
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_UPD_DLT_TGFIMF_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210011
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_UPD_DLT_TGFIMF_REINF' NOMEOBJ, 54920 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '5224b43782c4179ca451257b0aa26107' HASHCODE, 'Drop Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_UPD_DLT_TGFIMF_REINF' and THO.hashcode = '5224b43782c4179ca451257b0aa26107')
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54922-0-0
Nro. O.S. : 1148508
Nome      : Dropar - TRG_UPD_TGFCAB_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - TRG_UPD_TGFCAB_REINF
NomeObjeto: TRG_UPD_TGFCAB_REINF
TipoObjeto: TRIGGER
NomeTabela: TGFCAB
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DROP TRIGGER TRG_UPD_TGFCAB_REINF
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54923-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5492200
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_UPD_TGFCAB_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210011
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_UPD_TGFCAB_REINF' NOMEOBJ, 54922 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '5224b43782c4179ca451257b0aa26107' HASHCODE, 'Drop Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_UPD_TGFCAB_REINF' and THO.hashcode = '5224b43782c4179ca451257b0aa26107')
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54924-0-0
Nro. O.S. : 1148508
Nome      : Dropar - TRG_UPD_TGFCAB_REINF2
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - TRG_UPD_TGFCAB_REINF2
NomeObjeto: TRG_UPD_TGFCAB_REINF2
TipoObjeto: TRIGGER
NomeTabela: TGFCAB
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DROP TRIGGER TRG_UPD_TGFCAB_REINF2
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54925-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5492400
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_UPD_TGFCAB_REINF2
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210011
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_UPD_TGFCAB_REINF2' NOMEOBJ, 54924 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '5224b43782c4179ca451257b0aa26107' HASHCODE, 'Drop Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_UPD_TGFCAB_REINF2' and THO.hashcode = '5224b43782c4179ca451257b0aa26107')
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54926-0-0
Nro. O.S. : 1148508
Nome      : Alterar - TRG_UPD_TRICAB
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - TRG_UPD_TRICAB
NomeObjeto: TRG_UPD_TRICAB
TipoObjeto: TRIGGER
NomeTabela: TRICAB
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_UPD_TRICAB
BEFORE UPDATE ON TRICAB
FOR EACH ROW
BEGIN
    IF NVL(:OLD.EVTPENDENTE, 0) <> NVL(:NEW.EVTPENDENTE, 0) OR
       NVL(:OLD.EVTENVIADO, 0) <> NVL(:NEW.EVTENVIADO, 0) OR
       NVL(:OLD.EVTAGUARCORRECAO, 0) <> NVL(:NEW.EVTAGUARCORRECAO, 0) OR
       NVL(:OLD.EVTERROEVTPRIOR, 0) <> NVL(:NEW.EVTERROEVTPRIOR, 0) OR
       NVL(:OLD.EVTFINALIZADO, 0) <> NVL(:NEW.EVTFINALIZADO, 0) THEN
        :NEW.EVTTOTAIS := NVL(:NEW.EVTPENDENTE, 0) + NVL(:NEW.EVTENVIADO, 0) + NVL(:NEW.EVTAGUARCORRECAO, 0) + NVL(:NEW.EVTERROEVTPRIOR, 0) + NVL(:NEW.EVTFINALIZADO, 0);

        /*ESSES STATUS REFEREM-SE AO PROCESSO DE FECHAMENTO OU DE REABERTURA, LOGO ELE FOI RESOLVIDO NAS TABELAS DE ORIGEM*/
        /*6 - Em processo de fechamento*/
        /*7 - Referência fechada com sucesso*/
        /*8 - Em processo de reabertura*/
        /*9 - Referência reaberta com sucesso*/
        IF :NEW.STATUS NOT IN (6, 7, 8, 9) THEN
        :NEW.STATUS :=  CASE WHEN NVL(:NEW.EVTPENDENTE, 0) > 0 THEN 1                          /*1 - Eventos pendentes para o envio*/
                             WHEN NVL(:NEW.EVTENVIADO, 0) > 0 THEN 2                           /*2 - Eventos enviados com sucesso - Pendentes de finalização*/
                             WHEN NVL(:NEW.EVTAGUARCORRECAO, 0) > 0 OR 
                                  NVL(:NEW.EVTERROEVTPRIOR, 0) > 0 THEN 3                      /*3 - Eventos aguardando correção*/
                             WHEN NVL(:NEW.EVTTOTAIS, 0) = NVL(:NEW.EVTFINALIZADO, 0) THEN 4   /*4 - Eventos finalizados com sucesso - Pendentes de fechamento*/
                             ELSE 0 END;                                                       /*0 - Referência não iniciada*/
        END IF;
    ELSIF :OLD.CONTROLE <> :NEW.CONTROLE AND :NEW.CONTROLE = 'A' THEN
		:NEW.STATUS := CASE WHEN :NEW.STATUS = '7' THEN '5' 									/*5 - Referência finalizada com alterações após o fechamento*/
							ELSE '10' 															/*10 - Alterações pendentes de geração*/
					   END;
	END IF;
END;
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54927-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5492600
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_UPD_TRICAB
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210011
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_UPD_TRICAB' NOMEOBJ, 54926 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '496ad2d4afbda5ba085b6366f570b817' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_UPD_TRICAB' and THO.hashcode = '496ad2d4afbda5ba085b6366f570b817')
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54928-0-0
Nro. O.S. : 1148508
Nome      : Criar - TRICOL 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - TRICOL 
NomeObjeto: TRICOL 
TipoObjeto: TABLE
NomeTabela: TRICOL 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE TABLE TRICOL (
    NOMETAB VARCHAR2(255) NOT NULL,
    NOMECOL VARCHAR2(255) NOT NULL,
    TIPO    CHAR(1)  DEFAULT 'V' NOT NULL, /*V: VISUALIZAÇÃO P: CAMPOS PADRÕES*/ 
    CONSTRAINT  PK_TRICOL  PRIMARY KEY (NOMETAB, NOMECOL),
    CONSTRAINT CKC_TIPO_TRICOL CHECK (TIPO IN ('V', 'P'))
)
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54929-0-0
Nro. O.S. : 1148508
Nome      : Script - TRICOL
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - TRICOL
NomeObjeto: TRICOL
TipoObjeto: TABLE
NomeTabela: TRICOL
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
BEGIN 
EXECUTE IMMEDIATE 'INSERT INTO TRICOL(NOMETAB, NOMECOL, TIPO) 
--EVENTO R-1000: TRIICR
	SELECT ''TRIICR'', ''CODEMP'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIICR'' AND NOMECOL = ''CODEMP'') UNION
	SELECT ''TRIICR'', ''DTREF'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIICR'' AND NOMECOL = ''DTREF'') UNION
	SELECT ''TRIICR'', ''TPAMB'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIICR'' AND NOMECOL = ''TPAMB'') UNION
	SELECT ''TRIICR'', ''SEQUENCIA'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIICR'' AND NOMECOL = ''SEQUENCIA'') UNION
	SELECT ''TRIICR'', ''STATUSREG'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIICR'' AND NOMECOL = ''STATUSREG'') UNION
	SELECT ''TRIICR'', ''TIPO'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIICR'' AND NOMECOL = ''TIPO'') UNION
	SELECT ''TRIICR'', ''NRORECIBO'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIICR'' AND NOMECOL = ''NRORECIBO'') UNION
	SELECT ''TRIICR'', ''NRORECIBOANT'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIICR'' AND NOMECOL = ''NRORECIBOANT'') UNION
	SELECT ''TRIICR'', ''IDEVENTO'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIICR'' AND NOMECOL = ''IDEVENTO'') UNION
	SELECT ''TRIICR'', ''CONTROLE'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIICR'' AND NOMECOL = ''CONTROLE'') UNION
	SELECT ''TRIICR'', ''MSG'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIICR'' AND NOMECOL = ''MSG'') UNION
	SELECT ''TRIICR'', ''XMLEVENTO'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIICR'' AND NOMECOL = ''XMLEVENTO'') UNION
	SELECT ''TRIICR'', ''XMLRETORNO'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIICR'' AND NOMECOL = ''XMLRETORNO'') UNION
	SELECT ''TRIICR'', ''INIVALIDNOVO'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIICR'' AND NOMECOL = ''INIVALIDNOVO'') UNION
	SELECT ''TRIICR'', ''FIMVALIDNOVO'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIICR'' AND NOMECOL = ''FIMVALIDNOVO'') UNION
--EVENTO R-1070: TRIPAJR
	SELECT ''TRIPAJR'', ''CODEMP'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPAJR'' AND NOMECOL = ''CODEMP'') UNION
	SELECT ''TRIPAJR'', ''DTREF'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPAJR'' AND NOMECOL = ''DTREF'') UNION
	SELECT ''TRIPAJR'', ''TPAMB'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPAJR'' AND NOMECOL = ''TPAMB'') UNION
	SELECT ''TRIPAJR'', ''SEQUENCIA'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPAJR'' AND NOMECOL = ''SEQUENCIA'') UNION
	SELECT ''TRIPAJR'', ''STATUSREG'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPAJR'' AND NOMECOL = ''STATUSREG'') UNION
	SELECT ''TRIPAJR'', ''TIPO'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPAJR'' AND NOMECOL = ''TIPO'') UNION
	SELECT ''TRIPAJR'', ''NRORECIBO'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPAJR'' AND NOMECOL = ''NRORECIBO'') UNION
	SELECT ''TRIPAJR'', ''NRORECIBOANT'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPAJR'' AND NOMECOL = ''NRORECIBOANT'') UNION
	SELECT ''TRIPAJR'', ''IDEVENTO'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPAJR'' AND NOMECOL = ''IDEVENTO'') UNION
	SELECT ''TRIPAJR'', ''CONTROLE'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPAJR'' AND NOMECOL = ''CONTROLE'') UNION
	SELECT ''TRIPAJR'', ''MSG'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPAJR'' AND NOMECOL = ''MSG'') UNION
	SELECT ''TRIPAJR'', ''XMLEVENTO'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPAJR'' AND NOMECOL = ''XMLEVENTO'') UNION
	SELECT ''TRIPAJR'', ''XMLRETORNO'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPAJR'' AND NOMECOL = ''XMLRETORNO'') UNION
	SELECT ''TRIPAJR'', ''INIVALIDNOVO'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPAJR'' AND NOMECOL = ''INIVALIDNOVO'') UNION
	SELECT ''TRIPAJR'', ''FIMVALIDNOVO'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPAJR'' AND NOMECOL = ''FIMVALIDNOVO'') UNION
--EVENTO R-1070: TRIPRISET
	SELECT ''TRIPRISET'', ''CODEMP'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPRISET'' AND NOMECOL = ''CODEMP'') UNION
	SELECT ''TRIPRISET'', ''DTREF'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPRISET'' AND NOMECOL = ''DTREF'') UNION
	SELECT ''TRIPRISET'', ''TPAMB'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPRISET'' AND NOMECOL = ''TPAMB'') UNION
	SELECT ''TRIPRISET'', ''SEQUENCIA'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPRISET'' AND NOMECOL = ''SEQUENCIA'') UNION
	SELECT ''TRIPRISET'', ''CHAVE'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPRISET'' AND NOMECOL = ''CHAVE'') UNION
--EVENTO R-2020: TRIRCSP
	SELECT ''TRIRCSP'', ''CODEMP'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCSP'' AND NOMECOL = ''CODEMP'') UNION
	SELECT ''TRIRCSP'', ''DTREF'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCSP'' AND NOMECOL = ''DTREF'') UNION
	SELECT ''TRIRCSP'', ''TPAMB'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCSP'' AND NOMECOL = ''TPAMB'') UNION
	SELECT ''TRIRCSP'', ''SEQUENCIA'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCSP'' AND NOMECOL = ''SEQUENCIA'') UNION
	SELECT ''TRIRCSP'', ''STATUSREG'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCSP'' AND NOMECOL = ''STATUSREG'') UNION
	SELECT ''TRIRCSP'', ''TIPO'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCSP'' AND NOMECOL = ''TIPO'') UNION
	SELECT ''TRIRCSP'', ''NRORECIBO'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCSP'' AND NOMECOL = ''NRORECIBO'') UNION
	SELECT ''TRIRCSP'', ''NRORECIBOANT'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCSP'' AND NOMECOL = ''NRORECIBOANT'') UNION
	SELECT ''TRIRCSP'', ''IDEVENTO'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCSP'' AND NOMECOL = ''IDEVENTO'') UNION
	SELECT ''TRIRCSP'', ''CONTROLE'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCSP'' AND NOMECOL = ''CONTROLE'') UNION
	SELECT ''TRIRCSP'', ''MSG'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCSP'' AND NOMECOL = ''MSG'') UNION
	SELECT ''TRIRCSP'', ''XMLEVENTO'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCSP'' AND NOMECOL = ''XMLEVENTO'') UNION
	SELECT ''TRIRCSP'', ''XMLRETORNO'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCSP'' AND NOMECOL = ''XMLRETORNO'') UNION
	SELECT ''TRIRCSP'', ''TPINSCTOMADORRET'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCSP'' AND NOMECOL = ''TPINSCTOMADORRET'') UNION
	SELECT ''TRIRCSP'', ''NRINSCTOMADORRET'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCSP'' AND NOMECOL = ''NRINSCTOMADORRET'') UNION
	SELECT ''TRIRCSP'', ''VLRTOTALBASERETRET'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCSP'' AND NOMECOL = ''VLRTOTALBASERETRET'') UNION
	SELECT ''TRIRCSP'', ''VLRTOTALRETPRINCRET'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCSP'' AND NOMECOL = ''VLRTOTALRETPRINCRET'') UNION
	SELECT ''TRIRCSP'', ''VLRTOTALRETADICRET'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCSP'' AND NOMECOL = ''VLRTOTALRETADICRET'') UNION
	SELECT ''TRIRCSP'', ''VLRTOTALNRETPRINCRET'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCSP'' AND NOMECOL = ''VLRTOTALNRETPRINCRET'') UNION
	SELECT ''TRIRCSP'', ''VLRTOTALNRETADICRET'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCSP'' AND NOMECOL = ''VLRTOTALNRETADICRET'') UNION
--EVENTO R-2020: TRINFSP
	SELECT ''TRINFSP'', ''CODEMP'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRINFSP'' AND NOMECOL = ''CODEMP'') UNION
	SELECT ''TRINFSP'', ''DTREF'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRINFSP'' AND NOMECOL = ''DTREF'') UNION
	SELECT ''TRINFSP'', ''TPAMB'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRINFSP'' AND NOMECOL = ''TPAMB'') UNION
	SELECT ''TRINFSP'', ''SEQUENCIA'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRINFSP'' AND NOMECOL = ''SEQUENCIA'') UNION
	SELECT ''TRINFSP'', ''CHAVE'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRINFSP'' AND NOMECOL = ''CHAVE'') UNION
--EVENTO R-2020: TRIPPSP
	SELECT ''TRIPPSP'', ''CODEMP'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPPSP'' AND NOMECOL = ''CODEMP'') UNION
	SELECT ''TRIPPSP'', ''DTREF'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPPSP'' AND NOMECOL = ''DTREF'') UNION
	SELECT ''TRIPPSP'', ''TPAMB'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPPSP'' AND NOMECOL = ''TPAMB'') UNION
	SELECT ''TRIPPSP'', ''SEQUENCIA'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPPSP'' AND NOMECOL = ''SEQUENCIA'') UNION
	SELECT ''TRIPPSP'', ''CHAVE'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPPSP'' AND NOMECOL = ''CHAVE'') UNION
--EVENTO R-2020: TRIPASP
	SELECT ''TRIPASP'', ''CODEMP'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPASP'' AND NOMECOL = ''CODEMP'') UNION
	SELECT ''TRIPASP'', ''DTREF'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPASP'' AND NOMECOL = ''DTREF'') UNION
	SELECT ''TRIPASP'', ''TPAMB'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPASP'' AND NOMECOL = ''TPAMB'') UNION
	SELECT ''TRIPASP'', ''SEQUENCIA'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPASP'' AND NOMECOL = ''SEQUENCIA'') UNION
	SELECT ''TRIPASP'', ''CHAVE'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPASP'' AND NOMECOL = ''CHAVE'') UNION
--EVENTO R-2020: TRIINFSP
	SELECT ''TRIINFSP'', ''CODEMP'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIINFSP'' AND NOMECOL = ''CODEMP'') UNION
	SELECT ''TRIINFSP'', ''DTREF'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIINFSP'' AND NOMECOL = ''DTREF'') UNION
	SELECT ''TRIINFSP'', ''TPAMB'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIINFSP'' AND NOMECOL = ''TPAMB'') UNION
	SELECT ''TRIINFSP'', ''SEQUENCIA'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIINFSP'' AND NOMECOL = ''SEQUENCIA'') UNION
	SELECT ''TRIINFSP'', ''CHAVE'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIINFSP'' AND NOMECOL = ''CHAVE'') UNION
--EVENTO R-2050: TRICPPR
	SELECT ''TRICPPR'', ''CODEMP'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRICPPR'' AND NOMECOL = ''CODEMP'') UNION
	SELECT ''TRICPPR'', ''DTREF'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRICPPR'' AND NOMECOL = ''DTREF'') UNION
	SELECT ''TRICPPR'', ''TPAMB'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRICPPR'' AND NOMECOL = ''TPAMB'') UNION
	SELECT ''TRICPPR'', ''SEQUENCIA'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRICPPR'' AND NOMECOL = ''SEQUENCIA'') UNION
	SELECT ''TRICPPR'', ''STATUSREG'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRICPPR'' AND NOMECOL = ''STATUSREG'') UNION
	SELECT ''TRICPPR'', ''TIPO'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRICPPR'' AND NOMECOL = ''TIPO'') UNION
	SELECT ''TRICPPR'', ''NRORECIBO'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRICPPR'' AND NOMECOL = ''NRORECIBO'') UNION
	SELECT ''TRICPPR'', ''NRORECIBOANT'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRICPPR'' AND NOMECOL = ''NRORECIBOANT'') UNION
	SELECT ''TRICPPR'', ''IDEVENTO'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRICPPR'' AND NOMECOL = ''IDEVENTO'') UNION
	SELECT ''TRICPPR'', ''CONTROLE'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRICPPR'' AND NOMECOL = ''CONTROLE'') UNION
	SELECT ''TRICPPR'', ''MSG'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRICPPR'' AND NOMECOL = ''MSG'') UNION
	SELECT ''TRICPPR'', ''XMLEVENTO'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRICPPR'' AND NOMECOL = ''XMLEVENTO'') UNION
	SELECT ''TRICPPR'', ''XMLRETORNO'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRICPPR'' AND NOMECOL = ''XMLRETORNO'') UNION
	SELECT ''TRICPPR'', ''VLRCPAPURRET'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRICPPR'' AND NOMECOL = ''VLRCPAPURRET'') UNION	
	SELECT ''TRICPPR'', ''VLRCPSUSPTOTALRET'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRICPPR'' AND NOMECOL = ''VLRCPSUSPTOTALRET'') UNION
	SELECT ''TRICPPR'', ''VLRRATAPURRET'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRICPPR'' AND NOMECOL = ''VLRRATAPURRET'') UNION
	SELECT ''TRICPPR'', ''VLRRATSUSPTOTALRET'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRICPPR'' AND NOMECOL = ''VLRRATSUSPTOTALRET'') UNION
	SELECT ''TRICPPR'', ''VLRSENARAPURRET'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRICPPR'' AND NOMECOL = ''VLRSENARAPURRET'') UNION
	SELECT ''TRICPPR'', ''VLRSENARSUSPTOTALRET'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRICPPR'' AND NOMECOL = ''VLRSENARSUSPTOTALRET'') UNION
--EVENTO R-2050: TRITPCO
	SELECT ''TRITPCO'', ''CODEMP'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRITPCO'' AND NOMECOL = ''CODEMP'') UNION
	SELECT ''TRITPCO'', ''DTREF'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRITPCO'' AND NOMECOL = ''DTREF'') UNION
	SELECT ''TRITPCO'', ''TPAMB'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRITPCO'' AND NOMECOL = ''TPAMB'') UNION
	SELECT ''TRITPCO'', ''SEQUENCIA'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRITPCO'' AND NOMECOL = ''SEQUENCIA'') UNION
	SELECT ''TRITPCO'', ''CHAVE'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRITPCO'' AND NOMECOL = ''CHAVE'') UNION
--EVENTO R-2050: TRIIPFC
	SELECT ''TRIIPFC'', ''CODEMP'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIIPFC'' AND NOMECOL = ''CODEMP'') UNION
	SELECT ''TRIIPFC'', ''DTREF'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIIPFC'' AND NOMECOL = ''DTREF'') UNION
	SELECT ''TRIIPFC'', ''TPAMB'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIIPFC'' AND NOMECOL = ''TPAMB'') UNION
	SELECT ''TRIIPFC'', ''SEQUENCIA'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIIPFC'' AND NOMECOL = ''SEQUENCIA'') UNION
	SELECT ''TRIIPFC'', ''CHAVE'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIIPFC'' AND NOMECOL = ''CHAVE'') UNION
--EVENTO R-2050: TRINFPR
	SELECT ''TRINFPR'', ''CODEMP'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRINFPR'' AND NOMECOL = ''CODEMP'') UNION
	SELECT ''TRINFPR'', ''DTREF'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRINFPR'' AND NOMECOL = ''DTREF'') UNION
	SELECT ''TRINFPR'', ''TPAMB'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRINFPR'' AND NOMECOL = ''TPAMB'') UNION
	SELECT ''TRINFPR'', ''SEQUENCIA'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRINFPR'' AND NOMECOL = ''SEQUENCIA'') UNION
	SELECT ''TRINFPR'', ''CHAVE'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRINFPR'' AND NOMECOL = ''CHAVE'') UNION
--EVENTO R-2060: TRICPRB
	SELECT ''TRICPRB'', ''CODEMP'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRICPRB'' AND NOMECOL = ''CODEMP'') UNION
	SELECT ''TRICPRB'', ''DTREF'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRICPRB'' AND NOMECOL = ''DTREF'') UNION
	SELECT ''TRICPRB'', ''TPAMB'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRICPRB'' AND NOMECOL = ''TPAMB'') UNION
	SELECT ''TRICPRB'', ''SEQUENCIA'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRICPRB'' AND NOMECOL = ''SEQUENCIA'') UNION
	SELECT ''TRICPRB'', ''STATUSREG'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRICPRB'' AND NOMECOL = ''STATUSREG'') UNION
	SELECT ''TRICPRB'', ''TIPO'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRICPRB'' AND NOMECOL = ''TIPO'') UNION
	SELECT ''TRICPRB'', ''NRORECIBO'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRICPRB'' AND NOMECOL = ''NRORECIBO'') UNION
	SELECT ''TRICPRB'', ''NRORECIBOANT'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRICPRB'' AND NOMECOL = ''NRORECIBOANT'') UNION
	SELECT ''TRICPRB'', ''IDEVENTO'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRICPRB'' AND NOMECOL = ''IDEVENTO'') UNION
	SELECT ''TRICPRB'', ''CONTROLE'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRICPRB'' AND NOMECOL = ''CONTROLE'') UNION
	SELECT ''TRICPRB'', ''MSG'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRICPRB'' AND NOMECOL = ''MSG'') UNION
	SELECT ''TRICPRB'', ''XMLEVENTO'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRICPRB'' AND NOMECOL = ''XMLEVENTO'') UNION
	SELECT ''TRICPRB'', ''XMLRETORNO'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRICPRB'' AND NOMECOL = ''XMLRETORNO'') UNION
	SELECT ''TRICPRB'', ''CODRECEITA'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRICPRB'' AND NOMECOL = ''CODRECEITA'') UNION
	SELECT ''TRICPRB'', ''VLRCPAPURTOTALRET'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRICPRB'' AND NOMECOL = ''VLRCPAPURTOTALRET'') UNION
	SELECT ''TRICPRB'', ''VLRCPRBSUSPTOTALRET'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRICPRB'' AND NOMECOL = ''VLRCPRBSUSPTOTALRET'') UNION
--EVENTO R-2060: TRITCAE
	SELECT ''TRITCAE'', ''CODEMP'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRITCAE'' AND NOMECOL = ''CODEMP'') UNION
	SELECT ''TRITCAE'', ''DTREF'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRITCAE'' AND NOMECOL = ''DTREF'') UNION
	SELECT ''TRITCAE'', ''TPAMB'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRITCAE'' AND NOMECOL = ''TPAMB'') UNION
	SELECT ''TRITCAE'', ''SEQUENCIA'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRITCAE'' AND NOMECOL = ''SEQUENCIA'') UNION
	SELECT ''TRITCAE'', ''CHAVE'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRITCAE'' AND NOMECOL = ''CHAVE'') UNION
--EVENTO R-2060: TRIIPSC
	SELECT ''TRIIPSC'', ''CODEMP'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIIPSC'' AND NOMECOL = ''CODEMP'') UNION
	SELECT ''TRIIPSC'', ''DTREF'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIIPSC'' AND NOMECOL = ''DTREF'') UNION
	SELECT ''TRIIPSC'', ''TPAMB'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIIPSC'' AND NOMECOL = ''TPAMB'') UNION
	SELECT ''TRIIPSC'', ''SEQUENCIA'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIIPSC'' AND NOMECOL = ''SEQUENCIA'') UNION
	SELECT ''TRIIPSC'', ''CHAVE'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIIPSC'' AND NOMECOL = ''CHAVE'') UNION
--EVENTO R-2060: TRINFRB
	SELECT ''TRINFRB'', ''CODEMP'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRINFRB'' AND NOMECOL = ''CODEMP'') UNION
	SELECT ''TRINFRB'', ''DTREF'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRINFRB'' AND NOMECOL = ''DTREF'') UNION
	SELECT ''TRINFRB'', ''TPAMB'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRINFRB'' AND NOMECOL = ''TPAMB'') UNION
	SELECT ''TRINFRB'', ''SEQUENCIA'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRINFRB'' AND NOMECOL = ''SEQUENCIA'') UNION
	SELECT ''TRINFRB'', ''CHAVE'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRINFRB'' AND NOMECOL = ''CHAVE'') UNION
--EVENTO R-2010: TRIRCST
    SELECT ''TRIRCST'', ''CODEMP'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCST'' AND NOMECOL = ''CODEMP'') UNION
    SELECT ''TRIRCST'', ''DTREF'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCST'' AND NOMECOL = ''DTREF'') UNION
    SELECT ''TRIRCST'', ''TPAMB'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCST'' AND NOMECOL = ''TPAMB'') UNION
    SELECT ''TRIRCST'', ''SEQUENCIA'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCST'' AND NOMECOL = ''SEQUENCIA'') UNION
    SELECT ''TRIRCST'', ''STATUSREG'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCST'' AND NOMECOL = ''STATUSREG'') UNION
    SELECT ''TRIRCST'', ''TIPO'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCST'' AND NOMECOL = ''TIPO'') UNION
    SELECT ''TRIRCST'', ''NRORECIBO'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCST'' AND NOMECOL = ''NRORECIBO'') UNION
    SELECT ''TRIRCST'', ''NRORECIBOANT'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCST'' AND NOMECOL = ''NRORECIBOANT'') UNION
    SELECT ''TRIRCST'', ''IDEVENTO'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCST'' AND NOMECOL = ''IDEVENTO'') UNION
    SELECT ''TRIRCST'', ''CONTROLE'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCST'' AND NOMECOL = ''CONTROLE'') UNION
    SELECT ''TRIRCST'', ''MSG'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCST'' AND NOMECOL = ''MSG'') UNION
    SELECT ''TRIRCST'', ''XMLEVENTO'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCST'' AND NOMECOL = ''XMLEVENTO'') UNION
    SELECT ''TRIRCST'', ''XMLRETORNO'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCST'' AND NOMECOL = ''XMLRETORNO'') UNION
    SELECT ''TRIRCST'', ''CNPJPRESTADORRET'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCST'' AND NOMECOL = ''CNPJPRESTADORRET'') UNION
    SELECT ''TRIRCST'', ''VLRTOTALBASERETRET'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCST'' AND NOMECOL = ''VLRTOTALBASERETRET'') UNION
    SELECT ''TRIRCST'', ''VLRTOTALRETPRINCRET'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCST'' AND NOMECOL = ''VLRTOTALRETPRINCRET'') UNION
    SELECT ''TRIRCST'', ''VLRTOTALRETADICRET'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCST'' AND NOMECOL = ''VLRTOTALRETADICRET'') UNION
    SELECT ''TRIRCST'', ''VLRTOTALNRETPRINCRET'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCST'' AND NOMECOL = ''VLRTOTALNRETPRINCRET'') UNION
    SELECT ''TRIRCST'', ''VLRTOTALNRETADICRET'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCST'' AND NOMECOL = ''VLRTOTALNRETADICRET'') UNION
    SELECT ''TRIRCST'', ''VLRCRTOM'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCST'' AND NOMECOL = ''VLRCRTOM'') UNION
    SELECT ''TRIRCST'', ''VLRCRTOMSUSP'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCST'' AND NOMECOL = ''VLRCRTOMSUSP'') UNION
    SELECT ''TRIRCST'', ''VLRCRTOMRET'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCST'' AND NOMECOL = ''VLRCRTOMRET'') UNION
    SELECT ''TRIRCST'', ''VLRCRTOMSUSPRET'', ''V'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIRCST'' AND NOMECOL = ''VLRCRTOMSUSPRET'') UNION
--EVENTO R-2010: TRINFST
    SELECT ''TRINFST'', ''CODEMP'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRINFST'' AND NOMECOL = ''CODEMP'') UNION
    SELECT ''TRINFST'', ''DTREF'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRINFST'' AND NOMECOL = ''DTREF'') UNION
    SELECT ''TRINFST'', ''TPAMB'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRINFST'' AND NOMECOL = ''TPAMB'') UNION
    SELECT ''TRINFST'', ''SEQUENCIA'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRINFST'' AND NOMECOL = ''SEQUENCIA'') UNION
    SELECT ''TRINFST'', ''CHAVE'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRINFST'' AND NOMECOL = ''CHAVE'') UNION
--EVENTO R-2010: TRIPPST
    SELECT ''TRIPPST'', ''CODEMP'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPPST'' AND NOMECOL = ''CODEMP'') UNION
    SELECT ''TRIPPST'', ''DTREF'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPPST'' AND NOMECOL = ''DTREF'') UNION
    SELECT ''TRIPPST'', ''TPAMB'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPPST'' AND NOMECOL = ''TPAMB'') UNION
    SELECT ''TRIPPST'', ''SEQUENCIA'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPPST'' AND NOMECOL = ''SEQUENCIA'') UNION
    SELECT ''TRIPPST'', ''CHAVE'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPPST'' AND NOMECOL = ''CHAVE'') UNION
--EVENTO R-2010: TRIPAST
    SELECT ''TRIPAST'', ''CODEMP'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPAST'' AND NOMECOL = ''CODEMP'') UNION
    SELECT ''TRIPAST'', ''DTREF'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPAST'' AND NOMECOL = ''DTREF'') UNION
    SELECT ''TRIPAST'', ''TPAMB'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPAST'' AND NOMECOL = ''TPAMB'') UNION
    SELECT ''TRIPAST'', ''SEQUENCIA'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPAST'' AND NOMECOL = ''SEQUENCIA'') UNION
    SELECT ''TRIPAST'', ''CHAVE'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIPAST'' AND NOMECOL = ''CHAVE'') UNION
--EVENTO R-2010: TRIINFST
    SELECT ''TRIINFST'', ''CODEMP'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIINFST'' AND NOMECOL = ''CODEMP'') UNION
    SELECT ''TRIINFST'', ''DTREF'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIINFST'' AND NOMECOL = ''DTREF'') UNION
    SELECT ''TRIINFST'', ''TPAMB'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIINFST'' AND NOMECOL = ''TPAMB'') UNION
    SELECT ''TRIINFST'', ''SEQUENCIA'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIINFST'' AND NOMECOL = ''SEQUENCIA'') UNION
    SELECT ''TRIINFST'', ''CHAVE'', ''P'' FROM DUAL WHERE NOT EXISTS(SELECT 1 FROM TRICOL WHERE NOMETAB = ''TRIINFST'' AND NOMECOL = ''CHAVE'')';
END;
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54930-0-0
Nro. O.S. : 1148508
Nome      : Alterar - SNK_GET_COLUMNS_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - SNK_GET_COLUMNS_REINF
NomeObjeto: SNK_GET_COLUMNS_REINF
TipoObjeto: FUNCTION
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE FUNCTION SNK_GET_COLUMNS_REINF(P_TABLE            VARCHAR2, 
                                                 P_COLUMNNS_EXCECAO VARCHAR2 DEFAULT '*')
    RETURN VARCHAR2
IS  
    P_RESULT          VARCHAR2(4000);
    P_APELIDO_NEW     VARCHAR2(10) := 'N.';
    P_APELIDO_OLD     VARCHAR2(10) := 'O.';
    P_FORMAT_COLUMN   VARCHAR2(100);  
BEGIN  
    P_RESULT := ' ';

    FOR CUR_COLUMNS IN (SELECT COLUMN_NAME
                             , NULLABLE
                             , CASE WHEN DATA_TYPE IN ('NUMBER', 'FLOAT') THEN '0'
                                    WHEN DATA_TYPE = 'DATE' THEN 'SYSDATE'
                                    ELSE ''' ''' END AS DATA_NVL
                        FROM USER_TAB_COLUMNS
                        WHERE UPPER(TABLE_NAME) = UPPER(P_TABLE)
                            AND INSTR(P_COLUMNNS_EXCECAO, COLUMN_NAME) = 0
                            AND NOT EXISTS(SELECT 1
                                           FROM TRICOL
                                           WHERE NOMETAB = P_TABLE
                                               AND NOMECOL = USER_TAB_COLUMNS.COLUMN_NAME
                                               AND TIPO IN ('V', 'P'))) LOOP

        IF CUR_COLUMNS.NULLABLE = 'Y' THEN
            P_FORMAT_COLUMN := 'NVL('||P_APELIDO_NEW||CUR_COLUMNS.COLUMN_NAME||', '||CUR_COLUMNS.DATA_NVL||') = NVL('||P_APELIDO_OLD||CUR_COLUMNS.COLUMN_NAME||', '||CUR_COLUMNS.DATA_NVL||')';
        ELSE
            P_FORMAT_COLUMN := P_APELIDO_NEW||CUR_COLUMNS.COLUMN_NAME||' = '||P_APELIDO_OLD||CUR_COLUMNS.COLUMN_NAME; 
        END IF;

        IF P_RESULT = ' ' THEN
            P_RESULT := P_FORMAT_COLUMN;
        ELSE
            P_RESULT := P_RESULT ||' AND '||P_FORMAT_COLUMN;
        END IF;
    END LOOP;

    RETURN P_RESULT; 
END;
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54931-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5493000
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_GET_COLUMNS_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210011
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_GET_COLUMNS_REINF' NOMEOBJ, 54930 NUMSCRIPT, SYSDATE DTALTER, 'FUNCTION' TIPO, 'b290d6232c514f5cf5773f0111e74293' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_GET_COLUMNS_REINF' and THO.hashcode = 'b290d6232c514f5cf5773f0111e74293')
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54932-0-0
Nro. O.S. : 1148508
Nome      : Alterar - SNK_GET_PK_FOR_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - SNK_GET_PK_FOR_REINF
NomeObjeto: SNK_GET_PK_FOR_REINF
TipoObjeto: FUNCTION
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE FUNCTION SNK_GET_PK_FOR_REINF(P_TABELA           VARCHAR2,
                                                P_COL_EXCESSAO     VARCHAR2 := NULL)
RETURN VARCHAR2
AS
    P_RESULT    VARCHAR2(1000) := ' ';
    P_COL       VARCHAR2(4000);
BEGIN
    P_COL := ','||REPLACE(P_COL_EXCESSAO, ' ', '')||',';

    FOR COL IN (SELECT COLUMN_NAME
                FROM USER_CONS_COLUMNS COL
                     INNER JOIN USER_CONSTRAINTS CONS ON CONS.CONSTRAINT_NAME = COL.CONSTRAINT_NAME AND CONS.CONSTRAINT_TYPE = 'P'
                WHERE COL.TABLE_NAME = P_TABELA
                  AND INSTR(P_COL, COL.COLUMN_NAME) = 0
                  AND NOT EXISTS(SELECT 1
                                 FROM TRICOL
                                 WHERE NOMETAB = P_TABELA
                                     AND NOMECOL = COL.COLUMN_NAME
                                     AND TIPO IN ('V', 'P'))
                ORDER BY COL.POSITION) LOOP
        IF P_RESULT = ' ' THEN
            P_RESULT := ' AND O.'||COL.COLUMN_NAME||' = N.'||COL.COLUMN_NAME;
        ELSE
            P_RESULT := P_RESULT || ' AND O.'||COL.COLUMN_NAME||' = N.'||COL.COLUMN_NAME;
        END IF;
    END LOOP;
    RETURN P_RESULT;
END;
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54933-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5493200
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_GET_PK_FOR_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210011
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_GET_PK_FOR_REINF' NOMEOBJ, 54932 NUMSCRIPT, SYSDATE DTALTER, 'FUNCTION' TIPO, 'e50f6691e082d67390dbf7367740b1b2' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_GET_PK_FOR_REINF' and THO.hashcode = 'e50f6691e082d67390dbf7367740b1b2')
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54934-0-0
Nro. O.S. : 1148508
Nome      : Alterar - SNK_VERIF_ALTER_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - SNK_VERIF_ALTER_REINF
NomeObjeto: SNK_VERIF_ALTER_REINF
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_VERIF_ALTER_REINF(P_CODEMP          NUMBER, 
                                                  P_DTREF           DATE, 
                                                  P_TPAMB           VARCHAR2, 
                                                  P_SEQUENCIAATUAL  NUMBER,
                                                  P_NOMETAB_PAI     VARCHAR2 := NULL,
                                                  P_NOMETAB         VARCHAR2,
                                                  P_NOMEVIEW        VARCHAR2,
                                                  P_GRUPO           VARCHAR2,
                                                  P_VIEWDETALHE     VARCHAR2 := 'N')
IS
    P_CONDITION         VARCHAR2(4000);
    queSql              VARCHAR2(4000);
    TYPE CURTYPE        IS REF CURSOR;
    CURVAL              CURTYPE;
    P_COLUNAS_PADRAO    VARCHAR2(4000) := 'CODEMP, DTREF, TPAMB, SEQUENCIA, STATUSREG, TIPO, NRORECIBO, NRORECIBOANT, IDEVENTO, CONTROLE, MSG, XMLEVENTO, XMLRETORNO, INIVALIDNOVO, FIMVALIDNOVO ';
    P_COL_PAD_FILHOS    VARCHAR2(4000) := 'CODEMP, DTREF, TPAMB, SEQUENCIA, CHAVE';
    P_FILTRO_FILHOS     VARCHAR2(4000);
    P_COUNT             NUMBER(10);
BEGIN
    P_CONDITION := SNK_GET_COLUMNS_REINF(P_NOMETAB, P_COLUNAS_PADRAO);

    IF P_NOMETAB_PAI IS NULL THEN 
        queSql :=                 'SELECT CHAVE, VALIDACAO, DTREF, SEQUENCIA, CONTROLE '||
                                  'FROM (  SELECT O.CHAVE '||
                                                ', CASE WHEN (O.TIPO = ''E'') OR ('||P_CONDITION||') THEN ''I'' '||
                                                       'ELSE ''A'' '||
                                                  'END AS VALIDACAO '||
                                                ', O.DTREF '||
                                                ', O.SEQUENCIA '||
                                                ', O.CONTROLE  '||
                                          'FROM '||P_NOMETAB||' O '||
                                              'INNER JOIN '||P_NOMEVIEW||' N ON O.CODEMP = N.CODEMP '||
                                                                           'AND O.CHAVE = N.CHAVE ';

        IF P_GRUPO = 'M' THEN
            queSql := queSql ||                                            'AND O.DTREF = N.DTREF '||
                                                                           'AND N.SEQUENCIA = :SEQUENCIA ';
        END IF;

        queSql := queSql ||               'WHERE O.CODEMP = :CODEMP ';

        IF P_GRUPO = 'M' THEN
            queSql := queSql ||               'AND O.DTREF = :DTREF '; /* MOVIMENTO NÃO PRECISA OLHAR OUTRAS REFERÃNCIAS*/
        ELSE 
            queSql := queSql ||               'AND O.DTREF = (SELECT MAX(DTREF) '||
                                                             'FROM '||P_NOMETAB||' D '||
                                                             'WHERE D.CODEMP = O.CODEMP '||
                                                                 'AND D.TPAMB = O.TPAMB '||
                                                                 'AND D.CHAVE = O.CHAVE '||
                                                                 'AND D.STATUSREG = ''F'' '||
                                                                 'AND D.NRORECIBO IS NOT NULL '||
                                                             ') ';
        END IF;

        queSql := queSql ||                   'AND O.TPAMB = :TPAMB '||
                                              'AND O.SEQUENCIA = (SELECT MAX(SEQUENCIA) '||
                                                                 'FROM '||P_NOMETAB||' S '||
                                                                 'WHERE S.CODEMP = O.CODEMP '||
                                                                     'AND S.TPAMB = O.TPAMB '||
                                                                     'AND S.CHAVE = O.CHAVE '||
                                                                     'AND S.DTREF = O.DTREF '||
                                                                     'AND S.STATUSREG = ''F'' '||
                                                                     'AND S.NRORECIBO IS NOT NULL '||
                                                                 ') '||
                                              'AND O.STATUSREG = ''F'' '||
                                        ') DTALT ';

        queSql :=   'INSERT INTO TRIVAR (CHAVE, VALIDACAO, DTREF, SEQUENCIA, CONTROLE) '||queSql;

        IF P_GRUPO = 'M' THEN
            EXECUTE IMMEDIATE queSql USING P_SEQUENCIAATUAL, P_CODEMP, P_DTREF, P_TPAMB;
        ELSE
            EXECUTE IMMEDIATE queSql USING P_CODEMP, P_TPAMB;
        END IF;
    ELSE 
        P_FILTRO_FILHOS := NVL(SNK_GET_PK_FOR_REINF(P_NOMETAB, P_COL_PAD_FILHOS), ' ');

        queSql :=                 'SELECT CHAVE, VALIDACAO, DTREF, SEQUENCIA, CONTROLE '||
                                  'FROM (  SELECT O.CHAVE '||
                                               ', CASE WHEN (N.CODEMP IS NOT NULL) AND (P.TIPO = ''E'' OR ('||P_CONDITION||')) THEN ''I'' '||
                                                      'ELSE ''A'' '||
                                                 'END AS VALIDACAO '||
                                               ', O.DTREF '||
                                               ', O.SEQUENCIA '||
                                               ', P.CONTROLE  '||
                                          'FROM '||P_NOMETAB||' O '||
                                              'LEFT JOIN '||P_NOMEVIEW||' N ON N.CODEMP = O.CODEMP '||
                                                                          'AND N.CHAVE = O.CHAVE '||
                                                                          P_FILTRO_FILHOS||' ';

        IF P_GRUPO = 'M' THEN
            queSql := queSql ||                                           'AND N.DTREF = O.DTREF ';

            IF P_VIEWDETALHE = 'N' THEN
                queSql := queSql ||                                       'AND N.SEQUENCIA = :SEQUENCIA ';
            END IF;
        END IF;

        queSql := queSql ||                   'INNER JOIN '||P_NOMETAB_PAI||' P ON P.CODEMP = O.CODEMP '||
                                                                              'AND P.DTREF = O.DTREF '||
                                                                              'AND P.TPAMB = O.TPAMB '||
                                                                              'AND P.SEQUENCIA = O.SEQUENCIA '||
                                                                              'AND P.CHAVE = O.CHAVE '||
                                          'WHERE O.CODEMP = :CODEMP ';
                                          
        IF P_GRUPO = 'M' THEN
            queSql := queSql ||               'AND O.DTREF = :DTREF '; /* MOVIMENTO NÃO PRECISA OLHAR OUTRAS REFERÃNCIAS*/
        ELSE
            queSql := queSql ||               'AND O.DTREF = (SELECT MAX(DTREF) '||
                                                             'FROM '||P_NOMETAB_PAI||' D '||
                                                             'WHERE D.CODEMP = O.CODEMP '||
                                                                 'AND D.TPAMB = O.TPAMB '||
                                                                 'AND D.CHAVE = O.CHAVE '||
                                                                 'AND D.STATUSREG = ''F'' '||
                                                                 'AND D.NRORECIBO IS NOT NULL '||
                                                             ')';
        END IF;

        queSql := queSql ||                   'AND O.TPAMB = :TPAMB '||
                                              'AND O.SEQUENCIA = (SELECT MAX(SEQUENCIA) '||
                                                                 'FROM '||P_NOMETAB_PAI||' S '||
                                                                 'WHERE S.CODEMP = O.CODEMP '||
                                                                     'AND S.DTREF = O.DTREF '||
                                                                     'AND S.TPAMB = O.TPAMB '||
                                                                     'AND S.CHAVE = O.CHAVE '||
                                                                     'AND S.STATUSREG = ''F'' '||
                                                                     'AND S.NRORECIBO IS NOT NULL '||
                                                                 ') '||
                                              'AND P.STATUSREG = ''F'' '|| 
                                          'UNION '||
                                          'SELECT P.CHAVE '||
                                               ', ''A'' AS VALIDACAO '||
                                               ', P.DTREF '||
                                               ', P.SEQUENCIA '||
                                               ', P.CONTROLE '||
                                          'FROM '||P_NOMEVIEW||' N '||
                                              'INNER JOIN '||P_NOMETAB_PAI||' P ON P.CODEMP = N.CODEMP '||
                                                                         'AND P.CHAVE = N.CHAVE ';
        IF P_GRUPO = 'M' THEN
            queSql := queSql ||                                          'AND P.DTREF = N.DTREF ';
        END IF;

        queSql := queSql ||               'WHERE N.CODEMP = :CODEMP ';

        IF P_GRUPO = 'M' THEN
            queSql := queSql ||               'AND P.DTREF = :DTREF ';

            IF P_VIEWDETALHE = 'N' THEN
                queSql := queSql ||           'AND N.DTREF = P.DTREF '||
                                              'AND N.SEQUENCIA = :SEQUENCIA ';
            END IF;
        ELSE
            queSql := queSql ||               'AND P.DTREF = (SELECT MAX(DTREF) '||
                                                             'FROM '||P_NOMETAB_PAI||' D '||
                                                             'WHERE D.CODEMP = P.CODEMP '||
                                                                 'AND D.TPAMB = P.TPAMB '||
                                                                 'AND D.CHAVE = P.CHAVE '||
                                                                 'AND D.STATUSREG = ''F'' '||
                                                                 'AND D.NRORECIBO IS NOT NULL '||
                                                             ') ';
        END IF;

        queSql := queSql ||                   'AND P.TPAMB = :TPAMB '||
                                              'AND P.SEQUENCIA = (SELECT MAX(SEQUENCIA) '||
                                                                 'FROM '||P_NOMETAB_PAI||' S '||
                                                                 'WHERE S.CODEMP = P.CODEMP '||
                                                                     'AND S.TPAMB = P.TPAMB '||
                                                                     'AND S.CHAVE = P.CHAVE '||
                                                                     'AND S.DTREF = P.DTREF '||
                                                                     'AND S.STATUSREG = ''F'' '||
                                                                     'AND S.NRORECIBO IS NOT NULL '||
                                                                ') '||
                                              'AND NOT EXISTS(SELECT 1 '||
                                                             'FROM '||P_NOMETAB||' O '||
                                                             'WHERE O.CODEMP = P.CODEMP '||
                                                                 'AND O.DTREF = P.DTREF '||
                                                                 'AND O.TPAMB = P.TPAMB '||
                                                                 'AND O.SEQUENCIA = P.SEQUENCIA '||
                                                                 'AND O.CHAVE = P.CHAVE '||
                                                                 P_FILTRO_FILHOS||' '||
                                                             ') '||
                                        ') DTALT '||
                                  'WHERE NOT EXISTS(SELECT 1 '||
                                                   'FROM TRIVAR '||
                                                   'WHERE CHAVE = DTALT.CHAVE '||
                                                       'AND VALIDACAO = DTALT.VALIDACAO '||
                                                   ') ';

        queSql :=   'INSERT INTO TRIVAR (CHAVE, VALIDACAO, DTREF, SEQUENCIA, CONTROLE) '||queSql;

        IF P_GRUPO = 'M' THEN
            IF P_VIEWDETALHE = 'N' THEN
                EXECUTE IMMEDIATE queSql USING P_SEQUENCIAATUAL, P_CODEMP, P_DTREF, P_TPAMB, P_CODEMP, P_DTREF, P_SEQUENCIAATUAL, P_TPAMB;
            ELSE 
                EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF, P_TPAMB, P_CODEMP, P_DTREF, P_TPAMB;
            END IF;
        ELSE
            EXECUTE IMMEDIATE queSql USING P_CODEMP, P_TPAMB, P_CODEMP, P_TPAMB;
        END IF;
    END IF;

    FOR EVEF IN (SELECT MON.NOMETAB, MON.NOMEVIEW, MON.VIEWDETALHE
                         FROM TRIMON MON
                         WHERE MON.NOMETABPAI = P_NOMETAB 
                         GROUP BY MON.NOMETAB, MON.NOMEVIEW, MON.VIEWDETALHE
                         ORDER BY MON.NOMETAB
                  ) LOOP
            SNK_VERIF_ALTER_REINF(P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIAATUAL, NVL(P_NOMETAB_PAI, P_NOMETAB), EVEF.NOMETAB, EVEF.NOMEVIEW, P_GRUPO, EVEF.VIEWDETALHE);
    END LOOP;

    IF P_NOMETAB_PAI IS NULL THEN
        SELECT COUNT(1) INTO P_COUNT
        FROM TRIVAR;

        IF P_COUNT > 0 THEN
            SELECT COUNT(1) INTO P_COUNT
            FROM TRIVAR VAR
            WHERE VALIDACAO = 'I'
              AND EXISTS(SELECT 1
                        FROM TRIVAR V
                        WHERE V.CHAVE = VAR.CHAVE
                          AND V.VALIDACAO <> VAR.VALIDACAO);

            IF P_COUNT > 0 THEN
                DELETE FROM TRIVAR VAR
                WHERE VALIDACAO = 'I'
                  AND EXISTS(SELECT 1
                            FROM TRIVAR V
                            WHERE V.CHAVE = VAR.CHAVE
                              AND V.VALIDACAO <> VAR.VALIDACAO);
            END IF;

            queSql :=           'UPDATE '||P_NOMETAB||' '||
                                'SET CONTROLE = CASE WHEN EXISTS (SELECT 1 '||
                                                                 'FROM TRIVAR '||
                                                                 'WHERE DTREF = '||P_NOMETAB||'.DTREF '||
                                                                     'AND SEQUENCIA = '||P_NOMETAB||'.SEQUENCIA '||
                                                                     'AND CHAVE = '||P_NOMETAB||'.CHAVE '||
                                                                     'AND VALIDACAO = ''A'' '||
                                                                     'AND CONTROLE = ''I'') THEN ''A'' '|| 
                                                    'ELSE ''I'' '||
                                               'END '||
                                'WHERE CODEMP = :CODEMP '||
                                    'AND TPAMB = :TPAMB '||
                                    'AND EXISTS (SELECT 1 '||
                                                'FROM TRIVAR '||
                                                'WHERE DTREF = '||P_NOMETAB||'.DTREF '||
                                                    'AND SEQUENCIA = '||P_NOMETAB||'.SEQUENCIA '||
                                                    'AND CHAVE = '||P_NOMETAB||'.CHAVE '||
                                                    'AND ( (VALIDACAO = ''A'' AND CONTROLE = ''I'') OR  '||
                                                          '(VALIDACAO = ''I'' AND CONTROLE <> ''I'') '||
                                                         ') '||
                                                ') ';

            EXECUTE IMMEDIATE queSql USING P_CODEMP, P_TPAMB;
        END IF;
    END IF;
EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    IF queSql IS NOT NULL THEN
        SELECT COUNT(1) INTO P_COUNT
        FROM LOGREINF
        WHERE DTOCOR = SYSDATE
         AND CODUSU = STP_GET_CODUSULOGADO();
        IF P_COUNT = 0 THEN
            INSERT INTO LOGREINF(DTOCOR, CODUSU, SQLERR)
                SELECT SYSDATE, STP_GET_CODUSULOGADO(), queSql FROM DUAL; 
        END IF;
    END IF;
    COMMIT;
    RAISE_APPLICATION_ERROR(-20101, SQLERRM);
END;
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54935-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5493400
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_VERIF_ALTER_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210011
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_VERIF_ALTER_REINF' NOMEOBJ, 54934 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, '06ad676648395a6b0313a0cd0a71d513' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_VERIF_ALTER_REINF' and THO.hashcode = '06ad676648395a6b0313a0cd0a71d513')
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54936-0-0
Nro. O.S. : 1148508
Nome      : Alterar - VRI_EVT_R2010_NFS
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VRI_EVT_R2010_NFS
NomeObjeto: VRI_EVT_R2010_NFS
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2010_NFS
AS
SELECT
 INFST.CODEMP
,INFST.DTREF
,INFST.TPAMB
,INFST.SEQUENCIA 
,INFST.CHAVE
,INFST.NUNOTA
,CAB.SERIENOTA AS SERIE
,CAST(CAB.NUMNOTA AS VARCHAR(15)) AS NUMDOCTO
,CAB.DTNEG AS DTEMISSAONF
,SUM(INFST.VLRTOTALBRUTO) AS VLRBRUTO
,SUBSTR(REPLACE(REPLACE(NVL(CAB.OBSERVACAO, ''), CHR(13), ' '), CHR(10), ' '), 1, 250) AS OBS
,INFST.TIPODOCUMENTO
FROM TRIINFST INFST
    INNER JOIN TGFCAB CAB ON CAB.NUNOTA = INFST.NUNOTA
WHERE TIPODOCUMENTO = 'N'
GROUP BY
 INFST.CODEMP
,INFST.DTREF
,INFST.TPAMB
,INFST.SEQUENCIA
,INFST.CHAVE 
,INFST.NUNOTA
,CAB.SERIENOTA
,CAST(CAB.NUMNOTA AS VARCHAR(15))
,CAB.DTNEG
,SUBSTR(REPLACE(REPLACE(NVL(CAB.OBSERVACAO, ''), CHR(13), ' '), CHR(10), ' '), 1, 250)
,INFST.TIPODOCUMENTO
UNION
SELECT
 INFST.CODEMP
,INFST.DTREF
,INFST.TPAMB
,INFST.SEQUENCIA
,INFST.CHAVE 
,INFST.NUNOTA
,FIN.SERIENOTA AS SERIE
,CAST(FIN.NUMNOTA AS VARCHAR(15)) AS NUMDOCTO
,FIN.DTNEG AS DTEMISSAONF
,SUM(INFST.VLRTOTALBRUTO) AS VLRBRUTO
,'' AS OBS
,INFST.TIPODOCUMENTO
FROM TRIINFST INFST
    INNER JOIN TGFFIN FIN ON FIN.NUFIN = INFST.NUNOTA
WHERE TIPODOCUMENTO = 'F'
GROUP BY
 INFST.CODEMP
,INFST.DTREF
,INFST.TPAMB
,INFST.SEQUENCIA 
,INFST.CHAVE
,INFST.NUNOTA
,FIN.SERIENOTA
,CAST(FIN.NUMNOTA AS VARCHAR(15))
,FIN.DTNEG
,INFST.TIPODOCUMENTO
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 54937-0-0
Nro. O.S. : 1148508
Nome      : Alterar - VRI_EVT_R2020_NFS
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VRI_EVT_R2020_NFS
NomeObjeto: VRI_EVT_R2020_NFS
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2020_NFS
AS 
SELECT 
 INFSP.CODEMP
,INFSP.DTREF
,INFSP.TPAMB
,INFSP.SEQUENCIA
,INFSP.CHAVE
,CAB.NUNOTA
,CAB.SERIENOTA AS SERIE
,CAST(CAB.NUMNOTA AS VARCHAR(15)) AS NUMDOCTO
,CAB.DTNEG AS DTEMISSAONF
,SUM(INFSP.VLRTOTALBRUTO) AS VLRBRUTO
,SUBSTR(REPLACE(REPLACE(NVL(CAB.OBSERVACAO, ''), CHR(13), ' '), CHR(10), ' '), 1, 250) AS OBS
FROM TRIINFSP INFSP
    INNER JOIN TGFCAB CAB ON CAB.NUNOTA = INFSP.NUNOTA
GROUP BY 
 INFSP.CODEMP
,INFSP.DTREF
,INFSP.TPAMB
,INFSP.SEQUENCIA
,INFSP.CHAVE
,CAB.NUNOTA
,CAB.SERIENOTA
,CAST(CAB.NUMNOTA AS VARCHAR(15))
,CAB.DTNEG
,SUBSTR(REPLACE(REPLACE(NVL(CAB.OBSERVACAO, ''), CHR(13), ' '), CHR(10), ' '), 1, 250)
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 15:28:24
Num.Script: 55718-0-0
Nro. O.S. : 1181045
Nome      : Dropar - SNK_VALID_ALTER_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - SNK_VALID_ALTER_REINF
NomeObjeto: SNK_VALID_ALTER_REINF
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210011
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DROP PROCEDURE SNK_VALID_ALTER_REINF
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 15:28:24
Num.Script: 55719-0-1000
Nro. O.S. : 1181045
Nome      : INSERE - THOOBJ - 5571800
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_VALID_ALTER_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210011
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_VALID_ALTER_REINF' NOMEOBJ, 55718 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, '5224b43782c4179ca451257b0aa26107' HASHCODE, 'Drop Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_VALID_ALTER_REINF' and THO.hashcode = '5224b43782c4179ca451257b0aa26107')
/
 
 
 
/*
Requer    : 4210010
Conexao   : ORCL
Data      : 22/05/2018 15:57:55
Num.Script: 55723-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5572200
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_PROCESSA_DADOS_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210011
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_PROCESSA_DADOS_REINF' NOMEOBJ, 55722 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, '4ca987755e10eff16bd1e11d12785007' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_PROCESSA_DADOS_REINF' and THO.hashcode = '4ca987755e10eff16bd1e11d12785007')
/
 
 
 
/*
Conexao   : ORCL
NomeObjeto: UPDATE TSIPAR INTEIRO
TipoObjeto: TABLE
NomeTabela: 
Executar  : SEMPRE
Ocorrencia: 4210012
FullVersao: Sim
*/
 
 
UPDATE TSIPAR SET INTEIRO = 4210011 WHERE CHAVE = 'VERSAOATUALDB'
/
 
 
 
/*
Requer    : 4210011
Conexao   : ORCL
Data      : 07/05/2018 14:39:02
Num.Script: 54997-0-0
Nro. O.S. : 1130575
Nome      : Script - TIPCANCNFSE 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Script - TIPCANCNFSE 
NomeObjeto: TIPCANCNFSE 
TipoObjeto: COLUMN
NomeTabela: TSICID
Executar  : SE_EXISTIR
Ocorrencia: 4210012
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DECLARE
    P_COUNT         NUMBER(5);
BEGIN
    SELECT COUNT(*) INTO P_COUNT
    FROM TSICID
    WHERE TIPCANCNFSE = '4' AND  CODMUNFIS = 5218508;
    
    IF P_COUNT = 0 THEN    
        BEGIN 
            EXECUTE IMMEDIATE ('UPDATE TSICID SET TIPCANCNFSE = ''4'' WHERE CODMUNFIS = 5218508');
        EXCEPTION        
            WHEN OTHERS THEN
                RAISE_APPLICATION_ERROR(-20010,'Problema na alteração do campo TIPCANCNFSE');
        END;
    END IF;
END;
/
 
 
 
/*
Requer    : 4210011
Conexao   : ORCL
Data      : 10/05/2018 10:33:20
Num.Script: 55001-0-0
Nro. O.S. : 1137052
Nome      : Altera - TIPIMPNAOFISCAL
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Altera - TIPIMPNAOFISCAL
NomeObjeto: TIPIMPNAOFISCAL
TipoObjeto: PARAMETRO
NomeTabela: TSIPAR
Executar  : SE_EXISTIR
Ocorrencia: 4210012
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
UPDATE TSIPAR SET TEXTO= 'Daruma' || chr(13) || 'Elgin' || chr(13) || 'Epson' || chr(13) ||'Bematech'|| chr(13) ||'Sweda' WHERE CHAVE LIKE 'TIPIMPNAOFISCAL'
/
 
 
 
/*
Requer    : 4210011
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 55025-0-0
Nro. O.S. : 1148508
Nome      : Alterar - VRI_ACOMPANHAMENTO_TRANSMISSAO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VRI_ACOMPANHAMENTO_TRANSMISSAO
NomeObjeto: VRI_ACOMPANHAMENTO_TRANSMISSAO
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210012
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_ACOMPANHAMENTO_TRANSMISSAO
AS
SELECT CODEMP
     , REFERENCIA
     , TPAMB
     , SEQUENCIA
     , EVENTO
     , SUM(AGUARDEVTPRIORITARIO) AS AGUARDEVTPRIORITARIO
     , SUM(PENDENTES) AS PENDENTES
     , SUM(ENVIADOS) AS ENVIADOS
     , SUM(AGUARDCORRECAO) AS AGUARDCORRECAO
     , SUM(ERROEVTPRIORITARIO) AS ERROEVTPRIORITARIO
     , SUM(FINALIZADO) AS FINALIZADO
     , COUNT(1) AS TOTAL
FROM (
    SELECT FILA.CODEMP
         , FILA.REFERENCIA
         , CAST(FILA.TPAMB AS VARCHAR2(1)) AS TPAMB
         , FILA.SEQUENCIA
         , FILA.TIPOEVENTO AS EVENTO
		 , CASE WHEN (EVT.GRUPO = 'C' AND FILA.ACAO <> 'E') OR FILA.SITUACAO <> 'P' THEN 0
                WHEN FILA.SITUACAO = 'P' AND EXISTS(SELECT 1
                                                     FROM EVTFILAREINF F
                                                         INNER JOIN TRIEVT E ON E.TIPOEVENTO = F.TIPOEVENTO
                                                     WHERE F.CODEMP = FILA.CODEMP
                                                        AND F.REFERENCIA = FILA.REFERENCIA
                                                        AND F.TPAMB = FILA.TPAMB
                                                        AND F.SEQUENCIA = FILA.SEQUENCIA
                                                        AND ((EVT.GRUPO <> 'C' AND E.GRUPO = 'C') OR (EVT.GRUPO = 'C' AND FILA.ACAO = 'E' AND E.GRUPO <> 'C'))
                                                        AND F.SITUACAO NOT IN ('F', 'E', 'X')) THEN 1
                ELSE 0
           END AS AGUARDEVTPRIORITARIO
         , CASE WHEN (EVT.GRUPO = 'C' AND FILA.ACAO <> 'E' AND FILA.SITUACAO = 'P') OR 
                     (FILA.SITUACAO = 'P' AND NOT EXISTS(SELECT 1
                                                          FROM EVTFILAREINF F
                                                             INNER JOIN TRIEVT E ON E.TIPOEVENTO = F.TIPOEVENTO
                                                          WHERE F.CODEMP = FILA.CODEMP
                                                             AND F.REFERENCIA = FILA.REFERENCIA
                                                             AND F.TPAMB = FILA.TPAMB
                                                             AND F.SEQUENCIA = FILA.SEQUENCIA
                                                             AND ((EVT.GRUPO <> 'C' AND E.GRUPO = 'C') OR (EVT.GRUPO = 'C' AND FILA.ACAO = 'E' AND E.GRUPO <> 'C'))
                                                             AND F.SITUACAO NOT IN ('F', 'E', 'X'))) THEN 1
                ELSE 0
           END AS PENDENTES
         , CASE WHEN FILA.SITUACAO IN ('I', 'T') THEN 1 
                ELSE 0 
           END AS ENVIADOS
         , CASE WHEN FILA.SITUACAO IN ('E', 'V', 'L', 'R') THEN 1 
                ELSE 0 
           END AS AGUARDCORRECAO
         , CASE WHEN FILA.SITUACAO = 'X' THEN 1 
                ELSE 0 
           END AS ERROEVTPRIORITARIO
         , CASE WHEN FILA.SITUACAO = 'F' THEN 1 
                ELSE 0 
           END AS FINALIZADO
    FROM EVTFILAREINF FILA
        INNER JOIN TRIEVT EVT ON EVT.TIPOEVENTO = FILA.TIPOEVENTO
    WHERE EXISTS(SELECT *
                 FROM EVTFILAREINF F
                 WHERE F.CODEMP = FILA.CODEMP
                   AND F.DHINC = FILA.DHINC
                   AND F.SEQEVENTO = FILA.SEQEVENTO
                   AND ((F.TIPOEVENTO IN ('R2098', 'R2099') AND F.DHINC = (SELECT MAX(DHINC)
                                                                           FROM EVTFILAREINF MDH
                                                                           WHERE MDH.CODEMP = F.CODEMP
                                                                             AND MDH.REFERENCIA = F.REFERENCIA
                                                                             AND MDH.TPAMB = F.TPAMB
                                                                             AND MDH.SEQUENCIA = F.SEQUENCIA
                                                                             AND MDH.TIPOEVENTO = F.TIPOEVENTO  
                                                                           )) OR 
                        (F.TIPOEVENTO NOT IN ('R2098', 'R2099'))               
                       )
                 )
) TAB
GROUP BY TAB.CODEMP
       , TAB.REFERENCIA
       , TAB.TPAMB
       , TAB.SEQUENCIA
       , TAB.EVENTO
/
 
 
 
/*
Requer    : 4210011
Conexao   : ORCL
Data      : 07/05/2018 17:12:40
Num.Script: 55041-0-0
Nro. O.S. : 1181045
Nome      : Dropar - SNK_VALID_ALTER_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - SNK_VALID_ALTER_REINF
NomeObjeto: SNK_VALID_ALTER_REINF
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210012
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
DROP PROCEDURE SNK_VALID_ALTER_REINF
/
 
 
 
/*
Requer    : 4210011
Conexao   : ORCL
Data      : 07/05/2018 17:12:41
Num.Script: 55042-0-1000
Nro. O.S. : 1181045
Nome      : INSERE - THOOBJ - 5504100
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_VALID_ALTER_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210012
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_VALID_ALTER_REINF' NOMEOBJ, 55041 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, '5224b43782c4179ca451257b0aa26107' HASHCODE, 'Drop Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_VALID_ALTER_REINF' and THO.hashcode = '5224b43782c4179ca451257b0aa26107')
/
 
 
 
/*
Requer    : 4210011
Conexao   : ORCL
Data      : 10/05/2018 14:37:01
Num.Script: 55045-0-0
Nro. O.S. : 1181045
Nome      : Alterar - SNK_PROCESSA_DADOS_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - SNK_PROCESSA_DADOS_REINF
NomeObjeto: SNK_PROCESSA_DADOS_REINF
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210012
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_PROCESSA_DADOS_REINF(P_CODEMP           NUMBER,
                                                     P_DTREF            DATE,
                                                     P_TPAMB            VARCHAR2,
                                                     P_SEQUENCIA_ATUAL  NUMBER, 
                                                     P_TIPDADOS         CHAR,                   /*T=TODOS, C=CADOSTRO, M=MOVIMENTO*/
                                                     P_EVENTO           VARCHAR2 := 'TODOS',    /*TODOS, NOMEEVENTO*/
                                                     P_NOMETAB          VARCHAR2 := NULL,       /*UTILIZADO NA RECURSIVIDADE*/
                                                     P_SEQUENCIA_PAI    NUMBER := NULL,         /*UTILIZADO NA RECURSIVIDADE*/
                                                     P_RESULT           OUT NUMBER)     
AS
    P_SEQUENCIA_OLD             NUMBER;
    P_SEQUENCIA_NEW             NUMBER;
    P_SEQUENCIA_DEL             NUMBER;
    P_DTREF_OLD                 DATE;
    P_DTREF_OLD_PENDENTE        DATE;
    P_NRORECIBO                 VARCHAR2(50);
    P_NRO_RECIBO_OLD             VARCHAR2(50) := NULL;
    P_INSERT_COLUMNS            VARCHAR2(4000);
    P_INSERT_VALUES             VARCHAR2(4000);
    P_COUNT                     NUMBER(10);
    queSql                      VARCHAR2(4000);
    P_FILTRO_MERGE              VARCHAR2(4000) := '';
    queSqlTeste                 VARCHAR2(4000) := '';
BEGIN
    SELECT MAX(DTREF) INTO P_DTREF_OLD_PENDENTE
    FROM TRICAB CAB
    WHERE CAB.CODEMP = P_CODEMP
        AND CAB.DTREF < P_DTREF
        AND CAB.TPAMB = P_TPAMB
        AND NOT EXISTS( SELECT 1
                        FROM TRIFEP FEP
                        WHERE FEP.CODEMP = CAB.CODEMP
                            AND FEP.DTREF = CAB.DTREF
                            AND FEP.TPAMB = CAB.TPAMB
                            AND FEP.SEQUENCIA = CAB.SEQUENCIAATUAL);

    IF P_DTREF_OLD_PENDENTE IS NOT NULL THEN
        RAISE_APPLICATION_ERROR(-20101, 'Existe movimento para referência '''||TO_CHAR(P_DTREF_OLD_PENDENTE, 'DD/MM/YYYY')||''' que não foi fechada. Para gerar esta referência é necessário seu fechamento.');
    END IF;

    IF P_NOMETAB IS NULL THEN
        FOR EVE IN (SELECT MON.NOMETAB, MON.NOMEEVENTO
                    FROM TRIMON MON
                        INNER JOIN TRIEVT EVT ON EVT.TIPOEVENTO = MON.NOMEEVENTO
                    WHERE (P_EVENTO = 'TODOS' OR MON.NOMEEVENTO = P_EVENTO)
                        AND MON.NOMETABPAI IS NULL
                        AND (P_EVENTO <> 'TODOS' OR P_TIPDADOS = 'T' OR EVT.GRUPO = P_TIPDADOS)
                        AND (EXISTS(SELECT 1
                                   FROM TGFEPS
                                   WHERE EVENTO = EVT.TIPOEVENTO
                                     AND CODEMP = P_CODEMP
                                     AND GERAREVENTO = 'S') OR 
                             EVT.GRUPO = 'C') /*EVENTOS DE CADASTRO NÃO ESTÃO NA TABELA TGFEPS*/
                    GROUP BY MON.NOMEEVENTO, MON.NOMETAB, MON.ORDEM
                    ORDER BY MON.ORDEM
                    ) 
        LOOP
            queSql := ' SELECT COUNT(1)  
                        FROM '||EVE.NOMETAB||'
                        WHERE CODEMP = :CODEMP
                          AND DTREF = :DTREF
                          AND TPAMB = :TPAMB
                          AND STATUSREG = ''E'' ';

            EXECUTE IMMEDIATE queSql INTO P_COUNT USING P_CODEMP, P_DTREF, P_TPAMB;

            IF P_COUNT > 0 THEN
                RAISE_APPLICATION_ERROR(-20101, 'Não é possível gerar dados do REINF se existir eventos enviados para esta empresa/referência.');
            END IF;

            queSql := ' SELECT MAX(SEQUENCIA)
                        FROM '||EVE.NOMETAB||'
                        WHERE CODEMP = :CODEMP
                          AND DTREF = :DTREF
                          AND TPAMB = :TPAMB
                          AND STATUSREG = ''P''';

            EXECUTE IMMEDIATE queSql INTO P_SEQUENCIA_DEL USING P_CODEMP, P_DTREF, P_TPAMB;

            IF NVL(P_SEQUENCIA_DEL, 0) > 0 THEN
                FOR CUR_DEL IN (SELECT NOMETAB
                                FROM TRIMON
                                WHERE NOMETABPAI IS NULL
                                ORDER BY ORDEM DESC /*NÃO ALTERAR ESSA ORDEM: OS MOVIMENTOS DEVEM SER DELETADOS ANTES DOS PROCESSOS, POIS EXISTE FK ENTRE ELES*/
                                ) 
                LOOP
                    queSql := ' DELETE FROM '||CUR_DEL.NOMETAB||'
                                WHERE CODEMP = :CODEMP
                                  AND DTREF = :DTREF
                                  AND TPAMB = :TPAMB
                                  AND SEQUENCIA = :SEQUENCIA';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_DEL;

                END LOOP;
                P_SEQUENCIA_NEW := P_SEQUENCIA_ATUAL;
                EXIT; /*COMO JÁ DELETEI TODOS OS REGISTROS PARA A ULTIMA SEQUENCIA PENDENTE, POSSO SAIR DO LOOP*/
            END IF;
        END LOOP;
    ELSE
        P_SEQUENCIA_NEW := P_SEQUENCIA_PAI;
    END IF;

    IF P_SEQUENCIA_NEW IS NULL THEN /*SE A SEQUENCIA ESTÁ NULL, NENHUM REGISTRO FOI DELETADO, LOGO A SEQUENCIA SERÁ A SEQUENCIA ATUAL + 1*/
        P_SEQUENCIA_NEW := P_SEQUENCIA_ATUAL + 1;
    END IF;

    FOR EVE IN (SELECT MON.NOMETAB, MON.NOMEEVENTO, MON.NOMEVIEW
                     , CASE WHEN P_NOMETAB IS NULL THEN MON.NOMETABPAI ELSE (SELECT MIN(NOMETAB) FROM TRIMON WHERE NOMEEVENTO = P_EVENTO AND NOMETABPAI IS NULL) END AS NOMETABPAI
                     , MON.VIEWDETALHE, EVT.GRUPO, MON.ORDEM
                FROM TRIMON MON
                    INNER JOIN TRIEVT EVT ON EVT.TIPOEVENTO = MON.NOMEEVENTO
                WHERE (P_NOMETAB IS NOT NULL AND MON.NOMETAB = P_NOMETAB) /*BUSCA O PRÓPRIO EVENTO*/ OR 
                         (  P_NOMETAB IS NULL
                         AND MON.NOMETABPAI IS NULL 
                         AND (P_EVENTO = 'TODOS' OR MON.NOMEEVENTO = P_EVENTO)                      
                         AND (P_EVENTO <> 'TODOS' OR P_TIPDADOS = 'T' OR EVT.GRUPO = P_TIPDADOS)
                         AND (EXISTS(SELECT 1
                                       FROM TGFEPS
                                     WHERE EVENTO = EVT.TIPOEVENTO
                                        AND CODEMP = P_CODEMP
                                        AND GERAREVENTO = 'S') OR
                              EVT.GRUPO = 'C') /*EVENTOS DE CADASTRO NÃO ESTÃO NA TABELA TGFEPS*/
                      )
                ORDER BY MON.ORDEM  
               )
    LOOP
        P_NRORECIBO := NULL;
        P_NRO_RECIBO_OLD := NULL;

        IF P_SEQUENCIA_NEW > 1 THEN
            queSql := ' SELECT MAX(SEQUENCIA)
                        FROM '||EVE.NOMETAB||'
                        WHERE CODEMP = :CODEMP
                          AND DTREF = :DTREF
                          AND TPAMB = :TPAMB
                          AND SEQUENCIA < :SEQUENCIA_NEW';

            EXECUTE IMMEDIATE queSql INTO P_SEQUENCIA_OLD USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW;

            P_DTREF_OLD := P_DTREF;
        ELSIF EVE.GRUPO <> 'M' THEN
            queSql := ' SELECT NVL(MAX(DTREF), :DTREF)
                        FROM '||EVE.NOMETAB||'
                        WHERE CODEMP = :CODEMP
                          AND DTREF < :DTREF
                          AND TPAMB = :TPAMB';
            EXECUTE IMMEDIATE queSql INTO P_DTREF_OLD USING P_DTREF, P_CODEMP, P_DTREF, P_TPAMB;

            IF P_DTREF_OLD <> P_DTREF THEN
                queSql := ' SELECT NVL(MAX(SEQUENCIA),0)
                            FROM '||EVE.NOMETAB||'
                            WHERE CODEMP = :CODEMP
                              AND DTREF = :DTREF
                              AND TPAMB = :TPAMB';

                EXECUTE IMMEDIATE queSql INTO P_SEQUENCIA_OLD USING P_CODEMP, P_DTREF_OLD, P_TPAMB;
            ELSE
                P_SEQUENCIA_OLD := P_SEQUENCIA_NEW;
            END IF;
        ELSE
            P_SEQUENCIA_OLD := P_SEQUENCIA_NEW;
            P_DTREF_OLD := P_DTREF;
        END IF;
        
        IF EVE.GRUPO = 'M' THEN  /*MOVIMENTOS GRAVAM OS EVENTOS FILHOS PRIMEIRO*/     
            FOR EVEF IN (SELECT NOMEEVENTO, NOMETAB
                         FROM TRIMON
                         WHERE NOMETABPAI = EVE.NOMETAB
                         GROUP BY NOMEEVENTO, NOMETAB
                         ORDER BY NOMEEVENTO 
                        ) 
            LOOP
                SNK_PROCESSA_DADOS_REINF(P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_ATUAL, P_TIPDADOS, EVEF.NOMEEVENTO, EVEF.NOMETAB, P_SEQUENCIA_NEW, P_RESULT);
            END LOOP;
        END IF;

        IF EVE.NOMETABPAI IS NULL THEN
            DELETE FROM TRIVAR; 
            SNK_VERIF_ALTER_REINF(P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW, NULL /*NOME TAB PAI*/, EVE.NOMETAB, EVE.NOMEVIEW, EVE.GRUPO, EVE.VIEWDETALHE);
        END IF;

        P_INSERT_COLUMNS := ' ' || SNK_GET_COLUMNS_TABLE(EVE.NOMETAB, ' ');
        P_INSERT_VALUES  := P_INSERT_COLUMNS;

        P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' CODEMP', TO_CHAR (P_CODEMP)|| ' AS CODEMP');

        P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' DTREF', ' TO_DATE(SNK_FORMAT_DATE('''||P_DTREF||''', ''DD/MM/YYYY''), ''DD/MM/YYYY'') AS DTREF');

        P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' TPAMB', ' '''||P_TPAMB||''' AS TPAMB');

        P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' SEQUENCIA', ' ' ||TO_CHAR (P_SEQUENCIA_NEW)|| ' AS SEQUENCIA');

        IF EVE.NOMETABPAI IS NULL THEN
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' STATUSREG', ' CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E''  THEN ''F'' ' 
                                                              ||             'ELSE ''P'' ' 
                                                              ||        'END AS STATUSREG');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' TIPO', ' CASE WHEN ( (DADOS.NRO_RECIBO_OLD IS NULL AND DADOS.NRO_RECIBOANT_OLD IS NULL) OR '
                                                              ||               '(DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD = ''E'') )THEN ''I'' ' 
                                                              ||        'WHEN DADOS.STATUS_REG_OLD = ''F'' AND DADOS.CONTROLE_OLD <> ''I'' THEN DADOS.CONTROLE_OLD ' 
                                                              ||        'ELSE DADOS.TIPO_OLD ' 
                                                              ||   'END AS TIPO');

            IF EVE.GRUPO = 'C' THEN
                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' INIVALIDNOVO', ' CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E'' THEN DADOS.INI_VALIDNOVO_OLD '
                                                              ||                    'ELSE NULL '
                                                              ||               'END AS INIVALIDNOVO');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' FIMVALIDNOVO', ' CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E'' THEN DADOS.FIM_VALIDNOVO_OLD '
                                                              ||                    'ELSE NULL '
                                                              ||               'END AS FIMVALIDNOVO');
            END IF;

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' NRORECIBO,', ' CASE WHEN DADOS.CHAVE_OLD IS NOT NULL AND DADOS.CONTROLE_OLD = ''I'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E'' THEN DADOS.NRO_RECIBO_OLD '
                                                              ||              'ELSE NULL ' 
                                                              ||         'END AS NRORECIBO,');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' NRORECIBOANT,', ' CASE WHEN DADOS.CHAVE_OLD IS NOT NULL AND DADOS.CONTROLE_OLD = ''I'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E'' THEN DADOS.NRO_RECIBOANT_OLD ' 
                                                              ||                 'WHEN DADOS.CHAVE_OLD IS NOT NULL AND DADOS.CONTROLE_OLD = ''A'' AND DADOS.STATUS_REG_OLD = ''F'' THEN DADOS.NRO_RECIBO_OLD '
                                                              ||                 'ELSE NULL '
                                                              ||            'END AS NRORECIBOANT,');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' IDEVENTO', ' CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E'' THEN ID_EVENTO_OLD ' 
                                                              ||            'ELSE NULL '
                                                              ||       'END AS IDEEVENTO');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' CONTROLE', ' ''I'' AS CONTROLE');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' MSG', ' CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E'' THEN DADOS.MENSAGEM_OLD '
                                                              ||       'ELSE NULL '
                                                              ||  'END AS MSG');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' XMLEVENTO', ' CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E'' THEN DADOS.XML_EVENTO_OLD '
                                                              ||             'ELSE NULL '
                                                              ||        'END AS XMLEVENTO');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' XMLRETORNO', ' CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E'' THEN DADOS.XML_RETORNO_OLD '
                                                              ||              'ELSE NULL '
                                                              ||         'END AS XMLRETORNO');

            queSql :=                    'INSERT INTO '||EVE.NOMETAB||' ' 
                                      || 'SELECT '||P_INSERT_VALUES||' '     
                                      || 'FROM (SELECT '
                                      ||          'NVL(ANT.CONTROLE, '' '') AS CONTROLE_OLD ' 
                                      ||        ', ANT.NRORECIBO AS NRO_RECIBO_OLD '
                                      ||        ', ANT.NRORECIBOANT AS NRO_RECIBOANT_OLD '
                                      ||        ', ANT.TIPO AS TIPO_OLD '
                                      ||        ', ANT.CHAVE AS CHAVE_OLD ';

            IF EVE.GRUPO = 'C' THEN  
                queSql := queSql      ||        ', ANT.INIVALIDNOVO AS INI_VALIDNOVO_OLD '
                                      ||        ', ANT.FIMVALIDNOVO AS FIM_VALIDNOVO_OLD ';
            END IF;

            queSql := queSql          ||        ', ANT.STATUSREG AS STATUS_REG_OLD '
                                      ||        ', ANT.IDEVENTO AS ID_EVENTO_OLD '
                                      ||        ', ANT.MSG AS MENSAGEM_OLD '
                                      ||        ', ANT.XMLEVENTO AS XML_EVENTO_OLD '
                                      ||        ', ANT.XMLRETORNO AS XML_RETORNO_OLD '
                                      ||        ', V.* '
                                      ||       'FROM '||EVE.NOMEVIEW||' V '
                                      ||           'LEFT JOIN (SELECT '
                                      ||                         'OLD.CHAVE '
                                      ||                       ', OLD.CONTROLE '
                                      ||                       ', NRORECIBO '
                                      ||                       ', NRORECIBOANT '
                                      ||                       ', TIPO ';

            IF EVE.GRUPO = 'C' THEN
                queSql := queSql      ||                       ', INIVALIDNOVO '
                                      ||                       ', FIMVALIDNOVO ';
            END IF;

            queSql := queSql          ||                       ', STATUSREG '
                                      ||                       ', IDEVENTO '
                                      ||                       ', MSG '
                                      ||                       ', XMLEVENTO '
                                      ||                       ', XMLRETORNO '
                                      ||                      'FROM '||EVE.NOMETAB||' OLD '
                                      ||                      '  LEFT JOIN TRIVAR VAR ON VAR.CHAVE = OLD.CHAVE AND VAR.DTREF = OLD.DTREF AND VAR.SEQUENCIA = OLD.SEQUENCIA '
                                      ||                      'WHERE OLD.CODEMP = :CODEMP '
                                      ||                         'AND OLD.TPAMB = :TPAMB '
                                      ||                         'AND (VAR.CHAVE IS NOT NULL OR '
                                      ||                         '       (NOT EXISTS(SELECT 1 '
                                      ||                                            'FROM TRIVAR V '
                                      ||                                            'WHERE CHAVE = OLD.CHAVE) AND OLD.DTREF = :DTREF_OLD AND OLD.SEQUENCIA = :SEQUENCIA_OLD)) '
                                      ||                         ') ANT ON ANT.CHAVE = V.CHAVE '
                                      ||       'WHERE V.CODEMP = :CODEMP ';

            IF EVE.GRUPO = 'C' THEN
                queSql := queSql      ||          'AND :GRUPO = ''C'' ' 
                                      ||          'AND :DTREF BETWEEN V.INIVALID AND NVL(V.FIMVALID, :DTREF) '
                                      ||       ') DADOS ';

                EXECUTE IMMEDIATE queSql USING P_CODEMP, P_TPAMB, P_DTREF_OLD, P_SEQUENCIA_OLD, P_CODEMP, EVE.GRUPO, P_DTREF, P_DTREF;
            ELSE
                IF EVE.VIEWDETALHE = 'S' THEN /*A VIEW QUE É DETALHADA NÃO PRECISA PASSAR OS DADOS 'TPAMB' E 'SEQUENCIA' COMO PARAMETROS*/
                    queSql := queSql  ||          'AND DTREF = :DTREF ' 
                                      ||       ') DADOS';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_TPAMB, P_DTREF_OLD, P_SEQUENCIA_OLD, P_CODEMP, P_DTREF;
                ELSE
                    queSql := queSql  ||          'AND DTREF = :DTREF ' 
                                      ||          'AND TPAMB = :TPAMB '
                                      ||          'AND SEQUENCIA = :SEQUENCIA '
                                      ||       ') DADOS';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_TPAMB, P_DTREF_OLD, P_SEQUENCIA_OLD, P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW;
                END IF; 
            END IF;
        ELSE
            /*SÓ ENTRA AQUI PARA OS FILHOS*/
            queSql :=                    'INSERT INTO '||EVE.NOMETAB||' '
                                      || 'SELECT '||P_INSERT_VALUES||' '
                                      || 'FROM '||EVE.NOMEVIEW||' '
                                      || 'WHERE CODEMP = :CODEMP ';

            IF EVE.GRUPO = 'C' THEN
                queSql :=  queSql     ||    'AND :GRUPO = ''C'' ';

                EXECUTE IMMEDIATE queSql USING P_CODEMP, EVE.GRUPO;
            ELSE
                IF EVE.VIEWDETALHE = 'S' THEN /*A VIEW QUE É DETALHADA NÃO PRECISA PASSAR OS DADOS 'TPAMB' E 'SEQUENCIA' COMO PARAMETROS*/
                    queSql :=  queSql ||    'AND DTREF = :DTREF ';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF;
                ELSE
                    queSql :=  queSql ||    'AND DTREF = :DTREF ' 
                                      ||    'AND TPAMB = :TPAMB '
                                      ||    'AND SEQUENCIA = :SEQUENCIA ';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW;
                END IF; 
            END IF;
        END IF;

        /*UTILIZADO QUANDO O INSERT NÃO FOI FEITO POR CONTA DE EXCLUSÃO, ASSIM PRECISAMOS CRIAR UMA NOVA LINHA PARA SE FAZER A EXCLUSÃO*/
        IF P_DTREF <> P_DTREF_OLD  OR P_SEQUENCIA_NEW <> P_SEQUENCIA_OLD THEN
            P_INSERT_COLUMNS := SNK_GET_COLUMNS_TABLE(EVE.NOMETAB, ' ');
            P_INSERT_VALUES := P_INSERT_COLUMNS; 

            P_INSERT_VALUES := REPLACE(P_INSERT_VALUES, ' ', '');
            P_INSERT_VALUES := 'O.'||REPLACE(P_INSERT_VALUES, ',', ',O.');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.CODEMP,', 'O.CODEMP,');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.DTREF,', ':DTREF,');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.TPAMB,', 'O.TPAMB,');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.SEQUENCIA,', ':SEQUENCIA,');

            IF EVE.NOMETABPAI IS NULL THEN
                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.STATUSREG,', '''P'',');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.TIPO,', '''E'',');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.NRORECIBO,', 'NULL,');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.NRORECIBOANT,', 'O.NRORECIBO,');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.IDEVENTO,', 'NULL,');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.CONTROLE,', '''I'',');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.MSG,', 'NULL,');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.XMLEVENTO,', 'NULL,');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.XMLRETORNO', 'NULL');

                P_FILTRO_MERGE := ' AND ( (STATUSREG = ''F'' AND NRORECIBO IS NOT NULL AND TIPO <> ''E'') OR '||
                                         '(STATUSREG <> ''F'' AND TIPO = ''E'' AND NRORECIBO IS NULL) OR '||
                                         '(STATUSREG <> ''F'' AND TIPO <> ''E'' AND NRORECIBOANT IS NOT NULL) '||
                                        ')';
            ELSE
                P_FILTRO_MERGE := ' AND EXISTS(SELECT 1 '||
                                              'FROM '||EVE.NOMETABPAI||' P '||
                                              'WHERE P.CODEMP = '||EVE.NOMETAB||'.CODEMP '||
                                                  'AND P.DTREF = :DTREF '||
                                                  'AND P.TPAMB = '||EVE.NOMETAB||'.TPAMB '||
                                                  'AND P.SEQUENCIA = :SEQUENCIA ' ||
                                                  'AND P.CHAVE = '||EVE.NOMETAB||'.CHAVE '||
                                                  'AND P.TIPO = ''E'') ';
            END IF; 

            queSql :=      'MERGE INTO '||EVE.NOMETAB||' N '
                        || 'USING (SELECT '||P_INSERT_COLUMNS||' '
                        ||        'FROM '||EVE.NOMETAB||' ' 
                        ||        'WHERE CODEMP = :CODEMP '
                        ||            'AND DTREF = :DTREF_OLD '
                        ||            'AND TPAMB = :TPAMB '
                        ||            'AND SEQUENCIA = :SEQUENCIA_OLD '
                        ||            P_FILTRO_MERGE
                        ||        ') O ' 
                        || 'ON (N.CODEMP = O.CODEMP '
                        || 'AND N.DTREF = :DTREF '
                        || 'AND N.TPAMB = O.TPAMB '
                        || 'AND N.SEQUENCIA = :SEQUENCIA ' 
                        || 'AND N.CHAVE = O.CHAVE )'
                        || 'WHEN NOT MATCHED THEN INSERT ('||P_INSERT_COLUMNS||') '
                        || 'VALUES ('||P_INSERT_VALUES||')';

            IF EVE.NOMETABPAI IS NULL THEN
                EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF_OLD, P_TPAMB, P_SEQUENCIA_OLD, P_DTREF, P_SEQUENCIA_NEW, P_DTREF, P_SEQUENCIA_NEW;
            ELSE 
                EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF_OLD, P_TPAMB, P_SEQUENCIA_OLD, P_DTREF, P_SEQUENCIA_NEW, P_DTREF, P_SEQUENCIA_NEW, P_DTREF, P_SEQUENCIA_NEW;
            END IF;
        END IF;

        IF EVE.GRUPO = 'C' THEN  /*MOVIMENTOS GRAVAM OS EVENTOS FILHOS PRIMEIRO*/     
            FOR EVEF IN (SELECT NOMEEVENTO, NOMETAB
                         FROM TRIMON
                         WHERE NOMETABPAI = EVE.NOMETAB
                         GROUP BY NOMEEVENTO, NOMETAB
                         ORDER BY NOMEEVENTO 
                        ) 
            LOOP
                SNK_PROCESSA_DADOS_REINF(P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_ATUAL, P_TIPDADOS, EVEF.NOMEEVENTO, EVEF.NOMETAB, P_SEQUENCIA_NEW, P_RESULT);
            END LOOP;
        END IF;

        P_RESULT := P_SEQUENCIA_NEW;
    END LOOP;

    /*CHAMANDO A TOTALIZAÇÃO DO RESUMO PARA A SEQUENCIA GERADA*/
    IF P_NOMETAB IS NULL THEN
        SNK_TOTALIZA_RESUMO_REINF(P_CODEMP, P_DTREF, P_TPAMB, P_RESULT);
    END IF;    
EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    IF queSql IS NOT NULL THEN
        SELECT COUNT(1) INTO P_COUNT
        FROM LOGREINF
        WHERE DTOCOR = SYSDATE
         AND CODUSU = STP_GET_CODUSULOGADO();
        IF P_COUNT = 0 THEN
            INSERT INTO LOGREINF(DTOCOR, CODUSU, SQLERR)
                SELECT SYSDATE, STP_GET_CODUSULOGADO(), queSql FROM DUAL; 
        END IF;
    END IF;
    COMMIT;
    RAISE_APPLICATION_ERROR(-20101, SQLERRM);
END;
/
 
 
 
/*
Requer    : 4210011
Conexao   : ORCL
Data      : 07/05/2018 17:12:41
Num.Script: 55046-0-1000
Nro. O.S. : 1181045
Nome      : INSERE - THOOBJ - 5504500
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_PROCESSA_DADOS_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210012
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_PROCESSA_DADOS_REINF' NOMEOBJ, 55045 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, 'ec27a5510150bb2e57b96838af3a739a' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_PROCESSA_DADOS_REINF' and THO.hashcode = 'ec27a5510150bb2e57b96838af3a739a')
/
 
 
 
/*
Requer    : 4210011
Conexao   : ORCL
Data      : 08/05/2018 16:58:55
Num.Script: 55083-0-0
Nro. O.S. : 1179221
Nome      : Alterar - CODPARCGRUECONOMICO 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - CODPARCGRUECONOMICO 
NomeObjeto: CODPARCGRUECONOMICO 
TipoObjeto: COLUMN
NomeTabela: TGFPAR
Executar  : SE_EXISTIR
Ocorrencia: 4210012
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFPAR MODIFY CODPARCGRUECONOMICO NUMBER(10)
/
 
 
 
/*
Requer    : 4210011
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 55121-0-0
Nro. O.S. : 1148508
Nome      : Dropar - CHK_SITUACAO_EVTFILAREINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - CHK_SITUACAO_EVTFILAREINF
NomeObjeto: CHK_SITUACAO_EVTFILAREINF
TipoObjeto: CONSTRAINT
NomeTabela: EVTFILAREINF 
Executar  : SE_EXISTIR
Ocorrencia: 4210012
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE EVTFILAREINF DROP CONSTRAINT CHK_SITUACAO_EVTFILAREINF
/
 
 
 
/*
Requer    : 4210011
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 55122-0-0
Nro. O.S. : 1148508
Nome      : Criar - CHK_SITUACAO_EVTFILAREINF 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - CHK_SITUACAO_EVTFILAREINF 
NomeObjeto: CHK_SITUACAO_EVTFILAREINF 
TipoObjeto: CONSTRAINT
NomeTabela: EVTFILAREINF 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210012
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE EVTFILAREINF ADD CONSTRAINT CHK_SITUACAO_EVTFILAREINF CHECK (SITUACAO IN ('P', 'I', 'E', 'F', 'T', 'A', 'V', 'C', 'X'))
/
 
 
 
/*
Requer    : 4210011
Conexao   : ORCL
Data      : 11/05/2018 11:47:16
Num.Script: 55146-0-0
Nro. O.S. : 1182351
Nome      : Alterar - VGF_EVENTO_S2399_BASE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VGF_EVENTO_S2399_BASE
NomeObjeto: VGF_EVENTO_S2399_BASE
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210012
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2399_BASE
  AS 
  SELECT DISTINCT
          BASE.CODEMP,
          BASE.DTREF,
          BASE.TPINSCEMPREGADOR,
          BASE.NRINSCEMPREGADOR,
          BASE.TPINSCESTABELECIMENTO,
          BASE.NRINSCESTABELECIMENTO,
          BASE.CHAVEDESLIG AS CHAVE2399,
          BASE.CPF,
          BASE.PIS,
          BASE.CODEMPFUNC,
          BASE.CODFUNC,
          BASE.CODCATEG,
          CAST(BASE.IDEDMDEV AS VARCHAR2(30)) AS IDEDMDEV,
          CAST(BASE.CODLOTACAO AS VARCHAR2(30)) AS CODLOTACAO,
          BASE.CODPARC,
          BASE.GRAUEXP,
          BASE.PERAPUR,
          BASE.INDMV,
          BASE.QTDDIASINTERM, --layout 2.4.2
          BASE.QTDDIASTRAB,
          BASE.CODSIND,
          BASE.PROCESSO,
          BASE.DSC
     FROM VGF_EVENTO_BASEFOLHA BASE
    WHERE BASE.IDEDMDEV = 'R'
      AND BASE.CODCATEG >= 701
      AND BASE.DTTERCEIRAFASE IS NOT NULL
      AND BASE.DTDEM >= BASE.DTTERCEIRAFASE /* DEMAIS EVENTOS DO S-2399 SÃ ENTRAM NA TERCEIRA FASE */
/
 
 
 
/*
Requer    : 4210011
Conexao   : ORCL
Data      : 11/05/2018 11:47:16
Num.Script: 55147-0-0
Nro. O.S. : 1182351
Nome      : Alterar - VGF_EVENTO_S2399_DMDEV_IRPA 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VGF_EVENTO_S2399_DMDEV_IRPA 
NomeObjeto: VGF_EVENTO_S2399_DMDEV_IRPA 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210012
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2399_DMDEV_IRPA /* ITENSREMUN */
AS
SELECT
  RUB.CODEMP 
, RUB.DTREF
, RUB.CHAVEDESLIG AS CHAVE2399
, RUB.IDEDMDEV
, RUB.CODLOTACAO 
, RUB.CODRUBR AS CHAVE
, CAST(RUB.CODRUBR AS VARCHAR2(30)) AS CODRUBR
, CAST(RUB.IDETABRUBR AS VARCHAR2(8)) AS IDETABRUBR
, CAST(MAX(RUB.QTDRUBR) AS FLOAT) AS QTDRUBR
, CAST(RUB.FATORRUBR AS FLOAT) AS FATORRUBR
, CAST(RUB.VRUNIT AS FLOAT) AS VRUNIT
, CAST(SUM(RUB.VRRUBR) AS FLOAT) AS VRRUBR
FROM VGF_EVENTO_BASERUBRICA RUB
WHERE RUB.IDEDMDEV = 'R'
  AND RUB.CODCATEG >= 701
  AND RUB.DTTERCEIRAFASE IS NOT NULL
  AND RUB.DTDEM >= RUB.DTTERCEIRAFASE /*TAGS DO S-2399 SÃ ENTRAM NA TERCEIRA FASE */
GROUP BY
  RUB.CODEMP
, RUB.DTREF
, RUB.CHAVEDESLIG
, RUB.IDEDMDEV
, RUB.CODLOTACAO
, RUB.CODRUBR
, RUB.IDETABRUBR
, RUB.FATORRUBR
, RUB.VRUNIT
/
 
 
 
/*
Requer    : 4210011
Conexao   : ORCL
Data      : 11/05/2018 11:47:16
Num.Script: 55149-0-0
Nro. O.S. : 1182351
Nome      : Alterar - VGF_EVENTO_S2299_DMDEV_IRPADC 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VGF_EVENTO_S2299_DMDEV_IRPADC 
NomeObjeto: VGF_EVENTO_S2299_DMDEV_IRPADC 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210012
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2299_DMDEV_IRPADC /* ideADC/infoPerAnt/idePeriodo/ideEstabLo/remunPerAnt/itensRemun   */
AS
     SELECT RUB.CODEMP,
            RUB.DTREF,
            RUB.CHAVEDESLIG AS CHAVE2299,
            RUB.IDEDMDEV,
            RUB.CHAVE2299_PA_ADC,
            RUB.PERREF,
            RUB.CODLOTACAO,
            RUB.MATRICULA,
            CAST (RUB.CODRUBR AS VARCHAR2 (100)) AS CHAVE,
            CAST (RUB.CODRUBR AS VARCHAR2 (30)) AS CODRUBR,
            CAST (RUB.IDETABRUBR AS VARCHAR2 (8)) AS IDETABRUBR,
            CAST (MAX (RUB.QTDRUBR) AS FLOAT) AS QTDRUBR,
            CAST (RUB.FATORRUBR AS FLOAT) AS FATORRUBR,
            CAST (RUB.VRUNIT AS FLOAT) AS VRUNIT,
            CAST (SUM (RUB.VRRUBR) AS FLOAT) AS VRRUBR
       FROM VGF_EVENTO_BASERUBRICA_PA RUB
      WHERE GERARPARESCISAO = 'S'
        AND RUB.CODCATEG < 701
        AND RUB.DTTERCEIRAFASE IS NOT NULL
        AND RUB.DTDEM >= RUB.DTTERCEIRAFASE /* DEMAIS EVENTOS DO S-2299 SÓ ENTRAM NA TERCEIRA FASE */
   GROUP BY RUB.CODEMP,
            RUB.DTREF,
            RUB.CHAVEDESLIG,
            RUB.IDEDMDEV,
            RUB.CHAVE2299_PA_ADC,
            RUB.PERREF,
            RUB.CODLOTACAO,
            RUB.MATRICULA,
            RUB.CODRUBR,
            RUB.IDETABRUBR,
            RUB.FATORRUBR,
            RUB.VRUNIT,
            RUB.CODEMPFUNC,
            RUB.CODFUNC
/
 
 
 
/*
Requer    : 4210011
Conexao   : ORCL
Data      : 11/05/2018 11:47:16
Num.Script: 55150-0-0
Nro. O.S. : 1182351
Nome      : Alterar - VGF_EVENTO_S2299_DMDEV_IRPA 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VGF_EVENTO_S2299_DMDEV_IRPA 
NomeObjeto: VGF_EVENTO_S2299_DMDEV_IRPA 
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210012
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2299_DMDEV_IRPA /* ITENSREMUN */
AS
SELECT
  RUB.CODEMP 
, RUB.DTREF
, RUB.CHAVEDESLIG AS CHAVE2299
, RUB.IDEDMDEV
, RUB.CODLOTACAO 
, RUB.CODRUBR AS CHAVE
, CAST(RUB.CODRUBR AS VARCHAR2(30)) AS CODRUBR
, CAST(RUB.IDETABRUBR AS VARCHAR2(8)) AS IDETABRUBR
, CAST(MAX(RUB.QTDRUBR) AS FLOAT) AS QTDRUBR
, CAST(RUB.FATORRUBR AS FLOAT) AS FATORRUBR
, CAST(RUB.VRUNIT AS FLOAT) AS VRUNIT
, CAST(SUM(RUB.VRRUBR) AS FLOAT) AS VRRUBR
FROM VGF_EVENTO_BASERUBRICA RUB
WHERE RUB.IDEDMDEV = 'R'
  AND RUB.CODCATEG < 701
  AND RUB.DTTERCEIRAFASE IS NOT NULL
  AND RUB.DTDEM >= RUB.DTTERCEIRAFASE /*TAGS DO S-2299 SÓ ENTRAM NA TERCEIRA FASE */
GROUP BY
  RUB.CODEMP
, RUB.DTREF
, RUB.CHAVEDESLIG
, RUB.IDEDMDEV
, RUB.CODLOTACAO
, RUB.CODRUBR
, RUB.IDETABRUBR
, RUB.FATORRUBR
, RUB.VRUNIT
/
 
 
 
/*
Requer    : 4210011
Conexao   : ORCL
Data      : 11/05/2018 11:47:16
Num.Script: 55151-0-0
Nro. O.S. : 1182351
Nome      : Alterar - VGF_EVENTO_S2299_BASE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VGF_EVENTO_S2299_BASE
NomeObjeto: VGF_EVENTO_S2299_BASE
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210012
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2299_BASE
  AS 
  SELECT DISTINCT
          BASE.CODEMP,
          BASE.DTREF,
          BASE.TPINSCEMPREGADOR,
          BASE.NRINSCEMPREGADOR,
          BASE.TPINSCESTABELECIMENTO,
          BASE.NRINSCESTABELECIMENTO,
          BASE.CHAVEDESLIG AS CHAVE2299,
          BASE.CPF,
          BASE.PIS,
          CAST(BASE.MATRICULA AS VARCHAR2(30)) AS MATRICULA,
          BASE.CODEMPFUNC,
          BASE.CODFUNC,
          BASE.CODCATEG,
          CAST(BASE.IDEDMDEV AS VARCHAR2(30)) AS IDEDMDEV,
          CAST(BASE.CODLOTACAO AS VARCHAR2(30)) AS CODLOTACAO,
          BASE.CODPARCEMP,
          BASE.QTDDIASAV,
          BASE.CODPARC,
          BASE.GRAUEXP,
          BASE.PERAPUR,
          BASE.INDMV,
          BASE.QTDDIASINTERM, --layout 2.4.2
          BASE.QTDDIASTRAB,
          BASE.CODSIND,
          BASE.PROCESSO,
          BASE.DSC,
          BASE.CNPJEMPREGANT,
          BASE.CODCONV
     FROM VGF_EVENTO_BASEFOLHA BASE
    WHERE ((BASE.IDEDMDEV ='R') OR (BASE.GERARPARESCISAO = 'S'))
      AND BASE.CODCATEG < 701
      AND BASE.DTTERCEIRAFASE IS NOT NULL
      AND BASE.DTDEM >= BASE.DTTERCEIRAFASE /* DEMAIS EVENTOS DO S-2299 SÓ ENTRAM NA TERCEIRA FASE */
/
 
 
 
/*
Requer    : 4210011
Conexao   : ORCL
Data      : 11/05/2018 11:47:16
Num.Script: 55152-0-0
Nro. O.S. : 1182351
Nome      : Alterar - VGF_EVENTO_S2299_BASE_PA
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VGF_EVENTO_S2299_BASE_PA
NomeObjeto: VGF_EVENTO_S2299_BASE_PA
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210012
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2299_BASE_PA
AS
   SELECT DISTINCT BASE.CODEMP,
                   BASE.DTREF,
                   BASE.CHAVEDESLIG AS CHAVE2299,
                   BASE.IDEDMDEV,
                   BASE.CHAVE2299_PA_ADC,
                   BASE.DTACCONV,
                   BASE.TPACCONV,
                   BASE.COMPACCONV,
                   BASE.DTEFACCONV,
                   BASE.DSC,
                   BASE.REMUNSUC,
                   BASE.TPINSCESTABELECIMENTO,
                   BASE.NRINSCESTABELECIMENTO,
                   BASE.CODLOTACAO,
                   BASE.MATRICULA,
                   BASE.INDSIMPLES,
                   BASE.GRAUEXP,
                   BASE.CODPARC,
                   BASE.CODEMPFUNC,
                   BASE.CODFUNC,
                   BASE.CODCONV,
                   BASE.PERREF,
                   BASE.IDETABRUBR AS CODEVENTO
     FROM VGF_EVENTO_BASERUBRICA_PA BASE
    WHERE GERARPARESCISAO = 'S'
      AND BASE.CODCATEG < 701
      AND BASE.DTTERCEIRAFASE IS NOT NULL
      AND BASE.DTDEM >= BASE.DTTERCEIRAFASE /* DEMAIS EVENTOS DO S-2299 SÓ ENTRAM NA TERCEIRA FASE */
/
 
 
 
/*
Requer    : 4210011
Conexao   : ORCL
Data      : 11/05/2018 15:27:56
Num.Script: 55388-0-0
Nro. O.S. : 1180592
Nome      : Cria - TGFEMP QTDUMAPED
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: QTDUMAPED
TipoObjeto: COLUMN
NomeTabela: TGFEMP
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210012
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFEMP ADD QTDUMAPED NUMBER(5)
/
 
 
 
/*
Requer    : 4210011
Conexao   : ORCL
Data      : 11/05/2018 15:27:56
Num.Script: 55389-0-0
Nro. O.S. : 1180592
Nome      : Cria - TGWARS QTDUMAPED
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: QTDUMAPED
TipoObjeto: COLUMN
NomeTabela: TGWARS
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210012
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGWARS ADD QTDUMAPED NUMBER(5)
/
 
 
 
/*
Requer    : 4210011
Conexao   : ORCL
Data      : 15/05/2018 17:45:52
Num.Script: 55407-0-0
Nro. O.S. : 1182676
Nome      : Alterar - VGF_EVENTO_S2250
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VGF_EVENTO_S2250
NomeObjeto: VGF_EVENTO_S2250
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210012
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2250
AS
SELECT 
  VEMP.TPINSCEMPREGADOR
, VEMP.NRINSCEMPREGADOR
, CAST(FUN.CPF AS VARCHAR2(11)) AS cpfTrab
, CAST(FUN.PIS AS VARCHAR2(11)) AS nisTrab
, CAST(FUN.MATRICULA AS VARCHAR2(30))  AS matricula
, NVL(AVI.DTNOTIFICACAO, DTAVISO) AS dtAvPrv
, AVI.DTFIMAVISO AS dtPrevDeslig
,AVI.TIPAVISO
, CASE WHEN AVI.INICIATIVA = 'E' AND AVI.TIPREDUCAO = 'J' THEN 1
       WHEN AVI.INICIATIVA = 'E' AND AVI.TIPREDUCAO = 'A' AND VEMP.CLASSTRIB <> '07' THEN 2
       WHEN AVI.INICIATIVA = 'E' AND AVI.TIPREDUCAO = 'A' AND VEMP.CLASSTRIB = '07' THEN 5 
       WHEN AVI.INICIATIVA = 'F' AND AVI.TIPAVISO = 3 THEN 3 
       WHEN AVI.INICIATIVA = 'F' AND AVI.TIPAVISO = 1 THEN 4 ELSE
       CASE WHEN AVI.TIPAVISO = 1 AND AVI.TIPREDUCAO = 'J' THEN 1
            WHEN AVI.TIPAVISO = 1 AND AVI.TIPREDUCAO = 'A' THEN 2
            WHEN AVI.TIPAVISO = 2 THEN 3
            WHEN AVI.TIPAVISO = 3 THEN 4
       ELSE NULL END END AS tpAvPrevio
, AVI.OBSERVACAODET AS observacaoDet
, AVI.DTCANCEL AS dtCancAvPrv
, AVI.OBSERVACAOCANC AS OBSERVACAOCANC
, AVI.MOTIVOCANCEL AS MTVCANCAVPREVIO
, VEMP.CODEMPMATRIZ AS CODEMP
, CAST(FUN.CODEMP || ':' || FUN.CODFUNC AS VARCHAR2(100)) AS CHAVE
FROM TFPFUN FUN
, TFPAVI AVI
, VGF_EVENTO_EMPREGADOR VEMP
WHERE AVI.CODEMP = FUN.CODEMP
AND AVI.CODFUNC = FUN.CODFUNC
AND VEMP.CODEMP = FUN.CODEMP
AND FUN.CODCATEGESOCIAL IN (101,102,103,104,105,106)
AND NVL(AVI.DTNOTIFICACAO, AVI.DTAVISO) >= VEMP.DTCARGAINICIAL
AND VEMP.DTCARGAINICIAL IS NOT NULL
AND TIPAVISO = 1
/
 
 
 
/*
Requer    : 4210011
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 55431-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIINFST VLRCRTOM
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRCRTOM
TipoObjeto: COLUMN
NomeTabela: TRIINFST
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210012
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIINFST ADD VLRCRTOM FLOAT
/
 
 
 
/*
Requer    : 4210011
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 55432-0-0
Nro. O.S. : 1148508
Nome      : Cria - TRIINFST VLRCRTOMSUSP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: VLRCRTOMSUSP
TipoObjeto: COLUMN
NomeTabela: TRIINFST
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210012
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TRIINFST ADD VLRCRTOMSUSP FLOAT
/
 
 
 
/*
Requer    : 4210011
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 55433-0-0
Nro. O.S. : 1148508
Nome      : Alterar - VRI_ACOMPANHAMENTO_TRANSMISSAO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VRI_ACOMPANHAMENTO_TRANSMISSAO
NomeObjeto: VRI_ACOMPANHAMENTO_TRANSMISSAO
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210012
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_ACOMPANHAMENTO_TRANSMISSAO
AS
SELECT CODEMP
     , REFERENCIA
     , TPAMB
     , SEQUENCIA
     , EVENTO
     , SUM(AGUARDEVTPRIORITARIO) AS AGUARDEVTPRIORITARIO
     , SUM(PENDENTES) AS PENDENTES
     , SUM(ENVIADOS) AS ENVIADOS
     , SUM(AGUARDCORRECAO) AS AGUARDCORRECAO
     , SUM(ERROEVTPRIORITARIO) AS ERROEVTPRIORITARIO
     , SUM(FINALIZADO) AS FINALIZADO
     , COUNT(1) AS TOTAL
FROM (
    SELECT FILA.CODEMP
         , FILA.REFERENCIA
         , CAST(FILA.TPAMB AS VARCHAR2(1)) AS TPAMB
         , FILA.SEQUENCIA
         , FILA.TIPOEVENTO AS EVENTO
		 , CASE WHEN (EVT.GRUPO = 'C' AND FILA.ACAO <> 'E') OR FILA.SITUACAO <> 'P' OR EVT.GRUPO IN ('R', 'F') THEN 0
                WHEN FILA.SITUACAO = 'P' AND EXISTS(SELECT 1
                                                     FROM EVTFILAREINF F
                                                         INNER JOIN TRIEVT E ON E.TIPOEVENTO = F.TIPOEVENTO
                                                     WHERE F.CODEMP = FILA.CODEMP
                                                        AND F.REFERENCIA = FILA.REFERENCIA
                                                        AND F.TPAMB = FILA.TPAMB
                                                        AND F.SEQUENCIA = FILA.SEQUENCIA
                                                        AND ((EVT.GRUPO <> 'C' AND E.GRUPO = 'C' AND F.ACAO <> 'E') OR (EVT.GRUPO = 'C' AND FILA.ACAO = 'E' AND E.GRUPO <> 'C'))
                                                        AND F.SITUACAO NOT IN ('F', 'E', 'X')) THEN 1
                ELSE 0
           END AS AGUARDEVTPRIORITARIO
         , CASE WHEN (EVT.GRUPO = 'C' AND FILA.ACAO <> 'E' AND FILA.SITUACAO = 'P') OR 
                     (FILA.SITUACAO = 'P' AND EVT.GRUPO IN ('R', 'F')) OR
                     (FILA.SITUACAO = 'P' AND NOT EXISTS(SELECT 1
                                                          FROM EVTFILAREINF F
                                                             INNER JOIN TRIEVT E ON E.TIPOEVENTO = F.TIPOEVENTO
                                                          WHERE F.CODEMP = FILA.CODEMP
                                                             AND F.REFERENCIA = FILA.REFERENCIA
                                                             AND F.TPAMB = FILA.TPAMB
                                                             AND F.SEQUENCIA = FILA.SEQUENCIA
                                                             AND ((EVT.GRUPO <> 'C' AND E.GRUPO = 'C' AND F.ACAO <> 'E') OR (EVT.GRUPO = 'C' AND FILA.ACAO = 'E' AND E.GRUPO <> 'C'))
                                                             AND F.SITUACAO NOT IN ('F', 'E', 'X'))) THEN 1
                ELSE 0
           END AS PENDENTES
         , CASE WHEN FILA.SITUACAO IN ('I', 'T') THEN 1 
                ELSE 0 
           END AS ENVIADOS
         , CASE WHEN FILA.SITUACAO IN ('E', 'V', 'L', 'R') THEN 1 
                ELSE 0 
           END AS AGUARDCORRECAO
         , CASE WHEN FILA.SITUACAO = 'X' THEN 1 
                ELSE 0 
           END AS ERROEVTPRIORITARIO
         , CASE WHEN FILA.SITUACAO = 'F' THEN 1 
                ELSE 0 
           END AS FINALIZADO
    FROM EVTFILAREINF FILA
        INNER JOIN TRIEVT EVT ON EVT.TIPOEVENTO = FILA.TIPOEVENTO
    WHERE EXISTS(SELECT *
                 FROM EVTFILAREINF F
                 WHERE F.CODEMP = FILA.CODEMP
                   AND F.DHINC = FILA.DHINC
                   AND F.SEQEVENTO = FILA.SEQEVENTO
                   AND ((F.TIPOEVENTO IN ('R2098', 'R2099') AND F.DHINC = (SELECT MAX(DHINC)
                                                                           FROM EVTFILAREINF MDH
                                                                           WHERE MDH.CODEMP = F.CODEMP
                                                                             AND MDH.REFERENCIA = F.REFERENCIA
                                                                             AND MDH.TPAMB = F.TPAMB
                                                                             AND MDH.SEQUENCIA = F.SEQUENCIA
                                                                             AND MDH.TIPOEVENTO = F.TIPOEVENTO  
                                                                           )) OR 
                        (F.TIPOEVENTO NOT IN ('R2098', 'R2099'))               
                       )
                 )
) TAB
GROUP BY TAB.CODEMP
       , TAB.REFERENCIA
       , TAB.TPAMB
       , TAB.SEQUENCIA
       , TAB.EVENTO
/
 
 
 
/*
Requer    : 4210011
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 55434-0-0
Nro. O.S. : 1148508
Nome      : Alterar - VRI_EVT_R2010_NFS_INFOTPSERV
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VRI_EVT_R2010_NFS_INFOTPSERV
NomeObjeto: VRI_EVT_R2010_NFS_INFOTPSERV
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210012
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2010_NFS_INFOTPSERV
AS
SELECT 
 TABX.CODEMP
,TABX.DTREF
,TABX.CHAVE
,TABX.NUNOTA
,TABX.TPSERVICO
,TABX.TIPODOCUMENTO
,TABX.TPINSC
,TABX.NRINSC
,TABX.TPINSCESTAB
,TABX.NRINSCESTAB
,TABX.INDOBRA
,TABX.CNPJPRESTADOR
,TABX.INDCPRB
,(TABX.VLRNRETADIC15 + TABX.VLRNRETADIC20 + TABX.VLRNRETADIC25) AS VLRNRETADIC
,TABX.VLRTOTALBRUTO 
,TABX.VLRBASERET
,TABX.VLRRETENCAO
,TABX.VLRRETSUB
,TABX.VLRNRETPRINC
,TABX.VLRSERVICOS15
,TABX.VLRSERVICOS20
,TABX.VLRSERVICOS25
,TABX.VLRADICIONAL
,TABX.NUPROCESSO_INSS_PRINC
,TABX.SEQPROCESSO_INSS_PRINC
,TABX.NUPROCESSO_INSS_15
,TABX.SEQPROCESSO_INSS_15
,TABX.VLRNRETADIC15
,TABX.NUPROCESSO_INSS_20
,TABX.SEQPROCESSO_INSS_20
,TABX.VLRNRETADIC20
,TABX.NUPROCESSO_INSS_25
,TABX.SEQPROCESSO_INSS_25
,TABX.VLRNRETADIC25
,TABX.VLRCRTOM
,TABX.VLRCRTOMSUSP
FROM (
	SELECT
	 TAB.CODEMP
	,TAB.DTREF
	,TAB.TPINSC||','||TAB.NRINSC||','||TAB.TPINSCESTAB||','||TAB.NRINSCESTAB||','||TAB.INDOBRA||','||TAB.CNPJPRESTADOR||','||TAB.INDCPRB AS CHAVE
	,TAB.NUDOCUMENTO AS NUNOTA
	,TAB.TPSERVICO
	,TAB.TIPODOCUMENTO
	,TAB.TPINSC
	,TAB.NRINSC
	,TAB.TPINSCESTAB
	,TAB.NRINSCESTAB
	,TAB.INDOBRA
	,TAB.CNPJPRESTADOR
	,TAB.INDCPRB
	,TRUNC(SUM(TAB.VLRTOTALBRUTO), 2) AS VLRTOTALBRUTO 
	,TRUNC(SUM(TAB.VLRBASERET), 2) AS VLRBASERET
	,TRUNC(SUM(TAB.VLRRETENCAO), 2) AS VLRRETENCAO
	,TRUNC(SUM(TAB.VLRRETSUB), 2) AS VLRRETSUB
	,TRUNC(SUM(TAB.VLRRETENCAO * NVL(ISET_INSS_PRINC.PERCSUSPIMP, 0) / 100), 2) AS VLRNRETPRINC
	,TRUNC(SUM(TAB.VLRSERVICOS15), 2) AS VLRSERVICOS15
	,TRUNC(SUM(TAB.VLRSERVICOS20), 2) AS VLRSERVICOS20
	,TRUNC(SUM(TAB.VLRSERVICOS25), 2) AS VLRSERVICOS25
	,TRUNC(SUM(TAB.VLRADICIONAL), 2) AS VLRADICIONAL
	,MAX(TAB.NUPROCESSO_INSS_PRINC) AS NUPROCESSO_INSS_PRINC
	,MAX(TAB.SEQPROCESSO_INSS_PRINC) AS SEQPROCESSO_INSS_PRINC
	,MAX(TAB.NUPROCESSO_INSS_15) AS NUPROCESSO_INSS_15
	,MAX(TAB.SEQPROCESSO_INSS_15) AS SEQPROCESSO_INSS_15
	,TRUNC(SUM(CASE WHEN TAB.VLRSERVICOS15 > 0 THEN TAB.VLRADICIONAL * NVL(ISET_INSS_15.PERCSUSPIMP, 0) / 100 ELSE 0 END), 2) AS VLRNRETADIC15
	,MAX(TAB.NUPROCESSO_INSS_20) AS NUPROCESSO_INSS_20
	,MAX(TAB.SEQPROCESSO_INSS_20) AS SEQPROCESSO_INSS_20
	,TRUNC(SUM(CASE WHEN TAB.VLRSERVICOS20 > 0 THEN TAB.VLRADICIONAL * NVL(ISET_INSS_20.PERCSUSPIMP, 0) / 100 ELSE 0 END), 2) AS VLRNRETADIC20
	,MAX(TAB.NUPROCESSO_INSS_25) AS NUPROCESSO_INSS_25
	,MAX(TAB.SEQPROCESSO_INSS_25) AS SEQPROCESSO_INSS_25
	,TRUNC(SUM(CASE WHEN TAB.VLRSERVICOS25 > 0 THEN TAB.VLRADICIONAL * NVL(ISET_INSS_25.PERCSUSPIMP, 0) / 100 ELSE 0 END), 2) AS VLRNRETADIC25
	,TRUNC(SUM(VLRCRTOM), 2) AS VLRCRTOM
	,TRUNC(SUM(VLRCRTOMSUSP), 2) AS VLRCRTOMSUSP
	FROM (
		/*BUSCA PELAS NOTAS DE SERVIÇOS TOMADOS*/
		SELECT 
		 CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMP.CODEMP
			  WHEN NVL(EMP.CODEMPMATRIZEFD, 0) > 0 THEN EMP.CODEMPMATRIZEFD
			  ELSE EMP.CODEMP 
		 END AS CODEMP
		,TRUNC(CAB.DTNEG, 'MM') AS DTREF
		,CASE WHEN LENGTH(EMPC.CGC) = 14 
			  THEN '1' 
			  ELSE '2' 
		 END AS TPINSC
		,CASE WHEN LENGTH(EMPC.CGC) = 14 
			  THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
						THEN EMPC.CGC
						ELSE SUBSTR(EMPC.CGC,1,8)
				   END
			  ELSE EMPC.CGC
		 END AS NRINSC
		,ITE.NUNOTA AS NUDOCUMENTO
		,'N' AS TIPODOCUMENTO
		,CASE WHEN CAB.CODOBRA IS NOT NULL THEN 4 ELSE 1 END AS TPINSCESTAB
		,CASE WHEN CAB.CODOBRA IS NOT NULL THEN CAB.CODOBRA ELSE EMPC.CGC END AS NRINSCESTAB
		,CASE WHEN PRO.OBRACONSTCIVIL IS NULL THEN 0 ELSE PRO.OBRACONSTCIVIL END AS INDOBRA
		,PAR.CGC_CPF AS CNPJPRESTADOR
		,CASE WHEN NVL(DIN.ALIQUOTA, IMN.ALIQUOTA) = 11 THEN 0 ELSE 1 END AS INDCPRB
		,PRO.CLASSIFCESSAOOBRA AS TPSERVICO
		,ITE.VLRTOT AS VLRTOTALBRUTO
		,NVL(DIN.BASERED, IMN.BASE) AS VLRBASERET
		,CASE WHEN DIN.NUNOTA IS NOT NULL THEN CASE WHEN NVL(DIN.TIPOINSSESPECIAL, ' ') <> ' ' THEN NVL(DIN.VALOR, 0) - NVL(DIN.VLRINSSESPECIAL, 0) ELSE NVL(DIN.VALOR, 0) END
			  ELSE CASE WHEN NVL(IMN.TIPOINSSESPECIAL, ' ') <> ' ' THEN NVL(IMN.VALOR, 0) - NVL(IMN.VLRINSSESPECIAL, 0) ELSE NVL(IMN.VALOR, 0) END END AS VLRRETENCAO
		,0 AS VLRRETSUB /*POR ENQUANTO NÃO VAMOS GERAR ESSA TAG*/
		,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, ' ') = '1' AND NVL(DIN.VLRINSSESPECIAL, 0) > 0 OR
				   NVL(IMN.TIPOINSSESPECIAL, ' ') = '1' AND NVL(IMN.VLRINSSESPECIAL, 0) > 0 THEN NVL(DIN.BASERED, IMN.BASE) ELSE 0 END AS VLRSERVICOS15
		,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, ' ') = '2' AND NVL(DIN.VLRINSSESPECIAL, 0) > 0 OR
				   NVL(IMN.TIPOINSSESPECIAL, ' ') = '2' AND NVL(IMN.VLRINSSESPECIAL, 0) > 0 THEN NVL(DIN.BASERED, IMN.BASE) ELSE 0 END AS VLRSERVICOS20
		,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, ' ') = '3' AND NVL(DIN.VLRINSSESPECIAL, 0) > 0 OR
				   NVL(IMN.TIPOINSSESPECIAL, ' ') = '3' AND NVL(IMN.VLRINSSESPECIAL, 0) > 0 THEN NVL(DIN.BASERED, IMN.BASE) ELSE 0 END AS VLRSERVICOS25
		,NVL(DIN.VLRINSSESPECIAL, NVL(IMN.VLRINSSESPECIAL, 0)) AS VLRADICIONAL
		,SNK_GET_IDPROCESSO_IMP_EFD(1, 
									EMP.CODEMP, 
									PAR.CODPARC, 
									ITE.CODPROD, 
									PRO.CODLST, 
									CAB.DTNEG) AS NUPROCESSO_INSS_PRINC
		,SNK_GET_IDPROCESSO_IMP_EFD(1, 
									EMP.CODEMP, 
									PAR.CODPARC, 
									ITE.CODPROD, 
									PRO.CODLST, 
									CAB.DTNEG,
									'S') AS SEQPROCESSO_INSS_PRINC
		,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, IMN.TIPOINSSESPECIAL) = '1' THEN SNK_GET_IDPROCESSO_IMP_EFD(9, 
																										 EMP.CODEMP, 
																										 PAR.CODPARC, 
																										 ITE.CODPROD, 
																										 PRO.CODLST, 
																										 CAB.DTNEG)
			  ELSE NULL END AS NUPROCESSO_INSS_15
		,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, IMN.TIPOINSSESPECIAL) = '1' THEN SNK_GET_IDPROCESSO_IMP_EFD(9, 
																										 EMP.CODEMP, 
																										 PAR.CODPARC, 
																										 ITE.CODPROD, 
																										 PRO.CODLST, 
																										 CAB.DTNEG,
																										 'S')
			  ELSE NULL END AS SEQPROCESSO_INSS_15
		,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, IMN.TIPOINSSESPECIAL) = '2' THEN SNK_GET_IDPROCESSO_IMP_EFD(10, 
																										 EMP.CODEMP, 
																										 PAR.CODPARC, 
																										 ITE.CODPROD, 
																										 PRO.CODLST, 
																										 CAB.DTNEG)
			  ELSE NULL END AS NUPROCESSO_INSS_20
		,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, IMN.TIPOINSSESPECIAL) = '2' THEN SNK_GET_IDPROCESSO_IMP_EFD(10, 
																										 EMP.CODEMP, 
																										 PAR.CODPARC, 
																										 ITE.CODPROD, 
																										 PRO.CODLST, 
																										 CAB.DTNEG,
																										 'S')
			  ELSE NULL END AS SEQPROCESSO_INSS_20
		,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, IMN.TIPOINSSESPECIAL) = '3' THEN SNK_GET_IDPROCESSO_IMP_EFD(11, 
																										 EMP.CODEMP, 
																										 PAR.CODPARC, 
																										 ITE.CODPROD, 
																										 PRO.CODLST, 
																										 CAB.DTNEG)
			  ELSE NULL END AS NUPROCESSO_INSS_25
		,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, IMN.TIPOINSSESPECIAL) = '3' THEN SNK_GET_IDPROCESSO_IMP_EFD(11, 
																										 EMP.CODEMP, 
																										 PAR.CODPARC, 
																										 ITE.CODPROD, 
																										 PRO.CODLST, 
																										 CAB.DTNEG,
																										 'S')
			  ELSE NULL END AS SEQPROCESSO_INSS_25
		,0 AS VLRCRTOM 		/*AINDA NÃO SABEMOS QUAL A REGRA PARA ESTE CÁLCULO*/
		,0 AS VLRCRTOMSUSP	/*AINDA NÃO SABEMOS QUAL A REGRA PARA ESTE CÁLCULO*/
		FROM TGFITE ITE
			INNER JOIN TGFCAB CAB  ON CAB.NUNOTA = ITE.NUNOTA
			INNER JOIN (SELECT CODTIPOPER, DHALTER, TIPMOV, ATUALLIVISS, DESCROPER FROM TGFTOP) TPO  ON TPO.CODTIPOPER = CAB.CODTIPOPER AND TPO.DHALTER = CAB.DHTIPOPER
			INNER JOIN (SELECT CODEMP, CODEMPMATRIZEFD, EMPADMPUBDIR, ATIVO FROM TGFEMP) EMP  ON EMP.CODEMP = CAB.CODEMP
			INNER JOIN (SELECT CODEMP, RAZAOSOCIAL, NOMEFANTASIA, CGC FROM TSIEMP) EMPC ON EMPC.CODEMP = EMP.CODEMP
			INNER JOIN (SELECT CODPARC, NOMEPARC, CGC_CPF FROM TGFPAR) PAR  ON PAR.CODPARC = CAB.CODPARC
			INNER JOIN (SELECT CODPROD, OBRACONSTCIVIL, CLASSIFCESSAOOBRA, CODLST FROM TGFPRO) PRO  ON PRO.CODPROD = ITE.CODPROD
			LEFT JOIN  TGFDIN DIN  ON DIN.NUNOTA = ITE.NUNOTA AND DIN.SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 5 AND DIN.TIPO = -1 AND ((NVL(DIN.ALIQUOTA, 0) - NVL(DIN.PERCINSSESPECIAL, 0)) IN (3.5, 11))
			LEFT JOIN  TGFIMN IMN  ON IMN.NUNOTA = ITE.NUNOTA AND IMN.SEQUENCIA = ITE.SEQUENCIA AND IMN.TIPOIMPOSTO = 5 AND IMN.TIPIMP = -1 AND ((NVL(IMN.ALIQUOTA, 0) - NVL(IMN.PERCINSSESPECIAL, 0)) IN (3.5, 11))
		WHERE EMP.ATIVO = 'S'
			AND PRO.CLASSIFCESSAOOBRA IS NOT NULL
			AND ITE.USOPROD = 'S'
			AND TPO.TIPMOV = 'C'
			AND TPO.ATUALLIVISS = 'E'
			AND CAB.STATUSNOTA = 'L'
			AND (EXISTS (SELECT 1 FROM TGFDIN DIN WHERE DIN.NUNOTA = ITE.NUNOTA AND DIN.SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 5 AND DIN.TIPO = -1 AND ((NVL(DIN.ALIQUOTA, 0) - NVL(DIN.PERCINSSESPECIAL, 0)) IN (3.5, 11))) OR 
				 EXISTS (SELECT 1 FROM TGFIMN IMN WHERE IMN.NUNOTA = ITE.NUNOTA AND IMN.SEQUENCIA = ITE.SEQUENCIA AND IMN.TIPOIMPOSTO = 5 AND IMN.TIPIMP = -1 AND ((NVL(IMN.ALIQUOTA, 0) - NVL(IMN.PERCINSSESPECIAL, 0)) IN (3.5, 11))))
		UNION ALL
		/*BUSCA PELO FINANCEIROS QUE REPRESENTAM SERVIÇOS TOMADOS*/
		SELECT 
		 CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMP.CODEMP
			  WHEN NVL(EMP.CODEMPMATRIZEFD, 0) > 0 THEN EMP.CODEMPMATRIZEFD
			  ELSE EMP.CODEMP 
		 END AS CODEMP
		,TRUNC(FIN.DTNEG, 'MM') AS DTREF
		,CASE WHEN LENGTH(EMPC.CGC) = 14 
			  THEN '1' 
			  ELSE '2' 
		 END AS TPINSC
		,CASE WHEN LENGTH(EMPC.CGC) = 14 
			  THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
						THEN EMPC.CGC
						ELSE SUBSTR(EMPC.CGC,1,8)
				   END
			  ELSE EMPC.CGC
		 END AS NRINSC
		,FIN.NUFIN AS NUDOCUMENTO
		,'F' AS TIPODOCUMENTO
		,CASE WHEN FIN.CODOBRA IS NOT NULL THEN 4 ELSE 1 END AS TPINSCESTAB
		,CASE WHEN FIN.CODOBRA IS NOT NULL THEN FIN.CODOBRA ELSE EMPC.CGC END AS NRINSCESTAB
		,CASE WHEN FIN.OBRACONSTCIVIL IS NULL THEN 0 ELSE FIN.OBRACONSTCIVIL END AS INDOBRA
		,PAR.CGC_CPF AS CNPJPRESTADOR
		,CASE WHEN NVL(IMF.ALIQUOTA, 0) = 11 THEN 0 ELSE 1 END AS INDCPRB
		,FIN.CLASSIFCESSAOOBRA AS TPSERVICO
		,FIN.VLRDESDOB AS VLRTOTALBRUTO
		,NVL(IMF.BASE, 0) AS VLRBASERET
		,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') <> ' ' THEN NVL(IMF.VALOR, 0) - NVL(IMF.VLRINSSESPECIAL, 0) ELSE NVL(IMF.VALOR, 0) END AS VLRRETENCAO
		,0 AS VLRRETSUB /*POR ENQUANTO NÃO VAMOS GERAR ESSA TAG*/
		,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') = '1' AND NVL(IMF.VLRINSSESPECIAL, 0) > 0 THEN NVL(IMF.BASE, 0) ELSE 0 END AS VLRSERVICOS15
		,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') = '2' AND NVL(IMF.VLRINSSESPECIAL, 0) > 0 THEN NVL(IMF.BASE, 0) ELSE 0 END AS VLRSERVICOS20
		,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') = '3' AND NVL(IMF.VLRINSSESPECIAL, 0) > 0 THEN NVL(IMF.BASE, 0) ELSE 0 END AS VLRSERVICOS25
		,NVL(IMF.VLRINSSESPECIAL, 0) AS VLRADICIONAL
		,SNK_GET_IDPROCESSO_IMP_EFD(1, 
									EMP.CODEMP, 
									PAR.CODPARC, 
									NULL, 
									FIN.CODLST, 
									FIN.DTNEG) AS NUPROCESSO_INSS_PRINC
		,SNK_GET_IDPROCESSO_IMP_EFD(1, 
									EMP.CODEMP, 
									PAR.CODPARC, 
									NULL, 
									FIN.CODLST, 
									FIN.DTNEG,
									'S') AS SEQPROCESSO_INSS_PRINC
		,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') = '1' THEN SNK_GET_IDPROCESSO_IMP_EFD(9, 
																						EMP.CODEMP, 
																						PAR.CODPARC, 
																						NULL, 
																						FIN.CODLST, 
																						FIN.DTNEG)
			  ELSE NULL END AS NUPROCESSO_INSS_15
		,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') = '1' THEN SNK_GET_IDPROCESSO_IMP_EFD(9, 
																						EMP.CODEMP, 
																						PAR.CODPARC, 
																						NULL, 
																						FIN.CODLST, 
																						FIN.DTNEG,
																						'S')
			  ELSE NULL END AS SEQPROCESSO_INSS_15
		,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') = '2' THEN SNK_GET_IDPROCESSO_IMP_EFD(10, 
																						EMP.CODEMP, 
																						PAR.CODPARC, 
																						NULL, 
																						FIN.CODLST, 
																						FIN.DTNEG)
			  ELSE NULL END AS NUPROCESSO_INSS_20
		,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') = '2' THEN SNK_GET_IDPROCESSO_IMP_EFD(10, 
																						EMP.CODEMP, 
																						PAR.CODPARC, 
																						NULL, 
																						FIN.CODLST, 
																						FIN.DTNEG,
																						'S')
			  ELSE NULL END AS SEQPROCESSO_INSS_20
		,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') = '3' THEN SNK_GET_IDPROCESSO_IMP_EFD(11, 
																						EMP.CODEMP, 
																						PAR.CODPARC, 
																						NULL, 
																						FIN.CODLST, 
																						FIN.DTNEG)
			  ELSE NULL END AS NUPROCESSO_INSS_25
		,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') = '3' THEN SNK_GET_IDPROCESSO_IMP_EFD(11, 
																						EMP.CODEMP, 
																						PAR.CODPARC, 
																						NULL, 
																						FIN.CODLST, 
																						FIN.DTNEG,
																						'S')
			  ELSE NULL END AS SEQPROCESSO_INSS_25
		,0 AS VLRCRTOM 		/*AINDA NÃO SABEMOS QUAL A REGRA PARA ESTE CÁLCULO*/
		,0 AS VLRCRTOMSUSP	/*AINDA NÃO SABEMOS QUAL A REGRA PARA ESTE CÁLCULO*/
		FROM TGFFIN FIN
			INNER JOIN (SELECT CODTIPOPER, DHALTER, TIPMOV, ATUALLIVISS, DESCROPER FROM TGFTOP)  TPO  ON TPO.CODTIPOPER = FIN.CODTIPOPER AND TPO.DHALTER = FIN.DHTIPOPER
			INNER JOIN (SELECT CODEMP, CODEMPMATRIZEFD, EMPADMPUBDIR, ATIVO FROM TGFEMP) EMP  ON EMP.CODEMP = FIN.CODEMP
			INNER JOIN (SELECT CODEMP, RAZAOSOCIAL, NOMEFANTASIA, CGC FROM TSIEMP) EMPC ON EMPC.CODEMP = EMP.CODEMP
			INNER JOIN (SELECT CODPARC, NOMEPARC, CGC_CPF FROM TGFPAR) PAR  ON PAR.CODPARC = FIN.CODPARC
			INNER JOIN TGFIMF IMF ON IMF.NUFIN = FIN.NUFIN AND IMF.TIPIMP = -1 AND ((NVL(IMF.ALIQUOTA, 0) - NVL(IMF.PERCINSSESPECIAL, 0)) IN (3.5, 11))
			INNER JOIN TGFIMC IMC ON IMC.CODIMP = IMF.CODIMP AND IMC.TIPOIMPOSTO = 5
		WHERE EMP.ATIVO = 'S'
			AND FIN.CLASSIFCESSAOOBRA IS NOT NULL
			AND TPO.TIPMOV = 'I'
			AND TPO.ATUALLIVISS = 'E'
	) TAB
		LEFT JOIN  TRIPISET ISET_INSS_PRINC ON ISET_INSS_PRINC.NUPROCESSO = NUPROCESSO_INSS_PRINC AND ISET_INSS_PRINC.SEQUENCIA = SEQPROCESSO_INSS_PRINC 
		LEFT JOIN  TRIPISET ISET_INSS_15 ON ISET_INSS_15.NUPROCESSO = NUPROCESSO_INSS_15 AND ISET_INSS_15.SEQUENCIA = SEQPROCESSO_INSS_15
		LEFT JOIN  TRIPISET ISET_INSS_20 ON ISET_INSS_20.NUPROCESSO = NUPROCESSO_INSS_20 AND ISET_INSS_20.SEQUENCIA = SEQPROCESSO_INSS_20
		LEFT JOIN  TRIPISET ISET_INSS_25 ON ISET_INSS_25.NUPROCESSO = NUPROCESSO_INSS_25 AND ISET_INSS_25.SEQUENCIA = SEQPROCESSO_INSS_25
	GROUP BY
	 TAB.CODEMP
	,TAB.DTREF
	,TAB.TPINSC
	,TAB.NRINSC
	,TAB.NUDOCUMENTO
	,TAB.TIPODOCUMENTO
	,TAB.TPINSCESTAB
	,TAB.NRINSCESTAB
	,TAB.INDOBRA
	,TAB.CNPJPRESTADOR
	,TAB.INDCPRB
	,TAB.TPSERVICO
) TABX
/
 
 
 
/*
Requer    : 4210011
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 55435-0-0
Nro. O.S. : 1148508
Nome      : Alterar - VRI_EVT_R2010
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VRI_EVT_R2010
NomeObjeto: VRI_EVT_R2010
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210012
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2010
AS
SELECT 
 INFST.CODEMP
,INFST.DTREF
,INFST.TPAMB
,INFST.SEQUENCIA
,INFST.CHAVE
,INFST.TPINSC
,INFST.NRINSC
,INFST.TPINSCESTAB
,INFST.NRINSCESTAB
,INFST.INDOBRA
,INFST.CNPJPRESTADOR
,SUM(INFST.VLRTOTALBRUTO) AS VLRTOTALBRUTO
,SUM(INFST.VLRBASERET) AS VLRTOTALBASERET
,SUM(INFST.VLRRETENCAO) AS VLRTOTALRETPRINC 
,SUM(INFST.VLRADICIONAL) AS VLRTOTALRETADIC
,SUM(INFST.VLRNRETPRINC) AS VLRTOTALNRETPRINC
,SUM(INFST.VLRNRETADIC) AS VLRTOTALNRETADIC
,INFST.INDCPRB
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.CNPJPRESTADORRET ELSE NULL END AS CNPJPRESTADORRET 
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALBASERETRET ELSE NULL END AS VLRTOTALBASERETRET
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALRETPRINCRET ELSE NULL END AS VLRTOTALRETPRINCRET
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALRETADICRET ELSE NULL END AS VLRTOTALRETADICRET
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALNRETPRINCRET ELSE NULL END AS VLRTOTALNRETPRINCRET
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALNRETADICRET ELSE NULL END AS VLRTOTALNRETADICRET
,SUM(INFST.VLRCRTOM) AS VLRCRTOM
,SUM(INFST.VLRCRTOMSUSP) AS VLRCRTOMSUSP
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRCRTOMRET ELSE NULL END AS VLRCRTOMRET
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRCRTOMSUSPRET ELSE NULL END AS VLRCRTOMSUSPRET
FROM TRIINFST INFST
    LEFT JOIN TRIRCST RCST ON RCST.CODEMP = INFST.CODEMP
                          AND RCST.DTREF = INFST.DTREF
                          AND RCST.TPAMB = INFST.TPAMB
                          AND RCST.SEQUENCIA = (INFST.SEQUENCIA - 1)
                          AND RCST.CHAVE = INFST.CHAVE
GROUP BY 
 INFST.CODEMP
,INFST.DTREF
,INFST.TPAMB
,INFST.SEQUENCIA
,INFST.CHAVE
,INFST.TPINSC
,INFST.NRINSC
,INFST.TPINSCESTAB
,INFST.NRINSCESTAB
,INFST.INDOBRA
,INFST.CNPJPRESTADOR
,INFST.INDCPRB
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.CNPJPRESTADORRET ELSE NULL END 
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALBASERETRET ELSE NULL END
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALRETPRINCRET ELSE NULL END
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALRETADICRET ELSE NULL END
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALNRETPRINCRET ELSE NULL END
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRTOTALNRETADICRET ELSE NULL END
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRCRTOMRET ELSE NULL END
,CASE WHEN NVL(RCST.CONTROLE, ' ') = 'I' AND NVL(RCST.STATUSREG, ' ') = 'F' THEN RCST.VLRCRTOMSUSPRET ELSE NULL END
/
 
 
 
/*
Requer    : 4210011
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 55436-0-0
Nro. O.S. : 1148508
Nome      : Alterar - VRI_EVT_R2050_INFOPROC
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VRI_EVT_R2050_INFOPROC
NomeObjeto: VRI_EVT_R2050_INFOPROC
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210012
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2050_INFOPROC
AS
SELECT
 TAB.CODEMP
,TAB.DTREF
,TAB.TPAMB
,TAB.SEQUENCIA
,TAB.CHAVE
,TAB.INDCOM
,TAB.NUPROCESSO AS CHAVEPROCESSO
,TAB.NUPROCESSO
,TAB.SEQPROCESSO
,PAJ.TIPO AS TPPROC
,PAJ.NUMPROCESSO AS NRPROC
,TAB.CODSUSP
,SUM(CASE WHEN TAB.TIPIMPOSTO = 1 THEN TAB.VALOR ELSE 0 END) AS VLRCPSUSP
,SUM(CASE WHEN TAB.TIPIMPOSTO = 3 THEN TAB.VALOR ELSE 0 END) AS VLRSENARSUSP
,SUM(CASE WHEN TAB.TIPIMPOSTO = 4 THEN TAB.VALOR ELSE 0 END) AS VLRRATSUSP
FROM (
    SELECT
     NFPR.CODEMP
    ,NFPR.DTREF
    ,NFPR.TPAMB
    ,NFPR.SEQUENCIA
    ,NFPR.CHAVE
    ,NFPR.INDCOM
    ,ISET_INSS.NUPROCESSO
    ,ISET_INSS.SEQUENCIA AS SEQPROCESSO
    ,1 AS TIPIMPOSTO
    ,ISET_INSS.CODSUSP
    ,NFPR.VLRCPSUSP AS VALOR
    FROM TRINFPR NFPR
        INNER JOIN TRIPISET ISET_INSS ON ISET_INSS.NUPROCESSO = NFPR.NUPROCESSO_INSS AND ISET_INSS.SEQUENCIA = NFPR.SEQPROCESSO_INSS
    UNION ALL
    SELECT
     NFPR.CODEMP
    ,NFPR.DTREF
    ,NFPR.TPAMB
    ,NFPR.SEQUENCIA
    ,NFPR.CHAVE
    ,NFPR.INDCOM    
    ,ISET_SENAR.NUPROCESSO
    ,ISET_SENAR.SEQUENCIA AS SEQPROCESSO
    ,3 AS TIPIMPOSTO
    ,ISET_SENAR.CODSUSP
    ,NFPR.VLRSENARSUSP AS VALOR
    FROM TRINFPR NFPR
        INNER JOIN TRIPISET ISET_SENAR ON ISET_SENAR.NUPROCESSO = NFPR.NUPROCESSO_SENAR AND ISET_SENAR.SEQUENCIA = NFPR.SEQPROCESSO_SENAR
    UNION ALL
    SELECT  
     NFPR.CODEMP
    ,NFPR.DTREF
    ,NFPR.TPAMB
    ,NFPR.SEQUENCIA
    ,NFPR.CHAVE
    ,NFPR.INDCOM    
    ,ISET_GILRAT.NUPROCESSO
    ,ISET_GILRAT.SEQUENCIA AS SEQPROCESSO
    ,4 AS TIPIMPOSTO
    ,ISET_GILRAT.CODSUSP 
    ,NFPR.VLRRATSUSP AS VALOR
    FROM TRINFPR NFPR
        INNER JOIN TRIPISET ISET_GILRAT ON ISET_GILRAT.NUPROCESSO = NFPR.NUPROCESSO_GILRAT AND ISET_GILRAT.SEQUENCIA = NFPR.SEQPROCESSO_GILRAT
) TAB
    INNER JOIN TRIPAJ PAJ ON PAJ.NUPROCESSO = TAB.NUPROCESSO
GROUP BY 
 TAB.CODEMP
,TAB.DTREF
,TAB.TPAMB
,TAB.SEQUENCIA
,TAB.CHAVE
,TAB.INDCOM
,TAB.NUPROCESSO
,TAB.SEQPROCESSO
,PAJ.TIPO
,PAJ.NUMPROCESSO
,TAB.CODSUSP
/
 
 
 
/*
Requer    : 4210011
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 55437-0-0
Nro. O.S. : 1148508
Nome      : Alterar - SNK_TOTALIZA_RESUMO_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - SNK_TOTALIZA_RESUMO_REINF
NomeObjeto: SNK_TOTALIZA_RESUMO_REINF
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210012
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_TOTALIZA_RESUMO_REINF(P_CODEMP         NUMBER,
                                                      P_DTREF          DATE,
                                                      P_TPAMB          VARCHAR2,
                                                      P_SEQUENCIA_NEW  NUMBER)     
AS
    P_COUNT                 NUMBER;
    P_TPINSC                NUMBER;
    P_NRINSC                VARCHAR2(14);
BEGIN
    /*SE EXISTIR REGISTRO PARA A NOVA SEQUÊNIA DEVEMOS DELETÁ-LO.PODE SER QUE EXISTA POR CONTA DA GERAÇÃO ANTERIOR ESTAR PENDENTE E A SEQUÊNCIA FOI 
    DELETADA PARA SER GERADA NOVAMENTE, ASSIM TAMBÉM DEVEMOS DELETAR O RESUMO PARA QUE ELE POSSA SER CALCULADO NOVAMENTE*/
    SELECT COUNT(1) INTO P_COUNT
    FROM TRIRES
    WHERE CODEMP = P_CODEMP
        AND DTREF = P_DTREF
        AND TPAMB = P_TPAMB
        AND SEQUENCIA = P_SEQUENCIA_NEW;

    IF P_COUNT > 0 THEN 
        DELETE TRIRES
        WHERE CODEMP = P_CODEMP
            AND DTREF = P_DTREF
            AND TPAMB = P_TPAMB
            AND SEQUENCIA = P_SEQUENCIA_NEW;     
    END IF;

    SELECT CASE WHEN LENGTH(EMPC.CGC) = 14 THEN '1' 
                ELSE '2' 
           END AS TPINSC,
           CASE WHEN LENGTH(EMPC.CGC) = 14 THEN CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMPC.CGC
                                                     ELSE SUBSTR(EMPC.CGC,1,8)
                                                END
                ELSE EMPC.CGC
           END AS NRINSC 
           INTO P_TPINSC, P_NRINSC
    FROM TGFEMP EMP
        INNER JOIN TSIEMP EMPC ON EMPC.CODEMP = EMP.CODEMP
    WHERE EMP.CODEMP = P_CODEMP;

    /*INSERINDO A TABELA PAI DE RESUMO, COM OS DADOS GERAIS*/
    INSERT INTO TRIRES (CODEMP, DTREF, TPAMB, SEQUENCIA, TPINSC, NRINSC)
        VALUES (P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW, P_TPINSC, P_NRINSC); 

    /*INSERT DO RESUMO DO EVENTO R-2010*/
    INSERT INTO TRIRCSTRES (CODEMP, DTREF, TPAMB, SEQUENCIA, CNPJPRESTADOR, VLRTOTALBASERETSIS, VLRTOTALRETPRINCSIS, VLRTOTALRETADICSIS, VLRTOTALNRETPRINCSIS, VLRTOTALNRETADICSIS, VLRCRTOMSIS, VLRCRTOMSUSPSIS)
    SELECT 
     CODEMP
    ,DTREF
    ,TPAMB
    ,SEQUENCIA
    ,CNPJPRESTADOR
    ,SUM(VLRTOTALBASERET) AS VLRTOTALBASERETSIS
    ,SUM(VLRTOTALRETPRINC) AS VLRTOTALRETPRINCSIS
    ,SUM(VLRTOTALRETADIC) AS VLRTOTALRETADICSIS
    ,SUM(VLRTOTALNRETPRINC) AS VLRTOTALNRETPRINCSIS
    ,SUM(VLRTOTALNRETADIC) AS VLRTOTALNRETADICSIS
	,SUM(VLRCRTOM) AS VLRCRTOMSIS
	,SUM(VLRCRTOMSUSP) AS VLRCRTOMSUSPSIS
    FROM TRIRCST
    WHERE CODEMP = P_CODEMP
        AND DTREF = P_DTREF 
        AND TPAMB = P_TPAMB
        AND SEQUENCIA = P_SEQUENCIA_NEW
    GROUP BY 
     CODEMP
    ,DTREF
    ,TPAMB
    ,SEQUENCIA
    ,CNPJPRESTADOR;

    /*INSERT DO RESUMO DO EVENTO R-2020*/
    INSERT INTO TRIRCSPRES (CODEMP, DTREF, TPAMB, SEQUENCIA, TPINSCTOMADOR, NRINSCTOMADOR, VLRTOTALBASERETSIS, VLRTOTALRETPRINCSIS, VLRTOTALRETADICSIS, VLRTOTALNRETPRINCSIS, VLRTOTALNRETADICSIS)
    SELECT 
     CODEMP
    ,DTREF
    ,TPAMB
    ,SEQUENCIA
    ,TPINSCTOMADOR
    ,NRINSCTOMADOR
    ,SUM(VLRTOTALBASERET) AS VLRTOTALBASERETSIS
    ,SUM(VLRTOTALRETPRINC) AS VLRTOTALRETPRINCSIS
    ,SUM(VLRTOTALRETADIC) AS VLRTOTALRETADICSIS
    ,SUM(VLRTOTALNRETPRINC) AS VLRTOTALNRETPRINCSIS
    ,SUM(VLRTOTALNRETADIC) AS VLRTOTALNRETADICSIS
    FROM TRIRCSP
    WHERE CODEMP = P_CODEMP
        AND DTREF = P_DTREF 
        AND TPAMB = P_TPAMB
        AND SEQUENCIA = P_SEQUENCIA_NEW
    GROUP BY 
     CODEMP
    ,DTREF
    ,TPAMB
    ,SEQUENCIA
    ,TPINSCTOMADOR
    ,NRINSCTOMADOR;

    /*INSERT DO RESUMO DO EVENTO R-2050*/
    INSERT INTO TRICPPRRES (CODEMP, DTREF, TPAMB, SEQUENCIA, SEQEVENTO, VLRCPAPURSIS, VLRRATAPURSIS, VLRSENARAPURSIS, VLRCPSUSPTOTALSIS, VLRRATSUSPTOTALSIS, VLRSENARSUSPTOTALSIS)
    SELECT 
     CODEMP
    ,DTREF
    ,TPAMB
    ,SEQUENCIA
    /*ESSE CARA POR ENQUANTO É PADRÃO, POIS O EVENTO R-2050 NÃO POSSUI UM AGRUPAMENTO, EM TESE SERÁ SEMPRE UM EVENTO POR REFERÊNCIA. FOI FEITO ASSIM PARA MANTER COMPATIBILIDADE COM AS OUTRAS ENTIDADES*/
    ,1 AS SEQEVENTO 
    ,SUM(VLRCPAPUR) AS VLRCPAPURSIS
    ,SUM(VLRRATAPUR) AS VLRRATAPURSIS
    ,SUM(VLRSENARAPUR) AS VLRSENARAPURSIS
    ,SUM(VLRCPSUSPTOTAL) AS VLRCPSUSPTOTALSIS
    ,SUM(VLRRATSUSPTOTAL) AS VLRRATSUSPTOTALSIS
    ,SUM(VLRSENARSUSPTOTAL) AS VLRSENARSUSPTOTALSIS
    FROM TRICPPR
    WHERE CODEMP = P_CODEMP
        AND DTREF = P_DTREF 
        AND TPAMB = P_TPAMB
        AND SEQUENCIA = P_SEQUENCIA_NEW
    GROUP BY 
     CODEMP
    ,DTREF
    ,TPAMB
    ,SEQUENCIA;

    /*INSERT DO RESUMO DO EVENTO R-2060*/
    INSERT INTO TRICPRBRES (CODEMP, DTREF, TPAMB, SEQUENCIA, CODRECEITA, VLRCPAPURTOTALSIS, VLRCPRBSUSPTOTALSIS)
    SELECT 
     CODEMP
    ,DTREF
    ,TPAMB
    ,SEQUENCIA
    ,CODRECOLHIMENTO AS CODRECEITA
    ,SUM(VLRCPRBAPUR) AS VLRCPAPURTOTALSIS
    ,SUM(VLRCPRBSUSP) AS VLRCPRBSUSPTOTALSIS
    FROM TRINFRB
    WHERE CODEMP = P_CODEMP
        AND DTREF = P_DTREF 
        AND TPAMB = P_TPAMB
        AND SEQUENCIA = P_SEQUENCIA_NEW
    GROUP BY 
     CODEMP
    ,DTREF
    ,TPAMB
    ,SEQUENCIA
    ,CODRECOLHIMENTO;
END;
/
 
 
 
/*
Requer    : 4210011
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 55438-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5543700
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_TOTALIZA_RESUMO_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210012
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_TOTALIZA_RESUMO_REINF' NOMEOBJ, 55437 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, 'f0ef43c3c20ea144582aefed413d5a14' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_TOTALIZA_RESUMO_REINF' and THO.hashcode = 'f0ef43c3c20ea144582aefed413d5a14')
/
 
 
 
/*
Requer    : 4210011
Conexao   : ORCL
Data      : 22/05/2018 15:59:57
Num.Script: 55439-0-0
Nro. O.S. : 1148508
Nome      : Alterar - SNK_PROCESSA_DADOS_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - SNK_PROCESSA_DADOS_REINF
NomeObjeto: SNK_PROCESSA_DADOS_REINF
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SEMPRE
Ocorrencia: 4210012
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_PROCESSA_DADOS_REINF(P_CODEMP           NUMBER,
                                                     P_DTREF            DATE,
                                                     P_TPAMB            VARCHAR2,
                                                     P_SEQUENCIA_ATUAL  NUMBER, 
                                                     P_TIPDADOS         CHAR,                   /*T=TODOS, C=CADOSTRO, M=MOVIMENTO*/
                                                     P_EVENTO           VARCHAR2 := 'TODOS',    /*TODOS, NOMEEVENTO*/
                                                     P_NOMETAB          VARCHAR2 := NULL,       /*UTILIZADO NA RECURSIVIDADE*/
                                                     P_SEQUENCIA_PAI    NUMBER := NULL,         /*UTILIZADO NA RECURSIVIDADE*/
                                                     P_RESULT           OUT NUMBER)     
AS
    P_SEQUENCIA_OLD             NUMBER;
    P_SEQUENCIA_NEW             NUMBER;
    P_SEQUENCIA_DEL             NUMBER;
    P_DTREF_OLD                 DATE;
    P_DTREF_OLD_PENDENTE        DATE;
    P_NRORECIBO                 VARCHAR2(50);
    P_NRO_RECIBO_OLD             VARCHAR2(50) := NULL;
    P_INSERT_COLUMNS            VARCHAR2(4000);
    P_INSERT_VALUES             VARCHAR2(4000);
    P_COUNT                     NUMBER(10);
    queSql                      VARCHAR2(4000);
    P_FILTRO_MERGE              VARCHAR2(4000) := '';
BEGIN
    SELECT MAX(DTREF) INTO P_DTREF_OLD_PENDENTE
    FROM TRICAB CAB
    WHERE CAB.CODEMP = P_CODEMP
        AND CAB.DTREF < P_DTREF
        AND CAB.TPAMB = P_TPAMB
        AND NOT EXISTS( SELECT 1
                        FROM TRIFEP FEP
                        WHERE FEP.CODEMP = CAB.CODEMP
                            AND FEP.DTREF = CAB.DTREF
                            AND FEP.TPAMB = CAB.TPAMB
                            AND FEP.SEQUENCIA = CAB.SEQUENCIAATUAL);

    IF P_DTREF_OLD_PENDENTE IS NOT NULL THEN
        RAISE_APPLICATION_ERROR(-20101, 'Existe movimento para referência '''||TO_CHAR(P_DTREF_OLD_PENDENTE, 'DD/MM/YYYY')||''' que não foi fechada. Para gerar esta referência é necessário seu fechamento.');
    END IF;

    IF P_NOMETAB IS NULL THEN
        FOR EVE IN (SELECT MON.NOMETAB, MON.NOMEEVENTO
                    FROM TRIMON MON
                        INNER JOIN TRIEVT EVT ON EVT.TIPOEVENTO = MON.NOMEEVENTO
                    WHERE (P_EVENTO = 'TODOS' OR MON.NOMEEVENTO = P_EVENTO)
                        AND MON.NOMETABPAI IS NULL
                        AND (P_EVENTO <> 'TODOS' OR P_TIPDADOS = 'T' OR EVT.GRUPO = P_TIPDADOS)
                        AND (EXISTS(SELECT 1
                                   FROM TGFEPS
                                   WHERE EVENTO = EVT.TIPOEVENTO
                                     AND CODEMP = P_CODEMP
                                     AND GERAREVENTO = 'S') OR 
                             EVT.GRUPO = 'C') /*EVENTOS DE CADASTRO NÃO ESTÃO NA TABELA TGFEPS*/
                    GROUP BY MON.NOMEEVENTO, MON.NOMETAB, MON.ORDEM
                    ORDER BY MON.ORDEM
                    ) 
        LOOP
            queSql := ' SELECT COUNT(1)  
                        FROM '||EVE.NOMETAB||'
                        WHERE CODEMP = :CODEMP
                          AND DTREF = :DTREF
                          AND TPAMB = :TPAMB
                          AND STATUSREG = ''E'' ';

            EXECUTE IMMEDIATE queSql INTO P_COUNT USING P_CODEMP, P_DTREF, P_TPAMB;

            IF P_COUNT > 0 THEN
                RAISE_APPLICATION_ERROR(-20101, 'Não é possível gerar dados do REINF se existir eventos enviados para esta empresa/referência.');
            END IF;

            queSql := ' SELECT MAX(SEQUENCIA)
                        FROM '||EVE.NOMETAB||'
                        WHERE CODEMP = :CODEMP
                          AND DTREF = :DTREF
                          AND TPAMB = :TPAMB
                          AND STATUSREG = ''P''';

            EXECUTE IMMEDIATE queSql INTO P_SEQUENCIA_DEL USING P_CODEMP, P_DTREF, P_TPAMB;

            IF NVL(P_SEQUENCIA_DEL, 0) > 0 THEN
                FOR CUR_DEL IN (SELECT NOMETAB
                                FROM TRIMON
                                WHERE NOMETABPAI IS NULL
                                ORDER BY ORDEM DESC /*NÃO ALTERAR ESSA ORDEM: OS MOVIMENTOS DEVEM SER DELETADOS ANTES DOS PROCESSOS, POIS EXISTE FK ENTRE ELES*/
                                ) 
                LOOP
                    queSql := ' DELETE FROM '||CUR_DEL.NOMETAB||'
                                WHERE CODEMP = :CODEMP
                                  AND DTREF = :DTREF
                                  AND TPAMB = :TPAMB
                                  AND SEQUENCIA = :SEQUENCIA';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_DEL;

                END LOOP;
                P_SEQUENCIA_NEW := P_SEQUENCIA_ATUAL;
                EXIT; /*COMO JÁ DELETEI TODOS OS REGISTROS PARA A ULTIMA SEQUENCIA PENDENTE, POSSO SAIR DO LOOP*/
            END IF;
        END LOOP;
    ELSE
        P_SEQUENCIA_NEW := P_SEQUENCIA_PAI;
    END IF;

    IF P_SEQUENCIA_NEW IS NULL THEN /*SE A SEQUENCIA ESTÁ NULL, NENHUM REGISTRO FOI DELETADO, LOGO A SEQUENCIA SERÁ A SEQUENCIA ATUAL + 1*/
        P_SEQUENCIA_NEW := P_SEQUENCIA_ATUAL + 1;
    END IF;

    FOR EVE IN (SELECT MON.NOMETAB, MON.NOMEEVENTO, MON.NOMEVIEW
                     , CASE WHEN P_NOMETAB IS NULL THEN MON.NOMETABPAI ELSE (SELECT MIN(NOMETAB) FROM TRIMON WHERE NOMEEVENTO = P_EVENTO AND NOMETABPAI IS NULL) END AS NOMETABPAI
                     , MON.VIEWDETALHE, EVT.GRUPO, MON.ORDEM
                FROM TRIMON MON
                    INNER JOIN TRIEVT EVT ON EVT.TIPOEVENTO = MON.NOMEEVENTO
                WHERE (P_NOMETAB IS NOT NULL AND MON.NOMETAB = P_NOMETAB) /*BUSCA O PRÓPRIO EVENTO*/ OR 
                         (  P_NOMETAB IS NULL
                         AND MON.NOMETABPAI IS NULL 
                         AND (P_EVENTO = 'TODOS' OR MON.NOMEEVENTO = P_EVENTO)                      
                         AND (P_EVENTO <> 'TODOS' OR P_TIPDADOS = 'T' OR EVT.GRUPO = P_TIPDADOS)
                         AND (EXISTS(SELECT 1
                                       FROM TGFEPS
                                     WHERE EVENTO = EVT.TIPOEVENTO
                                        AND CODEMP = P_CODEMP
                                        AND GERAREVENTO = 'S') OR
                              EVT.GRUPO = 'C') /*EVENTOS DE CADASTRO NÃO ESTÃO NA TABELA TGFEPS*/
                      )
                ORDER BY MON.ORDEM  
               )
    LOOP
        P_NRORECIBO := NULL;
        P_NRO_RECIBO_OLD := NULL;

        IF P_SEQUENCIA_NEW > 1 THEN
            queSql := ' SELECT MAX(SEQUENCIA)
                        FROM '||EVE.NOMETAB||'
                        WHERE CODEMP = :CODEMP
                          AND DTREF = :DTREF
                          AND TPAMB = :TPAMB
                          AND SEQUENCIA < :SEQUENCIA_NEW';

            EXECUTE IMMEDIATE queSql INTO P_SEQUENCIA_OLD USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW;

            P_DTREF_OLD := P_DTREF;
        ELSIF EVE.GRUPO <> 'M' THEN
            queSql := ' SELECT NVL(MAX(DTREF), :DTREF)
                        FROM '||EVE.NOMETAB||'
                        WHERE CODEMP = :CODEMP
                          AND DTREF < :DTREF
                          AND TPAMB = :TPAMB';
            EXECUTE IMMEDIATE queSql INTO P_DTREF_OLD USING P_DTREF, P_CODEMP, P_DTREF, P_TPAMB;

            IF P_DTREF_OLD <> P_DTREF THEN
                queSql := ' SELECT NVL(MAX(SEQUENCIA),0)
                            FROM '||EVE.NOMETAB||'
                            WHERE CODEMP = :CODEMP
                              AND DTREF = :DTREF
                              AND TPAMB = :TPAMB';

                EXECUTE IMMEDIATE queSql INTO P_SEQUENCIA_OLD USING P_CODEMP, P_DTREF_OLD, P_TPAMB;
            ELSE
                P_SEQUENCIA_OLD := P_SEQUENCIA_NEW;
            END IF;
        ELSE
            P_SEQUENCIA_OLD := P_SEQUENCIA_NEW;
            P_DTREF_OLD := P_DTREF;
        END IF;

        IF EVE.GRUPO = 'M' THEN  /*MOVIMENTOS GRAVAM OS EVENTOS FILHOS PRIMEIRO*/     
            FOR EVEF IN (SELECT NOMEEVENTO, NOMETAB
                         FROM TRIMON
                         WHERE NOMETABPAI = EVE.NOMETAB
                         GROUP BY NOMEEVENTO, NOMETAB
                         ORDER BY NOMEEVENTO 
                        ) 
            LOOP
                SNK_PROCESSA_DADOS_REINF(P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_ATUAL, P_TIPDADOS, EVEF.NOMEEVENTO, EVEF.NOMETAB, P_SEQUENCIA_NEW, P_RESULT);
            END LOOP;
        END IF;

        IF EVE.NOMETABPAI IS NULL THEN
            DELETE FROM TRIVAR; 
            SNK_VERIF_ALTER_REINF(P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW, NULL /*NOME TAB PAI*/, EVE.NOMETAB, EVE.NOMEVIEW, EVE.GRUPO, EVE.VIEWDETALHE);
        END IF;

        P_INSERT_COLUMNS := ' ' || SNK_GET_COLUMNS_TABLE(EVE.NOMETAB, ' ');
        P_INSERT_VALUES  := P_INSERT_COLUMNS;

        P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' CODEMP', TO_CHAR (P_CODEMP)|| ' AS CODEMP');

        P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' DTREF', ' TO_DATE(SNK_FORMAT_DATE('''||P_DTREF||''', ''DD/MM/YYYY''), ''DD/MM/YYYY'') AS DTREF');

        P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' TPAMB', ' '''||P_TPAMB||''' AS TPAMB');

        P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' SEQUENCIA', ' ' ||TO_CHAR (P_SEQUENCIA_NEW)|| ' AS SEQUENCIA');

        IF EVE.NOMETABPAI IS NULL THEN
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' STATUSREG', ' CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E''  THEN ''F'' ' 
                                                              ||             'ELSE ''P'' ' 
                                                              ||        'END AS STATUSREG');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' TIPO', ' CASE WHEN ( (DADOS.NRO_RECIBO_OLD IS NULL AND DADOS.NRO_RECIBOANT_OLD IS NULL) OR '
                                                              ||               '(DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD = ''E'') )THEN ''I'' ' 
                                                              ||        'WHEN DADOS.STATUS_REG_OLD = ''F'' AND DADOS.CONTROLE_OLD <> ''I'' THEN DADOS.CONTROLE_OLD ' 
                                                              ||        'ELSE DADOS.TIPO_OLD ' 
                                                              ||   'END AS TIPO');

            IF EVE.GRUPO = 'C' THEN
                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' INIVALIDNOVO', ' CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E'' THEN DADOS.INI_VALIDNOVO_OLD '
                                                              ||                    'ELSE NULL '
                                                              ||               'END AS INIVALIDNOVO');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' FIMVALIDNOVO', ' CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E'' THEN DADOS.FIM_VALIDNOVO_OLD '
                                                              ||                    'ELSE NULL '
                                                              ||               'END AS FIMVALIDNOVO');
            END IF;

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' NRORECIBO,', ' CASE WHEN DADOS.CHAVE_OLD IS NOT NULL AND DADOS.CONTROLE_OLD = ''I'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E'' THEN DADOS.NRO_RECIBO_OLD '
                                                              ||              'ELSE NULL ' 
                                                              ||         'END AS NRORECIBO,');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' NRORECIBOANT,', ' CASE WHEN DADOS.CHAVE_OLD IS NOT NULL AND DADOS.CONTROLE_OLD = ''I'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E'' THEN DADOS.NRO_RECIBOANT_OLD ' 
                                                              ||                 'WHEN DADOS.CHAVE_OLD IS NOT NULL AND DADOS.CONTROLE_OLD = ''A'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E'' THEN DADOS.NRO_RECIBO_OLD '
                                                              ||                 'ELSE NULL '
                                                              ||            'END AS NRORECIBOANT,');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' IDEVENTO', ' CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E'' THEN ID_EVENTO_OLD ' 
                                                              ||            'ELSE NULL '
                                                              ||       'END AS IDEEVENTO');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' CONTROLE', ' ''I'' AS CONTROLE');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' MSG', ' CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E'' THEN DADOS.MENSAGEM_OLD '
                                                              ||       'ELSE NULL '
                                                              ||  'END AS MSG');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' XMLEVENTO', ' CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E'' THEN DADOS.XML_EVENTO_OLD '
                                                              ||             'ELSE NULL '
                                                              ||        'END AS XMLEVENTO');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' XMLRETORNO', ' CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E'' THEN DADOS.XML_RETORNO_OLD '
                                                              ||              'ELSE NULL '
                                                              ||         'END AS XMLRETORNO');

            queSql :=                    'INSERT INTO '||EVE.NOMETAB||' ' 
                                      || 'SELECT '||P_INSERT_VALUES||' '     
                                      || 'FROM (SELECT '
                                      ||          'NVL(ANT.CONTROLE, '' '') AS CONTROLE_OLD ' 
                                      ||        ', ANT.NRORECIBO AS NRO_RECIBO_OLD '
                                      ||        ', ANT.NRORECIBOANT AS NRO_RECIBOANT_OLD '
                                      ||        ', ANT.TIPO AS TIPO_OLD '
                                      ||        ', ANT.CHAVE AS CHAVE_OLD ';

            IF EVE.GRUPO = 'C' THEN  
                queSql := queSql      ||        ', ANT.INIVALIDNOVO AS INI_VALIDNOVO_OLD '
                                      ||        ', ANT.FIMVALIDNOVO AS FIM_VALIDNOVO_OLD ';
            END IF;

            queSql := queSql          ||        ', ANT.STATUSREG AS STATUS_REG_OLD '
                                      ||        ', ANT.IDEVENTO AS ID_EVENTO_OLD '
                                      ||        ', ANT.MSG AS MENSAGEM_OLD '
                                      ||        ', ANT.XMLEVENTO AS XML_EVENTO_OLD '
                                      ||        ', ANT.XMLRETORNO AS XML_RETORNO_OLD '
                                      ||        ', V.* '
                                      ||       'FROM '||EVE.NOMEVIEW||' V '
                                      ||           'LEFT JOIN (SELECT '
                                      ||                         'OLD.CHAVE '
                                      ||                       ', OLD.CONTROLE '
                                      ||                       ', NRORECIBO '
                                      ||                       ', NRORECIBOANT '
                                      ||                       ', TIPO ';

            IF EVE.GRUPO = 'C' THEN
                queSql := queSql      ||                       ', INIVALIDNOVO '
                                      ||                       ', FIMVALIDNOVO ';
            END IF;

            queSql := queSql          ||                       ', STATUSREG '
                                      ||                       ', IDEVENTO '
                                      ||                       ', MSG '
                                      ||                       ', XMLEVENTO '
                                      ||                       ', XMLRETORNO '
                                      ||                      'FROM '||EVE.NOMETAB||' OLD '
                                      ||                      '  LEFT JOIN TRIVAR VAR ON VAR.CHAVE = OLD.CHAVE AND VAR.DTREF = OLD.DTREF AND VAR.SEQUENCIA = OLD.SEQUENCIA '
                                      ||                      'WHERE OLD.CODEMP = :CODEMP '
                                      ||                         'AND OLD.TPAMB = :TPAMB '
                                      ||                         'AND (VAR.CHAVE IS NOT NULL OR '
                                      ||                         '       (NOT EXISTS(SELECT 1 '
                                      ||                                            'FROM TRIVAR V '
                                      ||                                            'WHERE CHAVE = OLD.CHAVE) AND OLD.DTREF = :DTREF_OLD AND OLD.SEQUENCIA = :SEQUENCIA_OLD)) '
                                      ||                         ') ANT ON ANT.CHAVE = V.CHAVE '
                                      ||       'WHERE V.CODEMP = :CODEMP ';

            IF EVE.GRUPO = 'C' THEN
                queSql := queSql      ||          'AND :GRUPO = ''C'' ' 
                                      ||          'AND :DTREF BETWEEN V.INIVALID AND NVL(V.FIMVALID, :DTREF) '
                                      ||       ') DADOS ';

                EXECUTE IMMEDIATE queSql USING P_CODEMP, P_TPAMB, P_DTREF_OLD, P_SEQUENCIA_OLD, P_CODEMP, EVE.GRUPO, P_DTREF, P_DTREF;
            ELSE
                IF EVE.VIEWDETALHE = 'S' THEN /*A VIEW QUE É DETALHADA NÃO PRECISA PASSAR OS DADOS 'TPAMB' E 'SEQUENCIA' COMO PARAMETROS*/
                    queSql := queSql  ||          'AND DTREF = :DTREF ' 
                                      ||       ') DADOS';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_TPAMB, P_DTREF_OLD, P_SEQUENCIA_OLD, P_CODEMP, P_DTREF;
                ELSE
                    queSql := queSql  ||          'AND DTREF = :DTREF ' 
                                      ||          'AND TPAMB = :TPAMB '
                                      ||          'AND SEQUENCIA = :SEQUENCIA '
                                      ||       ') DADOS';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_TPAMB, P_DTREF_OLD, P_SEQUENCIA_OLD, P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW;
                END IF; 
            END IF;
        ELSE
            /*SÓ ENTRA AQUI PARA OS FILHOS*/
            queSql :=                    'INSERT INTO '||EVE.NOMETAB||' '
                                      || 'SELECT '||P_INSERT_VALUES||' '
                                      || 'FROM '||EVE.NOMEVIEW||' '
                                      || 'WHERE CODEMP = :CODEMP ';

            IF EVE.GRUPO = 'C' THEN
                queSql :=  queSql     ||    'AND :GRUPO = ''C'' ';

                EXECUTE IMMEDIATE queSql USING P_CODEMP, EVE.GRUPO;
            ELSE
                IF EVE.VIEWDETALHE = 'S' THEN /*A VIEW QUE É DETALHADA NÃO PRECISA PASSAR OS DADOS 'TPAMB' E 'SEQUENCIA' COMO PARAMETROS*/
                    queSql :=  queSql ||    'AND DTREF = :DTREF ';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF;
                ELSE
                    queSql :=  queSql ||    'AND DTREF = :DTREF ' 
                                      ||    'AND TPAMB = :TPAMB '
                                      ||    'AND SEQUENCIA = :SEQUENCIA ';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW;
                END IF; 
            END IF;
        END IF;

        /*UTILIZADO QUANDO O INSERT NÃO FOI FEITO POR CONTA DE EXCLUSÃO, ASSIM PRECISAMOS CRIAR UMA NOVA LINHA PARA SE FAZER A EXCLUSÃO*/
        IF P_DTREF <> P_DTREF_OLD  OR P_SEQUENCIA_NEW <> P_SEQUENCIA_OLD THEN
            P_INSERT_COLUMNS := SNK_GET_COLUMNS_TABLE(EVE.NOMETAB, ' ');
            P_INSERT_VALUES := P_INSERT_COLUMNS; 

            P_INSERT_VALUES := REPLACE(P_INSERT_VALUES, ' ', '');
            P_INSERT_VALUES := 'O.'||REPLACE(P_INSERT_VALUES, ',', ',O.');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.CODEMP', 'O.CODEMP');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.DTREF', ':DTREF');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.TPAMB', 'O.TPAMB');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.SEQUENCIA', ':SEQUENCIA');

            IF EVE.NOMETABPAI IS NULL THEN
                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.STATUSREG', '''P''');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.TIPO', '''E''');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.NRORECIBO,', 'NULL,');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.NRORECIBOANT,', 'O.NRORECIBO,');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.IDEVENTO', 'NULL');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.CONTROLE', '''I''');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.MSG', 'NULL');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.XMLEVENTO', 'NULL');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.XMLRETORNO', 'NULL');

                P_FILTRO_MERGE := ' AND ( (STATUSREG = ''F'' AND NRORECIBO IS NOT NULL AND TIPO <> ''E'') OR '||
                                         '(STATUSREG <> ''F'' AND TIPO = ''E'' AND NRORECIBO IS NULL) OR '||
                                         '(STATUSREG <> ''F'' AND TIPO <> ''E'' AND NRORECIBOANT IS NOT NULL) '||
                                        ')';
            ELSE
                P_FILTRO_MERGE := ' AND EXISTS(SELECT 1 '||
                                              'FROM '||EVE.NOMETABPAI||' P '||
                                              'WHERE P.CODEMP = '||EVE.NOMETAB||'.CODEMP '||
                                                  'AND P.DTREF = :DTREF '||
                                                  'AND P.TPAMB = '||EVE.NOMETAB||'.TPAMB '||
                                                  'AND P.SEQUENCIA = :SEQUENCIA ' ||
                                                  'AND P.CHAVE = '||EVE.NOMETAB||'.CHAVE '||
                                                  'AND P.TIPO = ''E'') ';
            END IF; 

            queSql :=      'MERGE INTO '||EVE.NOMETAB||' N '
                        || 'USING (SELECT '||P_INSERT_COLUMNS||' '
                        ||        'FROM '||EVE.NOMETAB||' ' 
                        ||        'WHERE CODEMP = :CODEMP '
                        ||            'AND DTREF = :DTREF_OLD '
                        ||            'AND TPAMB = :TPAMB '
                        ||            'AND SEQUENCIA = :SEQUENCIA_OLD '
                        ||            P_FILTRO_MERGE
                        ||        ') O ' 
                        || 'ON (N.CODEMP = O.CODEMP '
                        || 'AND N.DTREF = :DTREF '
                        || 'AND N.TPAMB = O.TPAMB '
                        || 'AND N.SEQUENCIA = :SEQUENCIA ' 
                        || 'AND N.CHAVE = O.CHAVE )'
                        || 'WHEN NOT MATCHED THEN INSERT ('||P_INSERT_COLUMNS||') '
                        || 'VALUES ('||P_INSERT_VALUES||')';

            IF EVE.NOMETABPAI IS NULL THEN
                EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF_OLD, P_TPAMB, P_SEQUENCIA_OLD, P_DTREF, P_SEQUENCIA_NEW, P_DTREF, P_SEQUENCIA_NEW;
            ELSE 
                EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF_OLD, P_TPAMB, P_SEQUENCIA_OLD, P_DTREF, P_SEQUENCIA_NEW, P_DTREF, P_SEQUENCIA_NEW, P_DTREF, P_SEQUENCIA_NEW;
            END IF;
        END IF;

        IF EVE.GRUPO = 'C' THEN  /*MOVIMENTOS GRAVAM OS EVENTOS FILHOS PRIMEIRO*/     
            FOR EVEF IN (SELECT NOMEEVENTO, NOMETAB
                         FROM TRIMON
                         WHERE NOMETABPAI = EVE.NOMETAB
                         GROUP BY NOMEEVENTO, NOMETAB
                         ORDER BY NOMEEVENTO 
                        ) 
            LOOP
                SNK_PROCESSA_DADOS_REINF(P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_ATUAL, P_TIPDADOS, EVEF.NOMEEVENTO, EVEF.NOMETAB, P_SEQUENCIA_NEW, P_RESULT);
            END LOOP;
        END IF;

        P_RESULT := P_SEQUENCIA_NEW;
    END LOOP;

    /*CHAMANDO A TOTALIZAÇÃO DO RESUMO PARA A SEQUENCIA GERADA*/
    IF P_NOMETAB IS NULL THEN
        SNK_TOTALIZA_RESUMO_REINF(P_CODEMP, P_DTREF, P_TPAMB, P_RESULT);
    END IF;    
EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    IF queSql IS NOT NULL THEN
        SELECT COUNT(1) INTO P_COUNT
        FROM LOGREINF
        WHERE DTOCOR = SYSDATE
         AND CODUSU = STP_GET_CODUSULOGADO();
        IF P_COUNT = 0 THEN
            INSERT INTO LOGREINF(DTOCOR, CODUSU, SQLERR)
                SELECT SYSDATE, STP_GET_CODUSULOGADO(), queSql FROM DUAL; 
        END IF;
    END IF;
    COMMIT;
    RAISE_APPLICATION_ERROR(-20101, SQLERRM);
END;
/
 
 
 
/*
Requer    : 4210011
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 55440-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5543900
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_PROCESSA_DADOS_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210012
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_PROCESSA_DADOS_REINF' NOMEOBJ, 55439 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, '77b40fa9abb63f3b33d78e857efd99aa' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_PROCESSA_DADOS_REINF' and THO.hashcode = '77b40fa9abb63f3b33d78e857efd99aa')
/
 
 
 
/*
Requer    : 4210011
Conexao   : ORCL
Data      : 22/05/2018 15:59:23
Num.Script: 55725-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5572400
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_PROCESSA_DADOS_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210012
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_PROCESSA_DADOS_REINF' NOMEOBJ, 55724 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, '77b40fa9abb63f3b33d78e857efd99aa' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_PROCESSA_DADOS_REINF' and THO.hashcode = '77b40fa9abb63f3b33d78e857efd99aa')
/
 
 
 
/*
Conexao   : ORCL
NomeObjeto: UPDATE TSIPAR INTEIRO
TipoObjeto: TABLE
NomeTabela: 
Executar  : SEMPRE
Ocorrencia: 4210013
FullVersao: Sim
*/
 
 
UPDATE TSIPAR SET INTEIRO = 4210012 WHERE CHAVE = 'VERSAOATUALDB'
/
 
 
 
/*
Requer    : 4210012
Conexao   : ORCL
Data      : 15/05/2018 17:45:52
Num.Script: 55465-0-0
Nro. O.S. : 1182676
Nome      : Alterar - VGF_EVENTO_S2299
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VGF_EVENTO_S2299
NomeObjeto: VGF_EVENTO_S2299
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210013
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2299
AS
SELECT CAST(VEMP.TPINSCEMPREGADOR AS NUMBER(5)) AS TPINSCEMPREGADOR,
      BAS.REFERENCIA AS DTREF,    
      VEMP.NRINSCEMPREGADOR,
      FUN.CPF AS "CPFTRAB",
      FUN.PIS AS "NISTRAB",
      CAST((CASE WHEN FUN.DTDEM >= VEMP.DTTERCEIRAFASE THEN
        CASE WHEN BAS.CODCONV IS NOT NULL THEN BAS.DIASTRAB ELSE NULL END 
      ELSE NULL END) AS NUMBER(5)) AS QTDDIASINTERM,
      CAST (FUN.MATRICULA AS VARCHAR2 (30)) AS "MATRICULA",
      (SELECT CODMOTDESLIGESOCIAL FROM TFPTPR TPR WHERE TPR.CODTPR = FUN.CODTPR) AS MTVDESLIG,
      FUN.DTDEM AS "DTDESLIG",
      CASE WHEN AVI.TIPAVISO = 2 THEN 'S' ELSE 'N' END AS INDPAGTO,
      AVI.DTFIMAVISO AS DTPROJFIMAPI,
      CASE WHEN NVL(RESFOL.VALOR,0) = 0  THEN '0' ELSE '2' END AS PENSALIM,
      0 AS PERCALIM,
      NVL(RESFOL.VALOR,0) AS VRALIM,
      FUN.NRCERTOBITO AS NRCERTOBITO,
      NULL AS PRPROCTRAB,
      CASE WHEN FUN.DTDEM >= VEMP.DTTERCEIRAFASE THEN BAS.INDMV ELSE NULL END AS INDMV,
      CASE WHEN AVI.INDCUMPRPARC = NULL THEN '0' ELSE CAST (AVI.INDCUMPRPARC AS CHAR) END AS INDCUMPRPARC,
      NULL AS OBSERVACAO,
      FUN.CNPJEMPANT AS CNPJSUCESSORA, -- errado, corrigir
      /* TAG transftit - conforme discutido com Leandro, nÃ£o temos caso de uso para essa situaÃ§Ã£o */
      NULL AS CPFSUBSTITUTO,
      CAST(NULL AS DATE) AS DTNASCTOSUBSTITUTO,
      FUN.DTFIMQUARENTENA AS DTFIMQUAR,
      FUN.IDCONSIG,
      FUN.INSCONSIG,
      FUN.NRCONTR,
      VEMP.CODEMPMATRIZ AS CODEMP,
      CAST(CAST(FUN.CODEMP AS VARCHAR2(10))  || ':' || CAST(FUN.CODFUNC AS VARCHAR2(10)) AS VARCHAR2(100)) AS "CHAVE"
  FROM TFPFUN FUN LEFT JOIN TFPAVI AVI
    ON AVI.CODFUNC = FUN.CODFUNC AND AVI.CODEMP = FUN.CODEMP
    JOIN TFPBAS BAS
      ON BAS.CODEMP = FUN.CODEMP 
     AND BAS.CODFUNC = FUN.CODFUNC 
     AND BAS.TIPFOLHA = 'R'
     AND (BAS.LIBESOCIAL = 'S' OR (BAS.REFERENCIA >= (SELECT DTCARGAINICIAL 
													  FROM VGF_EVENTO_EMPREGADOR EMPR 
													  WHERE FUN.CODEMP = EMPR.CODEMP) 
								   AND BAS.REFERENCIA < (SELECT DTTERCEIRAFASE 
													     FROM VGF_EVENTO_EMPREGADOR EMPR 
														 WHERE FUN.CODEMP = EMPR.CODEMP)))
    LEFT JOIN (SELECT NVL(SUM(FOL.VLREVENTO), 0) AS VALOR, FOL.CODFUNC, FOL.CODEMP
                 FROM TFPFOL FOL, TFPEVE EVE
                WHERE FOL.TIPFOLHA = 'R'
                  AND FOL.REFERENCIA >= TRUNC(SYSDATE - 60,'MONTH')
                  AND EVE.CODEVENTO = FOL.CODEVENTO
                  AND EVE.IDENTIFICACAO IN (148, 149, 150, 166, 167, 168)
               GROUP BY FOL.CODFUNC, FOL.CODEMP) RESFOL ON RESFOL.CODFUNC = FUN.CODFUNC AND RESFOL.CODEMP = FUN.CODEMP          
    , VGF_EVENTO_EMPREGADOR VEMP
 WHERE FUN.CODEMP = VEMP.CODEMP
   AND FUN.CODCATEGESOCIAL < 701
   AND FUN.CODCATEGESOCIAL NOT IN (301, 302, 303, 304, 305, 306, 307, 308, 309, 410) /* ORGAO PUBLICO */
   AND FUN.VINCULO <> 99
   AND FUN.SITESOCIAL IN ('O','5','6','T')
   AND FUN.SITUACAO = 0
   AND VEMP.DTCARGAINICIAL IS NOT NULL
   AND FUN.DTDEM >= VEMP.DTCARGAINICIAL /* O CABECALHO DO DESLIGAMENTO S-2299 ENTRA NA SEGUNDA FASE E OS RESTANTE DAS TAGS NA TERCEIRA */   
/
 
 
 
/*
Requer    : 4210012
Conexao   : ORCL
Data      : 15/05/2018 17:51:39
Num.Script: 55501-0-0
Nro. O.S. : 1184083
Nome      : Alterar - VGF_EVENTO_S1010
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VGF_EVENTO_S1010
NomeObjeto: VGF_EVENTO_S1010
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210013
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1010
AS
   SELECT CASE
             WHEN LENGTH (
                     (SELECT EP.CGC
                        FROM TSIEMP EP
                       WHERE CODEMP = NVL (EMP.CODEMPMATRIZ, EMP.CODEMP))) =
                     14
             THEN
                1
             ELSE
                2
          END
             AS "TPINSCEMPREGADOR",
          (SELECT CASE
                     WHEN (SELECT LOGICO
                             FROM TSIPAR
                            WHERE CHAVE = 'FPTRIBUNAL') = 'S'
                     THEN
                        EP.CGC
                     ELSE
                        SUBSTR (EP.CGC, 1, 8)
                  END
             FROM TSIEMP EP
            WHERE CODEMP = NVL (EMP.CODEMPMATRIZ, EMP.CODEMP))
             AS "NRINSCEMPREGADOR",
          CAST (EVE.CODEVENTO AS VARCHAR2(20)) AS "CODRUBR",
          CAST (EVE.CODEVENTO AS VARCHAR2(20)) AS "IDETABRUBR",
          DESCREVENTO AS "DSCRUBR",
          CAST (CODNATRUBRICA AS INTEGER) AS "NATRUBR",
          CASE
             WHEN TIPEVENTO = 1 AND BASELIQUIDO = 'S' THEN 1
             WHEN TIPEVENTO = -1 AND BASELIQUIDO = 'S' THEN 2
             WHEN TIPEVENTO = 1 AND BASELIQUIDO = 'N' THEN 3
             ELSE 4
          END
             AS "TPRUBR",
          CASE WHEN EVE.CODINCCP IS NULL THEN
		  CAST (
             (CASE
                 WHEN     TIPOINSS = 1
                      AND BASELIQUIDO = 'S'
                      AND EVE.IDENTIFICACAO = 0
                      AND NOT EXISTS
                            (SELECT TIPINSS
                               FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                              WHERE     PSS.ABRANPROCESSO = 3
                                    AND PSS.NUPROCESSO = PSE.NUPROCESSO
                                    AND EMP.CODEMP = PSE.CODEMP
                                    AND PSS.NUPROCESSO = EPR.NUPROCESSO
                                    AND EPR.CODEVENTO = EVE.CODEVENTO)
                 THEN
                    11
                 WHEN     TIPOINSS = 2
                      AND BASELIQUIDO = 'S'
                      AND EVE.IDENTIFICACAO = 0
                      AND NOT EXISTS
                            (SELECT TIPINSS
                               FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                              WHERE     PSS.ABRANPROCESSO = 3
                                    AND PSS.NUPROCESSO = PSE.NUPROCESSO
                                    AND EMP.CODEMP = PSE.CODEMP
                                    AND PSS.NUPROCESSO = EPR.NUPROCESSO
                                    AND EPR.CODEVENTO = EVE.CODEVENTO)
                 THEN
                    12
                 WHEN IDENTIFICACAO = 117 AND BASELIQUIDO = 'S'
                      AND NOT EXISTS
                            (SELECT TIPINSS
                               FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                              WHERE     PSS.ABRANPROCESSO = 3
                                    AND PSS.NUPROCESSO = PSE.NUPROCESSO
                                    AND EMP.CODEMP = PSE.CODEMP
                                    AND PSS.NUPROCESSO = EPR.NUPROCESSO
                                    AND EPR.CODEVENTO = EVE.CODEVENTO)
                 THEN
                    21
                 WHEN IDENTIFICACAO = 118 AND BASELIQUIDO = 'S'
                      AND NOT EXISTS
                            (SELECT TIPINSS
                               FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                              WHERE     PSS.ABRANPROCESSO = 3
                                    AND PSS.NUPROCESSO = PSE.NUPROCESSO
                                    AND EMP.CODEMP = PSE.CODEMP
                                    AND PSS.NUPROCESSO = EPR.NUPROCESSO
                                    AND EPR.CODEVENTO = EVE.CODEVENTO)
                 THEN
                    22
                 WHEN IDENTIFICACAO = 140
                 THEN
                    23
                 WHEN IDENTIFICACAO = 141
                 THEN
                    24
                 WHEN IDENTIFICACAO IN (101, 107, 109, 111)
                 THEN
                    31
                 WHEN IDENTIFICACAO = 104
                 THEN
                    32
                 WHEN IDENTIFICACAO = 113
                 THEN
                    34
                 WHEN IDENTIFICACAO = 129
                 THEN
                    35
                 WHEN IDENTIFICACAO = 116
                 THEN
                    51
                 WHEN IDENTIFICACAO = 142
                 THEN
                    61
                 WHEN (SELECT TIPINSS
                         FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                        WHERE     PSS.ABRANPROCESSO = 3
                              AND PSS.EXCLUSIVOEMP = 'N'
                              AND PSS.NUPROCESSO = PSE.NUPROCESSO
                              AND EMP.CODEMP = PSE.CODEMP
                              AND PSS.NUPROCESSO = EPR.NUPROCESSO
                              AND EPR.CODEVENTO = EVE.CODEVENTO) = 1
                 THEN
                    91
                 WHEN (SELECT TIPINSS
                         FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                        WHERE     PSS.ABRANPROCESSO = 3
                              AND PSS.EXCLUSIVOEMP = 'N'
                              AND PSS.NUPROCESSO = PSE.NUPROCESSO
                              AND EMP.CODEMP = PSE.CODEMP
                              AND PSS.NUPROCESSO = EPR.NUPROCESSO
                              AND EPR.CODEVENTO = EVE.CODEVENTO) = 2
                 THEN
                    92
                 WHEN (SELECT TIPINSS
                         FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                        WHERE     PSS.ABRANPROCESSO = 3
                              AND PSS.EXCLUSIVOEMP = 'N'
                              AND PSS.NUPROCESSO = PSE.NUPROCESSO
                              AND EMP.CODEMP = PSE.CODEMP
                              AND PSS.NUPROCESSO = EPR.NUPROCESSO
                              AND EPR.CODEVENTO = EVE.CODEVENTO) = 3
                 THEN
                    93
                 WHEN (SELECT TIPINSS
                         FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                        WHERE     PSS.ABRANPROCESSO = 3
                              AND PSS.EXCLUSIVOEMP = 'N'
                              AND PSS.NUPROCESSO = PSE.NUPROCESSO
                              AND EMP.CODEMP = PSE.CODEMP
                              AND PSS.NUPROCESSO = EPR.NUPROCESSO
                              AND EPR.CODEVENTO = EVE.CODEVENTO) = 4
                 THEN
                    94
                 WHEN (SELECT TIPINSS
                         FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                        WHERE     PSS.ABRANPROCESSO = 3
                              AND PSS.EXCLUSIVOEMP = 'S'
                              AND PSS.NUPROCESSO = PSE.NUPROCESSO
                              AND EMP.CODEMP = PSE.CODEMP
                              AND PSS.NUPROCESSO = EPR.NUPROCESSO
                              AND EPR.CODEVENTO = EVE.CODEVENTO) = 1
                 THEN
                    95
                 WHEN (SELECT TIPINSS
                         FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                        WHERE     PSS.ABRANPROCESSO = 3
                              AND PSS.EXCLUSIVOEMP = 'S'
                              AND PSS.NUPROCESSO = PSE.NUPROCESSO
                              AND EMP.CODEMP = PSE.CODEMP
                              AND PSS.NUPROCESSO = EPR.NUPROCESSO
                              AND EPR.CODEVENTO = EVE.CODEVENTO) = 2
                 THEN
                    96
                 WHEN (SELECT TIPINSS
                         FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                        WHERE     PSS.ABRANPROCESSO = 3
                              AND PSS.EXCLUSIVOEMP = 'S'
                              AND PSS.NUPROCESSO = PSE.NUPROCESSO
                              AND EMP.CODEMP = PSE.CODEMP
                              AND PSS.NUPROCESSO = EPR.NUPROCESSO
                              AND EPR.CODEVENTO = EVE.CODEVENTO) = 3
                 THEN
                    97
                 WHEN (SELECT TIPINSS
                         FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                        WHERE     PSS.ABRANPROCESSO = 3
                              AND PSS.EXCLUSIVOEMP = 'S'
                              AND PSS.NUPROCESSO = PSE.NUPROCESSO
                              AND EMP.CODEMP = PSE.CODEMP
                              AND PSS.NUPROCESSO = EPR.NUPROCESSO
                              AND EPR.CODEVENTO = EVE.CODEVENTO) = 4
                 THEN
                    98
                 ELSE
                    0
              END) AS VARCHAR2(2))
		ELSE EVE.CODINCCP 
		END AS "CODINCCP",
        CASE WHEN EVE.CODINCIRRF IS NULL THEN 
		 CAST (
             (CASE
                 WHEN     EVE.TIPOIRRF IN (1, 3, 4, 5)
                      AND EVE.BASELIQUIDO = 'S'
                 THEN
                    11
                 WHEN     EVE.TIPOIRRF = 2
                      AND EVE.BASELIQUIDO = 'S'
                 THEN
                    12
                 WHEN     EVE.TIPOIRRF = 6
                      AND EVE.BASELIQUIDO = 'S'
                 THEN
                    13
                 WHEN     EVE.TIPOIRRF = 7
                      AND EVE.BASELIQUIDO = 'S'
                 THEN
                    14
                 WHEN     EVE.TIPOIRRF = 8
                      AND EVE.IDENTIFICACAO = 0
                      AND EVE.BASELIQUIDO = 'S'
                 THEN
                    15
                 WHEN EVE.IDENTIFICACAO IN (103, 108, 110, 112)
                      AND FERIAS = 'N'
                 THEN
                    31
                 WHEN EVE.IDENTIFICACAO = 106
                 THEN
                    32
                 WHEN EVE.IDENTIFICACAO = 103 AND FERIAS = 'S'
                 THEN
                    33
                 WHEN EVE.IDENTIFICACAO = 130
                 THEN
                    34
                 WHEN EVE.IDENTIFICACAO = 143
                 THEN
                    35
                 WHEN EVE.BASEINFREND = 'I' AND FERIAS = 'N'
                 THEN
                    41
                 WHEN EVE.BASEINFREND = 'E'
                 THEN
                    42
                 WHEN EVE.IDENTIFICACAO = 101 AND FERIAS = 'S'
                 THEN
                    43
                 WHEN EVE.IDENTIFICACAO = 144
                 THEN
                    44
                 WHEN EVE.BASEINFREND = 'H'
                 THEN
                    46
                 WHEN EVE.IDENTIFICACAO = 145
                 THEN
                    47
                 WHEN EVE.BASEINFREND = 'J' AND TIPEVENTO = -1
                 THEN
                    51
                 WHEN EVE.BASEINFREND = 'G' AND TIPEVENTO = -1
                 THEN
                    52
                 WHEN EVE.IDENTIFICACAO = 146
                 THEN
                    53
                 WHEN EVE.IDENTIFICACAO = 147
                 THEN
                    54
                 WHEN EVE.IDENTIFICACAO = 148
                 THEN
                    55
                 WHEN EVE.IDENTIFICACAO = 150
                 THEN
                    61
                 WHEN EVE.IDENTIFICACAO = 151
                 THEN
                    62
                 WHEN EVE.IDENTIFICACAO = 152
                 THEN
                    63
                 WHEN EVE.IDENTIFICACAO = 153
                 THEN
                    64
                 WHEN EVE.BASEINFREND = 'A'
                 THEN
                    70
                 WHEN EVE.IDENTIFICACAO = 154
                 THEN
                    71
                 WHEN EVE.BASEINFREND = 'D'
                 THEN
                    72
                 WHEN EVE.IDENTIFICACAO = 155
                 THEN
                    73
                 WHEN EVE.BASEINFREND = 'Z'
                 THEN
                    74
                 WHEN EVE.BASEINFREND = 'W'
                 THEN
                    75
                 WHEN EVE.BASEINFREND = 'P'
                 THEN
                    76
                 WHEN EVE.IDENTIFICACAO = 156
                 THEN
                    77
                 WHEN EVE.BASEINFREND = 'B'
                 THEN
                    78
                 WHEN EVE.BASEINFREND = 'O'
                 THEN
                    79
                 WHEN EVE.IDENTIFICACAO = 157
                 THEN
                    81
                 WHEN EVE.IDENTIFICACAO = 158
                 THEN
                    82
                 WHEN EVE.IDENTIFICACAO = 159
                 THEN
                    83
                 WHEN (SELECT TIPIRRF
                         FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                        WHERE     PSS.ABRANPROCESSO = 5
                              AND PSS.NUPROCESSO = PSE.NUPROCESSO
                              AND EMP.CODEMP = PSE.CODEMP
                              AND PSS.NUPROCESSO = EPR.NUPROCESSO
                              AND EPR.CODEVENTO = EVE.CODEVENTO) = 1
                 THEN
                    91
                 WHEN (SELECT TIPIRRF
                         FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                        WHERE     PSS.ABRANPROCESSO = 5
                              AND PSS.NUPROCESSO = PSE.NUPROCESSO
                              AND EMP.CODEMP = PSE.CODEMP
                              AND PSS.NUPROCESSO = EPR.NUPROCESSO
                              AND EPR.CODEVENTO = EVE.CODEVENTO) = 2
                 THEN
                    92
                 WHEN (SELECT TIPIRRF
                         FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                        WHERE     PSS.ABRANPROCESSO = 5
                              AND PSS.NUPROCESSO = PSE.NUPROCESSO
                              AND EMP.CODEMP = PSE.CODEMP
                              AND PSS.NUPROCESSO = EPR.NUPROCESSO
                              AND EPR.CODEVENTO = EVE.CODEVENTO) = 3
                 THEN
                    93
                 WHEN (SELECT TIPIRRF
                         FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                        WHERE     PSS.ABRANPROCESSO = 5
                              AND PSS.NUPROCESSO = PSE.NUPROCESSO
                              AND EMP.CODEMP = PSE.CODEMP
                              AND PSS.NUPROCESSO = EPR.NUPROCESSO
                              AND EPR.CODEVENTO = EVE.CODEVENTO) = 4
                 THEN
                    94
                 WHEN (SELECT TIPIRRF
                         FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                        WHERE     PSS.ABRANPROCESSO = 5
                              AND PSS.NUPROCESSO = PSE.NUPROCESSO
                              AND EMP.CODEMP = PSE.CODEMP
                              AND PSS.NUPROCESSO = EPR.NUPROCESSO
                              AND EPR.CODEVENTO = EVE.CODEVENTO) = 8
                 THEN
                    95
                 ELSE
                    0
              END) AS VARCHAR2(2))
         ELSE EVE.CODINCIRRF END AS "CODINCIRRF",
         CASE WHEN EVE.CODINCFGTS IS NULL THEN 
		  CAST (
             (CASE
                 WHEN     FGTS = 'S'
                      AND EVE.TIPEVENTO = 1
                      AND EVE.BASELIQUIDO = 'S'
                      AND NOT EXISTS
                            (SELECT PSS.ABRANPROCESSO
                               FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                              WHERE     PSS.ABRANPROCESSO = 4
                                    AND PSS.NUPROCESSO = PSE.NUPROCESSO
                                    AND EMP.CODEMP = PSE.CODEMP
                                    AND PSS.NUPROCESSO = EPR.NUPROCESSO
                                    AND EPR.CODEVENTO = EVE.CODEVENTO)
                 THEN
                    11
                 WHEN     FGTSDECTERCEIRO = 'S'
                      AND EVE.BASELIQUIDO = 'S'
                 THEN
                    12
                 WHEN     FGTSRESCISAO = 'S'
                      AND EVE.BASELIQUIDO = 'S'
                 THEN
                    21
                 WHEN (SELECT PSS.ABRANPROCESSO
                         FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                        WHERE     PSS.ABRANPROCESSO = 4
                              AND PSS.NUPROCESSO = PSE.NUPROCESSO
                              AND EMP.CODEMP = PSE.CODEMP
                              AND PSS.NUPROCESSO = EPR.NUPROCESSO
                              AND EPR.CODEVENTO = EVE.CODEVENTO) = 4
                 THEN
                    91
                 ELSE
                    00
              END) AS VARCHAR2(2))
            ELSE EVE.CODINCFGTS END AS "CODINCFGTS",
          CASE WHEN EVE.CODINCSIND IS NULL THEN
		  CAST (
             (CASE
                 WHEN CONTRIBSIND = 'S'
                      AND NOT EXISTS
                            (SELECT PSS.ABRANPROCESSO
                               FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                              WHERE     PSS.ABRANPROCESSO = 6
                                    AND PSS.NUPROCESSO = PSE.NUPROCESSO
                                    AND EMP.CODEMP = PSE.CODEMP
                                    AND PSS.NUPROCESSO = EPR.NUPROCESSO
                                    AND EPR.CODEVENTO = EVE.CODEVENTO)
                 THEN
                    11
                 WHEN EVE.IDENTIFICACAO = 160
                 THEN
                    31
                 WHEN (SELECT PSS.ABRANPROCESSO
                         FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                        WHERE     PSS.ABRANPROCESSO = 6
                              AND PSS.NUPROCESSO = PSE.NUPROCESSO
                              AND EMP.CODEMP = PSE.CODEMP
                              AND PSS.NUPROCESSO = EPR.NUPROCESSO
                              AND EPR.CODEVENTO = EVE.CODEVENTO) = 6
                 THEN
                    91
                 ELSE
                    00
              END) AS VARCHAR2(2))
            ELSE EVE.CODINCSIND END AS "CODINCSIND",
          RUBRICADSR AS "REPDSR",
          RUBRICA13 AS "REP13",
          RUBRICAFERIAS AS "REPFERIAS",
          RUBRICARESCISAO AS "REPAVISO",
          CAST ('' AS VARCHAR2(255)) AS "OBSERVACAO",
          EMP.CODEMP AS "CODEMP",
          CAST (EVE.CODEVENTO AS VARCHAR2(100)) AS "CHAVE",
          EVE.CODEVENTO AS "CODEVENTO"
     FROM TFPRBR RBR, TFPEVE EVE, TSIEMP EMP
    WHERE     RBR.CODEMP = EMP.CODEMP
          AND RBR.CODEVENTO = EVE.CODEVENTO
          AND EVE.USADOESOCIAL = 'S'
/
 
 
 
/*
Requer    : 4210012
Conexao   : ORCL
Data      : 15/05/2018 17:51:33
Num.Script: 55502-0-0
Nro. O.S. : 1184083
Nome      : Alterar - VGF_EVENTO_S2399
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VGF_EVENTO_S2399
NomeObjeto: VGF_EVENTO_S2399
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210013
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2399
AS
SELECT VEMP.TPINSCEMPREGADOR,
       VEMP.NRINSCEMPREGADOR,
       BAS.REFERENCIA AS DTREF,
       FUN.CPF AS "CPFTRAB",
       FUN.PIS AS "NISTRAB",
       FUN.CODCATEGESOCIAL AS CODCATEG,         
       FUN.DTDEM AS DTTERMINO,
       BAS.INDMV,
       CASE WHEN CODCATEGESOCIAL = 721 THEN FUN.MTVDESLIGTSV ELSE NULL END AS MTVDESLIG,
       FUN.DTFIMQUARENTENA AS DTFIMQUAR,
       VEMP.CODEMPMATRIZ AS CODEMP,
       CAST(FUN.CODEMP AS VARCHAR2(100))|| ':' || CAST(FUN.CODFUNC AS VARCHAR(100)) AS "CHAVE"
   FROM TFPFUN FUN 
       LEFT JOIN TFPAVI AVI
     ON AVI.CODFUNC = FUN.CODFUNC AND AVI.CODEMP = FUN.CODEMP
       JOIN TFPBAS BAS
     ON BAS.CODEMP = FUN.CODEMP 
    AND BAS.CODFUNC = FUN.CODFUNC 
    AND BAS.TIPFOLHA = 'R'
    AND BAS.LIBESOCIAL = 'S'
       LEFT JOIN (SELECT NVL(SUM(FOL.VLREVENTO), 0) AS VALOR, FOL.CODFUNC, FOL.CODEMP
                 FROM TFPFOL FOL, TFPEVE EVE
                WHERE FOL.TIPFOLHA = 'R'
                AND FOL.REFERENCIA  >= TRUNC(SYSDATE - 60,'MONTH')
                AND EVE.CODEVENTO = FOL.CODEVENTO
                AND EVE.IDENTIFICACAO IN (148, 149, 150, 166, 167, 168)
                GROUP BY FOL.CODFUNC, FOL.CODEMP) RESFOL ON RESFOL.CODFUNC = FUN.CODFUNC AND RESFOL.CODEMP = FUN.CODEMP    
     , VGF_EVENTO_EMPREGADOR VEMP
  WHERE FUN.CODEMP = VEMP.CODEMP
    AND FUN.CODCATEGESOCIAL >= 701
    AND FUN.SITESOCIAL IN ('O','5','6','T')
    AND FUN.SITUACAO = 0
    AND FUN.DTDEM >= VEMP.DTTERCEIRAFASE
 /
 
 
 
/*
Requer    : 4210012
Conexao   : ORCL
Data      : 15/05/2018 11:38:04
Num.Script: 55511-0-0
Nro. O.S. : 1184311
Nome      : Alterar - VGF_EVENTO_S2200_BASE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VGF_EVENTO_S2200_BASE
NomeObjeto: VGF_EVENTO_S2200_BASE
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210013
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2200_BASE
AS
 SELECT VEMP.TPINSCEMPREGADOR,
          VEMP.NRINSCEMPREGADOR,
          FUN.CPF AS "CPFTRAB",
          FUN.PIS AS "NISTRAB",
          FUN.NOMEFUNC AS "NMTRAB",
          FUN.DTALTER AS DTALTERACAO,
          CAST(NULL AS DATE) AS DTREF,
          NULL AS EMAILALTERNAT,
          CAST (FUN.SEXO AS CHAR (1)) AS "SEXO",
          CASE
             WHEN RACAFUNCIONARIO = 2 THEN 1
             WHEN RACAFUNCIONARIO = 4 THEN 2
             WHEN RACAFUNCIONARIO = 8 THEN 3
             WHEN RACAFUNCIONARIO = 6 THEN 4
             WHEN RACAFUNCIONARIO = 0 THEN 5
             ELSE 6
          END
             AS "RACACOR",
          CASE
             WHEN FUN.ESTADOCIVIL = 3 THEN 5
             WHEN FUN.ESTADOCIVIL IN (5, 6) THEN 3
             WHEN FUN.ESTADOCIVIL = 7 THEN 2
             ELSE FUN.ESTADOCIVIL
          END
             AS "ESTCIV",
          CAST (
             CASE
                WHEN FUN.NIVESC = 10 THEN 11
                WHEN FUN.NIVESC = 11 THEN 12
                ELSE FUN.NIVESC
             END AS VARCHAR2 (2))
             AS "GRAUINSTR",
          CASE WHEN FUN.PRIMEMPREGO = 'S' THEN 'S' ELSE 'N' END "INDPRIEMPR",
          FUN.NMSOCIAL AS "NMSOC",
          FUN.DTNASC AS "DTNASCTONASCIMENTO",
          (SELECT CODMUNFIS
             FROM TSICID
            WHERE CODCID = FUN.CIDNASC)
             AS "CODMUNICNASCIMENTO",
          (SELECT UFS.UF
             FROM TSIUFS UFS, TSICID CID
            WHERE UFS.CODUF = CID.UF AND CID.CODCID = FUN.CIDNASC)
             AS "UFNASCIMENTO",
          (SELECT SUBSTR (CAST (CODPAISFIS AS VARCHAR2 (5)), 1, 3)
             FROM TSIPAI PAI, TSIUFS UFS, TSICID CID
            WHERE     UFS.CODUF = CID.UF
                  AND CID.CODCID = FUN.CIDNASC
                  AND PAI.CODPAIS = UFS.CODPAIS)
             AS "PAISNASCTONASCIMENTO",
          (SELECT SUBSTR (CAST (CODPAISFIS AS VARCHAR2 (5)), 1, 3)
             FROM TSIPAI PAI
            WHERE PAI.CODPAIS = FUN.CODPAISNAC)
             AS "PAISNACNASCIMENTO",
          FUN.NOMEMAE AS "NMMAENASCIMENTO",
          FUN.NOMEPAI AS "NMPAINASCIMENTO",
          CASE 
              WHEN LENGTH(FUN.NUMCPS) < 3 AND FUN.NUMCPS <> '' AND FUN.NUMCPS IS NOT NULL THEN CAST(LPAD(FUN.NUMCPS,2,0) AS VARCHAR(11))
              WHEN LENGTH(FUN.NUMCPS) >= 3 THEN SUBSTR(CAST(FUN.NUMCPS AS VARCHAR(11)), 1, 11)
              WHEN FUN.NUMCPS = '' OR FUN.NUMCPS IS NULL THEN NULL
          END
              AS "NRCTPS",
          
          FUN.SERIECPS AS "SERIECTPS",
          (SELECT UF
             FROM TSIUFS
            WHERE CODUF = FUN.UFCPS)
             AS "UFCTPS",
          FUN.NRORIC AS "NRRIC",
          FUN.ORGAORIC AS "ORGAOEMISSORRIC",
          FUN.DTEMIRIC AS "DTEXPEDRIC",
          REPLACE (
             REPLACE (REPLACE (REPLACE (FUN.IDENTIDADE, '-', ''), '/', ''),
                      '.',
                      ''),
             ' ',
             '')
             AS "NRRG",
          FUN.ORGAORG AS "ORGAOEMISSORRG",
          FUN.DTRG AS "DTEXPEDRG",
          SUBSTR (FUN.RNE, 1, 14) AS NRRNE,
          FUN.ORGAORNE AS "ORGAOEMISSORRNE",
          FUN.DTEXPRNE AS "DTEXPEDRNE",
          FUN.NROC AS "NROC",
          FUN.ORGAOOC AS "ORGAOEMISSOROC",
          FUN.DTEXPOC AS "DTEXPEDOC",
          FUN.DTVALOC AS "DTVALIDOC",
          CASE WHEN FUN.NROCNH = '' THEN NULL ELSE FUN.NROCNH END AS "NRREGCNH",
          FUN.DTEXPCNH AS "DTEXPEDCNH",
          (SELECT UF
             FROM TSIUFS
            WHERE CODUF = FUN.UFCNH)
             AS "UFCNH",
          FUN.VENCIMENTOCNH AS "DTVALIDCNH",
          FUN.PRIMEIRACNH AS "DTPRIHAB",
          SUBSTR (FUN.CATEGORIACNH, 1, 2) AS "CATEGORIACNH",
          EN.CODLOGRADOURO AS "TPLOGRADBRASIL",
          EN.NOMEEND AS "DSCLOGRADBRASIL",
          FUN.NUMEND AS "NRLOGRADBRASIL",
          FUN.COMPLEMENTO AS "COMPLEMENTOBRASIL",
          BAI.NOMEBAI AS "BAIRROBRASIL",
          FUN.CEP AS "CEPBRASIL",
          CAST (CID.CODMUNFIS AS VARCHAR2 (7)) AS "CODMUNICBRASIL",
          UFS.UF AS "UFBRASIL",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105
             THEN
                SUBSTR (PA.CODPAISFIS, 1, 3)
             ELSE
                NULL
          END
             AS "PAISRESID",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105 THEN EN.NOMEEND
             ELSE NULL
          END
             AS "DSCLOGRADEXTERIOR",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105 THEN FUN.NUMEND
             ELSE NULL
          END
             AS "NRLOGRADEXTERIOR",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105 THEN FUN.COMPLEMENTO
             ELSE NULL
          END
             AS "COMPLEMENTOEXTERIOR",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105 THEN BAI.NOMEBAI
             ELSE NULL
          END
             AS "BAIRROEXTERIOR",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105 THEN CID.NOMECID
             ELSE NULL
          END
             AS "NMCIDEXTERIOR",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105 THEN FUN.CAIXAPOSTAL
             ELSE NULL
          END
             AS "CODPOSTALEXTERIOR",
          FUN.DTCHEGPAIS AS "DTCHEGADA",
          FUN.CLASSTRABESTRANG,
          FUN.CASADOBR AS "CASADOBR",
          FUN.FILHOSBR AS "FILHOSBR",
          CASE WHEN FUN.TIPDEFICIENCIA IN (0, 5, 7) THEN 'N' ELSE 'S' END
             AS "DEFFISICA",
          CASE WHEN FUN.TIPDEFICIENCIA = 3 THEN 'S' ELSE 'N' END
             AS "DEFVISUAL",
          CASE WHEN FUN.TIPDEFICIENCIA = 2 THEN 'S' ELSE 'N' END
             AS "DEFAUDITIVA",
          CASE WHEN FUN.TIPDEFICIENCIA = 8 THEN 'S' ELSE 'N' END
             AS "DEFMENTAL",
          CASE WHEN FUN.TIPDEFICIENCIA = 4 THEN 'S' ELSE 'N' END
             AS "DEFINTELECTUAL",
          CASE WHEN FUN.TIPDEFICIENCIA = 6 THEN 'S' ELSE 'N' END
             AS "REABREADAP",
          FUN.INFOCOTA AS "INFOCOTA",
          CASE WHEN FUN.OBSDEFICIENCIA = '' THEN NULL ELSE FUN.OBSDEFICIENCIA END AS "OBSERVACAO",
          FUN.TRABAPOSENT AS "TRABAPOSENT",
          CASE
             WHEN LENGTH (TRIM (FUN.TELEFONE)) < 10 THEN NULL
             ELSE REPLACE (FUN.TELEFONE, ' ', '')
          END
             AS "FONEPRINC",
          CASE
             WHEN LENGTH (TRIM (FUN.CELULAR)) < 10 THEN NULL
             ELSE REPLACE (FUN.CELULAR, ' ', '')
          END
             AS "FONEALTERNAT",
          CASE WHEN FUN.EMAIL = '' THEN NULL ELSE FUN.EMAIL END AS "EMAILPRINC",
          CAST (FUN.MATRICULA AS VARCHAR2 (30)) AS "MATRICULA",
          CASE WHEN FUN.REGIMETRAB IN (2, 3) THEN 2 ELSE 1 END AS "TPREGTRAB",
          CASE
             WHEN FUN.REGIME IN (1, 3) THEN 2
             WHEN FUN.REGIME = 2 THEN 1
             ELSE 3
          END
             AS "TPREGPREV",
          (SELECT NVL (S.NRORECIBO, '')
             FROM TFPS2190 S
            WHERE     S.CODEMP = VEMP.CODEMPMATRIZ
                  AND S.CHAVE =
                         CAST (
                            FUN.CODEMP || ':' || FUN.CODFUNC AS VARCHAR2 (100))
                  AND S.TPAMB = SNK_GET_TPAMB_ESOCIAL
                  AND S.SEQUENCIA = SNK_GET_SEQ_ATUAL_ESOCIAL
                  AND S.DTREF = SNK_GET_DTREF_ESOCIAL)
             AS "NRRECINFPRELIM",
          CASE WHEN FUN.DTADM < VEMP.DTCARGAINICIAL THEN 'S' ELSE 'N' END
             AS "CADINI",
          FUN.DTADM AS "DTADM",
          CASE
             WHEN FUN.VINCULO IN (30, 31, 35)
             THEN
                NULL
             WHEN     FUN.PRIMEMPREGO  IN ('A', 'T')
                  AND SUBSTR (VEMP.NRINSCEMPREGADOR, 1, 8) = SUBSTR (EM.CGC, 1, 8)
             THEN
                1
             WHEN FUN.PRIMEMPREGO IN ('A', 'T') AND SUBSTR (VEMP.NRINSCEMPREGADOR, 1, 8) <> SUBSTR (EM.CGC, 1, 8)
             THEN
                2
             WHEN FUN.PRIMEMPREGO = 'H'
             THEN
                3
             WHEN FUN.PRIMEMPREGO = 'I'
             THEN
                4
             ELSE
                1
          END
             AS "TPADMISSAO",
          FUN.INDADMISSAO AS "INDADMISSAO",
          FUN.REGIMEJOR AS "TPREGJOR",
          (SELECT CASE WHEN TIPHORANOTURNA = 'U' THEN 1 ELSE 2 END
             FROM TFPCBO CBO
            WHERE CBO.CODCBO =
                     CASE
                        WHEN EXISTS
                                (SELECT 1
                                   FROM TSIPAR
                                  WHERE     CHAVE = 'FPUTILIZACBO'
                                        AND NVL (INTEIRO, 0) = 0)
                        THEN
                           (SELECT CODCBO
                              FROM TFPCAR C
                             WHERE C.CODCARGO = FUN.CODCARGO)
                        ELSE
                           (SELECT CODCBO
                              FROM TFPFCO F
                             WHERE F.CODFUNCAO = FUN.CODFUNCAO)
                     END)
             AS "NATATIVIDADE",
          (SELECT MESDATABASE
             FROM TFPPRE
            WHERE CODPREF = SIND.CODPREF)
             AS "DTBASE",
          SIND.CGC AS "CNPJSINDCATEGPROF",
          1 AS "OPCFGTS",
          FUN.DTOPTFGTS AS "DTOPCFGTS",
          CASE WHEN FUN.CONTTRABTEMP > 0 THEN FUN.CONTTRABTEMP ELSE NULL END
             AS "HIPLEG",
          SUBSTR (FUN.JUSTCONTR, 1, 999) AS "JUSTCONTR",
          FUN.TPINCLCONTR AS "TPINCLCONTR",
          FUN.TPINSCTOMADOR AS "TPINSCIDETOMADORSERV",
          FUN.NRINSCTOMADOR AS "NRINSCIDETOMADORSERV",
          FUN.TPINSCESTABVINC AS "TPINSCIDEESTABVINC",
          FUN.NRINSCESTABVINC AS "NRINSCIDEESTABVINC",
          FUN.CPFSUBSTITUIDO AS "CPFTRABSUBST",
          CASE WHEN PUB.CODEMP IS NOT NULL THEN PUB.INDPROVIM ELSE NULL END
             AS "INDPROVIM",
          CASE WHEN PUB.CODEMP IS NOT NULL THEN PUB.TPPROV ELSE NULL END
             AS "TPPROV",
          CASE
             WHEN PUB.CODEMP IS NOT NULL THEN PUB.DTDESIGNACAO
             ELSE NULL
          END
             AS "DTNOMEACAO",
          CASE WHEN PUB.CODEMP IS NOT NULL THEN PUB.DTPOSSE ELSE NULL END
             AS "DTPOSSE",
          CASE WHEN PUB.CODEMP IS NOT NULL THEN PUB.DTEXERC ELSE NULL END
             AS "DTEXERCICIO",
          PUB.TPPLANRP AS "TPPLANRP",
          CAST (PUB.NUPROCESSOJUD AS VARCHAR (20)) AS "NRPROCJUDINFODECJUD",
          CAST (CASE
                   WHEN (SELECT 1
                           FROM TSIPAR
                          WHERE CHAVE = 'FPUTILIZACBO' AND INTEIRO = 0) > 0
                   THEN
                      FUN.CODCARGO
                   ELSE
                      FUN.CODFUNCAO
                END AS VARCHAR (30))
             AS "CODCARGO",
          CAST (CASE
                   WHEN (SELECT LOGICO
                           FROM TSIPAR
                          WHERE CHAVE = 'FPTRIBUNAL') = 'S'
                   THEN
                      (SELECT CODFUNCAO
                         FROM TFPFCO
                        WHERE CODFUNCAO = FUN.CODFUNCAO)
                   ELSE
                      0
                END AS VARCHAR2 (30))
             AS "CODFUNCAO",
          FUN.CODCATEGESOCIAL AS "CODCATEG",
          CASE WHEN FUN.CODCATEGESOCIAL IN (104, 106) THEN 1 ELSE 0 END
             AS "CODCATEG2",
          CASE
             WHEN PUB.CODEMP IS NOT NULL
             THEN
                CAST (FUN.CODCARREIRA AS VARCHAR2 (30))
             ELSE
                NULL
          END
             AS "CODCARREIRA",
          PUB.DTINGRCARR AS "DTINGRCARR",
          CAST (
             CASE
                WHEN FUN.TIPSAL = 5 AND NVL (FUN.SALBASE, 0) = 0 THEN 0
                ELSE FUN.SALBASE
             END AS FLOAT)
             AS "VRSALFX",
          CASE
             WHEN FUN.TIPSAL = 1 THEN 5
             WHEN FUN.TIPSAL = 2 THEN 4
             WHEN FUN.TIPSAL = 3 THEN 3
             WHEN FUN.TIPSAL = 4 THEN 2
             WHEN FUN.TIPSAL = 5 AND NVL (FUN.SALBASE, 0) > 0 THEN 1
             WHEN FUN.TIPSAL = 5 AND NVL (FUN.SALBASE, 0) = 0 THEN 7
             WHEN FUN.COMPSALARIO = 2 THEN 8
             ELSE 6
          END
             AS "UNDSALFIXO",
          CASE
             WHEN FUN.TIPSAL = 5 AND NVL (FUN.SALBASE, 0) = 0
             THEN
                FUN.OBSVARIAVEL
             ELSE
                NULL
          END
             AS "DSCSALVAR",
          CASE
             WHEN FUN.VINCULO IN (10, 15, 20, 25, 30, 31, 35, 55) THEN 1
             WHEN FUN.VINCULO IN (60, 65, 70, 75, 95, 96, 97) THEN 2
             ELSE NULL
          END
             AS "TPCONTR",
          CASE
             WHEN FUN.VINCULO IN (60, 65, 70, 75, 95, 96, 97) THEN DTTERMINO
             ELSE NULL
          END
             AS "DTTERM",
          CAST (FUN.DIRRECIPROCO AS CHAR (1)) AS "CLAUASSEG",
          NVL((SELECT CASE WHEN LENGTH(E.CGC) = 14 THEN 1 ELSE 2 END
                    FROM TFPTOM TOM, TSIEMP E
                   WHERE TOM.CODPARC = E.CODPARC
                     AND TOM.CODEMP = E.CODEMP
                     AND TOM.CODEMP = FUN.CODEMP
                     AND TOM.CODFUNC = FUN.CODFUNC
                     AND TOM.DTINICIO =
                            (SELECT MAX (DTINICIO)
                               FROM TFPTOM TM
                              WHERE     TM.CODEMP = TOM.CODEMP
                                    AND TM.CODPARC = TOM.CODPARC
                                    AND TM.CODFUNC = TOM.CODFUNC)),
             VEMP.TPINSCEMPREGADOR)
             AS "TPINSCLOCALTRABGERAL",
          NVL (
             (SELECT E.CGC
                FROM TFPTOM TOM, TSIEMP E
               WHERE     TOM.CODPARC = E.CODPARC
                     AND TOM.CODEMP = E.CODEMP
                     AND TOM.CODEMP = FUN.CODEMP
                     AND TOM.CODFUNC = FUN.CODFUNC
                     AND TOM.DTINICIO =
                            (SELECT MAX (DTINICIO)
                               FROM TFPTOM TM
                              WHERE     TM.CODEMP = TOM.CODEMP
                                    AND TM.CODPARC = TOM.CODPARC
                                    AND TM.CODFUNC = TOM.CODFUNC)),
             VEMP.CGC)
             AS "NRINSCLOCALTRABGERAL",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                (SELECT CODLOGRADOURO
                   FROM TSIEND
                  WHERE CODEND = VEMP.CODEND)
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT (SELECT CODLOGRADOURO
                           FROM TSIEND
                          WHERE CODEND = PAR.CODEND)
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "TPLOGRADLOCALTRABDOM",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                (SELECT NOMEEND
                   FROM TSIEND
                  WHERE CODEND = VEMP.CODEND)
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT (SELECT NOMEEND
                           FROM TSIEND
                          WHERE CODEND = PAR.CODEND)
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "DSCLOGRADLOCALTRABDOM",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                VEMP.NUMEND
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT PAR.NUMEND
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "NRLOGRADLOCALTRABDOM",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                VEMP.COMPLEMENTO
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT PAR.COMPLEMENTO
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "COMPLEMENTOLOCALTRABDOM",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                (SELECT NOMEBAI
                   FROM TSIBAI
                  WHERE CODBAI = VEMP.CODBAI)
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT (SELECT NOMEBAI
                           FROM TSIBAI
                          WHERE CODBAI = PAR.CODBAI)
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "BAIRROLOCALTRABDOM",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                VEMP.CEP
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT PAR.CEP
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "CEPLOCALTRABDOM",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                (SELECT CODMUNFIS
                   FROM TSICID
                  WHERE CODCID = VEMP.CODCID)
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT (SELECT CODMUNFIS
                           FROM TSICID
                          WHERE CODCID = PAR.CODCID)
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "CODMUNICLOCALTRABDOM",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                (SELECT UFS.UF
                   FROM TSIUFS UFS, TSICID CID
                  WHERE CODUF = CID.UF AND CID.CODCID = VEMP.CODCID)
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT (SELECT UFS.UF
                           FROM TSIUFS UFS, TSICID CID
                          WHERE CODUF = CID.UF AND CID.CODCID = PAR.CODCID)
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "UFLOCALTRABDOM",
          FUN.HORASSEM AS "QTDHRSSEM",
          CASE
             WHEN (CGH.ESCALONAR = 'N') THEN 1
             WHEN (CGH.DIASTRAB = CGH.DIASFOLGA) THEN 2
             ELSE 9
          END
             AS "TPJORNADA",
          NVL (CGH.DESCRCARGAHOR, 'NAO INFORMADA') AS "DSCTPJORN",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104 AND FUN.HORASSEM <= 25 THEN '1'
             WHEN FUN.CODCATEGESOCIAL <> 104 AND FUN.HORASSEM <= 26 THEN '3'
             WHEN FUN.CODCATEGESOCIAL <> 104 AND FUN.HORASSEM <= 25 THEN '2'
             ELSE '0'
          END
             AS "TMPPARC",
          CASE
             WHEN (SELECT DISTINCT 1
                     FROM TFPFOL FOL
                    WHERE     FOL.REFERENCIA = EMP.REFERENCIA
                          AND FOL.CODEMP = FUN.CODEMP
                          AND FOL.CODFUNC = FUN.CODFUNC
                          AND (   ','
                               || CAST (
                                     SIND.EVENTOCONTASSOC AS VARCHAR2 (250))
                               || ',') LIKE
                                 (   '%,'
                                  || CAST (FOL.CODEVENTO AS VARCHAR2 (5))
                                  || ',%')) = 1
             THEN
                SIND.CGC
             ELSE
                ''
          END
             AS "CNPJSINDTRAB",
          CAST ( (SELECT NUMPROCESSO
                    FROM TFPPSS
                   WHERE NUPROCESSO = FUN.NUPROCESSOJUD) AS VARCHAR (20))
             AS "NRPROCJUDALVARAJUDICIAL",
          (SELECT CASE
                     WHEN VEMP.NRINSCEMPREGADOR <> SUBSTR (EM.CGC, 1, 8)
                     THEN
                        EM.CGC
                     ELSE
                        NULL
                  END
             FROM TSIEMP EM
            WHERE EM.CODEMP = FUN.CODEMPORIG)
             AS "CNPJEMPREGANT",
          (SELECT CASE
                     WHEN VEMP.NRINSCEMPREGADOR <> SUBSTR (EM.CGC, 1, 8)
                     THEN
                        CAST (F.MATRICULA AS VARCHAR2 (30))
                     ELSE
                        NULL
                  END
             FROM TFPFUN F, TSIEMP EM
            WHERE     F.CODEMP = FUN.CODEMPORIG
                  AND F.CODFUNC = FUN.CODFUNCORIG
                  AND EM.CODEMP = FUN.CODEMPORIG)
             AS "MATRICANT",
          CASE
             WHEN VEMP.NRINSCEMPREGADOR <>
                     (SELECT SUBSTR (EM.CGC, 1, 8)
                        FROM TSIEMP EM
                       WHERE EM.CODEMP = FUN.CODEMPORIG)
             THEN
                FUN.DTTRANSFERENCIA
             ELSE
                NULL
          END
             AS "DTINIVINCULO",
          FUN.OBSEMPANT AS "OBSERVACAOSUCESSAOVINC",
          CASE
             WHEN ( (SELECT NVL (OCO.DTINICOCOR, '')
                       FROM TFPOCO OCO, TFPHIS H
                      WHERE     OCO.CODEMP = FUN.CODEMP
                            AND OCO.CODFUNC = FUN.CODFUNC
                            AND OCO.CODHISTOCOR = H.CODHISTOCOR
                            AND H.AFASTAMENTO IN ('A', 'D', 'M', 'G', 'Y')
                            AND H.CODMOTAFAST IS NOT NULL
                            AND OCO.DTFINALOCOR IS NULL) <
                      VEMP.DTCARGAINICIAL)
             THEN
                (SELECT NVL (OCO.DTINICOCOR, '')
                   FROM TFPOCO OCO, TFPHIS H
                  WHERE     OCO.CODEMP = FUN.CODEMP
                        AND OCO.CODFUNC = FUN.CODFUNC
                        AND OCO.CODHISTOCOR = H.CODHISTOCOR
                        AND H.AFASTAMENTO IN ('A', 'D', 'M', 'G', 'Y')
                        AND H.CODMOTAFAST IS NOT NULL
                        AND OCO.DTFINALOCOR IS NULL)
             ELSE
                NULL
          END
             AS "DTINIAFAST",
          CASE
             WHEN ( (SELECT NVL (OCO.DTINICOCOR, '')
                       FROM TFPOCO OCO, TFPHIS H
                      WHERE     OCO.CODEMP = FUN.CODEMP
                            AND OCO.CODFUNC = FUN.CODFUNC
                            AND OCO.CODHISTOCOR = H.CODHISTOCOR
                            AND H.AFASTAMENTO IN ('A', 'D', 'M', 'G', 'Y')
                            AND H.CODMOTAFAST IS NOT NULL
                            AND OCO.DTFINALOCOR IS NULL) <
                      VEMP.DTCARGAINICIAL)
             THEN
                (SELECT NVL (H.CODMOTAFAST, '')
                   FROM TFPOCO OCO, TFPHIS H
                  WHERE     OCO.CODEMP = FUN.CODEMP
                        AND OCO.CODFUNC = FUN.CODFUNC
                        AND OCO.CODHISTOCOR = H.CODHISTOCOR
                        AND H.AFASTAMENTO IN ('A', 'D', 'M', 'G', 'Y')
                        AND H.CODMOTAFAST IS NOT NULL
                        AND OCO.DTFINALOCOR IS NULL)
             ELSE
                NULL
          END
             AS "CODMOTAFAST",
          PUB.MTVALTER,
          FUN.JUSTPRORR,
          NULL AS DSCALT,
          CASE
             WHEN (FUN.DTDEM < VEMP.DTCARGAINICIAL) THEN FUN.DTDEM
             ELSE NULL
          END
             AS "DTDESLIG",
          VEMP.CODEMPMATRIZ AS CODEMP,
          CAST (FUN.CODEMP || ':' || FUN.CODFUNC AS VARCHAR2 (100))
             AS "CHAVE",
          FUN.SITESOCIAL,
          SNK_GET_TPAMB_ESOCIAL AS TPAMB
     FROM TFPFUN FUN
          LEFT JOIN TFPPUB PUB
             ON (    FUN.CODEMP = PUB.CODEMP
                 AND FUN.CODFUNC = PUB.CODFUNC
                 AND EXISTS
                        (SELECT 1
                           FROM TSIPAR
                          WHERE CHAVE = 'FPTRIBUNAL' AND LOGICO = 'S'))
          LEFT JOIN TFPDEP DEP ON DEP.CODDEP = FUN.CODDEP
          LEFT JOIN TFPCGH CGH ON FUN.CODCARGAHOR = CGH.CODCARGAHOR
          LEFT JOIN TSIBAI BAI ON BAI.CODBAI = FUN.CODBAI
          LEFT JOIN TSICID CID ON CID.CODCID = FUN.CODCID
          LEFT JOIN TSIUFS UFS ON UFS.CODUF = CID.UF
          LEFT JOIN TSIPAI PA ON PA.CODPAIS = UFS.CODPAIS
          LEFT JOIN TSIEND EN ON EN.CODEND = FUN.CODEND
          LEFT JOIN TFPSIN SIND ON SIND.CODSIND = FUN.CODSIND,
          TFPEMP EMP,
          tsiemp em,
          VGF_EVENTO_EMPREGADOR VEMP
    WHERE     FUN.CODEMP = EMP.CODEMP
          AND FUN.CODEMP = VEMP.CODEMP
          and fun.codemp = em.codemp
          AND VEMP.DTCARGAINICIAL IS NOT NULL
          AND FUN.CODCATEGESOCIAL NOT IN
                 (701,
                  711,
                  712,
                  721,
                  722,
                  723,
                  731,
                  734,
                  738,
                  741,
                  751,
                  761,
                  771,
                  781)
          AND FUN.SITESOCIAL IN ('O', '5', '6', 'T')
/
 
 
 
/*
Requer    : 4210012
Conexao   : ORCL
Data      : 15/05/2018 11:37:57
Num.Script: 55512-0-0
Nro. O.S. : 1184311
Nome      : Alterar - VGF_EVENTO_S2299
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VGF_EVENTO_S2299
NomeObjeto: VGF_EVENTO_S2299
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210013
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2299
AS
SELECT CAST(VEMP.TPINSCEMPREGADOR AS NUMBER(5)) AS TPINSCEMPREGADOR,
      BAS.REFERENCIA AS DTREF,    
      VEMP.NRINSCEMPREGADOR,
      FUN.CPF AS "CPFTRAB",
      FUN.PIS AS "NISTRAB",
      CAST((CASE WHEN FUN.DTDEM >= VEMP.DTTERCEIRAFASE THEN
        CASE WHEN BAS.CODCONV IS NOT NULL THEN BAS.DIASTRAB ELSE NULL END 
      ELSE NULL END) AS VARCHAR2(10)) AS QTDDIASINTERM,
      CAST (FUN.MATRICULA AS VARCHAR2 (30)) AS "MATRICULA",
      (SELECT CODMOTDESLIGESOCIAL FROM TFPTPR TPR WHERE TPR.CODTPR = FUN.CODTPR) AS MTVDESLIG,
      FUN.DTDEM AS "DTDESLIG",
      CASE WHEN AVI.TIPAVISO = 2 THEN 'S' ELSE 'N' END AS INDPAGTO,
      AVI.DTFIMAVISO AS DTPROJFIMAPI,
      CASE WHEN NVL(RESFOL.VALOR,0) = 0  THEN '0' ELSE '2' END AS PENSALIM,
      0 AS PERCALIM,
      NVL(RESFOL.VALOR,0) AS VRALIM,
      FUN.NRCERTOBITO AS NRCERTOBITO,
      NULL AS PRPROCTRAB,
      CASE WHEN FUN.DTDEM >= VEMP.DTTERCEIRAFASE THEN BAS.INDMV ELSE NULL END AS INDMV,
      CASE WHEN AVI.INDCUMPRPARC = NULL THEN '0' ELSE CAST (AVI.INDCUMPRPARC AS CHAR) END AS INDCUMPRPARC,
      NULL AS OBSERVACAO,
      FUN.CNPJEMPANT AS CNPJSUCESSORA, -- errado, corrigir
      /* TAG transftit - conforme discutido com Leandro, nÃ£o temos caso de uso para essa situaÃ§Ã£o */
      NULL AS CPFSUBSTITUTO,
      CAST(NULL AS DATE) AS DTNASCTOSUBSTITUTO,
      FUN.DTFIMQUARENTENA AS DTFIMQUAR,
      FUN.IDCONSIG,
      FUN.INSCONSIG,
      FUN.NRCONTR,
      VEMP.CODEMPMATRIZ AS CODEMP,
      CAST(CAST(FUN.CODEMP AS VARCHAR2(10))  || ':' || CAST(FUN.CODFUNC AS VARCHAR2(10)) AS VARCHAR2(100)) AS "CHAVE"
  FROM TFPFUN FUN LEFT JOIN TFPAVI AVI
    ON AVI.CODFUNC = FUN.CODFUNC AND AVI.CODEMP = FUN.CODEMP
    JOIN TFPBAS BAS
      ON BAS.CODEMP = FUN.CODEMP 
     AND BAS.CODFUNC = FUN.CODFUNC 
     AND BAS.TIPFOLHA = 'R'
     AND (BAS.LIBESOCIAL = 'S' OR (BAS.REFERENCIA >= (SELECT DTCARGAINICIAL 
													  FROM VGF_EVENTO_EMPREGADOR EMPR 
													  WHERE FUN.CODEMP = EMPR.CODEMP) 
								   AND BAS.REFERENCIA < (SELECT DTTERCEIRAFASE 
													     FROM VGF_EVENTO_EMPREGADOR EMPR 
														 WHERE FUN.CODEMP = EMPR.CODEMP)))
    LEFT JOIN (SELECT NVL(SUM(FOL.VLREVENTO), 0) AS VALOR, FOL.CODFUNC, FOL.CODEMP
                 FROM TFPFOL FOL, TFPEVE EVE
                WHERE FOL.TIPFOLHA = 'R'
                  AND FOL.REFERENCIA >= TRUNC(SYSDATE - 60,'MONTH')
                  AND EVE.CODEVENTO = FOL.CODEVENTO
                  AND EVE.IDENTIFICACAO IN (148, 149, 150, 166, 167, 168)
               GROUP BY FOL.CODFUNC, FOL.CODEMP) RESFOL ON RESFOL.CODFUNC = FUN.CODFUNC AND RESFOL.CODEMP = FUN.CODEMP          
    , VGF_EVENTO_EMPREGADOR VEMP
 WHERE FUN.CODEMP = VEMP.CODEMP
   AND FUN.CODCATEGESOCIAL < 701
   AND FUN.CODCATEGESOCIAL NOT IN (301, 302, 303, 304, 305, 306, 307, 308, 309, 410) /* ORGAO PUBLICO */
   AND FUN.VINCULO <> 99
   AND FUN.SITESOCIAL IN ('O','5','6','T')
   AND FUN.SITUACAO = 0
   AND VEMP.DTCARGAINICIAL IS NOT NULL
   AND FUN.DTDEM >= VEMP.DTCARGAINICIAL /* O CABECALHO DO DESLIGAMENTO S-2299 ENTRA NA SEGUNDA FASE E OS RESTANTE DAS TAGS NA TERCEIRA */   
/
 
 
 
/*
Requer    : 4210012
Conexao   : ORCL
Data      : 15/05/2018 11:37:51
Num.Script: 55513-0-0
Nro. O.S. : 1184311
Nome      : Alterar - VGF_EVENTO_S2206
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VGF_EVENTO_S2206
NomeObjeto: VGF_EVENTO_S2206
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210013
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE FORCE VIEW VGF_EVENTO_S2206
AS
   SELECT NOVO.TPINSCEMPREGADOR,
          NOVO.NRINSCEMPREGADOR,
          NOVO.CPFTRAB,
          NOVO.NISTRAB,
          NOVO.MTVALTER,
          NOVO.JUSTPRORR,
          NOVO.DSCALT,
          NOVO.DTREF,
          NOVO.DTALTERACAO,
          NOVO.MATRICULA,
          NOVO.TPREGTRAB,
          NOVO.TPREGPREV,
          NOVO.NRRECINFPRELIM,
          NOVO.CADINI,
          NOVO.DTADM,
          NOVO.TPADMISSAO,
          NOVO.INDADMISSAO,
          NOVO.TPREGJOR,
          NOVO.NATATIVIDADE,
          NOVO.DTBASE,
          NOVO.CNPJSINDCATEGPROF,
          NOVO.OPCFGTS,
          NOVO.DTOPCFGTS,
          NOVO.HIPLEG,
          NOVO.JUSTCONTR,
          NOVO.TPINCLCONTR,
          NOVO.TPINSCIDETOMADORSERV,
          NOVO.NRINSCIDETOMADORSERV,
          NOVO.TPINSCIDEESTABVINC,
          NOVO.NRINSCIDEESTABVINC,
          NOVO.CPFTRABSUBST,
          NOVO.INDPROVIM,
          NOVO.TPPROV,
          NOVO.DTNOMEACAO,
          NOVO.DTPOSSE,
          NOVO.DTEXERCICIO,
          NOVO.TPPLANRP,
          NOVO.NRPROCJUDINFODECJUD,
          NOVO.CODCARGO,
          NOVO.CODFUNCAO,
          NOVO.CODCATEG,
          NOVO.CODCATEG2,
          NOVO.CODCARREIRA,
          NOVO.DTINGRCARR,
          NOVO.VRSALFX,
          NOVO.UNDSALFIXO,
          NOVO.DSCSALVAR,
          NOVO.TPCONTR,
          NOVO.DTTERM,
          NOVO.CLAUASSEG,
          NOVO.TPINSCLOCALTRABGERAL,
          NOVO.NRINSCLOCALTRABGERAL,
          NOVO.TPLOGRADLOCALTRABDOM,
          NOVO.DSCLOGRADLOCALTRABDOM,
          NOVO.NRLOGRADLOCALTRABDOM,
          NOVO.COMPLEMENTOLOCALTRABDOM,
          NOVO.BAIRROLOCALTRABDOM,
          NOVO.CEPLOCALTRABDOM,
          NOVO.CODMUNICLOCALTRABDOM,
          NOVO.UFLOCALTRABDOM,
          NOVO.QTDHRSSEM,
          NOVO.TPJORNADA,
          NOVO.DSCTPJORN,
          NOVO.TMPPARC,
          NOVO.CNPJSINDTRAB,
          NOVO.NRPROCJUDALVARAJUDICIAL,
          NOVO.CNPJEMPREGANT,
          NOVO.MATRICANT,
          NOVO.DTINIVINCULO,
          NOVO.OBSERVACAOSUCESSAOVINC,
          NOVO.DTINIAFAST,
          NOVO.CODMOTAFAST,
          NOVO.DTDESLIG,
          NOVO.CODEMP,
          NOVO.CHAVE
     FROM VGF_EVENTO_S2200_BASE NOVO
    WHERE     NOVO.SITESOCIAL IN ('6', 'T')
          AND EXISTS
                 (SELECT 1
                    FROM TFPS2206 VELHO
                   WHERE     NOVO.CODEMP = VELHO.CODEMP
                         AND NOVO.TPAMB = VELHO.TPAMB
                         AND NOVO.CHAVE = VELHO.CHAVE)
   UNION
   SELECT ULTIMO.TPINSCEMPREGADOR,
          ULTIMO.NRINSCEMPREGADOR,
          ULTIMO.CPFTRAB,
          ULTIMO.NISTRAB,
          NULL AS MTVALTER,
          NULL AS JUSTPRORR,
          NULL AS DSCALT,
          NULL AS DTREF,
          NULL AS DTALTERACAO,
          ULTIMO.MATRICULA,
          ULTIMO.TPREGTRAB,
          ULTIMO.TPREGPREV,
          ULTIMO.NRRECINFPRELIM,
          ULTIMO.CADINI,
          ULTIMO.DTADM,
          ULTIMO.TPADMISSAO,
          ULTIMO.INDADMISSAO,
          ULTIMO.TPREGJOR,
          ULTIMO.NATATIVIDADE,
          ULTIMO.DTBASE,
          ULTIMO.CNPJSINDCATEGPROF,
          ULTIMO.OPCFGTS,
          ULTIMO.DTOPCFGTS,
          ULTIMO.HIPLEG,
          ULTIMO.JUSTCONTR,
          ULTIMO.TPINCLCONTR,
          ULTIMO.TPINSCIDETOMADORSERV,
          ULTIMO.NRINSCIDETOMADORSERV,
          ULTIMO.TPINSCIDEESTABVINC,
          ULTIMO.NRINSCIDEESTABVINC,
          ULTIMO.CPFTRABSUBST,
          ULTIMO.INDPROVIM,
          ULTIMO.TPPROV,
          ULTIMO.DTNOMEACAO,
          ULTIMO.DTPOSSE,
          ULTIMO.DTEXERCICIO,
          ULTIMO.TPPLANRP,
          ULTIMO.NRPROCJUDINFODECJUD,
          ULTIMO.CODCARGO,
          ULTIMO.CODFUNCAO,
          ULTIMO.CODCATEG,
          ULTIMO.CODCATEG2,
          ULTIMO.CODCARREIRA,
          ULTIMO.DTINGRCARR,
          ULTIMO.VRSALFX,
          ULTIMO.UNDSALFIXO,
          ULTIMO.DSCSALVAR,
          ULTIMO.TPCONTR,
          ULTIMO.DTTERM,
          ULTIMO.CLAUASSEG,
          ULTIMO.TPINSCLOCALTRABGERAL,
          ULTIMO.NRINSCLOCALTRABGERAL,
          ULTIMO.TPLOGRADLOCALTRABDOM,
          ULTIMO.DSCLOGRADLOCALTRABDOM,
          ULTIMO.NRLOGRADLOCALTRABDOM,
          ULTIMO.COMPLEMENTOLOCALTRABDOM,
          ULTIMO.BAIRROLOCALTRABDOM,
          ULTIMO.CEPLOCALTRABDOM,
          ULTIMO.CODMUNICLOCALTRABDOM,
          ULTIMO.UFLOCALTRABDOM,
          ULTIMO.QTDHRSSEM,
          ULTIMO.TPJORNADA,
          ULTIMO.DSCTPJORN,
          ULTIMO.TMPPARC,
          ULTIMO.CNPJSINDTRAB,
          ULTIMO.NRPROCJUDALVARAJUDICIAL,
          ULTIMO.CNPJEMPREGANT,
          ULTIMO.MATRICANT,
          ULTIMO.DTINIVINCULO,
          ULTIMO.OBSERVACAOSUCESSAOVINC,
          ULTIMO.DTINIAFAST,
          ULTIMO.CODMOTAFAST,
          ULTIMO.DTDESLIG,
          ULTIMO.CODEMP,
          ULTIMO.CHAVE
     FROM VGF_EVENTO_S2200_BASE NOVO, TFPS2200 ULTIMO
    WHERE     NOVO.SITESOCIAL IN ('O', '5')
          AND NOVO.CODEMP = ULTIMO.CODEMP
          AND NOVO.TPAMB = ULTIMO.TPAMB
          AND NOVO.CHAVE = ULTIMO.CHAVE
          AND ULTIMO.DTREF = (SELECT SNK_GET_DTREF_ESOCIAL () FROM DUAL)
          AND ULTIMO.SEQUENCIA =
                 (SELECT SNK_GET_SEQ_ATUAL_ESOCIAL () FROM DUAL)
          AND ULTIMO.STATUS = 'F'
/
 
 
 
/*
Requer    : 4210012
Conexao   : ORCL
Data      : 15/05/2018 11:37:47
Num.Script: 55514-0-0
Nro. O.S. : 1184311
Nome      : Alterar - VGF_EVENTO_S1010
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VGF_EVENTO_S1010
NomeObjeto: VGF_EVENTO_S1010
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210013
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S1010
AS
   SELECT CASE
             WHEN LENGTH (
                     (SELECT EP.CGC
                        FROM TSIEMP EP
                       WHERE CODEMP = NVL (EMP.CODEMPMATRIZ, EMP.CODEMP))) =
                     14
             THEN
                1
             ELSE
                2
          END
             AS "TPINSCEMPREGADOR",
          (SELECT CASE
                     WHEN (SELECT LOGICO
                             FROM TSIPAR
                            WHERE CHAVE = 'FPTRIBUNAL') = 'S'
                     THEN
                        EP.CGC
                     ELSE
                        SUBSTR (EP.CGC, 1, 8)
                  END
             FROM TSIEMP EP
            WHERE CODEMP = NVL (EMP.CODEMPMATRIZ, EMP.CODEMP))
             AS "NRINSCEMPREGADOR",
          CAST (EVE.CODEVENTO AS VARCHAR2(20)) AS "CODRUBR",
          CAST (EVE.CODEVENTO AS VARCHAR2(20)) AS "IDETABRUBR",
          DESCREVENTO AS "DSCRUBR",
          CAST (CODNATRUBRICA AS INTEGER) AS "NATRUBR",
          CASE
             WHEN TIPEVENTO = 1 AND BASELIQUIDO = 'S' THEN 1
             WHEN TIPEVENTO = -1 AND BASELIQUIDO = 'S' THEN 2
             WHEN TIPEVENTO = 1 AND BASELIQUIDO = 'N' THEN 3
             ELSE 4
          END
             AS "TPRUBR",
          CASE WHEN EVE.CODINCCP IS NULL THEN
		  CAST (
             (CASE
                 WHEN     TIPOINSS = 1
                      AND BASELIQUIDO = 'S'
                      AND EVE.IDENTIFICACAO = 0
                      AND NOT EXISTS
                            (SELECT TIPINSS
                               FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                              WHERE     PSS.ABRANPROCESSO = 3
                                    AND PSS.NUPROCESSO = PSE.NUPROCESSO
                                    AND EMP.CODEMP = PSE.CODEMP
                                    AND PSS.NUPROCESSO = EPR.NUPROCESSO
                                    AND EPR.CODEVENTO = EVE.CODEVENTO)
                 THEN
                    11
                 WHEN     TIPOINSS = 2
                      AND BASELIQUIDO = 'S'
                      AND EVE.IDENTIFICACAO = 0
                      AND NOT EXISTS
                            (SELECT TIPINSS
                               FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                              WHERE     PSS.ABRANPROCESSO = 3
                                    AND PSS.NUPROCESSO = PSE.NUPROCESSO
                                    AND EMP.CODEMP = PSE.CODEMP
                                    AND PSS.NUPROCESSO = EPR.NUPROCESSO
                                    AND EPR.CODEVENTO = EVE.CODEVENTO)
                 THEN
                    12
                 WHEN IDENTIFICACAO = 117 AND BASELIQUIDO = 'S'
                      AND NOT EXISTS
                            (SELECT TIPINSS
                               FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                              WHERE     PSS.ABRANPROCESSO = 3
                                    AND PSS.NUPROCESSO = PSE.NUPROCESSO
                                    AND EMP.CODEMP = PSE.CODEMP
                                    AND PSS.NUPROCESSO = EPR.NUPROCESSO
                                    AND EPR.CODEVENTO = EVE.CODEVENTO)
                 THEN
                    21
                 WHEN IDENTIFICACAO = 118 AND BASELIQUIDO = 'S'
                      AND NOT EXISTS
                            (SELECT TIPINSS
                               FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                              WHERE     PSS.ABRANPROCESSO = 3
                                    AND PSS.NUPROCESSO = PSE.NUPROCESSO
                                    AND EMP.CODEMP = PSE.CODEMP
                                    AND PSS.NUPROCESSO = EPR.NUPROCESSO
                                    AND EPR.CODEVENTO = EVE.CODEVENTO)
                 THEN
                    22
                 WHEN IDENTIFICACAO = 140
                 THEN
                    23
                 WHEN IDENTIFICACAO = 141
                 THEN
                    24
                 WHEN IDENTIFICACAO IN (101, 107, 109, 111)
                 THEN
                    31
                 WHEN IDENTIFICACAO = 104
                 THEN
                    32
                 WHEN IDENTIFICACAO = 113
                 THEN
                    34
                 WHEN IDENTIFICACAO = 129
                 THEN
                    35
                 WHEN IDENTIFICACAO = 116
                 THEN
                    51
                 WHEN IDENTIFICACAO = 142
                 THEN
                    61
                 WHEN (SELECT TIPINSS
                         FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                        WHERE     PSS.ABRANPROCESSO = 3
                              AND PSS.EXCLUSIVOEMP = 'N'
                              AND PSS.NUPROCESSO = PSE.NUPROCESSO
                              AND EMP.CODEMP = PSE.CODEMP
                              AND PSS.NUPROCESSO = EPR.NUPROCESSO
                              AND EPR.CODEVENTO = EVE.CODEVENTO) = 1
                 THEN
                    91
                 WHEN (SELECT TIPINSS
                         FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                        WHERE     PSS.ABRANPROCESSO = 3
                              AND PSS.EXCLUSIVOEMP = 'N'
                              AND PSS.NUPROCESSO = PSE.NUPROCESSO
                              AND EMP.CODEMP = PSE.CODEMP
                              AND PSS.NUPROCESSO = EPR.NUPROCESSO
                              AND EPR.CODEVENTO = EVE.CODEVENTO) = 2
                 THEN
                    92
                 WHEN (SELECT TIPINSS
                         FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                        WHERE     PSS.ABRANPROCESSO = 3
                              AND PSS.EXCLUSIVOEMP = 'N'
                              AND PSS.NUPROCESSO = PSE.NUPROCESSO
                              AND EMP.CODEMP = PSE.CODEMP
                              AND PSS.NUPROCESSO = EPR.NUPROCESSO
                              AND EPR.CODEVENTO = EVE.CODEVENTO) = 3
                 THEN
                    93
                 WHEN (SELECT TIPINSS
                         FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                        WHERE     PSS.ABRANPROCESSO = 3
                              AND PSS.EXCLUSIVOEMP = 'N'
                              AND PSS.NUPROCESSO = PSE.NUPROCESSO
                              AND EMP.CODEMP = PSE.CODEMP
                              AND PSS.NUPROCESSO = EPR.NUPROCESSO
                              AND EPR.CODEVENTO = EVE.CODEVENTO) = 4
                 THEN
                    94
                 WHEN (SELECT TIPINSS
                         FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                        WHERE     PSS.ABRANPROCESSO = 3
                              AND PSS.EXCLUSIVOEMP = 'S'
                              AND PSS.NUPROCESSO = PSE.NUPROCESSO
                              AND EMP.CODEMP = PSE.CODEMP
                              AND PSS.NUPROCESSO = EPR.NUPROCESSO
                              AND EPR.CODEVENTO = EVE.CODEVENTO) = 1
                 THEN
                    95
                 WHEN (SELECT TIPINSS
                         FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                        WHERE     PSS.ABRANPROCESSO = 3
                              AND PSS.EXCLUSIVOEMP = 'S'
                              AND PSS.NUPROCESSO = PSE.NUPROCESSO
                              AND EMP.CODEMP = PSE.CODEMP
                              AND PSS.NUPROCESSO = EPR.NUPROCESSO
                              AND EPR.CODEVENTO = EVE.CODEVENTO) = 2
                 THEN
                    96
                 WHEN (SELECT TIPINSS
                         FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                        WHERE     PSS.ABRANPROCESSO = 3
                              AND PSS.EXCLUSIVOEMP = 'S'
                              AND PSS.NUPROCESSO = PSE.NUPROCESSO
                              AND EMP.CODEMP = PSE.CODEMP
                              AND PSS.NUPROCESSO = EPR.NUPROCESSO
                              AND EPR.CODEVENTO = EVE.CODEVENTO) = 3
                 THEN
                    97
                 WHEN (SELECT TIPINSS
                         FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                        WHERE     PSS.ABRANPROCESSO = 3
                              AND PSS.EXCLUSIVOEMP = 'S'
                              AND PSS.NUPROCESSO = PSE.NUPROCESSO
                              AND EMP.CODEMP = PSE.CODEMP
                              AND PSS.NUPROCESSO = EPR.NUPROCESSO
                              AND EPR.CODEVENTO = EVE.CODEVENTO) = 4
                 THEN
                    98
                 ELSE
                    0
              END) AS VARCHAR2(2))
		ELSE EVE.CODINCCP 
		END AS "CODINCCP",
        CASE WHEN EVE.CODINCIRRF IS NULL THEN 
		 CAST (
             (CASE
                 WHEN     EVE.TIPOIRRF IN (1, 3, 4, 5)
                      AND EVE.BASELIQUIDO = 'S'
                 THEN
                    11
                 WHEN     EVE.TIPOIRRF = 2
                      AND EVE.BASELIQUIDO = 'S'
                 THEN
                    12
                 WHEN     EVE.TIPOIRRF = 6
                      AND EVE.BASELIQUIDO = 'S'
                 THEN
                    13
                 WHEN     EVE.TIPOIRRF = 7
                      AND EVE.BASELIQUIDO = 'S'
                 THEN
                    14
                 WHEN     EVE.TIPOIRRF = 8
                      AND EVE.IDENTIFICACAO = 0
                      AND EVE.BASELIQUIDO = 'S'
                 THEN
                    15
                 WHEN EVE.IDENTIFICACAO IN (103, 108, 110, 112)
                      AND FERIAS = 'N'
                 THEN
                    31
                 WHEN EVE.IDENTIFICACAO = 106
                 THEN
                    32
                 WHEN EVE.IDENTIFICACAO = 103 AND FERIAS = 'S'
                 THEN
                    33
                 WHEN EVE.IDENTIFICACAO = 130
                 THEN
                    34
                 WHEN EVE.IDENTIFICACAO = 143
                 THEN
                    35
                 WHEN EVE.BASEINFREND = 'I' AND FERIAS = 'N'
                 THEN
                    41
                 WHEN EVE.BASEINFREND = 'E'
                 THEN
                    42
                 WHEN EVE.IDENTIFICACAO = 101 AND FERIAS = 'S'
                 THEN
                    43
                 WHEN EVE.IDENTIFICACAO = 144
                 THEN
                    44
                 WHEN EVE.BASEINFREND = 'H'
                 THEN
                    46
                 WHEN EVE.IDENTIFICACAO = 145
                 THEN
                    47
                 WHEN EVE.BASEINFREND = 'J' AND TIPEVENTO = -1
                 THEN
                    51
                 WHEN EVE.BASEINFREND = 'G' AND TIPEVENTO = -1
                 THEN
                    52
                 WHEN EVE.IDENTIFICACAO = 146
                 THEN
                    53
                 WHEN EVE.IDENTIFICACAO = 147
                 THEN
                    54
                 WHEN EVE.IDENTIFICACAO = 148
                 THEN
                    55
                 WHEN EVE.IDENTIFICACAO = 150
                 THEN
                    61
                 WHEN EVE.IDENTIFICACAO = 151
                 THEN
                    62
                 WHEN EVE.IDENTIFICACAO = 152
                 THEN
                    63
                 WHEN EVE.IDENTIFICACAO = 153
                 THEN
                    64
                 WHEN EVE.BASEINFREND = 'A'
                 THEN
                    70
                 WHEN EVE.IDENTIFICACAO = 154
                 THEN
                    71
                 WHEN EVE.BASEINFREND = 'D'
                 THEN
                    72
                 WHEN EVE.IDENTIFICACAO = 155
                 THEN
                    73
                 WHEN EVE.BASEINFREND = 'Z'
                 THEN
                    74
                 WHEN EVE.BASEINFREND = 'W'
                 THEN
                    75
                 WHEN EVE.BASEINFREND = 'P'
                 THEN
                    76
                 WHEN EVE.IDENTIFICACAO = 156
                 THEN
                    77
                 WHEN EVE.BASEINFREND = 'B'
                 THEN
                    78
                 WHEN EVE.BASEINFREND = 'O'
                 THEN
                    79
                 WHEN EVE.IDENTIFICACAO = 157
                 THEN
                    81
                 WHEN EVE.IDENTIFICACAO = 158
                 THEN
                    82
                 WHEN EVE.IDENTIFICACAO = 159
                 THEN
                    83
                 WHEN (SELECT TIPIRRF
                         FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                        WHERE     PSS.ABRANPROCESSO = 5
                              AND PSS.NUPROCESSO = PSE.NUPROCESSO
                              AND EMP.CODEMP = PSE.CODEMP
                              AND PSS.NUPROCESSO = EPR.NUPROCESSO
                              AND EPR.CODEVENTO = EVE.CODEVENTO) = 1
                 THEN
                    91
                 WHEN (SELECT TIPIRRF
                         FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                        WHERE     PSS.ABRANPROCESSO = 5
                              AND PSS.NUPROCESSO = PSE.NUPROCESSO
                              AND EMP.CODEMP = PSE.CODEMP
                              AND PSS.NUPROCESSO = EPR.NUPROCESSO
                              AND EPR.CODEVENTO = EVE.CODEVENTO) = 2
                 THEN
                    92
                 WHEN (SELECT TIPIRRF
                         FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                        WHERE     PSS.ABRANPROCESSO = 5
                              AND PSS.NUPROCESSO = PSE.NUPROCESSO
                              AND EMP.CODEMP = PSE.CODEMP
                              AND PSS.NUPROCESSO = EPR.NUPROCESSO
                              AND EPR.CODEVENTO = EVE.CODEVENTO) = 3
                 THEN
                    93
                 WHEN (SELECT TIPIRRF
                         FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                        WHERE     PSS.ABRANPROCESSO = 5
                              AND PSS.NUPROCESSO = PSE.NUPROCESSO
                              AND EMP.CODEMP = PSE.CODEMP
                              AND PSS.NUPROCESSO = EPR.NUPROCESSO
                              AND EPR.CODEVENTO = EVE.CODEVENTO) = 4
                 THEN
                    94
                 WHEN (SELECT TIPIRRF
                         FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                        WHERE     PSS.ABRANPROCESSO = 5
                              AND PSS.NUPROCESSO = PSE.NUPROCESSO
                              AND EMP.CODEMP = PSE.CODEMP
                              AND PSS.NUPROCESSO = EPR.NUPROCESSO
                              AND EPR.CODEVENTO = EVE.CODEVENTO) = 8
                 THEN
                    95
                 ELSE
                    0
              END) AS VARCHAR2(2))
         ELSE EVE.CODINCIRRF END AS "CODINCIRRF",
         CASE WHEN EVE.CODINCFGTS IS NULL THEN 
		  CAST (
             (CASE
                 WHEN     FGTS = 'S'
                      AND EVE.BASELIQUIDO = 'S'
                      AND NOT EXISTS
                            (SELECT PSS.ABRANPROCESSO
                               FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                              WHERE     PSS.ABRANPROCESSO = 4
                                    AND PSS.NUPROCESSO = PSE.NUPROCESSO
                                    AND EMP.CODEMP = PSE.CODEMP
                                    AND PSS.NUPROCESSO = EPR.NUPROCESSO
                                    AND EPR.CODEVENTO = EVE.CODEVENTO)
                 THEN
                    11
                 WHEN     FGTSDECTERCEIRO = 'S'
                      AND EVE.BASELIQUIDO = 'S'
                 THEN
                    12
                 WHEN     FGTSRESCISAO = 'S'
                      AND EVE.BASELIQUIDO = 'S'
                 THEN
                    21
                 WHEN (SELECT PSS.ABRANPROCESSO
                         FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                        WHERE     PSS.ABRANPROCESSO = 4
                              AND PSS.NUPROCESSO = PSE.NUPROCESSO
                              AND EMP.CODEMP = PSE.CODEMP
                              AND PSS.NUPROCESSO = EPR.NUPROCESSO
                              AND EPR.CODEVENTO = EVE.CODEVENTO) = 4
                 THEN
                    91
                 ELSE
                    00
              END) AS VARCHAR2(2))
            ELSE EVE.CODINCFGTS END AS "CODINCFGTS",
          CASE WHEN EVE.CODINCSIND IS NULL THEN
		  CAST (
             (CASE
                 WHEN CONTRIBSIND = 'S'
                      AND NOT EXISTS
                            (SELECT PSS.ABRANPROCESSO
                               FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                              WHERE     PSS.ABRANPROCESSO = 6
                                    AND PSS.NUPROCESSO = PSE.NUPROCESSO
                                    AND EMP.CODEMP = PSE.CODEMP
                                    AND PSS.NUPROCESSO = EPR.NUPROCESSO
                                    AND EPR.CODEVENTO = EVE.CODEVENTO)
                 THEN
                    11
                 WHEN EVE.IDENTIFICACAO = 160
                 THEN
                    31
                 WHEN (SELECT PSS.ABRANPROCESSO
                         FROM TFPPSS PSS, TFPPSE PSE, TFPEPR EPR
                        WHERE     PSS.ABRANPROCESSO = 6
                              AND PSS.NUPROCESSO = PSE.NUPROCESSO
                              AND EMP.CODEMP = PSE.CODEMP
                              AND PSS.NUPROCESSO = EPR.NUPROCESSO
                              AND EPR.CODEVENTO = EVE.CODEVENTO) = 6
                 THEN
                    91
                 ELSE
                    00
              END) AS VARCHAR2(2))
            ELSE EVE.CODINCSIND END AS "CODINCSIND",
          RUBRICADSR AS "REPDSR",
          RUBRICA13 AS "REP13",
          RUBRICAFERIAS AS "REPFERIAS",
          RUBRICARESCISAO AS "REPAVISO",
          CAST ('' AS VARCHAR2(255)) AS "OBSERVACAO",
          EMP.CODEMP AS "CODEMP",
          CAST (EVE.CODEVENTO AS VARCHAR2(100)) AS "CHAVE",
          EVE.CODEVENTO AS "CODEVENTO"
     FROM TFPRBR RBR, TFPEVE EVE, TSIEMP EMP
    WHERE     RBR.CODEMP = EMP.CODEMP
          AND RBR.CODEVENTO = EVE.CODEVENTO
          AND EVE.USADOESOCIAL = 'S'
/
 
 
 
/*
Requer    : 4210012
Conexao   : ORCL
Data      : 15/05/2018 14:04:55
Num.Script: 55523-0-0
Nro. O.S. : 1158258
Nome      : Cria - TSIGBC QTDUSO
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar o campo
NomeObjeto: QTDUSO
TipoObjeto: COLUMN
NomeTabela: TSIGBC
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210013
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TSIGBC ADD QTDUSO NUMBER(10) DEFAULT 0
/
 
 
 
/*
Requer    : 4210012
Conexao   : ORCL
Data      : 15/05/2018 17:47:35
Num.Script: 55525-0-0
Nro. O.S. : 1184464
Nome      : Alterar - VGF_EVENTO_S2200_BASE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VGF_EVENTO_S2200_BASE
NomeObjeto: VGF_EVENTO_S2200_BASE
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210013
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2200_BASE
AS
 SELECT VEMP.TPINSCEMPREGADOR,
          VEMP.NRINSCEMPREGADOR,
          FUN.CPF AS "CPFTRAB",
          FUN.PIS AS "NISTRAB",
          FUN.NOMEFUNC AS "NMTRAB",
          FUN.DTALTER AS DTALTERACAO,
          CAST(NULL AS DATE) AS DTREF,
          NULL AS EMAILALTERNAT,
          CAST (FUN.SEXO AS CHAR (1)) AS "SEXO",
          CASE
             WHEN RACAFUNCIONARIO = 2 THEN 1
             WHEN RACAFUNCIONARIO = 4 THEN 2
             WHEN RACAFUNCIONARIO = 8 THEN 3
             WHEN RACAFUNCIONARIO = 6 THEN 4
             WHEN RACAFUNCIONARIO = 0 THEN 5
             ELSE 6
          END
             AS "RACACOR",
          CASE
             WHEN FUN.ESTADOCIVIL = 3 THEN 5
             WHEN FUN.ESTADOCIVIL IN (5, 6) THEN 3
             WHEN FUN.ESTADOCIVIL = 7 THEN 2
             ELSE FUN.ESTADOCIVIL
          END
             AS "ESTCIV",
          CAST (
             CASE
                WHEN FUN.NIVESC = 10 THEN 11
                WHEN FUN.NIVESC = 11 THEN 12
                ELSE FUN.NIVESC
             END AS VARCHAR2 (2))
             AS "GRAUINSTR",
          CASE WHEN FUN.PRIMEMPREGO = 'S' THEN 'S' ELSE 'N' END "INDPRIEMPR",
          FUN.NMSOCIAL AS "NMSOC",
          FUN.DTNASC AS "DTNASCTONASCIMENTO",
          (SELECT CODMUNFIS
             FROM TSICID
            WHERE CODCID = FUN.CIDNASC)
             AS "CODMUNICNASCIMENTO",
          (SELECT UFS.UF
             FROM TSIUFS UFS, TSICID CID
            WHERE UFS.CODUF = CID.UF AND CID.CODCID = FUN.CIDNASC)
             AS "UFNASCIMENTO",
          (SELECT SUBSTR (CAST (CODPAISFIS AS VARCHAR2 (5)), 1, 3)
             FROM TSIPAI PAI, TSIUFS UFS, TSICID CID
            WHERE     UFS.CODUF = CID.UF
                  AND CID.CODCID = FUN.CIDNASC
                  AND PAI.CODPAIS = UFS.CODPAIS)
             AS "PAISNASCTONASCIMENTO",
          (SELECT SUBSTR (CAST (CODPAISFIS AS VARCHAR2 (5)), 1, 3)
             FROM TSIPAI PAI
            WHERE PAI.CODPAIS = FUN.CODPAISNAC)
             AS "PAISNACNASCIMENTO",
          FUN.NOMEMAE AS "NMMAENASCIMENTO",
          FUN.NOMEPAI AS "NMPAINASCIMENTO",
          CASE 
              WHEN LENGTH(FUN.NUMCPS) < 3 AND FUN.NUMCPS <> '' AND FUN.NUMCPS IS NOT NULL THEN CAST(LPAD(FUN.NUMCPS,2,0) AS VARCHAR(11))
              WHEN LENGTH(FUN.NUMCPS) >= 3 THEN SUBSTR(CAST(FUN.NUMCPS AS VARCHAR(11)), 1, 11)
              WHEN FUN.NUMCPS = '' OR FUN.NUMCPS IS NULL THEN NULL
          END
              AS "NRCTPS",
          
          FUN.SERIECPS AS "SERIECTPS",
          (SELECT UF
             FROM TSIUFS
            WHERE CODUF = FUN.UFCPS)
             AS "UFCTPS",
          FUN.NRORIC AS "NRRIC",
          FUN.ORGAORIC AS "ORGAOEMISSORRIC",
          FUN.DTEMIRIC AS "DTEXPEDRIC",
          REPLACE (
             REPLACE (REPLACE (REPLACE (FUN.IDENTIDADE, '-', ''), '/', ''),
                      '.',
                      ''),
             ' ',
             '')
             AS "NRRG",
          FUN.ORGAORG AS "ORGAOEMISSORRG",
          FUN.DTRG AS "DTEXPEDRG",
          SUBSTR (FUN.RNE, 1, 14) AS NRRNE,
          FUN.ORGAORNE AS "ORGAOEMISSORRNE",
          FUN.DTEXPRNE AS "DTEXPEDRNE",
          FUN.NROC AS "NROC",
          FUN.ORGAOOC AS "ORGAOEMISSOROC",
          FUN.DTEXPOC AS "DTEXPEDOC",
          FUN.DTVALOC AS "DTVALIDOC",
          CASE WHEN FUN.NROCNH = '' THEN NULL ELSE FUN.NROCNH END AS "NRREGCNH",
          FUN.DTEXPCNH AS "DTEXPEDCNH",
          (SELECT UF
             FROM TSIUFS
            WHERE CODUF = FUN.UFCNH)
             AS "UFCNH",
          FUN.VENCIMENTOCNH AS "DTVALIDCNH",
          FUN.PRIMEIRACNH AS "DTPRIHAB",
          SUBSTR (FUN.CATEGORIACNH, 1, 2) AS "CATEGORIACNH",
          EN.CODLOGRADOURO AS "TPLOGRADBRASIL",
          EN.NOMEEND AS "DSCLOGRADBRASIL",
          FUN.NUMEND AS "NRLOGRADBRASIL",
          FUN.COMPLEMENTO AS "COMPLEMENTOBRASIL",
          BAI.NOMEBAI AS "BAIRROBRASIL",
          FUN.CEP AS "CEPBRASIL",
          CAST (CID.CODMUNFIS AS VARCHAR2 (7)) AS "CODMUNICBRASIL",
          UFS.UF AS "UFBRASIL",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105
             THEN
                SUBSTR (PA.CODPAISFIS, 1, 3)
             ELSE
                NULL
          END
             AS "PAISRESID",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105 THEN EN.NOMEEND
             ELSE NULL
          END
             AS "DSCLOGRADEXTERIOR",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105 THEN FUN.NUMEND
             ELSE NULL
          END
             AS "NRLOGRADEXTERIOR",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105 THEN FUN.COMPLEMENTO
             ELSE NULL
          END
             AS "COMPLEMENTOEXTERIOR",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105 THEN BAI.NOMEBAI
             ELSE NULL
          END
             AS "BAIRROEXTERIOR",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105 THEN CID.NOMECID
             ELSE NULL
          END
             AS "NMCIDEXTERIOR",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105 THEN FUN.CAIXAPOSTAL
             ELSE NULL
          END
             AS "CODPOSTALEXTERIOR",
          FUN.DTCHEGPAIS AS "DTCHEGADA",
          FUN.CLASSTRABESTRANG,
          FUN.CASADOBR AS "CASADOBR",
          FUN.FILHOSBR AS "FILHOSBR",
          CASE WHEN FUN.TIPDEFICIENCIA IN (0, 5, 7) THEN 'N' ELSE 'S' END
             AS "DEFFISICA",
          CASE WHEN FUN.TIPDEFICIENCIA = 3 THEN 'S' ELSE 'N' END
             AS "DEFVISUAL",
          CASE WHEN FUN.TIPDEFICIENCIA = 2 THEN 'S' ELSE 'N' END
             AS "DEFAUDITIVA",
          CASE WHEN FUN.TIPDEFICIENCIA = 8 THEN 'S' ELSE 'N' END
             AS "DEFMENTAL",
          CASE WHEN FUN.TIPDEFICIENCIA = 4 THEN 'S' ELSE 'N' END
             AS "DEFINTELECTUAL",
          CASE WHEN FUN.TIPDEFICIENCIA = 6 THEN 'S' ELSE 'N' END
             AS "REABREADAP",
          FUN.INFOCOTA AS "INFOCOTA",
          CASE WHEN FUN.OBSDEFICIENCIA = '' THEN NULL ELSE FUN.OBSDEFICIENCIA END AS "OBSERVACAO",
          FUN.TRABAPOSENT AS "TRABAPOSENT",
          CASE
             WHEN LENGTH (TRIM (FUN.TELEFONE)) < 10 THEN NULL
             ELSE REPLACE (FUN.TELEFONE, ' ', '')
          END
             AS "FONEPRINC",
          CASE
             WHEN LENGTH (TRIM (FUN.CELULAR)) < 10 THEN NULL
             ELSE REPLACE (FUN.CELULAR, ' ', '')
          END
             AS "FONEALTERNAT",
          CASE WHEN FUN.EMAIL = '' THEN NULL ELSE FUN.EMAIL END AS "EMAILPRINC",
          CAST (FUN.MATRICULA AS VARCHAR2 (30)) AS "MATRICULA",
          CASE WHEN FUN.REGIMETRAB IN (2, 3) THEN 2 ELSE 1 END AS "TPREGTRAB",
          CASE
             WHEN FUN.REGIME IN (1, 3) THEN 2
             WHEN FUN.REGIME = 2 THEN 1
             ELSE 3
          END
             AS "TPREGPREV",
          (SELECT NVL (S.NRORECIBO, '')
             FROM TFPS2190 S
            WHERE     S.CODEMP = VEMP.CODEMPMATRIZ
                  AND S.CHAVE =
                         CAST (
                            FUN.CODEMP || ':' || FUN.CODFUNC AS VARCHAR2 (100))
                  AND S.TPAMB = SNK_GET_TPAMB_ESOCIAL
                  AND S.SEQUENCIA = SNK_GET_SEQ_ATUAL_ESOCIAL
                  AND S.DTREF = SNK_GET_DTREF_ESOCIAL)
             AS "NRRECINFPRELIM",
          CASE WHEN FUN.DTADM < VEMP.DTCARGAINICIAL THEN 'S' ELSE 'N' END
             AS "CADINI",
          FUN.DTADM AS "DTADM",
          CASE
             WHEN FUN.VINCULO IN (30, 31, 35)
             THEN
                NULL
             WHEN     FUN.PRIMEMPREGO  IN ('A', 'T')
                  AND SUBSTR (VEMP.NRINSCEMPREGADOR, 1, 8) = SUBSTR (EM.CGC, 1, 8)
             THEN
                1
             WHEN FUN.PRIMEMPREGO IN ('A', 'T') AND SUBSTR (VEMP.NRINSCEMPREGADOR, 1, 8) <> SUBSTR (EM.CGC, 1, 8)
             THEN
                2
             WHEN FUN.PRIMEMPREGO = 'H'
             THEN
                3
             WHEN FUN.PRIMEMPREGO = 'I'
             THEN
                4
             ELSE
                1
          END
             AS "TPADMISSAO",
          FUN.INDADMISSAO AS "INDADMISSAO",
          FUN.REGIMEJOR AS "TPREGJOR",
          (SELECT CASE WHEN TIPHORANOTURNA = 'U' THEN 1 ELSE 2 END
             FROM TFPCBO CBO
            WHERE CBO.CODCBO =
                     CASE
                        WHEN EXISTS
                                (SELECT 1
                                   FROM TSIPAR
                                  WHERE     CHAVE = 'FPUTILIZACBO'
                                        AND NVL (INTEIRO, 0) = 0)
                        THEN
                           (SELECT CODCBO
                              FROM TFPCAR C
                             WHERE C.CODCARGO = FUN.CODCARGO)
                        ELSE
                           (SELECT CODCBO
                              FROM TFPFCO F
                             WHERE F.CODFUNCAO = FUN.CODFUNCAO)
                     END)
             AS "NATATIVIDADE",
          (SELECT MESDATABASE
             FROM TFPPRE
            WHERE CODPREF = SIND.CODPREF)
             AS "DTBASE",
          SIND.CGC AS "CNPJSINDCATEGPROF",
          1 AS "OPCFGTS",
          FUN.DTOPTFGTS AS "DTOPCFGTS",
          CASE WHEN FUN.CONTTRABTEMP > 0 THEN FUN.CONTTRABTEMP ELSE NULL END
             AS "HIPLEG",
          SUBSTR (FUN.JUSTCONTR, 1, 999) AS "JUSTCONTR",
          FUN.TPINCLCONTR AS "TPINCLCONTR",
          FUN.TPINSCTOMADOR AS "TPINSCIDETOMADORSERV",
          FUN.NRINSCTOMADOR AS "NRINSCIDETOMADORSERV",
          FUN.TPINSCESTABVINC AS "TPINSCIDEESTABVINC",
          FUN.NRINSCESTABVINC AS "NRINSCIDEESTABVINC",
          FUN.CPFSUBSTITUIDO AS "CPFTRABSUBST",
          CASE WHEN PUB.CODEMP IS NOT NULL THEN PUB.INDPROVIM ELSE NULL END
             AS "INDPROVIM",
          CASE WHEN PUB.CODEMP IS NOT NULL THEN PUB.TPPROV ELSE NULL END
             AS "TPPROV",
          CASE
             WHEN PUB.CODEMP IS NOT NULL THEN PUB.DTDESIGNACAO
             ELSE NULL
          END
             AS "DTNOMEACAO",
          CASE WHEN PUB.CODEMP IS NOT NULL THEN PUB.DTPOSSE ELSE NULL END
             AS "DTPOSSE",
          CASE WHEN PUB.CODEMP IS NOT NULL THEN PUB.DTEXERC ELSE NULL END
             AS "DTEXERCICIO",
          PUB.TPPLANRP AS "TPPLANRP",
          CAST (PUB.NUPROCESSOJUD AS VARCHAR (20)) AS "NRPROCJUDINFODECJUD",
          CAST (CASE
                   WHEN (SELECT 1
                           FROM TSIPAR
                          WHERE CHAVE = 'FPUTILIZACBO' AND INTEIRO = 0) > 0
                   THEN
                      FUN.CODCARGO
                   ELSE
                      FUN.CODFUNCAO
                END AS VARCHAR (30))
             AS "CODCARGO",
          CAST (CASE
                   WHEN (SELECT LOGICO
                           FROM TSIPAR
                          WHERE CHAVE = 'FPTRIBUNAL') = 'S'
                   THEN
                      (SELECT CODFUNCAO
                         FROM TFPFCO
                        WHERE CODFUNCAO = FUN.CODFUNCAO)
                   ELSE
                      0
                END AS VARCHAR2 (30))
             AS "CODFUNCAO",
          FUN.CODCATEGESOCIAL AS "CODCATEG",
          CASE WHEN FUN.CODCATEGESOCIAL IN (104, 106) THEN 1 ELSE 0 END
             AS "CODCATEG2",
          CASE
             WHEN PUB.CODEMP IS NOT NULL
             THEN
                CAST (FUN.CODCARREIRA AS VARCHAR2 (30))
             ELSE
                NULL
          END
             AS "CODCARREIRA",
          PUB.DTINGRCARR AS "DTINGRCARR",
          CAST (
             CASE
                WHEN FUN.TIPSAL = 5 AND NVL (FUN.SALBASE, 0) = 0 THEN 0
                ELSE FUN.SALBASE
             END AS FLOAT)
             AS "VRSALFX",
          CASE
             WHEN FUN.TIPSAL = 1 THEN 5
             WHEN FUN.TIPSAL = 2 THEN 4
             WHEN FUN.TIPSAL = 3 THEN 3
             WHEN FUN.TIPSAL = 4 THEN 2
             WHEN FUN.TIPSAL = 5 AND NVL (FUN.SALBASE, 0) > 0 THEN 1
             WHEN FUN.TIPSAL = 5 AND NVL (FUN.SALBASE, 0) = 0 THEN 7
             WHEN FUN.COMPSALARIO = 2 THEN 8
             ELSE 6
          END
             AS "UNDSALFIXO",
          CASE
             WHEN FUN.TIPSAL = 5 AND NVL (FUN.SALBASE, 0) = 0
             THEN
                FUN.OBSVARIAVEL
             ELSE
                NULL
          END
             AS "DSCSALVAR",
          CASE
             WHEN FUN.VINCULO IN (10, 15, 20, 25, 30, 31, 35, 55) THEN 1
             WHEN FUN.VINCULO IN (60, 65, 70, 75, 95, 96, 97) THEN 2
             ELSE NULL
          END
             AS "TPCONTR",
          CASE
             WHEN FUN.VINCULO IN (55, 60, 65, 70, 75, 95, 96, 97) THEN DTTERMINO
             ELSE NULL
          END
             AS "DTTERM",
          CAST (FUN.DIRRECIPROCO AS CHAR (1)) AS "CLAUASSEG",
          NVL((SELECT CASE WHEN LENGTH(E.CGC) = 14 THEN 1 ELSE 2 END
                    FROM TFPTOM TOM, TSIEMP E
                   WHERE TOM.CODPARC = E.CODPARC
                     AND TOM.CODEMP = E.CODEMP
                     AND TOM.CODEMP = FUN.CODEMP
                     AND TOM.CODFUNC = FUN.CODFUNC
                     AND TOM.DTINICIO =
                            (SELECT MAX (DTINICIO)
                               FROM TFPTOM TM
                              WHERE     TM.CODEMP = TOM.CODEMP
                                    AND TM.CODPARC = TOM.CODPARC
                                    AND TM.CODFUNC = TOM.CODFUNC)),
             VEMP.TPINSCEMPREGADOR)
             AS "TPINSCLOCALTRABGERAL",
          NVL (
             (SELECT E.CGC
                FROM TFPTOM TOM, TSIEMP E
               WHERE     TOM.CODPARC = E.CODPARC
                     AND TOM.CODEMP = E.CODEMP
                     AND TOM.CODEMP = FUN.CODEMP
                     AND TOM.CODFUNC = FUN.CODFUNC
                     AND TOM.DTINICIO =
                            (SELECT MAX (DTINICIO)
                               FROM TFPTOM TM
                              WHERE     TM.CODEMP = TOM.CODEMP
                                    AND TM.CODPARC = TOM.CODPARC
                                    AND TM.CODFUNC = TOM.CODFUNC)),
             VEMP.CGC)
             AS "NRINSCLOCALTRABGERAL",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                (SELECT CODLOGRADOURO
                   FROM TSIEND
                  WHERE CODEND = VEMP.CODEND)
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT (SELECT CODLOGRADOURO
                           FROM TSIEND
                          WHERE CODEND = PAR.CODEND)
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "TPLOGRADLOCALTRABDOM",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                (SELECT NOMEEND
                   FROM TSIEND
                  WHERE CODEND = VEMP.CODEND)
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT (SELECT NOMEEND
                           FROM TSIEND
                          WHERE CODEND = PAR.CODEND)
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "DSCLOGRADLOCALTRABDOM",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                VEMP.NUMEND
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT PAR.NUMEND
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "NRLOGRADLOCALTRABDOM",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                VEMP.COMPLEMENTO
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT PAR.COMPLEMENTO
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "COMPLEMENTOLOCALTRABDOM",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                (SELECT NOMEBAI
                   FROM TSIBAI
                  WHERE CODBAI = VEMP.CODBAI)
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT (SELECT NOMEBAI
                           FROM TSIBAI
                          WHERE CODBAI = PAR.CODBAI)
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "BAIRROLOCALTRABDOM",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                VEMP.CEP
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT PAR.CEP
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "CEPLOCALTRABDOM",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                (SELECT CODMUNFIS
                   FROM TSICID
                  WHERE CODCID = VEMP.CODCID)
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT (SELECT CODMUNFIS
                           FROM TSICID
                          WHERE CODCID = PAR.CODCID)
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "CODMUNICLOCALTRABDOM",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                (SELECT UFS.UF
                   FROM TSIUFS UFS, TSICID CID
                  WHERE CODUF = CID.UF AND CID.CODCID = VEMP.CODCID)
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT (SELECT UFS.UF
                           FROM TSIUFS UFS, TSICID CID
                          WHERE CODUF = CID.UF AND CID.CODCID = PAR.CODCID)
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "UFLOCALTRABDOM",
          FUN.HORASSEM AS "QTDHRSSEM",
          CASE
             WHEN (CGH.ESCALONAR = 'N') THEN 1
             WHEN (CGH.DIASTRAB = CGH.DIASFOLGA) THEN 2
             ELSE 9
          END
             AS "TPJORNADA",
          NVL (CGH.DESCRCARGAHOR, 'NAO INFORMADA') AS "DSCTPJORN",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104 AND FUN.HORASSEM <= 25 THEN '1'
             WHEN FUN.CODCATEGESOCIAL <> 104 AND FUN.HORASSEM <= 26 THEN '3'
             WHEN FUN.CODCATEGESOCIAL <> 104 AND FUN.HORASSEM <= 25 THEN '2'
             ELSE '0'
          END
             AS "TMPPARC",
          CASE
             WHEN (SELECT DISTINCT 1
                     FROM TFPFOL FOL
                    WHERE     FOL.REFERENCIA = EMP.REFERENCIA
                          AND FOL.CODEMP = FUN.CODEMP
                          AND FOL.CODFUNC = FUN.CODFUNC
                          AND (   ','
                               || CAST (
                                     SIND.EVENTOCONTASSOC AS VARCHAR2 (250))
                               || ',') LIKE
                                 (   '%,'
                                  || CAST (FOL.CODEVENTO AS VARCHAR2 (5))
                                  || ',%')) = 1
             THEN
                SIND.CGC
             ELSE
                ''
          END
             AS "CNPJSINDTRAB",
          CAST ( (SELECT NUMPROCESSO
                    FROM TFPPSS
                   WHERE NUPROCESSO = FUN.NUPROCESSOJUD) AS VARCHAR (20))
             AS "NRPROCJUDALVARAJUDICIAL",
          (SELECT CASE
                     WHEN VEMP.NRINSCEMPREGADOR <> SUBSTR (EM.CGC, 1, 8)
                     THEN
                        EM.CGC
                     ELSE
                        NULL
                  END
             FROM TSIEMP EM
            WHERE EM.CODEMP = FUN.CODEMPORIG)
             AS "CNPJEMPREGANT",
          (SELECT CASE
                     WHEN VEMP.NRINSCEMPREGADOR <> SUBSTR (EM.CGC, 1, 8)
                     THEN
                        CAST (F.MATRICULA AS VARCHAR2 (30))
                     ELSE
                        NULL
                  END
             FROM TFPFUN F, TSIEMP EM
            WHERE     F.CODEMP = FUN.CODEMPORIG
                  AND F.CODFUNC = FUN.CODFUNCORIG
                  AND EM.CODEMP = FUN.CODEMPORIG)
             AS "MATRICANT",
          CASE
             WHEN VEMP.NRINSCEMPREGADOR <>
                     (SELECT SUBSTR (EM.CGC, 1, 8)
                        FROM TSIEMP EM
                       WHERE EM.CODEMP = FUN.CODEMPORIG)
             THEN
                FUN.DTTRANSFERENCIA
             ELSE
                NULL
          END
             AS "DTINIVINCULO",
          FUN.OBSEMPANT AS "OBSERVACAOSUCESSAOVINC",
          CASE
             WHEN ( (SELECT NVL (OCO.DTINICOCOR, '')
                       FROM TFPOCO OCO, TFPHIS H
                      WHERE     OCO.CODEMP = FUN.CODEMP
                            AND OCO.CODFUNC = FUN.CODFUNC
                            AND OCO.CODHISTOCOR = H.CODHISTOCOR
                            AND H.AFASTAMENTO IN ('A', 'D', 'M', 'G', 'Y')
                            AND H.CODMOTAFAST IS NOT NULL
                            AND OCO.DTFINALOCOR IS NULL) <
                      VEMP.DTCARGAINICIAL)
             THEN
                (SELECT NVL (OCO.DTINICOCOR, '')
                   FROM TFPOCO OCO, TFPHIS H
                  WHERE     OCO.CODEMP = FUN.CODEMP
                        AND OCO.CODFUNC = FUN.CODFUNC
                        AND OCO.CODHISTOCOR = H.CODHISTOCOR
                        AND H.AFASTAMENTO IN ('A', 'D', 'M', 'G', 'Y')
                        AND H.CODMOTAFAST IS NOT NULL
                        AND OCO.DTFINALOCOR IS NULL)
             ELSE
                NULL
          END
             AS "DTINIAFAST",
          CASE
             WHEN ( (SELECT NVL (OCO.DTINICOCOR, '')
                       FROM TFPOCO OCO, TFPHIS H
                      WHERE     OCO.CODEMP = FUN.CODEMP
                            AND OCO.CODFUNC = FUN.CODFUNC
                            AND OCO.CODHISTOCOR = H.CODHISTOCOR
                            AND H.AFASTAMENTO IN ('A', 'D', 'M', 'G', 'Y')
                            AND H.CODMOTAFAST IS NOT NULL
                            AND OCO.DTFINALOCOR IS NULL) <
                      VEMP.DTCARGAINICIAL)
             THEN
                (SELECT NVL (H.CODMOTAFAST, '')
                   FROM TFPOCO OCO, TFPHIS H
                  WHERE     OCO.CODEMP = FUN.CODEMP
                        AND OCO.CODFUNC = FUN.CODFUNC
                        AND OCO.CODHISTOCOR = H.CODHISTOCOR
                        AND H.AFASTAMENTO IN ('A', 'D', 'M', 'G', 'Y')
                        AND H.CODMOTAFAST IS NOT NULL
                        AND OCO.DTFINALOCOR IS NULL)
             ELSE
                NULL
          END
             AS "CODMOTAFAST",
          PUB.MTVALTER,
          FUN.JUSTPRORR,
          NULL AS DSCALT,
          CASE
             WHEN (FUN.DTDEM < VEMP.DTCARGAINICIAL) THEN FUN.DTDEM
             ELSE NULL
          END
             AS "DTDESLIG",
          VEMP.CODEMPMATRIZ AS CODEMP,
          CAST (FUN.CODEMP || ':' || FUN.CODFUNC AS VARCHAR2 (100))
             AS "CHAVE",
          FUN.SITESOCIAL,
          SNK_GET_TPAMB_ESOCIAL AS TPAMB
     FROM TFPFUN FUN
          LEFT JOIN TFPPUB PUB
             ON (    FUN.CODEMP = PUB.CODEMP
                 AND FUN.CODFUNC = PUB.CODFUNC
                 AND EXISTS
                        (SELECT 1
                           FROM TSIPAR
                          WHERE CHAVE = 'FPTRIBUNAL' AND LOGICO = 'S'))
          LEFT JOIN TFPDEP DEP ON DEP.CODDEP = FUN.CODDEP
          LEFT JOIN TFPCGH CGH ON FUN.CODCARGAHOR = CGH.CODCARGAHOR
          LEFT JOIN TSIBAI BAI ON BAI.CODBAI = FUN.CODBAI
          LEFT JOIN TSICID CID ON CID.CODCID = FUN.CODCID
          LEFT JOIN TSIUFS UFS ON UFS.CODUF = CID.UF
          LEFT JOIN TSIPAI PA ON PA.CODPAIS = UFS.CODPAIS
          LEFT JOIN TSIEND EN ON EN.CODEND = FUN.CODEND
          LEFT JOIN TFPSIN SIND ON SIND.CODSIND = FUN.CODSIND,
          TFPEMP EMP,
          tsiemp em,
          VGF_EVENTO_EMPREGADOR VEMP
    WHERE     FUN.CODEMP = EMP.CODEMP
          AND FUN.CODEMP = VEMP.CODEMP
          and fun.codemp = em.codemp
          AND VEMP.DTCARGAINICIAL IS NOT NULL
          AND FUN.CODCATEGESOCIAL NOT IN
                 (701,
                  711,
                  712,
                  721,
                  722,
                  723,
                  731,
                  734,
                  738,
                  741,
                  751,
                  761,
                  771,
                  781)
          AND FUN.SITESOCIAL IN ('O', '5', '6', 'T')
/
 
 
 
/*
Requer    : 4210012
Conexao   : ORCL
Data      : 18/05/2018 09:21:38
Num.Script: 55530-0-0
Nro. O.S. : 1166138
Nome      : Alterar - TRG_INC_UPD_TGFCAB_ORD
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - TRG_INC_UPD_TGFCAB_ORD
NomeObjeto: TRG_INC_UPD_TGFCAB_ORD
TipoObjeto: TRIGGER
NomeTabela: TGFCAB
Executar  : SE_EXISTIR
Ocorrencia: 4210013
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_INC_UPD_TGFCAB_ORD
BEFORE INSERT OR UPDATE 
ON TGFCAB 
FOR EACH ROW
DECLARE
  P_COUNT           INT;
  P_COUNTVAL     INT;
  ERRMSG            VARCHAR2(255);
  ERROR             EXCEPTION;
  P_VALIDAR         BOOLEAN;
  P_VLRDESDOBFRETE  FLOAT;
  P_NUVIAG          NUMBER(10);
  P_SEQMDFE         NUMBER(5);
  P_EXISTEMDFE      BOOLEAN;
BEGIN

  IF STP_GET_ATUALIZANDO THEN
    RETURN;
  END IF;

  /* 
  Sincronizac?o de dados
  */
  P_VALIDAR := Fpodevalidar('TGFCAB');
  
  IF (NVL(:NEW.ORDEMCARGA,0) <> 0) THEN          
    SELECT COUNT(1) INTO P_COUNT
    FROM TGFORD ORD
    WHERE ORD.ORDEMCARGA = :NEW.ORDEMCARGA
      AND ORD.CODEMP = (SELECT CASE WHEN EMP.CODEMPOC IS NULL THEN EMP.CODEMP ELSE CODEMPOC END 
                        FROM TGFEMP EMP 
                        WHERE EMP.CODEMP = :NEW.CODEMP);
        
    IF (P_COUNT=0) THEN
        RAISE_APPLICATION_ERROR(-20101, 'Não existe referencia para ordem de Carga: '||TO_CHAR(:NEW.ORDEMCARGA)||' informada na nota de Nro Unico: '||TO_CHAR(:NEW.NUNOTA));
    END IF;  
  END IF;
  
  IF UPDATING THEN  
    IF (NVL(:OLD.ORDEMCARGA,0) <> NVL(:NEW.ORDEMCARGA,0)) THEN
      IF (NVL(:NEW.ORDEMCARGA,0) <> 0) THEN           
        SELECT COUNT(1) INTO P_COUNT
        FROM TGFORD ORD
        WHERE ORD.ORDEMCARGA = :NEW.ORDEMCARGA
          AND ORD.CODEMP = (SELECT CASE WHEN EMP.CODEMPOC IS NULL THEN EMP.CODEMP ELSE CODEMPOC END 
                            FROM TGFEMP EMP 
                            WHERE EMP.CODEMP = :NEW.CODEMP)
          AND SITUACAO = 'A';
              
        IF (P_COUNT = 0) AND (P_VALIDAR) THEN
          
          SELECT COUNT(1) INTO P_COUNT
          FROM TGFORD ORD
          WHERE ORD.ORDEMCARGA = :NEW.ORDEMCARGA
            AND ORD.CODEMP = (SELECT CASE WHEN EMP.CODEMPOC IS NULL THEN EMP.CODEMP ELSE CODEMPOC END 
                            FROM TGFEMP EMP 
                            WHERE EMP.CODEMP = :NEW.CODEMP)
            AND SITUACAO = 'F' 
            AND SNK_getTSIPARLogico('ALTOCFECFORMOC') = 'S';
        
          IF (P_COUNT = 0) THEN
            ERRMSG := 'Ordem de carga '||:NEW.ORDEMCARGA||' usada na nota de Nro Unico: '||:NEW.NUNOTA||' não esta aberta ou não existe.';
            RAISE ERROR;
          END IF;
        END IF;
            
        SELECT COUNT(1) INTO P_COUNT
        FROM TGFORD ORD
        WHERE ORD.ORDEMCARGA = :NEW.ORDEMCARGA
          AND ORD.CODEMP = (SELECT CASE WHEN EMP.CODEMPOC IS NULL THEN EMP.CODEMP ELSE CODEMPOC END 
                            FROM TGFEMP EMP 
                            WHERE EMP.CODEMP = :NEW.CODEMP)
          AND :NEW.DTNEG < NVL(DTINIC,'01-JAN-1998');
               
        IF (P_COUNT > 0) AND (P_VALIDAR) THEN
          SELECT COUNT(1) INTO P_COUNT
          FROM TSIPAR 
          WHERE CHAVE = 'DTNEGDTINICOC' 
            AND LOGICO = 'S';
          --E O PARAMETRO 'DTNEGDTINICOC' ESTA IGUAL A 'N' OU N?O EXISTE
          IF  (P_COUNT = 0) AND (P_VALIDAR) THEN
            ERRMSG := 'A data de negociação da nota de Nro Unico '||:NEW.NUNOTA||' e anterior a data inicio da Ordem de Carga '||:NEW.ORDEMCARGA||'.';
            RAISE ERROR;
          END IF;
        END IF;                  
      END IF;

      IF :OLD.ORDEMCARGA IS NOT NULL AND :NEW.STATUSNOTA = 'L' THEN 
        BEGIN
          SELECT M.NUVIAG, M.SEQMDFE INTO P_NUVIAG, P_SEQMDFE
          FROM TGFORD O
              INNER JOIN TGFVIAG V ON V.NUVIAG = O.NUVIAG
              INNER JOIN TGFMDFE M ON M.NUVIAG = V.NUVIAG
			  INNER JOIN TGFNMDFE N ON N.NUVIAG = V.NUVIAG
          WHERE N.NUNOTA = :OLD.NUNOTA
              AND O.CODEMP = :OLD.CODEMP
              AND O.ORDEMCARGA = :OLD.ORDEMCARGA
              AND M.STATUSMDFE NOT IN ('5','6','7'); --5 - Cancelado  6 - Encerrado  7 - Denegado

          P_EXISTEMDFE := TRUE;
        EXCEPTION WHEN NO_DATA_FOUND THEN
          P_EXISTEMDFE := FALSE;
        END;

        IF P_EXISTEMDFE = TRUE THEN
          ERRMSG := 'Nota de Nro. Único '||:OLD.NUNOTA||' não pode ter sua Ordem de Carga '||:OLD.ORDEMCARGA||' alterada, pois está vinculada a um MDF-e com status diferente de Encerrado, Cancelado ou Denegado. Nro. Viagem '||P_NUVIAG||', Sequência do manifesto '||P_SEQMDFE||'.';
          RAISE ERROR;        
        END IF;
      END IF;
 
      P_COUNTVAL := 0;
      SELECT COUNT(1) INTO P_COUNTVAL
      FROM TGFFIN
      WHERE NUNOTA = :NEW.NUNOTA
        AND ORDEMCARGA <> :NEW.ORDEMCARGA 
        AND (NURENEG IS NULL OR NURENEG = 0);
      IF P_COUNTVAL > 0 THEN             
        UPDATE TGFFIN SET ORDEMCARGA = :NEW.ORDEMCARGA
        WHERE NUNOTA = :NEW.NUNOTA  
          AND ORDEMCARGA <> :NEW.ORDEMCARGA 
          AND (NURENEG IS NULL OR NURENEG = 0);   /* alterac?o feita pelo Manoel  acrescentando a validac?o da ORDEM CARGA */ 
      END IF;  
    END IF;
          
    IF :OLD.NUMCONTRATO <> :NEW.NUMCONTRATO THEN
      P_COUNTVAL := 0;
      SELECT  COUNT(1) INTO P_COUNTVAL
      FROM TGFFIN
      WHERE NUNOTA = :NEW.NUNOTA
      AND NUMCONTRATO <> :NEW.NUMCONTRATO;
      IF P_COUNTVAL > 0 THEN            
        UPDATE TGFFIN SET NUMCONTRATO = :NEW.NUMCONTRATO
        WHERE NUNOTA = :NEW.NUNOTA
        AND NUMCONTRATO <> :NEW.NUMCONTRATO;
      END IF;  
    END IF;
      
    IF GET_TSIPAR_LOGICO('RATEXTNOTAFRINC') = 'N' AND ((:NEW.CODPARCTRANSP = 0) OR (:NEW.VLRFRETE = 0) OR (:NEW.TIPFRETE <> 'N')) THEN
      P_COUNTVAL := 0;
      
      SELECT COUNT(1) INTO P_COUNTVAL
      FROM TGFFIN
      WHERE NUNOTA = :NEW.NUNOTA AND DESDOBDUPL = 'F';
      
      IF P_COUNTVAL > 0 THEN 
        DELETE FROM TGFFIN WHERE NUNOTA = :NEW.NUNOTA AND DESDOBDUPL = 'F';
      END IF;  
    END IF;
      
    IF (:NEW.CODPARCTRANSP <> 0) AND (:NEW.VLRFRETE <> :OLD.VLRFRETE) AND (:NEW.TIPFRETE = 'N') THEN
      P_COUNTVAL := 0;
      
      SELECT SUM(VLRDESDOB) INTO P_VLRDESDOBFRETE
      FROM TGFFIN 
      WHERE NUNOTA = :NEW.NUNOTA
        AND DESDOBDUPL = 'F';
        
      P_VLRDESDOBFRETE := :NEW.VLRFRETE - P_VLRDESDOBFRETE;
          
      UPDATE TGFFIN SET VLRDESDOB = VLRDESDOB + (P_VLRDESDOBFRETE)
      WHERE NUNOTA = :NEW.NUNOTA
        AND DESDOBDUPL = 'F'
        AND DHBAIXA IS NULL;
    END IF;
    
  END IF;
  RETURN;  
EXCEPTION
  WHEN ERROR THEN
  /* 
  Sincronizac?o de dados n?o faz validac?es
  */
  IF (P_VALIDAR) THEN 
    RAISE_APPLICATION_ERROR(-20101, ERRMSG);
  END IF; 
END;
/
 
 
 
/*
Requer    : 4210012
Conexao   : ORCL
Data      : 18/05/2018 09:21:38
Num.Script: 55531-0-1000
Nro. O.S. : 1166138
Nome      : INSERE - THOOBJ - 5553000
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_INC_UPD_TGFCAB_ORD
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210013
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_INC_UPD_TGFCAB_ORD' NOMEOBJ, 55530 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, 'b07dc16c44514ea2e8bda5d72418b379' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_INC_UPD_TGFCAB_ORD' and THO.hashcode = 'b07dc16c44514ea2e8bda5d72418b379')
/
 
 
 
/*
Requer    : 4210012
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 55545-0-0
Nro. O.S. : 1148508
Nome      : Alterar - SNK_GET_IDPROCESSO_IMP_EFD
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - SNK_GET_IDPROCESSO_IMP_EFD
NomeObjeto: SNK_GET_IDPROCESSO_IMP_EFD
TipoObjeto: FUNCTION
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210013
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE FUNCTION SNK_GET_IDPROCESSO_IMP_EFD(P_TIPOIMPOSTO NUMBER,
                                                      P_CODEMP      NUMBER,
                                                      P_CODPARC     NUMBER,
                                                      P_CODPROD     NUMBER,
                                                      P_CODLST      NUMBER,
                                                      P_DATMOV      DATE,
                                                      P_TIPIDPROCESSO VARCHAR2 := 'N') /*N = NUPROCESSO S=SEQUENCIA*/
RETURN NUMBER
AS
    P_NUPROCESSO    TRIPAJ.NUPROCESSO%TYPE := NULL;
    P_SEQUENCIA     TRIPISET.SEQUENCIA%TYPE := NULL;
    P_RESULT        NUMBER(10);
BEGIN
    BEGIN
        SELECT MAX(PAJ.NUPROCESSO), MAX(PISET.SEQUENCIA)
               INTO P_NUPROCESSO, P_SEQUENCIA
        FROM TRIPAJ PAJ
            ,TRIPISET PISET
        WHERE PAJ.ATIVO = 'S'
            AND P_DATMOV BETWEEN PAJ.DTINIVALIDADE AND NVL(PAJ.DTFIMVALIDADE, P_DATMOV)
            AND PISET.NUPROCESSO = PAJ.NUPROCESSO
            AND ( /* EFD REINF   */ (PISET.INDSUSPREINF IS NOT NULL AND NVL(PISET.PERCSUSPIMP, 0) > 0) OR
                  /* EFD CONTRIB */ (PISET.INDNATACAOJUD IS NOT NULL) )
            AND PISET.DTINIVIGOR <= P_DATMOV
            AND P_DATMOV BETWEEN PISET.DTINIVIGOR AND NVL(PISET.DTFIMVIGOR, P_DATMOV)
            AND PISET.DTINIVIGOR = (SELECT MAX(PISET2.DTINIVIGOR) 
                                    FROM TRIPISET PISET2
                                    WHERE PISET2.NUPROCESSO = PAJ.NUPROCESSO 
                                        AND ( /* EFD REINF   */ (PISET.INDSUSPREINF IS NOT NULL AND NVL(PISET.PERCSUSPIMP, 0) > 0) OR
                                              /* EFD CONTRIB */ (PISET.INDNATACAOJUD IS NOT NULL) )
                                        AND PISET2.DTINIVIGOR <= P_DATMOV
                                        AND P_DATMOV BETWEEN PISET2.DTINIVIGOR AND NVL(PISET2.DTFIMVIGOR, P_DATMOV)
                                        AND EXISTS(SELECT 1 FROM TRIPIMP PIMP WHERE PIMP.NUPROCESSO = PISET2.NUPROCESSO AND PIMP.SEQUENCIA = PISET2.SEQUENCIA AND PIMP.TIPOIMPOSTO = P_TIPOIMPOSTO)
                                        AND (NOT EXISTS(SELECT 1 FROM TRIPEMP PEMP WHERE PEMP.NUPROCESSO = PISET2.NUPROCESSO AND PEMP.SEQUENCIA = PISET2.SEQUENCIA) OR
                                                 EXISTS(SELECT 1 FROM TRIPEMP PEMP2 WHERE PEMP2.NUPROCESSO = PISET2.NUPROCESSO AND PEMP2.SEQUENCIA = PISET2.SEQUENCIA AND PEMP2.CODEMP = P_CODEMP))
                                        AND (NOT EXISTS(SELECT 1 FROM TRIPPARC PPARC WHERE PPARC.NUPROCESSO = PISET2.NUPROCESSO AND PPARC.SEQUENCIA = PISET2.SEQUENCIA) OR
                                                 EXISTS(SELECT 1 FROM TRIPPARC PPARC2 WHERE PPARC2.NUPROCESSO = PISET2.NUPROCESSO AND PPARC2.SEQUENCIA = PISET2.SEQUENCIA AND PPARC2.CODPARC = P_CODPARC))
                                        AND (NOT EXISTS(SELECT 1 FROM TRIPPROD PPROD WHERE PPROD.NUPROCESSO = PISET2.NUPROCESSO AND PPROD.SEQUENCIA = PISET2.SEQUENCIA) OR
                                                 EXISTS(SELECT 1 FROM TRIPPROD PPROD2 WHERE PPROD2.NUPROCESSO = PISET2.NUPROCESSO AND PPROD2.SEQUENCIA = PISET2.SEQUENCIA AND PPROD2.CODPROD = NVL(P_CODPROD, -1)))
                                        AND (NOT EXISTS(SELECT 1 FROM TRIPTPSV PTPSV WHERE PTPSV.NUPROCESSO = PISET2.NUPROCESSO AND PTPSV.SEQUENCIA = PISET2.SEQUENCIA) OR
                                                 EXISTS(SELECT 1 FROM TRIPTPSV PTPSV2 WHERE PTPSV2.NUPROCESSO = PISET2.NUPROCESSO AND PTPSV2.SEQUENCIA = PISET2.SEQUENCIA AND PTPSV2.CODLST = NVL(P_CODLST, -1)))
                                   )
            AND EXISTS(SELECT 1 FROM TRIPIMP PIMP WHERE PIMP.NUPROCESSO = PISET.NUPROCESSO AND PIMP.SEQUENCIA = PISET.SEQUENCIA AND PIMP.TIPOIMPOSTO = P_TIPOIMPOSTO)
            AND (NOT EXISTS(SELECT 1 FROM TRIPEMP PEMP WHERE PEMP.NUPROCESSO = PISET.NUPROCESSO AND PEMP.SEQUENCIA = PISET.SEQUENCIA) OR
                     EXISTS(SELECT 1 FROM TRIPEMP PEMP2 WHERE PEMP2.NUPROCESSO = PISET.NUPROCESSO AND PEMP2.SEQUENCIA = PISET.SEQUENCIA AND PEMP2.CODEMP = P_CODEMP))
            AND (NOT EXISTS(SELECT 1 FROM TRIPPARC PPARC WHERE PPARC.NUPROCESSO = PISET.NUPROCESSO AND PPARC.SEQUENCIA = PISET.SEQUENCIA) OR
                     EXISTS(SELECT 1 FROM TRIPPARC PPARC2 WHERE PPARC2.NUPROCESSO = PISET.NUPROCESSO AND PPARC2.SEQUENCIA = PISET.SEQUENCIA AND PPARC2.CODPARC = P_CODPARC))
            AND (NOT EXISTS(SELECT 1 FROM TRIPPROD PPROD WHERE PPROD.NUPROCESSO = PISET.NUPROCESSO AND PPROD.SEQUENCIA = PISET.SEQUENCIA) OR
                     EXISTS(SELECT 1 FROM TRIPPROD PPROD2 WHERE PPROD2.NUPROCESSO = PISET.NUPROCESSO AND PPROD2.SEQUENCIA = PISET.SEQUENCIA AND PPROD2.CODPROD = NVL(P_CODPROD, -1)))
            AND (NOT EXISTS(SELECT 1 FROM TRIPTPSV PTPSV WHERE PTPSV.NUPROCESSO = PISET.NUPROCESSO AND PTPSV.SEQUENCIA = PISET.SEQUENCIA) OR
                     EXISTS(SELECT 1 FROM TRIPTPSV PTPSV2 WHERE PTPSV2.NUPROCESSO = PISET.NUPROCESSO AND PTPSV2.SEQUENCIA = PISET.SEQUENCIA AND PTPSV2.CODLST = NVL(P_CODLST, -1)));

    EXCEPTION WHEN NO_DATA_FOUND THEN
        P_NUPROCESSO := NULL;
        P_SEQUENCIA := NULL;
    END;

    IF P_TIPIDPROCESSO = 'N' THEN
        P_RESULT := P_NUPROCESSO; 
    ELSE IF P_TIPIDPROCESSO = 'S' THEN
        P_RESULT := P_SEQUENCIA; 
      ELSE 
        P_RESULT := NULL; 
      END IF;
    END IF;

    RETURN P_RESULT;
END;
/
 
 
 
/*
Requer    : 4210012
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 55546-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5554500
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_GET_IDPROCESSO_IMP_EFD
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210013
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_GET_IDPROCESSO_IMP_EFD' NOMEOBJ, 55545 NUMSCRIPT, SYSDATE DTALTER, 'FUNCTION' TIPO, 'd691ecde9d28481f4bbcf2e62471432d' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_GET_IDPROCESSO_IMP_EFD' and THO.hashcode = 'd691ecde9d28481f4bbcf2e62471432d')
/
 
 
 
/*
Requer    : 4210012
Conexao   : ORCL
Data      : 22/05/2018 14:22:26
Num.Script: 55547-0-0
Nro. O.S. : 1148508
Nome      : Alterar - VRI_EVT_R1000
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VRI_EVT_R1000
NomeObjeto: VRI_EVT_R1000
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210013
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R1000
AS 
SELECT
 EMP.CODEMP                                       		AS CODEMP
,SYSDATE                                          		AS DTREF
,EMP.CODEMP                                       		AS CHAVE
,CASE WHEN LENGTH(EMPC.CGC) = 14
	  THEN '1' 
	  ELSE '2' 
 END                                              		AS TPINSC
,CASE WHEN LENGTH(EMPC.CGC) = 14 
	  THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
				THEN EMPC.CGC
				ELSE SUBSTR(EMPC.CGC,1,8)
		   END
	  ELSE EMPC.CGC
 END                                              		AS NRINSC
,EMP.DTVALINIREINF                                		AS INIVALID
,EMP.DTVALFINREINF                                		AS FIMVALID
,EMP.TRIBREINF                                    		AS CLASSTRIB
,CASE WHEN EMP.ENTREGAECD = 'S' 
	  THEN '1' 
	  ELSE '0' 
 END                                              		AS INDESCRITURACAO
,CASE WHEN EMP.DESONERAFOLHACPRB = 'S' 
	  THEN '1' 
	  ELSE '0' 
 END                                              		AS INDDESONERACAO 
, 0                                               		AS INDACORDOISENMULTA
,EMP.SITEMPREINF                                  		AS INDSITPJ
,PAR.NOMEPARC                                     		AS NMCTT
,PAR.CGC_CPF                                      		AS CPFCTT
,PAR.TELEFONE                                     		AS FONEFIXOCTT
,PAR.FAX                                          		AS FONECEL
,PAR.EMAIL                                        		AS EMAILCTT
,CASE WHEN NVL(EMP.VINCULOEFR, '*') = '*' THEN NULL 
	  WHEN NVL(EMP.VINCULOEFR, '*') = '1' THEN 'S' 
	  ELSE 'N' 
 END                                              		AS IDEEFR
,CASE WHEN NVL(EMP.VINCULOEFR, '*') IN ('*', '1') 
	  THEN NULL
	  ELSE EMP.CNPJEFRVINC  
 END                                              		AS CNPJEFR
FROM TGFEMP EMP 
	INNER JOIN TSIEMP EMPC ON EMP.CODEMP = EMPC.CODEMP
	LEFT JOIN TGFPAR PAR ON EMP.RESPENTREINF = PAR.CODPARC
WHERE EMP.ATIVO = 'S'
  AND (EMP.EMPADMPUBDIR = 'S' OR NVL(EMP.CODEMPMATRIZEFD, EMP.CODEMP) IN(0, EMP.CODEMP))
  AND EMP.DTVALINIREINF IS NOT NULL
/
 
 
 
/*
Requer    : 4210012
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 55548-0-0
Nro. O.S. : 1148508
Nome      : Alterar - VRI_EVT_R2010_NFS_INFOTPSERV
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VRI_EVT_R2010_NFS_INFOTPSERV
NomeObjeto: VRI_EVT_R2010_NFS_INFOTPSERV
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210013
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VRI_EVT_R2010_NFS_INFOTPSERV
AS
SELECT 
 TABX.CODEMP
,TABX.DTREF
,TABX.CHAVE
,TABX.NUNOTA
,TABX.TPSERVICO
,TABX.TIPODOCUMENTO
,TABX.TPINSC
,TABX.NRINSC
,TABX.TPINSCESTAB
,TABX.NRINSCESTAB
,TABX.INDOBRA
,TABX.CNPJPRESTADOR
,TABX.INDCPRB
,(TABX.VLRNRETADIC15 + TABX.VLRNRETADIC20 + TABX.VLRNRETADIC25) AS VLRNRETADIC
,TABX.VLRTOTALBRUTO 
,TABX.VLRBASERET
,TABX.VLRRETENCAO
,TABX.VLRRETSUB
,TABX.VLRNRETPRINC
,TABX.VLRSERVICOS15
,TABX.VLRSERVICOS20
,TABX.VLRSERVICOS25
,TABX.VLRADICIONAL
,TABX.NUPROCESSO_INSS_PRINC
,TABX.SEQPROCESSO_INSS_PRINC
,TABX.NUPROCESSO_INSS_15
,TABX.SEQPROCESSO_INSS_15
,TABX.VLRNRETADIC15
,TABX.NUPROCESSO_INSS_20
,TABX.SEQPROCESSO_INSS_20
,TABX.VLRNRETADIC20
,TABX.NUPROCESSO_INSS_25
,TABX.SEQPROCESSO_INSS_25
,TABX.VLRNRETADIC25
,TABX.VLRCRTOM
,TABX.VLRCRTOMSUSP
FROM (
	SELECT
	 TAB.CODEMP
	,TAB.DTREF
	,TAB.TPINSC||','||TAB.NRINSC||','||TAB.TPINSCESTAB||','||TAB.NRINSCESTAB||','||TAB.INDOBRA||','||TAB.CNPJPRESTADOR||','||TAB.INDCPRB AS CHAVE
	,TAB.NUDOCUMENTO AS NUNOTA
	,TAB.TPSERVICO
	,TAB.TIPODOCUMENTO
	,TAB.TPINSC
	,TAB.NRINSC
	,TAB.TPINSCESTAB
	,TAB.NRINSCESTAB
	,TAB.INDOBRA
	,TAB.CNPJPRESTADOR
	,TAB.INDCPRB
	,TRUNC(SUM(TAB.VLRTOTALBRUTO), 2) AS VLRTOTALBRUTO 
	,TRUNC(SUM(TAB.VLRBASERET), 2) AS VLRBASERET
	,TRUNC(SUM(TAB.VLRRETENCAO), 2) AS VLRRETENCAO
	,TRUNC(SUM(TAB.VLRRETSUB), 2) AS VLRRETSUB
	,TRUNC(SUM(TAB.VLRRETENCAO * NVL(ISET_INSS_PRINC.PERCSUSPIMP, 0) / 100), 2) AS VLRNRETPRINC
	,TRUNC(SUM(TAB.VLRSERVICOS15), 2) AS VLRSERVICOS15
	,TRUNC(SUM(TAB.VLRSERVICOS20), 2) AS VLRSERVICOS20
	,TRUNC(SUM(TAB.VLRSERVICOS25), 2) AS VLRSERVICOS25
	,TRUNC(SUM(TAB.VLRADICIONAL), 2) AS VLRADICIONAL
	,MAX(TAB.NUPROCESSO_INSS_PRINC) AS NUPROCESSO_INSS_PRINC
	,MAX(TAB.SEQPROCESSO_INSS_PRINC) AS SEQPROCESSO_INSS_PRINC
	,MAX(TAB.NUPROCESSO_INSS_15) AS NUPROCESSO_INSS_15
	,MAX(TAB.SEQPROCESSO_INSS_15) AS SEQPROCESSO_INSS_15
	,TRUNC(SUM(CASE WHEN TAB.VLRSERVICOS15 > 0 THEN TAB.VLRADICIONAL * NVL(ISET_INSS_15.PERCSUSPIMP, 0) / 100 ELSE 0 END), 2) AS VLRNRETADIC15
	,MAX(TAB.NUPROCESSO_INSS_20) AS NUPROCESSO_INSS_20
	,MAX(TAB.SEQPROCESSO_INSS_20) AS SEQPROCESSO_INSS_20
	,TRUNC(SUM(CASE WHEN TAB.VLRSERVICOS20 > 0 THEN TAB.VLRADICIONAL * NVL(ISET_INSS_20.PERCSUSPIMP, 0) / 100 ELSE 0 END), 2) AS VLRNRETADIC20
	,MAX(TAB.NUPROCESSO_INSS_25) AS NUPROCESSO_INSS_25
	,MAX(TAB.SEQPROCESSO_INSS_25) AS SEQPROCESSO_INSS_25
	,TRUNC(SUM(CASE WHEN TAB.VLRSERVICOS25 > 0 THEN TAB.VLRADICIONAL * NVL(ISET_INSS_25.PERCSUSPIMP, 0) / 100 ELSE 0 END), 2) AS VLRNRETADIC25
	,TRUNC(SUM(VLRCRTOM), 2) AS VLRCRTOM
	,TRUNC(SUM(VLRCRTOMSUSP), 2) AS VLRCRTOMSUSP
	FROM (
		/*BUSCA PELAS NOTAS DE SERVIÇOS TOMADOS*/
		SELECT 
		 CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMP.CODEMP
			  WHEN NVL(EMP.CODEMPMATRIZEFD, 0) > 0 THEN EMP.CODEMPMATRIZEFD
			  ELSE EMP.CODEMP 
		 END AS CODEMP
		,TRUNC(CAB.DTNEG, 'MM') AS DTREF
		,CASE WHEN LENGTH(EMPC.CGC) = 14 
			  THEN '1' 
			  ELSE '2' 
		 END AS TPINSC
		,CASE WHEN LENGTH(EMPC.CGC) = 14 
			  THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
						THEN EMPC.CGC
						ELSE SUBSTR(EMPC.CGC,1,8)
				   END
			  ELSE EMPC.CGC
		 END AS NRINSC
		,ITE.NUNOTA AS NUDOCUMENTO
		,'N' AS TIPODOCUMENTO
		,CASE WHEN CAB.CODOBRA IS NOT NULL THEN 4 ELSE 1 END AS TPINSCESTAB
		,CASE WHEN CAB.CODOBRA IS NOT NULL THEN CAB.CODOBRA ELSE EMPC.CGC END AS NRINSCESTAB
		,CASE WHEN PRO.OBRACONSTCIVIL IS NULL THEN 0 ELSE PRO.OBRACONSTCIVIL END AS INDOBRA
		,PAR.CGC_CPF AS CNPJPRESTADOR
		,CASE WHEN DIN.NUNOTA IS NOT NULL THEN CASE WHEN (NVL(DIN.ALIQUOTA, 0) - NVL(DIN.PERCINSSESPECIAL, 0)) = 11 THEN 0 
												    ELSE 1 
											   END
			  WHEN (NVL(IMN.ALIQUOTA, 0) - NVL(IMN.PERCINSSESPECIAL, 0)) = 11 THEN 0
			  ELSE 1
		 END AS INDCPRB
		,PRO.CLASSIFCESSAOOBRA AS TPSERVICO
		,ITE.VLRTOT AS VLRTOTALBRUTO
		,NVL(DIN.BASERED, IMN.BASE) AS VLRBASERET
		,CASE WHEN DIN.NUNOTA IS NOT NULL THEN CASE WHEN NVL(DIN.TIPOINSSESPECIAL, ' ') <> ' ' THEN NVL(DIN.VALOR, 0) - NVL(DIN.VLRINSSESPECIAL, 0) ELSE NVL(DIN.VALOR, 0) END
			  ELSE CASE WHEN NVL(IMN.TIPOINSSESPECIAL, ' ') <> ' ' THEN NVL(IMN.VALOR, 0) - NVL(IMN.VLRINSSESPECIAL, 0) ELSE NVL(IMN.VALOR, 0) END END AS VLRRETENCAO
		,0 AS VLRRETSUB /*POR ENQUANTO NÃO VAMOS GERAR ESSA TAG*/
		,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, ' ') = '1' AND NVL(DIN.VLRINSSESPECIAL, 0) > 0 OR
				   NVL(IMN.TIPOINSSESPECIAL, ' ') = '1' AND NVL(IMN.VLRINSSESPECIAL, 0) > 0 THEN NVL(DIN.BASERED, IMN.BASE) ELSE 0 END AS VLRSERVICOS15
		,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, ' ') = '2' AND NVL(DIN.VLRINSSESPECIAL, 0) > 0 OR
				   NVL(IMN.TIPOINSSESPECIAL, ' ') = '2' AND NVL(IMN.VLRINSSESPECIAL, 0) > 0 THEN NVL(DIN.BASERED, IMN.BASE) ELSE 0 END AS VLRSERVICOS20
		,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, ' ') = '3' AND NVL(DIN.VLRINSSESPECIAL, 0) > 0 OR
				   NVL(IMN.TIPOINSSESPECIAL, ' ') = '3' AND NVL(IMN.VLRINSSESPECIAL, 0) > 0 THEN NVL(DIN.BASERED, IMN.BASE) ELSE 0 END AS VLRSERVICOS25
		,NVL(DIN.VLRINSSESPECIAL, NVL(IMN.VLRINSSESPECIAL, 0)) AS VLRADICIONAL
		,SNK_GET_IDPROCESSO_IMP_EFD(1, 
									EMP.CODEMP, 
									PAR.CODPARC, 
									ITE.CODPROD, 
									PRO.CODLST, 
									CAB.DTNEG) AS NUPROCESSO_INSS_PRINC
		,SNK_GET_IDPROCESSO_IMP_EFD(1, 
									EMP.CODEMP, 
									PAR.CODPARC, 
									ITE.CODPROD, 
									PRO.CODLST, 
									CAB.DTNEG,
									'S') AS SEQPROCESSO_INSS_PRINC
		,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, IMN.TIPOINSSESPECIAL) = '1' THEN SNK_GET_IDPROCESSO_IMP_EFD(9, 
																										 EMP.CODEMP, 
																										 PAR.CODPARC, 
																										 ITE.CODPROD, 
																										 PRO.CODLST, 
																										 CAB.DTNEG)
			  ELSE NULL END AS NUPROCESSO_INSS_15
		,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, IMN.TIPOINSSESPECIAL) = '1' THEN SNK_GET_IDPROCESSO_IMP_EFD(9, 
																										 EMP.CODEMP, 
																										 PAR.CODPARC, 
																										 ITE.CODPROD, 
																										 PRO.CODLST, 
																										 CAB.DTNEG,
																										 'S')
			  ELSE NULL END AS SEQPROCESSO_INSS_15
		,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, IMN.TIPOINSSESPECIAL) = '2' THEN SNK_GET_IDPROCESSO_IMP_EFD(10, 
																										 EMP.CODEMP, 
																										 PAR.CODPARC, 
																										 ITE.CODPROD, 
																										 PRO.CODLST, 
																										 CAB.DTNEG)
			  ELSE NULL END AS NUPROCESSO_INSS_20
		,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, IMN.TIPOINSSESPECIAL) = '2' THEN SNK_GET_IDPROCESSO_IMP_EFD(10, 
																										 EMP.CODEMP, 
																										 PAR.CODPARC, 
																										 ITE.CODPROD, 
																										 PRO.CODLST, 
																										 CAB.DTNEG,
																										 'S')
			  ELSE NULL END AS SEQPROCESSO_INSS_20
		,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, IMN.TIPOINSSESPECIAL) = '3' THEN SNK_GET_IDPROCESSO_IMP_EFD(11, 
																										 EMP.CODEMP, 
																										 PAR.CODPARC, 
																										 ITE.CODPROD, 
																										 PRO.CODLST, 
																										 CAB.DTNEG)
			  ELSE NULL END AS NUPROCESSO_INSS_25
		,CASE WHEN NVL(DIN.TIPOINSSESPECIAL, IMN.TIPOINSSESPECIAL) = '3' THEN SNK_GET_IDPROCESSO_IMP_EFD(11, 
																										 EMP.CODEMP, 
																										 PAR.CODPARC, 
																										 ITE.CODPROD, 
																										 PRO.CODLST, 
																										 CAB.DTNEG,
																										 'S')
			  ELSE NULL END AS SEQPROCESSO_INSS_25
		,0 AS VLRCRTOM 		/*AINDA NÃO SABEMOS QUAL A REGRA PARA ESTE CÁLCULO*/
		,0 AS VLRCRTOMSUSP	/*AINDA NÃO SABEMOS QUAL A REGRA PARA ESTE CÁLCULO*/
		FROM TGFITE ITE
			INNER JOIN TGFCAB CAB  ON CAB.NUNOTA = ITE.NUNOTA
			INNER JOIN (SELECT CODTIPOPER, DHALTER, TIPMOV, ATUALLIVISS, DESCROPER FROM TGFTOP) TPO  ON TPO.CODTIPOPER = CAB.CODTIPOPER AND TPO.DHALTER = CAB.DHTIPOPER
			INNER JOIN (SELECT CODEMP, CODEMPMATRIZEFD, EMPADMPUBDIR, ATIVO FROM TGFEMP) EMP  ON EMP.CODEMP = CAB.CODEMP
			INNER JOIN (SELECT CODEMP, RAZAOSOCIAL, NOMEFANTASIA, CGC FROM TSIEMP) EMPC ON EMPC.CODEMP = EMP.CODEMP
			INNER JOIN (SELECT CODPARC, NOMEPARC, CGC_CPF FROM TGFPAR) PAR  ON PAR.CODPARC = CAB.CODPARC
			INNER JOIN (SELECT CODPROD, OBRACONSTCIVIL, CLASSIFCESSAOOBRA, CODLST FROM TGFPRO) PRO  ON PRO.CODPROD = ITE.CODPROD
			LEFT JOIN  TGFDIN DIN  ON DIN.NUNOTA = ITE.NUNOTA AND DIN.SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 5 AND DIN.TIPO = -1 AND ((NVL(DIN.ALIQUOTA, 0) - NVL(DIN.PERCINSSESPECIAL, 0)) IN (3.5, 11))
			LEFT JOIN  TGFIMN IMN  ON IMN.NUNOTA = ITE.NUNOTA AND IMN.SEQUENCIA = ITE.SEQUENCIA AND IMN.TIPOIMPOSTO = 5 AND IMN.TIPIMP = -1 AND ((NVL(IMN.ALIQUOTA, 0) - NVL(IMN.PERCINSSESPECIAL, 0)) IN (3.5, 11))
		WHERE EMP.ATIVO = 'S'
			AND PRO.CLASSIFCESSAOOBRA IS NOT NULL
			AND ITE.USOPROD = 'S'
			AND TPO.TIPMOV = 'C'
			AND TPO.ATUALLIVISS = 'E'
			AND CAB.STATUSNOTA = 'L'
			AND (EXISTS (SELECT 1 FROM TGFDIN DIN WHERE DIN.NUNOTA = ITE.NUNOTA AND DIN.SEQUENCIA = ITE.SEQUENCIA AND DIN.CODIMP = 5 AND DIN.TIPO = -1 AND ((NVL(DIN.ALIQUOTA, 0) - NVL(DIN.PERCINSSESPECIAL, 0)) IN (3.5, 11))) OR 
				 EXISTS (SELECT 1 FROM TGFIMN IMN WHERE IMN.NUNOTA = ITE.NUNOTA AND IMN.SEQUENCIA = ITE.SEQUENCIA AND IMN.TIPOIMPOSTO = 5 AND IMN.TIPIMP = -1 AND ((NVL(IMN.ALIQUOTA, 0) - NVL(IMN.PERCINSSESPECIAL, 0)) IN (3.5, 11))))
		UNION ALL
		/*BUSCA PELO FINANCEIROS QUE REPRESENTAM SERVIÇOS TOMADOS*/
		SELECT 
		 CASE WHEN EMP.EMPADMPUBDIR = 'S' THEN EMP.CODEMP
			  WHEN NVL(EMP.CODEMPMATRIZEFD, 0) > 0 THEN EMP.CODEMPMATRIZEFD
			  ELSE EMP.CODEMP 
		 END AS CODEMP
		,TRUNC(FIN.DTNEG, 'MM') AS DTREF
		,CASE WHEN LENGTH(EMPC.CGC) = 14 
			  THEN '1' 
			  ELSE '2' 
		 END AS TPINSC
		,CASE WHEN LENGTH(EMPC.CGC) = 14 
			  THEN CASE WHEN EMP.EMPADMPUBDIR = 'S'
						THEN EMPC.CGC
						ELSE SUBSTR(EMPC.CGC,1,8)
				   END
			  ELSE EMPC.CGC
		 END AS NRINSC
		,FIN.NUFIN AS NUDOCUMENTO
		,'F' AS TIPODOCUMENTO
		,CASE WHEN FIN.CODOBRA IS NOT NULL THEN 4 ELSE 1 END AS TPINSCESTAB
		,CASE WHEN FIN.CODOBRA IS NOT NULL THEN FIN.CODOBRA ELSE EMPC.CGC END AS NRINSCESTAB
		,CASE WHEN FIN.OBRACONSTCIVIL IS NULL THEN 0 ELSE FIN.OBRACONSTCIVIL END AS INDOBRA
		,PAR.CGC_CPF AS CNPJPRESTADOR
		,CASE WHEN NVL(IMF.ALIQUOTA, 0) - NVL(IMF.PERCINSSESPECIAL, 0) = 11 THEN 0 ELSE 1 END AS INDCPRB
		,FIN.CLASSIFCESSAOOBRA AS TPSERVICO
		,FIN.VLRDESDOB AS VLRTOTALBRUTO
		,NVL(IMF.BASE, 0) AS VLRBASERET
		,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') <> ' ' THEN NVL(IMF.VALOR, 0) - NVL(IMF.VLRINSSESPECIAL, 0) ELSE NVL(IMF.VALOR, 0) END AS VLRRETENCAO
		,0 AS VLRRETSUB /*POR ENQUANTO NÃO VAMOS GERAR ESSA TAG*/
		,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') = '1' AND NVL(IMF.VLRINSSESPECIAL, 0) > 0 THEN NVL(IMF.BASE, 0) ELSE 0 END AS VLRSERVICOS15
		,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') = '2' AND NVL(IMF.VLRINSSESPECIAL, 0) > 0 THEN NVL(IMF.BASE, 0) ELSE 0 END AS VLRSERVICOS20
		,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') = '3' AND NVL(IMF.VLRINSSESPECIAL, 0) > 0 THEN NVL(IMF.BASE, 0) ELSE 0 END AS VLRSERVICOS25
		,NVL(IMF.VLRINSSESPECIAL, 0) AS VLRADICIONAL
		,SNK_GET_IDPROCESSO_IMP_EFD(1, 
									EMP.CODEMP, 
									PAR.CODPARC, 
									NULL, 
									FIN.CODLST, 
									FIN.DTNEG) AS NUPROCESSO_INSS_PRINC
		,SNK_GET_IDPROCESSO_IMP_EFD(1, 
									EMP.CODEMP, 
									PAR.CODPARC, 
									NULL, 
									FIN.CODLST, 
									FIN.DTNEG,
									'S') AS SEQPROCESSO_INSS_PRINC
		,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') = '1' THEN SNK_GET_IDPROCESSO_IMP_EFD(9, 
																						EMP.CODEMP, 
																						PAR.CODPARC, 
																						NULL, 
																						FIN.CODLST, 
																						FIN.DTNEG)
			  ELSE NULL END AS NUPROCESSO_INSS_15
		,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') = '1' THEN SNK_GET_IDPROCESSO_IMP_EFD(9, 
																						EMP.CODEMP, 
																						PAR.CODPARC, 
																						NULL, 
																						FIN.CODLST, 
																						FIN.DTNEG,
																						'S')
			  ELSE NULL END AS SEQPROCESSO_INSS_15
		,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') = '2' THEN SNK_GET_IDPROCESSO_IMP_EFD(10, 
																						EMP.CODEMP, 
																						PAR.CODPARC, 
																						NULL, 
																						FIN.CODLST, 
																						FIN.DTNEG)
			  ELSE NULL END AS NUPROCESSO_INSS_20
		,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') = '2' THEN SNK_GET_IDPROCESSO_IMP_EFD(10, 
																						EMP.CODEMP, 
																						PAR.CODPARC, 
																						NULL, 
																						FIN.CODLST, 
																						FIN.DTNEG,
																						'S')
			  ELSE NULL END AS SEQPROCESSO_INSS_20
		,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') = '3' THEN SNK_GET_IDPROCESSO_IMP_EFD(11, 
																						EMP.CODEMP, 
																						PAR.CODPARC, 
																						NULL, 
																						FIN.CODLST, 
																						FIN.DTNEG)
			  ELSE NULL END AS NUPROCESSO_INSS_25
		,CASE WHEN NVL(IMF.TIPOINSSESPECIAL, ' ') = '3' THEN SNK_GET_IDPROCESSO_IMP_EFD(11, 
																						EMP.CODEMP, 
																						PAR.CODPARC, 
																						NULL, 
																						FIN.CODLST, 
																						FIN.DTNEG,
																						'S')
			  ELSE NULL END AS SEQPROCESSO_INSS_25
		,0 AS VLRCRTOM 		/*AINDA NÃO SABEMOS QUAL A REGRA PARA ESTE CÁLCULO*/
		,0 AS VLRCRTOMSUSP	/*AINDA NÃO SABEMOS QUAL A REGRA PARA ESTE CÁLCULO*/
		FROM TGFFIN FIN
			INNER JOIN (SELECT CODTIPOPER, DHALTER, TIPMOV, ATUALLIVISS, DESCROPER FROM TGFTOP)  TPO  ON TPO.CODTIPOPER = FIN.CODTIPOPER AND TPO.DHALTER = FIN.DHTIPOPER
			INNER JOIN (SELECT CODEMP, CODEMPMATRIZEFD, EMPADMPUBDIR, ATIVO FROM TGFEMP) EMP  ON EMP.CODEMP = FIN.CODEMP
			INNER JOIN (SELECT CODEMP, RAZAOSOCIAL, NOMEFANTASIA, CGC FROM TSIEMP) EMPC ON EMPC.CODEMP = EMP.CODEMP
			INNER JOIN (SELECT CODPARC, NOMEPARC, CGC_CPF FROM TGFPAR) PAR  ON PAR.CODPARC = FIN.CODPARC
			INNER JOIN TGFIMF IMF ON IMF.NUFIN = FIN.NUFIN AND IMF.TIPIMP = -1 AND ((NVL(IMF.ALIQUOTA, 0) - NVL(IMF.PERCINSSESPECIAL, 0)) IN (3.5, 11))
			INNER JOIN TGFIMC IMC ON IMC.CODIMP = IMF.CODIMP AND IMC.TIPOIMPOSTO = 5
		WHERE EMP.ATIVO = 'S'
			AND FIN.CLASSIFCESSAOOBRA IS NOT NULL
			AND TPO.TIPMOV = 'I'
			AND TPO.ATUALLIVISS = 'E'
	) TAB
		LEFT JOIN  TRIPISET ISET_INSS_PRINC ON ISET_INSS_PRINC.NUPROCESSO = NUPROCESSO_INSS_PRINC AND ISET_INSS_PRINC.SEQUENCIA = SEQPROCESSO_INSS_PRINC 
		LEFT JOIN  TRIPISET ISET_INSS_15 ON ISET_INSS_15.NUPROCESSO = NUPROCESSO_INSS_15 AND ISET_INSS_15.SEQUENCIA = SEQPROCESSO_INSS_15
		LEFT JOIN  TRIPISET ISET_INSS_20 ON ISET_INSS_20.NUPROCESSO = NUPROCESSO_INSS_20 AND ISET_INSS_20.SEQUENCIA = SEQPROCESSO_INSS_20
		LEFT JOIN  TRIPISET ISET_INSS_25 ON ISET_INSS_25.NUPROCESSO = NUPROCESSO_INSS_25 AND ISET_INSS_25.SEQUENCIA = SEQPROCESSO_INSS_25
	GROUP BY
	 TAB.CODEMP
	,TAB.DTREF
	,TAB.TPINSC
	,TAB.NRINSC
	,TAB.NUDOCUMENTO
	,TAB.TIPODOCUMENTO
	,TAB.TPINSCESTAB
	,TAB.NRINSCESTAB
	,TAB.INDOBRA
	,TAB.CNPJPRESTADOR
	,TAB.INDCPRB
	,TAB.TPSERVICO
) TABX
/
 
 
 
/*
Requer    : 4210012
Conexao   : ORCL
Data      : 16/05/2018 16:18:15
Num.Script: 55564-0-0
Nro. O.S. : 1184988
Nome      : Alterar- VGF_EVENTO_S2200_BASE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VGF_EVENTO_S2200_BASE
NomeObjeto: VGF_EVENTO_S2200_BASE
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210013
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2200_BASE
AS
 SELECT VEMP.TPINSCEMPREGADOR,
          VEMP.NRINSCEMPREGADOR,
          FUN.CPF AS "CPFTRAB",
          FUN.PIS AS "NISTRAB",
          FUN.NOMEFUNC AS "NMTRAB",
          FUN.DTALTER AS DTALTERACAO,
          CAST(NULL AS DATE) AS DTREF,
          NULL AS EMAILALTERNAT,
          CAST (FUN.SEXO AS CHAR (1)) AS "SEXO",
          CASE
             WHEN RACAFUNCIONARIO = 2 THEN 1
             WHEN RACAFUNCIONARIO = 4 THEN 2
             WHEN RACAFUNCIONARIO = 8 THEN 3
             WHEN RACAFUNCIONARIO = 6 THEN 4
             WHEN RACAFUNCIONARIO = 0 THEN 5
             ELSE 6
          END
             AS "RACACOR",
          CASE
             WHEN FUN.ESTADOCIVIL = 3 THEN 5
             WHEN FUN.ESTADOCIVIL IN (5, 6) THEN 3
             WHEN FUN.ESTADOCIVIL = 7 THEN 2
             ELSE FUN.ESTADOCIVIL
          END
             AS "ESTCIV",
          CAST (
             CASE
                WHEN FUN.NIVESC = 10 THEN 11
                WHEN FUN.NIVESC = 11 THEN 12
                ELSE FUN.NIVESC
             END AS VARCHAR2 (2))
             AS "GRAUINSTR",
          CASE WHEN FUN.PRIMEMPREGO = 'S' THEN 'S' ELSE 'N' END "INDPRIEMPR",
          FUN.NMSOCIAL AS "NMSOC",
          FUN.DTNASC AS "DTNASCTONASCIMENTO",
          (SELECT CODMUNFIS
             FROM TSICID
            WHERE CODCID = FUN.CIDNASC)
             AS "CODMUNICNASCIMENTO",
          (SELECT UFS.UF
             FROM TSIUFS UFS, TSICID CID
            WHERE UFS.CODUF = CID.UF AND CID.CODCID = FUN.CIDNASC)
             AS "UFNASCIMENTO",
          (SELECT SUBSTR (CAST (CODPAISFIS AS VARCHAR2 (5)), 1, 3)
             FROM TSIPAI PAI, TSIUFS UFS, TSICID CID
            WHERE     UFS.CODUF = CID.UF
                  AND CID.CODCID = FUN.CIDNASC
                  AND PAI.CODPAIS = UFS.CODPAIS)
             AS "PAISNASCTONASCIMENTO",
          (SELECT SUBSTR (CAST (CODPAISFIS AS VARCHAR2 (5)), 1, 3)
             FROM TSIPAI PAI
            WHERE PAI.CODPAIS = FUN.CODPAISNAC)
             AS "PAISNACNASCIMENTO",
          FUN.NOMEMAE AS "NMMAENASCIMENTO",
          FUN.NOMEPAI AS "NMPAINASCIMENTO",
          CASE 
              WHEN LENGTH(FUN.NUMCPS) < 3 AND FUN.NUMCPS <> '' AND FUN.NUMCPS IS NOT NULL THEN CAST(LPAD(FUN.NUMCPS,2,0) AS VARCHAR(11))
              WHEN LENGTH(FUN.NUMCPS) >= 3 THEN SUBSTR(CAST(FUN.NUMCPS AS VARCHAR(11)), 1, 11)
              WHEN FUN.NUMCPS = '' OR FUN.NUMCPS IS NULL THEN NULL
          END
              AS "NRCTPS",
          
          FUN.SERIECPS AS "SERIECTPS",
          (SELECT UF
             FROM TSIUFS
            WHERE CODUF = FUN.UFCPS)
             AS "UFCTPS",
          FUN.NRORIC AS "NRRIC",
          FUN.ORGAORIC AS "ORGAOEMISSORRIC",
          FUN.DTEMIRIC AS "DTEXPEDRIC",
          REPLACE (
             REPLACE (REPLACE (REPLACE (FUN.IDENTIDADE, '-', ''), '/', ''),
                      '.',
                      ''),
             ' ',
             '')
             AS "NRRG",
          FUN.ORGAORG AS "ORGAOEMISSORRG",
          FUN.DTRG AS "DTEXPEDRG",
          SUBSTR (FUN.RNE, 1, 14) AS NRRNE,
          FUN.ORGAORNE AS "ORGAOEMISSORRNE",
          FUN.DTEXPRNE AS "DTEXPEDRNE",
          FUN.NROC AS "NROC",
          FUN.ORGAOOC AS "ORGAOEMISSOROC",
          FUN.DTEXPOC AS "DTEXPEDOC",
          FUN.DTVALOC AS "DTVALIDOC",
          CASE WHEN FUN.NROCNH = '' THEN NULL ELSE FUN.NROCNH END AS "NRREGCNH",
          FUN.DTEXPCNH AS "DTEXPEDCNH",
          (SELECT UF
             FROM TSIUFS
            WHERE CODUF = FUN.UFCNH)
             AS "UFCNH",
          FUN.VENCIMENTOCNH AS "DTVALIDCNH",
          FUN.PRIMEIRACNH AS "DTPRIHAB",
          SUBSTR (FUN.CATEGORIACNH, 1, 2) AS "CATEGORIACNH",
          EN.CODLOGRADOURO AS "TPLOGRADBRASIL",
          EN.NOMEEND AS "DSCLOGRADBRASIL",
          FUN.NUMEND AS "NRLOGRADBRASIL",
          FUN.COMPLEMENTO AS "COMPLEMENTOBRASIL",
          BAI.NOMEBAI AS "BAIRROBRASIL",
          FUN.CEP AS "CEPBRASIL",
          CAST (CID.CODMUNFIS AS VARCHAR2 (7)) AS "CODMUNICBRASIL",
          UFS.UF AS "UFBRASIL",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105
             THEN
                SUBSTR (PA.CODPAISFIS, 1, 3)
             ELSE
                NULL
          END
             AS "PAISRESID",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105 THEN EN.NOMEEND
             ELSE NULL
          END
             AS "DSCLOGRADEXTERIOR",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105 THEN FUN.NUMEND
             ELSE NULL
          END
             AS "NRLOGRADEXTERIOR",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105 THEN FUN.COMPLEMENTO
             ELSE NULL
          END
             AS "COMPLEMENTOEXTERIOR",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105 THEN BAI.NOMEBAI
             ELSE NULL
          END
             AS "BAIRROEXTERIOR",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105 THEN CID.NOMECID
             ELSE NULL
          END
             AS "NMCIDEXTERIOR",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105 THEN FUN.CAIXAPOSTAL
             ELSE NULL
          END
             AS "CODPOSTALEXTERIOR",
          FUN.DTCHEGPAIS AS "DTCHEGADA",
          FUN.CLASSTRABESTRANG,
          FUN.CASADOBR AS "CASADOBR",
          FUN.FILHOSBR AS "FILHOSBR",
          CASE WHEN FUN.TIPDEFICIENCIA IN (0, 5, 7) THEN 'N' ELSE 'S' END
             AS "DEFFISICA",
          CASE WHEN FUN.TIPDEFICIENCIA = 3 THEN 'S' ELSE 'N' END
             AS "DEFVISUAL",
          CASE WHEN FUN.TIPDEFICIENCIA = 2 THEN 'S' ELSE 'N' END
             AS "DEFAUDITIVA",
          CASE WHEN FUN.TIPDEFICIENCIA = 8 THEN 'S' ELSE 'N' END
             AS "DEFMENTAL",
          CASE WHEN FUN.TIPDEFICIENCIA = 4 THEN 'S' ELSE 'N' END
             AS "DEFINTELECTUAL",
          CASE WHEN FUN.TIPDEFICIENCIA = 6 THEN 'S' ELSE 'N' END
             AS "REABREADAP",
          FUN.INFOCOTA AS "INFOCOTA",
          CASE WHEN FUN.OBSDEFICIENCIA = '' THEN NULL ELSE FUN.OBSDEFICIENCIA END AS "OBSERVACAO",
          FUN.TRABAPOSENT AS "TRABAPOSENT",
          CASE
             WHEN LENGTH (TRIM (FUN.TELEFONE)) < 10 THEN NULL
             ELSE REPLACE (FUN.TELEFONE, ' ', '')
          END
             AS "FONEPRINC",
          CASE
             WHEN LENGTH (TRIM (FUN.CELULAR)) < 10 THEN NULL
             ELSE REPLACE (FUN.CELULAR, ' ', '')
          END
             AS "FONEALTERNAT",
          CASE WHEN FUN.EMAIL = '' THEN NULL ELSE FUN.EMAIL END AS "EMAILPRINC",
          CAST (FUN.MATRICULA AS VARCHAR2 (30)) AS "MATRICULA",
          CASE WHEN FUN.REGIMETRAB IN (2, 3) THEN 2 ELSE 1 END AS "TPREGTRAB",
          CASE
             WHEN FUN.REGIME IN (1, 3) THEN 2
             WHEN FUN.REGIME = 2 THEN 1
             ELSE 3
          END
             AS "TPREGPREV",
          (SELECT NVL (S.NRORECIBO, '')
             FROM TFPS2190 S
            WHERE     S.CODEMP = VEMP.CODEMPMATRIZ
                  AND S.CHAVE =
                         CAST (
                            FUN.CODEMP || ':' || FUN.CODFUNC AS VARCHAR2 (100))
                  AND S.TPAMB = SNK_GET_TPAMB_ESOCIAL
                  AND S.SEQUENCIA = SNK_GET_SEQ_ATUAL_ESOCIAL
                  AND S.DTREF = SNK_GET_DTREF_ESOCIAL)
             AS "NRRECINFPRELIM",
          CASE WHEN FUN.DTADM < VEMP.DTCARGAINICIAL THEN 'S' ELSE 'N' END
             AS "CADINI",
          FUN.DTADM AS "DTADM",
          CASE
             WHEN FUN.VINCULO IN (30, 31, 35)
             THEN
                NULL
             WHEN     FUN.PRIMEMPREGO  IN ('A', 'T')
                  AND SUBSTR (VEMP.NRINSCEMPREGADOR, 1, 8) = SUBSTR (EM.CGC, 1, 8)
             THEN
                1
             WHEN FUN.PRIMEMPREGO IN ('A', 'T') AND SUBSTR (VEMP.NRINSCEMPREGADOR, 1, 8) <> SUBSTR (EM.CGC, 1, 8)
             THEN
                2
             WHEN FUN.PRIMEMPREGO = 'H'
             THEN
                3
             WHEN FUN.PRIMEMPREGO = 'I'
             THEN
                4
             ELSE
                1
          END
             AS "TPADMISSAO",
          FUN.INDADMISSAO AS "INDADMISSAO",
          FUN.REGIMEJOR AS "TPREGJOR",
          (SELECT CASE WHEN TIPHORANOTURNA = 'U' THEN 1 ELSE 2 END
             FROM TFPCBO CBO
            WHERE CBO.CODCBO =
                     CASE
                        WHEN EXISTS
                                (SELECT 1
                                   FROM TSIPAR
                                  WHERE     CHAVE = 'FPUTILIZACBO'
                                        AND (NVL (INTEIRO, 0) = 0 OR INTEIRO IS NULL))
                        THEN
                           (SELECT CODCBO
                              FROM TFPCAR C
                             WHERE C.CODCARGO = FUN.CODCARGO)
                        ELSE
                           (SELECT CODCBO
                              FROM TFPFCO F
                             WHERE F.CODFUNCAO = FUN.CODFUNCAO)
                     END)
             AS "NATATIVIDADE",
          (SELECT MESDATABASE
             FROM TFPPRE
            WHERE CODPREF = SIND.CODPREF)
             AS "DTBASE",
          SIND.CGC AS "CNPJSINDCATEGPROF",
          1 AS "OPCFGTS",
          FUN.DTOPTFGTS AS "DTOPCFGTS",
          CASE WHEN FUN.CONTTRABTEMP > 0 THEN FUN.CONTTRABTEMP ELSE NULL END
             AS "HIPLEG",
          SUBSTR (FUN.JUSTCONTR, 1, 999) AS "JUSTCONTR",
          FUN.TPINCLCONTR AS "TPINCLCONTR",
          FUN.TPINSCTOMADOR AS "TPINSCIDETOMADORSERV",
          FUN.NRINSCTOMADOR AS "NRINSCIDETOMADORSERV",
          FUN.TPINSCESTABVINC AS "TPINSCIDEESTABVINC",
          FUN.NRINSCESTABVINC AS "NRINSCIDEESTABVINC",
          FUN.CPFSUBSTITUIDO AS "CPFTRABSUBST",
          CASE WHEN PUB.CODEMP IS NOT NULL THEN PUB.INDPROVIM ELSE NULL END
             AS "INDPROVIM",
          CASE WHEN PUB.CODEMP IS NOT NULL THEN PUB.TPPROV ELSE NULL END
             AS "TPPROV",
          CASE
             WHEN PUB.CODEMP IS NOT NULL THEN PUB.DTDESIGNACAO
             ELSE NULL
          END
             AS "DTNOMEACAO",
          CASE WHEN PUB.CODEMP IS NOT NULL THEN PUB.DTPOSSE ELSE NULL END
             AS "DTPOSSE",
          CASE WHEN PUB.CODEMP IS NOT NULL THEN PUB.DTEXERC ELSE NULL END
             AS "DTEXERCICIO",
          PUB.TPPLANRP AS "TPPLANRP",
          CAST (PUB.NUPROCESSOJUD AS VARCHAR (20)) AS "NRPROCJUDINFODECJUD",
          CAST (CASE
                   WHEN (SELECT 1
                           FROM TSIPAR
                          WHERE CHAVE = 'FPUTILIZACBO' AND (INTEIRO = 0 OR INTEIRO IS NULL)) > 0
                   THEN
                      FUN.CODCARGO
                   ELSE
                      FUN.CODFUNCAO
                END AS VARCHAR (30))
             AS "CODCARGO",
          CAST (CASE
                   WHEN (SELECT LOGICO
                           FROM TSIPAR
                          WHERE CHAVE = 'FPTRIBUNAL') = 'S'
                   THEN
                      (SELECT CODFUNCAO
                         FROM TFPFCO
                        WHERE CODFUNCAO = FUN.CODFUNCAO)
                   ELSE
                      0
                END AS VARCHAR2 (30))
             AS "CODFUNCAO",
          FUN.CODCATEGESOCIAL AS "CODCATEG",
          CASE WHEN FUN.CODCATEGESOCIAL IN (104, 106) THEN 1 ELSE 0 END
             AS "CODCATEG2",
          CASE
             WHEN PUB.CODEMP IS NOT NULL
             THEN
                CAST (FUN.CODCARREIRA AS VARCHAR2 (30))
             ELSE
                NULL
          END
             AS "CODCARREIRA",
          PUB.DTINGRCARR AS "DTINGRCARR",
          CAST (
             CASE
                WHEN FUN.TIPSAL = 5 AND NVL (FUN.SALBASE, 0) = 0 THEN 0
                ELSE FUN.SALBASE
             END AS FLOAT)
             AS "VRSALFX",
          CASE
             WHEN FUN.TIPSAL = 1 THEN 5
             WHEN FUN.TIPSAL = 2 THEN 4
             WHEN FUN.TIPSAL = 3 THEN 3
             WHEN FUN.TIPSAL = 4 THEN 2
             WHEN FUN.TIPSAL = 5 AND NVL (FUN.SALBASE, 0) > 0 THEN 1
             WHEN FUN.TIPSAL = 5 AND NVL (FUN.SALBASE, 0) = 0 THEN 7
             WHEN FUN.COMPSALARIO = 2 THEN 8
             ELSE 6
          END
             AS "UNDSALFIXO",
          CASE
             WHEN FUN.TIPSAL = 5 AND NVL (FUN.SALBASE, 0) = 0
             THEN
                FUN.OBSVARIAVEL
             ELSE
                NULL
          END
             AS "DSCSALVAR",
          CASE
             WHEN FUN.VINCULO IN (10, 15, 20, 25, 30, 31, 35, 55) THEN 1
             WHEN FUN.VINCULO IN (60, 65, 70, 75, 95, 96, 97) THEN 2
             ELSE NULL
          END
             AS "TPCONTR",
          CASE
             WHEN FUN.VINCULO IN (55, 60, 65, 70, 75, 95, 96, 97) THEN DTTERMINO
             ELSE NULL
          END
             AS "DTTERM",
          CAST (FUN.DIRRECIPROCO AS CHAR (1)) AS "CLAUASSEG",
          NVL((SELECT CASE WHEN LENGTH(E.CGC) = 14 THEN 1 ELSE 2 END
                    FROM TFPTOM TOM, TSIEMP E
                   WHERE TOM.CODPARC = E.CODPARC
                     AND TOM.CODEMP = E.CODEMP
                     AND TOM.CODEMP = FUN.CODEMP
                     AND TOM.CODFUNC = FUN.CODFUNC
                     AND TOM.DTINICIO =
                            (SELECT MAX (DTINICIO)
                               FROM TFPTOM TM
                              WHERE     TM.CODEMP = TOM.CODEMP
                                    AND TM.CODPARC = TOM.CODPARC
                                    AND TM.CODFUNC = TOM.CODFUNC)),
             VEMP.TPINSCEMPREGADOR)
             AS "TPINSCLOCALTRABGERAL",
          NVL (
             (SELECT E.CGC
                FROM TFPTOM TOM, TSIEMP E
               WHERE     TOM.CODPARC = E.CODPARC
                     AND TOM.CODEMP = E.CODEMP
                     AND TOM.CODEMP = FUN.CODEMP
                     AND TOM.CODFUNC = FUN.CODFUNC
                     AND TOM.DTINICIO =
                            (SELECT MAX (DTINICIO)
                               FROM TFPTOM TM
                              WHERE     TM.CODEMP = TOM.CODEMP
                                    AND TM.CODPARC = TOM.CODPARC
                                    AND TM.CODFUNC = TOM.CODFUNC)),
             VEMP.CGC)
             AS "NRINSCLOCALTRABGERAL",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                (SELECT CODLOGRADOURO
                   FROM TSIEND
                  WHERE CODEND = VEMP.CODEND)
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT (SELECT CODLOGRADOURO
                           FROM TSIEND
                          WHERE CODEND = PAR.CODEND)
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "TPLOGRADLOCALTRABDOM",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                (SELECT NOMEEND
                   FROM TSIEND
                  WHERE CODEND = VEMP.CODEND)
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT (SELECT NOMEEND
                           FROM TSIEND
                          WHERE CODEND = PAR.CODEND)
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "DSCLOGRADLOCALTRABDOM",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                VEMP.NUMEND
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT PAR.NUMEND
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "NRLOGRADLOCALTRABDOM",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                VEMP.COMPLEMENTO
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT PAR.COMPLEMENTO
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "COMPLEMENTOLOCALTRABDOM",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                (SELECT NOMEBAI
                   FROM TSIBAI
                  WHERE CODBAI = VEMP.CODBAI)
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT (SELECT NOMEBAI
                           FROM TSIBAI
                          WHERE CODBAI = PAR.CODBAI)
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "BAIRROLOCALTRABDOM",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                VEMP.CEP
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT PAR.CEP
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "CEPLOCALTRABDOM",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                (SELECT CODMUNFIS
                   FROM TSICID
                  WHERE CODCID = VEMP.CODCID)
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT (SELECT CODMUNFIS
                           FROM TSICID
                          WHERE CODCID = PAR.CODCID)
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "CODMUNICLOCALTRABDOM",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                (SELECT UFS.UF
                   FROM TSIUFS UFS, TSICID CID
                  WHERE CODUF = CID.UF AND CID.CODCID = VEMP.CODCID)
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT (SELECT UFS.UF
                           FROM TSIUFS UFS, TSICID CID
                          WHERE CODUF = CID.UF AND CID.CODCID = PAR.CODCID)
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "UFLOCALTRABDOM",
          FUN.HORASSEM AS "QTDHRSSEM",
          CASE
             WHEN (CGH.ESCALONAR = 'N') THEN 1
             WHEN (CGH.DIASTRAB = CGH.DIASFOLGA) THEN 2
             ELSE 9
          END
             AS "TPJORNADA",
          NVL (CGH.DESCRCARGAHOR, 'NAO INFORMADA') AS "DSCTPJORN",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104 AND FUN.HORASSEM <= 25 THEN '1'
             WHEN FUN.CODCATEGESOCIAL <> 104 AND FUN.HORASSEM <= 26 THEN '3'
             WHEN FUN.CODCATEGESOCIAL <> 104 AND FUN.HORASSEM <= 25 THEN '2'
             ELSE '0'
          END
             AS "TMPPARC",
          CASE
             WHEN (SELECT DISTINCT 1
                     FROM TFPFOL FOL
                    WHERE     FOL.REFERENCIA = EMP.REFERENCIA
                          AND FOL.CODEMP = FUN.CODEMP
                          AND FOL.CODFUNC = FUN.CODFUNC
                          AND (   ','
                               || CAST (
                                     SIND.EVENTOCONTASSOC AS VARCHAR2 (250))
                               || ',') LIKE
                                 (   '%,'
                                  || CAST (FOL.CODEVENTO AS VARCHAR2 (5))
                                  || ',%')) = 1
             THEN
                SIND.CGC
             ELSE
                ''
          END
             AS "CNPJSINDTRAB",
          CAST ( (SELECT NUMPROCESSO
                    FROM TFPPSS
                   WHERE NUPROCESSO = FUN.NUPROCESSOJUD) AS VARCHAR (20))
             AS "NRPROCJUDALVARAJUDICIAL",
          (SELECT CASE
                     WHEN VEMP.NRINSCEMPREGADOR <> SUBSTR (EM.CGC, 1, 8)
                     THEN
                        EM.CGC
                     ELSE
                        NULL
                  END
             FROM TSIEMP EM
            WHERE EM.CODEMP = FUN.CODEMPORIG)
             AS "CNPJEMPREGANT",
          (SELECT CASE
                     WHEN VEMP.NRINSCEMPREGADOR <> SUBSTR (EM.CGC, 1, 8)
                     THEN
                        CAST (F.MATRICULA AS VARCHAR2 (30))
                     ELSE
                        NULL
                  END
             FROM TFPFUN F, TSIEMP EM
            WHERE     F.CODEMP = FUN.CODEMPORIG
                  AND F.CODFUNC = FUN.CODFUNCORIG
                  AND EM.CODEMP = FUN.CODEMPORIG)
             AS "MATRICANT",
          CASE
             WHEN VEMP.NRINSCEMPREGADOR <>
                     (SELECT SUBSTR (EM.CGC, 1, 8)
                        FROM TSIEMP EM
                       WHERE EM.CODEMP = FUN.CODEMPORIG)
             THEN
                FUN.DTTRANSFERENCIA
             ELSE
                NULL
          END
             AS "DTINIVINCULO",
          FUN.OBSEMPANT AS "OBSERVACAOSUCESSAOVINC",
          CASE
             WHEN ( (SELECT NVL (OCO.DTINICOCOR, '')
                       FROM TFPOCO OCO, TFPHIS H
                      WHERE     OCO.CODEMP = FUN.CODEMP
                            AND OCO.CODFUNC = FUN.CODFUNC
                            AND OCO.CODHISTOCOR = H.CODHISTOCOR
                            AND H.AFASTAMENTO IN ('A', 'D', 'M', 'G', 'Y')
                            AND H.CODMOTAFAST IS NOT NULL
                            AND OCO.DTFINALOCOR IS NULL) <
                      VEMP.DTCARGAINICIAL)
             THEN
                (SELECT NVL (OCO.DTINICOCOR, '')
                   FROM TFPOCO OCO, TFPHIS H
                  WHERE     OCO.CODEMP = FUN.CODEMP
                        AND OCO.CODFUNC = FUN.CODFUNC
                        AND OCO.CODHISTOCOR = H.CODHISTOCOR
                        AND H.AFASTAMENTO IN ('A', 'D', 'M', 'G', 'Y')
                        AND H.CODMOTAFAST IS NOT NULL
                        AND OCO.DTFINALOCOR IS NULL)
             ELSE
                NULL
          END
             AS "DTINIAFAST",
          CASE
             WHEN ( (SELECT NVL (OCO.DTINICOCOR, '')
                       FROM TFPOCO OCO, TFPHIS H
                      WHERE     OCO.CODEMP = FUN.CODEMP
                            AND OCO.CODFUNC = FUN.CODFUNC
                            AND OCO.CODHISTOCOR = H.CODHISTOCOR
                            AND H.AFASTAMENTO IN ('A', 'D', 'M', 'G', 'Y')
                            AND H.CODMOTAFAST IS NOT NULL
                            AND OCO.DTFINALOCOR IS NULL) <
                      VEMP.DTCARGAINICIAL)
             THEN
                (SELECT NVL (H.CODMOTAFAST, '')
                   FROM TFPOCO OCO, TFPHIS H
                  WHERE     OCO.CODEMP = FUN.CODEMP
                        AND OCO.CODFUNC = FUN.CODFUNC
                        AND OCO.CODHISTOCOR = H.CODHISTOCOR
                        AND H.AFASTAMENTO IN ('A', 'D', 'M', 'G', 'Y')
                        AND H.CODMOTAFAST IS NOT NULL
                        AND OCO.DTFINALOCOR IS NULL)
             ELSE
                NULL
          END
             AS "CODMOTAFAST",
          PUB.MTVALTER,
          FUN.JUSTPRORR,
          NULL AS DSCALT,
          CASE
             WHEN (FUN.DTDEM < VEMP.DTCARGAINICIAL) THEN FUN.DTDEM
             ELSE NULL
          END
             AS "DTDESLIG",
          VEMP.CODEMPMATRIZ AS CODEMP,
          CAST (FUN.CODEMP || ':' || FUN.CODFUNC AS VARCHAR2 (100))
             AS "CHAVE",
          FUN.SITESOCIAL,
          SNK_GET_TPAMB_ESOCIAL AS TPAMB
     FROM TFPFUN FUN
          LEFT JOIN TFPPUB PUB
             ON (    FUN.CODEMP = PUB.CODEMP
                 AND FUN.CODFUNC = PUB.CODFUNC
                 AND EXISTS
                        (SELECT 1
                           FROM TSIPAR
                          WHERE CHAVE = 'FPTRIBUNAL' AND LOGICO = 'S'))
          LEFT JOIN TFPDEP DEP ON DEP.CODDEP = FUN.CODDEP
          LEFT JOIN TFPCGH CGH ON FUN.CODCARGAHOR = CGH.CODCARGAHOR
          LEFT JOIN TSIBAI BAI ON BAI.CODBAI = FUN.CODBAI
          LEFT JOIN TSICID CID ON CID.CODCID = FUN.CODCID
          LEFT JOIN TSIUFS UFS ON UFS.CODUF = CID.UF
          LEFT JOIN TSIPAI PA ON PA.CODPAIS = UFS.CODPAIS
          LEFT JOIN TSIEND EN ON EN.CODEND = FUN.CODEND
          LEFT JOIN TFPSIN SIND ON SIND.CODSIND = FUN.CODSIND,
          TFPEMP EMP,
          TSIEMP EM,
          VGF_EVENTO_EMPREGADOR VEMP
    WHERE     FUN.CODEMP = EMP.CODEMP
          AND FUN.CODEMP = VEMP.CODEMP
          AND FUN.CODEMP = EM.CODEMP
          AND VEMP.DTCARGAINICIAL IS NOT NULL
          AND FUN.CODCATEGESOCIAL IN (101, 102, 103, 104, 105, 106, 111, 301, 302, 303, 306, 307, 309)
          AND FUN.SITESOCIAL IN ('O', '5', '6', 'T')
/
 
 
 
/*
Requer    : 4210012
Conexao   : ORCL
Data      : 16/05/2018 14:03:07
Num.Script: 55569-0-0
Nro. O.S. : 1185067
Nome      : Alterar - VGF_EVENTO_S2230
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VGF_EVENTO_S2230
NomeObjeto: VGF_EVENTO_S2230
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210013
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2230
AS
   SELECT DISTINCT
          VEMP.TPINSCEMPREGADOR,
          VEMP.NRINSCEMPREGADOR,
          CAST (FUN.CPF AS VARCHAR2 (11)) AS cpfTrab,
          CAST (FUN.PIS AS VARCHAR2 (11)) AS nisTrab,
          CAST (FUN.MATRICULA AS VARCHAR2 (30)) AS matricula,
          FUN.CODCATEGESOCIAL AS codCateg,
          CASE
             WHEN FUN.CODCATEGESOCIAL IN
                     (701,
                      711,
                      712,
                      721,
                      722,
                      723,
                      731,
                      734,
                      738,
                      741,
                      751,
                      761,
                      771,
                      781)
             THEN
                1
             ELSE
                0
          END
             AS tem2300,
          OCO.DTINICOCOR AS dtIniAfast,
          HIS.CODMOTAFAST AS codMotAfast,
          CASE WHEN OCO.NUREINCID <> 0 THEN 'S' ELSE 'N' END AS infoMesmoMtv,
          AFT.TIPACIDTRANSITO AS tpAcidTransito,
          OCO.DESCROCOR AS observacao,
          CASE
             WHEN HIS.CODMOTAFAST = 14 THEN AFT.CNPJCESSIONARIO
             ELSE NULL
          END
             AS cnpjCess,
          CASE WHEN HIS.CODMOTAFAST = 14 THEN AFT.INFOONUS ELSE NULL END
             AS infOnus,
          CASE WHEN HIS.CODMOTAFAST = 24 THEN AFT.CNPJSINDICATO ELSE NULL END
             AS cnpjSind,
          CASE WHEN HIS.CODMOTAFAST = 24 THEN AFT.INFOONUSREMUN ELSE NULL END
             AS infOnusRemun,
          OCO.ORIGRETIF AS origRetif,
          (SELECT CASE
                     WHEN TIPOPROCESSO IS NULL THEN NULL
                     WHEN TIPOPROCESSO = 'A' THEN '1'
                     ELSE '2'
                  END
             FROM TFPPSS PSS
            WHERE PSS.NUPROCESSO = OCO.NUPROCESSO)
             AS tpProc,
          (SELECT NUMPROCESSO
             FROM TFPPSS PSS
            WHERE PSS.NUPROCESSO = OCO.NUPROCESSO)
             AS nrProc,
          CASE
             WHEN OCO.DTFINALOCOR <= SYSDATE + 10 THEN OCO.DTFINALOCOR
             ELSE NULL
          END
             AS dtTermAfast,
          VEMP.CODEMPMATRIZ AS CODEMP,
          CAST (OCO.NUOCOR AS VARCHAR2 (100)) AS CHAVE,
          CAST (FUN.CODEMP || ':' || FUN.CODFUNC AS VARCHAR2 (100))
             AS "CHAVE2200"
     FROM TFPFUN FUN,
          TFPOCO OCO LEFT JOIN TFPAFT AFT ON OCO.NUOCOR = AFT.NUOCOR,
          TFPHIS HIS,
          VGF_EVENTO_EMPREGADOR VEMP
    WHERE     OCO.CODEMP = FUN.CODEMP
          AND OCO.CODFUNC = FUN.CODFUNC
          AND VEMP.CODEMP = FUN.CODEMP
          AND OCO.CODHISTOCOR = HIS.CODHISTOCOR
          AND VEMP.DTCARGAINICIAL IS NOT NULL
          AND FUN.SITESOCIAL IS NOT NULL
          AND OCO.DTINICOCOR >= VEMP.DTCARGAINICIAL
          AND HIS.CODMOTAFAST IS NOT NULL
/
 
 
 
/*
Requer    : 4210012
Conexao   : ORCL
Data      : 16/05/2018 14:03:07
Num.Script: 55570-0-0
Nro. O.S. : 1185067
Nome      : Alterar - VGF_EVENTO_S2200_BASE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VGF_EVENTO_S2200_BASE
NomeObjeto: VGF_EVENTO_S2200_BASE
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210013
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2200_BASE
AS
 SELECT VEMP.TPINSCEMPREGADOR,
          VEMP.NRINSCEMPREGADOR,
          FUN.CPF AS "CPFTRAB",
          FUN.PIS AS "NISTRAB",
          FUN.NOMEFUNC AS "NMTRAB",
          FUN.DTALTER AS DTALTERACAO,
          CAST(NULL AS DATE) AS DTREF,
          NULL AS EMAILALTERNAT,
          CAST (FUN.SEXO AS CHAR (1)) AS "SEXO",
          CASE
             WHEN RACAFUNCIONARIO = 2 THEN 1
             WHEN RACAFUNCIONARIO = 4 THEN 2
             WHEN RACAFUNCIONARIO = 8 THEN 3
             WHEN RACAFUNCIONARIO = 6 THEN 4
             WHEN RACAFUNCIONARIO = 0 THEN 5
             ELSE 6
          END
             AS "RACACOR",
          CASE
             WHEN FUN.ESTADOCIVIL = 3 THEN 5
             WHEN FUN.ESTADOCIVIL IN (5, 6) THEN 3
             WHEN FUN.ESTADOCIVIL = 7 THEN 2
             ELSE FUN.ESTADOCIVIL
          END
             AS "ESTCIV",
          CAST (
             CASE
                WHEN FUN.NIVESC = 10 THEN 11
                WHEN FUN.NIVESC = 11 THEN 12
                ELSE FUN.NIVESC
             END AS VARCHAR2 (2))
             AS "GRAUINSTR",
          CASE WHEN FUN.PRIMEMPREGO = 'S' THEN 'S' ELSE 'N' END "INDPRIEMPR",
          FUN.NMSOCIAL AS "NMSOC",
          FUN.DTNASC AS "DTNASCTONASCIMENTO",
          (SELECT CODMUNFIS
             FROM TSICID
            WHERE CODCID = FUN.CIDNASC)
             AS "CODMUNICNASCIMENTO",
          (SELECT UFS.UF
             FROM TSIUFS UFS, TSICID CID
            WHERE UFS.CODUF = CID.UF AND CID.CODCID = FUN.CIDNASC)
             AS "UFNASCIMENTO",
          (SELECT SUBSTR (CAST (CODPAISFIS AS VARCHAR2 (5)), 1, 3)
             FROM TSIPAI PAI, TSIUFS UFS, TSICID CID
            WHERE     UFS.CODUF = CID.UF
                  AND CID.CODCID = FUN.CIDNASC
                  AND PAI.CODPAIS = UFS.CODPAIS)
             AS "PAISNASCTONASCIMENTO",
          (SELECT SUBSTR (CAST (CODPAISFIS AS VARCHAR2 (5)), 1, 3)
             FROM TSIPAI PAI
            WHERE PAI.CODPAIS = FUN.CODPAISNAC)
             AS "PAISNACNASCIMENTO",
          FUN.NOMEMAE AS "NMMAENASCIMENTO",
          FUN.NOMEPAI AS "NMPAINASCIMENTO",
          CASE 
              WHEN LENGTH(FUN.NUMCPS) < 3 AND FUN.NUMCPS <> '' AND FUN.NUMCPS IS NOT NULL THEN CAST(LPAD(FUN.NUMCPS,2,0) AS VARCHAR(11))
              WHEN LENGTH(FUN.NUMCPS) >= 3 THEN SUBSTR(CAST(FUN.NUMCPS AS VARCHAR(11)), 1, 11)
              WHEN FUN.NUMCPS = '' OR FUN.NUMCPS IS NULL THEN NULL
          END
              AS "NRCTPS",
          
          FUN.SERIECPS AS "SERIECTPS",
          (SELECT UF
             FROM TSIUFS
            WHERE CODUF = FUN.UFCPS)
             AS "UFCTPS",
          FUN.NRORIC AS "NRRIC",
          FUN.ORGAORIC AS "ORGAOEMISSORRIC",
          FUN.DTEMIRIC AS "DTEXPEDRIC",
          REPLACE (
             REPLACE (REPLACE (REPLACE (FUN.IDENTIDADE, '-', ''), '/', ''),
                      '.',
                      ''),
             ' ',
             '')
             AS "NRRG",
          FUN.ORGAORG AS "ORGAOEMISSORRG",
          FUN.DTRG AS "DTEXPEDRG",
          SUBSTR (FUN.RNE, 1, 14) AS NRRNE,
          FUN.ORGAORNE AS "ORGAOEMISSORRNE",
          FUN.DTEXPRNE AS "DTEXPEDRNE",
          FUN.NROC AS "NROC",
          FUN.ORGAOOC AS "ORGAOEMISSOROC",
          FUN.DTEXPOC AS "DTEXPEDOC",
          FUN.DTVALOC AS "DTVALIDOC",
          CASE WHEN FUN.NROCNH = '' THEN NULL ELSE FUN.NROCNH END AS "NRREGCNH",
          FUN.DTEXPCNH AS "DTEXPEDCNH",
          (SELECT UF
             FROM TSIUFS
            WHERE CODUF = FUN.UFCNH)
             AS "UFCNH",
          FUN.VENCIMENTOCNH AS "DTVALIDCNH",
          FUN.PRIMEIRACNH AS "DTPRIHAB",
          SUBSTR (FUN.CATEGORIACNH, 1, 2) AS "CATEGORIACNH",
          EN.CODLOGRADOURO AS "TPLOGRADBRASIL",
          EN.NOMEEND AS "DSCLOGRADBRASIL",
          FUN.NUMEND AS "NRLOGRADBRASIL",
          FUN.COMPLEMENTO AS "COMPLEMENTOBRASIL",
          BAI.NOMEBAI AS "BAIRROBRASIL",
          FUN.CEP AS "CEPBRASIL",
          CAST (CID.CODMUNFIS AS VARCHAR2 (7)) AS "CODMUNICBRASIL",
          UFS.UF AS "UFBRASIL",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105
             THEN
                SUBSTR (PA.CODPAISFIS, 1, 3)
             ELSE
                NULL
          END
             AS "PAISRESID",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105 THEN EN.NOMEEND
             ELSE NULL
          END
             AS "DSCLOGRADEXTERIOR",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105 THEN FUN.NUMEND
             ELSE NULL
          END
             AS "NRLOGRADEXTERIOR",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105 THEN FUN.COMPLEMENTO
             ELSE NULL
          END
             AS "COMPLEMENTOEXTERIOR",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105 THEN BAI.NOMEBAI
             ELSE NULL
          END
             AS "BAIRROEXTERIOR",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105 THEN CID.NOMECID
             ELSE NULL
          END
             AS "NMCIDEXTERIOR",
          CASE
             WHEN SUBSTR (PA.CODPAISFIS, 1, 3) <> 105 THEN FUN.CAIXAPOSTAL
             ELSE NULL
          END
             AS "CODPOSTALEXTERIOR",
          FUN.DTCHEGPAIS AS "DTCHEGADA",
          FUN.CLASSTRABESTRANG,
          FUN.CASADOBR AS "CASADOBR",
          FUN.FILHOSBR AS "FILHOSBR",
          CASE WHEN FUN.TIPDEFICIENCIA IN (0, 5, 7) THEN 'N' ELSE 'S' END
             AS "DEFFISICA",
          CASE WHEN FUN.TIPDEFICIENCIA = 3 THEN 'S' ELSE 'N' END
             AS "DEFVISUAL",
          CASE WHEN FUN.TIPDEFICIENCIA = 2 THEN 'S' ELSE 'N' END
             AS "DEFAUDITIVA",
          CASE WHEN FUN.TIPDEFICIENCIA = 8 THEN 'S' ELSE 'N' END
             AS "DEFMENTAL",
          CASE WHEN FUN.TIPDEFICIENCIA = 4 THEN 'S' ELSE 'N' END
             AS "DEFINTELECTUAL",
          CASE WHEN FUN.TIPDEFICIENCIA = 6 THEN 'S' ELSE 'N' END
             AS "REABREADAP",
          FUN.INFOCOTA AS "INFOCOTA",
          CASE WHEN FUN.OBSDEFICIENCIA = '' THEN NULL ELSE FUN.OBSDEFICIENCIA END AS "OBSERVACAO",
          FUN.TRABAPOSENT AS "TRABAPOSENT",
          CASE
             WHEN LENGTH (TRIM (FUN.TELEFONE)) < 10 THEN NULL
             ELSE REPLACE (FUN.TELEFONE, ' ', '')
          END
             AS "FONEPRINC",
          CASE
             WHEN LENGTH (TRIM (FUN.CELULAR)) < 10 THEN NULL
             ELSE REPLACE (FUN.CELULAR, ' ', '')
          END
             AS "FONEALTERNAT",
          CASE WHEN FUN.EMAIL = '' THEN NULL ELSE FUN.EMAIL END AS "EMAILPRINC",
          CAST (FUN.MATRICULA AS VARCHAR2 (30)) AS "MATRICULA",
          CASE WHEN FUN.REGIMETRAB IN (2, 3) THEN 2 ELSE 1 END AS "TPREGTRAB",
          CASE
             WHEN FUN.REGIME IN (1, 3) THEN 2
             WHEN FUN.REGIME = 2 THEN 1
             ELSE 3
          END
             AS "TPREGPREV",
          (SELECT NVL (S.NRORECIBO, '')
             FROM TFPS2190 S
            WHERE     S.CODEMP = VEMP.CODEMPMATRIZ
                  AND S.CHAVE =
                         CAST (
                            FUN.CODEMP || ':' || FUN.CODFUNC AS VARCHAR2 (100))
                  AND S.TPAMB = SNK_GET_TPAMB_ESOCIAL
                  AND S.SEQUENCIA = SNK_GET_SEQ_ATUAL_ESOCIAL
                  AND S.DTREF = SNK_GET_DTREF_ESOCIAL)
             AS "NRRECINFPRELIM",
          CASE WHEN FUN.DTADM < VEMP.DTCARGAINICIAL THEN 'S' ELSE 'N' END
             AS "CADINI",
          FUN.DTADM AS "DTADM",
          CASE
             WHEN FUN.VINCULO IN (30, 31, 35)
             THEN
                NULL
             WHEN     FUN.PRIMEMPREGO  IN ('A', 'T')
                  AND SUBSTR (VEMP.NRINSCEMPREGADOR, 1, 8) = SUBSTR (EM.CGC, 1, 8)
             THEN
                1
             WHEN FUN.PRIMEMPREGO IN ('A', 'T') AND SUBSTR (VEMP.NRINSCEMPREGADOR, 1, 8) <> SUBSTR (EM.CGC, 1, 8)
             THEN
                2
             WHEN FUN.PRIMEMPREGO = 'H'
             THEN
                3
             WHEN FUN.PRIMEMPREGO = 'I'
             THEN
                4
             ELSE
                1
          END
             AS "TPADMISSAO",
          FUN.INDADMISSAO AS "INDADMISSAO",
          FUN.REGIMEJOR AS "TPREGJOR",
          (SELECT CASE WHEN TIPHORANOTURNA = 'U' THEN 1 ELSE 2 END
             FROM TFPCBO CBO
            WHERE CBO.CODCBO =
                     CASE
                        WHEN EXISTS
                                (SELECT 1
                                   FROM TSIPAR
                                  WHERE     CHAVE = 'FPUTILIZACBO'
                                        AND (NVL (INTEIRO, 0) = 0 OR INTEIRO IS NULL))
                        THEN
                           (SELECT CODCBO
                              FROM TFPCAR C
                             WHERE C.CODCARGO = FUN.CODCARGO)
                        ELSE
                           (SELECT CODCBO
                              FROM TFPFCO F
                             WHERE F.CODFUNCAO = FUN.CODFUNCAO)
                     END)
             AS "NATATIVIDADE",
          (SELECT MESDATABASE
             FROM TFPPRE
            WHERE CODPREF = SIND.CODPREF)
             AS "DTBASE",
          SIND.CGC AS "CNPJSINDCATEGPROF",
          1 AS "OPCFGTS",
          FUN.DTOPTFGTS AS "DTOPCFGTS",
          CASE WHEN FUN.CONTTRABTEMP > 0 THEN FUN.CONTTRABTEMP ELSE NULL END
             AS "HIPLEG",
          SUBSTR (FUN.JUSTCONTR, 1, 999) AS "JUSTCONTR",
          FUN.TPINCLCONTR AS "TPINCLCONTR",
          FUN.TPINSCTOMADOR AS "TPINSCIDETOMADORSERV",
          FUN.NRINSCTOMADOR AS "NRINSCIDETOMADORSERV",
          FUN.TPINSCESTABVINC AS "TPINSCIDEESTABVINC",
          FUN.NRINSCESTABVINC AS "NRINSCIDEESTABVINC",
          FUN.CPFSUBSTITUIDO AS "CPFTRABSUBST",
          CASE WHEN PUB.CODEMP IS NOT NULL THEN PUB.INDPROVIM ELSE NULL END
             AS "INDPROVIM",
          CASE WHEN PUB.CODEMP IS NOT NULL THEN PUB.TPPROV ELSE NULL END
             AS "TPPROV",
          CASE
             WHEN PUB.CODEMP IS NOT NULL THEN PUB.DTDESIGNACAO
             ELSE NULL
          END
             AS "DTNOMEACAO",
          CASE WHEN PUB.CODEMP IS NOT NULL THEN PUB.DTPOSSE ELSE NULL END
             AS "DTPOSSE",
          CASE WHEN PUB.CODEMP IS NOT NULL THEN PUB.DTEXERC ELSE NULL END
             AS "DTEXERCICIO",
          PUB.TPPLANRP AS "TPPLANRP",
          CAST (PUB.NUPROCESSOJUD AS VARCHAR (20)) AS "NRPROCJUDINFODECJUD",
          CAST (CASE
                   WHEN (SELECT 1
                           FROM TSIPAR
                          WHERE CHAVE = 'FPUTILIZACBO' AND (INTEIRO = 0 OR INTEIRO IS NULL)) > 0
                   THEN
                      FUN.CODCARGO
                   ELSE
                      FUN.CODFUNCAO
                END AS VARCHAR (30))
             AS "CODCARGO",
          CAST (CASE
                   WHEN (SELECT LOGICO
                           FROM TSIPAR
                          WHERE CHAVE = 'FPTRIBUNAL') = 'S'
                   THEN
                      (SELECT CODFUNCAO
                         FROM TFPFCO
                        WHERE CODFUNCAO = FUN.CODFUNCAO)
                   ELSE
                      0
                END AS VARCHAR2 (30))
             AS "CODFUNCAO",
          FUN.CODCATEGESOCIAL AS "CODCATEG",
          CASE WHEN FUN.CODCATEGESOCIAL IN (104, 106) THEN 1 ELSE 0 END
             AS "CODCATEG2",
          CASE
             WHEN PUB.CODEMP IS NOT NULL
             THEN
                CAST (FUN.CODCARREIRA AS VARCHAR2 (30))
             ELSE
                NULL
          END
             AS "CODCARREIRA",
          PUB.DTINGRCARR AS "DTINGRCARR",
          CAST (
             CASE
                WHEN FUN.TIPSAL = 5 AND NVL (FUN.SALBASE, 0) = 0 THEN 0
                ELSE FUN.SALBASE
             END AS FLOAT)
             AS "VRSALFX",
          CASE
             WHEN FUN.TIPSAL = 1 THEN 5
             WHEN FUN.TIPSAL = 2 THEN 4
             WHEN FUN.TIPSAL = 3 THEN 3
             WHEN FUN.TIPSAL = 4 THEN 2
             WHEN FUN.TIPSAL = 5 AND NVL (FUN.SALBASE, 0) > 0 THEN 1
             WHEN FUN.TIPSAL = 5 AND NVL (FUN.SALBASE, 0) = 0 THEN 7
             WHEN FUN.COMPSALARIO = 2 THEN 8
             ELSE 6
          END
             AS "UNDSALFIXO",
          CASE
             WHEN FUN.TIPSAL = 5 AND NVL (FUN.SALBASE, 0) = 0
             THEN
                FUN.OBSVARIAVEL
             ELSE
                NULL
          END
             AS "DSCSALVAR",
          CASE
             WHEN FUN.VINCULO IN (10, 15, 20, 25, 30, 31, 35, 55) THEN 1
             WHEN FUN.VINCULO IN (60, 65, 70, 75, 95, 96, 97) THEN 2
             ELSE NULL
          END
             AS "TPCONTR",
          CASE
             WHEN FUN.VINCULO IN (55, 60, 65, 70, 75, 95, 96, 97) THEN DTTERMINO
             ELSE NULL
          END
             AS "DTTERM",
          CAST (FUN.DIRRECIPROCO AS CHAR (1)) AS "CLAUASSEG",
          NVL((SELECT CASE WHEN LENGTH(E.CGC) = 14 THEN 1 ELSE 2 END
                    FROM TFPTOM TOM, TSIEMP E
                   WHERE TOM.CODPARC = E.CODPARC
                     AND TOM.CODEMP = E.CODEMP
                     AND TOM.CODEMP = FUN.CODEMP
                     AND TOM.CODFUNC = FUN.CODFUNC
                     AND TOM.DTINICIO =
                            (SELECT MAX (DTINICIO)
                               FROM TFPTOM TM
                              WHERE     TM.CODEMP = TOM.CODEMP
                                    AND TM.CODPARC = TOM.CODPARC
                                    AND TM.CODFUNC = TOM.CODFUNC)),
             VEMP.TPINSCEMPREGADOR)
             AS "TPINSCLOCALTRABGERAL",
          NVL (
             (SELECT E.CGC
                FROM TFPTOM TOM, TSIEMP E
               WHERE     TOM.CODPARC = E.CODPARC
                     AND TOM.CODEMP = E.CODEMP
                     AND TOM.CODEMP = FUN.CODEMP
                     AND TOM.CODFUNC = FUN.CODFUNC
                     AND TOM.DTINICIO =
                            (SELECT MAX (DTINICIO)
                               FROM TFPTOM TM
                              WHERE     TM.CODEMP = TOM.CODEMP
                                    AND TM.CODPARC = TOM.CODPARC
                                    AND TM.CODFUNC = TOM.CODFUNC)),
             VEMP.CGC)
             AS "NRINSCLOCALTRABGERAL",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                (SELECT CODLOGRADOURO
                   FROM TSIEND
                  WHERE CODEND = VEMP.CODEND)
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT (SELECT CODLOGRADOURO
                           FROM TSIEND
                          WHERE CODEND = PAR.CODEND)
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "TPLOGRADLOCALTRABDOM",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                (SELECT NOMEEND
                   FROM TSIEND
                  WHERE CODEND = VEMP.CODEND)
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT (SELECT NOMEEND
                           FROM TSIEND
                          WHERE CODEND = PAR.CODEND)
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "DSCLOGRADLOCALTRABDOM",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                VEMP.NUMEND
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT PAR.NUMEND
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "NRLOGRADLOCALTRABDOM",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                VEMP.COMPLEMENTO
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT PAR.COMPLEMENTO
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "COMPLEMENTOLOCALTRABDOM",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                (SELECT NOMEBAI
                   FROM TSIBAI
                  WHERE CODBAI = VEMP.CODBAI)
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT (SELECT NOMEBAI
                           FROM TSIBAI
                          WHERE CODBAI = PAR.CODBAI)
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "BAIRROLOCALTRABDOM",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                VEMP.CEP
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT PAR.CEP
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "CEPLOCALTRABDOM",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                (SELECT CODMUNFIS
                   FROM TSICID
                  WHERE CODCID = VEMP.CODCID)
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT (SELECT CODMUNFIS
                           FROM TSICID
                          WHERE CODCID = PAR.CODCID)
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "CODMUNICLOCALTRABDOM",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104
             THEN
                (SELECT UFS.UF
                   FROM TSIUFS UFS, TSICID CID
                  WHERE CODUF = CID.UF AND CID.CODCID = VEMP.CODCID)
             WHEN FUN.CODCATEGESOCIAL = 106
             THEN
                (SELECT (SELECT UFS.UF
                           FROM TSIUFS UFS, TSICID CID
                          WHERE CODUF = CID.UF AND CID.CODCID = PAR.CODCID)
                   FROM TGFPAR PAR
                  WHERE PAR.CODPARC = DEP.CODPARC)
             ELSE
                NULL
          END
             AS "UFLOCALTRABDOM",
          FUN.HORASSEM AS "QTDHRSSEM",
          CASE
             WHEN (CGH.ESCALONAR = 'N') THEN 1
             WHEN (CGH.DIASTRAB = CGH.DIASFOLGA) THEN 2
             ELSE 9
          END
             AS "TPJORNADA",
          NVL (CGH.DESCRCARGAHOR, 'NAO INFORMADA') AS "DSCTPJORN",
          CASE
             WHEN FUN.CODCATEGESOCIAL = 104 AND FUN.HORASSEM <= 25 THEN '1'
             WHEN FUN.CODCATEGESOCIAL <> 104 AND FUN.HORASSEM <= 26 THEN '3'
             WHEN FUN.CODCATEGESOCIAL <> 104 AND FUN.HORASSEM <= 25 THEN '2'
             ELSE '0'
          END
             AS "TMPPARC",
          CASE
             WHEN (SELECT DISTINCT 1
                     FROM TFPFOL FOL
                    WHERE     FOL.REFERENCIA = EMP.REFERENCIA
                          AND FOL.CODEMP = FUN.CODEMP
                          AND FOL.CODFUNC = FUN.CODFUNC
                          AND (   ','
                               || CAST (
                                     SIND.EVENTOCONTASSOC AS VARCHAR2 (250))
                               || ',') LIKE
                                 (   '%,'
                                  || CAST (FOL.CODEVENTO AS VARCHAR2 (5))
                                  || ',%')) = 1
             THEN
                SIND.CGC
             ELSE
                ''
          END
             AS "CNPJSINDTRAB",
          CAST ( (SELECT NUMPROCESSO
                    FROM TFPPSS
                   WHERE NUPROCESSO = FUN.NUPROCESSOJUD) AS VARCHAR (20))
             AS "NRPROCJUDALVARAJUDICIAL",
          (SELECT CASE
                     WHEN VEMP.NRINSCEMPREGADOR <> SUBSTR (EM.CGC, 1, 8)
                     THEN
                        EM.CGC
                     ELSE
                        NULL
                  END
             FROM TSIEMP EM
            WHERE EM.CODEMP = FUN.CODEMPORIG)
             AS "CNPJEMPREGANT",
          (SELECT CASE
                     WHEN VEMP.NRINSCEMPREGADOR <> SUBSTR (EM.CGC, 1, 8)
                     THEN
                        CAST (F.MATRICULA AS VARCHAR2 (30))
                     ELSE
                        NULL
                  END
             FROM TFPFUN F, TSIEMP EM
            WHERE     F.CODEMP = FUN.CODEMPORIG
                  AND F.CODFUNC = FUN.CODFUNCORIG
                  AND EM.CODEMP = FUN.CODEMPORIG)
             AS "MATRICANT",
          CASE
             WHEN VEMP.NRINSCEMPREGADOR <>
                     (SELECT SUBSTR (EM.CGC, 1, 8)
                        FROM TSIEMP EM
                       WHERE EM.CODEMP = FUN.CODEMPORIG)
             THEN
                FUN.DTTRANSFERENCIA
             ELSE
                NULL
          END
             AS "DTINIVINCULO",
          FUN.OBSEMPANT AS "OBSERVACAOSUCESSAOVINC",
          CASE
             WHEN ( (SELECT MAX(NVL (OCO.DTINICOCOR, ''))
                       FROM TFPOCO OCO, TFPHIS H
                      WHERE     OCO.CODEMP = FUN.CODEMP
                            AND OCO.CODFUNC = FUN.CODFUNC
                            AND OCO.CODHISTOCOR = H.CODHISTOCOR
                            AND H.AFASTAMENTO IN ('A', 'D', 'M', 'G', 'Y')
                            AND H.CODMOTAFAST IS NOT NULL
                            AND OCO.DTFINALOCOR IS NULL) <
                      VEMP.DTCARGAINICIAL)
             THEN
                (SELECT MAX(NVL (OCO.DTINICOCOR, ''))
                   FROM TFPOCO OCO, TFPHIS H
                  WHERE     OCO.CODEMP = FUN.CODEMP
                        AND OCO.CODFUNC = FUN.CODFUNC
                        AND OCO.CODHISTOCOR = H.CODHISTOCOR
                        AND H.AFASTAMENTO IN ('A', 'D', 'M', 'G', 'Y')
                        AND H.CODMOTAFAST IS NOT NULL
                        AND OCO.DTFINALOCOR IS NULL)
             ELSE
                NULL
          END
             AS "DTINIAFAST",
          CASE
             WHEN ( (SELECT MAX(NVL (OCO.DTINICOCOR, ''))
                       FROM TFPOCO OCO, TFPHIS H
                      WHERE     OCO.CODEMP = FUN.CODEMP
                            AND OCO.CODFUNC = FUN.CODFUNC
                            AND OCO.CODHISTOCOR = H.CODHISTOCOR
                            AND H.AFASTAMENTO IN ('A', 'D', 'M', 'G', 'Y')
                            AND H.CODMOTAFAST IS NOT NULL
                            AND OCO.DTFINALOCOR IS NULL) <
                      VEMP.DTCARGAINICIAL)
             THEN
                (SELECT MAX(NVL (H.CODMOTAFAST, ''))
                   FROM TFPOCO OCO, TFPHIS H
                  WHERE     OCO.CODEMP = FUN.CODEMP
                        AND OCO.CODFUNC = FUN.CODFUNC
                        AND OCO.CODHISTOCOR = H.CODHISTOCOR
                        AND H.AFASTAMENTO IN ('A', 'D', 'M', 'G', 'Y')
                        AND H.CODMOTAFAST IS NOT NULL
                        AND OCO.DTFINALOCOR IS NULL)
             ELSE
                NULL
          END
             AS "CODMOTAFAST",
          PUB.MTVALTER,
          FUN.JUSTPRORR,
          NULL AS DSCALT,
          CASE
             WHEN (FUN.DTDEM < VEMP.DTCARGAINICIAL) THEN FUN.DTDEM
             ELSE NULL
          END
             AS "DTDESLIG",
          VEMP.CODEMPMATRIZ AS CODEMP,
          CAST (FUN.CODEMP || ':' || FUN.CODFUNC AS VARCHAR2 (100))
             AS "CHAVE",
          FUN.SITESOCIAL,
          SNK_GET_TPAMB_ESOCIAL AS TPAMB
     FROM TFPFUN FUN
          LEFT JOIN TFPPUB PUB
             ON (    FUN.CODEMP = PUB.CODEMP
                 AND FUN.CODFUNC = PUB.CODFUNC
                 AND EXISTS
                        (SELECT 1
                           FROM TSIPAR
                          WHERE CHAVE = 'FPTRIBUNAL' AND LOGICO = 'S'))
          LEFT JOIN TFPDEP DEP ON DEP.CODDEP = FUN.CODDEP
          LEFT JOIN TFPCGH CGH ON FUN.CODCARGAHOR = CGH.CODCARGAHOR
          LEFT JOIN TSIBAI BAI ON BAI.CODBAI = FUN.CODBAI
          LEFT JOIN TSICID CID ON CID.CODCID = FUN.CODCID
          LEFT JOIN TSIUFS UFS ON UFS.CODUF = CID.UF
          LEFT JOIN TSIPAI PA ON PA.CODPAIS = UFS.CODPAIS
          LEFT JOIN TSIEND EN ON EN.CODEND = FUN.CODEND
          LEFT JOIN TFPSIN SIND ON SIND.CODSIND = FUN.CODSIND,
          TFPEMP EMP,
          tsiemp em,
          VGF_EVENTO_EMPREGADOR VEMP
    WHERE     FUN.CODEMP = EMP.CODEMP
          AND FUN.CODEMP = VEMP.CODEMP
          and fun.codemp = em.codemp
          AND VEMP.DTCARGAINICIAL IS NOT NULL
          AND FUN.CODCATEGESOCIAL IN (101, 102, 103, 104, 105, 106, 111, 301, 302, 303, 306, 307, 309)
          AND FUN.SITESOCIAL IN ('O', '5', '6', 'T')
/
 
 
 
/*
Requer    : 4210012
Conexao   : ORCL
Data      : 16/05/2018 14:37:52
Num.Script: 55576-0-0
Nro. O.S. : 1185132
Nome      : Alterar - VGF_EVENTO_S2300_BASE
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VGF_EVENTO_S2300_BASE
NomeObjeto: VGF_EVENTO_S2300_BASE
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210013
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2300_BASE
AS
   SELECT VEMP.TPINSCEMPREGADOR,
          VEMP.NRINSCEMPREGADOR,
          FUN.CPF AS "CPFTRAB",
          FUN.PIS AS "NISTRAB",
          FUN.NOMEFUNC AS "NMTRAB",
          FUN.DTALTER AS DTALTERACAO,
          CAST (NULL AS DATE) AS DTREF,
          CAST (FUN.SEXO AS CHAR (1)) AS "SEXO",
         CASE
             WHEN RACAFUNCIONARIO = 2 THEN 1
             WHEN RACAFUNCIONARIO = 4 THEN 2
             WHEN RACAFUNCIONARIO = 8 THEN 3
             WHEN RACAFUNCIONARIO = 6 THEN 4
             WHEN RACAFUNCIONARIO = 0 THEN 5
             ELSE 6
          END
             AS "RACACOR",
          CASE
             WHEN FUN.ESTADOCIVIL = 3 THEN 5
             WHEN FUN.ESTADOCIVIL IN (5, 6) THEN 3
             WHEN FUN.ESTADOCIVIL = 7 THEN 2
             ELSE FUN.ESTADOCIVIL
          END
             AS "ESTCIV",
          CAST (
             CASE
                WHEN FUN.NIVESC = 10 THEN 11
                WHEN FUN.NIVESC = 11 THEN 12
                ELSE FUN.NIVESC
             END AS VARCHAR2 (2))
             AS "GRAUINSTR",
          FUN.NMSOCIAL AS "NMSOC",
          FUN.DTNASC AS "DTNASCTONASCIMENTO",
          (SELECT CODMUNFIS
             FROM TSICID
            WHERE CODCID = FUN.CIDNASC)
             AS "CODMUNICNASCIMENTO",
          (SELECT UFS.UF
             FROM TSIUFS UFS, TSICID CID
            WHERE UFS.CODUF = CID.UF AND CID.CODCID = FUN.CIDNASC)
             AS "UFNASCIMENTO",
          (SELECT SUBSTR (CAST (CODPAISFIS AS VARCHAR2(5)), 1, 3)
             FROM TSIPAI PAI, TSIUFS UFS, TSICID CID
            WHERE     UFS.CODUF = CID.UF
                  AND CID.CODCID = FUN.CIDNASC
                  AND PAI.CODPAIS = UFS.CODPAIS)
             AS "PAISNASCTONASCIMENTO",
          (SELECT SUBSTR (CAST (CODPAISFIS AS VARCHAR2(5)), 1, 3)
             FROM TSIPAI PAI
            WHERE PAI.CODPAIS = FUN.CODPAISNAC)
             AS "PAISNACNASCIMENTO",
          FUN.NOMEMAE AS "NMMAENASCIMENTO",
          FUN.NOMEPAI AS "NMPAINASCIMENTO",
          CAST (FUN.NUMCPS AS VARCHAR2 (11)) AS "NRCTPS",
          FUN.SERIECPS AS "SERIECTPS",
          (SELECT UF
             FROM TSIUFS
            WHERE CODUF = FUN.UFCPS)
             AS "UFCTPS",
          FUN.NRORIC AS "NRRIC",
          FUN.ORGAORIC AS "ORGAOEMISSORRIC",
          FUN.DTEMIRIC AS "DTEXPEDRIC",
          REPLACE (
             REPLACE (REPLACE (REPLACE (FUN.IDENTIDADE, '-', ''), '/', ''),
                      '.',
                      ''),
             ' ',
             '')			
             AS "NRRG",
          FUN.ORGAORG AS "ORGAOEMISSORRG",
          FUN.DTRG AS "DTEXPEDRG",
          SUBSTR (FUN.RNE, 1, 14) AS NRRNE,
          FUN.ORGAORNE AS "ORGAOEMISSORRNE",
          FUN.DTEXPRNE AS "DTEXPEDRNE",
          FUN.NROC AS "NROC",
          FUN.ORGAOOC AS "ORGAOEMISSOROC",
          FUN.DTEXPOC AS "DTEXPEDOC",
          FUN.DTVALOC AS "DTVALIDOC",
          case when FUN.NROCNH = '' then null else FUN.NROCNH end AS "NRREGCNH",
          FUN.DTEXPCNH AS "DTEXPEDCNH",
          (SELECT UF
             FROM TSIUFS
            WHERE CODUF = FUN.UFCNH)
             AS "UFCNH",
          FUN.VENCIMENTOCNH AS "DTVALIDCNH",
          FUN.PRIMEIRACNH AS "DTPRIHAB",
          SUBSTR (FUN.CATEGORIACNH, 1, 2) AS "CATEGORIACNH",
          EN.CODLOGRADOURO AS "TPLOGRADBRASIL",
          EN.NOMEEND AS "DSCLOGRADBRASIL",
          FUN.NUMEND AS "NRLOGRADBRASIL",
          FUN.COMPLEMENTO AS "COMPLEMENTOBRASIL",
          BAI.NOMEBAI AS "BAIRROBRASIL",
          FUN.CEP AS "CEPBRASIL",
          CAST (CID.CODMUNFIS AS NUMBER(10)) AS "CODMUNICBRASIL",
          UFS.UF AS "UFBRASIL",
          CASE
             WHEN SUBSTR (CAST(PA.CODPAISFIS AS VARCHAR2(10)), 1, 3) <> 105
             THEN
                SUBSTR (CAST(PA.CODPAISFIS AS VARCHAR2(10)), 1, 3)
             ELSE
                NULL
          END
             AS "PAISRESID",
          CASE
             WHEN SUBSTR (CAST(PA.CODPAISFIS AS VARCHAR2(10)), 1, 3) <> 105 THEN EN.NOMEEND
             ELSE NULL
          END
             AS "DSCLOGRADEXTERIOR",
          CASE
             WHEN SUBSTR (CAST(PA.CODPAISFIS AS VARCHAR2(10)), 1, 3) <> 105 THEN FUN.NUMEND
             ELSE NULL
          END
             AS "NRLOGRADEXTERIOR",
          CASE
             WHEN SUBSTR (CAST(PA.CODPAISFIS AS VARCHAR2(10)), 1, 3) <> 105 THEN FUN.COMPLEMENTO
             ELSE NULL
          END
             AS "COMPLEMENTOEXTERIOR",
          CASE
             WHEN SUBSTR (CAST(PA.CODPAISFIS AS VARCHAR2(10)), 1, 3) <> 105 THEN BAI.NOMEBAI
             ELSE NULL
          END
             AS "BAIRROEXTERIOR",
          CASE
             WHEN SUBSTR (CAST(PA.CODPAISFIS AS VARCHAR2(10)), 1, 3) <> 105 THEN CID.NOMECID
             ELSE NULL
          END
             AS "NMCIDEXTERIOR",
          CASE
             WHEN SUBSTR (CAST(PA.CODPAISFIS AS VARCHAR2(10)), 1, 3) <> 105 THEN FUN.CAIXAPOSTAL
             ELSE NULL
          END
             AS "CODPOSTALEXTERIOR",
          FUN.DTCHEGPAIS AS "DTCHEGADA",
          FUN.CLASSTRABESTRANG,
          FUN.CASADOBR AS "CASADOBR",
          FUN.FILHOSBR AS "FILHOSBR",
          CASE WHEN FUN.TIPDEFICIENCIA IN (0, 5, 7) THEN 'N' ELSE 'S' END
             AS "DEFFISICA",
          CASE WHEN FUN.TIPDEFICIENCIA = 3 THEN 'S' ELSE 'N' END
             AS "DEFVISUAL",
          CASE WHEN FUN.TIPDEFICIENCIA = 2 THEN 'S' ELSE 'N' END
             AS "DEFAUDITIVA",
          CASE WHEN FUN.TIPDEFICIENCIA = 8 THEN 'S' ELSE 'N' END
             AS "DEFMENTAL",
          CASE WHEN FUN.TIPDEFICIENCIA = 4 THEN 'S' ELSE 'N' END
             AS "DEFINTELECTUAL",
          CASE WHEN FUN.TIPDEFICIENCIA = 6 THEN 'S' ELSE 'N' END
             AS "REABREADAP",
          NULL AS "OBSERVACAO",
          CASE
             WHEN LENGTH (TRIM (FUN.TELEFONE)) < 10 THEN NULL
             ELSE REPLACE (FUN.TELEFONE, ' ', '')
          END
             AS "FONEPRINC",
          CASE
             WHEN LENGTH (TRIM(FUN.CELULAR)) < 10 THEN NULL
             ELSE REPLACE (FUN.CELULAR, ' ', '')
          END
             AS "FONEALTERNAT",
          REPLACE (FUN.EMAIL, ' ', '') AS "EMAILPRINC",
          NULL AS EMAILALTERNAT,
          CASE WHEN FUN.DTADM < VEMP.DTCARGAINICIAL THEN 'S' ELSE 'N' END
             AS CADINI,
          FUN.CODCATEGESOCIAL AS CODCATEG,
          FUN.DTADM AS DTINICIO,
          CASE
             WHEN FUN.CODCATEGESOCIAL IN (305, 721, 722, 771, 901)
             THEN
                NULL
             ELSE
                (SELECT CASE WHEN TIPHORANOTURNA = 'U' THEN 1 ELSE 2 END
                   FROM TFPCBO CBO
                  WHERE CBO.CODCBO =
                           CASE
                              WHEN (SELECT 1
                                      FROM TSIPAR
                                     WHERE     CHAVE =
                                                  'FPUTILIZACBO'
                                           AND INTEIRO = 0) > 0
                              THEN
                                 (SELECT CODCBO
                                    FROM TFPCAR C
                                   WHERE C.CODCARGO = FUN.CODCARGO)
                              ELSE
                                 (SELECT CODCBO
                                    FROM TFPFCO F
                                   WHERE F.CODFUNCAO = FUN.CODFUNCAO)
                           END)
          END
             AS "NATATIVIDADE",
           CAST (CASE
                   WHEN (SELECT 1
                           FROM TSIPAR
                          WHERE     CHAVE = 'FPUTILIZACBO'
                                AND NVL (INTEIRO, 0) = 0) > 0
                   THEN
                      FUN.CODCARGO
                   ELSE
                      FUN.CODFUNCAO
                END AS VARCHAR2 (30))
             AS "CODCARGO",
          CAST (CASE
                   WHEN (SELECT LOGICO
                           FROM TSIPAR
                          WHERE CHAVE = 'FPTRIBUNAL') = 'S'
                   THEN
                      (SELECT CODFUNCAO
                         FROM TFPFCO
                        WHERE CODFUNCAO = FUN.CODFUNCAO)
                   ELSE
                      0
                END AS VARCHAR2 (30))
             AS "CODFUNCAO",
          CAST (
             CASE
                WHEN FUN.TIPSAL = 5 AND NVL (FUN.SALBASE, 0) = 0 THEN 0
                ELSE FUN.SALBASE
             END AS FLOAT)
             AS "VRSALFX",
          CASE
             WHEN FUN.TIPSAL = 1 THEN 5
             WHEN FUN.TIPSAL = 2 THEN 4
             WHEN FUN.TIPSAL = 3 THEN 3
             WHEN FUN.TIPSAL = 4 THEN 2
             WHEN FUN.TIPSAL = 5 AND NVL (FUN.SALBASE, 0) > 0 THEN 1
             WHEN FUN.TIPSAL = 5 AND NVL (FUN.SALBASE, 0) = 0 THEN 7
             WHEN FUN.COMPSALARIO = 2 THEN 8
             ELSE 6
          END
             AS "UNDSALFIXO",
         CASE
             WHEN FUN.TIPSAL = 5 AND NVL (FUN.SALBASE, 0) = 0
             THEN
                FUN.OBSVARIAVEL
             ELSE
                NULL
          END
             AS "DSCSALVAR",
          1 AS "OPCFGTS",          -- pensao que estagiario nao devamos mandar
          FUN.DTOPTFGTS AS "DTOPCFGTS",
          /* infoDirigenteSindical -  NÃ£o temos caso de uso no sistema */
          CAST (NULL AS NUMBER(5)) AS CATEGORIGDIRSIND,
          NULL AS CNPJORIGDIRSIND,
          CAST (NULL AS DATE) AS DTADMORIGDIRSIND,
          NULL AS MATRICORIGDIRSIND,
          FUN.CODCATEGTRABCEDIDO AS CATEGORIGCED,
          FUN.CNPJEMPCED AS CNPJCED,
          FUN.MATRICULAEMPCED AS MATRICCED,
          FUN.DTADMEMPCED AS DTADMCED,
          FUN.TPREGTRABCED,
          FUN.TPREGPREVCED,
          FUN.INFOONUS AS INFONUSCED,
          EST.NATESTAGIO AS natEstagio,
          CAST (EST.NIVESTAGIO AS CHAR (1)) AS nivEstagio,
          EST.AREAATUACAO AS areaAtuacao,
          EST.NRAPOL AS nrApol,
          EST.VLRBOLSA AS vlrBolsa,
          EST.DTPREVTERM AS dtPrevTerm,
          EST.CNPJINSTENSINO AS cnpjInstEnsino,
          SUBSTR (EST.NMRAZAOINSTENS, 1, 100) AS nmRazaoinstens,
          (SELECT NOMEEND
             FROM TSIEND
            WHERE CODEND = EST.CODENDINSTENS)
             AS dscLogradinstens,
          EST.NRLOGRADINSTENS AS nrLogradinstens,
          (SELECT NOMEBAI
             FROM TSIBAI
            WHERE CODBAI = EST.CODBAIINSTENS)
             AS bairroinstens,
          EST.CEPINSTENS AS cepinstens,
          (SELECT CODMUNFIS
             FROM TSICID
            WHERE CODCID = EST.CODCIDINSTENS)
             AS codMunicinstens,
          (SELECT UFS.UF
             FROM TSICID CID, TSIUFS UFS
            WHERE CID.UF = UFS.CODUF AND CID.CODCID = EST.CODCIDINSTENS)
             AS ufinstens,
          EST.CNPJAGTINTEG AS cnpjAgntInteg,
          SUBSTR (EST.NMRAZAOAGTINTEG, 1, 100) AS nmRazaoAgntInteg,
          (SELECT NOMEEND
             FROM TSIEND
            WHERE CODEND = EST.CODENDAGTINTEG)
             AS dscLogradAgntInteg,
          EST.NRLOGRADAGTINTEG AS nrLogradAgntInteg,
          (SELECT NOMEBAI
             FROM TSIBAI
            WHERE CODBAI = EST.CODBAIAGTINTEG)
             AS bairroAgntInteg,
          EST.CEPAGTINTEG AS cepAgntInteg,
          (SELECT CODMUNFIS
             FROM TSICID
            WHERE CODCID = EST.CODCIDAGTINTEG)
             AS codMunicAgntInteg,
          (SELECT UFS.UF
             FROM TSICID CID, TSIUFS UFS
            WHERE CID.UF = UFS.CODUF AND CID.CODCID = EST.CODCIDAGTINTEG)
             AS ufAgntInteg,
          EST.CPFSUPERVISOR AS cpfSupervisor,
          EST.NMSUPERVISOR AS nmSuperv,
          CASE
             WHEN ( (SELECT NVL (OCO.DTINICOCOR, '')
                       FROM TFPOCO OCO, TFPHIS H
                      WHERE     OCO.CODEMP = FUN.CODEMP
                            AND OCO.CODFUNC = FUN.CODFUNC
                            AND OCO.CODHISTOCOR = H.CODHISTOCOR
                            AND H.AFASTAMENTO IN ('A', 'D', 'M', 'G', 'Y')
                            AND H.CODMOTAFAST IS NOT NULL
                            AND OCO.DTFINALOCOR IS NULL) <
                      VEMP.DTCARGAINICIAL)
             THEN
                (SELECT NVL (OCO.DTINICOCOR, '')
                   FROM TFPOCO OCO, TFPHIS H
                  WHERE     OCO.CODEMP = FUN.CODEMP
                        AND OCO.CODFUNC = FUN.CODFUNC
                        AND OCO.CODHISTOCOR = H.CODHISTOCOR
                        AND H.AFASTAMENTO IN ('A', 'D', 'M', 'G', 'Y')
                        AND H.CODMOTAFAST IS NOT NULL
                        AND OCO.DTFINALOCOR IS NULL)
             ELSE
                NULL
          END
             AS "DTINIAFAST",
          CASE
             WHEN ( (SELECT NVL (OCO.DTINICOCOR, '')
                       FROM TFPOCO OCO, TFPHIS H
                      WHERE     OCO.CODEMP = FUN.CODEMP
                            AND OCO.CODFUNC = FUN.CODFUNC
                            AND OCO.CODHISTOCOR = H.CODHISTOCOR
                            AND H.AFASTAMENTO IN ('A', 'D', 'M', 'G', 'Y')
                            AND H.CODMOTAFAST IS NOT NULL
                            AND OCO.DTFINALOCOR IS NULL) <
                      VEMP.DTCARGAINICIAL)
             THEN
                (SELECT NVL (H.CODMOTAFAST, '')
                   FROM TFPOCO OCO, TFPHIS H
                  WHERE     OCO.CODEMP = FUN.CODEMP
                        AND OCO.CODFUNC = FUN.CODFUNC
                        AND OCO.CODHISTOCOR = H.CODHISTOCOR
                        AND H.AFASTAMENTO IN ('A', 'D', 'M', 'G', 'Y')
                        AND H.CODMOTAFAST IS NOT NULL
                        AND OCO.DTFINALOCOR IS NULL)
             ELSE
                NULL
          END
             AS "CODMOTAFAST",
          CASE
             WHEN (FUN.DTDEM < VEMP.DTCARGAINICIAL) THEN FUN.DTDEM
             ELSE NULL
          END
             AS "DTTERM",
          VEMP.CODEMPMATRIZ AS CODEMP,
          CAST (CAST(FUN.CODEMP AS VARCHAR2(10)) ||':'|| CAST(FUN.CODFUNC AS VARCHAR2(10)) AS VARCHAR2 (100))
             AS "CHAVE",
          FUN.SITESOCIAL,
          SNK_GET_TPAMB_ESOCIAL AS TPAMB
     FROM TFPFUN FUN
          LEFT JOIN TFPEST EST
             ON FUN.CODEMP = EST.CODEMP AND FUN.CODFUNC = EST.CODFUNC
          LEFT JOIN TSIBAI BAI ON BAI.CODBAI = FUN.CODBAI
          LEFT JOIN TSICID CID ON CID.CODCID = FUN.CODCID
          LEFT JOIN TSIUFS UFS ON UFS.CODUF = CID.UF
          LEFT JOIN TSIPAI PA ON PA.CODPAIS = UFS.CODPAIS
          LEFT JOIN TSIEND EN ON EN.CODEND = FUN.CODEND,
          VGF_EVENTO_EMPREGADOR VEMP
    WHERE     FUN.CODEMP = VEMP.CODEMP
          AND VEMP.DTCARGAINICIAL IS NOT NULL
          AND FUN.CODCATEGESOCIAL IN (201, 202, 305, 308, 401, 410, 701, 711, 712, 721, 722, 723, 731, 734, 738, 741, 751, 761, 771, 781, 901, 902, 903, 904, 905)
          AND FUN.SITESOCIAL IN ('O', '5', '6', 'T')
/
 
 
 
/*
Requer    : 4210012
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 55593-0-0
Nro. O.S. : 1148508
Nome      : Alterar - SNK_PROCESSA_DADOS_REINF
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - SNK_PROCESSA_DADOS_REINF
NomeObjeto: SNK_PROCESSA_DADOS_REINF
TipoObjeto: PROCEDURE
NomeTabela: 
Executar  : SEMPRE
Ocorrencia: 4210013
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE PROCEDURE SNK_PROCESSA_DADOS_REINF(P_CODEMP           NUMBER,
                                                     P_DTREF            DATE,
                                                     P_TPAMB            VARCHAR2,
                                                     P_SEQUENCIA_ATUAL  NUMBER, 
                                                     P_TIPDADOS         CHAR,                   /*T=TODOS, C=CADOSTRO, M=MOVIMENTO*/
                                                     P_EVENTO           VARCHAR2 := 'TODOS',    /*TODOS, NOMEEVENTO*/
                                                     P_NOMETAB          VARCHAR2 := NULL,       /*UTILIZADO NA RECURSIVIDADE*/
                                                     P_SEQUENCIA_PAI    NUMBER := NULL,         /*UTILIZADO NA RECURSIVIDADE*/
                                                     P_RESULT           OUT NUMBER)     
AS
    P_SEQUENCIA_OLD             NUMBER;
    P_SEQUENCIA_NEW             NUMBER;
    P_SEQUENCIA_DEL             NUMBER;
    P_DTREF_OLD                 DATE;
    P_DTREF_OLD_PENDENTE        DATE;
    P_NRORECIBO                 VARCHAR2(50);
    P_NRO_RECIBO_OLD            VARCHAR2(50) := NULL;
    P_INSERT_COLUMNS            VARCHAR2(4000);
    P_INSERT_VALUES             VARCHAR2(4000);
    P_COUNT                     NUMBER(10);
    queSql                      VARCHAR2(4000);
BEGIN
    SELECT MAX(DTREF) INTO P_DTREF_OLD_PENDENTE
    FROM TRICAB CAB
    WHERE CAB.CODEMP = P_CODEMP
        AND CAB.DTREF < P_DTREF
        AND CAB.TPAMB = P_TPAMB
        AND NOT EXISTS( SELECT 1
                        FROM TRIFEP FEP
                        WHERE FEP.CODEMP = CAB.CODEMP
                            AND FEP.DTREF = CAB.DTREF
                            AND FEP.TPAMB = CAB.TPAMB
                            AND FEP.SEQUENCIA = CAB.SEQUENCIAATUAL);

    IF P_DTREF_OLD_PENDENTE IS NOT NULL THEN
        RAISE_APPLICATION_ERROR(-20101, 'Existe movimento para referência '''||TO_CHAR(P_DTREF_OLD_PENDENTE, 'DD/MM/YYYY')||''' que não foi fechada. Para gerar esta referência é necessário seu fechamento.');
    END IF;

    IF P_NOMETAB IS NULL THEN
        FOR EVE IN (SELECT MON.NOMETAB, MON.NOMEEVENTO
                    FROM TRIMON MON
                        INNER JOIN TRIEVT EVT ON EVT.TIPOEVENTO = MON.NOMEEVENTO
                    WHERE (P_EVENTO = 'TODOS' OR MON.NOMEEVENTO = P_EVENTO)
                        AND MON.NOMETABPAI IS NULL
                        AND (P_EVENTO <> 'TODOS' OR P_TIPDADOS = 'T' OR EVT.GRUPO = P_TIPDADOS)
                        AND (EXISTS(SELECT 1
                                   FROM TGFEPS
                                   WHERE EVENTO = EVT.TIPOEVENTO
                                     AND CODEMP = P_CODEMP
                                     AND GERAREVENTO = 'S') OR 
                             EVT.GRUPO = 'C') /*EVENTOS DE CADASTRO NÃO ESTÃO NA TABELA TGFEPS*/
                    GROUP BY MON.NOMEEVENTO, MON.NOMETAB, MON.ORDEM
                    ORDER BY MON.ORDEM
                    ) 
        LOOP
            queSql := ' SELECT COUNT(1)  
                        FROM '||EVE.NOMETAB||'
                        WHERE CODEMP = :CODEMP
                          AND DTREF = :DTREF
                          AND TPAMB = :TPAMB
                          AND STATUSREG = ''E'' ';

            EXECUTE IMMEDIATE queSql INTO P_COUNT USING P_CODEMP, P_DTREF, P_TPAMB;

            IF P_COUNT > 0 THEN
                RAISE_APPLICATION_ERROR(-20101, 'Não é possível gerar dados do REINF se existir eventos enviados para esta empresa/referência.');
            END IF;

            queSql := ' SELECT MAX(SEQUENCIA)
                        FROM '||EVE.NOMETAB||'
                        WHERE CODEMP = :CODEMP
                          AND DTREF = :DTREF
                          AND TPAMB = :TPAMB
                          AND STATUSREG = ''P''';

            EXECUTE IMMEDIATE queSql INTO P_SEQUENCIA_DEL USING P_CODEMP, P_DTREF, P_TPAMB;

            IF NVL(P_SEQUENCIA_DEL, 0) > 0 THEN
                FOR CUR_DEL IN (SELECT NOMETAB
                                FROM TRIMON
                                WHERE NOMETABPAI IS NULL
                                ORDER BY ORDEM DESC /*NÃO ALTERAR ESSA ORDEM: OS MOVIMENTOS DEVEM SER DELETADOS ANTES DOS PROCESSOS, POIS EXISTE FK ENTRE ELES*/
                                ) 
                LOOP
                    queSql := ' DELETE FROM '||CUR_DEL.NOMETAB||'
                                WHERE CODEMP = :CODEMP
                                  AND DTREF = :DTREF
                                  AND TPAMB = :TPAMB
                                  AND SEQUENCIA = :SEQUENCIA';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_DEL;

                END LOOP;
                P_SEQUENCIA_NEW := P_SEQUENCIA_ATUAL;
                EXIT; /*COMO JÁ DELETEI TODOS OS REGISTROS PARA A ULTIMA SEQUENCIA PENDENTE, POSSO SAIR DO LOOP*/
            END IF;
        END LOOP;
    ELSE
        P_SEQUENCIA_NEW := P_SEQUENCIA_PAI;
    END IF;

    IF P_SEQUENCIA_NEW IS NULL THEN /*SE A SEQUENCIA ESTÁ NULL, NENHUM REGISTRO FOI DELETADO, LOGO A SEQUENCIA SERÁ A SEQUENCIA ATUAL + 1*/
        P_SEQUENCIA_NEW := P_SEQUENCIA_ATUAL + 1;
    END IF;

    FOR EVE IN (SELECT MON.NOMETAB, MON.NOMEEVENTO, MON.NOMEVIEW
                     , CASE WHEN P_NOMETAB IS NULL THEN MON.NOMETABPAI ELSE (SELECT MIN(NOMETAB) FROM TRIMON WHERE NOMEEVENTO = P_EVENTO AND NOMETABPAI IS NULL) END AS NOMETABPAI
                     , MON.VIEWDETALHE, EVT.GRUPO, MON.ORDEM
                FROM TRIMON MON
                    INNER JOIN TRIEVT EVT ON EVT.TIPOEVENTO = MON.NOMEEVENTO
                WHERE (P_NOMETAB IS NOT NULL AND MON.NOMETAB = P_NOMETAB) /*BUSCA O PRÓPRIO EVENTO*/ OR 
                         (  P_NOMETAB IS NULL
                         AND MON.NOMETABPAI IS NULL 
                         AND (P_EVENTO = 'TODOS' OR MON.NOMEEVENTO = P_EVENTO)                      
                         AND (P_EVENTO <> 'TODOS' OR P_TIPDADOS = 'T' OR EVT.GRUPO = P_TIPDADOS)
                         AND (EXISTS(SELECT 1
                                       FROM TGFEPS
                                     WHERE EVENTO = EVT.TIPOEVENTO
                                        AND CODEMP = P_CODEMP
                                        AND GERAREVENTO = 'S') OR
                              EVT.GRUPO = 'C') /*EVENTOS DE CADASTRO NÃO ESTÃO NA TABELA TGFEPS*/
                      )
                ORDER BY MON.ORDEM  
               )
    LOOP
        P_NRORECIBO := NULL;
        P_NRO_RECIBO_OLD := NULL;

        IF P_SEQUENCIA_NEW > 1 THEN
            queSql := ' SELECT MAX(SEQUENCIA)
                        FROM '||EVE.NOMETAB||'
                        WHERE CODEMP = :CODEMP
                          AND DTREF = :DTREF
                          AND TPAMB = :TPAMB
                          AND SEQUENCIA < :SEQUENCIA_NEW';

            EXECUTE IMMEDIATE queSql INTO P_SEQUENCIA_OLD USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW;

            P_DTREF_OLD := P_DTREF;
        ELSIF EVE.GRUPO <> 'M' THEN
            queSql := ' SELECT NVL(MAX(DTREF), :DTREF)
                        FROM '||EVE.NOMETAB||'
                        WHERE CODEMP = :CODEMP
                          AND DTREF < :DTREF
                          AND TPAMB = :TPAMB';
            EXECUTE IMMEDIATE queSql INTO P_DTREF_OLD USING P_DTREF, P_CODEMP, P_DTREF, P_TPAMB;

            IF P_DTREF_OLD <> P_DTREF THEN
                queSql := ' SELECT NVL(MAX(SEQUENCIA),0)
                            FROM '||EVE.NOMETAB||'
                            WHERE CODEMP = :CODEMP
                              AND DTREF = :DTREF
                              AND TPAMB = :TPAMB';

                EXECUTE IMMEDIATE queSql INTO P_SEQUENCIA_OLD USING P_CODEMP, P_DTREF_OLD, P_TPAMB;
            ELSE
                P_SEQUENCIA_OLD := P_SEQUENCIA_NEW;
            END IF;
        ELSE
            P_SEQUENCIA_OLD := P_SEQUENCIA_NEW;
            P_DTREF_OLD := P_DTREF;
        END IF;

        IF EVE.GRUPO = 'M' THEN  /*MOVIMENTOS GRAVAM OS EVENTOS FILHOS PRIMEIRO*/     
            FOR EVEF IN (SELECT NOMEEVENTO, NOMETAB
                         FROM TRIMON
                         WHERE NOMETABPAI = EVE.NOMETAB
                         GROUP BY NOMEEVENTO, NOMETAB
                         ORDER BY NOMEEVENTO 
                        ) 
            LOOP
                SNK_PROCESSA_DADOS_REINF(P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_ATUAL, P_TIPDADOS, EVEF.NOMEEVENTO, EVEF.NOMETAB, P_SEQUENCIA_NEW, P_RESULT);
            END LOOP;
        END IF;

        IF EVE.NOMETABPAI IS NULL THEN
            DELETE FROM TRIVAR; 
            SNK_VERIF_ALTER_REINF(P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW, NULL /*NOME TAB PAI*/, EVE.NOMETAB, EVE.NOMEVIEW, EVE.GRUPO, EVE.VIEWDETALHE);
        END IF;

        P_INSERT_COLUMNS := ' ' || SNK_GET_COLUMNS_TABLE(EVE.NOMETAB, ' ');
        P_INSERT_VALUES  := P_INSERT_COLUMNS;

        P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' CODEMP', TO_CHAR (P_CODEMP)|| ' AS CODEMP');

        P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' DTREF', ' TO_DATE(SNK_FORMAT_DATE('''||P_DTREF||''', ''DD/MM/YYYY''), ''DD/MM/YYYY'') AS DTREF');

        P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' TPAMB', ' '''||P_TPAMB||''' AS TPAMB');

        P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' SEQUENCIA', ' ' ||TO_CHAR (P_SEQUENCIA_NEW)|| ' AS SEQUENCIA');

        IF EVE.NOMETABPAI IS NULL THEN
            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' STATUSREG', ' CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E''  THEN ''F'' ' 
                                                              ||             'ELSE ''P'' ' 
                                                              ||        'END AS STATUSREG');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' TIPO', ' CASE WHEN ( (DADOS.NRO_RECIBO_OLD IS NULL AND DADOS.NRO_RECIBOANT_OLD IS NULL) OR '
                                                              ||               '(DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD = ''E'') )THEN ''I'' ' 
                                                              ||        'WHEN DADOS.STATUS_REG_OLD = ''F'' AND DADOS.CONTROLE_OLD <> ''I'' THEN DADOS.CONTROLE_OLD ' 
                                                              ||        'ELSE DADOS.TIPO_OLD ' 
                                                              ||   'END AS TIPO');

            IF EVE.GRUPO = 'C' THEN
                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' INIVALIDNOVO', ' CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E'' THEN DADOS.INI_VALIDNOVO_OLD '
                                                              ||                    'ELSE NULL '
                                                              ||               'END AS INIVALIDNOVO');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' FIMVALIDNOVO', ' CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E'' THEN DADOS.FIM_VALIDNOVO_OLD '
                                                              ||                    'ELSE NULL '
                                                              ||               'END AS FIMVALIDNOVO');
            END IF;

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' NRORECIBO,', ' CASE WHEN DADOS.CHAVE_OLD IS NOT NULL AND DADOS.CONTROLE_OLD = ''I'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E'' THEN DADOS.NRO_RECIBO_OLD '
                                                              ||              'ELSE NULL ' 
                                                              ||         'END AS NRORECIBO,');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' NRORECIBOANT,', ' CASE WHEN DADOS.CHAVE_OLD IS NOT NULL AND DADOS.CONTROLE_OLD = ''I'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E'' THEN DADOS.NRO_RECIBOANT_OLD ' 
                                                              ||                 'WHEN DADOS.CHAVE_OLD IS NOT NULL AND DADOS.CONTROLE_OLD = ''A'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E'' THEN DADOS.NRO_RECIBO_OLD '
                                                              ||                 'ELSE NULL '
                                                              ||            'END AS NRORECIBOANT,');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' IDEVENTO', ' CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E'' THEN ID_EVENTO_OLD ' 
                                                              ||            'ELSE NULL '
                                                              ||       'END AS IDEEVENTO');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' CONTROLE', ' ''I'' AS CONTROLE');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' MSG', ' CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E'' THEN DADOS.MENSAGEM_OLD '
                                                              ||       'ELSE NULL '
                                                              ||  'END AS MSG');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' XMLEVENTO', ' CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E'' THEN DADOS.XML_EVENTO_OLD '
                                                              ||             'ELSE NULL '
                                                              ||        'END AS XMLEVENTO');

            P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, ' XMLRETORNO', ' CASE WHEN DADOS.CONTROLE_OLD = ''I'' AND DADOS.STATUS_REG_OLD = ''F'' AND DADOS.TIPO_OLD <> ''E'' THEN DADOS.XML_RETORNO_OLD '
                                                              ||              'ELSE NULL '
                                                              ||         'END AS XMLRETORNO');

            queSql :=                    'INSERT INTO '||EVE.NOMETAB||' ' 
                                      || 'SELECT '||P_INSERT_VALUES||' '     
                                      || 'FROM (SELECT '
                                      ||          'NVL(ANT.CONTROLE, '' '') AS CONTROLE_OLD ' 
                                      ||        ', ANT.NRORECIBO AS NRO_RECIBO_OLD '
                                      ||        ', ANT.NRORECIBOANT AS NRO_RECIBOANT_OLD '
                                      ||        ', ANT.TIPO AS TIPO_OLD '
                                      ||        ', ANT.CHAVE AS CHAVE_OLD ';

            IF EVE.GRUPO = 'C' THEN  
                queSql := queSql      ||        ', ANT.INIVALIDNOVO AS INI_VALIDNOVO_OLD '
                                      ||        ', ANT.FIMVALIDNOVO AS FIM_VALIDNOVO_OLD ';
            END IF;

            queSql := queSql          ||        ', ANT.STATUSREG AS STATUS_REG_OLD '
                                      ||        ', ANT.IDEVENTO AS ID_EVENTO_OLD '
                                      ||        ', ANT.MSG AS MENSAGEM_OLD '
                                      ||        ', ANT.XMLEVENTO AS XML_EVENTO_OLD '
                                      ||        ', ANT.XMLRETORNO AS XML_RETORNO_OLD '
                                      ||        ', V.* '
                                      ||       'FROM '||EVE.NOMEVIEW||' V '
                                      ||           'LEFT JOIN (SELECT '
                                      ||                         'OLD.CHAVE '
                                      ||                       ', OLD.CONTROLE '
                                      ||                       ', NRORECIBO '
                                      ||                       ', NRORECIBOANT '
                                      ||                       ', TIPO ';

            IF EVE.GRUPO = 'C' THEN
                queSql := queSql      ||                       ', INIVALIDNOVO '
                                      ||                       ', FIMVALIDNOVO ';
            END IF;

            queSql := queSql          ||                       ', STATUSREG '
                                      ||                       ', IDEVENTO '
                                      ||                       ', MSG '
                                      ||                       ', XMLEVENTO '
                                      ||                       ', XMLRETORNO '
                                      ||                      'FROM '||EVE.NOMETAB||' OLD '
                                      ||                      '  LEFT JOIN TRIVAR VAR ON VAR.CHAVE = OLD.CHAVE AND VAR.DTREF = OLD.DTREF AND VAR.SEQUENCIA = OLD.SEQUENCIA '
                                      ||                      'WHERE OLD.CODEMP = :CODEMP '
                                      ||                         'AND OLD.TPAMB = :TPAMB '
                                      ||                         'AND (VAR.CHAVE IS NOT NULL OR '
                                      ||                         '       (NOT EXISTS(SELECT 1 '
                                      ||                                            'FROM TRIVAR V '
                                      ||                                            'WHERE CHAVE = OLD.CHAVE) AND OLD.DTREF = :DTREF_OLD AND OLD.SEQUENCIA = :SEQUENCIA_OLD)) '
                                      ||                         ') ANT ON ANT.CHAVE = V.CHAVE '
                                      ||       'WHERE V.CODEMP = :CODEMP ';

            IF EVE.GRUPO = 'C' THEN
                queSql := queSql      ||          'AND :GRUPO = ''C'' ' 
                                      ||          'AND :DTREF BETWEEN V.INIVALID AND NVL(V.FIMVALID, :DTREF) '
                                      ||       ') DADOS ';

                EXECUTE IMMEDIATE queSql USING P_CODEMP, P_TPAMB, P_DTREF_OLD, P_SEQUENCIA_OLD, P_CODEMP, EVE.GRUPO, P_DTREF, P_DTREF;
            ELSE
                IF EVE.VIEWDETALHE = 'S' THEN /*A VIEW QUE É DETALHADA NÃO PRECISA PASSAR OS DADOS 'TPAMB' E 'SEQUENCIA' COMO PARAMETROS*/
                    queSql := queSql  ||          'AND DTREF = :DTREF ' 
                                      ||       ') DADOS';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_TPAMB, P_DTREF_OLD, P_SEQUENCIA_OLD, P_CODEMP, P_DTREF;
                ELSE
                    queSql := queSql  ||          'AND DTREF = :DTREF ' 
                                      ||          'AND TPAMB = :TPAMB '
                                      ||          'AND SEQUENCIA = :SEQUENCIA '
                                      ||       ') DADOS';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_TPAMB, P_DTREF_OLD, P_SEQUENCIA_OLD, P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW;
                END IF; 
            END IF;
        ELSE
            /*SÓ ENTRA AQUI PARA OS FILHOS*/
            queSql :=                    'INSERT INTO '||EVE.NOMETAB||' '
                                      || 'SELECT '||P_INSERT_VALUES||' '
                                      || 'FROM '||EVE.NOMEVIEW||' '
                                      || 'WHERE CODEMP = :CODEMP ';

            IF EVE.GRUPO = 'C' THEN
                queSql :=  queSql     ||    'AND :GRUPO = ''C'' ';

                EXECUTE IMMEDIATE queSql USING P_CODEMP, EVE.GRUPO;
            ELSE
                IF EVE.VIEWDETALHE = 'S' THEN /*A VIEW QUE É DETALHADA NÃO PRECISA PASSAR OS DADOS 'TPAMB' E 'SEQUENCIA' COMO PARAMETROS*/
                    queSql :=  queSql ||    'AND DTREF = :DTREF ';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF;
                ELSE
                    queSql :=  queSql ||    'AND DTREF = :DTREF ' 
                                      ||    'AND TPAMB = :TPAMB '
                                      ||    'AND SEQUENCIA = :SEQUENCIA ';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_NEW;
                END IF; 
            END IF;
        END IF;

        /*UTILIZADO QUANDO O INSERT NÃO FOI FEITO POR CONTA DE EXCLUSÃO, ASSIM PRECISAMOS CRIAR UMA NOVA LINHA PARA SE FAZER A EXCLUSÃO*/
        IF EVE.NOMETABPAI IS NULL THEN
            IF P_DTREF <> P_DTREF_OLD  OR P_SEQUENCIA_NEW <> P_SEQUENCIA_OLD THEN
                P_INSERT_COLUMNS := SNK_GET_COLUMNS_TABLE(EVE.NOMETAB, ' ');
                P_INSERT_VALUES := P_INSERT_COLUMNS; 

                P_INSERT_VALUES := REPLACE(P_INSERT_VALUES, ' ', '');
                P_INSERT_VALUES := 'O.'||REPLACE(P_INSERT_VALUES, ',', ',O.');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.CODEMP', 'O.CODEMP');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.DTREF', ':DTREF');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.TPAMB', 'O.TPAMB');

                P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.SEQUENCIA', ':SEQUENCIA');

				P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.STATUSREG', '''P''');

				P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.TIPO', '''E''');

				P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.NRORECIBO,', 'NULL,');

				P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.NRORECIBOANT,', 'O.NRORECIBO,');

				P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.IDEVENTO', 'NULL');

				P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.CONTROLE', '''I''');

				P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.MSG', 'NULL');

				P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.XMLEVENTO', 'NULL');

				P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.XMLRETORNO', 'NULL');

                queSql :=      'MERGE INTO '||EVE.NOMETAB||' N '
                            || 'USING (SELECT '||P_INSERT_COLUMNS||' '
                            ||        'FROM '||EVE.NOMETAB||' ' 
                            ||        'WHERE CODEMP = :CODEMP '
                            ||            'AND DTREF = :DTREF_OLD '
                            ||            'AND TPAMB = :TPAMB '
                            ||            'AND SEQUENCIA = :SEQUENCIA_OLD '
                            ||            'AND ( (STATUSREG = ''F'' AND NRORECIBO IS NOT NULL AND TIPO <> ''E'') OR '
                            ||                  '(STATUSREG <> ''F'' AND TIPO = ''E'' AND NRORECIBO IS NULL) OR '
                            ||                  '(STATUSREG <> ''F'' AND TIPO <> ''E'' AND NRORECIBOANT IS NOT NULL) '
                            ||                 ')'
                            ||        ') O '
                            || 'ON (N.CODEMP = O.CODEMP '
                            || 'AND N.DTREF = :DTREF '
                            || 'AND N.TPAMB = O.TPAMB '
                            || 'AND N.SEQUENCIA = :SEQUENCIA ' 
                            || 'AND N.CHAVE = O.CHAVE) '
                            || 'WHEN NOT MATCHED THEN INSERT ('||P_INSERT_COLUMNS||') '
                            || 'VALUES ('||P_INSERT_VALUES||')';

                EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF_OLD, P_TPAMB, P_SEQUENCIA_OLD, P_DTREF, P_SEQUENCIA_NEW, P_DTREF, P_SEQUENCIA_NEW;

                /*PERCORRENDO AS TABELAS FILHAS PARA INSERIR OS DADOS CORRESPONDENTES À TABELA PAI CUJO EVENTO SERÁ EXCLUÍDO*/
                FOR EVEM IN (WITH TABELAS(NOMEEVENTO, NOMETAB, ORDEM) AS
                                (
                                SELECT M.NOMEEVENTO, M.NOMETAB, M.ORDEM
                                FROM TRIMON M
                                WHERE NOMETABPAI = EVE.NOMETAB
                                UNION ALL
                                SELECT M.NOMEEVENTO, M.NOMETAB, M.ORDEM
                                FROM TRIMON M
                                      INNER JOIN TABELAS TB ON TB.NOMETAB = M.NOMETABPAI
                                )
                                SELECT *
                                FROM TABELAS
                                ORDER BY ORDEM
                            ) 
                LOOP
                    P_INSERT_COLUMNS := SNK_GET_COLUMNS_TABLE(EVEM.NOMETAB, ' ');
                    P_INSERT_VALUES := P_INSERT_COLUMNS; 

                    P_INSERT_VALUES := REPLACE(P_INSERT_VALUES, ' ', '');
                    P_INSERT_VALUES := 'O.'||REPLACE(P_INSERT_VALUES, ',', ',O.');

                    P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.CODEMP', 'O.CODEMP');

                    P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.DTREF', ':DTREF');

                    P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.TPAMB', 'O.TPAMB');

                    P_INSERT_VALUES := REPLACE (P_INSERT_VALUES, 'O.SEQUENCIA', ':SEQUENCIA');                    

                    queSql :=      'MERGE INTO '||EVEM.NOMETAB||' N '
                                || 'USING (SELECT '||P_INSERT_COLUMNS||' '
                                ||        'FROM '||EVEM.NOMETAB||' ' 
                                ||        'WHERE CODEMP = :CODEMP '
                                ||            'AND DTREF = :DTREF_OLD '
                                ||            'AND TPAMB = :TPAMB '
                                ||            'AND SEQUENCIA = :SEQUENCIA_OLD '
                                ||            'AND EXISTS(SELECT 1 '
                                ||                       'FROM '||EVE.NOMETAB||' P '
                                ||                       'WHERE P.CODEMP = '||EVEM.NOMETAB||'.CODEMP '
                                ||                           'AND P.DTREF = :DTREF '
                                ||                           'AND P.TPAMB = '||EVEM.NOMETAB||'.TPAMB '
                                ||                           'AND P.SEQUENCIA = :SEQUENCIA '
                                ||                           'AND P.CHAVE = '||EVEM.NOMETAB||'.CHAVE '
                                ||                           'AND P.TIPO = ''E'') '
                                ||        ') O ' 
                                || 'ON (N.CODEMP = O.CODEMP '
                                || 'AND N.DTREF = :DTREF '
                                || 'AND N.TPAMB = O.TPAMB '
                                || 'AND N.SEQUENCIA = :SEQUENCIA ' 
                                || 'AND N.CHAVE = O.CHAVE) '
                                || 'WHEN NOT MATCHED THEN INSERT ('||P_INSERT_COLUMNS||') '
                                || 'VALUES ('||P_INSERT_VALUES||')';

                    EXECUTE IMMEDIATE queSql USING P_CODEMP, P_DTREF_OLD, P_TPAMB, P_SEQUENCIA_OLD, P_DTREF, P_SEQUENCIA_NEW, P_DTREF, P_SEQUENCIA_NEW, P_DTREF, P_SEQUENCIA_NEW;
                END LOOP;
            END IF;
        END IF;

        IF EVE.GRUPO = 'C' THEN  /*MOVIMENTOS GRAVAM OS EVENTOS FILHOS PRIMEIRO*/     
            FOR EVEF IN (SELECT NOMEEVENTO, NOMETAB
                         FROM TRIMON
                         WHERE NOMETABPAI = EVE.NOMETAB
                         GROUP BY NOMEEVENTO, NOMETAB
                         ORDER BY NOMEEVENTO 
                        ) 
            LOOP
                SNK_PROCESSA_DADOS_REINF(P_CODEMP, P_DTREF, P_TPAMB, P_SEQUENCIA_ATUAL, P_TIPDADOS, EVEF.NOMEEVENTO, EVEF.NOMETAB, P_SEQUENCIA_NEW, P_RESULT);
            END LOOP;
        END IF;

        P_RESULT := P_SEQUENCIA_NEW;
    END LOOP;

    /*CHAMANDO A TOTALIZAÇÃO DO RESUMO PARA A SEQUENCIA GERADA*/
    IF P_NOMETAB IS NULL THEN
        SNK_TOTALIZA_RESUMO_REINF(P_CODEMP, P_DTREF, P_TPAMB, P_RESULT);
    END IF;    
EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    IF queSql IS NOT NULL THEN
        SELECT COUNT(1) INTO P_COUNT
        FROM LOGREINF
        WHERE DTOCOR = SYSDATE
         AND CODUSU = STP_GET_CODUSULOGADO();
        IF P_COUNT = 0 THEN
            INSERT INTO LOGREINF(DTOCOR, CODUSU, SQLERR)
                SELECT SYSDATE, STP_GET_CODUSULOGADO(), queSql FROM DUAL; 
        END IF;
    END IF;
    COMMIT;
    RAISE_APPLICATION_ERROR(-20101, SQLERRM);
END;
/
 
 
 
/*
Requer    : 4210012
Conexao   : ORCL
Data      : 22/05/2018 14:22:25
Num.Script: 55594-0-1000
Nro. O.S. : 1148508
Nome      : INSERE - THOOBJ - 5559300
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE SNK_PROCESSA_DADOS_REINF
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210013
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'SNK_PROCESSA_DADOS_REINF' NOMEOBJ, 55593 NUMSCRIPT, SYSDATE DTALTER, 'PROCEDURE' TIPO, 'bb4c1fc8ded56790956e5e4b8b9b54a5' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'SNK_PROCESSA_DADOS_REINF' and THO.hashcode = 'bb4c1fc8ded56790956e5e4b8b9b54a5')
/
 
 
 
/*
Requer    : 4210012
Conexao   : ORCL
Data      : 17/05/2018 17:14:14
Num.Script: 55617-0-0
Nro. O.S. : 1148160
Nome      : Alterar - TRG_DLT_TGFFIN 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - TRG_DLT_TGFFIN 
NomeObjeto: TRG_DLT_TGFFIN 
TipoObjeto: TRIGGER
NomeTabela: TGFFIN 
Executar  : SE_EXISTIR
Ocorrencia: 4210013
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE TRIGGER TRG_DLT_TGFFIN BEFORE DELETE
ON TGFFIN
FOR EACH ROW
DECLARE
  P_COUNT       INTEGER;
  P_NUNOTAORIG  INTEGER;
  P_CODVEND     INTEGER;
  P_VLRCOM      FLOAT;
  P_TOTAL       FLOAT;
  P_TIPO        TGFCOM.TIPO%TYPE;
  P_NUMOSORIG   TGFCOM.NUMOSORIG%TYPE;
  P_NUMITEMORIG TGFCOM.NUMITEMORIG%TYPE;
  ERRMSG        VARCHAR2(255);
  ERROR         EXCEPTION;
  P_VALIDAR    BOOLEAN;
  P_SUMVALOR   TGFMCX.VALOR%TYPE;
  P_NUFIN     NUMBER(10);
  P_CODFUNC   NUMBER(10);
  P_COUNT_D    INTEGER;
  

  CURSOR CURCOM IS /* notas que dariam chave duplicada */
    SELECT NUNOTAORIG,
    CODVEND,
    VLRCOM,
    TIPO,
    NUMOSORIG,
    NUMITEMORIG
    FROM TGFCOM C1
    WHERE NUFIN IN (:OLD.NUFIN, (:OLD.NUFIN * -1))
    FOR UPDATE;

BEGIN
  IF STP_GET_ATUALIZANDO THEN
    RETURN;
  END IF;

  /*
  sincronização de dados
  */
  P_VALIDAR := Fpodevalidar('TGFFIN');

  IF (:OLD.NUBCO IS NOT NULL) THEN
    ERRMSG := 'Título já baixado, estorne-o primeiro. Financeiro de Nro Único: '|| TO_CHAR(:OLD.NUFIN) ||'.';
    RAISE ERROR;
  END IF;

  -- OS 864848
  SELECT COUNT(1)
  INTO P_COUNT
  FROM TGFRCI RCI
  WHERE RCI.NUFIN = :OLD.NUFIN;
  
  IF (P_COUNT > 0) THEN
    ERRMSG := 'O título de número único '|| TO_CHAR(:OLD.NUFIN) ||' possui ligação com remessa. Para continuar com a exclusão do título será necessário desvinculá-lo da remessa, pela tela Movimentação Financeira.';
    RAISE ERROR;
  END IF;
  -- Fim OS 864848

  IF ((:OLD.ORIGEM = 'F') AND (:OLD.NUMNOTA = :OLD.NUFIN) AND (:OLD.PROVISAO = 'N')) THEN
    IF (:OLD.RECDESP = 1) THEN
      SELECT COUNT(1)
      INTO P_COUNT
      FROM TGFFRP FRP
      WHERE FRP.NUFINREC = :OLD.NUFIN;
    ELSIF (:OLD.RECDESP = -1) THEN
      SELECT COUNT(1)
      INTO P_COUNT
      FROM TGFFRP FRP
      WHERE FRP.NUFINDESP = :OLD.NUFIN;
    END IF;    
    IF (P_COUNT <> 0) THEN
      ERRMSG := 'Financeiro ligado a um Rateio de Holding, não pode ser excluído. Financeiro de Nro Único: '|| TO_CHAR(:OLD.NUFIN) ||'.';
      RAISE ERROR;
    END IF;
  END IF;

  IF ((:OLD.PROVISAO = 'N') AND (:OLD.DHBAIXA IS NOT NULL)) THEN
    ERRMSG := 'Impossível excluir. O título já foi baixado. Financeiro de Nro Único: '|| TO_CHAR(:OLD.NUFIN) ||'.';
    RAISE ERROR;
  END IF;
    
  SELECT COUNT(1) INTO P_COUNT_D 
  FROM  TCBINT C 
  WHERE C.NUNICO = :OLD.NUFIN 
    AND C.ORIGEM = 'F' 
    AND C.VLRLANC = 0;
  IF(P_COUNT_D <> 0) THEN
      DELETE FROM TCBINT C 
    WHERE C.NUNICO = :OLD.NUFIN 
      AND C.ORIGEM = 'F' 
    AND C.VLRLANC = 0;
  END IF;

  SELECT COUNT(1)
  INTO P_COUNT
  FROM TCBINT C
  WHERE C.NUNICO = :OLD.NUFIN
  AND C.ORIGEM IN ('B','F');
  
  IF (P_COUNT <> 0) THEN
    ERRMSG := 'Título já foi contabilizado, não pode ser excluído. Financeiro de Nro Único: '|| TO_CHAR(:OLD.NUFIN) ||'.';
    RAISE ERROR;
  END IF;

  IF ((:OLD.ORIGEM = 'F') AND (:OLD.CODTIPOPER <> 0)) THEN
    SELECT COUNT(1)
    INTO P_COUNT
    FROM TGFLIV LIV
    WHERE LIV.NUNOTA = :OLD.NUFIN
    AND LIV.ORIGEM = ('F');
    IF (P_COUNT <> 0) THEN
      ERRMSG := 'Financeiro já foi gerado nos Livros Fiscais, não pode ser excluído. Financeiro de Nro Único: '|| TO_CHAR(:OLD.NUFIN) ||'.';
      RAISE ERROR;
    END IF;
  END IF;

  IF ((:OLD.RECDESP = -1) AND (:OLD.ORIGEM = 'F')) THEN
      SELECT COUNT(1) INTO P_COUNT_D
    FROM TGMTRA 
    WHERE NUFIN = :OLD.NUFIN;
    IF(P_COUNT_D<>0) THEN 
    DELETE FROM TGMTRA 
    WHERE NUFIN = :OLD.NUFIN;
    END IF;
  END IF;
  SELECT COUNT(1) INTO P_COUNT_D
  FROM TGFRAT
  WHERE NUFIN = :OLD.NUFIN
   AND ORIGEM IN ('F', 'R');
    IF(P_COUNT_D<>0) THEN 
    DELETE FROM TGFRAT
    WHERE NUFIN = :OLD.NUFIN
      AND ORIGEM IN ('F', 'R');
    END IF;
  SELECT COUNT(1) INTO P_COUNT_D
  FROM TSILIB
  WHERE NUCHAVE = :OLD.NUFIN
  AND TABELA = 'TGFFIN';
  IF(P_COUNT_D<>0) THEN   
    DELETE FROM TSILIB
    WHERE NUCHAVE = :OLD.NUFIN
    AND TABELA = 'TGFFIN';
    END IF;
  IF (:OLD.NUNOTA IS NULL) THEN
      SELECT COUNT(1) INTO P_COUNT_D
    FROM TCSFAT
    WHERE NUFINREAL = :OLD.NUFIN
    OR NUFINPROVISAO = :OLD.NUFIN;
        IF(P_COUNT_D<>0) THEN   
        DELETE FROM TCSFAT
      WHERE NUFINREAL = :OLD.NUFIN
      OR NUFINPROVISAO = :OLD.NUFIN;
    END IF;
  END IF;

  SELECT COUNT(1)
  INTO P_COUNT
  FROM TGFCOM
  WHERE NUFINORIG = :OLD.NUFIN;

  IF (P_COUNT > 0) THEN
    SELECT NVL(MAX(NUFIN),0), NVL(MAX(CODFUNC),0) 
    INTO P_NUFIN,  P_CODFUNC
    FROM TGFCOM
    WHERE NUFINORIG = :OLD.NUFIN;
    
    IF ((P_NUFIN <> 0) OR (P_CODFUNC <> 0))  THEN
       ERRMSG :=  'Essa comissão já foi paga. Exclusão proibida. Financeiro de Nro Único: '|| TO_CHAR(:OLD.NUFIN) ||'.';
    RAISE ERROR;
    ELSE 
          SELECT COUNT(1) INTO P_COUNT_D
          FROM TGFCOM   
      WHERE NUFINORIG = :OLD.NUFIN;
      IF(P_COUNT_D<>0) THEN   
            DELETE FROM TGFCOM   
        WHERE NUFINORIG = :OLD.NUFIN;
        END IF;  
    END IF;
  END IF;

  SELECT SUM(MCX.VALOR * MCX.RECDESP) 
  INTO P_SUMVALOR
  FROM TGFMCX MCX
  WHERE MCX.NROUNICO = :OLD.NUFIN 
  AND MCX.ORIGEM = 'F';

  IF ((P_SUMVALOR IS NOT NULL) AND (P_SUMVALOR <>0)) THEN
    ERRMSG := 'Título Núm. Único: '||:OLD.NUFIN||' possui baixa no movimento de caixa e não possui o estorno no movimento de caixa.';
    RAISE ERROR;
  END IF;

  SELECT COUNT(1) INTO P_COUNT
  FROM TGMTRA 
  WHERE NUFIN = :OLD.NUFIN
  AND STATUS = 'A';
  
  IF (P_COUNT <> 0) THEN
    ERRMSG := 'Já existe aprovação de orçamento, não pode ser excluído. Financeiro de Nro Único: '|| TO_CHAR(:OLD.NUFIN) ||'.';
    RAISE ERROR;
  END IF;

  IF ((:OLD.ORIGEM = 'F') AND (:OLD.PROVISAO = 'N')) THEN
       
    SELECT COUNT(1) INTO P_COUNT_D
    FROM TGFCOM
    WHERE NUFIN = :OLD.NUFIN
      AND (VLRCOM = 0 OR TIPO = 'D');
        IF P_COUNT_D<>0 THEN  
         DELETE FROM TGFCOM
      WHERE NUFIN = :OLD.NUFIN
        AND (VLRCOM = 0 OR TIPO = 'D');
        END IF;
        SELECT COUNT(1) INTO P_COUNT_D    
    FROM TGFCOM
    WHERE NUFIN = (:OLD.NUFIN * -1);
        IF P_COUNT_D<>0 THEN  
      DELETE FROM TGFCOM
      WHERE NUFIN = (:OLD.NUFIN * -1); /* tem que apagar todas que tenham nufin negativo*/
        END IF;
    OPEN CURCOM;
    FETCH CURCOM
    INTO P_NUNOTAORIG,
    P_CODVEND,
    P_TOTAL,
    P_TIPO,
    P_NUMOSORIG,
      P_NUMITEMORIG;

    WHILE CURCOM%FOUND LOOP
      SELECT COUNT(1)
      INTO P_COUNT
      FROM TGFCOM
      WHERE NUNOTAORIG = P_NUNOTAORIG
      AND CODVEND = P_CODVEND
      AND NUFIN = 0
      AND NUFINORIG = 0
      AND CODFUNC IS NULL
      AND TIPO = P_TIPO
      AND NUMOSORIG = P_NUMOSORIG
      AND NUMITEMORIG = P_NUMITEMORIG;

      IF (P_COUNT > 0) THEN
        UPDATE TGFCOM
        SET VLRCOM = VLRCOM + P_TOTAL
        WHERE NUNOTAORIG = P_NUNOTAORIG
        AND CODVEND = P_CODVEND
        AND NUFIN = 0
        AND NUFINORIG = 0
        AND CODFUNC IS NULL
        AND TIPO = P_TIPO
        AND NUMOSORIG = P_NUMOSORIG
        AND NUMITEMORIG = P_NUMITEMORIG;

        UPDATE TGFCOM
        SET VLRCOM = 0
        WHERE CURRENT OF CURCOM;

        DELETE FROM TGFCOM
        WHERE CURRENT OF CURCOM;
      ELSE
        UPDATE TGFCOM
        SET NUFIN = 0,
         NUFINORIG = DECODE(NUNOTAORIG,0,NUFINORIG,0),
        REFERENCIA = NULL
        WHERE CURRENT OF CURCOM;
      END IF;

      FETCH CURCOM
      INTO P_NUNOTAORIG,
      P_CODVEND,
      P_TOTAL,
      P_TIPO,
      P_NUMOSORIG,
      P_NUMITEMORIG;
    END LOOP;
    CLOSE CURCOM;
  END IF;

  IF :OLD.DESDOBDUPL = 'ZZ' THEN
    Tgffin_Pkg.V_CONTADOR := Tgffin_Pkg.V_CONTADOR + 1;
    Tgffin_Pkg.V_NUMDUPL(Tgffin_Pkg.V_CONTADOR) := :OLD.NUMDUPL;
  END IF;

  SELECT COUNT(1) INTO P_COUNT
  FROM TGFIXN 
  WHERE NUFIN = :OLD.NUFIN;
  IF P_COUNT > 0 THEN
    DELETE FROM TGFIXN WHERE NUFIN = :OLD.NUFIN;
  END IF;
  
  RETURN;

EXCEPTION
  WHEN ERROR THEN
    /*
    Sincronização de dados não faz validações
    */
    IF (P_VALIDAR) THEN
      RAISE_APPLICATION_ERROR(-20101, ERRMSG);
    END IF;

END;
/
 
 
 
/*
Requer    : 4210012
Conexao   : ORCL
Data      : 17/05/2018 17:14:14
Num.Script: 55618-0-1000
Nro. O.S. : 1148160
Nome      : INSERE - THOOBJ - 5561700
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : INSERIR - THOOBJ
NomeObjeto: HASHCODE TRG_DLT_TGFFIN
TipoObjeto: TABLE
NomeTabela: THO_HASHCODE
Executar  : SEMPRE
Ocorrencia: 4210013
Autor     : INSPETORDB
FullVersao: Sim
Correcao  : N
*/
 
 
INSERT INTO THO_HASHCODE(NOMEOBJ, NUMSCRIPT, DTALTER, TIPO, HASHCODE, TIPOASSINATURA)
SELECT 'TRG_DLT_TGFFIN' NOMEOBJ, 55617 NUMSCRIPT, SYSDATE DTALTER, 'TRIGGER' TIPO, '790da4af22fddaddc328d90a5a07fde7' HASHCODE, 'Create Or Replace Object' TIPOASSINATURA 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM THO_HASHCODE THO WHERE 
THO.NOMEOBJ = 'TRG_DLT_TGFFIN' and THO.hashcode = '790da4af22fddaddc328d90a5a07fde7')
/
 
 
 
/*
Requer    : 4210012
Conexao   : ORCL
Data      : 18/05/2018 13:30:55
Num.Script: 55623-0-0
Nro. O.S. : 1140733
Nome      : Dropar - CKC_REDICMSBCPISCONFINS_TGFEMP
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Dropar - CKC_REDICMSBCPISCONFINS_TGFEMP
NomeObjeto: CKC_REDICMSBCPISCONFINS_TGFEMP
TipoObjeto: CONSTRAINT
NomeTabela: TGFEMP
Executar  : SE_EXISTIR
Ocorrencia: 4210013
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFEMP DROP CONSTRAINT CKC_REDICMSBCPISCONFINS_TGFEMP
/
 
 
 
/*
Requer    : 4210012
Conexao   : ORCL
Data      : 18/05/2018 13:30:55
Num.Script: 55624-0-0
Nro. O.S. : 1140733
Nome      : Criar - CKC_REDICMSBCPISCONFINS_TGFEMP 
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Criar - CKC_REDICMSBCPISCONFINS_TGFEMP 
NomeObjeto: CKC_REDICMSBCPISCONFINS_TGFEMP 
TipoObjeto: CONSTRAINT
NomeTabela: TGFEMP 
Executar  : SE_NAO_EXISTIR
Ocorrencia: 4210013
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
ALTER TABLE TGFEMP ADD CONSTRAINT CKC_REDICMSBCPISCONFINS_TGFEMP CHECK (REDICMSBCPISCONFINS IS NULL OR REDICMSBCPISCONFINS IN ('D', 'N', 'O', 'S'))
/
 
 
 
/*
Requer    : 4210012
Conexao   : ORCL
Data      : 17/05/2018 19:00:34
Num.Script: 55633-0-0
Nro. O.S. : 1185925
Nome      : Alterar - VGF_EVENTO_S2206
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VGF_EVENTO_S2206
NomeObjeto: VGF_EVENTO_S2206
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210013
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE FORCE VIEW VGF_EVENTO_S2206
AS
   SELECT NOVO.TPINSCEMPREGADOR,
          NOVO.NRINSCEMPREGADOR,
          NOVO.CPFTRAB,
          NOVO.NISTRAB,
          NOVO.MTVALTER,
          NOVO.JUSTPRORR,
          NOVO.DSCALT,
          CAST(NULL AS DATE) AS DTEF,
          NOVO.DTALTERACAO,
          NOVO.MATRICULA,
          NOVO.TPREGTRAB,
          NOVO.TPREGPREV,
          NOVO.NRRECINFPRELIM,
          NOVO.CADINI,
          NOVO.DTADM,
          NOVO.TPADMISSAO,
          NOVO.INDADMISSAO,
          NOVO.TPREGJOR,
          NOVO.NATATIVIDADE,
          NOVO.DTBASE,
          NOVO.CNPJSINDCATEGPROF,
          NOVO.OPCFGTS,
          NOVO.DTOPCFGTS,
          NOVO.HIPLEG,
          NOVO.JUSTCONTR,
          NOVO.TPINCLCONTR,
          NOVO.TPINSCIDETOMADORSERV,
          NOVO.NRINSCIDETOMADORSERV,
          NOVO.TPINSCIDEESTABVINC,
          NOVO.NRINSCIDEESTABVINC,
          NOVO.CPFTRABSUBST,
          NOVO.INDPROVIM,
          NOVO.TPPROV,
          NOVO.DTNOMEACAO,
          NOVO.DTPOSSE,
          NOVO.DTEXERCICIO,
          NOVO.TPPLANRP,
          NOVO.NRPROCJUDINFODECJUD,
          NOVO.CODCARGO,
          NOVO.CODFUNCAO,
          NOVO.CODCATEG,
          NOVO.CODCATEG2,
          NOVO.CODCARREIRA,
          NOVO.DTINGRCARR,
          NOVO.VRSALFX,
          NOVO.UNDSALFIXO,
          NOVO.DSCSALVAR,
          NOVO.TPCONTR,
          NOVO.DTTERM,
          NOVO.CLAUASSEG,
          NOVO.TPINSCLOCALTRABGERAL,
          NOVO.NRINSCLOCALTRABGERAL,
          NOVO.TPLOGRADLOCALTRABDOM,
          NOVO.DSCLOGRADLOCALTRABDOM,
          NOVO.NRLOGRADLOCALTRABDOM,
          NOVO.COMPLEMENTOLOCALTRABDOM,
          NOVO.BAIRROLOCALTRABDOM,
          NOVO.CEPLOCALTRABDOM,
          NOVO.CODMUNICLOCALTRABDOM,
          NOVO.UFLOCALTRABDOM,
          NOVO.QTDHRSSEM,
          NOVO.TPJORNADA,
          NOVO.DSCTPJORN,
          NOVO.TMPPARC,
          NOVO.CNPJSINDTRAB,
          NOVO.NRPROCJUDALVARAJUDICIAL,
          NOVO.CNPJEMPREGANT,
          NOVO.MATRICANT,
          NOVO.DTINIVINCULO,
          NOVO.OBSERVACAOSUCESSAOVINC,
          NOVO.DTINIAFAST,
          NOVO.CODMOTAFAST,
          NOVO.DTDESLIG,
          NOVO.CODEMP,
          NOVO.CHAVE
     FROM VGF_EVENTO_S2200_BASE NOVO
    WHERE     NOVO.SITESOCIAL IN ('6', 'T')
          AND EXISTS
                 (SELECT 1
                    FROM TFPS2206 VELHO
                   WHERE     NOVO.CODEMP = VELHO.CODEMP
                         AND NOVO.TPAMB = VELHO.TPAMB
                         AND NOVO.CHAVE = VELHO.CHAVE)
   UNION
   SELECT ULTIMO.TPINSCEMPREGADOR,
          ULTIMO.NRINSCEMPREGADOR,
          ULTIMO.CPFTRAB,
          ULTIMO.NISTRAB,
          NULL AS MTVALTER,
          NULL AS JUSTPRORR,
          NULL AS DSCALT,
          NULL AS DTEF,
          NULL AS DTALTERACAO,
          ULTIMO.MATRICULA,
          ULTIMO.TPREGTRAB,
          ULTIMO.TPREGPREV,
          ULTIMO.NRRECINFPRELIM,
          ULTIMO.CADINI,
          ULTIMO.DTADM,
          ULTIMO.TPADMISSAO,
          ULTIMO.INDADMISSAO,
          ULTIMO.TPREGJOR,
          ULTIMO.NATATIVIDADE,
          ULTIMO.DTBASE,
          ULTIMO.CNPJSINDCATEGPROF,
          ULTIMO.OPCFGTS,
          ULTIMO.DTOPCFGTS,
          ULTIMO.HIPLEG,
          ULTIMO.JUSTCONTR,
          ULTIMO.TPINCLCONTR,
          ULTIMO.TPINSCIDETOMADORSERV,
          ULTIMO.NRINSCIDETOMADORSERV,
          ULTIMO.TPINSCIDEESTABVINC,
          ULTIMO.NRINSCIDEESTABVINC,
          ULTIMO.CPFTRABSUBST,
          ULTIMO.INDPROVIM,
          ULTIMO.TPPROV,
          ULTIMO.DTNOMEACAO,
          ULTIMO.DTPOSSE,
          ULTIMO.DTEXERCICIO,
          ULTIMO.TPPLANRP,
          ULTIMO.NRPROCJUDINFODECJUD,
          ULTIMO.CODCARGO,
          ULTIMO.CODFUNCAO,
          ULTIMO.CODCATEG,
          ULTIMO.CODCATEG2,
          ULTIMO.CODCARREIRA,
          ULTIMO.DTINGRCARR,
          ULTIMO.VRSALFX,
          ULTIMO.UNDSALFIXO,
          ULTIMO.DSCSALVAR,
          ULTIMO.TPCONTR,
          ULTIMO.DTTERM,
          ULTIMO.CLAUASSEG,
          ULTIMO.TPINSCLOCALTRABGERAL,
          ULTIMO.NRINSCLOCALTRABGERAL,
          ULTIMO.TPLOGRADLOCALTRABDOM,
          ULTIMO.DSCLOGRADLOCALTRABDOM,
          ULTIMO.NRLOGRADLOCALTRABDOM,
          ULTIMO.COMPLEMENTOLOCALTRABDOM,
          ULTIMO.BAIRROLOCALTRABDOM,
          ULTIMO.CEPLOCALTRABDOM,
          ULTIMO.CODMUNICLOCALTRABDOM,
          ULTIMO.UFLOCALTRABDOM,
          ULTIMO.QTDHRSSEM,
          ULTIMO.TPJORNADA,
          ULTIMO.DSCTPJORN,
          ULTIMO.TMPPARC,
          ULTIMO.CNPJSINDTRAB,
          ULTIMO.NRPROCJUDALVARAJUDICIAL,
          ULTIMO.CNPJEMPREGANT,
          ULTIMO.MATRICANT,
          ULTIMO.DTINIVINCULO,
          ULTIMO.OBSERVACAOSUCESSAOVINC,
          ULTIMO.DTINIAFAST,
          ULTIMO.CODMOTAFAST,
          ULTIMO.DTDESLIG,
          ULTIMO.CODEMP,
          ULTIMO.CHAVE
     FROM VGF_EVENTO_S2200_BASE NOVO, TFPS2200 ULTIMO
    WHERE     NOVO.SITESOCIAL IN ('O', '5')
          AND NOVO.CODEMP = ULTIMO.CODEMP
          AND NOVO.TPAMB = ULTIMO.TPAMB
          AND NOVO.CHAVE = ULTIMO.CHAVE
          AND ULTIMO.DTREF = (SELECT SNK_GET_DTREF_ESOCIAL () FROM DUAL)
          AND ULTIMO.SEQUENCIA =
                 (SELECT SNK_GET_SEQ_ATUAL_ESOCIAL () FROM DUAL)
          AND ULTIMO.STATUS = 'F'
/
 
 
 
/*
Requer    : 4210012
Conexao   : ORCL
Data      : 17/05/2018 19:00:35
Num.Script: 55634-0-0
Nro. O.S. : 1185925
Nome      : Alterar - VGF_EVENTO_S2306
Status    : SCRIPT COMPLETO DA VERSÃO
Objetivo  : Alterar - VGF_EVENTO_S2306
NomeObjeto: VGF_EVENTO_S2306
TipoObjeto: VIEW
NomeTabela: 
Executar  : SE_EXISTIR
Ocorrencia: 4210013
Autor     : ROGERIO
FullVersao: Sim
Correcao  : N
*/
 
 
CREATE OR REPLACE VIEW VGF_EVENTO_S2306
AS
   SELECT NOVO.TPINSCEMPREGADOR,
          NOVO.NRINSCEMPREGADOR,
          NOVO.CPFTRAB,
          NOVO.NISTRAB,
          NOVO.CODCATEG,
          NOVO.DTALTERACAO,
          CAST(NULL AS DATE) AS DTREF,
          NOVO.NATATIVIDADE,
          NOVO.CODCARGO,
          NOVO.CODFUNCAO,
          NOVO.VRSALFX,
          NOVO.UNDSALFIXO,
          NOVO.DSCSALVAR,
          NOVO.NATESTAGIO,
          NOVO.NIVESTAGIO,
          NOVO.AREAATUACAO,
          NOVO.NRAPOL,
          NOVO.VLRBOLSA,
          NOVO.DTPREVTERM,
          NOVO.CNPJINSTENSINO,
          SUBSTR (NOVO.NMRAZAOINSTENS, 1, 100) AS NMRAZAOINSTENS,
          NOVO.DSCLOGRADINSTENS,
          NOVO.NRLOGRADINSTENS,
          NOVO.BAIRROINSTENS,
          NOVO.CEPINSTENS,
          NOVO.CODMUNICINSTENS,
          NOVO.UFINSTENS,
          NOVO.CNPJAGNTINTEG,
          SUBSTR (NOVO.NMRAZAOAGNTINTEG, 1, 100) AS NMRAZAOAGNTINTEG,
          NOVO.DSCLOGRADAGNTINTEG,
          NOVO.NRLOGRADAGNTINTEG,
          NOVO.BAIRROAGNTINTEG,
          NOVO.CEPAGNTINTEG,
          NOVO.CODMUNICAGNTINTEG,
          NOVO.UFAGNTINTEG,
          NOVO.CPFSUPERVISOR,
          NOVO.NMSUPERV,
          NOVO.DTINIAFAST,
          NOVO.CODMOTAFAST,
          NOVO.DTTERM,
          NOVO.CODEMP,
          NOVO.CHAVE
     FROM VGF_EVENTO_S2300_BASE NOVO
    WHERE     NOVO.SITESOCIAL IN ('6', 'T')
          AND EXISTS
                 (SELECT 1
                    FROM TFPS2306 VELHO
                   WHERE     NOVO.CODEMP = VELHO.CODEMP
                         AND NOVO.TPAMB = VELHO.TPAMB
                         AND NOVO.CHAVE = VELHO.CHAVE)
   UNION
   SELECT ULTIMO.TPINSCEMPREGADOR,
          ULTIMO.NRINSCEMPREGADOR,
          ULTIMO.CPFTRAB,
          ULTIMO.NISTRAB,
          ULTIMO.CODCATEG,
          NULL AS DTALTERACAO,
          CAST(NULL AS DATE) AS DTEF,
          ULTIMO.NATATIVIDADE,
          ULTIMO.CODCARGO,
          ULTIMO.CODFUNCAO,
          ULTIMO.VRSALFX,
          ULTIMO.UNDSALFIXO,
          ULTIMO.DSCSALVAR,
          ULTIMO.NATESTAGIO,
          ULTIMO.NIVESTAGIO,
          ULTIMO.AREAATUACAO,
          ULTIMO.NRAPOL,
          ULTIMO.VLRBOLSA,
          ULTIMO.DTPREVTERM,
          ULTIMO.CNPJINSTENSINO,
          SUBSTR (ULTIMO.NMRAZAOINSTENS, 1, 100) AS NMRAZAOINSTENS,
          ULTIMO.DSCLOGRADINSTENS,
          ULTIMO.NRLOGRADINSTENS,
          ULTIMO.BAIRROINSTENS,
          ULTIMO.CEPINSTENS,
          ULTIMO.CODMUNICINSTENS,
          ULTIMO.UFINSTENS,
          ULTIMO.CNPJAGNTINTEG,
          SUBSTR (ULTIMO.NMRAZAOAGNTINTEG, 1, 100) AS NMRAZAOAGNTINTEG,
          ULTIMO.DSCLOGRADAGNTINTEG,
          ULTIMO.NRLOGRADAGNTINTEG,
          ULTIMO.BAIRROAGNTINTEG,
          ULTIMO.CEPAGNTINTEG,
          ULTIMO.CODMUNICAGNTINTEG,
          ULTIMO.UFAGNTINTEG,
          ULTIMO.CPFSUPERVISOR,
          ULTIMO.NMSUPERV,
          ULTIMO.DTINIAFAST,
          ULTIMO.CODMOTAFAST,
          ULTIMO.DTTERM,
          ULTIMO.CODEMP,
          ULTIMO.CHAVE
     FROM VGF_EVENTO_S2300_BASE NOVO, TFPS2300 ULTIMO
    WHERE     NOVO.SITESOCIAL IN ('O', '5')
          AND NOVO.CODEMP = ULTIMO.CODEMP
          AND NOVO.TPAMB = ULTIMO.TPAMB
          AND NOVO.CHAVE = ULTIMO.CHAVE
          AND ULTIMO.DTREF = (SELECT SNK_GET_DTREF_ESOCIAL () FROM DUAL)
          AND ULTIMO.SEQUENCIA =
                 (SELECT SNK_GET_SEQ_ATUAL_ESOCIAL () FROM DUAL)
          AND ULTIMO.STATUS = 'F'
/
 
 
 
/*
Conexao   : ORCL
NomeObjeto: UPDATE TSIPAR INTEIRO
TipoObjeto: TABLE
NomeTabela: 
Executar  : SEMPRE
Ocorrencia: 4210013
FullVersao: Sim
*/
 
 
UPDATE TSIPAR SET INTEIRO = 4210013 WHERE CHAVE = 'VERSAOATUALDB'
/
